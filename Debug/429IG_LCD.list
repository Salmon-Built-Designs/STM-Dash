
429IG_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002ef30  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004aa4  0802f0e0  0802f0e0  0003f0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000d818  08033b84  08033b84  00043b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000010  0804139c  0804139c  0005139c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 IntFlashSection 000ac7dc  080413ac  080413ac  000513ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000140  080edb88  080edb88  000fdb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080edcc8  080edcc8  00100100  2**0
                  CONTENTS
  8 .ARM          00000008  080edcc8  080edcc8  000fdcc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080edcd0  080edcd0  00100100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080edcd0  080edcd0  000fdcd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080edce4  080edce4  000fdce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000100  20000000  080edcec  00100000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ccmram       00000000  10000000  10000000  00100100  2**0
                  CONTENTS
 14 .bss          0000b500  20000100  20000100  00100100  2**2
                  ALLOC
 15 ._user_heap_stack 00000c00  2000b600  2000b600  00100100  2**0
                  ALLOC
 16 .ARM.attributes 00000030  00000000  00000000  00100100  2**0
                  CONTENTS, READONLY
 17 .debug_info   0009822e  00000000  00000000  00100130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00010c9c  00000000  00000000  0019835e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000038e8  00000000  00000000  001a9000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003340  00000000  00000000  001ac8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00033001  00000000  00000000  001afc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004169b  00000000  00000000  001e2c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001108d4  00000000  00000000  002242c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000d2  00000000  00000000  00334b98  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000f5e0  00000000  00000000  00334c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0802f0c8 	.word	0x0802f0c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	0802f0c8 	.word	0x0802f0c8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96e 	b.w	8000d70 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 8083 	bne.w	8000bc2 <__udivmoddi4+0x116>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d947      	bls.n	8000b52 <__udivmoddi4+0xa6>
 8000ac2:	fab2 f282 	clz	r2, r2
 8000ac6:	b142      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	f1c2 0020 	rsb	r0, r2, #32
 8000acc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	4097      	lsls	r7, r2
 8000ad4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ae4:	fa1f fe87 	uxth.w	lr, r7
 8000ae8:	fb08 c116 	mls	r1, r8, r6, ip
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb06 f10e 	mul.w	r1, r6, lr
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000afe:	f080 8119 	bcs.w	8000d34 <__udivmoddi4+0x288>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8116 	bls.w	8000d34 <__udivmoddi4+0x288>
 8000b08:	3e02      	subs	r6, #2
 8000b0a:	443b      	add	r3, r7
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3310 	mls	r3, r8, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	193c      	adds	r4, r7, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8105 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f240 8102 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b34:	3802      	subs	r0, #2
 8000b36:	443c      	add	r4, r7
 8000b38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3c:	eba4 040e 	sub.w	r4, r4, lr
 8000b40:	2600      	movs	r6, #0
 8000b42:	b11d      	cbz	r5, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c5 4300 	strd	r4, r3, [r5]
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	b902      	cbnz	r2, 8000b56 <__udivmoddi4+0xaa>
 8000b54:	deff      	udf	#255	; 0xff
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d150      	bne.n	8000c00 <__udivmoddi4+0x154>
 8000b5e:	1bcb      	subs	r3, r1, r7
 8000b60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	2601      	movs	r6, #1
 8000b6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b6e:	0c21      	lsrs	r1, r4, #16
 8000b70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b78:	fb08 f30c 	mul.w	r3, r8, ip
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000b80:	1879      	adds	r1, r7, r1
 8000b82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0xe2>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	f200 80e9 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000b8e:	4684      	mov	ip, r0
 8000b90:	1ac9      	subs	r1, r1, r3
 8000b92:	b2a3      	uxth	r3, r4
 8000b94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ba0:	fb08 f800 	mul.w	r8, r8, r0
 8000ba4:	45a0      	cmp	r8, r4
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x10c>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x10a>
 8000bb0:	45a0      	cmp	r8, r4
 8000bb2:	f200 80d9 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	eba4 0408 	sub.w	r4, r4, r8
 8000bbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc0:	e7bf      	b.n	8000b42 <__udivmoddi4+0x96>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0x12e>
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	f000 80b1 	beq.w	8000d2e <__udivmoddi4+0x282>
 8000bcc:	2600      	movs	r6, #0
 8000bce:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f683 	clz	r6, r3
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d14a      	bne.n	8000c78 <__udivmoddi4+0x1cc>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0x140>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80b8 	bhi.w	8000d5c <__udivmoddi4+0x2b0>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0103 	sbc.w	r1, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d0a8      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000bfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bfe:	e7a5      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000c00:	f1c2 0320 	rsb	r3, r2, #32
 8000c04:	fa20 f603 	lsr.w	r6, r0, r3
 8000c08:	4097      	lsls	r7, r2
 8000c0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c12:	40d9      	lsrs	r1, r3
 8000c14:	4330      	orrs	r0, r6
 8000c16:	0c03      	lsrs	r3, r0, #16
 8000c18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c1c:	fa1f f887 	uxth.w	r8, r7
 8000c20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f108 	mul.w	r1, r6, r8
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x19c>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c3a:	f080 808d 	bcs.w	8000d58 <__udivmoddi4+0x2ac>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 808a 	bls.w	8000d58 <__udivmoddi4+0x2ac>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b281      	uxth	r1, r0
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb00 f308 	mul.w	r3, r0, r8
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x1c4>
 8000c60:	1879      	adds	r1, r7, r1
 8000c62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c66:	d273      	bcs.n	8000d50 <__udivmoddi4+0x2a4>
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d971      	bls.n	8000d50 <__udivmoddi4+0x2a4>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4439      	add	r1, r7
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c76:	e778      	b.n	8000b6a <__udivmoddi4+0xbe>
 8000c78:	f1c6 0c20 	rsb	ip, r6, #32
 8000c7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c84:	431c      	orrs	r4, r3
 8000c86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c96:	431f      	orrs	r7, r3
 8000c98:	0c3b      	lsrs	r3, r7, #16
 8000c9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c9e:	fa1f f884 	uxth.w	r8, r4
 8000ca2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ca6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000caa:	fb09 fa08 	mul.w	sl, r9, r8
 8000cae:	458a      	cmp	sl, r1
 8000cb0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cb4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x220>
 8000cba:	1861      	adds	r1, r4, r1
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	d248      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc2:	458a      	cmp	sl, r1
 8000cc4:	d946      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4421      	add	r1, r4
 8000ccc:	eba1 010a 	sub.w	r1, r1, sl
 8000cd0:	b2bf      	uxth	r7, r7
 8000cd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cde:	fb00 f808 	mul.w	r8, r0, r8
 8000ce2:	45b8      	cmp	r8, r7
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x24a>
 8000ce6:	19e7      	adds	r7, r4, r7
 8000ce8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cec:	d22e      	bcs.n	8000d4c <__udivmoddi4+0x2a0>
 8000cee:	45b8      	cmp	r8, r7
 8000cf0:	d92c      	bls.n	8000d4c <__udivmoddi4+0x2a0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4427      	add	r7, r4
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	eba7 0708 	sub.w	r7, r7, r8
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	454f      	cmp	r7, r9
 8000d04:	46c6      	mov	lr, r8
 8000d06:	4649      	mov	r1, r9
 8000d08:	d31a      	bcc.n	8000d40 <__udivmoddi4+0x294>
 8000d0a:	d017      	beq.n	8000d3c <__udivmoddi4+0x290>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x27a>
 8000d0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d12:	eb67 0701 	sbc.w	r7, r7, r1
 8000d16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d1a:	40f2      	lsrs	r2, r6
 8000d1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d20:	40f7      	lsrs	r7, r6
 8000d22:	e9c5 2700 	strd	r2, r7, [r5]
 8000d26:	2600      	movs	r6, #0
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e70b      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e9      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6fd      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d3c:	4543      	cmp	r3, r8
 8000d3e:	d2e5      	bcs.n	8000d0c <__udivmoddi4+0x260>
 8000d40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d44:	eb69 0104 	sbc.w	r1, r9, r4
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7df      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7d2      	b.n	8000cf6 <__udivmoddi4+0x24a>
 8000d50:	4660      	mov	r0, ip
 8000d52:	e78d      	b.n	8000c70 <__udivmoddi4+0x1c4>
 8000d54:	4681      	mov	r9, r0
 8000d56:	e7b9      	b.n	8000ccc <__udivmoddi4+0x220>
 8000d58:	4666      	mov	r6, ip
 8000d5a:	e775      	b.n	8000c48 <__udivmoddi4+0x19c>
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e74a      	b.n	8000bf6 <__udivmoddi4+0x14a>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	4439      	add	r1, r7
 8000d66:	e713      	b.n	8000b90 <__udivmoddi4+0xe4>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	443c      	add	r4, r7
 8000d6c:	e724      	b.n	8000bb8 <__udivmoddi4+0x10c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <BH1750_send_command>:

	return HAL_OK;
}

HAL_StatusTypeDef BH1750_send_command(BH1750_device_t* dev, uint8_t cmd)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af02      	add	r7, sp, #8
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
	//TODO hal checks
	if(HAL_I2C_Master_Transmit(
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6858      	ldr	r0, [r3, #4]
			dev->i2c_handle,	//I2C Handle
			dev->address_w,		//I2C addr of dev
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	7a5b      	ldrb	r3, [r3, #9]
	if(HAL_I2C_Master_Transmit(
 8000d88:	b299      	uxth	r1, r3
 8000d8a:	1cfa      	adds	r2, r7, #3
 8000d8c:	230a      	movs	r3, #10
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2301      	movs	r3, #1
 8000d92:	f005 fa97 	bl	80062c4 <HAL_I2C_Master_Transmit>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <BH1750_send_command+0x2c>
			&cmd,				//CMD to be executed
			1,					//8bit addr
			10					//Wait time
		) != HAL_OK) return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e000      	b.n	8000da2 <BH1750_send_command+0x2e>

	return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <BH1750_poll_self>:

void BH1750_poll_self(BH1750_device_t* self)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	BH1750_get_lumen(self);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 f8aa 	bl	8000f0c <BH1750_get_lumen>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <BH1750_init_dev_struct>:

BH1750_device_t* BH1750_init_dev_struct(I2C_HandleTypeDef* i2c_handle,
		char* name, bool addr_grounded)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	71fb      	strb	r3, [r7, #7]
	BH1750_device_t* init =
			(BH1750_device_t*)calloc(1, sizeof(BH1750_device_t));
 8000dce:	2114      	movs	r1, #20
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f02d f899 	bl	802df08 <calloc>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	617b      	str	r3, [r7, #20]

	if(init == NULL) return NULL;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <BH1750_init_dev_struct+0x24>
 8000de0:	2300      	movs	r3, #0
 8000de2:	e02d      	b.n	8000e40 <BH1750_init_dev_struct+0x80>

	if(addr_grounded){
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d006      	beq.n	8000df8 <BH1750_init_dev_struct+0x38>
		init->address_r = BH1750_GROUND_ADDR_READ;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	2247      	movs	r2, #71	; 0x47
 8000dee:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_GROUND_ADDR_WRITE;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	2246      	movs	r2, #70	; 0x46
 8000df4:	725a      	strb	r2, [r3, #9]
 8000df6:	e005      	b.n	8000e04 <BH1750_init_dev_struct+0x44>
	}else{
		init->address_r = BH1750_NO_GROUND_ADDR_READ;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	22ba      	movs	r2, #186	; 0xba
 8000dfc:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_NO_GROUND_ADDR_WRITE;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	22b9      	movs	r2, #185	; 0xb9
 8000e02:	725a      	strb	r2, [r3, #9]
	}

	init->name = (char*)malloc(sizeof(char) * strlen(name));
 8000e04:	68b8      	ldr	r0, [r7, #8]
 8000e06:	f7ff f9f3 	bl	80001f0 <strlen>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f02d f9c7 	bl	802e1a0 <malloc>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	601a      	str	r2, [r3, #0]

	if(init->name == NULL) return NULL;
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <BH1750_init_dev_struct+0x66>
 8000e22:	2300      	movs	r3, #0
 8000e24:	e00c      	b.n	8000e40 <BH1750_init_dev_struct+0x80>

	init->i2c_handle = i2c_handle;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	605a      	str	r2, [r3, #4]

	strcpy(init->name, name);
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f02d fe83 	bl	802eb3e <strcpy>

	init->poll = &BH1750_poll_self;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <BH1750_init_dev_struct+0x88>)
 8000e3c:	611a      	str	r2, [r3, #16]

	return init;
 8000e3e:	697b      	ldr	r3, [r7, #20]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	08000dab 	.word	0x08000dab

08000e4c <BH1750_init_dev>:

HAL_StatusTypeDef BH1750_init_dev(BH1750_device_t* dev)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	BH1750_send_command(dev, CMD_POWER_ON);
 8000e54:	2101      	movs	r1, #1
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ff8c 	bl	8000d74 <BH1750_send_command>
	BH1750_send_command(dev, CMD_RESET);
 8000e5c:	2103      	movs	r1, #3
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ff88 	bl	8000d74 <BH1750_send_command>
	BH1750_send_command(dev, CMD_H_RES_MODE);
 8000e64:	2110      	movs	r1, #16
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ff84 	bl	8000d74 <BH1750_send_command>

	return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <BH1750_read_dev>:

HAL_StatusTypeDef BH1750_read_dev(BH1750_device_t* dev)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af02      	add	r7, sp, #8
 8000e7c:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6858      	ldr	r0, [r3, #4]
			dev->address_r,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7a1b      	ldrb	r3, [r3, #8]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000e86:	b299      	uxth	r1, r3
			dev->buffer,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f103 020c 	add.w	r2, r3, #12
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000e8e:	230a      	movs	r3, #10
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2302      	movs	r3, #2
 8000e94:	f005 fb14 	bl	80064c0 <HAL_I2C_Master_Receive>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <BH1750_read_dev+0x2c>
			2,
			10
	) != HAL_OK) return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <BH1750_read_dev+0x2e>

	return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <BH1750_convert>:

HAL_StatusTypeDef BH1750_convert(BH1750_device_t* dev)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	dev->value = dev->buffer[0];
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7b1b      	ldrb	r3, [r3, #12]
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	815a      	strh	r2, [r3, #10]
	dev->value = (dev->value << 8) | dev->buffer[1];
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	895b      	ldrh	r3, [r3, #10]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7b5b      	ldrb	r3, [r3, #13]
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	815a      	strh	r2, [r3, #10]

	//TODO check float stuff
	dev->value/=1.2;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	895b      	ldrh	r3, [r3, #10]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fb32 	bl	8000544 <__aeabi_i2d>
 8000ee0:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <BH1750_convert+0x5c>)
 8000ee6:	f7ff fcc1 	bl	800086c <__aeabi_ddiv>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f7ff fda3 	bl	8000a3c <__aeabi_d2uiz>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	815a      	strh	r2, [r3, #10]

	return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	3ff33333 	.word	0x3ff33333

08000f0c <BH1750_get_lumen>:

HAL_StatusTypeDef BH1750_get_lumen(BH1750_device_t* dev)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	BH1750_read_dev(dev);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ffae 	bl	8000e76 <BH1750_read_dev>
	BH1750_convert(dev);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffc6 	bl	8000eac <BH1750_convert>
	return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <DMA_Callback>:
#include "WS2812_Lib.h"

uint16_t WS2812_TIM_BUF[WS2812_BUFLEN];
uint8_t dma_ready = 1;

void DMA_Callback(void) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	dma_ready = 1;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <DMA_Callback+0x14>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000004 	.word	0x20000004
 8000f44:	00000000 	.word	0x00000000

08000f48 <calcBuf>:
/**
 * Internal function, calculates the HI or LO values for the 800 kHz WS2812 signal and puts them into a buffer for the Timer-DMA
 *
 */
void calcBuf(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
  uint32_t n;
  uint32_t pos;
  WS2812_RGB_t led;

  pos=0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  // set timings for all LEDs
  for(n=0;n<WS2812_NUM_LEDS_CH1;n++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	f000 bce5 	b.w	8001924 <calcBuf+0x9dc>
    led=WS2812_LED_BUF_CH1[n];
 8000f5a:	49ab      	ldr	r1, [pc, #684]	; (8001208 <calcBuf+0x2c0>)
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	18ca      	adds	r2, r1, r3
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	8811      	ldrh	r1, [r2, #0]
 8000f6a:	7892      	ldrb	r2, [r2, #2]
 8000f6c:	8019      	strh	r1, [r3, #0]
 8000f6e:	709a      	strb	r2, [r3, #2]

    // Col:Green , Bit:7..0
    WS2812_TIM_BUF[pos++]=((led.green&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8000f70:	797b      	ldrb	r3, [r7, #5]
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	da13      	bge.n	8000fa0 <calcBuf+0x58>
 8000f78:	4ba4      	ldr	r3, [pc, #656]	; (800120c <calcBuf+0x2c4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fad0 	bl	8000524 <__aeabi_ui2d>
 8000f84:	a39c      	add	r3, pc, #624	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	f7ff fc6f 	bl	800086c <__aeabi_ddiv>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f7ff fd51 	bl	8000a3c <__aeabi_d2uiz>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	e012      	b.n	8000fc6 <calcBuf+0x7e>
 8000fa0:	4b9a      	ldr	r3, [pc, #616]	; (800120c <calcBuf+0x2c4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fabc 	bl	8000524 <__aeabi_ui2d>
 8000fac:	a394      	add	r3, pc, #592	; (adr r3, 8001200 <calcBuf+0x2b8>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f7ff fc5b 	bl	800086c <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fd3d 	bl	8000a3c <__aeabi_d2uiz>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1c59      	adds	r1, r3, #1
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	4990      	ldr	r1, [pc, #576]	; (8001210 <calcBuf+0x2c8>)
 8000fce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8000fd2:	797b      	ldrb	r3, [r7, #5]
 8000fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d013      	beq.n	8001004 <calcBuf+0xbc>
 8000fdc:	4b8b      	ldr	r3, [pc, #556]	; (800120c <calcBuf+0x2c4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fa9e 	bl	8000524 <__aeabi_ui2d>
 8000fe8:	a383      	add	r3, pc, #524	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff fc3d 	bl	800086c <__aeabi_ddiv>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fd1f 	bl	8000a3c <__aeabi_d2uiz>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b29a      	uxth	r2, r3
 8001002:	e012      	b.n	800102a <calcBuf+0xe2>
 8001004:	4b81      	ldr	r3, [pc, #516]	; (800120c <calcBuf+0x2c4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fa8a 	bl	8000524 <__aeabi_ui2d>
 8001010:	a37b      	add	r3, pc, #492	; (adr r3, 8001200 <calcBuf+0x2b8>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	f7ff fc29 	bl	800086c <__aeabi_ddiv>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fd0b 	bl	8000a3c <__aeabi_d2uiz>
 8001026:	4603      	mov	r3, r0
 8001028:	b29a      	uxth	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1c59      	adds	r1, r3, #1
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	4977      	ldr	r1, [pc, #476]	; (8001210 <calcBuf+0x2c8>)
 8001032:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001036:	797b      	ldrb	r3, [r7, #5]
 8001038:	f003 0320 	and.w	r3, r3, #32
 800103c:	2b00      	cmp	r3, #0
 800103e:	d013      	beq.n	8001068 <calcBuf+0x120>
 8001040:	4b72      	ldr	r3, [pc, #456]	; (800120c <calcBuf+0x2c4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa6c 	bl	8000524 <__aeabi_ui2d>
 800104c:	a36a      	add	r3, pc, #424	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	f7ff fc0b 	bl	800086c <__aeabi_ddiv>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fced 	bl	8000a3c <__aeabi_d2uiz>
 8001062:	4603      	mov	r3, r0
 8001064:	b29a      	uxth	r2, r3
 8001066:	e012      	b.n	800108e <calcBuf+0x146>
 8001068:	4b68      	ldr	r3, [pc, #416]	; (800120c <calcBuf+0x2c4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa58 	bl	8000524 <__aeabi_ui2d>
 8001074:	a362      	add	r3, pc, #392	; (adr r3, 8001200 <calcBuf+0x2b8>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	f7ff fbf7 	bl	800086c <__aeabi_ddiv>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f7ff fcd9 	bl	8000a3c <__aeabi_d2uiz>
 800108a:	4603      	mov	r3, r0
 800108c:	b29a      	uxth	r2, r3
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1c59      	adds	r1, r3, #1
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	495e      	ldr	r1, [pc, #376]	; (8001210 <calcBuf+0x2c8>)
 8001096:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	f003 0310 	and.w	r3, r3, #16
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d013      	beq.n	80010cc <calcBuf+0x184>
 80010a4:	4b59      	ldr	r3, [pc, #356]	; (800120c <calcBuf+0x2c4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa3a 	bl	8000524 <__aeabi_ui2d>
 80010b0:	a351      	add	r3, pc, #324	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff fbd9 	bl	800086c <__aeabi_ddiv>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff fcbb 	bl	8000a3c <__aeabi_d2uiz>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	e012      	b.n	80010f2 <calcBuf+0x1aa>
 80010cc:	4b4f      	ldr	r3, [pc, #316]	; (800120c <calcBuf+0x2c4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fa26 	bl	8000524 <__aeabi_ui2d>
 80010d8:	a349      	add	r3, pc, #292	; (adr r3, 8001200 <calcBuf+0x2b8>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff fbc5 	bl	800086c <__aeabi_ddiv>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fca7 	bl	8000a3c <__aeabi_d2uiz>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1c59      	adds	r1, r3, #1
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	4945      	ldr	r1, [pc, #276]	; (8001210 <calcBuf+0x2c8>)
 80010fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	2b00      	cmp	r3, #0
 8001106:	d013      	beq.n	8001130 <calcBuf+0x1e8>
 8001108:	4b40      	ldr	r3, [pc, #256]	; (800120c <calcBuf+0x2c4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa08 	bl	8000524 <__aeabi_ui2d>
 8001114:	a338      	add	r3, pc, #224	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff fba7 	bl	800086c <__aeabi_ddiv>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fc89 	bl	8000a3c <__aeabi_d2uiz>
 800112a:	4603      	mov	r3, r0
 800112c:	b29a      	uxth	r2, r3
 800112e:	e012      	b.n	8001156 <calcBuf+0x20e>
 8001130:	4b36      	ldr	r3, [pc, #216]	; (800120c <calcBuf+0x2c4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f9f4 	bl	8000524 <__aeabi_ui2d>
 800113c:	a330      	add	r3, pc, #192	; (adr r3, 8001200 <calcBuf+0x2b8>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff fb93 	bl	800086c <__aeabi_ddiv>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fc75 	bl	8000a3c <__aeabi_d2uiz>
 8001152:	4603      	mov	r3, r0
 8001154:	b29a      	uxth	r2, r3
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1c59      	adds	r1, r3, #1
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	492c      	ldr	r1, [pc, #176]	; (8001210 <calcBuf+0x2c8>)
 800115e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001162:	797b      	ldrb	r3, [r7, #5]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b00      	cmp	r3, #0
 800116a:	d013      	beq.n	8001194 <calcBuf+0x24c>
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <calcBuf+0x2c4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9d6 	bl	8000524 <__aeabi_ui2d>
 8001178:	a31f      	add	r3, pc, #124	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	f7ff fb75 	bl	800086c <__aeabi_ddiv>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fc57 	bl	8000a3c <__aeabi_d2uiz>
 800118e:	4603      	mov	r3, r0
 8001190:	b29a      	uxth	r2, r3
 8001192:	e012      	b.n	80011ba <calcBuf+0x272>
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <calcBuf+0x2c4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9c2 	bl	8000524 <__aeabi_ui2d>
 80011a0:	a317      	add	r3, pc, #92	; (adr r3, 8001200 <calcBuf+0x2b8>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff fb61 	bl	800086c <__aeabi_ddiv>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fc43 	bl	8000a3c <__aeabi_d2uiz>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1c59      	adds	r1, r3, #1
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	4913      	ldr	r1, [pc, #76]	; (8001210 <calcBuf+0x2c8>)
 80011c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80011c6:	797b      	ldrb	r3, [r7, #5]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d021      	beq.n	8001214 <calcBuf+0x2cc>
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <calcBuf+0x2c4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9a4 	bl	8000524 <__aeabi_ui2d>
 80011dc:	a306      	add	r3, pc, #24	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	f7ff fb43 	bl	800086c <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fc25 	bl	8000a3c <__aeabi_d2uiz>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	e020      	b.n	800123a <calcBuf+0x2f2>
 80011f8:	08d3dcb1 	.word	0x08d3dcb1
 80011fc:	40013dcb 	.word	0x40013dcb
 8001200:	8ba2e8ba 	.word	0x8ba2e8ba
 8001204:	4016ba2e 	.word	0x4016ba2e
 8001208:	2000a3e0 	.word	0x2000a3e0
 800120c:	20009a98 	.word	0x20009a98
 8001210:	20009ae0 	.word	0x20009ae0
 8001214:	4bb2      	ldr	r3, [pc, #712]	; (80014e0 <calcBuf+0x598>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f982 	bl	8000524 <__aeabi_ui2d>
 8001220:	a3ab      	add	r3, pc, #684	; (adr r3, 80014d0 <calcBuf+0x588>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff fb21 	bl	800086c <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fc03 	bl	8000a3c <__aeabi_d2uiz>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	49a8      	ldr	r1, [pc, #672]	; (80014e4 <calcBuf+0x59c>)
 8001242:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001246:	797b      	ldrb	r3, [r7, #5]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d013      	beq.n	8001278 <calcBuf+0x330>
 8001250:	4ba3      	ldr	r3, [pc, #652]	; (80014e0 <calcBuf+0x598>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f964 	bl	8000524 <__aeabi_ui2d>
 800125c:	a39e      	add	r3, pc, #632	; (adr r3, 80014d8 <calcBuf+0x590>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff fb03 	bl	800086c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fbe5 	bl	8000a3c <__aeabi_d2uiz>
 8001272:	4603      	mov	r3, r0
 8001274:	b29a      	uxth	r2, r3
 8001276:	e012      	b.n	800129e <calcBuf+0x356>
 8001278:	4b99      	ldr	r3, [pc, #612]	; (80014e0 <calcBuf+0x598>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f950 	bl	8000524 <__aeabi_ui2d>
 8001284:	a392      	add	r3, pc, #584	; (adr r3, 80014d0 <calcBuf+0x588>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff faef 	bl	800086c <__aeabi_ddiv>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fbd1 	bl	8000a3c <__aeabi_d2uiz>
 800129a:	4603      	mov	r3, r0
 800129c:	b29a      	uxth	r2, r3
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1c59      	adds	r1, r3, #1
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	498f      	ldr	r1, [pc, #572]	; (80014e4 <calcBuf+0x59c>)
 80012a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Col:Red , Bit:7..0
    WS2812_TIM_BUF[pos++]=((led.red&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80012aa:	793b      	ldrb	r3, [r7, #4]
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	da13      	bge.n	80012da <calcBuf+0x392>
 80012b2:	4b8b      	ldr	r3, [pc, #556]	; (80014e0 <calcBuf+0x598>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f933 	bl	8000524 <__aeabi_ui2d>
 80012be:	a386      	add	r3, pc, #536	; (adr r3, 80014d8 <calcBuf+0x590>)
 80012c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c4:	f7ff fad2 	bl	800086c <__aeabi_ddiv>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff fbb4 	bl	8000a3c <__aeabi_d2uiz>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	e012      	b.n	8001300 <calcBuf+0x3b8>
 80012da:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <calcBuf+0x598>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f91f 	bl	8000524 <__aeabi_ui2d>
 80012e6:	a37a      	add	r3, pc, #488	; (adr r3, 80014d0 <calcBuf+0x588>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7ff fabe 	bl	800086c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fba0 	bl	8000a3c <__aeabi_d2uiz>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b29a      	uxth	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	1c59      	adds	r1, r3, #1
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	4977      	ldr	r1, [pc, #476]	; (80014e4 <calcBuf+0x59c>)
 8001308:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800130c:	793b      	ldrb	r3, [r7, #4]
 800130e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001312:	2b00      	cmp	r3, #0
 8001314:	d013      	beq.n	800133e <calcBuf+0x3f6>
 8001316:	4b72      	ldr	r3, [pc, #456]	; (80014e0 <calcBuf+0x598>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f901 	bl	8000524 <__aeabi_ui2d>
 8001322:	a36d      	add	r3, pc, #436	; (adr r3, 80014d8 <calcBuf+0x590>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff faa0 	bl	800086c <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fb82 	bl	8000a3c <__aeabi_d2uiz>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	e012      	b.n	8001364 <calcBuf+0x41c>
 800133e:	4b68      	ldr	r3, [pc, #416]	; (80014e0 <calcBuf+0x598>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8ed 	bl	8000524 <__aeabi_ui2d>
 800134a:	a361      	add	r3, pc, #388	; (adr r3, 80014d0 <calcBuf+0x588>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff fa8c 	bl	800086c <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fb6e 	bl	8000a3c <__aeabi_d2uiz>
 8001360:	4603      	mov	r3, r0
 8001362:	b29a      	uxth	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	1c59      	adds	r1, r3, #1
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	495e      	ldr	r1, [pc, #376]	; (80014e4 <calcBuf+0x59c>)
 800136c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001370:	793b      	ldrb	r3, [r7, #4]
 8001372:	f003 0320 	and.w	r3, r3, #32
 8001376:	2b00      	cmp	r3, #0
 8001378:	d013      	beq.n	80013a2 <calcBuf+0x45a>
 800137a:	4b59      	ldr	r3, [pc, #356]	; (80014e0 <calcBuf+0x598>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8cf 	bl	8000524 <__aeabi_ui2d>
 8001386:	a354      	add	r3, pc, #336	; (adr r3, 80014d8 <calcBuf+0x590>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7ff fa6e 	bl	800086c <__aeabi_ddiv>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fb50 	bl	8000a3c <__aeabi_d2uiz>
 800139c:	4603      	mov	r3, r0
 800139e:	b29a      	uxth	r2, r3
 80013a0:	e012      	b.n	80013c8 <calcBuf+0x480>
 80013a2:	4b4f      	ldr	r3, [pc, #316]	; (80014e0 <calcBuf+0x598>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8bb 	bl	8000524 <__aeabi_ui2d>
 80013ae:	a348      	add	r3, pc, #288	; (adr r3, 80014d0 <calcBuf+0x588>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff fa5a 	bl	800086c <__aeabi_ddiv>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fb3c 	bl	8000a3c <__aeabi_d2uiz>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1c59      	adds	r1, r3, #1
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	4945      	ldr	r1, [pc, #276]	; (80014e4 <calcBuf+0x59c>)
 80013d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80013d4:	793b      	ldrb	r3, [r7, #4]
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d013      	beq.n	8001406 <calcBuf+0x4be>
 80013de:	4b40      	ldr	r3, [pc, #256]	; (80014e0 <calcBuf+0x598>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f89d 	bl	8000524 <__aeabi_ui2d>
 80013ea:	a33b      	add	r3, pc, #236	; (adr r3, 80014d8 <calcBuf+0x590>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7ff fa3c 	bl	800086c <__aeabi_ddiv>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fb1e 	bl	8000a3c <__aeabi_d2uiz>
 8001400:	4603      	mov	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	e012      	b.n	800142c <calcBuf+0x4e4>
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <calcBuf+0x598>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f889 	bl	8000524 <__aeabi_ui2d>
 8001412:	a32f      	add	r3, pc, #188	; (adr r3, 80014d0 <calcBuf+0x588>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff fa28 	bl	800086c <__aeabi_ddiv>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fb0a 	bl	8000a3c <__aeabi_d2uiz>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	1c59      	adds	r1, r3, #1
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	492c      	ldr	r1, [pc, #176]	; (80014e4 <calcBuf+0x59c>)
 8001434:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001438:	793b      	ldrb	r3, [r7, #4]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	d013      	beq.n	800146a <calcBuf+0x522>
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <calcBuf+0x598>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f86b 	bl	8000524 <__aeabi_ui2d>
 800144e:	a322      	add	r3, pc, #136	; (adr r3, 80014d8 <calcBuf+0x590>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff fa0a 	bl	800086c <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f7ff faec 	bl	8000a3c <__aeabi_d2uiz>
 8001464:	4603      	mov	r3, r0
 8001466:	b29a      	uxth	r2, r3
 8001468:	e012      	b.n	8001490 <calcBuf+0x548>
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <calcBuf+0x598>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f857 	bl	8000524 <__aeabi_ui2d>
 8001476:	a316      	add	r3, pc, #88	; (adr r3, 80014d0 <calcBuf+0x588>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7ff f9f6 	bl	800086c <__aeabi_ddiv>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fad8 	bl	8000a3c <__aeabi_d2uiz>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1c59      	adds	r1, r3, #1
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	4913      	ldr	r1, [pc, #76]	; (80014e4 <calcBuf+0x59c>)
 8001498:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800149c:	793b      	ldrb	r3, [r7, #4]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d020      	beq.n	80014e8 <calcBuf+0x5a0>
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <calcBuf+0x598>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f839 	bl	8000524 <__aeabi_ui2d>
 80014b2:	a309      	add	r3, pc, #36	; (adr r3, 80014d8 <calcBuf+0x590>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7ff f9d8 	bl	800086c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff faba 	bl	8000a3c <__aeabi_d2uiz>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	e01f      	b.n	800150e <calcBuf+0x5c6>
 80014ce:	bf00      	nop
 80014d0:	8ba2e8ba 	.word	0x8ba2e8ba
 80014d4:	4016ba2e 	.word	0x4016ba2e
 80014d8:	08d3dcb1 	.word	0x08d3dcb1
 80014dc:	40013dcb 	.word	0x40013dcb
 80014e0:	20009a98 	.word	0x20009a98
 80014e4:	20009ae0 	.word	0x20009ae0
 80014e8:	4bb3      	ldr	r3, [pc, #716]	; (80017b8 <calcBuf+0x870>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f818 	bl	8000524 <__aeabi_ui2d>
 80014f4:	a3ac      	add	r3, pc, #688	; (adr r3, 80017a8 <calcBuf+0x860>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7ff f9b7 	bl	800086c <__aeabi_ddiv>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fa99 	bl	8000a3c <__aeabi_d2uiz>
 800150a:	4603      	mov	r3, r0
 800150c:	b29a      	uxth	r2, r3
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1c59      	adds	r1, r3, #1
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	49a9      	ldr	r1, [pc, #676]	; (80017bc <calcBuf+0x874>)
 8001516:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800151a:	793b      	ldrb	r3, [r7, #4]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d013      	beq.n	800154c <calcBuf+0x604>
 8001524:	4ba4      	ldr	r3, [pc, #656]	; (80017b8 <calcBuf+0x870>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fffa 	bl	8000524 <__aeabi_ui2d>
 8001530:	a39f      	add	r3, pc, #636	; (adr r3, 80017b0 <calcBuf+0x868>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7ff f999 	bl	800086c <__aeabi_ddiv>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f7ff fa7b 	bl	8000a3c <__aeabi_d2uiz>
 8001546:	4603      	mov	r3, r0
 8001548:	b29a      	uxth	r2, r3
 800154a:	e012      	b.n	8001572 <calcBuf+0x62a>
 800154c:	4b9a      	ldr	r3, [pc, #616]	; (80017b8 <calcBuf+0x870>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe ffe6 	bl	8000524 <__aeabi_ui2d>
 8001558:	a393      	add	r3, pc, #588	; (adr r3, 80017a8 <calcBuf+0x860>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7ff f985 	bl	800086c <__aeabi_ddiv>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fa67 	bl	8000a3c <__aeabi_d2uiz>
 800156e:	4603      	mov	r3, r0
 8001570:	b29a      	uxth	r2, r3
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1c59      	adds	r1, r3, #1
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	4990      	ldr	r1, [pc, #576]	; (80017bc <calcBuf+0x874>)
 800157a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800157e:	793b      	ldrb	r3, [r7, #4]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <calcBuf+0x668>
 8001588:	4b8b      	ldr	r3, [pc, #556]	; (80017b8 <calcBuf+0x870>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffc8 	bl	8000524 <__aeabi_ui2d>
 8001594:	a386      	add	r3, pc, #536	; (adr r3, 80017b0 <calcBuf+0x868>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7ff f967 	bl	800086c <__aeabi_ddiv>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f7ff fa49 	bl	8000a3c <__aeabi_d2uiz>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	e012      	b.n	80015d6 <calcBuf+0x68e>
 80015b0:	4b81      	ldr	r3, [pc, #516]	; (80017b8 <calcBuf+0x870>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffb4 	bl	8000524 <__aeabi_ui2d>
 80015bc:	a37a      	add	r3, pc, #488	; (adr r3, 80017a8 <calcBuf+0x860>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f953 	bl	800086c <__aeabi_ddiv>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fa35 	bl	8000a3c <__aeabi_d2uiz>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1c59      	adds	r1, r3, #1
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	4977      	ldr	r1, [pc, #476]	; (80017bc <calcBuf+0x874>)
 80015de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	// Col:Blue , Bit:7..0
	WS2812_TIM_BUF[pos++]=((led.blue&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80015e2:	79bb      	ldrb	r3, [r7, #6]
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	da13      	bge.n	8001612 <calcBuf+0x6ca>
 80015ea:	4b73      	ldr	r3, [pc, #460]	; (80017b8 <calcBuf+0x870>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ff97 	bl	8000524 <__aeabi_ui2d>
 80015f6:	a36e      	add	r3, pc, #440	; (adr r3, 80017b0 <calcBuf+0x868>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7ff f936 	bl	800086c <__aeabi_ddiv>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f7ff fa18 	bl	8000a3c <__aeabi_d2uiz>
 800160c:	4603      	mov	r3, r0
 800160e:	b29a      	uxth	r2, r3
 8001610:	e012      	b.n	8001638 <calcBuf+0x6f0>
 8001612:	4b69      	ldr	r3, [pc, #420]	; (80017b8 <calcBuf+0x870>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ff83 	bl	8000524 <__aeabi_ui2d>
 800161e:	a362      	add	r3, pc, #392	; (adr r3, 80017a8 <calcBuf+0x860>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7ff f922 	bl	800086c <__aeabi_ddiv>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff fa04 	bl	8000a3c <__aeabi_d2uiz>
 8001634:	4603      	mov	r3, r0
 8001636:	b29a      	uxth	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c59      	adds	r1, r3, #1
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	495f      	ldr	r1, [pc, #380]	; (80017bc <calcBuf+0x874>)
 8001640:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001644:	79bb      	ldrb	r3, [r7, #6]
 8001646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800164a:	2b00      	cmp	r3, #0
 800164c:	d013      	beq.n	8001676 <calcBuf+0x72e>
 800164e:	4b5a      	ldr	r3, [pc, #360]	; (80017b8 <calcBuf+0x870>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff65 	bl	8000524 <__aeabi_ui2d>
 800165a:	a355      	add	r3, pc, #340	; (adr r3, 80017b0 <calcBuf+0x868>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7ff f904 	bl	800086c <__aeabi_ddiv>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff f9e6 	bl	8000a3c <__aeabi_d2uiz>
 8001670:	4603      	mov	r3, r0
 8001672:	b29a      	uxth	r2, r3
 8001674:	e012      	b.n	800169c <calcBuf+0x754>
 8001676:	4b50      	ldr	r3, [pc, #320]	; (80017b8 <calcBuf+0x870>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff51 	bl	8000524 <__aeabi_ui2d>
 8001682:	a349      	add	r3, pc, #292	; (adr r3, 80017a8 <calcBuf+0x860>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7ff f8f0 	bl	800086c <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff f9d2 	bl	8000a3c <__aeabi_d2uiz>
 8001698:	4603      	mov	r3, r0
 800169a:	b29a      	uxth	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	1c59      	adds	r1, r3, #1
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	4946      	ldr	r1, [pc, #280]	; (80017bc <calcBuf+0x874>)
 80016a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80016a8:	79bb      	ldrb	r3, [r7, #6]
 80016aa:	f003 0320 	and.w	r3, r3, #32
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d013      	beq.n	80016da <calcBuf+0x792>
 80016b2:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <calcBuf+0x870>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff33 	bl	8000524 <__aeabi_ui2d>
 80016be:	a33c      	add	r3, pc, #240	; (adr r3, 80017b0 <calcBuf+0x868>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7ff f8d2 	bl	800086c <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff f9b4 	bl	8000a3c <__aeabi_d2uiz>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	e012      	b.n	8001700 <calcBuf+0x7b8>
 80016da:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <calcBuf+0x870>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff1f 	bl	8000524 <__aeabi_ui2d>
 80016e6:	a330      	add	r3, pc, #192	; (adr r3, 80017a8 <calcBuf+0x860>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7ff f8be 	bl	800086c <__aeabi_ddiv>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff f9a0 	bl	8000a3c <__aeabi_d2uiz>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b29a      	uxth	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	1c59      	adds	r1, r3, #1
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	492d      	ldr	r1, [pc, #180]	; (80017bc <calcBuf+0x874>)
 8001708:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b00      	cmp	r3, #0
 8001714:	d013      	beq.n	800173e <calcBuf+0x7f6>
 8001716:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <calcBuf+0x870>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff01 	bl	8000524 <__aeabi_ui2d>
 8001722:	a323      	add	r3, pc, #140	; (adr r3, 80017b0 <calcBuf+0x868>)
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	f7ff f8a0 	bl	800086c <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff f982 	bl	8000a3c <__aeabi_d2uiz>
 8001738:	4603      	mov	r3, r0
 800173a:	b29a      	uxth	r2, r3
 800173c:	e012      	b.n	8001764 <calcBuf+0x81c>
 800173e:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <calcBuf+0x870>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe feed 	bl	8000524 <__aeabi_ui2d>
 800174a:	a317      	add	r3, pc, #92	; (adr r3, 80017a8 <calcBuf+0x860>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7ff f88c 	bl	800086c <__aeabi_ddiv>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff f96e 	bl	8000a3c <__aeabi_d2uiz>
 8001760:	4603      	mov	r3, r0
 8001762:	b29a      	uxth	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1c59      	adds	r1, r3, #1
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	4914      	ldr	r1, [pc, #80]	; (80017bc <calcBuf+0x874>)
 800176c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001770:	79bb      	ldrb	r3, [r7, #6]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d022      	beq.n	80017c0 <calcBuf+0x878>
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <calcBuf+0x870>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fecf 	bl	8000524 <__aeabi_ui2d>
 8001786:	a30a      	add	r3, pc, #40	; (adr r3, 80017b0 <calcBuf+0x868>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	f7ff f86e 	bl	800086c <__aeabi_ddiv>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff f950 	bl	8000a3c <__aeabi_d2uiz>
 800179c:	4603      	mov	r3, r0
 800179e:	b29a      	uxth	r2, r3
 80017a0:	e021      	b.n	80017e6 <calcBuf+0x89e>
 80017a2:	bf00      	nop
 80017a4:	f3af 8000 	nop.w
 80017a8:	8ba2e8ba 	.word	0x8ba2e8ba
 80017ac:	4016ba2e 	.word	0x4016ba2e
 80017b0:	08d3dcb1 	.word	0x08d3dcb1
 80017b4:	40013dcb 	.word	0x40013dcb
 80017b8:	20009a98 	.word	0x20009a98
 80017bc:	20009ae0 	.word	0x20009ae0
 80017c0:	4b69      	ldr	r3, [pc, #420]	; (8001968 <calcBuf+0xa20>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe feac 	bl	8000524 <__aeabi_ui2d>
 80017cc:	a362      	add	r3, pc, #392	; (adr r3, 8001958 <calcBuf+0xa10>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f7ff f84b 	bl	800086c <__aeabi_ddiv>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f92d 	bl	8000a3c <__aeabi_d2uiz>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1c59      	adds	r1, r3, #1
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	495f      	ldr	r1, [pc, #380]	; (800196c <calcBuf+0xa24>)
 80017ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d013      	beq.n	8001824 <calcBuf+0x8dc>
 80017fc:	4b5a      	ldr	r3, [pc, #360]	; (8001968 <calcBuf+0xa20>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fe8e 	bl	8000524 <__aeabi_ui2d>
 8001808:	a355      	add	r3, pc, #340	; (adr r3, 8001960 <calcBuf+0xa18>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7ff f82d 	bl	800086c <__aeabi_ddiv>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff f90f 	bl	8000a3c <__aeabi_d2uiz>
 800181e:	4603      	mov	r3, r0
 8001820:	b29a      	uxth	r2, r3
 8001822:	e012      	b.n	800184a <calcBuf+0x902>
 8001824:	4b50      	ldr	r3, [pc, #320]	; (8001968 <calcBuf+0xa20>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe7a 	bl	8000524 <__aeabi_ui2d>
 8001830:	a349      	add	r3, pc, #292	; (adr r3, 8001958 <calcBuf+0xa10>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7ff f819 	bl	800086c <__aeabi_ddiv>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f8fb 	bl	8000a3c <__aeabi_d2uiz>
 8001846:	4603      	mov	r3, r0
 8001848:	b29a      	uxth	r2, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	1c59      	adds	r1, r3, #1
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	4946      	ldr	r1, [pc, #280]	; (800196c <calcBuf+0xa24>)
 8001852:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d013      	beq.n	8001888 <calcBuf+0x940>
 8001860:	4b41      	ldr	r3, [pc, #260]	; (8001968 <calcBuf+0xa20>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe5c 	bl	8000524 <__aeabi_ui2d>
 800186c:	a33c      	add	r3, pc, #240	; (adr r3, 8001960 <calcBuf+0xa18>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7fe fffb 	bl	800086c <__aeabi_ddiv>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f8dd 	bl	8000a3c <__aeabi_d2uiz>
 8001882:	4603      	mov	r3, r0
 8001884:	b29a      	uxth	r2, r3
 8001886:	e012      	b.n	80018ae <calcBuf+0x966>
 8001888:	4b37      	ldr	r3, [pc, #220]	; (8001968 <calcBuf+0xa20>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe48 	bl	8000524 <__aeabi_ui2d>
 8001894:	a330      	add	r3, pc, #192	; (adr r3, 8001958 <calcBuf+0xa10>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f7fe ffe7 	bl	800086c <__aeabi_ddiv>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f8c9 	bl	8000a3c <__aeabi_d2uiz>
 80018aa:	4603      	mov	r3, r0
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1c59      	adds	r1, r3, #1
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	492d      	ldr	r1, [pc, #180]	; (800196c <calcBuf+0xa24>)
 80018b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80018ba:	79bb      	ldrb	r3, [r7, #6]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d013      	beq.n	80018ec <calcBuf+0x9a4>
 80018c4:	4b28      	ldr	r3, [pc, #160]	; (8001968 <calcBuf+0xa20>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fe2a 	bl	8000524 <__aeabi_ui2d>
 80018d0:	a323      	add	r3, pc, #140	; (adr r3, 8001960 <calcBuf+0xa18>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe ffc9 	bl	800086c <__aeabi_ddiv>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f8ab 	bl	8000a3c <__aeabi_d2uiz>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	e012      	b.n	8001912 <calcBuf+0x9ca>
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <calcBuf+0xa20>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe16 	bl	8000524 <__aeabi_ui2d>
 80018f8:	a317      	add	r3, pc, #92	; (adr r3, 8001958 <calcBuf+0xa10>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe ffb5 	bl	800086c <__aeabi_ddiv>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f897 	bl	8000a3c <__aeabi_d2uiz>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1c59      	adds	r1, r3, #1
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	4914      	ldr	r1, [pc, #80]	; (800196c <calcBuf+0xa24>)
 800191a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(n=0;n<WS2812_NUM_LEDS_CH1;n++) {
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b2d      	cmp	r3, #45	; 0x2d
 8001928:	f67f ab17 	bls.w	8000f5a <calcBuf+0x12>
  }

  // short pause after all LEDs have been updated
  for(n=0;n<48;n++) {
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	e009      	b.n	8001946 <calcBuf+0x9fe>
    WS2812_TIM_BUF[pos++]=0;
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	60ba      	str	r2, [r7, #8]
 8001938:	4a0c      	ldr	r2, [pc, #48]	; (800196c <calcBuf+0xa24>)
 800193a:	2100      	movs	r1, #0
 800193c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(n=0;n<48;n++) {
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3301      	adds	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2b2f      	cmp	r3, #47	; 0x2f
 800194a:	d9f2      	bls.n	8001932 <calcBuf+0x9ea>
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	8ba2e8ba 	.word	0x8ba2e8ba
 800195c:	4016ba2e 	.word	0x4016ba2e
 8001960:	08d3dcb1 	.word	0x08d3dcb1
 8001964:	40013dcb 	.word	0x40013dcb
 8001968:	20009a98 	.word	0x20009a98
 800196c:	20009ae0 	.word	0x20009ae0

08001970 <startDMA>:

/**
 * Internal function; start DMA transfer
 */
void startDMA(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	//uint8_t test[8] = {10};
	dma_ready = 0;
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <startDMA+0x1c>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)WS2812_TIM_BUF, WS2812_BUFLEN);
 800197a:	f44f 6390 	mov.w	r3, #1152	; 0x480
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <startDMA+0x20>)
 8001980:	2100      	movs	r1, #0
 8001982:	4804      	ldr	r0, [pc, #16]	; (8001994 <startDMA+0x24>)
 8001984:	f008 f8b8 	bl	8009af8 <HAL_TIM_PWM_Start_DMA>
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000004 	.word	0x20000004
 8001990:	20009ae0 	.word	0x20009ae0
 8001994:	20009a98 	.word	0x20009a98

08001998 <WS2812_Refresh>:

void WS2812_Refresh(void) {
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	while(!dma_ready);
 800199c:	bf00      	nop
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <WS2812_Refresh+0x1c>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0fb      	beq.n	800199e <WS2812_Refresh+0x6>
	calcBuf();
 80019a6:	f7ff facf 	bl	8000f48 <calcBuf>
	startDMA();
 80019aa:	f7ff ffe1 	bl	8001970 <startDMA>
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000004 	.word	0x20000004

080019b8 <WS2812_Clear>:

/**
 * Set all LEDs to 0 (off) and update
 */
void WS2812_Clear(uint8_t refresh) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
	uint16_t num;

	for(num = 0; num < WS2812_NUM_LEDS_CH1; num++) {
 80019c2:	2300      	movs	r3, #0
 80019c4:	81fb      	strh	r3, [r7, #14]
 80019c6:	e01a      	b.n	80019fe <WS2812_Clear+0x46>
		WS2812_LED_BUF_CH1[num] = (WS2812_RGB_t){0,0,0};
 80019c8:	89fa      	ldrh	r2, [r7, #14]
 80019ca:	4913      	ldr	r1, [pc, #76]	; (8001a18 <WS2812_Clear+0x60>)
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	2100      	movs	r1, #0
 80019d6:	7019      	strb	r1, [r3, #0]
 80019d8:	490f      	ldr	r1, [pc, #60]	; (8001a18 <WS2812_Clear+0x60>)
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	3301      	adds	r3, #1
 80019e4:	2100      	movs	r1, #0
 80019e6:	7019      	strb	r1, [r3, #0]
 80019e8:	490b      	ldr	r1, [pc, #44]	; (8001a18 <WS2812_Clear+0x60>)
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	3302      	adds	r3, #2
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
	for(num = 0; num < WS2812_NUM_LEDS_CH1; num++) {
 80019f8:	89fb      	ldrh	r3, [r7, #14]
 80019fa:	3301      	adds	r3, #1
 80019fc:	81fb      	strh	r3, [r7, #14]
 80019fe:	89fb      	ldrh	r3, [r7, #14]
 8001a00:	2b2d      	cmp	r3, #45	; 0x2d
 8001a02:	d9e1      	bls.n	80019c8 <WS2812_Clear+0x10>
	}

	 if(refresh==1) WS2812_Refresh();
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <WS2812_Clear+0x56>
 8001a0a:	f7ff ffc5 	bl	8001998 <WS2812_Refresh>
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000a3e0 	.word	0x2000a3e0

08001a1c <WS2812_One_RGB>:

/**
 * Set one LED (R, G, B values). If refresh == 1, update LEDs, otherwise just update buffer (if several function calls are to be done before refresh)
 */
void WS2812_One_RGB(uint32_t nr, WS2812_RGB_t rgb_col, uint8_t refresh)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	4613      	mov	r3, r2
 8001a28:	71fb      	strb	r3, [r7, #7]
  if(nr<WS2812_NUM_LEDS_CH1) {
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b2d      	cmp	r3, #45	; 0x2d
 8001a2e:	d811      	bhi.n	8001a54 <WS2812_One_RGB+0x38>
	  WS2812_LED_BUF_CH1[nr]=rgb_col;
 8001a30:	490a      	ldr	r1, [pc, #40]	; (8001a5c <WS2812_One_RGB+0x40>)
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	8819      	ldrh	r1, [r3, #0]
 8001a44:	789b      	ldrb	r3, [r3, #2]
 8001a46:	8011      	strh	r1, [r2, #0]
 8001a48:	7093      	strb	r3, [r2, #2]

    if(refresh==1) WS2812_Refresh();
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <WS2812_One_RGB+0x38>
 8001a50:	f7ff ffa2 	bl	8001998 <WS2812_Refresh>
  }
}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000a3e0 	.word	0x2000a3e0

08001a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	BufferIsSet = 0;
 8001a64:	4b49      	ldr	r3, [pc, #292]	; (8001b8c <main+0x12c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a6a:	f002 fcb7 	bl	80043dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a6e:	f000 f8d5 	bl	8001c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a72:	f000 fcf7 	bl	8002464 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001a76:	f000 fa83 	bl	8001f80 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001a7a:	f000 f9f9 	bl	8001e70 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001a7e:	f000 fc93 	bl	80023a8 <MX_FMC_Init>
  MX_CRC_Init();
 8001a82:	f000 f9e1 	bl	8001e48 <MX_CRC_Init>
  MX_TIM13_Init();
 8001a86:	f000 fc21 	bl	80022cc <MX_TIM13_Init>
  MX_DMA_Init();
 8001a8a:	f000 fc6d 	bl	8002368 <MX_DMA_Init>
  MX_TIM1_Init();
 8001a8e:	f000 fb2b 	bl	80020e8 <MX_TIM1_Init>
  MX_TIM9_Init();
 8001a92:	f000 fbc9 	bl	8002228 <MX_TIM9_Init>
  MX_CAN1_Init();
 8001a96:	f000 f933 	bl	8001d00 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001a9a:	f000 f99f 	bl	8001ddc <MX_CAN2_Init>
  MX_I2C2_Init();
 8001a9e:	f000 fa2f 	bl	8001f00 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8001aa2:	f000 fb01 	bl	80020a8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001aa6:	f00a f811 	bl	800bacc <MX_FATFS_Init>
  MX_TouchGFX_Init();
 8001aaa:	f00d ff27 	bl	800f8fc <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4837      	ldr	r0, [pc, #220]	; (8001b90 <main+0x130>)
 8001ab2:	f007 ff59 	bl	8009968 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4836      	ldr	r0, [pc, #216]	; (8001b94 <main+0x134>)
 8001aba:	f007 ff55 	bl	8009968 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8001abe:	2104      	movs	r1, #4
 8001ac0:	4834      	ldr	r0, [pc, #208]	; (8001b94 <main+0x134>)
 8001ac2:	f007 ff51 	bl	8009968 <HAL_TIM_PWM_Start>


  BH1750_sensor = BH1750_init_dev_struct(&hi2c2, "BH1750 device", true);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4933      	ldr	r1, [pc, #204]	; (8001b98 <main+0x138>)
 8001aca:	4834      	ldr	r0, [pc, #208]	; (8001b9c <main+0x13c>)
 8001acc:	f7ff f978 	bl	8000dc0 <BH1750_init_dev_struct>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a33      	ldr	r2, [pc, #204]	; (8001ba0 <main+0x140>)
 8001ad4:	6013      	str	r3, [r2, #0]

  BH1750_init_dev(BH1750_sensor);
 8001ad6:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <main+0x140>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f9b6 	bl	8000e4c <BH1750_init_dev>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ae0:	f00a fad8 	bl	800c094 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of START_Task */
  START_TaskHandle = osThreadNew(Start_START_Task, NULL, &START_Task_attributes);
 8001ae4:	4a2f      	ldr	r2, [pc, #188]	; (8001ba4 <main+0x144>)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	482f      	ldr	r0, [pc, #188]	; (8001ba8 <main+0x148>)
 8001aea:	f00a fb54 	bl	800c196 <osThreadNew>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4a2e      	ldr	r2, [pc, #184]	; (8001bac <main+0x14c>)
 8001af2:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001af4:	4a2e      	ldr	r2, [pc, #184]	; (8001bb0 <main+0x150>)
 8001af6:	2100      	movs	r1, #0
 8001af8:	482e      	ldr	r0, [pc, #184]	; (8001bb4 <main+0x154>)
 8001afa:	f00a fb4c 	bl	800c196 <osThreadNew>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a2d      	ldr	r2, [pc, #180]	; (8001bb8 <main+0x158>)
 8001b02:	6013      	str	r3, [r2, #0]

  /* creation of SD_Task */
  SD_TaskHandle = osThreadNew(Start_SD_Task, NULL, &SD_Task_attributes);
 8001b04:	4a2d      	ldr	r2, [pc, #180]	; (8001bbc <main+0x15c>)
 8001b06:	2100      	movs	r1, #0
 8001b08:	482d      	ldr	r0, [pc, #180]	; (8001bc0 <main+0x160>)
 8001b0a:	f00a fb44 	bl	800c196 <osThreadNew>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a2c      	ldr	r2, [pc, #176]	; (8001bc4 <main+0x164>)
 8001b12:	6013      	str	r3, [r2, #0]

  /* creation of LED_Task */
  LED_TaskHandle = osThreadNew(Start_LED_Task, NULL, &LED_Task_attributes);
 8001b14:	4a2c      	ldr	r2, [pc, #176]	; (8001bc8 <main+0x168>)
 8001b16:	2100      	movs	r1, #0
 8001b18:	482c      	ldr	r0, [pc, #176]	; (8001bcc <main+0x16c>)
 8001b1a:	f00a fb3c 	bl	800c196 <osThreadNew>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a2b      	ldr	r2, [pc, #172]	; (8001bd0 <main+0x170>)
 8001b22:	6013      	str	r3, [r2, #0]

  /* creation of CAN_Task */
  CAN_TaskHandle = osThreadNew(Start_CAN_Task, NULL, &CAN_Task_attributes);
 8001b24:	4a2b      	ldr	r2, [pc, #172]	; (8001bd4 <main+0x174>)
 8001b26:	2100      	movs	r1, #0
 8001b28:	482b      	ldr	r0, [pc, #172]	; (8001bd8 <main+0x178>)
 8001b2a:	f00a fb34 	bl	800c196 <osThreadNew>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a2a      	ldr	r2, [pc, #168]	; (8001bdc <main+0x17c>)
 8001b32:	6013      	str	r3, [r2, #0]

  /* creation of BTN_Task */
  BTN_TaskHandle = osThreadNew(Start_BTN_Task, NULL, &BTN_Task_attributes);
 8001b34:	4a2a      	ldr	r2, [pc, #168]	; (8001be0 <main+0x180>)
 8001b36:	2100      	movs	r1, #0
 8001b38:	482a      	ldr	r0, [pc, #168]	; (8001be4 <main+0x184>)
 8001b3a:	f00a fb2c 	bl	800c196 <osThreadNew>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a29      	ldr	r2, [pc, #164]	; (8001be8 <main+0x188>)
 8001b42:	6013      	str	r3, [r2, #0]

  /* creation of BARO_Task */
  BARO_TaskHandle = osThreadNew(Start_BARO_Task, NULL, &BARO_Task_attributes);
 8001b44:	4a29      	ldr	r2, [pc, #164]	; (8001bec <main+0x18c>)
 8001b46:	2100      	movs	r1, #0
 8001b48:	4829      	ldr	r0, [pc, #164]	; (8001bf0 <main+0x190>)
 8001b4a:	f00a fb24 	bl	800c196 <osThreadNew>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a28      	ldr	r2, [pc, #160]	; (8001bf4 <main+0x194>)
 8001b52:	6013      	str	r3, [r2, #0]

  /* creation of RGB_Task */
  RGB_TaskHandle = osThreadNew(Start_RGB_Task, NULL, &RGB_Task_attributes);
 8001b54:	4a28      	ldr	r2, [pc, #160]	; (8001bf8 <main+0x198>)
 8001b56:	2100      	movs	r1, #0
 8001b58:	4828      	ldr	r0, [pc, #160]	; (8001bfc <main+0x19c>)
 8001b5a:	f00a fb1c 	bl	800c196 <osThreadNew>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <main+0x1a0>)
 8001b62:	6013      	str	r3, [r2, #0]

  /* creation of BH1750_Task */
  BH1750_TaskHandle = osThreadNew(Start_BH1750_Task, NULL, &BH1750_Task_attributes);
 8001b64:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <main+0x1a4>)
 8001b66:	2100      	movs	r1, #0
 8001b68:	4827      	ldr	r0, [pc, #156]	; (8001c08 <main+0x1a8>)
 8001b6a:	f00a fb14 	bl	800c196 <osThreadNew>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <main+0x1ac>)
 8001b72:	6013      	str	r3, [r2, #0]

  /* creation of LPS22_Task */
  LPS22_TaskHandle = osThreadNew(Start_LPS22_Task, NULL, &LPS22_Task_attributes);
 8001b74:	4a26      	ldr	r2, [pc, #152]	; (8001c10 <main+0x1b0>)
 8001b76:	2100      	movs	r1, #0
 8001b78:	4826      	ldr	r0, [pc, #152]	; (8001c14 <main+0x1b4>)
 8001b7a:	f00a fb0c 	bl	800c196 <osThreadNew>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4a25      	ldr	r2, [pc, #148]	; (8001c18 <main+0x1b8>)
 8001b82:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b84:	f00a facc 	bl	800c120 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8001b88:	e7fe      	b.n	8001b88 <main+0x128>
 8001b8a:	bf00      	nop
 8001b8c:	2000a470 	.word	0x2000a470
 8001b90:	2000a66c 	.word	0x2000a66c
 8001b94:	2000af3c 	.word	0x2000af3c
 8001b98:	0802f158 	.word	0x0802f158
 8001b9c:	2000a484 	.word	0x2000a484
 8001ba0:	2000b0f0 	.word	0x2000b0f0
 8001ba4:	0802fc8c 	.word	0x0802fc8c
 8001ba8:	08002725 	.word	0x08002725
 8001bac:	2000a594 	.word	0x2000a594
 8001bb0:	0802fcb0 	.word	0x0802fcb0
 8001bb4:	0800f909 	.word	0x0800f909
 8001bb8:	2000a668 	.word	0x2000a668
 8001bbc:	0802fcd4 	.word	0x0802fcd4
 8001bc0:	080027a1 	.word	0x080027a1
 8001bc4:	2000a478 	.word	0x2000a478
 8001bc8:	0802fcf8 	.word	0x0802fcf8
 8001bcc:	080027b1 	.word	0x080027b1
 8001bd0:	2000a578 	.word	0x2000a578
 8001bd4:	0802fd1c 	.word	0x0802fd1c
 8001bd8:	080027c1 	.word	0x080027c1
 8001bdc:	2000b010 	.word	0x2000b010
 8001be0:	0802fd40 	.word	0x0802fd40
 8001be4:	08003301 	.word	0x08003301
 8001be8:	2000af84 	.word	0x2000af84
 8001bec:	0802fd64 	.word	0x0802fd64
 8001bf0:	0800340d 	.word	0x0800340d
 8001bf4:	2000b0f4 	.word	0x2000b0f4
 8001bf8:	0802fd88 	.word	0x0802fd88
 8001bfc:	0800341d 	.word	0x0800341d
 8001c00:	2000a46c 	.word	0x2000a46c
 8001c04:	0802fdac 	.word	0x0802fdac
 8001c08:	0800360d 	.word	0x0800360d
 8001c0c:	2000a474 	.word	0x2000a474
 8001c10:	0802fdd0 	.word	0x0802fdd0
 8001c14:	08003623 	.word	0x08003623
 8001c18:	2000b0ec 	.word	0x2000b0ec

08001c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b094      	sub	sp, #80	; 0x50
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c22:	f107 0320 	add.w	r3, r7, #32
 8001c26:	2230      	movs	r2, #48	; 0x30
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f02c fad6 	bl	802e1dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <SystemClock_Config+0xdc>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	4a2b      	ldr	r2, [pc, #172]	; (8001cf8 <SystemClock_Config+0xdc>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c50:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <SystemClock_Config+0xdc>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <SystemClock_Config+0xe0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a25      	ldr	r2, [pc, #148]	; (8001cfc <SystemClock_Config+0xe0>)
 8001c66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <SystemClock_Config+0xe0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c82:	2302      	movs	r3, #2
 8001c84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001c90:	23b4      	movs	r3, #180	; 0xb4
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c94:	2302      	movs	r3, #2
 8001c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001c98:	2308      	movs	r3, #8
 8001c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9c:	f107 0320 	add.w	r3, r7, #32
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f005 fdc1 	bl	8007828 <HAL_RCC_OscConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cac:	f001 fcd4 	bl	8003658 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cb0:	f005 fd6a 	bl	8007788 <HAL_PWREx_EnableOverDrive>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001cba:	f001 fccd 	bl	8003658 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cbe:	230f      	movs	r3, #15
 8001cc0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	2105      	movs	r1, #5
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f006 f81b 	bl	8007d18 <HAL_RCC_ClockConfig>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001ce8:	f001 fcb6 	bl	8003658 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001cec:	f006 f8fa 	bl	8007ee4 <HAL_RCC_EnableCSS>
}
 8001cf0:	bf00      	nop
 8001cf2:	3750      	adds	r7, #80	; 0x50
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40007000 	.word	0x40007000

08001d00 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	; 0x30
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d06:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d08:	4a32      	ldr	r2, [pc, #200]	; (8001dd4 <MX_CAN1_Init+0xd4>)
 8001d0a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8001d0c:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d0e:	220a      	movs	r2, #10
 8001d10:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d12:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d18:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d24:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001d26:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d28:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001d2c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d2e:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d34:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d52:	481f      	ldr	r0, [pc, #124]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d54:	f002 fba8 	bl	80044a8 <HAL_CAN_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001d5e:	f001 fc7b 	bl	8003658 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 15;
 8001d62:	230f      	movs	r3, #15
 8001d64:	61fb      	str	r3, [r7, #28]
  	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
  	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  	sFilterConfig.FilterIdHigh = 0x0000;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterIdLow = 0x0000;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
  	sFilterConfig.FilterActivation = ENABLE;
 8001d82:	2301      	movs	r3, #1
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
  	//sFilterConfig.SlaveStartFilterBank = 14;
  	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4810      	ldr	r0, [pc, #64]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d8e:	f002 fc87 	bl	80046a0 <HAL_CAN_ConfigFilter>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_CAN1_Init+0x9c>
  		/* Filter configuration Error */
  		Error_Handler();
 8001d98:	f001 fc5e 	bl	8003658 <Error_Handler>
  	}
  	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <MX_CAN1_Init+0xd0>)
 8001d9e:	f002 fd5f 	bl	8004860 <HAL_CAN_Start>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_CAN1_Init+0xac>
  		/* Start Error */
  		Error_Handler();
 8001da8:	f001 fc56 	bl	8003658 <Error_Handler>
  	}

	__HAL_RCC_CAN1_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_CAN1_Init+0xd8>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <MX_CAN1_Init+0xd8>)
 8001db6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dba:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_CAN1_Init+0xd8>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
  	//__HAL_RCC_CAN2_CLK_ENABLE();
  /* USER CODE END CAN1_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	3730      	adds	r7, #48	; 0x30
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	2000b05c 	.word	0x2000b05c
 8001dd4:	40006400 	.word	0x40006400
 8001dd8:	40023800 	.word	0x40023800

08001ddc <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001de2:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <MX_CAN2_Init+0x68>)
 8001de4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001de8:	220a      	movs	r2, #10
 8001dea:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001dfa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001dfe:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001e02:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001e06:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001e2c:	4804      	ldr	r0, [pc, #16]	; (8001e40 <MX_CAN2_Init+0x64>)
 8001e2e:	f002 fb3b 	bl	80044a8 <HAL_CAN_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001e38:	f001 fc0e 	bl	8003658 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	2000a640 	.word	0x2000a640
 8001e44:	40006800 	.word	0x40006800

08001e48 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_CRC_Init+0x20>)
 8001e4e:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <MX_CRC_Init+0x24>)
 8001e50:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_CRC_Init+0x20>)
 8001e54:	f003 f976 	bl	8005144 <HAL_CRC_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001e5e:	f001 fbfb 	bl	8003658 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000a47c 	.word	0x2000a47c
 8001e6c:	40023000 	.word	0x40023000

08001e70 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001e74:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001e76:	4a21      	ldr	r2, [pc, #132]	; (8001efc <MX_DMA2D_Init+0x8c>)
 8001e78:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_BLEND;
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001e7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e80:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001e82:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001e84:	2202      	movs	r2, #2
 8001e86:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[0].InputOffset = 0;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001e96:	2202      	movs	r2, #2
 8001e98:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
  hdma2d.LayerCfg[0].InputAlpha = 0;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001eae:	2202      	movs	r2, #2
 8001eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001ebe:	480e      	ldr	r0, [pc, #56]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001ec0:	f003 fcd8 	bl	8005874 <HAL_DMA2D_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 8001eca:	f001 fbc5 	bl	8003658 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 0) != HAL_OK)
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4809      	ldr	r0, [pc, #36]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001ed2:	f003 fe29 	bl	8005b28 <HAL_DMA2D_ConfigLayer>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 8001edc:	f001 fbbc 	bl	8003658 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <MX_DMA2D_Init+0x88>)
 8001ee4:	f003 fe20 	bl	8005b28 <HAL_DMA2D_ConfigLayer>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_DMA2D_Init+0x82>
  {
    Error_Handler();
 8001eee:	f001 fbb3 	bl	8003658 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000b014 	.word	0x2000b014
 8001efc:	4002b000 	.word	0x4002b000

08001f00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f06:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <MX_I2C2_Init+0x78>)
 8001f08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f0c:	4a1b      	ldr	r2, [pc, #108]	; (8001f7c <MX_I2C2_Init+0x7c>)
 8001f0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f36:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f3c:	480d      	ldr	r0, [pc, #52]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f3e:	f004 f87d 	bl	800603c <HAL_I2C_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f48:	f001 fb86 	bl	8003658 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4809      	ldr	r0, [pc, #36]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f50:	f005 f809 	bl	8006f66 <HAL_I2CEx_ConfigAnalogFilter>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001f5a:	f001 fb7d 	bl	8003658 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4804      	ldr	r0, [pc, #16]	; (8001f74 <MX_I2C2_Init+0x74>)
 8001f62:	f005 f83c 	bl	8006fde <HAL_I2CEx_ConfigDigitalFilter>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001f6c:	f001 fb74 	bl	8003658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	2000a484 	.word	0x2000a484
 8001f78:	40005800 	.word	0x40005800
 8001f7c:	00061a80 	.word	0x00061a80

08001f80 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b096      	sub	sp, #88	; 0x58
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2234      	movs	r2, #52	; 0x34
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f02c f925 	bl	802e1dc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */
  int pwidth=1024;
 8001f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f96:	657b      	str	r3, [r7, #84]	; 0x54
  int pheight=600;
 8001f98:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001f9c:	653b      	str	r3, [r7, #80]	; 0x50
  int hsw=20;
 8001f9e:	2314      	movs	r3, #20
 8001fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  int vsw=3;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	64bb      	str	r3, [r7, #72]	; 0x48
  int hbp=140;
 8001fa6:	238c      	movs	r3, #140	; 0x8c
 8001fa8:	647b      	str	r3, [r7, #68]	; 0x44
  int vbp=20;
 8001faa:	2314      	movs	r3, #20
 8001fac:	643b      	str	r3, [r7, #64]	; 0x40
  int hfp=160;
 8001fae:	23a0      	movs	r3, #160	; 0xa0
 8001fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  int vfp=12;
 8001fb2:	230c      	movs	r3, #12
 8001fb4:	63bb      	str	r3, [r7, #56]	; 0x38

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001fb6:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fb8:	4a3a      	ldr	r2, [pc, #232]	; (80020a4 <MX_LTDC_Init+0x124>)
 8001fba:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001fbc:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001fc2:	4b37      	ldr	r3, [pc, #220]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001fc8:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001fce:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 20;
 8001fd4:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fd6:	2214      	movs	r2, #20
 8001fd8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001fda:	4b31      	ldr	r3, [pc, #196]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fdc:	2203      	movs	r2, #3
 8001fde:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 160;
 8001fe0:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fe2:	22a0      	movs	r2, #160	; 0xa0
 8001fe4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 15;
 8001fe6:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fe8:	220f      	movs	r2, #15
 8001fea:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1184;
 8001fec:	4b2c      	ldr	r3, [pc, #176]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001fee:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 615;
 8001ff4:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001ff6:	f240 2267 	movw	r2, #615	; 0x267
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1344;
 8001ffc:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <MX_LTDC_Init+0x120>)
 8001ffe:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8002002:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 635;
 8002004:	4b26      	ldr	r3, [pc, #152]	; (80020a0 <MX_LTDC_Init+0x120>)
 8002006:	f240 227b 	movw	r2, #635	; 0x27b
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800200c:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <MX_LTDC_Init+0x120>)
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002014:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <MX_LTDC_Init+0x120>)
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800201c:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <MX_LTDC_Init+0x120>)
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002024:	481e      	ldr	r0, [pc, #120]	; (80020a0 <MX_LTDC_Init+0x120>)
 8002026:	f005 f819 	bl	800705c <HAL_LTDC_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_LTDC_Init+0xb4>
  {
    Error_Handler();
 8002030:	f001 fb12 	bl	8003658 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 1024;
 8002038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800203c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 600;
 8002042:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002046:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002048:	2302      	movs	r3, #2
 800204a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800204c:	23ff      	movs	r3, #255	; 0xff
 800204e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002054:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002058:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800205a:	2307      	movs	r3, #7
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800205e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 1024;
 8002064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 600;
 800206a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800206e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2200      	movs	r2, #0
 8002086:	4619      	mov	r1, r3
 8002088:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_LTDC_Init+0x120>)
 800208a:	f005 f96f 	bl	800736c <HAL_LTDC_ConfigLayer>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_LTDC_Init+0x118>
  {
    Error_Handler();
 8002094:	f001 fae0 	bl	8003658 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002098:	bf00      	nop
 800209a:	3758      	adds	r7, #88	; 0x58
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	2000a598 	.word	0x2000a598
 80020a4:	40016800 	.word	0x40016800

080020a8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <MX_SDIO_SD_Init+0x38>)
 80020ae:	4a0d      	ldr	r2, [pc, #52]	; (80020e4 <MX_SDIO_SD_Init+0x3c>)
 80020b0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <MX_SDIO_SD_Init+0x38>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <MX_SDIO_SD_Init+0x38>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <MX_SDIO_SD_Init+0x38>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <MX_SDIO_SD_Init+0x38>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <MX_SDIO_SD_Init+0x38>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <MX_SDIO_SD_Init+0x38>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	2000af88 	.word	0x2000af88
 80020e4:	40012c00 	.word	0x40012c00

080020e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b096      	sub	sp, #88	; 0x58
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]
 8002116:	615a      	str	r2, [r3, #20]
 8002118:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	2220      	movs	r2, #32
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f02c f85b 	bl	802e1dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002126:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <MX_TIM1_Init+0x138>)
 8002128:	4a3e      	ldr	r2, [pc, #248]	; (8002224 <MX_TIM1_Init+0x13c>)
 800212a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800212c:	4b3c      	ldr	r3, [pc, #240]	; (8002220 <MX_TIM1_Init+0x138>)
 800212e:	2200      	movs	r2, #0
 8002130:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002132:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <MX_TIM1_Init+0x138>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210-1;
 8002138:	4b39      	ldr	r3, [pc, #228]	; (8002220 <MX_TIM1_Init+0x138>)
 800213a:	22d1      	movs	r2, #209	; 0xd1
 800213c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213e:	4b38      	ldr	r3, [pc, #224]	; (8002220 <MX_TIM1_Init+0x138>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002144:	4b36      	ldr	r3, [pc, #216]	; (8002220 <MX_TIM1_Init+0x138>)
 8002146:	2200      	movs	r2, #0
 8002148:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214a:	4b35      	ldr	r3, [pc, #212]	; (8002220 <MX_TIM1_Init+0x138>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002150:	4833      	ldr	r0, [pc, #204]	; (8002220 <MX_TIM1_Init+0x138>)
 8002152:	f007 faf9 	bl	8009748 <HAL_TIM_Base_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800215c:	f001 fa7c 	bl	8003658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002164:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002166:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800216a:	4619      	mov	r1, r3
 800216c:	482c      	ldr	r0, [pc, #176]	; (8002220 <MX_TIM1_Init+0x138>)
 800216e:	f008 f855 	bl	800a21c <HAL_TIM_ConfigClockSource>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002178:	f001 fa6e 	bl	8003658 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800217c:	4828      	ldr	r0, [pc, #160]	; (8002220 <MX_TIM1_Init+0x138>)
 800217e:	f007 fba3 	bl	80098c8 <HAL_TIM_PWM_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002188:	f001 fa66 	bl	8003658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002194:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002198:	4619      	mov	r1, r3
 800219a:	4821      	ldr	r0, [pc, #132]	; (8002220 <MX_TIM1_Init+0x138>)
 800219c:	f008 fd22 	bl	800abe4 <HAL_TIMEx_MasterConfigSynchronization>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80021a6:	f001 fa57 	bl	8003658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021aa:	2360      	movs	r3, #96	; 0x60
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b2:	2300      	movs	r3, #0
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021b6:	2300      	movs	r3, #0
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ca:	2200      	movs	r2, #0
 80021cc:	4619      	mov	r1, r3
 80021ce:	4814      	ldr	r0, [pc, #80]	; (8002220 <MX_TIM1_Init+0x138>)
 80021d0:	f007 ff62 	bl	800a098 <HAL_TIM_PWM_ConfigChannel>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80021da:	f001 fa3d 	bl	8003658 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	4619      	mov	r1, r3
 8002200:	4807      	ldr	r0, [pc, #28]	; (8002220 <MX_TIM1_Init+0x138>)
 8002202:	f008 fd6b 	bl	800acdc <HAL_TIMEx_ConfigBreakDeadTime>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800220c:	f001 fa24 	bl	8003658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002210:	4803      	ldr	r0, [pc, #12]	; (8002220 <MX_TIM1_Init+0x138>)
 8002212:	f001 fdf7 	bl	8003e04 <HAL_TIM_MspPostInit>

}
 8002216:	bf00      	nop
 8002218:	3758      	adds	r7, #88	; 0x58
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20009a98 	.word	0x20009a98
 8002224:	40010000 	.word	0x40010000

08002228 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
 800223c:	615a      	str	r2, [r3, #20]
 800223e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002240:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <MX_TIM9_Init+0x9c>)
 8002242:	4a21      	ldr	r2, [pc, #132]	; (80022c8 <MX_TIM9_Init+0xa0>)
 8002244:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = (840 * 3) -1;
 8002246:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <MX_TIM9_Init+0x9c>)
 8002248:	f640 12d7 	movw	r2, #2519	; 0x9d7
 800224c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <MX_TIM9_Init+0x9c>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000 -1;
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <MX_TIM9_Init+0x9c>)
 8002256:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800225a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <MX_TIM9_Init+0x9c>)
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002262:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <MX_TIM9_Init+0x9c>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002268:	4816      	ldr	r0, [pc, #88]	; (80022c4 <MX_TIM9_Init+0x9c>)
 800226a:	f007 fb2d 	bl	80098c8 <HAL_TIM_PWM_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8002274:	f001 f9f0 	bl	8003658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002278:	2360      	movs	r3, #96	; 0x60
 800227a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000-1;
 800227c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002280:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	2200      	movs	r2, #0
 800228e:	4619      	mov	r1, r3
 8002290:	480c      	ldr	r0, [pc, #48]	; (80022c4 <MX_TIM9_Init+0x9c>)
 8002292:	f007 ff01 	bl	800a098 <HAL_TIM_PWM_ConfigChannel>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800229c:	f001 f9dc 	bl	8003658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2204      	movs	r2, #4
 80022a4:	4619      	mov	r1, r3
 80022a6:	4807      	ldr	r0, [pc, #28]	; (80022c4 <MX_TIM9_Init+0x9c>)
 80022a8:	f007 fef6 	bl	800a098 <HAL_TIM_PWM_ConfigChannel>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM9_Init+0x8e>
  {
    Error_Handler();
 80022b2:	f001 f9d1 	bl	8003658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80022b6:	4803      	ldr	r0, [pc, #12]	; (80022c4 <MX_TIM9_Init+0x9c>)
 80022b8:	f001 fda4 	bl	8003e04 <HAL_TIM_MspPostInit>

}
 80022bc:	bf00      	nop
 80022be:	3720      	adds	r7, #32
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	2000af3c 	.word	0x2000af3c
 80022c8:	40014000 	.word	0x40014000

080022cc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
 80022e0:	615a      	str	r2, [r3, #20]
 80022e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <MX_TIM13_Init+0x94>)
 80022e6:	4a1f      	ldr	r2, [pc, #124]	; (8002364 <MX_TIM13_Init+0x98>)
 80022e8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <MX_TIM13_Init+0x94>)
 80022ec:	2253      	movs	r2, #83	; 0x53
 80022ee:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <MX_TIM13_Init+0x94>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 80022f6:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <MX_TIM13_Init+0x94>)
 80022f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022fc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <MX_TIM13_Init+0x94>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002304:	4b16      	ldr	r3, [pc, #88]	; (8002360 <MX_TIM13_Init+0x94>)
 8002306:	2280      	movs	r2, #128	; 0x80
 8002308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800230a:	4815      	ldr	r0, [pc, #84]	; (8002360 <MX_TIM13_Init+0x94>)
 800230c:	f007 fa1c 	bl	8009748 <HAL_TIM_Base_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002316:	f001 f99f 	bl	8003658 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800231a:	4811      	ldr	r0, [pc, #68]	; (8002360 <MX_TIM13_Init+0x94>)
 800231c:	f007 fad4 	bl	80098c8 <HAL_TIM_PWM_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002326:	f001 f997 	bl	8003658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800232a:	2360      	movs	r3, #96	; 0x60
 800232c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	2200      	movs	r2, #0
 800233e:	4619      	mov	r1, r3
 8002340:	4807      	ldr	r0, [pc, #28]	; (8002360 <MX_TIM13_Init+0x94>)
 8002342:	f007 fea9 	bl	800a098 <HAL_TIM_PWM_ConfigChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800234c:	f001 f984 	bl	8003658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002350:	4803      	ldr	r0, [pc, #12]	; (8002360 <MX_TIM13_Init+0x94>)
 8002352:	f001 fd57 	bl	8003e04 <HAL_TIM_MspPostInit>

}
 8002356:	bf00      	nop
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	2000a66c 	.word	0x2000a66c
 8002364:	40001c00 	.word	0x40001c00

08002368 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <MX_DMA_Init+0x3c>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <MX_DMA_Init+0x3c>)
 8002378:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <MX_DMA_Init+0x3c>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2105      	movs	r1, #5
 800238e:	2039      	movs	r0, #57	; 0x39
 8002390:	f002 feae 	bl	80050f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002394:	2039      	movs	r0, #57	; 0x39
 8002396:	f002 fec7 	bl	8005128 <HAL_NVIC_EnableIRQ>

}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800

080023a8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08c      	sub	sp, #48	; 0x30
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]
 80023ba:	60da      	str	r2, [r3, #12]
 80023bc:	611a      	str	r2, [r3, #16]
 80023be:	615a      	str	r2, [r3, #20]
 80023c0:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80023c2:	4b26      	ldr	r3, [pc, #152]	; (800245c <MX_FMC_Init+0xb4>)
 80023c4:	4a26      	ldr	r2, [pc, #152]	; (8002460 <MX_FMC_Init+0xb8>)
 80023c6:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80023c8:	4b24      	ldr	r3, [pc, #144]	; (800245c <MX_FMC_Init+0xb4>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80023ce:	4b23      	ldr	r3, [pc, #140]	; (800245c <MX_FMC_Init+0xb4>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80023d4:	4b21      	ldr	r3, [pc, #132]	; (800245c <MX_FMC_Init+0xb4>)
 80023d6:	2208      	movs	r2, #8
 80023d8:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <MX_FMC_Init+0xb4>)
 80023dc:	2210      	movs	r2, #16
 80023de:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80023e0:	4b1e      	ldr	r3, [pc, #120]	; (800245c <MX_FMC_Init+0xb4>)
 80023e2:	2240      	movs	r2, #64	; 0x40
 80023e4:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <MX_FMC_Init+0xb4>)
 80023e8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80023ec:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80023ee:	4b1b      	ldr	r3, [pc, #108]	; (800245c <MX_FMC_Init+0xb4>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <MX_FMC_Init+0xb4>)
 80023f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023fa:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80023fc:	4b17      	ldr	r3, [pc, #92]	; (800245c <MX_FMC_Init+0xb4>)
 80023fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002402:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <MX_FMC_Init+0xb4>)
 8002406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800240c:	2302      	movs	r3, #2
 800240e:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8002410:	2308      	movs	r3, #8
 8002412:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 6;
 8002414:	2306      	movs	r3, #6
 8002416:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 8002418:	2307      	movs	r3, #7
 800241a:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 5;
 800241c:	2305      	movs	r3, #5
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8002420:	2302      	movs	r3, #2
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8002424:	2302      	movs	r3, #2
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4619      	mov	r1, r3
 800242e:	480b      	ldr	r0, [pc, #44]	; (800245c <MX_FMC_Init+0xb4>)
 8002430:	f007 f907 	bl	8009642 <HAL_SDRAM_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 800243a:	f001 f90d 	bl	8003658 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	FMC_SDRAM_CommandTypeDef command;
	if (SDRAM_Initialization_Sequence(&hsdram1, &command) != HAL_OK) {
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	4619      	mov	r1, r3
 8002442:	4806      	ldr	r0, [pc, #24]	; (800245c <MX_FMC_Init+0xb4>)
 8002444:	f001 f92a 	bl	800369c <SDRAM_Initialization_Sequence>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_FMC_Init+0xaa>
		Error_Handler();
 800244e:	f001 f903 	bl	8003658 <Error_Handler>
	}
  /* USER CODE END FMC_Init 2 */
}
 8002452:	bf00      	nop
 8002454:	3730      	adds	r7, #48	; 0x30
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2000b09c 	.word	0x2000b09c
 8002460:	a0000140 	.word	0xa0000140

08002464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b090      	sub	sp, #64	; 0x40
 8002468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	60da      	str	r2, [r3, #12]
 8002478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
 800247e:	4b87      	ldr	r3, [pc, #540]	; (800269c <MX_GPIO_Init+0x238>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4a86      	ldr	r2, [pc, #536]	; (800269c <MX_GPIO_Init+0x238>)
 8002484:	f043 0310 	orr.w	r3, r3, #16
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	4b84      	ldr	r3, [pc, #528]	; (800269c <MX_GPIO_Init+0x238>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
 800249a:	4b80      	ldr	r3, [pc, #512]	; (800269c <MX_GPIO_Init+0x238>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a7f      	ldr	r2, [pc, #508]	; (800269c <MX_GPIO_Init+0x238>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b7d      	ldr	r3, [pc, #500]	; (800269c <MX_GPIO_Init+0x238>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	623b      	str	r3, [r7, #32]
 80024b6:	4b79      	ldr	r3, [pc, #484]	; (800269c <MX_GPIO_Init+0x238>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a78      	ldr	r2, [pc, #480]	; (800269c <MX_GPIO_Init+0x238>)
 80024bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b76      	ldr	r3, [pc, #472]	; (800269c <MX_GPIO_Init+0x238>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ca:	623b      	str	r3, [r7, #32]
 80024cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	4b72      	ldr	r3, [pc, #456]	; (800269c <MX_GPIO_Init+0x238>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a71      	ldr	r2, [pc, #452]	; (800269c <MX_GPIO_Init+0x238>)
 80024d8:	f043 0320 	orr.w	r3, r3, #32
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b6f      	ldr	r3, [pc, #444]	; (800269c <MX_GPIO_Init+0x238>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	4b6b      	ldr	r3, [pc, #428]	; (800269c <MX_GPIO_Init+0x238>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a6a      	ldr	r2, [pc, #424]	; (800269c <MX_GPIO_Init+0x238>)
 80024f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b68      	ldr	r3, [pc, #416]	; (800269c <MX_GPIO_Init+0x238>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	4b64      	ldr	r3, [pc, #400]	; (800269c <MX_GPIO_Init+0x238>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a63      	ldr	r2, [pc, #396]	; (800269c <MX_GPIO_Init+0x238>)
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b61      	ldr	r3, [pc, #388]	; (800269c <MX_GPIO_Init+0x238>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	4b5d      	ldr	r3, [pc, #372]	; (800269c <MX_GPIO_Init+0x238>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a5c      	ldr	r2, [pc, #368]	; (800269c <MX_GPIO_Init+0x238>)
 800252c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b5a      	ldr	r3, [pc, #360]	; (800269c <MX_GPIO_Init+0x238>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	4b56      	ldr	r3, [pc, #344]	; (800269c <MX_GPIO_Init+0x238>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a55      	ldr	r2, [pc, #340]	; (800269c <MX_GPIO_Init+0x238>)
 8002548:	f043 0308 	orr.w	r3, r3, #8
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b53      	ldr	r3, [pc, #332]	; (800269c <MX_GPIO_Init+0x238>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	4b4f      	ldr	r3, [pc, #316]	; (800269c <MX_GPIO_Init+0x238>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4a4e      	ldr	r2, [pc, #312]	; (800269c <MX_GPIO_Init+0x238>)
 8002564:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002568:	6313      	str	r3, [r2, #48]	; 0x30
 800256a:	4b4c      	ldr	r3, [pc, #304]	; (800269c <MX_GPIO_Init+0x238>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	4b48      	ldr	r3, [pc, #288]	; (800269c <MX_GPIO_Init+0x238>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a47      	ldr	r2, [pc, #284]	; (800269c <MX_GPIO_Init+0x238>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b45      	ldr	r3, [pc, #276]	; (800269c <MX_GPIO_Init+0x238>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PI3_GPIO_Port, LED_PI3_Pin, GPIO_PIN_RESET);
 8002592:	2200      	movs	r2, #0
 8002594:	2108      	movs	r1, #8
 8002596:	4842      	ldr	r0, [pc, #264]	; (80026a0 <MX_GPIO_Init+0x23c>)
 8002598:	f003 fd1c 	bl	8005fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PD4_GPIO_Port, LED_PD4_Pin, GPIO_PIN_RESET);
 800259c:	2200      	movs	r2, #0
 800259e:	2110      	movs	r1, #16
 80025a0:	4840      	ldr	r0, [pc, #256]	; (80026a4 <MX_GPIO_Init+0x240>)
 80025a2:	f003 fd17 	bl	8005fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED_PJ12_Pin|LED_PJ13_Pin|LED_PJ14_Pin|LED_PJ15_Pin, GPIO_PIN_RESET);
 80025a6:	2200      	movs	r2, #0
 80025a8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80025ac:	483e      	ldr	r0, [pc, #248]	; (80026a8 <MX_GPIO_Init+0x244>)
 80025ae:	f003 fd11 	bl	8005fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin;
 80025b2:	230c      	movs	r3, #12
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b6:	2300      	movs	r3, #0
 80025b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c2:	4619      	mov	r1, r3
 80025c4:	4839      	ldr	r0, [pc, #228]	; (80026ac <MX_GPIO_Init+0x248>)
 80025c6:	f003 fb41 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_3_Pin BTN_4_Pin */
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_4_Pin;
 80025ca:	23c0      	movs	r3, #192	; 0xc0
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ce:	2300      	movs	r3, #0
 80025d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80025d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025da:	4619      	mov	r1, r3
 80025dc:	4832      	ldr	r0, [pc, #200]	; (80026a8 <MX_GPIO_Init+0x244>)
 80025de:	f003 fb35 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_ENT_Pin */
  GPIO_InitStruct.Pin = SDIO_ENT_Pin;
 80025e2:	2308      	movs	r3, #8
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e6:	2300      	movs	r3, #0
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDIO_ENT_GPIO_Port, &GPIO_InitStruct);
 80025ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025f2:	4619      	mov	r1, r3
 80025f4:	482e      	ldr	r0, [pc, #184]	; (80026b0 <MX_GPIO_Init+0x24c>)
 80025f6:	f003 fb29 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800260c:	2307      	movs	r3, #7
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002614:	4619      	mov	r1, r3
 8002616:	4827      	ldr	r0, [pc, #156]	; (80026b4 <MX_GPIO_Init+0x250>)
 8002618:	f003 fb18 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PI3_Pin */
  GPIO_InitStruct.Pin = LED_PI3_Pin;
 800261c:	2308      	movs	r3, #8
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002620:	2301      	movs	r3, #1
 8002622:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002628:	2300      	movs	r3, #0
 800262a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_PI3_GPIO_Port, &GPIO_InitStruct);
 800262c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002630:	4619      	mov	r1, r3
 8002632:	481b      	ldr	r0, [pc, #108]	; (80026a0 <MX_GPIO_Init+0x23c>)
 8002634:	f003 fb0a 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PD4_Pin */
  GPIO_InitStruct.Pin = LED_PD4_Pin;
 8002638:	2310      	movs	r3, #16
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263c:	2301      	movs	r3, #1
 800263e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_PD4_GPIO_Port, &GPIO_InitStruct);
 8002648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800264c:	4619      	mov	r1, r3
 800264e:	4815      	ldr	r0, [pc, #84]	; (80026a4 <MX_GPIO_Init+0x240>)
 8002650:	f003 fafc 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PJ12_Pin LED_PJ13_Pin LED_PJ14_Pin LED_PJ15_Pin */
  GPIO_InitStruct.Pin = LED_PJ12_Pin|LED_PJ13_Pin|LED_PJ14_Pin|LED_PJ15_Pin;
 8002654:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265a:	2301      	movs	r3, #1
 800265c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	2300      	movs	r3, #0
 8002664:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002666:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800266a:	4619      	mov	r1, r3
 800266c:	480e      	ldr	r0, [pc, #56]	; (80026a8 <MX_GPIO_Init+0x244>)
 800266e:	f003 faed 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002672:	2338      	movs	r3, #56	; 0x38
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002682:	2305      	movs	r3, #5
 8002684:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800268a:	4619      	mov	r1, r3
 800268c:	480a      	ldr	r0, [pc, #40]	; (80026b8 <MX_GPIO_Init+0x254>)
 800268e:	f003 fadd 	bl	8005c4c <HAL_GPIO_Init>

}
 8002692:	bf00      	nop
 8002694:	3740      	adds	r7, #64	; 0x40
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800
 80026a0:	40022000 	.word	0x40022000
 80026a4:	40020c00 	.word	0x40020c00
 80026a8:	40022400 	.word	0x40022400
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40021800 	.word	0x40021800
 80026b4:	40020000 	.word	0x40020000
 80026b8:	40020400 	.word	0x40020400

080026bc <mapInt>:
float mapFloat(float x, float in_min, float in_max, float out_min,
		float out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

long mapInt(float x, float in_min, float in_max, int out_min, int out_max) {
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	ed87 0a05 	vstr	s0, [r7, #20]
 80026c6:	edc7 0a04 	vstr	s1, [r7, #16]
 80026ca:	ed87 1a03 	vstr	s2, [r7, #12]
 80026ce:	60b8      	str	r0, [r7, #8]
 80026d0:	6079      	str	r1, [r7, #4]
	return (int) ((x - in_min) * (out_max - out_min) / (in_max - in_min)
 80026d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80026d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80026da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	ee07 3a90 	vmov	s15, r3
 80026e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ec:	ee67 6a27 	vmul.f32	s13, s14, s15
 80026f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80026f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80026f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			+ out_min);
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	ee07 3a90 	vmov	s15, r3
 8002706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800270a:	ee77 7a27 	vadd.f32	s15, s14, s15
	return (int) ((x - in_min) * (out_max - out_min) / (in_max - in_min)
 800270e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002712:	ee17 3a90 	vmov	r3, s15
}
 8002716:	4618      	mov	r0, r3
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <Start_START_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_START_Task */
void Start_START_Task(void *argument)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//htim13.Instance->CCR1 = (htim13.Instance->ARR) * 0.99;

	Current_Status.LED_BRIGHTNESS  = LED_DEFAULT_BRIGHTNESS;
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <Start_START_Task+0x74>)
 800272e:	2205      	movs	r2, #5
 8002730:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	Current_Status.LCD_BRIGHTNESS = LCD_DEFAULT_BRIGHTNESS;
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <Start_START_Task+0x74>)
 8002736:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800273a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	Current_Status.LCD_BRIGHTNESS_CHANGED = 1;
 800273e:	4b16      	ldr	r3, [pc, #88]	; (8002798 <Start_START_Task+0x74>)
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	/* Infinite loop */
	for (;;) {
		if(Current_Status.LCD_BRIGHTNESS_CHANGED == 1)
 8002746:	4b14      	ldr	r3, [pc, #80]	; (8002798 <Start_START_Task+0x74>)
 8002748:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800274c:	2b01      	cmp	r3, #1
 800274e:	d109      	bne.n	8002764 <Start_START_Task+0x40>
		{
			htim13.Instance->CCR1 = Current_Status.LCD_BRIGHTNESS;
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <Start_START_Task+0x74>)
 8002752:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <Start_START_Task+0x78>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	635a      	str	r2, [r3, #52]	; 0x34
			Current_Status.LCD_BRIGHTNESS_CHANGED = 0;
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <Start_START_Task+0x74>)
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		}
		Current_Status.ECT = 50;
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <Start_START_Task+0x74>)
 8002766:	2232      	movs	r2, #50	; 0x32
 8002768:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		Current_Status.IAT = 50;
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <Start_START_Task+0x74>)
 800276e:	2232      	movs	r2, #50	; 0x32
 8002770:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        Current_Status.RPM = Current_Status.RPM <= 8000 ? Current_Status.RPM + 25 : 0;
 8002774:	4b08      	ldr	r3, [pc, #32]	; (8002798 <Start_START_Task+0x74>)
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800277c:	d804      	bhi.n	8002788 <Start_START_Task+0x64>
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <Start_START_Task+0x74>)
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	3319      	adds	r3, #25
 8002784:	b29b      	uxth	r3, r3
 8002786:	e000      	b.n	800278a <Start_START_Task+0x66>
 8002788:	2300      	movs	r3, #0
 800278a:	4a03      	ldr	r2, [pc, #12]	; (8002798 <Start_START_Task+0x74>)
 800278c:	8013      	strh	r3, [r2, #0]
		osDelay(10);
 800278e:	200a      	movs	r0, #10
 8002790:	f009 fd93 	bl	800c2ba <osDelay>
		if(Current_Status.LCD_BRIGHTNESS_CHANGED == 1)
 8002794:	e7d7      	b.n	8002746 <Start_START_Task+0x22>
 8002796:	bf00      	nop
 8002798:	2000a4d8 	.word	0x2000a4d8
 800279c:	2000a66c 	.word	0x2000a66c

080027a0 <Start_SD_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SD_Task */
void Start_SD_Task(void *argument)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_SD_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80027a8:	2001      	movs	r0, #1
 80027aa:	f009 fd86 	bl	800c2ba <osDelay>
 80027ae:	e7fb      	b.n	80027a8 <Start_SD_Task+0x8>

080027b0 <Start_LED_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LED_Task */
void Start_LED_Task(void *argument)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LED_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80027b8:	2001      	movs	r0, #1
 80027ba:	f009 fd7e 	bl	800c2ba <osDelay>
 80027be:	e7fb      	b.n	80027b8 <Start_LED_Task+0x8>

080027c0 <Start_CAN_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_CAN_Task */
void Start_CAN_Task(void *argument)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_CAN_Task */
  /* Infinite loop */
	Current_Status.CAN_PROTOCOL = CAN_LINK;
 80027c8:	4bc5      	ldr	r3, [pc, #788]	; (8002ae0 <Start_CAN_Task+0x320>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
  for(;;)
  {
	  if (CAN_ENABLED) {

	  			if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80027d0:	4bc4      	ldr	r3, [pc, #784]	; (8002ae4 <Start_CAN_Task+0x324>)
 80027d2:	4ac5      	ldr	r2, [pc, #788]	; (8002ae8 <Start_CAN_Task+0x328>)
 80027d4:	2100      	movs	r1, #0
 80027d6:	48c5      	ldr	r0, [pc, #788]	; (8002aec <Start_CAN_Task+0x32c>)
 80027d8:	f002 f886 	bl	80048e8 <HAL_CAN_GetRxMessage>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f040 8582 	bne.w	80032e8 <Start_CAN_Task+0xb28>
	  			{
	  				if(Current_Status.CAN_PROTOCOL == CAN_LINK)
 80027e4:	4bbe      	ldr	r3, [pc, #760]	; (8002ae0 <Start_CAN_Task+0x320>)
 80027e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f040 8384 	bne.w	8002ef8 <Start_CAN_Task+0x738>
	  				{
	  					switch (RxHeader.StdId) {
 80027f0:	4bbd      	ldr	r3, [pc, #756]	; (8002ae8 <Start_CAN_Task+0x328>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027f8:	f000 814a 	beq.w	8002a90 <Start_CAN_Task+0x2d0>
 80027fc:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 8002800:	f040 836d 	bne.w	8002ede <Start_CAN_Task+0x71e>
	  						case 0x7E8:
	  							switch (RxData[2]) {
 8002804:	4bb7      	ldr	r3, [pc, #732]	; (8002ae4 <Start_CAN_Task+0x324>)
 8002806:	789b      	ldrb	r3, [r3, #2]
 8002808:	3b05      	subs	r3, #5
 800280a:	2b5b      	cmp	r3, #91	; 0x5b
 800280c:	f200 813e 	bhi.w	8002a8c <Start_CAN_Task+0x2cc>
 8002810:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <Start_CAN_Task+0x58>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	08002989 	.word	0x08002989
 800281c:	08002a8d 	.word	0x08002a8d
 8002820:	08002a8d 	.word	0x08002a8d
 8002824:	08002a8d 	.word	0x08002a8d
 8002828:	08002a8d 	.word	0x08002a8d
 800282c:	08002a8d 	.word	0x08002a8d
 8002830:	0800299b 	.word	0x0800299b
 8002834:	080029a9 	.word	0x080029a9
 8002838:	080029c3 	.word	0x080029c3
 800283c:	080029cf 	.word	0x080029cf
 8002840:	080029e3 	.word	0x080029e3
 8002844:	08002a8d 	.word	0x08002a8d
 8002848:	080029f5 	.word	0x080029f5
 800284c:	08002a8d 	.word	0x08002a8d
 8002850:	08002a8d 	.word	0x08002a8d
 8002854:	08002a8d 	.word	0x08002a8d
 8002858:	08002a8d 	.word	0x08002a8d
 800285c:	08002a8d 	.word	0x08002a8d
 8002860:	08002a8d 	.word	0x08002a8d
 8002864:	08002a8d 	.word	0x08002a8d
 8002868:	08002a8d 	.word	0x08002a8d
 800286c:	08002a8d 	.word	0x08002a8d
 8002870:	08002a8d 	.word	0x08002a8d
 8002874:	08002a8d 	.word	0x08002a8d
 8002878:	08002a8d 	.word	0x08002a8d
 800287c:	08002a8d 	.word	0x08002a8d
 8002880:	08002a8d 	.word	0x08002a8d
 8002884:	08002a8d 	.word	0x08002a8d
 8002888:	08002a8d 	.word	0x08002a8d
 800288c:	080029ff 	.word	0x080029ff
 8002890:	08002a8d 	.word	0x08002a8d
 8002894:	08002a39 	.word	0x08002a39
 8002898:	08002a41 	.word	0x08002a41
 800289c:	08002a8d 	.word	0x08002a8d
 80028a0:	08002a8d 	.word	0x08002a8d
 80028a4:	08002a8d 	.word	0x08002a8d
 80028a8:	08002a8d 	.word	0x08002a8d
 80028ac:	08002a8d 	.word	0x08002a8d
 80028b0:	08002a8d 	.word	0x08002a8d
 80028b4:	08002a8d 	.word	0x08002a8d
 80028b8:	08002a8d 	.word	0x08002a8d
 80028bc:	08002a8d 	.word	0x08002a8d
 80028c0:	08002a8d 	.word	0x08002a8d
 80028c4:	08002a8d 	.word	0x08002a8d
 80028c8:	08002a8d 	.word	0x08002a8d
 80028cc:	08002a8d 	.word	0x08002a8d
 80028d0:	08002a49 	.word	0x08002a49
 80028d4:	08002a8d 	.word	0x08002a8d
 80028d8:	08002a8d 	.word	0x08002a8d
 80028dc:	08002a8d 	.word	0x08002a8d
 80028e0:	08002a8d 	.word	0x08002a8d
 80028e4:	08002a8d 	.word	0x08002a8d
 80028e8:	08002a8d 	.word	0x08002a8d
 80028ec:	08002a8d 	.word	0x08002a8d
 80028f0:	08002a8d 	.word	0x08002a8d
 80028f4:	08002a8d 	.word	0x08002a8d
 80028f8:	08002a8d 	.word	0x08002a8d
 80028fc:	08002a8d 	.word	0x08002a8d
 8002900:	08002a8d 	.word	0x08002a8d
 8002904:	08002a8d 	.word	0x08002a8d
 8002908:	08002a8d 	.word	0x08002a8d
 800290c:	08002a57 	.word	0x08002a57
 8002910:	08002a8d 	.word	0x08002a8d
 8002914:	08002a8d 	.word	0x08002a8d
 8002918:	08002a8d 	.word	0x08002a8d
 800291c:	08002a8d 	.word	0x08002a8d
 8002920:	08002a8d 	.word	0x08002a8d
 8002924:	08002a8d 	.word	0x08002a8d
 8002928:	08002a8d 	.word	0x08002a8d
 800292c:	08002a8d 	.word	0x08002a8d
 8002930:	08002a8d 	.word	0x08002a8d
 8002934:	08002a8d 	.word	0x08002a8d
 8002938:	08002a8d 	.word	0x08002a8d
 800293c:	08002a8d 	.word	0x08002a8d
 8002940:	08002a8d 	.word	0x08002a8d
 8002944:	08002a8d 	.word	0x08002a8d
 8002948:	08002a8d 	.word	0x08002a8d
 800294c:	08002a71 	.word	0x08002a71
 8002950:	08002a8d 	.word	0x08002a8d
 8002954:	08002a8d 	.word	0x08002a8d
 8002958:	08002a8d 	.word	0x08002a8d
 800295c:	08002a8d 	.word	0x08002a8d
 8002960:	08002a8d 	.word	0x08002a8d
 8002964:	08002a8d 	.word	0x08002a8d
 8002968:	08002a8d 	.word	0x08002a8d
 800296c:	08002a8d 	.word	0x08002a8d
 8002970:	08002a8d 	.word	0x08002a8d
 8002974:	08002a7b 	.word	0x08002a7b
 8002978:	08002a8d 	.word	0x08002a8d
 800297c:	08002a8d 	.word	0x08002a8d
 8002980:	08002a8d 	.word	0x08002a8d
 8002984:	08002a8d 	.word	0x08002a8d
	  								case 0x05: //PID-0x05 Engine coolant temperature , range is -40 to 215 deg C , formula == A-40
	  									Current_Status.ECT = RxData[3] - 40;
 8002988:	4b56      	ldr	r3, [pc, #344]	; (8002ae4 <Start_CAN_Task+0x324>)
 800298a:	78db      	ldrb	r3, [r3, #3]
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b28      	subs	r3, #40	; 0x28
 8002990:	b29a      	uxth	r2, r3
 8002992:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <Start_CAN_Task+0x320>)
 8002994:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	  									break;
 8002998:	e079      	b.n	8002a8e <Start_CAN_Task+0x2ce>
	  								case 0x0B: // PID-0x0B , MAP , range is 0 to 255 kPa , Formula == A
	  									Current_Status.MAP = RxData[3];
 800299a:	4b52      	ldr	r3, [pc, #328]	; (8002ae4 <Start_CAN_Task+0x324>)
 800299c:	78db      	ldrb	r3, [r3, #3]
 800299e:	b21a      	sxth	r2, r3
 80029a0:	4b4f      	ldr	r3, [pc, #316]	; (8002ae0 <Start_CAN_Task+0x320>)
 80029a2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	  									break;
 80029a6:	e072      	b.n	8002a8e <Start_CAN_Task+0x2ce>
	  								case 0x0C: // PID-0x0C , RPM  , range is 0 to 16383.75 rpm , Formula == 256A+B / 4
	  									Current_Status.RPM = (uint16_t)((RxData[4] << 8) + (RxData[3] & 0x00ff));
 80029a8:	4b4e      	ldr	r3, [pc, #312]	; (8002ae4 <Start_CAN_Task+0x324>)
 80029aa:	791b      	ldrb	r3, [r3, #4]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	4b4c      	ldr	r3, [pc, #304]	; (8002ae4 <Start_CAN_Task+0x324>)
 80029b4:	78db      	ldrb	r3, [r3, #3]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	4b48      	ldr	r3, [pc, #288]	; (8002ae0 <Start_CAN_Task+0x320>)
 80029be:	801a      	strh	r2, [r3, #0]
	  									break;
 80029c0:	e065      	b.n	8002a8e <Start_CAN_Task+0x2ce>
	  								case 0x0D: //PID-0x0D , Vehicle speed , range is 0 to 255 km/h , formula == A
	  									Current_Status.LF_SPEED = RxData[3];
 80029c2:	4b48      	ldr	r3, [pc, #288]	; (8002ae4 <Start_CAN_Task+0x324>)
 80029c4:	78db      	ldrb	r3, [r3, #3]
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	4b45      	ldr	r3, [pc, #276]	; (8002ae0 <Start_CAN_Task+0x320>)
 80029ca:	859a      	strh	r2, [r3, #44]	; 0x2c
	  									break;
 80029cc:	e05f      	b.n	8002a8e <Start_CAN_Task+0x2ce>
	  								case 0x0E: //PID-0x0E , Ignition Timing advance, range is -64 to 63.5 BTDC , formula == A/2 - 64
	  									Current_Status.IGN_TIM = RxData[3] / 2 - 64;
 80029ce:	4b45      	ldr	r3, [pc, #276]	; (8002ae4 <Start_CAN_Task+0x324>)
 80029d0:	78db      	ldrb	r3, [r3, #3]
 80029d2:	085b      	lsrs	r3, r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b40      	subs	r3, #64	; 0x40
 80029da:	b29a      	uxth	r2, r3
 80029dc:	4b40      	ldr	r3, [pc, #256]	; (8002ae0 <Start_CAN_Task+0x320>)
 80029de:	835a      	strh	r2, [r3, #26]
	  									break;
 80029e0:	e055      	b.n	8002a8e <Start_CAN_Task+0x2ce>
	  								case 0x0F: //PID-0x0F , Inlet air temperature , range is -40 to 215 deg C, formula == A-40
	  									Current_Status.IAT = RxData[3] - 40;
 80029e2:	4b40      	ldr	r3, [pc, #256]	; (8002ae4 <Start_CAN_Task+0x324>)
 80029e4:	78db      	ldrb	r3, [r3, #3]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b28      	subs	r3, #40	; 0x28
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	4b3c      	ldr	r3, [pc, #240]	; (8002ae0 <Start_CAN_Task+0x320>)
 80029ee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	  									break;
 80029f2:	e04c      	b.n	8002a8e <Start_CAN_Task+0x2ce>
	  								case 0x11: // PID-0x11 , TPS percentage, range is 0 to 100 percent, formula == 100/256 A
	  									Current_Status.TPS = 100/256 * RxData[3];
 80029f4:	4b3a      	ldr	r3, [pc, #232]	; (8002ae0 <Start_CAN_Task+0x320>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	  									break;
 80029fc:	e047      	b.n	8002a8e <Start_CAN_Task+0x2ce>
	  								case 0x1C: // PID-0x1C obd standard
	  									break;
	  								case 0x20: // PID-0x20 PIDs supported [21-40]
	  									break;
	  								case 0x22: // PID-0x22 Fuel /Pressure (Relative to manifold vacuum) , range is 0 to 5177.265 kPa , formula == 0.079(256A+B)
	  									Current_Status.FUELP = 0.079 * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));
 80029fe:	4b39      	ldr	r3, [pc, #228]	; (8002ae4 <Start_CAN_Task+0x324>)
 8002a00:	791b      	ldrb	r3, [r3, #4]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	021b      	lsls	r3, r3, #8
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	4a36      	ldr	r2, [pc, #216]	; (8002ae4 <Start_CAN_Task+0x324>)
 8002a0c:	78d2      	ldrb	r2, [r2, #3]
 8002a0e:	4413      	add	r3, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fd97 	bl	8000544 <__aeabi_i2d>
 8002a16:	a330      	add	r3, pc, #192	; (adr r3, 8002ad8 <Start_CAN_Task+0x318>)
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	f7fd fdfc 	bl	8000618 <__aeabi_dmul>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	f7fe f808 	bl	8000a3c <__aeabi_d2uiz>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <Start_CAN_Task+0x320>)
 8002a32:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	  									break;
 8002a36:	e02a      	b.n	8002a8e <Start_CAN_Task+0x2ce>
	  								case 0x24: // PID-0x24 O2 sensor2, AB: fuel/air equivalence ratio, CD: voltage ,  Formula == (2/65536)(256A +B) , 8/65536(256C+D) , Range is 0 to <2 and 0 to >8V
	  									Current_Status.LAMBDA1 = (2 / 65536) * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));// , 8 / 65536 * (256 * (uint16_t)(RxData[5] << 8) + (RxData[6] & 0x00ff));
 8002a38:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <Start_CAN_Task+0x320>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	849a      	strh	r2, [r3, #36]	; 0x24
	  									break;
 8002a3e:	e026      	b.n	8002a8e <Start_CAN_Task+0x2ce>
	  								case 0x25: // PID-0x25 O2 sensor2, AB fuel/air equivalence ratio, CD voltage ,  2/65536(256A +B) ,8/65536(256C+D) , range is 0 to <2 and 0 to >8V
	  									Current_Status.LAMBDA2 = (2 / 65536) * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));// , 8 / 65536 * (256 * (uint16_t)(RxData[5] << 8) + (RxData[6] & 0x00ff));
 8002a40:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <Start_CAN_Task+0x320>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	84da      	strh	r2, [r3, #38]	; 0x26
	  									break;
 8002a46:	e022      	b.n	8002a8e <Start_CAN_Task+0x2ce>
	  								case 0x33: // PID-0x33 Absolute Barometric pressure , range is 0 to 255 kPa , formula == A
	  									Current_Status.BARO = RxData[3];
 8002a48:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <Start_CAN_Task+0x324>)
 8002a4a:	78db      	ldrb	r3, [r3, #3]
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	4b24      	ldr	r3, [pc, #144]	; (8002ae0 <Start_CAN_Task+0x320>)
 8002a50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	  									break;
 8002a54:	e01b      	b.n	8002a8e <Start_CAN_Task+0x2ce>
	  								case 0x40: // PIDs supported [41-60]
	  									break;
	  								case 0x42: // PID-0x42 control module voltage, 256A+B / 1000 , range is 0 to 65.535v
	  									Current_Status.BATT = 256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff) / 1000;
 8002a56:	4b23      	ldr	r3, [pc, #140]	; (8002ae4 <Start_CAN_Task+0x324>)
 8002a58:	78db      	ldrb	r3, [r3, #3]
 8002a5a:	4a25      	ldr	r2, [pc, #148]	; (8002af0 <Start_CAN_Task+0x330>)
 8002a5c:	fb82 1203 	smull	r1, r2, r2, r3
 8002a60:	1192      	asrs	r2, r2, #6
 8002a62:	17db      	asrs	r3, r3, #31
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <Start_CAN_Task+0x320>)
 8002a6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	  									break;
 8002a6e:	e00e      	b.n	8002a8e <Start_CAN_Task+0x2ce>
	  								case 0x46: // PID-0x46 Ambient Air Temperature , range is -40 to 215 deg C , formula == A-40
	  									break;
	  								case 0x52: // PID-0x52 Ethanol fuel % , range is 0 to 100% , formula == (100/255)A
	  									Current_Status.ETHANOL = 100 / 255 * RxData[3];
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <Start_CAN_Task+0x320>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	  									break;
 8002a78:	e009      	b.n	8002a8e <Start_CAN_Task+0x2ce>
	  								case 0x5C: // PID-0x5C Engine oil temperature , range is -40 to 210 deg C , formula == A-40
	  									Current_Status.OILT = RxData[3] - 40;
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <Start_CAN_Task+0x324>)
 8002a7c:	78db      	ldrb	r3, [r3, #3]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b28      	subs	r3, #40	; 0x28
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <Start_CAN_Task+0x320>)
 8002a86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	  									break;
 8002a8a:	e000      	b.n	8002a8e <Start_CAN_Task+0x2ce>
	  								case 0x60: // PIDs supported [61-80]
	  									break;
	  								default:
	  									break;
 8002a8c:	bf00      	nop
	  							}
	  							break;
 8002a8e:	e226      	b.n	8002ede <Start_CAN_Task+0x71e>
	  							case 0x3E8: //Link Dash
	  								switch (RxData[0]) {
 8002a90:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <Start_CAN_Task+0x324>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b0c      	cmp	r3, #12
 8002a96:	f200 8221 	bhi.w	8002edc <Start_CAN_Task+0x71c>
 8002a9a:	a201      	add	r2, pc, #4	; (adr r2, 8002aa0 <Start_CAN_Task+0x2e0>)
 8002a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa0:	08002af5 	.word	0x08002af5
 8002aa4:	08002b43 	.word	0x08002b43
 8002aa8:	08002b91 	.word	0x08002b91
 8002aac:	08002bdd 	.word	0x08002bdd
 8002ab0:	08002c2b 	.word	0x08002c2b
 8002ab4:	08002c77 	.word	0x08002c77
 8002ab8:	08002cc1 	.word	0x08002cc1
 8002abc:	08002d15 	.word	0x08002d15
 8002ac0:	08002d61 	.word	0x08002d61
 8002ac4:	08002daf 	.word	0x08002daf
 8002ac8:	08002df9 	.word	0x08002df9
 8002acc:	08002e43 	.word	0x08002e43
 8002ad0:	08002e8d 	.word	0x08002e8d
 8002ad4:	f3af 8000 	nop.w
 8002ad8:	10624dd3 	.word	0x10624dd3
 8002adc:	3fb43958 	.word	0x3fb43958
 8002ae0:	2000a4d8 	.word	0x2000a4d8
 8002ae4:	2000b054 	.word	0x2000b054
 8002ae8:	2000b0d0 	.word	0x2000b0d0
 8002aec:	2000b05c 	.word	0x2000b05c
 8002af0:	10624dd3 	.word	0x10624dd3
	  									case 0:
	  										Current_Status.RPM = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002af4:	4b85      	ldr	r3, [pc, #532]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002af6:	78db      	ldrb	r3, [r3, #3]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	4b83      	ldr	r3, [pc, #524]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002b00:	789b      	ldrb	r3, [r3, #2]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	4b81      	ldr	r3, [pc, #516]	; (8002d10 <Start_CAN_Task+0x550>)
 8002b0a:	801a      	strh	r2, [r3, #0]
	  										Current_Status.MAP = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002b0c:	4b7f      	ldr	r3, [pc, #508]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002b0e:	795b      	ldrb	r3, [r3, #5]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	4b7d      	ldr	r3, [pc, #500]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002b18:	791b      	ldrb	r3, [r3, #4]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	b21a      	sxth	r2, r3
 8002b22:	4b7b      	ldr	r3, [pc, #492]	; (8002d10 <Start_CAN_Task+0x550>)
 8002b24:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	  										Current_Status.MGP = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002b28:	4b78      	ldr	r3, [pc, #480]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002b2a:	79db      	ldrb	r3, [r3, #7]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	4b76      	ldr	r3, [pc, #472]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002b34:	799b      	ldrb	r3, [r3, #6]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	4b74      	ldr	r3, [pc, #464]	; (8002d10 <Start_CAN_Task+0x550>)
 8002b3e:	81da      	strh	r2, [r3, #14]
	  										break;
 8002b40:	e1cc      	b.n	8002edc <Start_CAN_Task+0x71c>
	  									case 1:
	  										Current_Status.BARO = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002b42:	4b72      	ldr	r3, [pc, #456]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002b44:	78db      	ldrb	r3, [r3, #3]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	4b6f      	ldr	r3, [pc, #444]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002b4e:	789b      	ldrb	r3, [r3, #2]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	4b6e      	ldr	r3, [pc, #440]	; (8002d10 <Start_CAN_Task+0x550>)
 8002b58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	  										Current_Status.TPS = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002b5c:	4b6b      	ldr	r3, [pc, #428]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002b5e:	795b      	ldrb	r3, [r3, #5]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	4b69      	ldr	r3, [pc, #420]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002b68:	791b      	ldrb	r3, [r3, #4]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	4b67      	ldr	r3, [pc, #412]	; (8002d10 <Start_CAN_Task+0x550>)
 8002b72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	  										Current_Status.INJ_DC = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002b76:	4b65      	ldr	r3, [pc, #404]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002b78:	79db      	ldrb	r3, [r3, #7]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	4b62      	ldr	r3, [pc, #392]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002b82:	799b      	ldrb	r3, [r3, #6]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	4b61      	ldr	r3, [pc, #388]	; (8002d10 <Start_CAN_Task+0x550>)
 8002b8c:	821a      	strh	r2, [r3, #16]
	  										break;
 8002b8e:	e1a5      	b.n	8002edc <Start_CAN_Task+0x71c>
	  									case 2:
	  										Current_Status.INJ_DC_ST = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002b90:	4b5e      	ldr	r3, [pc, #376]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002b92:	78db      	ldrb	r3, [r3, #3]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	4b5c      	ldr	r3, [pc, #368]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002b9c:	789b      	ldrb	r3, [r3, #2]
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	4b5a      	ldr	r3, [pc, #360]	; (8002d10 <Start_CAN_Task+0x550>)
 8002ba6:	825a      	strh	r2, [r3, #18]
	  										Current_Status.INJ_PULSE = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002ba8:	4b58      	ldr	r3, [pc, #352]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002baa:	795b      	ldrb	r3, [r3, #5]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	4b56      	ldr	r3, [pc, #344]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002bb4:	791b      	ldrb	r3, [r3, #4]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	4b54      	ldr	r3, [pc, #336]	; (8002d10 <Start_CAN_Task+0x550>)
 8002bbe:	829a      	strh	r2, [r3, #20]
	  										Current_Status.ECT = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002bc0:	4b52      	ldr	r3, [pc, #328]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002bc2:	79db      	ldrb	r3, [r3, #7]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	4b50      	ldr	r3, [pc, #320]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002bcc:	799b      	ldrb	r3, [r3, #6]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	4b4e      	ldr	r3, [pc, #312]	; (8002d10 <Start_CAN_Task+0x550>)
 8002bd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	  										break;
 8002bda:	e17f      	b.n	8002edc <Start_CAN_Task+0x71c>
	  									case 3:
	  										Current_Status.IAT = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002bdc:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002bde:	78db      	ldrb	r3, [r3, #3]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	4b49      	ldr	r3, [pc, #292]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002be8:	789b      	ldrb	r3, [r3, #2]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	4b47      	ldr	r3, [pc, #284]	; (8002d10 <Start_CAN_Task+0x550>)
 8002bf2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	  										Current_Status.BATT = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002bf6:	4b45      	ldr	r3, [pc, #276]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002bf8:	795b      	ldrb	r3, [r3, #5]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	4b42      	ldr	r3, [pc, #264]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002c02:	791b      	ldrb	r3, [r3, #4]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <Start_CAN_Task+0x550>)
 8002c0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	  										Current_Status.MAF = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002c10:	4b3e      	ldr	r3, [pc, #248]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002c12:	79db      	ldrb	r3, [r3, #7]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	4b3c      	ldr	r3, [pc, #240]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002c1c:	799b      	ldrb	r3, [r3, #6]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	4b3a      	ldr	r3, [pc, #232]	; (8002d10 <Start_CAN_Task+0x550>)
 8002c26:	82da      	strh	r2, [r3, #22]
	  										break;
 8002c28:	e158      	b.n	8002edc <Start_CAN_Task+0x71c>
	  									case 4:
	  										Current_Status.GEAR = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002c2a:	4b38      	ldr	r3, [pc, #224]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002c2c:	78db      	ldrb	r3, [r3, #3]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	4b35      	ldr	r3, [pc, #212]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002c36:	789b      	ldrb	r3, [r3, #2]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <Start_CAN_Task+0x550>)
 8002c40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	  										Current_Status.INJ_TIM = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002c44:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002c46:	795b      	ldrb	r3, [r3, #5]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	4b2f      	ldr	r3, [pc, #188]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002c50:	791b      	ldrb	r3, [r3, #4]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	4b2d      	ldr	r3, [pc, #180]	; (8002d10 <Start_CAN_Task+0x550>)
 8002c5a:	831a      	strh	r2, [r3, #24]
	  										Current_Status.IGN_TIM = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002c5c:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002c5e:	79db      	ldrb	r3, [r3, #7]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	4b29      	ldr	r3, [pc, #164]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002c68:	799b      	ldrb	r3, [r3, #6]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <Start_CAN_Task+0x550>)
 8002c72:	835a      	strh	r2, [r3, #26]
	  										break;
 8002c74:	e132      	b.n	8002edc <Start_CAN_Task+0x71c>
	  									case 5:
	  										Current_Status.CAM_I_L = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002c76:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002c78:	78db      	ldrb	r3, [r3, #3]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002c82:	789b      	ldrb	r3, [r3, #2]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <Start_CAN_Task+0x550>)
 8002c8c:	839a      	strh	r2, [r3, #28]
	  										Current_Status.CAM_I_R = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002c8e:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002c90:	795b      	ldrb	r3, [r3, #5]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	4b1c      	ldr	r3, [pc, #112]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002c9a:	791b      	ldrb	r3, [r3, #4]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <Start_CAN_Task+0x550>)
 8002ca4:	83da      	strh	r2, [r3, #30]
	  										Current_Status.CAM_E_L = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002ca6:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002ca8:	79db      	ldrb	r3, [r3, #7]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002cb2:	799b      	ldrb	r3, [r3, #6]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <Start_CAN_Task+0x550>)
 8002cbc:	841a      	strh	r2, [r3, #32]
	  										break;
 8002cbe:	e10d      	b.n	8002edc <Start_CAN_Task+0x71c>
	  									case 6:
	  										Current_Status.CAM_E_R = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002cc0:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002cc2:	78db      	ldrb	r3, [r3, #3]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002ccc:	789b      	ldrb	r3, [r3, #2]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <Start_CAN_Task+0x550>)
 8002cd6:	845a      	strh	r2, [r3, #34]	; 0x22
	  										Current_Status.LAMBDA1 = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002cda:	795b      	ldrb	r3, [r3, #5]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002ce4:	791b      	ldrb	r3, [r3, #4]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <Start_CAN_Task+0x550>)
 8002cee:	849a      	strh	r2, [r3, #36]	; 0x24
	  										Current_Status.LAMBDA2 = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002cf2:	79db      	ldrb	r3, [r3, #7]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <Start_CAN_Task+0x54c>)
 8002cfc:	799b      	ldrb	r3, [r3, #6]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	4b02      	ldr	r3, [pc, #8]	; (8002d10 <Start_CAN_Task+0x550>)
 8002d06:	84da      	strh	r2, [r3, #38]	; 0x26
	  										break;
 8002d08:	e0e8      	b.n	8002edc <Start_CAN_Task+0x71c>
 8002d0a:	bf00      	nop
 8002d0c:	2000b054 	.word	0x2000b054
 8002d10:	2000a4d8 	.word	0x2000a4d8
	  									case 7:
	  										Current_Status.TRIG1_ERROR = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002d14:	4b75      	ldr	r3, [pc, #468]	; (8002eec <Start_CAN_Task+0x72c>)
 8002d16:	78db      	ldrb	r3, [r3, #3]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	4b73      	ldr	r3, [pc, #460]	; (8002eec <Start_CAN_Task+0x72c>)
 8002d20:	789b      	ldrb	r3, [r3, #2]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	4b71      	ldr	r3, [pc, #452]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002d2a:	851a      	strh	r2, [r3, #40]	; 0x28
	  										Current_Status.FAULT_CODES = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002d2c:	4b6f      	ldr	r3, [pc, #444]	; (8002eec <Start_CAN_Task+0x72c>)
 8002d2e:	795b      	ldrb	r3, [r3, #5]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	4b6d      	ldr	r3, [pc, #436]	; (8002eec <Start_CAN_Task+0x72c>)
 8002d38:	791b      	ldrb	r3, [r3, #4]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	4b6b      	ldr	r3, [pc, #428]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002d42:	855a      	strh	r2, [r3, #42]	; 0x2a
	  										Current_Status.FUELP = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002d44:	4b69      	ldr	r3, [pc, #420]	; (8002eec <Start_CAN_Task+0x72c>)
 8002d46:	79db      	ldrb	r3, [r3, #7]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	4b67      	ldr	r3, [pc, #412]	; (8002eec <Start_CAN_Task+0x72c>)
 8002d50:	799b      	ldrb	r3, [r3, #6]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	4b65      	ldr	r3, [pc, #404]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002d5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	  										break;
 8002d5e:	e0bd      	b.n	8002edc <Start_CAN_Task+0x71c>
	  									case 8:
	  										Current_Status.OILT = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002d60:	4b62      	ldr	r3, [pc, #392]	; (8002eec <Start_CAN_Task+0x72c>)
 8002d62:	78db      	ldrb	r3, [r3, #3]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	4b60      	ldr	r3, [pc, #384]	; (8002eec <Start_CAN_Task+0x72c>)
 8002d6c:	789b      	ldrb	r3, [r3, #2]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	4b5e      	ldr	r3, [pc, #376]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002d76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	  										Current_Status.OILP = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002d7a:	4b5c      	ldr	r3, [pc, #368]	; (8002eec <Start_CAN_Task+0x72c>)
 8002d7c:	795b      	ldrb	r3, [r3, #5]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	021b      	lsls	r3, r3, #8
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	4b59      	ldr	r3, [pc, #356]	; (8002eec <Start_CAN_Task+0x72c>)
 8002d86:	791b      	ldrb	r3, [r3, #4]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	4b58      	ldr	r3, [pc, #352]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002d90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	  										Current_Status.LF_SPEED = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002d94:	4b55      	ldr	r3, [pc, #340]	; (8002eec <Start_CAN_Task+0x72c>)
 8002d96:	79db      	ldrb	r3, [r3, #7]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	4b53      	ldr	r3, [pc, #332]	; (8002eec <Start_CAN_Task+0x72c>)
 8002da0:	799b      	ldrb	r3, [r3, #6]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	4b51      	ldr	r3, [pc, #324]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002daa:	859a      	strh	r2, [r3, #44]	; 0x2c
	  										break;
 8002dac:	e096      	b.n	8002edc <Start_CAN_Task+0x71c>
	  									case 9:
	  										Current_Status.LR_SPEED = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002dae:	4b4f      	ldr	r3, [pc, #316]	; (8002eec <Start_CAN_Task+0x72c>)
 8002db0:	78db      	ldrb	r3, [r3, #3]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	4b4c      	ldr	r3, [pc, #304]	; (8002eec <Start_CAN_Task+0x72c>)
 8002dba:	789b      	ldrb	r3, [r3, #2]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	4b4b      	ldr	r3, [pc, #300]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002dc4:	85da      	strh	r2, [r3, #46]	; 0x2e
	  										Current_Status.RF_SPEED = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002dc6:	4b49      	ldr	r3, [pc, #292]	; (8002eec <Start_CAN_Task+0x72c>)
 8002dc8:	795b      	ldrb	r3, [r3, #5]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	4b46      	ldr	r3, [pc, #280]	; (8002eec <Start_CAN_Task+0x72c>)
 8002dd2:	791b      	ldrb	r3, [r3, #4]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	4b45      	ldr	r3, [pc, #276]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002ddc:	861a      	strh	r2, [r3, #48]	; 0x30
	  										Current_Status.RR_SPEED = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002dde:	4b43      	ldr	r3, [pc, #268]	; (8002eec <Start_CAN_Task+0x72c>)
 8002de0:	79db      	ldrb	r3, [r3, #7]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	4b40      	ldr	r3, [pc, #256]	; (8002eec <Start_CAN_Task+0x72c>)
 8002dea:	799b      	ldrb	r3, [r3, #6]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	4b3f      	ldr	r3, [pc, #252]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002df4:	865a      	strh	r2, [r3, #50]	; 0x32
	  										break;
 8002df6:	e071      	b.n	8002edc <Start_CAN_Task+0x71c>
	  									case 10:
	  										Current_Status.KNOCK1 = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002df8:	4b3c      	ldr	r3, [pc, #240]	; (8002eec <Start_CAN_Task+0x72c>)
 8002dfa:	78db      	ldrb	r3, [r3, #3]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	4b3a      	ldr	r3, [pc, #232]	; (8002eec <Start_CAN_Task+0x72c>)
 8002e04:	789b      	ldrb	r3, [r3, #2]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	4b38      	ldr	r3, [pc, #224]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002e0e:	869a      	strh	r2, [r3, #52]	; 0x34
	  										Current_Status.KNOCK2 = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002e10:	4b36      	ldr	r3, [pc, #216]	; (8002eec <Start_CAN_Task+0x72c>)
 8002e12:	795b      	ldrb	r3, [r3, #5]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	4b34      	ldr	r3, [pc, #208]	; (8002eec <Start_CAN_Task+0x72c>)
 8002e1c:	791b      	ldrb	r3, [r3, #4]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	4b32      	ldr	r3, [pc, #200]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002e26:	86da      	strh	r2, [r3, #54]	; 0x36
	  										Current_Status.KNOCK3 = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002e28:	4b30      	ldr	r3, [pc, #192]	; (8002eec <Start_CAN_Task+0x72c>)
 8002e2a:	79db      	ldrb	r3, [r3, #7]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	4b2e      	ldr	r3, [pc, #184]	; (8002eec <Start_CAN_Task+0x72c>)
 8002e34:	799b      	ldrb	r3, [r3, #6]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4b2c      	ldr	r3, [pc, #176]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002e3e:	871a      	strh	r2, [r3, #56]	; 0x38
	  										break;
 8002e40:	e04c      	b.n	8002edc <Start_CAN_Task+0x71c>
	  									case 11:
	  										Current_Status.KNOCK4 = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002e42:	4b2a      	ldr	r3, [pc, #168]	; (8002eec <Start_CAN_Task+0x72c>)
 8002e44:	78db      	ldrb	r3, [r3, #3]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	021b      	lsls	r3, r3, #8
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	4b27      	ldr	r3, [pc, #156]	; (8002eec <Start_CAN_Task+0x72c>)
 8002e4e:	789b      	ldrb	r3, [r3, #2]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	4413      	add	r3, r2
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	4b26      	ldr	r3, [pc, #152]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002e58:	875a      	strh	r2, [r3, #58]	; 0x3a
	  										Current_Status.KNOCK5 = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002e5a:	4b24      	ldr	r3, [pc, #144]	; (8002eec <Start_CAN_Task+0x72c>)
 8002e5c:	795b      	ldrb	r3, [r3, #5]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	4b21      	ldr	r3, [pc, #132]	; (8002eec <Start_CAN_Task+0x72c>)
 8002e66:	791b      	ldrb	r3, [r3, #4]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002e70:	879a      	strh	r2, [r3, #60]	; 0x3c
	  										Current_Status.KNOCK6 = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002e72:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <Start_CAN_Task+0x72c>)
 8002e74:	79db      	ldrb	r3, [r3, #7]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <Start_CAN_Task+0x72c>)
 8002e7e:	799b      	ldrb	r3, [r3, #6]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	4b1a      	ldr	r3, [pc, #104]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002e88:	87da      	strh	r2, [r3, #62]	; 0x3e
	  										break;
 8002e8a:	e027      	b.n	8002edc <Start_CAN_Task+0x71c>
	  									case 12:
	  										Current_Status.KNOCK7 = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002e8c:	4b17      	ldr	r3, [pc, #92]	; (8002eec <Start_CAN_Task+0x72c>)
 8002e8e:	78db      	ldrb	r3, [r3, #3]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	4b15      	ldr	r3, [pc, #84]	; (8002eec <Start_CAN_Task+0x72c>)
 8002e98:	789b      	ldrb	r3, [r3, #2]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002ea2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	  										Current_Status.KNOCK8 = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002ea6:	4b11      	ldr	r3, [pc, #68]	; (8002eec <Start_CAN_Task+0x72c>)
 8002ea8:	795b      	ldrb	r3, [r3, #5]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <Start_CAN_Task+0x72c>)
 8002eb2:	791b      	ldrb	r3, [r3, #4]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002ebc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	  										Current_Status.LIMITS = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <Start_CAN_Task+0x72c>)
 8002ec2:	79db      	ldrb	r3, [r3, #7]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	021b      	lsls	r3, r3, #8
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <Start_CAN_Task+0x72c>)
 8002ecc:	799b      	ldrb	r3, [r3, #6]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <Start_CAN_Task+0x730>)
 8002ed6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	  										break;
 8002eda:	bf00      	nop
	  								}
	  								break;
 8002edc:	bf00      	nop
	  							}
	  					HAL_GPIO_TogglePin(LED_PJ15_GPIO_Port, LED_PJ15_Pin);
 8002ede:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ee2:	4804      	ldr	r0, [pc, #16]	; (8002ef4 <Start_CAN_Task+0x734>)
 8002ee4:	f003 f88f 	bl	8006006 <HAL_GPIO_TogglePin>
 8002ee8:	e156      	b.n	8003198 <Start_CAN_Task+0x9d8>
 8002eea:	bf00      	nop
 8002eec:	2000b054 	.word	0x2000b054
 8002ef0:	2000a4d8 	.word	0x2000a4d8
 8002ef4:	40022400 	.word	0x40022400
	  				}
	  				else if(Current_Status.CAN_PROTOCOL == CAN_MX5)
 8002ef8:	4bc5      	ldr	r3, [pc, #788]	; (8003210 <Start_CAN_Task+0xa50>)
 8002efa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	f040 814a 	bne.w	8003198 <Start_CAN_Task+0x9d8>
	  				{
	  					switch (RxHeader.StdId) {
 8002f04:	4bc3      	ldr	r3, [pc, #780]	; (8003214 <Start_CAN_Task+0xa54>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3b05      	subs	r3, #5
 8002f0a:	2b5b      	cmp	r3, #91	; 0x5b
 8002f0c:	f200 813e 	bhi.w	800318c <Start_CAN_Task+0x9cc>
 8002f10:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <Start_CAN_Task+0x758>)
 8002f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f16:	bf00      	nop
 8002f18:	08003089 	.word	0x08003089
 8002f1c:	0800318d 	.word	0x0800318d
 8002f20:	0800318d 	.word	0x0800318d
 8002f24:	0800318d 	.word	0x0800318d
 8002f28:	0800318d 	.word	0x0800318d
 8002f2c:	0800318d 	.word	0x0800318d
 8002f30:	0800309b 	.word	0x0800309b
 8002f34:	080030a9 	.word	0x080030a9
 8002f38:	080030c3 	.word	0x080030c3
 8002f3c:	080030cf 	.word	0x080030cf
 8002f40:	080030e3 	.word	0x080030e3
 8002f44:	0800318d 	.word	0x0800318d
 8002f48:	080030f5 	.word	0x080030f5
 8002f4c:	0800318d 	.word	0x0800318d
 8002f50:	0800318d 	.word	0x0800318d
 8002f54:	0800318d 	.word	0x0800318d
 8002f58:	0800318d 	.word	0x0800318d
 8002f5c:	0800318d 	.word	0x0800318d
 8002f60:	0800318d 	.word	0x0800318d
 8002f64:	0800318d 	.word	0x0800318d
 8002f68:	0800318d 	.word	0x0800318d
 8002f6c:	0800318d 	.word	0x0800318d
 8002f70:	0800318d 	.word	0x0800318d
 8002f74:	0800318d 	.word	0x0800318d
 8002f78:	0800318d 	.word	0x0800318d
 8002f7c:	0800318d 	.word	0x0800318d
 8002f80:	0800318d 	.word	0x0800318d
 8002f84:	0800318d 	.word	0x0800318d
 8002f88:	0800318d 	.word	0x0800318d
 8002f8c:	080030ff 	.word	0x080030ff
 8002f90:	0800318d 	.word	0x0800318d
 8002f94:	0800318d 	.word	0x0800318d
 8002f98:	08003139 	.word	0x08003139
 8002f9c:	0800318d 	.word	0x0800318d
 8002fa0:	0800318d 	.word	0x0800318d
 8002fa4:	0800318d 	.word	0x0800318d
 8002fa8:	0800318d 	.word	0x0800318d
 8002fac:	0800318d 	.word	0x0800318d
 8002fb0:	0800318d 	.word	0x0800318d
 8002fb4:	0800318d 	.word	0x0800318d
 8002fb8:	0800318d 	.word	0x0800318d
 8002fbc:	0800318d 	.word	0x0800318d
 8002fc0:	0800318d 	.word	0x0800318d
 8002fc4:	0800318d 	.word	0x0800318d
 8002fc8:	0800318d 	.word	0x0800318d
 8002fcc:	0800318d 	.word	0x0800318d
 8002fd0:	08003141 	.word	0x08003141
 8002fd4:	0800314f 	.word	0x0800314f
 8002fd8:	0800318d 	.word	0x0800318d
 8002fdc:	0800318d 	.word	0x0800318d
 8002fe0:	0800318d 	.word	0x0800318d
 8002fe4:	0800318d 	.word	0x0800318d
 8002fe8:	0800318d 	.word	0x0800318d
 8002fec:	0800318d 	.word	0x0800318d
 8002ff0:	0800318d 	.word	0x0800318d
 8002ff4:	0800318d 	.word	0x0800318d
 8002ff8:	0800318d 	.word	0x0800318d
 8002ffc:	0800318d 	.word	0x0800318d
 8003000:	0800318d 	.word	0x0800318d
 8003004:	0800318d 	.word	0x0800318d
 8003008:	0800318d 	.word	0x0800318d
 800300c:	08003157 	.word	0x08003157
 8003010:	0800318d 	.word	0x0800318d
 8003014:	0800318d 	.word	0x0800318d
 8003018:	0800318d 	.word	0x0800318d
 800301c:	0800318d 	.word	0x0800318d
 8003020:	0800318d 	.word	0x0800318d
 8003024:	0800318d 	.word	0x0800318d
 8003028:	0800318d 	.word	0x0800318d
 800302c:	0800318d 	.word	0x0800318d
 8003030:	0800318d 	.word	0x0800318d
 8003034:	0800318d 	.word	0x0800318d
 8003038:	0800318d 	.word	0x0800318d
 800303c:	0800318d 	.word	0x0800318d
 8003040:	0800318d 	.word	0x0800318d
 8003044:	0800318d 	.word	0x0800318d
 8003048:	0800318d 	.word	0x0800318d
 800304c:	08003171 	.word	0x08003171
 8003050:	0800318d 	.word	0x0800318d
 8003054:	0800318d 	.word	0x0800318d
 8003058:	0800318d 	.word	0x0800318d
 800305c:	0800318d 	.word	0x0800318d
 8003060:	0800318d 	.word	0x0800318d
 8003064:	0800318d 	.word	0x0800318d
 8003068:	0800318d 	.word	0x0800318d
 800306c:	0800318d 	.word	0x0800318d
 8003070:	0800318d 	.word	0x0800318d
 8003074:	0800317b 	.word	0x0800317b
 8003078:	0800318d 	.word	0x0800318d
 800307c:	0800318d 	.word	0x0800318d
 8003080:	0800318d 	.word	0x0800318d
 8003084:	0800318d 	.word	0x0800318d
	  						case 0x05: //PID-0x05 Engine coolant temperature , range is -40 to 215 deg C , formula == A-40
	  							Current_Status.ECT = RxData[3] - 40;
 8003088:	4b63      	ldr	r3, [pc, #396]	; (8003218 <Start_CAN_Task+0xa58>)
 800308a:	78db      	ldrb	r3, [r3, #3]
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b28      	subs	r3, #40	; 0x28
 8003090:	b29a      	uxth	r2, r3
 8003092:	4b5f      	ldr	r3, [pc, #380]	; (8003210 <Start_CAN_Task+0xa50>)
 8003094:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	  							break;
 8003098:	e079      	b.n	800318e <Start_CAN_Task+0x9ce>
	  						case 0x0B: // PID-0x0B , MAP , range is 0 to 255 kPa , Formula == A
	  							Current_Status.MAP = RxData[3];
 800309a:	4b5f      	ldr	r3, [pc, #380]	; (8003218 <Start_CAN_Task+0xa58>)
 800309c:	78db      	ldrb	r3, [r3, #3]
 800309e:	b21a      	sxth	r2, r3
 80030a0:	4b5b      	ldr	r3, [pc, #364]	; (8003210 <Start_CAN_Task+0xa50>)
 80030a2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	  							break;
 80030a6:	e072      	b.n	800318e <Start_CAN_Task+0x9ce>
	  						case 0x0C: // PID-0x0C , RPM  , range is 0 to 16383.75 rpm , Formula == 256A+B / 4
	  							Current_Status.RPM = (uint16_t)((RxData[4] << 8) + (RxData[3] & 0x00ff));
 80030a8:	4b5b      	ldr	r3, [pc, #364]	; (8003218 <Start_CAN_Task+0xa58>)
 80030aa:	791b      	ldrb	r3, [r3, #4]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	4b59      	ldr	r3, [pc, #356]	; (8003218 <Start_CAN_Task+0xa58>)
 80030b4:	78db      	ldrb	r3, [r3, #3]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	4b54      	ldr	r3, [pc, #336]	; (8003210 <Start_CAN_Task+0xa50>)
 80030be:	801a      	strh	r2, [r3, #0]
	  							break;
 80030c0:	e065      	b.n	800318e <Start_CAN_Task+0x9ce>
	  						case 0x0D: //PID-0x0D , Vehicle speed , range is 0 to 255 km/h , formula == A
	  							Current_Status.LF_SPEED = RxData[3];
 80030c2:	4b55      	ldr	r3, [pc, #340]	; (8003218 <Start_CAN_Task+0xa58>)
 80030c4:	78db      	ldrb	r3, [r3, #3]
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	4b51      	ldr	r3, [pc, #324]	; (8003210 <Start_CAN_Task+0xa50>)
 80030ca:	859a      	strh	r2, [r3, #44]	; 0x2c
	  							break;
 80030cc:	e05f      	b.n	800318e <Start_CAN_Task+0x9ce>
	  						case 0x0E: //PID-0x0E , Ignition Timing advance, range is -64 to 63.5 BTDC , formula == A/2 - 64
	  							Current_Status.IGN_TIM = RxData[3] / 2 - 64;
 80030ce:	4b52      	ldr	r3, [pc, #328]	; (8003218 <Start_CAN_Task+0xa58>)
 80030d0:	78db      	ldrb	r3, [r3, #3]
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b40      	subs	r3, #64	; 0x40
 80030da:	b29a      	uxth	r2, r3
 80030dc:	4b4c      	ldr	r3, [pc, #304]	; (8003210 <Start_CAN_Task+0xa50>)
 80030de:	835a      	strh	r2, [r3, #26]
	  							break;
 80030e0:	e055      	b.n	800318e <Start_CAN_Task+0x9ce>
	  						case 0x0F: //PID-0x0F , Inlet air temperature , range is -40 to 215 deg C, formula == A-40
	  							Current_Status.IAT = RxData[3] - 40;
 80030e2:	4b4d      	ldr	r3, [pc, #308]	; (8003218 <Start_CAN_Task+0xa58>)
 80030e4:	78db      	ldrb	r3, [r3, #3]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b28      	subs	r3, #40	; 0x28
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	4b48      	ldr	r3, [pc, #288]	; (8003210 <Start_CAN_Task+0xa50>)
 80030ee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	  							break;
 80030f2:	e04c      	b.n	800318e <Start_CAN_Task+0x9ce>
	  						case 0x11: // PID-0x11 , TPS percentage, range is 0 to 100 percent, formula == 100/256 A
	  							Current_Status.TPS = 100/256 * RxData[3];
 80030f4:	4b46      	ldr	r3, [pc, #280]	; (8003210 <Start_CAN_Task+0xa50>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	  							break;
 80030fc:	e047      	b.n	800318e <Start_CAN_Task+0x9ce>
	  						case 0x1C: // PID-0x1C obd standard
	  							break;
	  						case 0x20: // PID-0x20 PIDs supported [21-40]
	  							break;
	  						case 0x22: // PID-0x22 Fuel /Pressure (Relative to manifold vacuum) , range is 0 to 5177.265 kPa , formula == 0.079(256A+B)
	  							Current_Status.FUELP = 0.079 * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));
 80030fe:	4b46      	ldr	r3, [pc, #280]	; (8003218 <Start_CAN_Task+0xa58>)
 8003100:	791b      	ldrb	r3, [r3, #4]
 8003102:	b29b      	uxth	r3, r3
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	b29b      	uxth	r3, r3
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	4a43      	ldr	r2, [pc, #268]	; (8003218 <Start_CAN_Task+0xa58>)
 800310c:	78d2      	ldrb	r2, [r2, #3]
 800310e:	4413      	add	r3, r2
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd fa17 	bl	8000544 <__aeabi_i2d>
 8003116:	a33c      	add	r3, pc, #240	; (adr r3, 8003208 <Start_CAN_Task+0xa48>)
 8003118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311c:	f7fd fa7c 	bl	8000618 <__aeabi_dmul>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4610      	mov	r0, r2
 8003126:	4619      	mov	r1, r3
 8003128:	f7fd fc88 	bl	8000a3c <__aeabi_d2uiz>
 800312c:	4603      	mov	r3, r0
 800312e:	b29a      	uxth	r2, r3
 8003130:	4b37      	ldr	r3, [pc, #220]	; (8003210 <Start_CAN_Task+0xa50>)
 8003132:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	  							break;
 8003136:	e02a      	b.n	800318e <Start_CAN_Task+0x9ce>
	  						case 0x25: // PID-0x25 O2 sensor2, AB fuel/air equivalence ratio, CD voltage ,  2/65536(256A +B) ,8/65536(256C+D) , range is 0 to <2 and 0 to >8V
	  							Current_Status.LAMBDA2 = (2 / 65536) * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));// , 8 / 65536 * (256 * (uint16_t)(RxData[5] << 8) + (RxData[6] & 0x00ff));
 8003138:	4b35      	ldr	r3, [pc, #212]	; (8003210 <Start_CAN_Task+0xa50>)
 800313a:	2200      	movs	r2, #0
 800313c:	84da      	strh	r2, [r3, #38]	; 0x26
	  							break;
 800313e:	e026      	b.n	800318e <Start_CAN_Task+0x9ce>
	  						case 0x33: // PID-0x33 Absolute Barometric pressure , range is 0 to 255 kPa , formula == A
	  							Current_Status.BARO = RxData[3];
 8003140:	4b35      	ldr	r3, [pc, #212]	; (8003218 <Start_CAN_Task+0xa58>)
 8003142:	78db      	ldrb	r3, [r3, #3]
 8003144:	b29a      	uxth	r2, r3
 8003146:	4b32      	ldr	r3, [pc, #200]	; (8003210 <Start_CAN_Task+0xa50>)
 8003148:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	  							break;
 800314c:	e01f      	b.n	800318e <Start_CAN_Task+0x9ce>
	  						case 0x34: // PID-0x24 O2 sensor2, AB: fuel/air equivalence ratio, CD: voltage ,  Formula == (2/65536)(256A +B) , 8/65536(256C+D) , Range is 0 to <2 and 0 to >8V
	  							Current_Status.LAMBDA1 = (2 / 65536) * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));// , 8 / 65536 * (256 * (uint16_t)(RxData[5] << 8) + (RxData[6] & 0x00ff));
 800314e:	4b30      	ldr	r3, [pc, #192]	; (8003210 <Start_CAN_Task+0xa50>)
 8003150:	2200      	movs	r2, #0
 8003152:	849a      	strh	r2, [r3, #36]	; 0x24
	  							break;
 8003154:	e01b      	b.n	800318e <Start_CAN_Task+0x9ce>
	  						case 0x40: // PIDs supported [41-60]
	  							break;
	  						case 0x42: // PID-0x42 control module voltage, 256A+B / 1000 , range is 0 to 65.535v
	  							Current_Status.BATT = 256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff) / 1000;
 8003156:	4b30      	ldr	r3, [pc, #192]	; (8003218 <Start_CAN_Task+0xa58>)
 8003158:	78db      	ldrb	r3, [r3, #3]
 800315a:	4a30      	ldr	r2, [pc, #192]	; (800321c <Start_CAN_Task+0xa5c>)
 800315c:	fb82 1203 	smull	r1, r2, r2, r3
 8003160:	1192      	asrs	r2, r2, #6
 8003162:	17db      	asrs	r3, r3, #31
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	b29a      	uxth	r2, r3
 8003168:	4b29      	ldr	r3, [pc, #164]	; (8003210 <Start_CAN_Task+0xa50>)
 800316a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	  							break;
 800316e:	e00e      	b.n	800318e <Start_CAN_Task+0x9ce>
	  						case 0x46: // PID-0x46 Ambient Air Temperature , range is -40 to 215 deg C , formula == A-40
	  							break;
	  						case 0x52: // PID-0x52 Ethanol fuel % , range is 0 to 100% , formula == (100/255)A
	  							Current_Status.ETHANOL = 100 / 255 * RxData[3];
 8003170:	4b27      	ldr	r3, [pc, #156]	; (8003210 <Start_CAN_Task+0xa50>)
 8003172:	2200      	movs	r2, #0
 8003174:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	  							break;
 8003178:	e009      	b.n	800318e <Start_CAN_Task+0x9ce>
	  						case 0x5C: // PID-0x5C Engine oil temperature , range is -40 to 210 deg C , formula == A-40
	  							Current_Status.OILT = RxData[3] - 40;
 800317a:	4b27      	ldr	r3, [pc, #156]	; (8003218 <Start_CAN_Task+0xa58>)
 800317c:	78db      	ldrb	r3, [r3, #3]
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b28      	subs	r3, #40	; 0x28
 8003182:	b29a      	uxth	r2, r3
 8003184:	4b22      	ldr	r3, [pc, #136]	; (8003210 <Start_CAN_Task+0xa50>)
 8003186:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	  							break;
 800318a:	e000      	b.n	800318e <Start_CAN_Task+0x9ce>
	  						case 0x60: // PIDs supported [61-80]
	  							break;
	  						default:
	  							break;
 800318c:	bf00      	nop
	  					}
	  					HAL_GPIO_TogglePin(LED_PJ15_GPIO_Port, LED_PJ15_Pin);
 800318e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003192:	4823      	ldr	r0, [pc, #140]	; (8003220 <Start_CAN_Task+0xa60>)
 8003194:	f002 ff37 	bl	8006006 <HAL_GPIO_TogglePin>
	  				}

	  				Current_Status.RPM_100 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 100);
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <Start_CAN_Task+0xa50>)
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	ee07 3a90 	vmov	s15, r3
 80031a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a4:	2164      	movs	r1, #100	; 0x64
 80031a6:	2000      	movs	r0, #0
 80031a8:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8003224 <Start_CAN_Task+0xa64>
 80031ac:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8003228 <Start_CAN_Task+0xa68>
 80031b0:	eeb0 0a67 	vmov.f32	s0, s15
 80031b4:	f7ff fa82 	bl	80026bc <mapInt>
 80031b8:	4603      	mov	r3, r0
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	4b14      	ldr	r3, [pc, #80]	; (8003210 <Start_CAN_Task+0xa50>)
 80031be:	805a      	strh	r2, [r3, #2]
	  				Current_Status.RPM_100 = Current_Status.RPM_100 >= 100 ? 100 : Current_Status.RPM_100;
 80031c0:	4b13      	ldr	r3, [pc, #76]	; (8003210 <Start_CAN_Task+0xa50>)
 80031c2:	885b      	ldrh	r3, [r3, #2]
 80031c4:	2b64      	cmp	r3, #100	; 0x64
 80031c6:	bf28      	it	cs
 80031c8:	2364      	movcs	r3, #100	; 0x64
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	4b10      	ldr	r3, [pc, #64]	; (8003210 <Start_CAN_Task+0xa50>)
 80031ce:	805a      	strh	r2, [r3, #2]
	  				Current_Status.RPM_180 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 180);
 80031d0:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <Start_CAN_Task+0xa50>)
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	ee07 3a90 	vmov	s15, r3
 80031d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031dc:	21b4      	movs	r1, #180	; 0xb4
 80031de:	2000      	movs	r0, #0
 80031e0:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8003224 <Start_CAN_Task+0xa64>
 80031e4:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003228 <Start_CAN_Task+0xa68>
 80031e8:	eeb0 0a67 	vmov.f32	s0, s15
 80031ec:	f7ff fa66 	bl	80026bc <mapInt>
 80031f0:	4603      	mov	r3, r0
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <Start_CAN_Task+0xa50>)
 80031f6:	809a      	strh	r2, [r3, #4]
	  				Current_Status.RPM_180 = Current_Status.RPM_180 >= 180 ? 810 : Current_Status.RPM_180;
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <Start_CAN_Task+0xa50>)
 80031fa:	889b      	ldrh	r3, [r3, #4]
 80031fc:	2bb3      	cmp	r3, #179	; 0xb3
 80031fe:	d815      	bhi.n	800322c <Start_CAN_Task+0xa6c>
 8003200:	4b03      	ldr	r3, [pc, #12]	; (8003210 <Start_CAN_Task+0xa50>)
 8003202:	889b      	ldrh	r3, [r3, #4]
 8003204:	e014      	b.n	8003230 <Start_CAN_Task+0xa70>
 8003206:	bf00      	nop
 8003208:	10624dd3 	.word	0x10624dd3
 800320c:	3fb43958 	.word	0x3fb43958
 8003210:	2000a4d8 	.word	0x2000a4d8
 8003214:	2000b0d0 	.word	0x2000b0d0
 8003218:	2000b054 	.word	0x2000b054
 800321c:	10624dd3 	.word	0x10624dd3
 8003220:	40022400 	.word	0x40022400
 8003224:	45fa0000 	.word	0x45fa0000
 8003228:	00000000 	.word	0x00000000
 800322c:	f240 332a 	movw	r3, #810	; 0x32a
 8003230:	4a30      	ldr	r2, [pc, #192]	; (80032f4 <Start_CAN_Task+0xb34>)
 8003232:	8093      	strh	r3, [r2, #4]
	  				Current_Status.RPM_270 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 270);
 8003234:	4b2f      	ldr	r3, [pc, #188]	; (80032f4 <Start_CAN_Task+0xb34>)
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	ee07 3a90 	vmov	s15, r3
 800323c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003240:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003244:	2000      	movs	r0, #0
 8003246:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 80032f8 <Start_CAN_Task+0xb38>
 800324a:	eddf 0a2c 	vldr	s1, [pc, #176]	; 80032fc <Start_CAN_Task+0xb3c>
 800324e:	eeb0 0a67 	vmov.f32	s0, s15
 8003252:	f7ff fa33 	bl	80026bc <mapInt>
 8003256:	4603      	mov	r3, r0
 8003258:	b29a      	uxth	r2, r3
 800325a:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <Start_CAN_Task+0xb34>)
 800325c:	811a      	strh	r2, [r3, #8]
	  				Current_Status.RPM_270 = Current_Status.RPM_270 >= 270 ? 270 : Current_Status.RPM_270;
 800325e:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <Start_CAN_Task+0xb34>)
 8003260:	891b      	ldrh	r3, [r3, #8]
 8003262:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8003266:	bf28      	it	cs
 8003268:	f44f 7387 	movcs.w	r3, #270	; 0x10e
 800326c:	b29a      	uxth	r2, r3
 800326e:	4b21      	ldr	r3, [pc, #132]	; (80032f4 <Start_CAN_Task+0xb34>)
 8003270:	811a      	strh	r2, [r3, #8]
	  				Current_Status.RPM_240 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 240);
 8003272:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <Start_CAN_Task+0xb34>)
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800327e:	21f0      	movs	r1, #240	; 0xf0
 8003280:	2000      	movs	r0, #0
 8003282:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 80032f8 <Start_CAN_Task+0xb38>
 8003286:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80032fc <Start_CAN_Task+0xb3c>
 800328a:	eeb0 0a67 	vmov.f32	s0, s15
 800328e:	f7ff fa15 	bl	80026bc <mapInt>
 8003292:	4603      	mov	r3, r0
 8003294:	b29a      	uxth	r2, r3
 8003296:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <Start_CAN_Task+0xb34>)
 8003298:	80da      	strh	r2, [r3, #6]
	  				Current_Status.RPM_240 = Current_Status.RPM_240 >= 240 ? 240 : Current_Status.RPM_240;
 800329a:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <Start_CAN_Task+0xb34>)
 800329c:	88db      	ldrh	r3, [r3, #6]
 800329e:	2bf0      	cmp	r3, #240	; 0xf0
 80032a0:	bf28      	it	cs
 80032a2:	23f0      	movcs	r3, #240	; 0xf0
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <Start_CAN_Task+0xb34>)
 80032a8:	80da      	strh	r2, [r3, #6]
	  				Current_Status.RPM_360 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 360);
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <Start_CAN_Task+0xb34>)
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	ee07 3a90 	vmov	s15, r3
 80032b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80032ba:	2000      	movs	r0, #0
 80032bc:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 80032f8 <Start_CAN_Task+0xb38>
 80032c0:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80032fc <Start_CAN_Task+0xb3c>
 80032c4:	eeb0 0a67 	vmov.f32	s0, s15
 80032c8:	f7ff f9f8 	bl	80026bc <mapInt>
 80032cc:	4603      	mov	r3, r0
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <Start_CAN_Task+0xb34>)
 80032d2:	815a      	strh	r2, [r3, #10]
	  				Current_Status.RPM_360 = Current_Status.RPM_360 >= 360 ? 360 : Current_Status.RPM_360;
 80032d4:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <Start_CAN_Task+0xb34>)
 80032d6:	895b      	ldrh	r3, [r3, #10]
 80032d8:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80032dc:	bf28      	it	cs
 80032de:	f44f 73b4 	movcs.w	r3, #360	; 0x168
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <Start_CAN_Task+0xb34>)
 80032e6:	815a      	strh	r2, [r3, #10]

	  				//HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
	  			}

	  			osDelay(1);
 80032e8:	2001      	movs	r0, #1
 80032ea:	f008 ffe6 	bl	800c2ba <osDelay>
	  if (CAN_ENABLED) {
 80032ee:	f7ff ba6f 	b.w	80027d0 <Start_CAN_Task+0x10>
 80032f2:	bf00      	nop
 80032f4:	2000a4d8 	.word	0x2000a4d8
 80032f8:	45fa0000 	.word	0x45fa0000
 80032fc:	00000000 	.word	0x00000000

08003300 <Start_BTN_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_BTN_Task */
void Start_BTN_Task(void *argument)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_BTN_Task */
  /* Infinite loop */
  for(;;)
  {
		Current_Status.BTN_TOP_RIGHT = HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin);
 8003308:	2104      	movs	r1, #4
 800330a:	483d      	ldr	r0, [pc, #244]	; (8003400 <Start_BTN_Task+0x100>)
 800330c:	f002 fe4a 	bl	8005fa4 <HAL_GPIO_ReadPin>
 8003310:	4603      	mov	r3, r0
 8003312:	461a      	mov	r2, r3
 8003314:	4b3b      	ldr	r3, [pc, #236]	; (8003404 <Start_BTN_Task+0x104>)
 8003316:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		Current_Status.BTN_TOP_LEFT = HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin);
 800331a:	2140      	movs	r1, #64	; 0x40
 800331c:	483a      	ldr	r0, [pc, #232]	; (8003408 <Start_BTN_Task+0x108>)
 800331e:	f002 fe41 	bl	8005fa4 <HAL_GPIO_ReadPin>
 8003322:	4603      	mov	r3, r0
 8003324:	461a      	mov	r2, r3
 8003326:	4b37      	ldr	r3, [pc, #220]	; (8003404 <Start_BTN_Task+0x104>)
 8003328:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

		//Current_Status.RPM = Current_Status.LCD_BRIGHTNESS;
		Current_Status.IND_LEFT = Current_Status.BTN_TOP_LEFT;
 800332c:	4b35      	ldr	r3, [pc, #212]	; (8003404 <Start_BTN_Task+0x104>)
 800332e:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8003332:	b29a      	uxth	r2, r3
 8003334:	4b33      	ldr	r3, [pc, #204]	; (8003404 <Start_BTN_Task+0x104>)
 8003336:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
		Current_Status.IND_RIGHT = Current_Status.BTN_TOP_RIGHT;
 800333a:	4b32      	ldr	r3, [pc, #200]	; (8003404 <Start_BTN_Task+0x104>)
 800333c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8003340:	b29a      	uxth	r2, r3
 8003342:	4b30      	ldr	r3, [pc, #192]	; (8003404 <Start_BTN_Task+0x104>)
 8003344:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		Current_Status.BTN_BOTTOM_RIGHT = HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin);
 8003348:	2108      	movs	r1, #8
 800334a:	482d      	ldr	r0, [pc, #180]	; (8003400 <Start_BTN_Task+0x100>)
 800334c:	f002 fe2a 	bl	8005fa4 <HAL_GPIO_ReadPin>
 8003350:	4603      	mov	r3, r0
 8003352:	461a      	mov	r2, r3
 8003354:	4b2b      	ldr	r3, [pc, #172]	; (8003404 <Start_BTN_Task+0x104>)
 8003356:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		Current_Status.BTN_BOTTOM_LEFT = HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin);
 800335a:	2180      	movs	r1, #128	; 0x80
 800335c:	482a      	ldr	r0, [pc, #168]	; (8003408 <Start_BTN_Task+0x108>)
 800335e:	f002 fe21 	bl	8005fa4 <HAL_GPIO_ReadPin>
 8003362:	4603      	mov	r3, r0
 8003364:	461a      	mov	r2, r3
 8003366:	4b27      	ldr	r3, [pc, #156]	; (8003404 <Start_BTN_Task+0x104>)
 8003368:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

		if(Current_Status.BTN_BOTTOM_LEFT == 1 && Current_Status.LCD_BRIGHTNESS_CHANGED == 0)
 800336c:	4b25      	ldr	r3, [pc, #148]	; (8003404 <Start_BTN_Task+0x104>)
 800336e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003372:	2b01      	cmp	r3, #1
 8003374:	d11a      	bne.n	80033ac <Start_BTN_Task+0xac>
 8003376:	4b23      	ldr	r3, [pc, #140]	; (8003404 <Start_BTN_Task+0x104>)
 8003378:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800337c:	2b00      	cmp	r3, #0
 800337e:	d115      	bne.n	80033ac <Start_BTN_Task+0xac>
		{
		  Current_Status.LCD_BRIGHTNESS = Current_Status.LCD_BRIGHTNESS >= 50 ? Current_Status.LCD_BRIGHTNESS - 50 : Current_Status.LCD_BRIGHTNESS;
 8003380:	4b20      	ldr	r3, [pc, #128]	; (8003404 <Start_BTN_Task+0x104>)
 8003382:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8003386:	2b31      	cmp	r3, #49	; 0x31
 8003388:	d905      	bls.n	8003396 <Start_BTN_Task+0x96>
 800338a:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <Start_BTN_Task+0x104>)
 800338c:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8003390:	3b32      	subs	r3, #50	; 0x32
 8003392:	b29b      	uxth	r3, r3
 8003394:	e002      	b.n	800339c <Start_BTN_Task+0x9c>
 8003396:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <Start_BTN_Task+0x104>)
 8003398:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800339c:	4a19      	ldr	r2, [pc, #100]	; (8003404 <Start_BTN_Task+0x104>)
 800339e:	f8a2 3096 	strh.w	r3, [r2, #150]	; 0x96
		  Current_Status.LCD_BRIGHTNESS_CHANGED = 1;
 80033a2:	4b18      	ldr	r3, [pc, #96]	; (8003404 <Start_BTN_Task+0x104>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 80033aa:	e024      	b.n	80033f6 <Start_BTN_Task+0xf6>
		} else if(Current_Status.BTN_BOTTOM_RIGHT == 1 && Current_Status.LCD_BRIGHTNESS_CHANGED == 0)
 80033ac:	4b15      	ldr	r3, [pc, #84]	; (8003404 <Start_BTN_Task+0x104>)
 80033ae:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d11b      	bne.n	80033ee <Start_BTN_Task+0xee>
 80033b6:	4b13      	ldr	r3, [pc, #76]	; (8003404 <Start_BTN_Task+0x104>)
 80033b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d116      	bne.n	80033ee <Start_BTN_Task+0xee>
		{
		  Current_Status.LCD_BRIGHTNESS = Current_Status.LCD_BRIGHTNESS <= 1000 ? Current_Status.LCD_BRIGHTNESS + 50 : Current_Status.LCD_BRIGHTNESS;
 80033c0:	4b10      	ldr	r3, [pc, #64]	; (8003404 <Start_BTN_Task+0x104>)
 80033c2:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 80033c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033ca:	d805      	bhi.n	80033d8 <Start_BTN_Task+0xd8>
 80033cc:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <Start_BTN_Task+0x104>)
 80033ce:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 80033d2:	3332      	adds	r3, #50	; 0x32
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	e002      	b.n	80033de <Start_BTN_Task+0xde>
 80033d8:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <Start_BTN_Task+0x104>)
 80033da:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 80033de:	4a09      	ldr	r2, [pc, #36]	; (8003404 <Start_BTN_Task+0x104>)
 80033e0:	f8a2 3096 	strh.w	r3, [r2, #150]	; 0x96
		  Current_Status.LCD_BRIGHTNESS_CHANGED = 1;
 80033e4:	4b07      	ldr	r3, [pc, #28]	; (8003404 <Start_BTN_Task+0x104>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 80033ec:	e003      	b.n	80033f6 <Start_BTN_Task+0xf6>
		}else{
		  Current_Status.LCD_BRIGHTNESS_CHANGED = 0;
 80033ee:	4b05      	ldr	r3, [pc, #20]	; (8003404 <Start_BTN_Task+0x104>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		}


		osDelay(100);
 80033f6:	2064      	movs	r0, #100	; 0x64
 80033f8:	f008 ff5f 	bl	800c2ba <osDelay>
		Current_Status.BTN_TOP_RIGHT = HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin);
 80033fc:	e784      	b.n	8003308 <Start_BTN_Task+0x8>
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000
 8003404:	2000a4d8 	.word	0x2000a4d8
 8003408:	40022400 	.word	0x40022400

0800340c <Start_BARO_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_BARO_Task */
void Start_BARO_Task(void *argument)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_BARO_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003414:	2001      	movs	r0, #1
 8003416:	f008 ff50 	bl	800c2ba <osDelay>
 800341a:	e7fb      	b.n	8003414 <Start_BARO_Task+0x8>

0800341c <Start_RGB_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_RGB_Task */
void Start_RGB_Task(void *argument)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08a      	sub	sp, #40	; 0x28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  if (RGB_ENABLED) {
	  		WS2812_Clear(0);
 8003424:	2000      	movs	r0, #0
 8003426:	f7fe fac7 	bl	80019b8 <WS2812_Clear>
	  		uint8_t RPMLED = 24;
 800342a:	2318      	movs	r3, #24
 800342c:	77fb      	strb	r3, [r7, #31]

	  		uint16_t lowRange = mapInt(Current_Status.RPM, PROTECTION_RPM_LOW, 0, RPMLED - PROTECTION_RPM_LED, 1);
 800342e:	4b72      	ldr	r3, [pc, #456]	; (80035f8 <Start_RGB_Task+0x1dc>)
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343a:	7ffb      	ldrb	r3, [r7, #31]
 800343c:	3b06      	subs	r3, #6
 800343e:	2101      	movs	r1, #1
 8003440:	4618      	mov	r0, r3
 8003442:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 80035fc <Start_RGB_Task+0x1e0>
 8003446:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8003600 <Start_RGB_Task+0x1e4>
 800344a:	eeb0 0a67 	vmov.f32	s0, s15
 800344e:	f7ff f935 	bl	80026bc <mapInt>
 8003452:	4603      	mov	r3, r0
 8003454:	83bb      	strh	r3, [r7, #28]
	  		lowRange = lowRange > RPMLED - PROTECTION_RPM_LED ? RPMLED - PROTECTION_RPM_LED : lowRange;
 8003456:	7ffb      	ldrb	r3, [r7, #31]
 8003458:	1f5a      	subs	r2, r3, #5
 800345a:	8bbb      	ldrh	r3, [r7, #28]
 800345c:	429a      	cmp	r2, r3
 800345e:	dc04      	bgt.n	800346a <Start_RGB_Task+0x4e>
 8003460:	7ffb      	ldrb	r3, [r7, #31]
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b06      	subs	r3, #6
 8003466:	b29b      	uxth	r3, r3
 8003468:	e000      	b.n	800346c <Start_RGB_Task+0x50>
 800346a:	8bbb      	ldrh	r3, [r7, #28]
 800346c:	83bb      	strh	r3, [r7, #28]
	  		lowRange = lowRange < 1 ? 1 : lowRange;
 800346e:	8bbb      	ldrh	r3, [r7, #28]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <Start_RGB_Task+0x5c>
 8003474:	8bbb      	ldrh	r3, [r7, #28]
 8003476:	e000      	b.n	800347a <Start_RGB_Task+0x5e>
 8003478:	2301      	movs	r3, #1
 800347a:	83bb      	strh	r3, [r7, #28]

	  		for (int i = 1; i <= lowRange ; i++) {
 800347c:	2301      	movs	r3, #1
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
 8003480:	e029      	b.n	80034d6 <Start_RGB_Task+0xba>
	  			WS2812_RGB_t color;
	  			if(Current_Status.ENGINE_PROTECTION == 1)
 8003482:	4b5d      	ldr	r3, [pc, #372]	; (80035f8 <Start_RGB_Task+0x1dc>)
 8003484:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003488:	2b01      	cmp	r3, #1
 800348a:	d106      	bne.n	800349a <Start_RGB_Task+0x7e>
	  			{
	  				color.red = 255;
 800348c:	23ff      	movs	r3, #255	; 0xff
 800348e:	753b      	strb	r3, [r7, #20]
	  				color.green = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	757b      	strb	r3, [r7, #21]
	  				color.blue = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	75bb      	strb	r3, [r7, #22]
 8003498:	e012      	b.n	80034c0 <Start_RGB_Task+0xa4>
	  			} else {
	  				color.red = (int) (0 * Current_Status.LED_BRIGHTNESS / 100);
 800349a:	2300      	movs	r3, #0
 800349c:	753b      	strb	r3, [r7, #20]
	  				color.green = (int) (255 * Current_Status.LED_BRIGHTNESS / 100);
 800349e:	4b56      	ldr	r3, [pc, #344]	; (80035f8 <Start_RGB_Task+0x1dc>)
 80034a0:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80034a4:	461a      	mov	r2, r3
 80034a6:	4613      	mov	r3, r2
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	4a55      	ldr	r2, [pc, #340]	; (8003604 <Start_RGB_Task+0x1e8>)
 80034ae:	fb82 1203 	smull	r1, r2, r2, r3
 80034b2:	1152      	asrs	r2, r2, #5
 80034b4:	17db      	asrs	r3, r3, #31
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	757b      	strb	r3, [r7, #21]
	  				color.blue = (int) (0 * Current_Status.LED_BRIGHTNESS / 100);
 80034bc:	2300      	movs	r3, #0
 80034be:	75bb      	strb	r3, [r7, #22]
	  			}
	  			WS2812_One_RGB((RPMLED - i) + (LED_NUMBER - RPMLED), color, 0);
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	f1c3 032e 	rsb	r3, r3, #46	; 0x2e
 80034c6:	2200      	movs	r2, #0
 80034c8:	6979      	ldr	r1, [r7, #20]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe faa6 	bl	8001a1c <WS2812_One_RGB>
	  		for (int i = 1; i <= lowRange ; i++) {
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	3301      	adds	r3, #1
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
 80034d6:	8bbb      	ldrh	r3, [r7, #28]
 80034d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034da:	429a      	cmp	r2, r3
 80034dc:	ddd1      	ble.n	8003482 <Start_RGB_Task+0x66>
	  		}

	  		if(Current_Status.RPM > PROTECTION_RPM_LOW)
 80034de:	4b46      	ldr	r3, [pc, #280]	; (80035f8 <Start_RGB_Task+0x1dc>)
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	f641 1264 	movw	r2, #6500	; 0x1964
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d945      	bls.n	8003576 <Start_RGB_Task+0x15a>
	  		{
	  			uint16_t highRange = mapInt(Current_Status.RPM, PROTECTION_RPM_HIGH, PROTECTION_RPM_LOW, PROTECTION_RPM_LED, 1);
 80034ea:	4b43      	ldr	r3, [pc, #268]	; (80035f8 <Start_RGB_Task+0x1dc>)
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	ee07 3a90 	vmov	s15, r3
 80034f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f6:	2101      	movs	r1, #1
 80034f8:	2006      	movs	r0, #6
 80034fa:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8003600 <Start_RGB_Task+0x1e4>
 80034fe:	eddf 0a42 	vldr	s1, [pc, #264]	; 8003608 <Start_RGB_Task+0x1ec>
 8003502:	eeb0 0a67 	vmov.f32	s0, s15
 8003506:	f7ff f8d9 	bl	80026bc <mapInt>
 800350a:	4603      	mov	r3, r0
 800350c:	837b      	strh	r3, [r7, #26]

	  			 Current_Status.GPS_SATTELITES = highRange;
 800350e:	4a3a      	ldr	r2, [pc, #232]	; (80035f8 <Start_RGB_Task+0x1dc>)
 8003510:	8b7b      	ldrh	r3, [r7, #26]
 8003512:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
	  			for (int i = 1; i <= highRange; i++) {
 8003516:	2301      	movs	r3, #1
 8003518:	623b      	str	r3, [r7, #32]
 800351a:	e028      	b.n	800356e <Start_RGB_Task+0x152>
	  				WS2812_RGB_t color;
	  				color.red = (int) (255 * (Current_Status.ENGINE_PROTECTION == 1 ? 100 : Current_Status.LED_BRIGHTNESS) / 100);
 800351c:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <Start_RGB_Task+0x1dc>)
 800351e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003522:	2b01      	cmp	r3, #1
 8003524:	d00e      	beq.n	8003544 <Start_RGB_Task+0x128>
 8003526:	4b34      	ldr	r3, [pc, #208]	; (80035f8 <Start_RGB_Task+0x1dc>)
 8003528:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800352c:	461a      	mov	r2, r3
 800352e:	4613      	mov	r3, r2
 8003530:	021b      	lsls	r3, r3, #8
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	4a33      	ldr	r2, [pc, #204]	; (8003604 <Start_RGB_Task+0x1e8>)
 8003536:	fb82 1203 	smull	r1, r2, r2, r3
 800353a:	1152      	asrs	r2, r2, #5
 800353c:	17db      	asrs	r3, r3, #31
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e000      	b.n	8003546 <Start_RGB_Task+0x12a>
 8003544:	23ff      	movs	r3, #255	; 0xff
 8003546:	743b      	strb	r3, [r7, #16]
	  				color.green = (int) (0 * (Current_Status.ENGINE_PROTECTION == 1 ? 100 : Current_Status.LED_BRIGHTNESS) / 100);
 8003548:	2300      	movs	r3, #0
 800354a:	747b      	strb	r3, [r7, #17]
	  				color.blue = (int) (0 * (Current_Status.ENGINE_PROTECTION == 1 ? 100 : Current_Status.LED_BRIGHTNESS) / 100);
 800354c:	2300      	movs	r3, #0
 800354e:	74bb      	strb	r3, [r7, #18]

	  				WS2812_One_RGB((PROTECTION_RPM_LED - i) + (LED_NUMBER - RPMLED), color, 0);
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	f1c3 0206 	rsb	r2, r3, #6
 8003556:	7ffb      	ldrb	r3, [r7, #31]
 8003558:	f1c3 032e 	rsb	r3, r3, #46	; 0x2e
 800355c:	4413      	add	r3, r2
 800355e:	2200      	movs	r2, #0
 8003560:	6939      	ldr	r1, [r7, #16]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe fa5a 	bl	8001a1c <WS2812_One_RGB>
	  			for (int i = 1; i <= highRange; i++) {
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	3301      	adds	r3, #1
 800356c:	623b      	str	r3, [r7, #32]
 800356e:	8b7b      	ldrh	r3, [r7, #26]
 8003570:	6a3a      	ldr	r2, [r7, #32]
 8003572:	429a      	cmp	r2, r3
 8003574:	ddd2      	ble.n	800351c <Start_RGB_Task+0x100>
	  //		WS2812_One_RGB(4, (WS2812_RGB_t){(255 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0); //orange
	  //		WS2812_One_RGB(5, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0);//green
	  //
	  //		WS2812_One_RGB(18, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100)}, 0); //red
	  //		WS2812_One_RGB(20, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100)}, 0); //orange
	  		if(Current_Status.IND_LEFT)
 8003576:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <Start_RGB_Task+0x1dc>)
 8003578:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800357c:	2b00      	cmp	r3, #0
 800357e:	d017      	beq.n	80035b0 <Start_RGB_Task+0x194>
	  		{
	  			WS2812_One_RGB(21, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0);//green
 8003580:	2300      	movs	r3, #0
 8003582:	733b      	strb	r3, [r7, #12]
 8003584:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <Start_RGB_Task+0x1dc>)
 8003586:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800358a:	461a      	mov	r2, r3
 800358c:	4613      	mov	r3, r2
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	4a1c      	ldr	r2, [pc, #112]	; (8003604 <Start_RGB_Task+0x1e8>)
 8003594:	fb82 1203 	smull	r1, r2, r2, r3
 8003598:	1152      	asrs	r2, r2, #5
 800359a:	17db      	asrs	r3, r3, #31
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	737b      	strb	r3, [r7, #13]
 80035a2:	2300      	movs	r3, #0
 80035a4:	73bb      	strb	r3, [r7, #14]
 80035a6:	2200      	movs	r2, #0
 80035a8:	68f9      	ldr	r1, [r7, #12]
 80035aa:	2015      	movs	r0, #21
 80035ac:	f7fe fa36 	bl	8001a1c <WS2812_One_RGB>
	  		}
	  		if(Current_Status.IND_RIGHT)
 80035b0:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <Start_RGB_Task+0x1dc>)
 80035b2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d017      	beq.n	80035ea <Start_RGB_Task+0x1ce>
			{
				WS2812_One_RGB(0, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0);//green
 80035ba:	2300      	movs	r3, #0
 80035bc:	723b      	strb	r3, [r7, #8]
 80035be:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <Start_RGB_Task+0x1dc>)
 80035c0:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80035c4:	461a      	mov	r2, r3
 80035c6:	4613      	mov	r3, r2
 80035c8:	021b      	lsls	r3, r3, #8
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	4a0d      	ldr	r2, [pc, #52]	; (8003604 <Start_RGB_Task+0x1e8>)
 80035ce:	fb82 1203 	smull	r1, r2, r2, r3
 80035d2:	1152      	asrs	r2, r2, #5
 80035d4:	17db      	asrs	r3, r3, #31
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	727b      	strb	r3, [r7, #9]
 80035dc:	2300      	movs	r3, #0
 80035de:	72bb      	strb	r3, [r7, #10]
 80035e0:	2200      	movs	r2, #0
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	2000      	movs	r0, #0
 80035e6:	f7fe fa19 	bl	8001a1c <WS2812_One_RGB>
			}

	  		WS2812_Refresh();
 80035ea:	f7fe f9d5 	bl	8001998 <WS2812_Refresh>
	  		osDelay(84);
 80035ee:	2054      	movs	r0, #84	; 0x54
 80035f0:	f008 fe63 	bl	800c2ba <osDelay>
	  if (RGB_ENABLED) {
 80035f4:	e716      	b.n	8003424 <Start_RGB_Task+0x8>
 80035f6:	bf00      	nop
 80035f8:	2000a4d8 	.word	0x2000a4d8
 80035fc:	00000000 	.word	0x00000000
 8003600:	45cb2000 	.word	0x45cb2000
 8003604:	51eb851f 	.word	0x51eb851f
 8003608:	45f3c000 	.word	0x45f3c000

0800360c <Start_BH1750_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_BH1750_Task */
void Start_BH1750_Task(void *argument)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_BH1750_Task */
	uint8_t changInProgress = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	73fb      	strb	r3, [r7, #15]
	  				changInProgress = 0;
	  			}
	  			//Current_Status.RPM = Current_Status.BH1750_LUX;
	  			osDelay(200);
	  		} else {
	  			osDelay(60000);
 8003618:	f64e 2060 	movw	r0, #60000	; 0xea60
 800361c:	f008 fe4d 	bl	800c2ba <osDelay>
	  if (BH1750_ENABLED) {
 8003620:	e7fa      	b.n	8003618 <Start_BH1750_Task+0xc>

08003622 <Start_LPS22_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LPS22_Task */
void Start_LPS22_Task(void *argument)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LPS22_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800362a:	2001      	movs	r0, #1
 800362c:	f008 fe45 	bl	800c2ba <osDelay>
 8003630:	e7fb      	b.n	800362a <Start_LPS22_Task+0x8>
	...

08003634 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a04      	ldr	r2, [pc, #16]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003646:	f000 feeb 	bl	8004420 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40001000 	.word	0x40001000

08003658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800365c:	b672      	cpsid	i
}
 800365e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003660:	e7fe      	b.n	8003660 <Error_Handler+0x8>
	...

08003664 <SDRAM_delay>:

SDRAM_HandleTypeDef hsdram1;
FMC_SDRAM_CommandTypeDef command;

void SDRAM_delay(__IO uint32_t nCount)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
	
  for(index = (100000 * nCount); index != 0; index--);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a09      	ldr	r2, [pc, #36]	; (8003698 <SDRAM_delay+0x34>)
 8003674:	fb02 f303 	mul.w	r3, r2, r3
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	e002      	b.n	8003682 <SDRAM_delay+0x1e>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3b01      	subs	r3, #1
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f9      	bne.n	800367c <SDRAM_delay+0x18>

}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	000186a0 	.word	0x000186a0

0800369c <SDRAM_Initialization_Sequence>:


void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd = 0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
  
  /* Configure a clock configuration enable command */
  Command->CommandMode 					= FMC_SDRAM_CMD_CLK_ENABLE;	// ����SDRAMʱ�� 
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2201      	movs	r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK; 	// ѡ��Ҫ���Ƶ�����
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2208      	movs	r2, #8
 80036b4:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2201      	movs	r2, #1
 80036ba:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	60da      	str	r2, [r3, #12]
  
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 80036c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036c6:	6839      	ldr	r1, [r7, #0]
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f006 f812 	bl	80096f2 <HAL_SDRAM_SendCommand>
  SDRAM_delay(1);		// ��ʱ�ȴ�
 80036ce:	2001      	movs	r0, #1
 80036d0:	f7ff ffc8 	bl	8003664 <SDRAM_delay>
  
  /* Configure a PALL (precharge all) command */ 
  Command->CommandMode 					= FMC_SDRAM_CMD_PALL;		// Ԥ�������
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2202      	movs	r2, #2
 80036d8:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;	// ѡ��Ҫ���Ƶ�����
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2208      	movs	r2, #8
 80036de:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2201      	movs	r2, #1
 80036e4:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2200      	movs	r2, #0
 80036ea:	60da      	str	r2, [r3, #12]
  
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);  // ���Ϳ���ָ��
 80036ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036f0:	6839      	ldr	r1, [r7, #0]
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f005 fffd 	bl	80096f2 <HAL_SDRAM_SendCommand>
  
  /* Configure a Auto-Refresh command */ 
  Command->CommandMode 					= FMC_SDRAM_CMD_AUTOREFRESH_MODE;	// ʹ���Զ�ˢ��
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2203      	movs	r2, #3
 80036fc:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;          // ѡ��Ҫ���Ƶ�����
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2208      	movs	r2, #8
 8003702:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber			= 8;                                // �Զ�ˢ�´���
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2208      	movs	r2, #8
 8003708:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2200      	movs	r2, #0
 800370e:	60da      	str	r2, [r3, #12]
  
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 8003710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003714:	6839      	ldr	r1, [r7, #0]
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f005 ffeb 	bl	80096f2 <HAL_SDRAM_SendCommand>
  
  /* Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 800371c:	f240 2331 	movw	r3, #561	; 0x231
 8003720:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command->CommandMode					= FMC_SDRAM_CMD_LOAD_MODE;	// ����ģʽ�Ĵ�������
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2204      	movs	r2, #4
 8003726:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;	// ѡ��Ҫ���Ƶ�����
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2208      	movs	r2, #8
 800372c:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2201      	movs	r2, #1
 8003732:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= tmpmrd;
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	60da      	str	r2, [r3, #12]
  
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 800373a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800373e:	6839      	ldr	r1, [r7, #0]
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f005 ffd6 	bl	80096f2 <HAL_SDRAM_SendCommand>
  
  hsdram->Instance->SDRTR |= ((uint32_t)((1386)<< 1));	// ����ˢ�¼����� 
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	f443 632d 	orr.w	r3, r3, #2768	; 0xad0
 8003754:	f043 0304 	orr.w	r3, r3, #4
 8003758:	6153      	str	r3, [r2, #20]
}
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <HAL_MspInit+0x54>)
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <HAL_MspInit+0x54>)
 8003774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003778:	6453      	str	r3, [r2, #68]	; 0x44
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <HAL_MspInit+0x54>)
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003782:	607b      	str	r3, [r7, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_MspInit+0x54>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	4a0a      	ldr	r2, [pc, #40]	; (80037b8 <HAL_MspInit+0x54>)
 8003790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003794:	6413      	str	r3, [r2, #64]	; 0x40
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <HAL_MspInit+0x54>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80037a2:	2200      	movs	r2, #0
 80037a4:	210f      	movs	r1, #15
 80037a6:	f06f 0001 	mvn.w	r0, #1
 80037aa:	f001 fca1 	bl	80050f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800

080037bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08c      	sub	sp, #48	; 0x30
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c4:	f107 031c 	add.w	r3, r7, #28
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	60da      	str	r2, [r3, #12]
 80037d2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a4b      	ldr	r2, [pc, #300]	; (8003908 <HAL_CAN_MspInit+0x14c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d13e      	bne.n	800385c <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80037de:	4b4b      	ldr	r3, [pc, #300]	; (800390c <HAL_CAN_MspInit+0x150>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3301      	adds	r3, #1
 80037e4:	4a49      	ldr	r2, [pc, #292]	; (800390c <HAL_CAN_MspInit+0x150>)
 80037e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80037e8:	4b48      	ldr	r3, [pc, #288]	; (800390c <HAL_CAN_MspInit+0x150>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d10d      	bne.n	800380c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80037f0:	2300      	movs	r3, #0
 80037f2:	61bb      	str	r3, [r7, #24]
 80037f4:	4b46      	ldr	r3, [pc, #280]	; (8003910 <HAL_CAN_MspInit+0x154>)
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	4a45      	ldr	r2, [pc, #276]	; (8003910 <HAL_CAN_MspInit+0x154>)
 80037fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003800:	4b43      	ldr	r3, [pc, #268]	; (8003910 <HAL_CAN_MspInit+0x154>)
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	4b3f      	ldr	r3, [pc, #252]	; (8003910 <HAL_CAN_MspInit+0x154>)
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	4a3e      	ldr	r2, [pc, #248]	; (8003910 <HAL_CAN_MspInit+0x154>)
 8003816:	f043 0302 	orr.w	r3, r3, #2
 800381a:	6313      	str	r3, [r2, #48]	; 0x30
 800381c:	4b3c      	ldr	r3, [pc, #240]	; (8003910 <HAL_CAN_MspInit+0x154>)
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003828:	f44f 7340 	mov.w	r3, #768	; 0x300
 800382c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382e:	2302      	movs	r3, #2
 8003830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	2300      	movs	r3, #0
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003836:	2303      	movs	r3, #3
 8003838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800383a:	2309      	movs	r3, #9
 800383c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800383e:	f107 031c 	add.w	r3, r7, #28
 8003842:	4619      	mov	r1, r3
 8003844:	4833      	ldr	r0, [pc, #204]	; (8003914 <HAL_CAN_MspInit+0x158>)
 8003846:	f002 fa01 	bl	8005c4c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800384a:	2200      	movs	r2, #0
 800384c:	2105      	movs	r1, #5
 800384e:	2014      	movs	r0, #20
 8003850:	f001 fc4e 	bl	80050f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003854:	2014      	movs	r0, #20
 8003856:	f001 fc67 	bl	8005128 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800385a:	e050      	b.n	80038fe <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a2d      	ldr	r2, [pc, #180]	; (8003918 <HAL_CAN_MspInit+0x15c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d14b      	bne.n	80038fe <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	4b29      	ldr	r3, [pc, #164]	; (8003910 <HAL_CAN_MspInit+0x154>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	4a28      	ldr	r2, [pc, #160]	; (8003910 <HAL_CAN_MspInit+0x154>)
 8003870:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003874:	6413      	str	r3, [r2, #64]	; 0x40
 8003876:	4b26      	ldr	r3, [pc, #152]	; (8003910 <HAL_CAN_MspInit+0x154>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003882:	4b22      	ldr	r3, [pc, #136]	; (800390c <HAL_CAN_MspInit+0x150>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	4a20      	ldr	r2, [pc, #128]	; (800390c <HAL_CAN_MspInit+0x150>)
 800388a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800388c:	4b1f      	ldr	r3, [pc, #124]	; (800390c <HAL_CAN_MspInit+0x150>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d10d      	bne.n	80038b0 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <HAL_CAN_MspInit+0x154>)
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <HAL_CAN_MspInit+0x154>)
 800389e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038a2:	6413      	str	r3, [r2, #64]	; 0x40
 80038a4:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <HAL_CAN_MspInit+0x154>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b0:	2300      	movs	r3, #0
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	4b16      	ldr	r3, [pc, #88]	; (8003910 <HAL_CAN_MspInit+0x154>)
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	4a15      	ldr	r2, [pc, #84]	; (8003910 <HAL_CAN_MspInit+0x154>)
 80038ba:	f043 0302 	orr.w	r3, r3, #2
 80038be:	6313      	str	r3, [r2, #48]	; 0x30
 80038c0:	4b13      	ldr	r3, [pc, #76]	; (8003910 <HAL_CAN_MspInit+0x154>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80038cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80038d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d2:	2302      	movs	r3, #2
 80038d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038da:	2303      	movs	r3, #3
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80038de:	2309      	movs	r3, #9
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e2:	f107 031c 	add.w	r3, r7, #28
 80038e6:	4619      	mov	r1, r3
 80038e8:	480a      	ldr	r0, [pc, #40]	; (8003914 <HAL_CAN_MspInit+0x158>)
 80038ea:	f002 f9af 	bl	8005c4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80038ee:	2200      	movs	r2, #0
 80038f0:	2105      	movs	r1, #5
 80038f2:	2040      	movs	r0, #64	; 0x40
 80038f4:	f001 fbfc 	bl	80050f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80038f8:	2040      	movs	r0, #64	; 0x40
 80038fa:	f001 fc15 	bl	8005128 <HAL_NVIC_EnableIRQ>
}
 80038fe:	bf00      	nop
 8003900:	3730      	adds	r7, #48	; 0x30
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40006400 	.word	0x40006400
 800390c:	2000011c 	.word	0x2000011c
 8003910:	40023800 	.word	0x40023800
 8003914:	40020400 	.word	0x40020400
 8003918:	40006800 	.word	0x40006800

0800391c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <HAL_CRC_MspInit+0x3c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d10d      	bne.n	800394a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <HAL_CRC_MspInit+0x40>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	4a09      	ldr	r2, [pc, #36]	; (800395c <HAL_CRC_MspInit+0x40>)
 8003938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800393c:	6313      	str	r3, [r2, #48]	; 0x30
 800393e:	4b07      	ldr	r3, [pc, #28]	; (800395c <HAL_CRC_MspInit+0x40>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800394a:	bf00      	nop
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40023000 	.word	0x40023000
 800395c:	40023800 	.word	0x40023800

08003960 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0e      	ldr	r2, [pc, #56]	; (80039a8 <HAL_DMA2D_MspInit+0x48>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d115      	bne.n	800399e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <HAL_DMA2D_MspInit+0x4c>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4a0c      	ldr	r2, [pc, #48]	; (80039ac <HAL_DMA2D_MspInit+0x4c>)
 800397c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003980:	6313      	str	r3, [r2, #48]	; 0x30
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <HAL_DMA2D_MspInit+0x4c>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800398e:	2200      	movs	r2, #0
 8003990:	2105      	movs	r1, #5
 8003992:	205a      	movs	r0, #90	; 0x5a
 8003994:	f001 fbac 	bl	80050f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003998:	205a      	movs	r0, #90	; 0x5a
 800399a:	f001 fbc5 	bl	8005128 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	4002b000 	.word	0x4002b000
 80039ac:	40023800 	.word	0x40023800

080039b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08a      	sub	sp, #40	; 0x28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b8:	f107 0314 	add.w	r3, r7, #20
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a19      	ldr	r2, [pc, #100]	; (8003a34 <HAL_I2C_MspInit+0x84>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d12b      	bne.n	8003a2a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	4b18      	ldr	r3, [pc, #96]	; (8003a38 <HAL_I2C_MspInit+0x88>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	4a17      	ldr	r2, [pc, #92]	; (8003a38 <HAL_I2C_MspInit+0x88>)
 80039dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e0:	6313      	str	r3, [r2, #48]	; 0x30
 80039e2:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <HAL_I2C_MspInit+0x88>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80039ee:	2330      	movs	r3, #48	; 0x30
 80039f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039f2:	2312      	movs	r3, #18
 80039f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039f6:	2301      	movs	r3, #1
 80039f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fa:	2303      	movs	r3, #3
 80039fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80039fe:	2304      	movs	r3, #4
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a02:	f107 0314 	add.w	r3, r7, #20
 8003a06:	4619      	mov	r1, r3
 8003a08:	480c      	ldr	r0, [pc, #48]	; (8003a3c <HAL_I2C_MspInit+0x8c>)
 8003a0a:	f002 f91f 	bl	8005c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <HAL_I2C_MspInit+0x88>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	4a08      	ldr	r2, [pc, #32]	; (8003a38 <HAL_I2C_MspInit+0x88>)
 8003a18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <HAL_I2C_MspInit+0x88>)
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003a2a:	bf00      	nop
 8003a2c:	3728      	adds	r7, #40	; 0x28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40005800 	.word	0x40005800
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40021c00 	.word	0x40021c00

08003a40 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b09a      	sub	sp, #104	; 0x68
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	60da      	str	r2, [r3, #12]
 8003a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a5c:	2230      	movs	r2, #48	; 0x30
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f02a fbbb 	bl	802e1dc <memset>
  if(hltdc->Instance==LTDC)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a65      	ldr	r2, [pc, #404]	; (8003c00 <HAL_LTDC_MspInit+0x1c0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	f040 80c2 	bne.w	8003bf6 <HAL_LTDC_MspInit+0x1b6>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003a72:	2308      	movs	r3, #8
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 80;
 8003a76:	2350      	movs	r3, #80	; 0x50
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a86:	4618      	mov	r0, r3
 8003a88:	f004 fb88 	bl	800819c <HAL_RCCEx_PeriphCLKConfig>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8003a92:	f7ff fde1 	bl	8003658 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	623b      	str	r3, [r7, #32]
 8003a9a:	4b5a      	ldr	r3, [pc, #360]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	4a59      	ldr	r2, [pc, #356]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003aa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa6:	4b57      	ldr	r3, [pc, #348]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aae:	623b      	str	r3, [r7, #32]
 8003ab0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
 8003ab6:	4b53      	ldr	r3, [pc, #332]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	4a52      	ldr	r2, [pc, #328]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac2:	4b50      	ldr	r3, [pc, #320]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61bb      	str	r3, [r7, #24]
 8003ad2:	4b4c      	ldr	r3, [pc, #304]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	4a4b      	ldr	r2, [pc, #300]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003ad8:	f043 0320 	orr.w	r3, r3, #32
 8003adc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ade:	4b49      	ldr	r3, [pc, #292]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	4b45      	ldr	r3, [pc, #276]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	4a44      	ldr	r2, [pc, #272]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003af4:	f043 0302 	orr.w	r3, r3, #2
 8003af8:	6313      	str	r3, [r2, #48]	; 0x30
 8003afa:	4b42      	ldr	r3, [pc, #264]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	4b3e      	ldr	r3, [pc, #248]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	4a3d      	ldr	r2, [pc, #244]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b14:	6313      	str	r3, [r2, #48]	; 0x30
 8003b16:	4b3b      	ldr	r3, [pc, #236]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	4b37      	ldr	r3, [pc, #220]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	4a36      	ldr	r2, [pc, #216]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b30:	6313      	str	r3, [r2, #48]	; 0x30
 8003b32:	4b34      	ldr	r3, [pc, #208]	; (8003c04 <HAL_LTDC_MspInit+0x1c4>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8003b3e:	f240 63f7 	movw	r3, #1783	; 0x6f7
 8003b42:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b44:	2302      	movs	r3, #2
 8003b46:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b50:	230e      	movs	r3, #14
 8003b52:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003b54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b58:	4619      	mov	r1, r3
 8003b5a:	482b      	ldr	r0, [pc, #172]	; (8003c08 <HAL_LTDC_MspInit+0x1c8>)
 8003b5c:	f002 f876 	bl	8005c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b64:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b66:	2302      	movs	r3, #2
 8003b68:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b72:	230e      	movs	r3, #14
 8003b74:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4823      	ldr	r0, [pc, #140]	; (8003c0c <HAL_LTDC_MspInit+0x1cc>)
 8003b7e:	f002 f865 	bl	8005c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b82:	2302      	movs	r3, #2
 8003b84:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b86:	2302      	movs	r3, #2
 8003b88:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003b92:	2309      	movs	r3, #9
 8003b94:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	481c      	ldr	r0, [pc, #112]	; (8003c10 <HAL_LTDC_MspInit+0x1d0>)
 8003b9e:	f002 f855 	bl	8005c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13
 8003ba2:	f44f 436e 	mov.w	r3, #60928	; 0xee00
 8003ba6:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bac:	2301      	movs	r3, #1
 8003bae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003bb4:	230e      	movs	r3, #14
 8003bb6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003bb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4815      	ldr	r0, [pc, #84]	; (8003c14 <HAL_LTDC_MspInit+0x1d4>)
 8003bc0:	f002 f844 	bl	8005c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8003bc4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003bc8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003bd6:	230e      	movs	r3, #14
 8003bd8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bde:	4619      	mov	r1, r3
 8003be0:	480d      	ldr	r0, [pc, #52]	; (8003c18 <HAL_LTDC_MspInit+0x1d8>)
 8003be2:	f002 f833 	bl	8005c4c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003be6:	2200      	movs	r2, #0
 8003be8:	2105      	movs	r1, #5
 8003bea:	2058      	movs	r0, #88	; 0x58
 8003bec:	f001 fa80 	bl	80050f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003bf0:	2058      	movs	r0, #88	; 0x58
 8003bf2:	f001 fa99 	bl	8005128 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003bf6:	bf00      	nop
 8003bf8:	3768      	adds	r7, #104	; 0x68
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40016800 	.word	0x40016800
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40022000 	.word	0x40022000
 8003c0c:	40021400 	.word	0x40021400
 8003c10:	40020400 	.word	0x40020400
 8003c14:	40021c00 	.word	0x40021c00
 8003c18:	40021800 	.word	0x40021800

08003c1c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	; 0x28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c24:	f107 0314 	add.w	r3, r7, #20
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	609a      	str	r2, [r3, #8]
 8003c30:	60da      	str	r2, [r3, #12]
 8003c32:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a28      	ldr	r2, [pc, #160]	; (8003cdc <HAL_SD_MspInit+0xc0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d14a      	bne.n	8003cd4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	4b27      	ldr	r3, [pc, #156]	; (8003ce0 <HAL_SD_MspInit+0xc4>)
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	4a26      	ldr	r2, [pc, #152]	; (8003ce0 <HAL_SD_MspInit+0xc4>)
 8003c48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4e:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <HAL_SD_MspInit+0xc4>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	4b20      	ldr	r3, [pc, #128]	; (8003ce0 <HAL_SD_MspInit+0xc4>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <HAL_SD_MspInit+0xc4>)
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	6313      	str	r3, [r2, #48]	; 0x30
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <HAL_SD_MspInit+0xc4>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	4b19      	ldr	r3, [pc, #100]	; (8003ce0 <HAL_SD_MspInit+0xc4>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	4a18      	ldr	r2, [pc, #96]	; (8003ce0 <HAL_SD_MspInit+0xc4>)
 8003c80:	f043 0308 	orr.w	r3, r3, #8
 8003c84:	6313      	str	r3, [r2, #48]	; 0x30
 8003c86:	4b16      	ldr	r3, [pc, #88]	; (8003ce0 <HAL_SD_MspInit+0xc4>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003c92:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003c96:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003ca4:	230c      	movs	r3, #12
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ca8:	f107 0314 	add.w	r3, r7, #20
 8003cac:	4619      	mov	r1, r3
 8003cae:	480d      	ldr	r0, [pc, #52]	; (8003ce4 <HAL_SD_MspInit+0xc8>)
 8003cb0:	f001 ffcc 	bl	8005c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003cc4:	230c      	movs	r3, #12
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cc8:	f107 0314 	add.w	r3, r7, #20
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4806      	ldr	r0, [pc, #24]	; (8003ce8 <HAL_SD_MspInit+0xcc>)
 8003cd0:	f001 ffbc 	bl	8005c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003cd4:	bf00      	nop
 8003cd6:	3728      	adds	r7, #40	; 0x28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40012c00 	.word	0x40012c00
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	40020800 	.word	0x40020800
 8003ce8:	40020c00 	.word	0x40020c00

08003cec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a2c      	ldr	r2, [pc, #176]	; (8003dac <HAL_TIM_Base_MspInit+0xc0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d13f      	bne.n	8003d7e <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	4b2b      	ldr	r3, [pc, #172]	; (8003db0 <HAL_TIM_Base_MspInit+0xc4>)
 8003d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d06:	4a2a      	ldr	r2, [pc, #168]	; (8003db0 <HAL_TIM_Base_MspInit+0xc4>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d0e:	4b28      	ldr	r3, [pc, #160]	; (8003db0 <HAL_TIM_Base_MspInit+0xc4>)
 8003d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8003d1a:	4b26      	ldr	r3, [pc, #152]	; (8003db4 <HAL_TIM_Base_MspInit+0xc8>)
 8003d1c:	4a26      	ldr	r2, [pc, #152]	; (8003db8 <HAL_TIM_Base_MspInit+0xcc>)
 8003d1e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8003d20:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <HAL_TIM_Base_MspInit+0xc8>)
 8003d22:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003d26:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d28:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <HAL_TIM_Base_MspInit+0xc8>)
 8003d2a:	2240      	movs	r2, #64	; 0x40
 8003d2c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d2e:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <HAL_TIM_Base_MspInit+0xc8>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003d34:	4b1f      	ldr	r3, [pc, #124]	; (8003db4 <HAL_TIM_Base_MspInit+0xc8>)
 8003d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d3a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <HAL_TIM_Base_MspInit+0xc8>)
 8003d3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d42:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_TIM_Base_MspInit+0xc8>)
 8003d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d4a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <HAL_TIM_Base_MspInit+0xc8>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003d52:	4b18      	ldr	r3, [pc, #96]	; (8003db4 <HAL_TIM_Base_MspInit+0xc8>)
 8003d54:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003d58:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d5a:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <HAL_TIM_Base_MspInit+0xc8>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003d60:	4814      	ldr	r0, [pc, #80]	; (8003db4 <HAL_TIM_Base_MspInit+0xc8>)
 8003d62:	f001 fa0b 	bl	800517c <HAL_DMA_Init>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003d6c:	f7ff fc74 	bl	8003658 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a10      	ldr	r2, [pc, #64]	; (8003db4 <HAL_TIM_Base_MspInit+0xc8>)
 8003d74:	625a      	str	r2, [r3, #36]	; 0x24
 8003d76:	4a0f      	ldr	r2, [pc, #60]	; (8003db4 <HAL_TIM_Base_MspInit+0xc8>)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003d7c:	e012      	b.n	8003da4 <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM13)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a0e      	ldr	r2, [pc, #56]	; (8003dbc <HAL_TIM_Base_MspInit+0xd0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d10d      	bne.n	8003da4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <HAL_TIM_Base_MspInit+0xc4>)
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	4a07      	ldr	r2, [pc, #28]	; (8003db0 <HAL_TIM_Base_MspInit+0xc4>)
 8003d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d96:	6413      	str	r3, [r2, #64]	; 0x40
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_TIM_Base_MspInit+0xc4>)
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	68bb      	ldr	r3, [r7, #8]
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40010000 	.word	0x40010000
 8003db0:	40023800 	.word	0x40023800
 8003db4:	20009a38 	.word	0x20009a38
 8003db8:	40026428 	.word	0x40026428
 8003dbc:	40001c00 	.word	0x40001c00

08003dc0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a0b      	ldr	r2, [pc, #44]	; (8003dfc <HAL_TIM_PWM_MspInit+0x3c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10d      	bne.n	8003dee <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <HAL_TIM_PWM_MspInit+0x40>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	4a09      	ldr	r2, [pc, #36]	; (8003e00 <HAL_TIM_PWM_MspInit+0x40>)
 8003ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de0:	6453      	str	r3, [r2, #68]	; 0x44
 8003de2:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <HAL_TIM_PWM_MspInit+0x40>)
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003dee:	bf00      	nop
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40014000 	.word	0x40014000
 8003e00:	40023800 	.word	0x40023800

08003e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	; 0x28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0c:	f107 0314 	add.w	r3, r7, #20
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a37      	ldr	r2, [pc, #220]	; (8003f00 <HAL_TIM_MspPostInit+0xfc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d11f      	bne.n	8003e66 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	4b36      	ldr	r3, [pc, #216]	; (8003f04 <HAL_TIM_MspPostInit+0x100>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	4a35      	ldr	r2, [pc, #212]	; (8003f04 <HAL_TIM_MspPostInit+0x100>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6313      	str	r3, [r2, #48]	; 0x30
 8003e36:	4b33      	ldr	r3, [pc, #204]	; (8003f04 <HAL_TIM_MspPostInit+0x100>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e50:	2302      	movs	r3, #2
 8003e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e54:	2301      	movs	r3, #1
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e58:	f107 0314 	add.w	r3, r7, #20
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	482a      	ldr	r0, [pc, #168]	; (8003f08 <HAL_TIM_MspPostInit+0x104>)
 8003e60:	f001 fef4 	bl	8005c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003e64:	e047      	b.n	8003ef6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a28      	ldr	r2, [pc, #160]	; (8003f0c <HAL_TIM_MspPostInit+0x108>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d11e      	bne.n	8003eae <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <HAL_TIM_MspPostInit+0x100>)
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	4a22      	ldr	r2, [pc, #136]	; (8003f04 <HAL_TIM_MspPostInit+0x100>)
 8003e7a:	f043 0310 	orr.w	r3, r3, #16
 8003e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e80:	4b20      	ldr	r3, [pc, #128]	; (8003f04 <HAL_TIM_MspPostInit+0x100>)
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003e8c:	2360      	movs	r3, #96	; 0x60
 8003e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e90:	2302      	movs	r3, #2
 8003e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ea0:	f107 0314 	add.w	r3, r7, #20
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	481a      	ldr	r0, [pc, #104]	; (8003f10 <HAL_TIM_MspPostInit+0x10c>)
 8003ea8:	f001 fed0 	bl	8005c4c <HAL_GPIO_Init>
}
 8003eac:	e023      	b.n	8003ef6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM13)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a18      	ldr	r2, [pc, #96]	; (8003f14 <HAL_TIM_MspPostInit+0x110>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d11e      	bne.n	8003ef6 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <HAL_TIM_MspPostInit+0x100>)
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	4a10      	ldr	r2, [pc, #64]	; (8003f04 <HAL_TIM_MspPostInit+0x100>)
 8003ec2:	f043 0320 	orr.w	r3, r3, #32
 8003ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec8:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <HAL_TIM_MspPostInit+0x100>)
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eda:	2302      	movs	r3, #2
 8003edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003ee6:	2309      	movs	r3, #9
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003eea:	f107 0314 	add.w	r3, r7, #20
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4809      	ldr	r0, [pc, #36]	; (8003f18 <HAL_TIM_MspPostInit+0x114>)
 8003ef2:	f001 feab 	bl	8005c4c <HAL_GPIO_Init>
}
 8003ef6:	bf00      	nop
 8003ef8:	3728      	adds	r7, #40	; 0x28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40010000 	.word	0x40010000
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40020000 	.word	0x40020000
 8003f0c:	40014000 	.word	0x40014000
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40001c00 	.word	0x40001c00
 8003f18:	40021400 	.word	0x40021400

08003f1c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003f22:	1d3b      	adds	r3, r7, #4
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	60da      	str	r2, [r3, #12]
 8003f2e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003f30:	4b3f      	ldr	r3, [pc, #252]	; (8004030 <HAL_FMC_MspInit+0x114>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d177      	bne.n	8004028 <HAL_FMC_MspInit+0x10c>
    return;
  }
  FMC_Initialized = 1;
 8003f38:	4b3d      	ldr	r3, [pc, #244]	; (8004030 <HAL_FMC_MspInit+0x114>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	4b3c      	ldr	r3, [pc, #240]	; (8004034 <HAL_FMC_MspInit+0x118>)
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	4a3b      	ldr	r2, [pc, #236]	; (8004034 <HAL_FMC_MspInit+0x118>)
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	6393      	str	r3, [r2, #56]	; 0x38
 8003f4e:	4b39      	ldr	r3, [pc, #228]	; (8004034 <HAL_FMC_MspInit+0x118>)
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003f5a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003f5e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f60:	2302      	movs	r3, #2
 8003f62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f6c:	230c      	movs	r3, #12
 8003f6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f70:	1d3b      	adds	r3, r7, #4
 8003f72:	4619      	mov	r1, r3
 8003f74:	4830      	ldr	r0, [pc, #192]	; (8004038 <HAL_FMC_MspInit+0x11c>)
 8003f76:	f001 fe69 	bl	8005c4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7e:	2302      	movs	r3, #2
 8003f80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f86:	2303      	movs	r3, #3
 8003f88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f8a:	230c      	movs	r3, #12
 8003f8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f8e:	1d3b      	adds	r3, r7, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	482a      	ldr	r0, [pc, #168]	; (800403c <HAL_FMC_MspInit+0x120>)
 8003f94:	f001 fe5a 	bl	8005c4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8003f98:	f248 1337 	movw	r3, #33079	; 0x8137
 8003f9c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003faa:	230c      	movs	r3, #12
 8003fac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003fae:	1d3b      	adds	r3, r7, #4
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4823      	ldr	r0, [pc, #140]	; (8004040 <HAL_FMC_MspInit+0x124>)
 8003fb4:	f001 fe4a 	bl	8005c4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003fb8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003fbc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fca:	230c      	movs	r3, #12
 8003fcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003fce:	1d3b      	adds	r3, r7, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	481c      	ldr	r0, [pc, #112]	; (8004044 <HAL_FMC_MspInit+0x128>)
 8003fd4:	f001 fe3a 	bl	8005c4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003fd8:	23c0      	movs	r3, #192	; 0xc0
 8003fda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fdc:	2302      	movs	r3, #2
 8003fde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fe8:	230c      	movs	r3, #12
 8003fea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003fec:	1d3b      	adds	r3, r7, #4
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4815      	ldr	r0, [pc, #84]	; (8004048 <HAL_FMC_MspInit+0x12c>)
 8003ff2:	f001 fe2b 	bl	8005c4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003ff6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003ffa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004004:	2303      	movs	r3, #3
 8004006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004008:	230c      	movs	r3, #12
 800400a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800400c:	1d3b      	adds	r3, r7, #4
 800400e:	4619      	mov	r1, r3
 8004010:	480e      	ldr	r0, [pc, #56]	; (800404c <HAL_FMC_MspInit+0x130>)
 8004012:	f001 fe1b 	bl	8005c4c <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 5, 0);
 8004016:	2200      	movs	r2, #0
 8004018:	2105      	movs	r1, #5
 800401a:	2030      	movs	r0, #48	; 0x30
 800401c:	f001 f868 	bl	80050f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 8004020:	2030      	movs	r0, #48	; 0x30
 8004022:	f001 f881 	bl	8005128 <HAL_NVIC_EnableIRQ>
 8004026:	e000      	b.n	800402a <HAL_FMC_MspInit+0x10e>
    return;
 8004028:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20000120 	.word	0x20000120
 8004034:	40023800 	.word	0x40023800
 8004038:	40021400 	.word	0x40021400
 800403c:	40020800 	.word	0x40020800
 8004040:	40021800 	.word	0x40021800
 8004044:	40021000 	.word	0x40021000
 8004048:	40021c00 	.word	0x40021c00
 800404c:	40020c00 	.word	0x40020c00

08004050 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004058:	f7ff ff60 	bl	8003f1c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800405c:	bf00      	nop
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08c      	sub	sp, #48	; 0x30
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004074:	2200      	movs	r2, #0
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	2036      	movs	r0, #54	; 0x36
 800407a:	f001 f839 	bl	80050f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800407e:	2036      	movs	r0, #54	; 0x36
 8004080:	f001 f852 	bl	8005128 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004084:	2300      	movs	r3, #0
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	4b1f      	ldr	r3, [pc, #124]	; (8004108 <HAL_InitTick+0xa4>)
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	4a1e      	ldr	r2, [pc, #120]	; (8004108 <HAL_InitTick+0xa4>)
 800408e:	f043 0310 	orr.w	r3, r3, #16
 8004092:	6413      	str	r3, [r2, #64]	; 0x40
 8004094:	4b1c      	ldr	r3, [pc, #112]	; (8004108 <HAL_InitTick+0xa4>)
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80040a0:	f107 0210 	add.w	r2, r7, #16
 80040a4:	f107 0314 	add.w	r3, r7, #20
 80040a8:	4611      	mov	r1, r2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f004 f828 	bl	8008100 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80040b0:	f004 f812 	bl	80080d8 <HAL_RCC_GetPCLK1Freq>
 80040b4:	4603      	mov	r3, r0
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80040ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040bc:	4a13      	ldr	r2, [pc, #76]	; (800410c <HAL_InitTick+0xa8>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	0c9b      	lsrs	r3, r3, #18
 80040c4:	3b01      	subs	r3, #1
 80040c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80040c8:	4b11      	ldr	r3, [pc, #68]	; (8004110 <HAL_InitTick+0xac>)
 80040ca:	4a12      	ldr	r2, [pc, #72]	; (8004114 <HAL_InitTick+0xb0>)
 80040cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80040ce:	4b10      	ldr	r3, [pc, #64]	; (8004110 <HAL_InitTick+0xac>)
 80040d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80040d6:	4a0e      	ldr	r2, [pc, #56]	; (8004110 <HAL_InitTick+0xac>)
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80040dc:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <HAL_InitTick+0xac>)
 80040de:	2200      	movs	r2, #0
 80040e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <HAL_InitTick+0xac>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80040e8:	4809      	ldr	r0, [pc, #36]	; (8004110 <HAL_InitTick+0xac>)
 80040ea:	f005 fb2d 	bl	8009748 <HAL_TIM_Base_Init>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d104      	bne.n	80040fe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80040f4:	4806      	ldr	r0, [pc, #24]	; (8004110 <HAL_InitTick+0xac>)
 80040f6:	f005 fb77 	bl	80097e8 <HAL_TIM_Base_Start_IT>
 80040fa:	4603      	mov	r3, r0
 80040fc:	e000      	b.n	8004100 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
}
 8004100:	4618      	mov	r0, r3
 8004102:	3730      	adds	r7, #48	; 0x30
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40023800 	.word	0x40023800
 800410c:	431bde83 	.word	0x431bde83
 8004110:	2000b0f8 	.word	0x2000b0f8
 8004114:	40001000 	.word	0x40001000

08004118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800411c:	f004 f822 	bl	8008164 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004120:	e7fe      	b.n	8004120 <NMI_Handler+0x8>

08004122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004122:	b480      	push	{r7}
 8004124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004126:	e7fe      	b.n	8004126 <HardFault_Handler+0x4>

08004128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800412c:	e7fe      	b.n	800412c <MemManage_Handler+0x4>

0800412e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800412e:	b480      	push	{r7}
 8004130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004132:	e7fe      	b.n	8004132 <BusFault_Handler+0x4>

08004134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004138:	e7fe      	b.n	8004138 <UsageFault_Handler+0x4>

0800413a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800413a:	b480      	push	{r7}
 800413c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800413e:	bf00      	nop
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800414c:	4802      	ldr	r0, [pc, #8]	; (8004158 <CAN1_RX0_IRQHandler+0x10>)
 800414e:	f000 fcdd 	bl	8004b0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004152:	bf00      	nop
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	2000b05c 	.word	0x2000b05c

0800415c <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 8004160:	4802      	ldr	r0, [pc, #8]	; (800416c <FMC_IRQHandler+0x10>)
 8004162:	f005 faa2 	bl	80096aa <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 8004166:	bf00      	nop
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	2000b09c 	.word	0x2000b09c

08004170 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004174:	4802      	ldr	r0, [pc, #8]	; (8004180 <TIM6_DAC_IRQHandler+0x10>)
 8004176:	f005 fe87 	bl	8009e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	2000b0f8 	.word	0x2000b0f8

08004184 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	DMA_Callback();
 8004188:	f7fc fed0 	bl	8000f2c <DMA_Callback>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800418c:	4802      	ldr	r0, [pc, #8]	; (8004198 <DMA2_Stream1_IRQHandler+0x14>)
 800418e:	f001 f8fb 	bl	8005388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20009a38 	.word	0x20009a38

0800419c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80041a0:	4802      	ldr	r0, [pc, #8]	; (80041ac <CAN2_RX0_IRQHandler+0x10>)
 80041a2:	f000 fcb3 	bl	8004b0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	2000a640 	.word	0x2000a640

080041b0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80041b4:	4802      	ldr	r0, [pc, #8]	; (80041c0 <LTDC_IRQHandler+0x10>)
 80041b6:	f003 f821 	bl	80071fc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	2000a598 	.word	0x2000a598

080041c4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80041c8:	4802      	ldr	r0, [pc, #8]	; (80041d4 <DMA2D_IRQHandler+0x10>)
 80041ca:	f001 fb9c 	bl	8005906 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80041ce:	bf00      	nop
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	2000b014 	.word	0x2000b014

080041d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
	return 1;
 80041dc:	2301      	movs	r3, #1
}
 80041de:	4618      	mov	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <_kill>:

int _kill(int pid, int sig)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041f2:	f029 fe9f 	bl	802df34 <__errno>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2216      	movs	r2, #22
 80041fa:	601a      	str	r2, [r3, #0]
	return -1;
 80041fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <_exit>:

void _exit (int status)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004210:	f04f 31ff 	mov.w	r1, #4294967295
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff ffe7 	bl	80041e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800421a:	e7fe      	b.n	800421a <_exit+0x12>

0800421c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	e00a      	b.n	8004244 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800422e:	f3af 8000 	nop.w
 8004232:	4601      	mov	r1, r0
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	60ba      	str	r2, [r7, #8]
 800423a:	b2ca      	uxtb	r2, r1
 800423c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	3301      	adds	r3, #1
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	429a      	cmp	r2, r3
 800424a:	dbf0      	blt.n	800422e <_read+0x12>
	}

return len;
 800424c:	687b      	ldr	r3, [r7, #4]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b086      	sub	sp, #24
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004262:	2300      	movs	r3, #0
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	e009      	b.n	800427c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	60ba      	str	r2, [r7, #8]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	3301      	adds	r3, #1
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	dbf1      	blt.n	8004268 <_write+0x12>
	}
	return len;
 8004284:	687b      	ldr	r3, [r7, #4]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <_close>:

int _close(int file)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
	return -1;
 8004296:	f04f 33ff 	mov.w	r3, #4294967295
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042b6:	605a      	str	r2, [r3, #4]
	return 0;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <_isatty>:

int _isatty(int file)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
	return 1;
 80042ce:	2301      	movs	r3, #1
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
	return 0;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004300:	4a14      	ldr	r2, [pc, #80]	; (8004354 <_sbrk+0x5c>)
 8004302:	4b15      	ldr	r3, [pc, #84]	; (8004358 <_sbrk+0x60>)
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800430c:	4b13      	ldr	r3, [pc, #76]	; (800435c <_sbrk+0x64>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d102      	bne.n	800431a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004314:	4b11      	ldr	r3, [pc, #68]	; (800435c <_sbrk+0x64>)
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <_sbrk+0x68>)
 8004318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800431a:	4b10      	ldr	r3, [pc, #64]	; (800435c <_sbrk+0x64>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4413      	add	r3, r2
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	429a      	cmp	r2, r3
 8004326:	d207      	bcs.n	8004338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004328:	f029 fe04 	bl	802df34 <__errno>
 800432c:	4603      	mov	r3, r0
 800432e:	220c      	movs	r2, #12
 8004330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004332:	f04f 33ff 	mov.w	r3, #4294967295
 8004336:	e009      	b.n	800434c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004338:	4b08      	ldr	r3, [pc, #32]	; (800435c <_sbrk+0x64>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800433e:	4b07      	ldr	r3, [pc, #28]	; (800435c <_sbrk+0x64>)
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4413      	add	r3, r2
 8004346:	4a05      	ldr	r2, [pc, #20]	; (800435c <_sbrk+0x64>)
 8004348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800434a:	68fb      	ldr	r3, [r7, #12]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3718      	adds	r7, #24
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20030000 	.word	0x20030000
 8004358:	00000800 	.word	0x00000800
 800435c:	20000124 	.word	0x20000124
 8004360:	2000b600 	.word	0x2000b600

08004364 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004368:	4b06      	ldr	r3, [pc, #24]	; (8004384 <SystemInit+0x20>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	4a05      	ldr	r2, [pc, #20]	; (8004384 <SystemInit+0x20>)
 8004370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004378:	bf00      	nop
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	e000ed00 	.word	0xe000ed00

08004388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800438c:	480d      	ldr	r0, [pc, #52]	; (80043c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800438e:	490e      	ldr	r1, [pc, #56]	; (80043c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004390:	4a0e      	ldr	r2, [pc, #56]	; (80043cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004394:	e002      	b.n	800439c <LoopCopyDataInit>

08004396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800439a:	3304      	adds	r3, #4

0800439c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800439c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800439e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043a0:	d3f9      	bcc.n	8004396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043a2:	4a0b      	ldr	r2, [pc, #44]	; (80043d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043a4:	4c0b      	ldr	r4, [pc, #44]	; (80043d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80043a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043a8:	e001      	b.n	80043ae <LoopFillZerobss>

080043aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043ac:	3204      	adds	r2, #4

080043ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043b0:	d3fb      	bcc.n	80043aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043b2:	f7ff ffd7 	bl	8004364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043b6:	f029 fecb 	bl	802e150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043ba:	f7fd fb51 	bl	8001a60 <main>
  bx  lr    
 80043be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80043c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80043c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043c8:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80043cc:	080edcec 	.word	0x080edcec
  ldr r2, =_sbss
 80043d0:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80043d4:	2000b600 	.word	0x2000b600

080043d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043d8:	e7fe      	b.n	80043d8 <ADC_IRQHandler>
	...

080043dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043e0:	4b0e      	ldr	r3, [pc, #56]	; (800441c <HAL_Init+0x40>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a0d      	ldr	r2, [pc, #52]	; (800441c <HAL_Init+0x40>)
 80043e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <HAL_Init+0x40>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a0a      	ldr	r2, [pc, #40]	; (800441c <HAL_Init+0x40>)
 80043f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043f8:	4b08      	ldr	r3, [pc, #32]	; (800441c <HAL_Init+0x40>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a07      	ldr	r2, [pc, #28]	; (800441c <HAL_Init+0x40>)
 80043fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004404:	2003      	movs	r0, #3
 8004406:	f000 fe68 	bl	80050da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800440a:	200f      	movs	r0, #15
 800440c:	f7ff fe2a 	bl	8004064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004410:	f7ff f9a8 	bl	8003764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40023c00 	.word	0x40023c00

08004420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_IncTick+0x20>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <HAL_IncTick+0x24>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4413      	add	r3, r2
 8004430:	4a04      	ldr	r2, [pc, #16]	; (8004444 <HAL_IncTick+0x24>)
 8004432:	6013      	str	r3, [r2, #0]
}
 8004434:	bf00      	nop
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	20000010 	.word	0x20000010
 8004444:	2000b140 	.word	0x2000b140

08004448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return uwTick;
 800444c:	4b03      	ldr	r3, [pc, #12]	; (800445c <HAL_GetTick+0x14>)
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	2000b140 	.word	0x2000b140

08004460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004468:	f7ff ffee 	bl	8004448 <HAL_GetTick>
 800446c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d005      	beq.n	8004486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800447a:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <HAL_Delay+0x44>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4413      	add	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004486:	bf00      	nop
 8004488:	f7ff ffde 	bl	8004448 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	429a      	cmp	r2, r3
 8004496:	d8f7      	bhi.n	8004488 <HAL_Delay+0x28>
  {
  }
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000010 	.word	0x20000010

080044a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e0ed      	b.n	8004696 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d102      	bne.n	80044cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff f978 	bl	80037bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044dc:	f7ff ffb4 	bl	8004448 <HAL_GetTick>
 80044e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80044e2:	e012      	b.n	800450a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044e4:	f7ff ffb0 	bl	8004448 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b0a      	cmp	r3, #10
 80044f0:	d90b      	bls.n	800450a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2205      	movs	r2, #5
 8004502:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e0c5      	b.n	8004696 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0e5      	beq.n	80044e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0202 	bic.w	r2, r2, #2
 8004526:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004528:	f7ff ff8e 	bl	8004448 <HAL_GetTick>
 800452c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800452e:	e012      	b.n	8004556 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004530:	f7ff ff8a 	bl	8004448 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b0a      	cmp	r3, #10
 800453c:	d90b      	bls.n	8004556 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2205      	movs	r2, #5
 800454e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e09f      	b.n	8004696 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e5      	bne.n	8004530 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	7e1b      	ldrb	r3, [r3, #24]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d108      	bne.n	800457e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	e007      	b.n	800458e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800458c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	7e5b      	ldrb	r3, [r3, #25]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d108      	bne.n	80045a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	e007      	b.n	80045b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	7e9b      	ldrb	r3, [r3, #26]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d108      	bne.n	80045d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0220 	orr.w	r2, r2, #32
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	e007      	b.n	80045e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0220 	bic.w	r2, r2, #32
 80045e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	7edb      	ldrb	r3, [r3, #27]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d108      	bne.n	80045fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0210 	bic.w	r2, r2, #16
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e007      	b.n	800460c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0210 	orr.w	r2, r2, #16
 800460a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	7f1b      	ldrb	r3, [r3, #28]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d108      	bne.n	8004626 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0208 	orr.w	r2, r2, #8
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	e007      	b.n	8004636 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0208 	bic.w	r2, r2, #8
 8004634:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	7f5b      	ldrb	r3, [r3, #29]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d108      	bne.n	8004650 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0204 	orr.w	r2, r2, #4
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	e007      	b.n	8004660 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0204 	bic.w	r2, r2, #4
 800465e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	ea42 0103 	orr.w	r1, r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	1e5a      	subs	r2, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046b6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80046b8:	7cfb      	ldrb	r3, [r7, #19]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d003      	beq.n	80046c6 <HAL_CAN_ConfigFilter+0x26>
 80046be:	7cfb      	ldrb	r3, [r7, #19]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	f040 80be 	bne.w	8004842 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80046c6:	4b65      	ldr	r3, [pc, #404]	; (800485c <HAL_CAN_ConfigFilter+0x1bc>)
 80046c8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046d0:	f043 0201 	orr.w	r2, r3, #1
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	431a      	orrs	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	2201      	movs	r2, #1
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	43db      	mvns	r3, r3
 8004718:	401a      	ands	r2, r3
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d123      	bne.n	8004770 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	43db      	mvns	r3, r3
 8004732:	401a      	ands	r2, r3
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800474a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	3248      	adds	r2, #72	; 0x48
 8004750:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004764:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004766:	6979      	ldr	r1, [r7, #20]
 8004768:	3348      	adds	r3, #72	; 0x48
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	440b      	add	r3, r1
 800476e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d122      	bne.n	80047be <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	431a      	orrs	r2, r3
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004798:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	3248      	adds	r2, #72	; 0x48
 800479e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80047b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80047b4:	6979      	ldr	r1, [r7, #20]
 80047b6:	3348      	adds	r3, #72	; 0x48
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	440b      	add	r3, r1
 80047bc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	43db      	mvns	r3, r3
 80047d0:	401a      	ands	r2, r3
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80047d8:	e007      	b.n	80047ea <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	43db      	mvns	r3, r3
 80047fc:	401a      	ands	r2, r3
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004804:	e007      	b.n	8004816 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	431a      	orrs	r2, r3
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d107      	bne.n	800482e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	431a      	orrs	r2, r3
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004834:	f023 0201 	bic.w	r2, r3, #1
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	e006      	b.n	8004850 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	40006400 	.word	0x40006400

08004860 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	d12e      	bne.n	80048d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0201 	bic.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800488c:	f7ff fddc 	bl	8004448 <HAL_GetTick>
 8004890:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004892:	e012      	b.n	80048ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004894:	f7ff fdd8 	bl	8004448 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b0a      	cmp	r3, #10
 80048a0:	d90b      	bls.n	80048ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2205      	movs	r2, #5
 80048b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e012      	b.n	80048e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e5      	bne.n	8004894 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e006      	b.n	80048e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
  }
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048fc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d003      	beq.n	800490c <HAL_CAN_GetRxMessage+0x24>
 8004904:	7dfb      	ldrb	r3, [r7, #23]
 8004906:	2b02      	cmp	r3, #2
 8004908:	f040 80f3 	bne.w	8004af2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10e      	bne.n	8004930 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d116      	bne.n	800494e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0e7      	b.n	8004b00 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d107      	bne.n	800494e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e0d8      	b.n	8004b00 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	331b      	adds	r3, #27
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	4413      	add	r3, r2
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0204 	and.w	r2, r3, #4
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10c      	bne.n	8004986 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	331b      	adds	r3, #27
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	4413      	add	r3, r2
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	0d5b      	lsrs	r3, r3, #21
 800497c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e00b      	b.n	800499e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	331b      	adds	r3, #27
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	4413      	add	r3, r2
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	08db      	lsrs	r3, r3, #3
 8004996:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	331b      	adds	r3, #27
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	4413      	add	r3, r2
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0202 	and.w	r2, r3, #2
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	331b      	adds	r3, #27
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	4413      	add	r3, r2
 80049c0:	3304      	adds	r3, #4
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 020f 	and.w	r2, r3, #15
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	331b      	adds	r3, #27
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	4413      	add	r3, r2
 80049d8:	3304      	adds	r3, #4
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	0a1b      	lsrs	r3, r3, #8
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	331b      	adds	r3, #27
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	4413      	add	r3, r2
 80049f0:	3304      	adds	r3, #4
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	0a1a      	lsrs	r2, r3, #8
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	3301      	adds	r3, #1
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	0c1a      	lsrs	r2, r3, #16
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	3302      	adds	r3, #2
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	0e1a      	lsrs	r2, r3, #24
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	3303      	adds	r3, #3
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	3304      	adds	r3, #4
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	0a1a      	lsrs	r2, r3, #8
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	3305      	adds	r3, #5
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	0c1a      	lsrs	r2, r3, #16
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	3306      	adds	r3, #6
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	0e1a      	lsrs	r2, r3, #24
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	3307      	adds	r3, #7
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d108      	bne.n	8004ade <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0220 	orr.w	r2, r2, #32
 8004ada:	60da      	str	r2, [r3, #12]
 8004adc:	e007      	b.n	8004aee <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0220 	orr.w	r2, r2, #32
 8004aec:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	e006      	b.n	8004b00 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
  }
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08a      	sub	sp, #40	; 0x28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004b14:	2300      	movs	r3, #0
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d07c      	beq.n	8004c4c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d023      	beq.n	8004ba4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2201      	movs	r2, #1
 8004b62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f983 	bl	8004e7a <HAL_CAN_TxMailbox0CompleteCallback>
 8004b74:	e016      	b.n	8004ba4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d004      	beq.n	8004b8a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
 8004b88:	e00c      	b.n	8004ba4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d004      	beq.n	8004b9e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9c:	e002      	b.n	8004ba4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f989 	bl	8004eb6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d024      	beq.n	8004bf8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f963 	bl	8004e8e <HAL_CAN_TxMailbox1CompleteCallback>
 8004bc8:	e016      	b.n	8004bf8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d004      	beq.n	8004bde <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
 8004bdc:	e00c      	b.n	8004bf8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d004      	beq.n	8004bf2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf0:	e002      	b.n	8004bf8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f969 	bl	8004eca <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d024      	beq.n	8004c4c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f943 	bl	8004ea2 <HAL_CAN_TxMailbox2CompleteCallback>
 8004c1c:	e016      	b.n	8004c4c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d004      	beq.n	8004c32 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c30:	e00c      	b.n	8004c4c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d004      	beq.n	8004c46 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
 8004c44:	e002      	b.n	8004c4c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f949 	bl	8004ede <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00c      	beq.n	8004c70 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2210      	movs	r2, #16
 8004c6e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d006      	beq.n	8004c92 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f93a 	bl	8004f06 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d009      	beq.n	8004cb0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f921 	bl	8004ef2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00c      	beq.n	8004cd4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2210      	movs	r2, #16
 8004cd2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f003 0308 	and.w	r3, r3, #8
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d006      	beq.n	8004cf6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2208      	movs	r2, #8
 8004cee:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f91c 	bl	8004f2e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d009      	beq.n	8004d14 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f903 	bl	8004f1a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d006      	beq.n	8004d36 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2210      	movs	r2, #16
 8004d2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f906 	bl	8004f42 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00b      	beq.n	8004d58 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d006      	beq.n	8004d58 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2208      	movs	r2, #8
 8004d50:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f8ff 	bl	8004f56 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d07b      	beq.n	8004e5a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d072      	beq.n	8004e52 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d008      	beq.n	8004d88 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	f043 0301 	orr.w	r3, r3, #1
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d008      	beq.n	8004da4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	f043 0302 	orr.w	r3, r3, #2
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d008      	beq.n	8004dc0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	f043 0304 	orr.w	r3, r3, #4
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d043      	beq.n	8004e52 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d03e      	beq.n	8004e52 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dda:	2b60      	cmp	r3, #96	; 0x60
 8004ddc:	d02b      	beq.n	8004e36 <HAL_CAN_IRQHandler+0x32a>
 8004dde:	2b60      	cmp	r3, #96	; 0x60
 8004de0:	d82e      	bhi.n	8004e40 <HAL_CAN_IRQHandler+0x334>
 8004de2:	2b50      	cmp	r3, #80	; 0x50
 8004de4:	d022      	beq.n	8004e2c <HAL_CAN_IRQHandler+0x320>
 8004de6:	2b50      	cmp	r3, #80	; 0x50
 8004de8:	d82a      	bhi.n	8004e40 <HAL_CAN_IRQHandler+0x334>
 8004dea:	2b40      	cmp	r3, #64	; 0x40
 8004dec:	d019      	beq.n	8004e22 <HAL_CAN_IRQHandler+0x316>
 8004dee:	2b40      	cmp	r3, #64	; 0x40
 8004df0:	d826      	bhi.n	8004e40 <HAL_CAN_IRQHandler+0x334>
 8004df2:	2b30      	cmp	r3, #48	; 0x30
 8004df4:	d010      	beq.n	8004e18 <HAL_CAN_IRQHandler+0x30c>
 8004df6:	2b30      	cmp	r3, #48	; 0x30
 8004df8:	d822      	bhi.n	8004e40 <HAL_CAN_IRQHandler+0x334>
 8004dfa:	2b10      	cmp	r3, #16
 8004dfc:	d002      	beq.n	8004e04 <HAL_CAN_IRQHandler+0x2f8>
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	d005      	beq.n	8004e0e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004e02:	e01d      	b.n	8004e40 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	f043 0308 	orr.w	r3, r3, #8
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e0c:	e019      	b.n	8004e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	f043 0310 	orr.w	r3, r3, #16
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e16:	e014      	b.n	8004e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	f043 0320 	orr.w	r3, r3, #32
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e20:	e00f      	b.n	8004e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e2a:	e00a      	b.n	8004e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e34:	e005      	b.n	8004e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e3e:	e000      	b.n	8004e42 <HAL_CAN_IRQHandler+0x336>
            break;
 8004e40:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699a      	ldr	r2, [r3, #24]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e50:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2204      	movs	r2, #4
 8004e58:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f87c 	bl	8004f6a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004e72:	bf00      	nop
 8004e74:	3728      	adds	r7, #40	; 0x28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
	...

08004f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f90:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fb2:	4a04      	ldr	r2, [pc, #16]	; (8004fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	60d3      	str	r3, [r2, #12]
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	e000ed00 	.word	0xe000ed00

08004fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fcc:	4b04      	ldr	r3, [pc, #16]	; (8004fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	0a1b      	lsrs	r3, r3, #8
 8004fd2:	f003 0307 	and.w	r3, r3, #7
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	e000ed00 	.word	0xe000ed00

08004fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4603      	mov	r3, r0
 8004fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	db0b      	blt.n	800500e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ff6:	79fb      	ldrb	r3, [r7, #7]
 8004ff8:	f003 021f 	and.w	r2, r3, #31
 8004ffc:	4907      	ldr	r1, [pc, #28]	; (800501c <__NVIC_EnableIRQ+0x38>)
 8004ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	2001      	movs	r0, #1
 8005006:	fa00 f202 	lsl.w	r2, r0, r2
 800500a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	e000e100 	.word	0xe000e100

08005020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	6039      	str	r1, [r7, #0]
 800502a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800502c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005030:	2b00      	cmp	r3, #0
 8005032:	db0a      	blt.n	800504a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	b2da      	uxtb	r2, r3
 8005038:	490c      	ldr	r1, [pc, #48]	; (800506c <__NVIC_SetPriority+0x4c>)
 800503a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503e:	0112      	lsls	r2, r2, #4
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	440b      	add	r3, r1
 8005044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005048:	e00a      	b.n	8005060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	b2da      	uxtb	r2, r3
 800504e:	4908      	ldr	r1, [pc, #32]	; (8005070 <__NVIC_SetPriority+0x50>)
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	3b04      	subs	r3, #4
 8005058:	0112      	lsls	r2, r2, #4
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	440b      	add	r3, r1
 800505e:	761a      	strb	r2, [r3, #24]
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	e000e100 	.word	0xe000e100
 8005070:	e000ed00 	.word	0xe000ed00

08005074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005074:	b480      	push	{r7}
 8005076:	b089      	sub	sp, #36	; 0x24
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f1c3 0307 	rsb	r3, r3, #7
 800508e:	2b04      	cmp	r3, #4
 8005090:	bf28      	it	cs
 8005092:	2304      	movcs	r3, #4
 8005094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	3304      	adds	r3, #4
 800509a:	2b06      	cmp	r3, #6
 800509c:	d902      	bls.n	80050a4 <NVIC_EncodePriority+0x30>
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	3b03      	subs	r3, #3
 80050a2:	e000      	b.n	80050a6 <NVIC_EncodePriority+0x32>
 80050a4:	2300      	movs	r3, #0
 80050a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050a8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	fa02 f303 	lsl.w	r3, r2, r3
 80050b2:	43da      	mvns	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	401a      	ands	r2, r3
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050bc:	f04f 31ff 	mov.w	r1, #4294967295
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	fa01 f303 	lsl.w	r3, r1, r3
 80050c6:	43d9      	mvns	r1, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050cc:	4313      	orrs	r3, r2
         );
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3724      	adds	r7, #36	; 0x24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b082      	sub	sp, #8
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff ff4c 	bl	8004f80 <__NVIC_SetPriorityGrouping>
}
 80050e8:	bf00      	nop
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005102:	f7ff ff61 	bl	8004fc8 <__NVIC_GetPriorityGrouping>
 8005106:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	6978      	ldr	r0, [r7, #20]
 800510e:	f7ff ffb1 	bl	8005074 <NVIC_EncodePriority>
 8005112:	4602      	mov	r2, r0
 8005114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005118:	4611      	mov	r1, r2
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff ff80 	bl	8005020 <__NVIC_SetPriority>
}
 8005120:	bf00      	nop
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	4603      	mov	r3, r0
 8005130:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff ff54 	bl	8004fe4 <__NVIC_EnableIRQ>
}
 800513c:	bf00      	nop
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e00e      	b.n	8005174 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	795b      	ldrb	r3, [r3, #5]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d105      	bne.n	800516c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fe fbd8 	bl	800391c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005188:	f7ff f95e 	bl	8004448 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e099      	b.n	80052cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0201 	bic.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051b8:	e00f      	b.n	80051da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051ba:	f7ff f945 	bl	8004448 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b05      	cmp	r3, #5
 80051c6:	d908      	bls.n	80051da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2203      	movs	r2, #3
 80051d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e078      	b.n	80052cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e8      	bne.n	80051ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4b38      	ldr	r3, [pc, #224]	; (80052d4 <HAL_DMA_Init+0x158>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005206:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005212:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800521e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	2b04      	cmp	r3, #4
 8005232:	d107      	bne.n	8005244 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	4313      	orrs	r3, r2
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f023 0307 	bic.w	r3, r3, #7
 800525a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	2b04      	cmp	r3, #4
 800526c:	d117      	bne.n	800529e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00e      	beq.n	800529e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fa7b 	bl	800577c <DMA_CheckFifoParam>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2240      	movs	r2, #64	; 0x40
 8005290:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800529a:	2301      	movs	r3, #1
 800529c:	e016      	b.n	80052cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fa32 	bl	8005710 <DMA_CalcBaseAndBitshift>
 80052ac:	4603      	mov	r3, r0
 80052ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b4:	223f      	movs	r2, #63	; 0x3f
 80052b6:	409a      	lsls	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	f010803f 	.word	0xf010803f

080052d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_DMA_Start_IT+0x26>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e040      	b.n	8005380 <HAL_DMA_Start_IT+0xa8>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b01      	cmp	r3, #1
 8005310:	d12f      	bne.n	8005372 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2202      	movs	r2, #2
 8005316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 f9c4 	bl	80056b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005330:	223f      	movs	r2, #63	; 0x3f
 8005332:	409a      	lsls	r2, r3
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0216 	orr.w	r2, r2, #22
 8005346:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0208 	orr.w	r2, r2, #8
 800535e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	e005      	b.n	800537e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800537a:	2302      	movs	r3, #2
 800537c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800537e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005394:	4b92      	ldr	r3, [pc, #584]	; (80055e0 <HAL_DMA_IRQHandler+0x258>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a92      	ldr	r2, [pc, #584]	; (80055e4 <HAL_DMA_IRQHandler+0x25c>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	0a9b      	lsrs	r3, r3, #10
 80053a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b2:	2208      	movs	r2, #8
 80053b4:	409a      	lsls	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4013      	ands	r3, r2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01a      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d013      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0204 	bic.w	r2, r2, #4
 80053da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e0:	2208      	movs	r2, #8
 80053e2:	409a      	lsls	r2, r3
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ec:	f043 0201 	orr.w	r2, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f8:	2201      	movs	r2, #1
 80053fa:	409a      	lsls	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4013      	ands	r3, r2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d012      	beq.n	800542a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005416:	2201      	movs	r2, #1
 8005418:	409a      	lsls	r2, r3
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	f043 0202 	orr.w	r2, r3, #2
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542e:	2204      	movs	r2, #4
 8005430:	409a      	lsls	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4013      	ands	r3, r2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d012      	beq.n	8005460 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00b      	beq.n	8005460 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544c:	2204      	movs	r2, #4
 800544e:	409a      	lsls	r2, r3
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005458:	f043 0204 	orr.w	r2, r3, #4
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005464:	2210      	movs	r2, #16
 8005466:	409a      	lsls	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d043      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d03c      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005482:	2210      	movs	r2, #16
 8005484:	409a      	lsls	r2, r3
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d018      	beq.n	80054ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d108      	bne.n	80054b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d024      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	4798      	blx	r3
 80054b6:	e01f      	b.n	80054f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01b      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4798      	blx	r3
 80054c8:	e016      	b.n	80054f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d107      	bne.n	80054e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0208 	bic.w	r2, r2, #8
 80054e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fc:	2220      	movs	r2, #32
 80054fe:	409a      	lsls	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4013      	ands	r3, r2
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 808e 	beq.w	8005626 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8086 	beq.w	8005626 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800551e:	2220      	movs	r2, #32
 8005520:	409a      	lsls	r2, r3
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b05      	cmp	r3, #5
 8005530:	d136      	bne.n	80055a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0216 	bic.w	r2, r2, #22
 8005540:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695a      	ldr	r2, [r3, #20]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005550:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d103      	bne.n	8005562 <HAL_DMA_IRQHandler+0x1da>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800555e:	2b00      	cmp	r3, #0
 8005560:	d007      	beq.n	8005572 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0208 	bic.w	r2, r2, #8
 8005570:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005576:	223f      	movs	r2, #63	; 0x3f
 8005578:	409a      	lsls	r2, r3
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005592:	2b00      	cmp	r3, #0
 8005594:	d07d      	beq.n	8005692 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	4798      	blx	r3
        }
        return;
 800559e:	e078      	b.n	8005692 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d01c      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d108      	bne.n	80055ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d030      	beq.n	8005626 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	4798      	blx	r3
 80055cc:	e02b      	b.n	8005626 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d027      	beq.n	8005626 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	4798      	blx	r3
 80055de:	e022      	b.n	8005626 <HAL_DMA_IRQHandler+0x29e>
 80055e0:	20000008 	.word	0x20000008
 80055e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10f      	bne.n	8005616 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0210 	bic.w	r2, r2, #16
 8005604:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562a:	2b00      	cmp	r3, #0
 800562c:	d032      	beq.n	8005694 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d022      	beq.n	8005680 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2205      	movs	r2, #5
 800563e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0201 	bic.w	r2, r2, #1
 8005650:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	3301      	adds	r3, #1
 8005656:	60bb      	str	r3, [r7, #8]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	429a      	cmp	r2, r3
 800565c:	d307      	bcc.n	800566e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f2      	bne.n	8005652 <HAL_DMA_IRQHandler+0x2ca>
 800566c:	e000      	b.n	8005670 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800566e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d005      	beq.n	8005694 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	4798      	blx	r3
 8005690:	e000      	b.n	8005694 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005692:	bf00      	nop
    }
  }
}
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop

0800569c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b40      	cmp	r3, #64	; 0x40
 80056e0:	d108      	bne.n	80056f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80056f2:	e007      	b.n	8005704 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	60da      	str	r2, [r3, #12]
}
 8005704:	bf00      	nop
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	3b10      	subs	r3, #16
 8005720:	4a14      	ldr	r2, [pc, #80]	; (8005774 <DMA_CalcBaseAndBitshift+0x64>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	091b      	lsrs	r3, r3, #4
 8005728:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800572a:	4a13      	ldr	r2, [pc, #76]	; (8005778 <DMA_CalcBaseAndBitshift+0x68>)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b03      	cmp	r3, #3
 800573c:	d909      	bls.n	8005752 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005746:	f023 0303 	bic.w	r3, r3, #3
 800574a:	1d1a      	adds	r2, r3, #4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	659a      	str	r2, [r3, #88]	; 0x58
 8005750:	e007      	b.n	8005762 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800575a:	f023 0303 	bic.w	r3, r3, #3
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	aaaaaaab 	.word	0xaaaaaaab
 8005778:	0802fe0c 	.word	0x0802fe0c

0800577c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d11f      	bne.n	80057d6 <DMA_CheckFifoParam+0x5a>
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d856      	bhi.n	800584a <DMA_CheckFifoParam+0xce>
 800579c:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <DMA_CheckFifoParam+0x28>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	080057b5 	.word	0x080057b5
 80057a8:	080057c7 	.word	0x080057c7
 80057ac:	080057b5 	.word	0x080057b5
 80057b0:	0800584b 	.word	0x0800584b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d046      	beq.n	800584e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c4:	e043      	b.n	800584e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057ce:	d140      	bne.n	8005852 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057d4:	e03d      	b.n	8005852 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057de:	d121      	bne.n	8005824 <DMA_CheckFifoParam+0xa8>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d837      	bhi.n	8005856 <DMA_CheckFifoParam+0xda>
 80057e6:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <DMA_CheckFifoParam+0x70>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	080057fd 	.word	0x080057fd
 80057f0:	08005803 	.word	0x08005803
 80057f4:	080057fd 	.word	0x080057fd
 80057f8:	08005815 	.word	0x08005815
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005800:	e030      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d025      	beq.n	800585a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005812:	e022      	b.n	800585a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800581c:	d11f      	bne.n	800585e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005822:	e01c      	b.n	800585e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b02      	cmp	r3, #2
 8005828:	d903      	bls.n	8005832 <DMA_CheckFifoParam+0xb6>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b03      	cmp	r3, #3
 800582e:	d003      	beq.n	8005838 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005830:	e018      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	73fb      	strb	r3, [r7, #15]
      break;
 8005836:	e015      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00e      	beq.n	8005862 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]
      break;
 8005848:	e00b      	b.n	8005862 <DMA_CheckFifoParam+0xe6>
      break;
 800584a:	bf00      	nop
 800584c:	e00a      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;
 800584e:	bf00      	nop
 8005850:	e008      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;
 8005852:	bf00      	nop
 8005854:	e006      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;
 8005856:	bf00      	nop
 8005858:	e004      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;
 800585a:	bf00      	nop
 800585c:	e002      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;   
 800585e:	bf00      	nop
 8005860:	e000      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;
 8005862:	bf00      	nop
    }
  } 
  
  return status; 
 8005864:	7bfb      	ldrb	r3, [r7, #15]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop

08005874 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e03b      	b.n	80058fe <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d106      	bne.n	80058a0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fe f860 	bl	8003960 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c4:	f023 0107 	bic.w	r1, r3, #7
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80058de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	68d1      	ldr	r1, [r2, #12]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6812      	ldr	r2, [r2, #0]
 80058ea:	430b      	orrs	r3, r1
 80058ec:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d026      	beq.n	8005976 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592e:	2b00      	cmp	r3, #0
 8005930:	d021      	beq.n	8005976 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005940:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005946:	f043 0201 	orr.w	r2, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2201      	movs	r2, #1
 8005954:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2204      	movs	r2, #4
 800595a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b00      	cmp	r3, #0
 800597e:	d026      	beq.n	80059ce <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d021      	beq.n	80059ce <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005998:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2220      	movs	r2, #32
 80059a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a6:	f043 0202 	orr.w	r2, r3, #2
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2204      	movs	r2, #4
 80059b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d026      	beq.n	8005a26 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d021      	beq.n	8005a26 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059f0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2208      	movs	r2, #8
 80059f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fe:	f043 0204 	orr.w	r2, r3, #4
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2204      	movs	r2, #4
 8005a0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d013      	beq.n	8005a58 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00e      	beq.n	8005a58 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a48:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2204      	movs	r2, #4
 8005a50:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f853 	bl	8005afe <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d024      	beq.n	8005aac <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01f      	beq.n	8005aac <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a7a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2202      	movs	r2, #2
 8005a82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f003 0310 	and.w	r3, r3, #16
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d01f      	beq.n	8005af6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01a      	beq.n	8005af6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ace:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2210      	movs	r2, #16
 8005ad6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f80e 	bl	8005b12 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005af6:	bf00      	nop
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
	...

08005b28 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_DMA2D_ConfigLayer+0x20>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e079      	b.n	8005c3c <HAL_DMA2D_ConfigLayer+0x114>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	3318      	adds	r3, #24
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	4413      	add	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	041b      	lsls	r3, r3, #16
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005b72:	4b35      	ldr	r3, [pc, #212]	; (8005c48 <HAL_DMA2D_ConfigLayer+0x120>)
 8005b74:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b0a      	cmp	r3, #10
 8005b7c:	d003      	beq.n	8005b86 <HAL_DMA2D_ConfigLayer+0x5e>
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b09      	cmp	r3, #9
 8005b84:	d107      	bne.n	8005b96 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	e005      	b.n	8005ba2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	061b      	lsls	r3, r3, #24
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d120      	bne.n	8005bea <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	ea02 0103 	and.w	r1, r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2b0a      	cmp	r3, #10
 8005bd0:	d003      	beq.n	8005bda <HAL_DMA2D_ConfigLayer+0xb2>
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2b09      	cmp	r3, #9
 8005bd8:	d127      	bne.n	8005c2a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005be6:	629a      	str	r2, [r3, #40]	; 0x28
 8005be8:	e01f      	b.n	8005c2a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69da      	ldr	r2, [r3, #28]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	43db      	mvns	r3, r3
 8005bf4:	ea02 0103 	and.w	r1, r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	2b0a      	cmp	r3, #10
 8005c12:	d003      	beq.n	8005c1c <HAL_DMA2D_ConfigLayer+0xf4>
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b09      	cmp	r3, #9
 8005c1a:	d106      	bne.n	8005c2a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005c28:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	ff03000f 	.word	0xff03000f

08005c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b089      	sub	sp, #36	; 0x24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c62:	2300      	movs	r3, #0
 8005c64:	61fb      	str	r3, [r7, #28]
 8005c66:	e177      	b.n	8005f58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c68:	2201      	movs	r2, #1
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	f040 8166 	bne.w	8005f52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d005      	beq.n	8005c9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d130      	bne.n	8005d00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	2203      	movs	r2, #3
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	43db      	mvns	r3, r3
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	091b      	lsrs	r3, r3, #4
 8005cea:	f003 0201 	and.w	r2, r3, #1
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d017      	beq.n	8005d3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	2203      	movs	r2, #3
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	4013      	ands	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d123      	bne.n	8005d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	08da      	lsrs	r2, r3, #3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3208      	adds	r2, #8
 8005d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	220f      	movs	r2, #15
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	43db      	mvns	r3, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	08da      	lsrs	r2, r3, #3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3208      	adds	r2, #8
 8005d8a:	69b9      	ldr	r1, [r7, #24]
 8005d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	43db      	mvns	r3, r3
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	4013      	ands	r3, r2
 8005da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f003 0203 	and.w	r2, r3, #3
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80c0 	beq.w	8005f52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	4b66      	ldr	r3, [pc, #408]	; (8005f70 <HAL_GPIO_Init+0x324>)
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dda:	4a65      	ldr	r2, [pc, #404]	; (8005f70 <HAL_GPIO_Init+0x324>)
 8005ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005de0:	6453      	str	r3, [r2, #68]	; 0x44
 8005de2:	4b63      	ldr	r3, [pc, #396]	; (8005f70 <HAL_GPIO_Init+0x324>)
 8005de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dee:	4a61      	ldr	r2, [pc, #388]	; (8005f74 <HAL_GPIO_Init+0x328>)
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	089b      	lsrs	r3, r3, #2
 8005df4:	3302      	adds	r3, #2
 8005df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	220f      	movs	r2, #15
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a58      	ldr	r2, [pc, #352]	; (8005f78 <HAL_GPIO_Init+0x32c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d037      	beq.n	8005e8a <HAL_GPIO_Init+0x23e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a57      	ldr	r2, [pc, #348]	; (8005f7c <HAL_GPIO_Init+0x330>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d031      	beq.n	8005e86 <HAL_GPIO_Init+0x23a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a56      	ldr	r2, [pc, #344]	; (8005f80 <HAL_GPIO_Init+0x334>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d02b      	beq.n	8005e82 <HAL_GPIO_Init+0x236>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a55      	ldr	r2, [pc, #340]	; (8005f84 <HAL_GPIO_Init+0x338>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d025      	beq.n	8005e7e <HAL_GPIO_Init+0x232>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a54      	ldr	r2, [pc, #336]	; (8005f88 <HAL_GPIO_Init+0x33c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d01f      	beq.n	8005e7a <HAL_GPIO_Init+0x22e>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a53      	ldr	r2, [pc, #332]	; (8005f8c <HAL_GPIO_Init+0x340>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d019      	beq.n	8005e76 <HAL_GPIO_Init+0x22a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a52      	ldr	r2, [pc, #328]	; (8005f90 <HAL_GPIO_Init+0x344>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d013      	beq.n	8005e72 <HAL_GPIO_Init+0x226>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a51      	ldr	r2, [pc, #324]	; (8005f94 <HAL_GPIO_Init+0x348>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00d      	beq.n	8005e6e <HAL_GPIO_Init+0x222>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a50      	ldr	r2, [pc, #320]	; (8005f98 <HAL_GPIO_Init+0x34c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d007      	beq.n	8005e6a <HAL_GPIO_Init+0x21e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a4f      	ldr	r2, [pc, #316]	; (8005f9c <HAL_GPIO_Init+0x350>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d101      	bne.n	8005e66 <HAL_GPIO_Init+0x21a>
 8005e62:	2309      	movs	r3, #9
 8005e64:	e012      	b.n	8005e8c <HAL_GPIO_Init+0x240>
 8005e66:	230a      	movs	r3, #10
 8005e68:	e010      	b.n	8005e8c <HAL_GPIO_Init+0x240>
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	e00e      	b.n	8005e8c <HAL_GPIO_Init+0x240>
 8005e6e:	2307      	movs	r3, #7
 8005e70:	e00c      	b.n	8005e8c <HAL_GPIO_Init+0x240>
 8005e72:	2306      	movs	r3, #6
 8005e74:	e00a      	b.n	8005e8c <HAL_GPIO_Init+0x240>
 8005e76:	2305      	movs	r3, #5
 8005e78:	e008      	b.n	8005e8c <HAL_GPIO_Init+0x240>
 8005e7a:	2304      	movs	r3, #4
 8005e7c:	e006      	b.n	8005e8c <HAL_GPIO_Init+0x240>
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e004      	b.n	8005e8c <HAL_GPIO_Init+0x240>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e002      	b.n	8005e8c <HAL_GPIO_Init+0x240>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <HAL_GPIO_Init+0x240>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	f002 0203 	and.w	r2, r2, #3
 8005e92:	0092      	lsls	r2, r2, #2
 8005e94:	4093      	lsls	r3, r2
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e9c:	4935      	ldr	r1, [pc, #212]	; (8005f74 <HAL_GPIO_Init+0x328>)
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	089b      	lsrs	r3, r3, #2
 8005ea2:	3302      	adds	r3, #2
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005eaa:	4b3d      	ldr	r3, [pc, #244]	; (8005fa0 <HAL_GPIO_Init+0x354>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ece:	4a34      	ldr	r2, [pc, #208]	; (8005fa0 <HAL_GPIO_Init+0x354>)
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ed4:	4b32      	ldr	r3, [pc, #200]	; (8005fa0 <HAL_GPIO_Init+0x354>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	43db      	mvns	r3, r3
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ef8:	4a29      	ldr	r2, [pc, #164]	; (8005fa0 <HAL_GPIO_Init+0x354>)
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005efe:	4b28      	ldr	r3, [pc, #160]	; (8005fa0 <HAL_GPIO_Init+0x354>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	43db      	mvns	r3, r3
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f22:	4a1f      	ldr	r2, [pc, #124]	; (8005fa0 <HAL_GPIO_Init+0x354>)
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f28:	4b1d      	ldr	r3, [pc, #116]	; (8005fa0 <HAL_GPIO_Init+0x354>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	43db      	mvns	r3, r3
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	4013      	ands	r3, r2
 8005f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f4c:	4a14      	ldr	r2, [pc, #80]	; (8005fa0 <HAL_GPIO_Init+0x354>)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	3301      	adds	r3, #1
 8005f56:	61fb      	str	r3, [r7, #28]
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	2b0f      	cmp	r3, #15
 8005f5c:	f67f ae84 	bls.w	8005c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f60:	bf00      	nop
 8005f62:	bf00      	nop
 8005f64:	3724      	adds	r7, #36	; 0x24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40023800 	.word	0x40023800
 8005f74:	40013800 	.word	0x40013800
 8005f78:	40020000 	.word	0x40020000
 8005f7c:	40020400 	.word	0x40020400
 8005f80:	40020800 	.word	0x40020800
 8005f84:	40020c00 	.word	0x40020c00
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	40021400 	.word	0x40021400
 8005f90:	40021800 	.word	0x40021800
 8005f94:	40021c00 	.word	0x40021c00
 8005f98:	40022000 	.word	0x40022000
 8005f9c:	40022400 	.word	0x40022400
 8005fa0:	40013c00 	.word	0x40013c00

08005fa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	887b      	ldrh	r3, [r7, #2]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	73fb      	strb	r3, [r7, #15]
 8005fc0:	e001      	b.n	8005fc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	807b      	strh	r3, [r7, #2]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fe4:	787b      	ldrb	r3, [r7, #1]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fea:	887a      	ldrh	r2, [r7, #2]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ff0:	e003      	b.n	8005ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ff2:	887b      	ldrh	r3, [r7, #2]
 8005ff4:	041a      	lsls	r2, r3, #16
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	619a      	str	r2, [r3, #24]
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006006:	b480      	push	{r7}
 8006008:	b085      	sub	sp, #20
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	460b      	mov	r3, r1
 8006010:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006018:	887a      	ldrh	r2, [r7, #2]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4013      	ands	r3, r2
 800601e:	041a      	lsls	r2, r3, #16
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	43d9      	mvns	r1, r3
 8006024:	887b      	ldrh	r3, [r7, #2]
 8006026:	400b      	ands	r3, r1
 8006028:	431a      	orrs	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	619a      	str	r2, [r3, #24]
}
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
	...

0800603c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e12b      	b.n	80062a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7fd fca4 	bl	80039b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2224      	movs	r2, #36	; 0x24
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0201 	bic.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800608e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800609e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060a0:	f002 f81a 	bl	80080d8 <HAL_RCC_GetPCLK1Freq>
 80060a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	4a81      	ldr	r2, [pc, #516]	; (80062b0 <HAL_I2C_Init+0x274>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d807      	bhi.n	80060c0 <HAL_I2C_Init+0x84>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4a80      	ldr	r2, [pc, #512]	; (80062b4 <HAL_I2C_Init+0x278>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	bf94      	ite	ls
 80060b8:	2301      	movls	r3, #1
 80060ba:	2300      	movhi	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	e006      	b.n	80060ce <HAL_I2C_Init+0x92>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4a7d      	ldr	r2, [pc, #500]	; (80062b8 <HAL_I2C_Init+0x27c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	bf94      	ite	ls
 80060c8:	2301      	movls	r3, #1
 80060ca:	2300      	movhi	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e0e7      	b.n	80062a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4a78      	ldr	r2, [pc, #480]	; (80062bc <HAL_I2C_Init+0x280>)
 80060da:	fba2 2303 	umull	r2, r3, r2, r3
 80060de:	0c9b      	lsrs	r3, r3, #18
 80060e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	4a6a      	ldr	r2, [pc, #424]	; (80062b0 <HAL_I2C_Init+0x274>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d802      	bhi.n	8006110 <HAL_I2C_Init+0xd4>
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	3301      	adds	r3, #1
 800610e:	e009      	b.n	8006124 <HAL_I2C_Init+0xe8>
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006116:	fb02 f303 	mul.w	r3, r2, r3
 800611a:	4a69      	ldr	r2, [pc, #420]	; (80062c0 <HAL_I2C_Init+0x284>)
 800611c:	fba2 2303 	umull	r2, r3, r2, r3
 8006120:	099b      	lsrs	r3, r3, #6
 8006122:	3301      	adds	r3, #1
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	430b      	orrs	r3, r1
 800612a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006136:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	495c      	ldr	r1, [pc, #368]	; (80062b0 <HAL_I2C_Init+0x274>)
 8006140:	428b      	cmp	r3, r1
 8006142:	d819      	bhi.n	8006178 <HAL_I2C_Init+0x13c>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	1e59      	subs	r1, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006152:	1c59      	adds	r1, r3, #1
 8006154:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006158:	400b      	ands	r3, r1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <HAL_I2C_Init+0x138>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	1e59      	subs	r1, r3, #1
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	fbb1 f3f3 	udiv	r3, r1, r3
 800616c:	3301      	adds	r3, #1
 800616e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006172:	e051      	b.n	8006218 <HAL_I2C_Init+0x1dc>
 8006174:	2304      	movs	r3, #4
 8006176:	e04f      	b.n	8006218 <HAL_I2C_Init+0x1dc>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d111      	bne.n	80061a4 <HAL_I2C_Init+0x168>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	1e58      	subs	r0, r3, #1
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6859      	ldr	r1, [r3, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	440b      	add	r3, r1
 800618e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006192:	3301      	adds	r3, #1
 8006194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006198:	2b00      	cmp	r3, #0
 800619a:	bf0c      	ite	eq
 800619c:	2301      	moveq	r3, #1
 800619e:	2300      	movne	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	e012      	b.n	80061ca <HAL_I2C_Init+0x18e>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	1e58      	subs	r0, r3, #1
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6859      	ldr	r1, [r3, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	0099      	lsls	r1, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ba:	3301      	adds	r3, #1
 80061bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	bf0c      	ite	eq
 80061c4:	2301      	moveq	r3, #1
 80061c6:	2300      	movne	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <HAL_I2C_Init+0x196>
 80061ce:	2301      	movs	r3, #1
 80061d0:	e022      	b.n	8006218 <HAL_I2C_Init+0x1dc>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10e      	bne.n	80061f8 <HAL_I2C_Init+0x1bc>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	1e58      	subs	r0, r3, #1
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6859      	ldr	r1, [r3, #4]
 80061e2:	460b      	mov	r3, r1
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	440b      	add	r3, r1
 80061e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ec:	3301      	adds	r3, #1
 80061ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f6:	e00f      	b.n	8006218 <HAL_I2C_Init+0x1dc>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	1e58      	subs	r0, r3, #1
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6859      	ldr	r1, [r3, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	0099      	lsls	r1, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	fbb0 f3f3 	udiv	r3, r0, r3
 800620e:	3301      	adds	r3, #1
 8006210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006214:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	6809      	ldr	r1, [r1, #0]
 800621c:	4313      	orrs	r3, r2
 800621e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69da      	ldr	r2, [r3, #28]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006246:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6911      	ldr	r1, [r2, #16]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	68d2      	ldr	r2, [r2, #12]
 8006252:	4311      	orrs	r1, r2
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6812      	ldr	r2, [r2, #0]
 8006258:	430b      	orrs	r3, r1
 800625a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	695a      	ldr	r2, [r3, #20]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0201 	orr.w	r2, r2, #1
 8006286:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	000186a0 	.word	0x000186a0
 80062b4:	001e847f 	.word	0x001e847f
 80062b8:	003d08ff 	.word	0x003d08ff
 80062bc:	431bde83 	.word	0x431bde83
 80062c0:	10624dd3 	.word	0x10624dd3

080062c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	607a      	str	r2, [r7, #4]
 80062ce:	461a      	mov	r2, r3
 80062d0:	460b      	mov	r3, r1
 80062d2:	817b      	strh	r3, [r7, #10]
 80062d4:	4613      	mov	r3, r2
 80062d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062d8:	f7fe f8b6 	bl	8004448 <HAL_GetTick>
 80062dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	f040 80e0 	bne.w	80064ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	2319      	movs	r3, #25
 80062f2:	2201      	movs	r2, #1
 80062f4:	4970      	ldr	r1, [pc, #448]	; (80064b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 fc58 	bl	8006bac <I2C_WaitOnFlagUntilTimeout>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006302:	2302      	movs	r3, #2
 8006304:	e0d3      	b.n	80064ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_I2C_Master_Transmit+0x50>
 8006310:	2302      	movs	r3, #2
 8006312:	e0cc      	b.n	80064ae <HAL_I2C_Master_Transmit+0x1ea>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b01      	cmp	r3, #1
 8006328:	d007      	beq.n	800633a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0201 	orr.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006348:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2221      	movs	r2, #33	; 0x21
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2210      	movs	r2, #16
 8006356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	893a      	ldrh	r2, [r7, #8]
 800636a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006370:	b29a      	uxth	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4a50      	ldr	r2, [pc, #320]	; (80064bc <HAL_I2C_Master_Transmit+0x1f8>)
 800637a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800637c:	8979      	ldrh	r1, [r7, #10]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	6a3a      	ldr	r2, [r7, #32]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 fac2 	bl	800690c <I2C_MasterRequestWrite>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e08d      	b.n	80064ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006392:	2300      	movs	r3, #0
 8006394:	613b      	str	r3, [r7, #16]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80063a8:	e066      	b.n	8006478 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	6a39      	ldr	r1, [r7, #32]
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 fcd2 	bl	8006d58 <I2C_WaitOnTXEFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00d      	beq.n	80063d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	2b04      	cmp	r3, #4
 80063c0:	d107      	bne.n	80063d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e06b      	b.n	80064ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	781a      	ldrb	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b04      	cmp	r3, #4
 8006412:	d11b      	bne.n	800644c <HAL_I2C_Master_Transmit+0x188>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006418:	2b00      	cmp	r3, #0
 800641a:	d017      	beq.n	800644c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	781a      	ldrb	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006436:	b29b      	uxth	r3, r3
 8006438:	3b01      	subs	r3, #1
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	6a39      	ldr	r1, [r7, #32]
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 fcc2 	bl	8006dda <I2C_WaitOnBTFFlagUntilTimeout>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00d      	beq.n	8006478 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006460:	2b04      	cmp	r3, #4
 8006462:	d107      	bne.n	8006474 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006472:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e01a      	b.n	80064ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647c:	2b00      	cmp	r3, #0
 800647e:	d194      	bne.n	80063aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800648e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	e000      	b.n	80064ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80064ac:	2302      	movs	r3, #2
  }
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	00100002 	.word	0x00100002
 80064bc:	ffff0000 	.word	0xffff0000

080064c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08c      	sub	sp, #48	; 0x30
 80064c4:	af02      	add	r7, sp, #8
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	607a      	str	r2, [r7, #4]
 80064ca:	461a      	mov	r2, r3
 80064cc:	460b      	mov	r3, r1
 80064ce:	817b      	strh	r3, [r7, #10]
 80064d0:	4613      	mov	r3, r2
 80064d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064d4:	f7fd ffb8 	bl	8004448 <HAL_GetTick>
 80064d8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	f040 820b 	bne.w	80068fe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	2319      	movs	r3, #25
 80064ee:	2201      	movs	r2, #1
 80064f0:	497c      	ldr	r1, [pc, #496]	; (80066e4 <HAL_I2C_Master_Receive+0x224>)
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 fb5a 	bl	8006bac <I2C_WaitOnFlagUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80064fe:	2302      	movs	r3, #2
 8006500:	e1fe      	b.n	8006900 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <HAL_I2C_Master_Receive+0x50>
 800650c:	2302      	movs	r3, #2
 800650e:	e1f7      	b.n	8006900 <HAL_I2C_Master_Receive+0x440>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b01      	cmp	r3, #1
 8006524:	d007      	beq.n	8006536 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f042 0201 	orr.w	r2, r2, #1
 8006534:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006544:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2222      	movs	r2, #34	; 0x22
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2210      	movs	r2, #16
 8006552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	893a      	ldrh	r2, [r7, #8]
 8006566:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656c:	b29a      	uxth	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4a5c      	ldr	r2, [pc, #368]	; (80066e8 <HAL_I2C_Master_Receive+0x228>)
 8006576:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006578:	8979      	ldrh	r1, [r7, #10]
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 fa46 	bl	8006a10 <I2C_MasterRequestRead>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e1b8      	b.n	8006900 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006592:	2b00      	cmp	r3, #0
 8006594:	d113      	bne.n	80065be <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006596:	2300      	movs	r3, #0
 8006598:	623b      	str	r3, [r7, #32]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	623b      	str	r3, [r7, #32]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	623b      	str	r3, [r7, #32]
 80065aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	e18c      	b.n	80068d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d11b      	bne.n	80065fe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	61fb      	str	r3, [r7, #28]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	61fb      	str	r3, [r7, #28]
 80065ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	e16c      	b.n	80068d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006602:	2b02      	cmp	r3, #2
 8006604:	d11b      	bne.n	800663e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006614:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006624:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006626:	2300      	movs	r3, #0
 8006628:	61bb      	str	r3, [r7, #24]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	61bb      	str	r3, [r7, #24]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	e14c      	b.n	80068d8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800664c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006664:	e138      	b.n	80068d8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666a:	2b03      	cmp	r3, #3
 800666c:	f200 80f1 	bhi.w	8006852 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006674:	2b01      	cmp	r3, #1
 8006676:	d123      	bne.n	80066c0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 fbed 	bl	8006e5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e139      	b.n	8006900 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691a      	ldr	r2, [r3, #16]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	3b01      	subs	r3, #1
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066be:	e10b      	b.n	80068d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d14e      	bne.n	8006766 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	2200      	movs	r2, #0
 80066d0:	4906      	ldr	r1, [pc, #24]	; (80066ec <HAL_I2C_Master_Receive+0x22c>)
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 fa6a 	bl	8006bac <I2C_WaitOnFlagUntilTimeout>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d008      	beq.n	80066f0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e10e      	b.n	8006900 <HAL_I2C_Master_Receive+0x440>
 80066e2:	bf00      	nop
 80066e4:	00100002 	.word	0x00100002
 80066e8:	ffff0000 	.word	0xffff0000
 80066ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	691a      	ldr	r2, [r3, #16]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800671c:	3b01      	subs	r3, #1
 800671e:	b29a      	uxth	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	691a      	ldr	r2, [r3, #16]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	b2d2      	uxtb	r2, r2
 800673e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675a:	b29b      	uxth	r3, r3
 800675c:	3b01      	subs	r3, #1
 800675e:	b29a      	uxth	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006764:	e0b8      	b.n	80068d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	2200      	movs	r2, #0
 800676e:	4966      	ldr	r1, [pc, #408]	; (8006908 <HAL_I2C_Master_Receive+0x448>)
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 fa1b 	bl	8006bac <I2C_WaitOnFlagUntilTimeout>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e0bf      	b.n	8006900 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800678e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	691a      	ldr	r2, [r3, #16]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c8:	2200      	movs	r2, #0
 80067ca:	494f      	ldr	r1, [pc, #316]	; (8006908 <HAL_I2C_Master_Receive+0x448>)
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 f9ed 	bl	8006bac <I2C_WaitOnFlagUntilTimeout>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e091      	b.n	8006900 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691a      	ldr	r2, [r3, #16]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006808:	3b01      	subs	r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800683a:	3b01      	subs	r3, #1
 800683c:	b29a      	uxth	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006846:	b29b      	uxth	r3, r3
 8006848:	3b01      	subs	r3, #1
 800684a:	b29a      	uxth	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006850:	e042      	b.n	80068d8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006854:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 fb00 	bl	8006e5c <I2C_WaitOnRXNEFlagUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e04c      	b.n	8006900 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006882:	3b01      	subs	r3, #1
 8006884:	b29a      	uxth	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688e:	b29b      	uxth	r3, r3
 8006890:	3b01      	subs	r3, #1
 8006892:	b29a      	uxth	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	f003 0304 	and.w	r3, r3, #4
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d118      	bne.n	80068d8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	691a      	ldr	r2, [r3, #16]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	b2d2      	uxtb	r2, r2
 80068b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c2:	3b01      	subs	r3, #1
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f47f aec2 	bne.w	8006666 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2220      	movs	r2, #32
 80068e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	e000      	b.n	8006900 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80068fe:	2302      	movs	r3, #2
  }
}
 8006900:	4618      	mov	r0, r3
 8006902:	3728      	adds	r7, #40	; 0x28
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	00010004 	.word	0x00010004

0800690c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af02      	add	r7, sp, #8
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	607a      	str	r2, [r7, #4]
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	460b      	mov	r3, r1
 800691a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006920:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b08      	cmp	r3, #8
 8006926:	d006      	beq.n	8006936 <I2C_MasterRequestWrite+0x2a>
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d003      	beq.n	8006936 <I2C_MasterRequestWrite+0x2a>
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006934:	d108      	bne.n	8006948 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	e00b      	b.n	8006960 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694c:	2b12      	cmp	r3, #18
 800694e:	d107      	bne.n	8006960 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800695e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 f91d 	bl	8006bac <I2C_WaitOnFlagUntilTimeout>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00d      	beq.n	8006994 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006986:	d103      	bne.n	8006990 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800698e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e035      	b.n	8006a00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800699c:	d108      	bne.n	80069b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800699e:	897b      	ldrh	r3, [r7, #10]
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	461a      	mov	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069ac:	611a      	str	r2, [r3, #16]
 80069ae:	e01b      	b.n	80069e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80069b0:	897b      	ldrh	r3, [r7, #10]
 80069b2:	11db      	asrs	r3, r3, #7
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	f003 0306 	and.w	r3, r3, #6
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	f063 030f 	orn	r3, r3, #15
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	490e      	ldr	r1, [pc, #56]	; (8006a08 <I2C_MasterRequestWrite+0xfc>)
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 f943 	bl	8006c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e010      	b.n	8006a00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80069de:	897b      	ldrh	r3, [r7, #10]
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4907      	ldr	r1, [pc, #28]	; (8006a0c <I2C_MasterRequestWrite+0x100>)
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 f933 	bl	8006c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e000      	b.n	8006a00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	00010008 	.word	0x00010008
 8006a0c:	00010002 	.word	0x00010002

08006a10 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	607a      	str	r2, [r7, #4]
 8006a1a:	603b      	str	r3, [r7, #0]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a34:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d006      	beq.n	8006a4a <I2C_MasterRequestRead+0x3a>
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d003      	beq.n	8006a4a <I2C_MasterRequestRead+0x3a>
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a48:	d108      	bne.n	8006a5c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e00b      	b.n	8006a74 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a60:	2b11      	cmp	r3, #17
 8006a62:	d107      	bne.n	8006a74 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f893 	bl	8006bac <I2C_WaitOnFlagUntilTimeout>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00d      	beq.n	8006aa8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9a:	d103      	bne.n	8006aa4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e079      	b.n	8006b9c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ab0:	d108      	bne.n	8006ac4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ab2:	897b      	ldrh	r3, [r7, #10]
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	f043 0301 	orr.w	r3, r3, #1
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	611a      	str	r2, [r3, #16]
 8006ac2:	e05f      	b.n	8006b84 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ac4:	897b      	ldrh	r3, [r7, #10]
 8006ac6:	11db      	asrs	r3, r3, #7
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	f003 0306 	and.w	r3, r3, #6
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	f063 030f 	orn	r3, r3, #15
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	4930      	ldr	r1, [pc, #192]	; (8006ba4 <I2C_MasterRequestRead+0x194>)
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 f8b9 	bl	8006c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e054      	b.n	8006b9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006af2:	897b      	ldrh	r3, [r7, #10]
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	4929      	ldr	r1, [pc, #164]	; (8006ba8 <I2C_MasterRequestRead+0x198>)
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 f8a9 	bl	8006c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e044      	b.n	8006b9c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b12:	2300      	movs	r3, #0
 8006b14:	613b      	str	r3, [r7, #16]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	613b      	str	r3, [r7, #16]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b36:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 f831 	bl	8006bac <I2C_WaitOnFlagUntilTimeout>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00d      	beq.n	8006b6c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b5e:	d103      	bne.n	8006b68 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b66:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e017      	b.n	8006b9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006b6c:	897b      	ldrh	r3, [r7, #10]
 8006b6e:	11db      	asrs	r3, r3, #7
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	f003 0306 	and.w	r3, r3, #6
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	f063 030e 	orn	r3, r3, #14
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	4907      	ldr	r1, [pc, #28]	; (8006ba8 <I2C_MasterRequestRead+0x198>)
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 f865 	bl	8006c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e000      	b.n	8006b9c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	00010008 	.word	0x00010008
 8006ba8:	00010002 	.word	0x00010002

08006bac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	603b      	str	r3, [r7, #0]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bbc:	e025      	b.n	8006c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc4:	d021      	beq.n	8006c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bc6:	f7fd fc3f 	bl	8004448 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d302      	bcc.n	8006bdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d116      	bne.n	8006c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2220      	movs	r2, #32
 8006be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	f043 0220 	orr.w	r2, r3, #32
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e023      	b.n	8006c52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	0c1b      	lsrs	r3, r3, #16
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d10d      	bne.n	8006c30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	43da      	mvns	r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	bf0c      	ite	eq
 8006c26:	2301      	moveq	r3, #1
 8006c28:	2300      	movne	r3, #0
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	e00c      	b.n	8006c4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	43da      	mvns	r2, r3
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	bf0c      	ite	eq
 8006c42:	2301      	moveq	r3, #1
 8006c44:	2300      	movne	r3, #0
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d0b6      	beq.n	8006bbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	607a      	str	r2, [r7, #4]
 8006c66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c68:	e051      	b.n	8006d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c78:	d123      	bne.n	8006cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	f043 0204 	orr.w	r2, r3, #4
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e046      	b.n	8006d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc8:	d021      	beq.n	8006d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cca:	f7fd fbbd 	bl	8004448 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d302      	bcc.n	8006ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d116      	bne.n	8006d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	f043 0220 	orr.w	r2, r3, #32
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e020      	b.n	8006d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	0c1b      	lsrs	r3, r3, #16
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d10c      	bne.n	8006d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	43da      	mvns	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4013      	ands	r3, r2
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	bf14      	ite	ne
 8006d2a:	2301      	movne	r3, #1
 8006d2c:	2300      	moveq	r3, #0
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	e00b      	b.n	8006d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	43da      	mvns	r2, r3
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	bf14      	ite	ne
 8006d44:	2301      	movne	r3, #1
 8006d46:	2300      	moveq	r3, #0
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d18d      	bne.n	8006c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d64:	e02d      	b.n	8006dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 f8ce 	bl	8006f08 <I2C_IsAcknowledgeFailed>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e02d      	b.n	8006dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7c:	d021      	beq.n	8006dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d7e:	f7fd fb63 	bl	8004448 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d302      	bcc.n	8006d94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d116      	bne.n	8006dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	f043 0220 	orr.w	r2, r3, #32
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e007      	b.n	8006dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dcc:	2b80      	cmp	r3, #128	; 0x80
 8006dce:	d1ca      	bne.n	8006d66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b084      	sub	sp, #16
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006de6:	e02d      	b.n	8006e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 f88d 	bl	8006f08 <I2C_IsAcknowledgeFailed>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e02d      	b.n	8006e54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfe:	d021      	beq.n	8006e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e00:	f7fd fb22 	bl	8004448 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d302      	bcc.n	8006e16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d116      	bne.n	8006e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e30:	f043 0220 	orr.w	r2, r3, #32
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e007      	b.n	8006e54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	f003 0304 	and.w	r3, r3, #4
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d1ca      	bne.n	8006de8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e68:	e042      	b.n	8006ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	f003 0310 	and.w	r3, r3, #16
 8006e74:	2b10      	cmp	r3, #16
 8006e76:	d119      	bne.n	8006eac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f06f 0210 	mvn.w	r2, #16
 8006e80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e029      	b.n	8006f00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eac:	f7fd facc 	bl	8004448 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d302      	bcc.n	8006ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d116      	bne.n	8006ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006edc:	f043 0220 	orr.w	r2, r3, #32
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e007      	b.n	8006f00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efa:	2b40      	cmp	r3, #64	; 0x40
 8006efc:	d1b5      	bne.n	8006e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f1e:	d11b      	bne.n	8006f58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f44:	f043 0204 	orr.w	r2, r3, #4
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e000      	b.n	8006f5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d129      	bne.n	8006fd0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2224      	movs	r2, #36	; 0x24
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0201 	bic.w	r2, r2, #1
 8006f92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0210 	bic.w	r2, r2, #16
 8006fa2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0201 	orr.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e000      	b.n	8006fd2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006fd0:	2302      	movs	r3, #2
  }
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b085      	sub	sp, #20
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	d12a      	bne.n	800704e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2224      	movs	r2, #36	; 0x24
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 0201 	bic.w	r2, r2, #1
 800700e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007018:	89fb      	ldrh	r3, [r7, #14]
 800701a:	f023 030f 	bic.w	r3, r3, #15
 800701e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	b29a      	uxth	r2, r3
 8007024:	89fb      	ldrh	r3, [r7, #14]
 8007026:	4313      	orrs	r3, r2
 8007028:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	89fa      	ldrh	r2, [r7, #14]
 8007030:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f042 0201 	orr.w	r2, r2, #1
 8007040:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2220      	movs	r2, #32
 8007046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	e000      	b.n	8007050 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800704e:	2302      	movs	r3, #2
  }
}
 8007050:	4618      	mov	r0, r3
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e0bf      	b.n	80071ee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d106      	bne.n	8007088 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7fc fcdc 	bl	8003a40 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	699a      	ldr	r2, [r3, #24]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800709e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6999      	ldr	r1, [r3, #24]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80070b4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6899      	ldr	r1, [r3, #8]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	4b4a      	ldr	r3, [pc, #296]	; (80071f8 <HAL_LTDC_Init+0x19c>)
 80070d0:	400b      	ands	r3, r1
 80070d2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	041b      	lsls	r3, r3, #16
 80070da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6899      	ldr	r1, [r3, #8]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	699a      	ldr	r2, [r3, #24]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	431a      	orrs	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68d9      	ldr	r1, [r3, #12]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	4b3e      	ldr	r3, [pc, #248]	; (80071f8 <HAL_LTDC_Init+0x19c>)
 80070fe:	400b      	ands	r3, r1
 8007100:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	041b      	lsls	r3, r3, #16
 8007108:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68d9      	ldr	r1, [r3, #12]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a1a      	ldr	r2, [r3, #32]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	430a      	orrs	r2, r1
 800711e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6919      	ldr	r1, [r3, #16]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	4b33      	ldr	r3, [pc, #204]	; (80071f8 <HAL_LTDC_Init+0x19c>)
 800712c:	400b      	ands	r3, r1
 800712e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	041b      	lsls	r3, r3, #16
 8007136:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6919      	ldr	r1, [r3, #16]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	431a      	orrs	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6959      	ldr	r1, [r3, #20]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	4b27      	ldr	r3, [pc, #156]	; (80071f8 <HAL_LTDC_Init+0x19c>)
 800715a:	400b      	ands	r3, r1
 800715c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007162:	041b      	lsls	r3, r3, #16
 8007164:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6959      	ldr	r1, [r3, #20]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	430a      	orrs	r2, r1
 800717a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007182:	021b      	lsls	r3, r3, #8
 8007184:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800718c:	041b      	lsls	r3, r3, #16
 800718e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800719e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80071b2:	431a      	orrs	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 0206 	orr.w	r2, r2, #6
 80071ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699a      	ldr	r2, [r3, #24]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f042 0201 	orr.w	r2, r2, #1
 80071da:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	f000f800 	.word	0xf000f800

080071fc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007212:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f003 0304 	and.w	r3, r3, #4
 800721a:	2b00      	cmp	r3, #0
 800721c:	d023      	beq.n	8007266 <HAL_LTDC_IRQHandler+0x6a>
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01e      	beq.n	8007266 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 0204 	bic.w	r2, r2, #4
 8007236:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2204      	movs	r2, #4
 800723e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007246:	f043 0201 	orr.w	r2, r3, #1
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2204      	movs	r2, #4
 8007254:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f86f 	bl	8007344 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d023      	beq.n	80072b8 <HAL_LTDC_IRQHandler+0xbc>
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d01e      	beq.n	80072b8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f022 0202 	bic.w	r2, r2, #2
 8007288:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2202      	movs	r2, #2
 8007290:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007298:	f043 0202 	orr.w	r2, r3, #2
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2204      	movs	r2, #4
 80072a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f846 	bl	8007344 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d01b      	beq.n	80072fa <HAL_LTDC_IRQHandler+0xfe>
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d016      	beq.n	80072fa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0201 	bic.w	r2, r2, #1
 80072da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2201      	movs	r2, #1
 80072e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f00f fccd 	bl	8016c94 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f003 0308 	and.w	r3, r3, #8
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01b      	beq.n	800733c <HAL_LTDC_IRQHandler+0x140>
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f003 0308 	and.w	r3, r3, #8
 800730a:	2b00      	cmp	r3, #0
 800730c:	d016      	beq.n	800733c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0208 	bic.w	r2, r2, #8
 800731c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2208      	movs	r2, #8
 8007324:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f80e 	bl	8007358 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800733c:	bf00      	nop
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800736c:	b5b0      	push	{r4, r5, r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800737e:	2b01      	cmp	r3, #1
 8007380:	d101      	bne.n	8007386 <HAL_LTDC_ConfigLayer+0x1a>
 8007382:	2302      	movs	r3, #2
 8007384:	e02c      	b.n	80073e0 <HAL_LTDC_ConfigLayer+0x74>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2202      	movs	r2, #2
 8007392:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2134      	movs	r1, #52	; 0x34
 800739c:	fb01 f303 	mul.w	r3, r1, r3
 80073a0:	4413      	add	r3, r2
 80073a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	4614      	mov	r4, r2
 80073aa:	461d      	mov	r5, r3
 80073ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	68b9      	ldr	r1, [r7, #8]
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f000 f849 	bl	8007458 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2201      	movs	r2, #1
 80073cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bdb0      	pop	{r4, r5, r7, pc}

080073e8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_LTDC_ProgramLineEvent+0x18>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e023      	b.n	8007448 <HAL_LTDC_ProgramLineEvent+0x60>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 0201 	bic.w	r2, r2, #1
 800741e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8007420:	4a0c      	ldr	r2, [pc, #48]	; (8007454 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f042 0201 	orr.w	r2, r2, #1
 8007434:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	40016800 	.word	0x40016800

08007458 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007458:	b480      	push	{r7}
 800745a:	b089      	sub	sp, #36	; 0x24
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	0c1b      	lsrs	r3, r3, #16
 8007470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007474:	4413      	add	r3, r2
 8007476:	041b      	lsls	r3, r3, #16
 8007478:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	01db      	lsls	r3, r3, #7
 8007484:	4413      	add	r3, r2
 8007486:	3384      	adds	r3, #132	; 0x84
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	6812      	ldr	r2, [r2, #0]
 800748e:	4611      	mov	r1, r2
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	01d2      	lsls	r2, r2, #7
 8007494:	440a      	add	r2, r1
 8007496:	3284      	adds	r2, #132	; 0x84
 8007498:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800749c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	0c1b      	lsrs	r3, r3, #16
 80074aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074ae:	4413      	add	r3, r2
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4619      	mov	r1, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	01db      	lsls	r3, r3, #7
 80074bc:	440b      	add	r3, r1
 80074be:	3384      	adds	r3, #132	; 0x84
 80074c0:	4619      	mov	r1, r3
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074d6:	4413      	add	r3, r2
 80074d8:	041b      	lsls	r3, r3, #16
 80074da:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	461a      	mov	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	01db      	lsls	r3, r3, #7
 80074e6:	4413      	add	r3, r2
 80074e8:	3384      	adds	r3, #132	; 0x84
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	6812      	ldr	r2, [r2, #0]
 80074f0:	4611      	mov	r1, r2
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	01d2      	lsls	r2, r2, #7
 80074f6:	440a      	add	r2, r1
 80074f8:	3284      	adds	r2, #132	; 0x84
 80074fa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80074fe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800750e:	4413      	add	r3, r2
 8007510:	1c5a      	adds	r2, r3, #1
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4619      	mov	r1, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	01db      	lsls	r3, r3, #7
 800751c:	440b      	add	r3, r1
 800751e:	3384      	adds	r3, #132	; 0x84
 8007520:	4619      	mov	r1, r3
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	4313      	orrs	r3, r2
 8007526:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	01db      	lsls	r3, r3, #7
 8007532:	4413      	add	r3, r2
 8007534:	3384      	adds	r3, #132	; 0x84
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	6812      	ldr	r2, [r2, #0]
 800753c:	4611      	mov	r1, r2
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	01d2      	lsls	r2, r2, #7
 8007542:	440a      	add	r2, r1
 8007544:	3284      	adds	r2, #132	; 0x84
 8007546:	f023 0307 	bic.w	r3, r3, #7
 800754a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	01db      	lsls	r3, r3, #7
 8007556:	4413      	add	r3, r2
 8007558:	3384      	adds	r3, #132	; 0x84
 800755a:	461a      	mov	r2, r3
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007568:	021b      	lsls	r3, r3, #8
 800756a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007572:	041b      	lsls	r3, r3, #16
 8007574:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	061b      	lsls	r3, r3, #24
 800757c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	01db      	lsls	r3, r3, #7
 8007588:	4413      	add	r3, r2
 800758a:	3384      	adds	r3, #132	; 0x84
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	01db      	lsls	r3, r3, #7
 8007598:	4413      	add	r3, r2
 800759a:	3384      	adds	r3, #132	; 0x84
 800759c:	461a      	mov	r2, r3
 800759e:	2300      	movs	r3, #0
 80075a0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075a8:	461a      	mov	r2, r3
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	431a      	orrs	r2, r3
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	431a      	orrs	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4619      	mov	r1, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	01db      	lsls	r3, r3, #7
 80075bc:	440b      	add	r3, r1
 80075be:	3384      	adds	r3, #132	; 0x84
 80075c0:	4619      	mov	r1, r3
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	01db      	lsls	r3, r3, #7
 80075d2:	4413      	add	r3, r2
 80075d4:	3384      	adds	r3, #132	; 0x84
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	6812      	ldr	r2, [r2, #0]
 80075dc:	4611      	mov	r1, r2
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	01d2      	lsls	r2, r2, #7
 80075e2:	440a      	add	r2, r1
 80075e4:	3284      	adds	r2, #132	; 0x84
 80075e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075ea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	461a      	mov	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	01db      	lsls	r3, r3, #7
 80075f6:	4413      	add	r3, r2
 80075f8:	3384      	adds	r3, #132	; 0x84
 80075fa:	461a      	mov	r2, r3
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	01db      	lsls	r3, r3, #7
 800760c:	4413      	add	r3, r2
 800760e:	3384      	adds	r3, #132	; 0x84
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	6812      	ldr	r2, [r2, #0]
 8007616:	4611      	mov	r1, r2
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	01d2      	lsls	r2, r2, #7
 800761c:	440a      	add	r2, r1
 800761e:	3284      	adds	r2, #132	; 0x84
 8007620:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007624:	f023 0307 	bic.w	r3, r3, #7
 8007628:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	69da      	ldr	r2, [r3, #28]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	68f9      	ldr	r1, [r7, #12]
 8007634:	6809      	ldr	r1, [r1, #0]
 8007636:	4608      	mov	r0, r1
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	01c9      	lsls	r1, r1, #7
 800763c:	4401      	add	r1, r0
 800763e:	3184      	adds	r1, #132	; 0x84
 8007640:	4313      	orrs	r3, r2
 8007642:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	461a      	mov	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	01db      	lsls	r3, r3, #7
 800764e:	4413      	add	r3, r2
 8007650:	3384      	adds	r3, #132	; 0x84
 8007652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	461a      	mov	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	01db      	lsls	r3, r3, #7
 800765e:	4413      	add	r3, r2
 8007660:	3384      	adds	r3, #132	; 0x84
 8007662:	461a      	mov	r2, r3
 8007664:	2300      	movs	r3, #0
 8007666:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	01db      	lsls	r3, r3, #7
 8007672:	4413      	add	r3, r2
 8007674:	3384      	adds	r3, #132	; 0x84
 8007676:	461a      	mov	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d102      	bne.n	800768c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007686:	2304      	movs	r3, #4
 8007688:	61fb      	str	r3, [r7, #28]
 800768a:	e01b      	b.n	80076c4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d102      	bne.n	800769a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007694:	2303      	movs	r3, #3
 8007696:	61fb      	str	r3, [r7, #28]
 8007698:	e014      	b.n	80076c4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	2b04      	cmp	r3, #4
 80076a0:	d00b      	beq.n	80076ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d007      	beq.n	80076ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d003      	beq.n	80076ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80076b6:	2b07      	cmp	r3, #7
 80076b8:	d102      	bne.n	80076c0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80076ba:	2302      	movs	r3, #2
 80076bc:	61fb      	str	r3, [r7, #28]
 80076be:	e001      	b.n	80076c4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80076c0:	2301      	movs	r3, #1
 80076c2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	461a      	mov	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	01db      	lsls	r3, r3, #7
 80076ce:	4413      	add	r3, r2
 80076d0:	3384      	adds	r3, #132	; 0x84
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	6812      	ldr	r2, [r2, #0]
 80076d8:	4611      	mov	r1, r2
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	01d2      	lsls	r2, r2, #7
 80076de:	440a      	add	r2, r1
 80076e0:	3284      	adds	r2, #132	; 0x84
 80076e2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80076e6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	fb02 f303 	mul.w	r3, r2, r3
 80076f2:	041a      	lsls	r2, r3, #16
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	6859      	ldr	r1, [r3, #4]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	1acb      	subs	r3, r1, r3
 80076fe:	69f9      	ldr	r1, [r7, #28]
 8007700:	fb01 f303 	mul.w	r3, r1, r3
 8007704:	3303      	adds	r3, #3
 8007706:	68f9      	ldr	r1, [r7, #12]
 8007708:	6809      	ldr	r1, [r1, #0]
 800770a:	4608      	mov	r0, r1
 800770c:	6879      	ldr	r1, [r7, #4]
 800770e:	01c9      	lsls	r1, r1, #7
 8007710:	4401      	add	r1, r0
 8007712:	3184      	adds	r1, #132	; 0x84
 8007714:	4313      	orrs	r3, r2
 8007716:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	01db      	lsls	r3, r3, #7
 8007722:	4413      	add	r3, r2
 8007724:	3384      	adds	r3, #132	; 0x84
 8007726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	6812      	ldr	r2, [r2, #0]
 800772c:	4611      	mov	r1, r2
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	01d2      	lsls	r2, r2, #7
 8007732:	440a      	add	r2, r1
 8007734:	3284      	adds	r2, #132	; 0x84
 8007736:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800773a:	f023 0307 	bic.w	r3, r3, #7
 800773e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	461a      	mov	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	01db      	lsls	r3, r3, #7
 800774a:	4413      	add	r3, r2
 800774c:	3384      	adds	r3, #132	; 0x84
 800774e:	461a      	mov	r2, r3
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	01db      	lsls	r3, r3, #7
 8007760:	4413      	add	r3, r2
 8007762:	3384      	adds	r3, #132	; 0x84
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	6812      	ldr	r2, [r2, #0]
 800776a:	4611      	mov	r1, r2
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	01d2      	lsls	r2, r2, #7
 8007770:	440a      	add	r2, r1
 8007772:	3284      	adds	r2, #132	; 0x84
 8007774:	f043 0301 	orr.w	r3, r3, #1
 8007778:	6013      	str	r3, [r2, #0]
}
 800777a:	bf00      	nop
 800777c:	3724      	adds	r7, #36	; 0x24
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
	...

08007788 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007792:	2300      	movs	r3, #0
 8007794:	603b      	str	r3, [r7, #0]
 8007796:	4b20      	ldr	r3, [pc, #128]	; (8007818 <HAL_PWREx_EnableOverDrive+0x90>)
 8007798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779a:	4a1f      	ldr	r2, [pc, #124]	; (8007818 <HAL_PWREx_EnableOverDrive+0x90>)
 800779c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077a0:	6413      	str	r3, [r2, #64]	; 0x40
 80077a2:	4b1d      	ldr	r3, [pc, #116]	; (8007818 <HAL_PWREx_EnableOverDrive+0x90>)
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077aa:	603b      	str	r3, [r7, #0]
 80077ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80077ae:	4b1b      	ldr	r3, [pc, #108]	; (800781c <HAL_PWREx_EnableOverDrive+0x94>)
 80077b0:	2201      	movs	r2, #1
 80077b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077b4:	f7fc fe48 	bl	8004448 <HAL_GetTick>
 80077b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80077ba:	e009      	b.n	80077d0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80077bc:	f7fc fe44 	bl	8004448 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077ca:	d901      	bls.n	80077d0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e01f      	b.n	8007810 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80077d0:	4b13      	ldr	r3, [pc, #76]	; (8007820 <HAL_PWREx_EnableOverDrive+0x98>)
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077dc:	d1ee      	bne.n	80077bc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80077de:	4b11      	ldr	r3, [pc, #68]	; (8007824 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077e0:	2201      	movs	r2, #1
 80077e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077e4:	f7fc fe30 	bl	8004448 <HAL_GetTick>
 80077e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80077ea:	e009      	b.n	8007800 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80077ec:	f7fc fe2c 	bl	8004448 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077fa:	d901      	bls.n	8007800 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e007      	b.n	8007810 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007800:	4b07      	ldr	r3, [pc, #28]	; (8007820 <HAL_PWREx_EnableOverDrive+0x98>)
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007808:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800780c:	d1ee      	bne.n	80077ec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	40023800 	.word	0x40023800
 800781c:	420e0040 	.word	0x420e0040
 8007820:	40007000 	.word	0x40007000
 8007824:	420e0044 	.word	0x420e0044

08007828 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e264      	b.n	8007d04 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d075      	beq.n	8007932 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007846:	4ba3      	ldr	r3, [pc, #652]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 030c 	and.w	r3, r3, #12
 800784e:	2b04      	cmp	r3, #4
 8007850:	d00c      	beq.n	800786c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007852:	4ba0      	ldr	r3, [pc, #640]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800785a:	2b08      	cmp	r3, #8
 800785c:	d112      	bne.n	8007884 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800785e:	4b9d      	ldr	r3, [pc, #628]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800786a:	d10b      	bne.n	8007884 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800786c:	4b99      	ldr	r3, [pc, #612]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d05b      	beq.n	8007930 <HAL_RCC_OscConfig+0x108>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d157      	bne.n	8007930 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e23f      	b.n	8007d04 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800788c:	d106      	bne.n	800789c <HAL_RCC_OscConfig+0x74>
 800788e:	4b91      	ldr	r3, [pc, #580]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a90      	ldr	r2, [pc, #576]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	e01d      	b.n	80078d8 <HAL_RCC_OscConfig+0xb0>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078a4:	d10c      	bne.n	80078c0 <HAL_RCC_OscConfig+0x98>
 80078a6:	4b8b      	ldr	r3, [pc, #556]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a8a      	ldr	r2, [pc, #552]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	4b88      	ldr	r3, [pc, #544]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a87      	ldr	r2, [pc, #540]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	e00b      	b.n	80078d8 <HAL_RCC_OscConfig+0xb0>
 80078c0:	4b84      	ldr	r3, [pc, #528]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a83      	ldr	r2, [pc, #524]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	4b81      	ldr	r3, [pc, #516]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a80      	ldr	r2, [pc, #512]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d013      	beq.n	8007908 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078e0:	f7fc fdb2 	bl	8004448 <HAL_GetTick>
 80078e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078e6:	e008      	b.n	80078fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078e8:	f7fc fdae 	bl	8004448 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	2b64      	cmp	r3, #100	; 0x64
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e204      	b.n	8007d04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078fa:	4b76      	ldr	r3, [pc, #472]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0f0      	beq.n	80078e8 <HAL_RCC_OscConfig+0xc0>
 8007906:	e014      	b.n	8007932 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007908:	f7fc fd9e 	bl	8004448 <HAL_GetTick>
 800790c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800790e:	e008      	b.n	8007922 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007910:	f7fc fd9a 	bl	8004448 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b64      	cmp	r3, #100	; 0x64
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e1f0      	b.n	8007d04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007922:	4b6c      	ldr	r3, [pc, #432]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f0      	bne.n	8007910 <HAL_RCC_OscConfig+0xe8>
 800792e:	e000      	b.n	8007932 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d063      	beq.n	8007a06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800793e:	4b65      	ldr	r3, [pc, #404]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f003 030c 	and.w	r3, r3, #12
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00b      	beq.n	8007962 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800794a:	4b62      	ldr	r3, [pc, #392]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007952:	2b08      	cmp	r3, #8
 8007954:	d11c      	bne.n	8007990 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007956:	4b5f      	ldr	r3, [pc, #380]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d116      	bne.n	8007990 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007962:	4b5c      	ldr	r3, [pc, #368]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d005      	beq.n	800797a <HAL_RCC_OscConfig+0x152>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d001      	beq.n	800797a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e1c4      	b.n	8007d04 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800797a:	4b56      	ldr	r3, [pc, #344]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	4952      	ldr	r1, [pc, #328]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 800798a:	4313      	orrs	r3, r2
 800798c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800798e:	e03a      	b.n	8007a06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d020      	beq.n	80079da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007998:	4b4f      	ldr	r3, [pc, #316]	; (8007ad8 <HAL_RCC_OscConfig+0x2b0>)
 800799a:	2201      	movs	r2, #1
 800799c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799e:	f7fc fd53 	bl	8004448 <HAL_GetTick>
 80079a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079a4:	e008      	b.n	80079b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079a6:	f7fc fd4f 	bl	8004448 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d901      	bls.n	80079b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e1a5      	b.n	8007d04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079b8:	4b46      	ldr	r3, [pc, #280]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d0f0      	beq.n	80079a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079c4:	4b43      	ldr	r3, [pc, #268]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	00db      	lsls	r3, r3, #3
 80079d2:	4940      	ldr	r1, [pc, #256]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	600b      	str	r3, [r1, #0]
 80079d8:	e015      	b.n	8007a06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079da:	4b3f      	ldr	r3, [pc, #252]	; (8007ad8 <HAL_RCC_OscConfig+0x2b0>)
 80079dc:	2200      	movs	r2, #0
 80079de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e0:	f7fc fd32 	bl	8004448 <HAL_GetTick>
 80079e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079e6:	e008      	b.n	80079fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079e8:	f7fc fd2e 	bl	8004448 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d901      	bls.n	80079fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e184      	b.n	8007d04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079fa:	4b36      	ldr	r3, [pc, #216]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1f0      	bne.n	80079e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0308 	and.w	r3, r3, #8
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d030      	beq.n	8007a74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d016      	beq.n	8007a48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a1a:	4b30      	ldr	r3, [pc, #192]	; (8007adc <HAL_RCC_OscConfig+0x2b4>)
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a20:	f7fc fd12 	bl	8004448 <HAL_GetTick>
 8007a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a26:	e008      	b.n	8007a3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a28:	f7fc fd0e 	bl	8004448 <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d901      	bls.n	8007a3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e164      	b.n	8007d04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a3a:	4b26      	ldr	r3, [pc, #152]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0f0      	beq.n	8007a28 <HAL_RCC_OscConfig+0x200>
 8007a46:	e015      	b.n	8007a74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a48:	4b24      	ldr	r3, [pc, #144]	; (8007adc <HAL_RCC_OscConfig+0x2b4>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a4e:	f7fc fcfb 	bl	8004448 <HAL_GetTick>
 8007a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a54:	e008      	b.n	8007a68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a56:	f7fc fcf7 	bl	8004448 <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d901      	bls.n	8007a68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e14d      	b.n	8007d04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a68:	4b1a      	ldr	r3, [pc, #104]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1f0      	bne.n	8007a56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80a0 	beq.w	8007bc2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a82:	2300      	movs	r3, #0
 8007a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a86:	4b13      	ldr	r3, [pc, #76]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10f      	bne.n	8007ab2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a92:	2300      	movs	r3, #0
 8007a94:	60bb      	str	r3, [r7, #8]
 8007a96:	4b0f      	ldr	r3, [pc, #60]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	4a0e      	ldr	r2, [pc, #56]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8007aa2:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <HAL_RCC_OscConfig+0x2ac>)
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aaa:	60bb      	str	r3, [r7, #8]
 8007aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ab2:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <HAL_RCC_OscConfig+0x2b8>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d121      	bne.n	8007b02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007abe:	4b08      	ldr	r3, [pc, #32]	; (8007ae0 <HAL_RCC_OscConfig+0x2b8>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a07      	ldr	r2, [pc, #28]	; (8007ae0 <HAL_RCC_OscConfig+0x2b8>)
 8007ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007aca:	f7fc fcbd 	bl	8004448 <HAL_GetTick>
 8007ace:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ad0:	e011      	b.n	8007af6 <HAL_RCC_OscConfig+0x2ce>
 8007ad2:	bf00      	nop
 8007ad4:	40023800 	.word	0x40023800
 8007ad8:	42470000 	.word	0x42470000
 8007adc:	42470e80 	.word	0x42470e80
 8007ae0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ae4:	f7fc fcb0 	bl	8004448 <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d901      	bls.n	8007af6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e106      	b.n	8007d04 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007af6:	4b85      	ldr	r3, [pc, #532]	; (8007d0c <HAL_RCC_OscConfig+0x4e4>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0f0      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d106      	bne.n	8007b18 <HAL_RCC_OscConfig+0x2f0>
 8007b0a:	4b81      	ldr	r3, [pc, #516]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b0e:	4a80      	ldr	r2, [pc, #512]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007b10:	f043 0301 	orr.w	r3, r3, #1
 8007b14:	6713      	str	r3, [r2, #112]	; 0x70
 8007b16:	e01c      	b.n	8007b52 <HAL_RCC_OscConfig+0x32a>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	2b05      	cmp	r3, #5
 8007b1e:	d10c      	bne.n	8007b3a <HAL_RCC_OscConfig+0x312>
 8007b20:	4b7b      	ldr	r3, [pc, #492]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b24:	4a7a      	ldr	r2, [pc, #488]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007b26:	f043 0304 	orr.w	r3, r3, #4
 8007b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b2c:	4b78      	ldr	r3, [pc, #480]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b30:	4a77      	ldr	r2, [pc, #476]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007b32:	f043 0301 	orr.w	r3, r3, #1
 8007b36:	6713      	str	r3, [r2, #112]	; 0x70
 8007b38:	e00b      	b.n	8007b52 <HAL_RCC_OscConfig+0x32a>
 8007b3a:	4b75      	ldr	r3, [pc, #468]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3e:	4a74      	ldr	r2, [pc, #464]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007b40:	f023 0301 	bic.w	r3, r3, #1
 8007b44:	6713      	str	r3, [r2, #112]	; 0x70
 8007b46:	4b72      	ldr	r3, [pc, #456]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4a:	4a71      	ldr	r2, [pc, #452]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007b4c:	f023 0304 	bic.w	r3, r3, #4
 8007b50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d015      	beq.n	8007b86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b5a:	f7fc fc75 	bl	8004448 <HAL_GetTick>
 8007b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b60:	e00a      	b.n	8007b78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b62:	f7fc fc71 	bl	8004448 <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d901      	bls.n	8007b78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e0c5      	b.n	8007d04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b78:	4b65      	ldr	r3, [pc, #404]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0ee      	beq.n	8007b62 <HAL_RCC_OscConfig+0x33a>
 8007b84:	e014      	b.n	8007bb0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b86:	f7fc fc5f 	bl	8004448 <HAL_GetTick>
 8007b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b8c:	e00a      	b.n	8007ba4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b8e:	f7fc fc5b 	bl	8004448 <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e0af      	b.n	8007d04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ba4:	4b5a      	ldr	r3, [pc, #360]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1ee      	bne.n	8007b8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d105      	bne.n	8007bc2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bb6:	4b56      	ldr	r3, [pc, #344]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	4a55      	ldr	r2, [pc, #340]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 809b 	beq.w	8007d02 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bcc:	4b50      	ldr	r3, [pc, #320]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f003 030c 	and.w	r3, r3, #12
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d05c      	beq.n	8007c92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d141      	bne.n	8007c64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007be0:	4b4c      	ldr	r3, [pc, #304]	; (8007d14 <HAL_RCC_OscConfig+0x4ec>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007be6:	f7fc fc2f 	bl	8004448 <HAL_GetTick>
 8007bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bec:	e008      	b.n	8007c00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bee:	f7fc fc2b 	bl	8004448 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d901      	bls.n	8007c00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e081      	b.n	8007d04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c00:	4b43      	ldr	r3, [pc, #268]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1f0      	bne.n	8007bee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	69da      	ldr	r2, [r3, #28]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	431a      	orrs	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	019b      	lsls	r3, r3, #6
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c22:	085b      	lsrs	r3, r3, #1
 8007c24:	3b01      	subs	r3, #1
 8007c26:	041b      	lsls	r3, r3, #16
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2e:	061b      	lsls	r3, r3, #24
 8007c30:	4937      	ldr	r1, [pc, #220]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c36:	4b37      	ldr	r3, [pc, #220]	; (8007d14 <HAL_RCC_OscConfig+0x4ec>)
 8007c38:	2201      	movs	r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c3c:	f7fc fc04 	bl	8004448 <HAL_GetTick>
 8007c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c42:	e008      	b.n	8007c56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c44:	f7fc fc00 	bl	8004448 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d901      	bls.n	8007c56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e056      	b.n	8007d04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c56:	4b2e      	ldr	r3, [pc, #184]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0f0      	beq.n	8007c44 <HAL_RCC_OscConfig+0x41c>
 8007c62:	e04e      	b.n	8007d02 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c64:	4b2b      	ldr	r3, [pc, #172]	; (8007d14 <HAL_RCC_OscConfig+0x4ec>)
 8007c66:	2200      	movs	r2, #0
 8007c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c6a:	f7fc fbed 	bl	8004448 <HAL_GetTick>
 8007c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c70:	e008      	b.n	8007c84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c72:	f7fc fbe9 	bl	8004448 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d901      	bls.n	8007c84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e03f      	b.n	8007d04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c84:	4b22      	ldr	r3, [pc, #136]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1f0      	bne.n	8007c72 <HAL_RCC_OscConfig+0x44a>
 8007c90:	e037      	b.n	8007d02 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d101      	bne.n	8007c9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e032      	b.n	8007d04 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c9e:	4b1c      	ldr	r3, [pc, #112]	; (8007d10 <HAL_RCC_OscConfig+0x4e8>)
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d028      	beq.n	8007cfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d121      	bne.n	8007cfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d11a      	bne.n	8007cfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007cce:	4013      	ands	r3, r2
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007cd4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d111      	bne.n	8007cfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce4:	085b      	lsrs	r3, r3, #1
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d107      	bne.n	8007cfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d001      	beq.n	8007d02 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e000      	b.n	8007d04 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3718      	adds	r7, #24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	40007000 	.word	0x40007000
 8007d10:	40023800 	.word	0x40023800
 8007d14:	42470060 	.word	0x42470060

08007d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e0cc      	b.n	8007ec6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d2c:	4b68      	ldr	r3, [pc, #416]	; (8007ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 030f 	and.w	r3, r3, #15
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d90c      	bls.n	8007d54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d3a:	4b65      	ldr	r3, [pc, #404]	; (8007ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	b2d2      	uxtb	r2, r2
 8007d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d42:	4b63      	ldr	r3, [pc, #396]	; (8007ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 030f 	and.w	r3, r3, #15
 8007d4a:	683a      	ldr	r2, [r7, #0]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d001      	beq.n	8007d54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e0b8      	b.n	8007ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0302 	and.w	r3, r3, #2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d020      	beq.n	8007da2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0304 	and.w	r3, r3, #4
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d005      	beq.n	8007d78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d6c:	4b59      	ldr	r3, [pc, #356]	; (8007ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	4a58      	ldr	r2, [pc, #352]	; (8007ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0308 	and.w	r3, r3, #8
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d005      	beq.n	8007d90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d84:	4b53      	ldr	r3, [pc, #332]	; (8007ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	4a52      	ldr	r2, [pc, #328]	; (8007ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d90:	4b50      	ldr	r3, [pc, #320]	; (8007ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	494d      	ldr	r1, [pc, #308]	; (8007ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d044      	beq.n	8007e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d107      	bne.n	8007dc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007db6:	4b47      	ldr	r3, [pc, #284]	; (8007ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d119      	bne.n	8007df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e07f      	b.n	8007ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d003      	beq.n	8007dd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d107      	bne.n	8007de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dd6:	4b3f      	ldr	r3, [pc, #252]	; (8007ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d109      	bne.n	8007df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e06f      	b.n	8007ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007de6:	4b3b      	ldr	r3, [pc, #236]	; (8007ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0302 	and.w	r3, r3, #2
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e067      	b.n	8007ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007df6:	4b37      	ldr	r3, [pc, #220]	; (8007ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f023 0203 	bic.w	r2, r3, #3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	4934      	ldr	r1, [pc, #208]	; (8007ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e08:	f7fc fb1e 	bl	8004448 <HAL_GetTick>
 8007e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e0e:	e00a      	b.n	8007e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e10:	f7fc fb1a 	bl	8004448 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d901      	bls.n	8007e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e04f      	b.n	8007ec6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e26:	4b2b      	ldr	r3, [pc, #172]	; (8007ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f003 020c 	and.w	r2, r3, #12
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d1eb      	bne.n	8007e10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e38:	4b25      	ldr	r3, [pc, #148]	; (8007ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 030f 	and.w	r3, r3, #15
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d20c      	bcs.n	8007e60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e46:	4b22      	ldr	r3, [pc, #136]	; (8007ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	b2d2      	uxtb	r2, r2
 8007e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e4e:	4b20      	ldr	r3, [pc, #128]	; (8007ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 030f 	and.w	r3, r3, #15
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d001      	beq.n	8007e60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e032      	b.n	8007ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0304 	and.w	r3, r3, #4
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d008      	beq.n	8007e7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e6c:	4b19      	ldr	r3, [pc, #100]	; (8007ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	4916      	ldr	r1, [pc, #88]	; (8007ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0308 	and.w	r3, r3, #8
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d009      	beq.n	8007e9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e8a:	4b12      	ldr	r3, [pc, #72]	; (8007ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	490e      	ldr	r1, [pc, #56]	; (8007ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e9e:	f000 f82d 	bl	8007efc <HAL_RCC_GetSysClockFreq>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	091b      	lsrs	r3, r3, #4
 8007eaa:	f003 030f 	and.w	r3, r3, #15
 8007eae:	490a      	ldr	r1, [pc, #40]	; (8007ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8007eb0:	5ccb      	ldrb	r3, [r1, r3]
 8007eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb6:	4a09      	ldr	r2, [pc, #36]	; (8007edc <HAL_RCC_ClockConfig+0x1c4>)
 8007eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007eba:	4b09      	ldr	r3, [pc, #36]	; (8007ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fc f8d0 	bl	8004064 <HAL_InitTick>

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	40023c00 	.word	0x40023c00
 8007ed4:	40023800 	.word	0x40023800
 8007ed8:	0802fdf4 	.word	0x0802fdf4
 8007edc:	20000008 	.word	0x20000008
 8007ee0:	2000000c 	.word	0x2000000c

08007ee4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007ee8:	4b03      	ldr	r3, [pc, #12]	; (8007ef8 <HAL_RCC_EnableCSS+0x14>)
 8007eea:	2201      	movs	r2, #1
 8007eec:	601a      	str	r2, [r3, #0]
}
 8007eee:	bf00      	nop
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	4247004c 	.word	0x4247004c

08007efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007efc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	607b      	str	r3, [r7, #4]
 8007f08:	2300      	movs	r3, #0
 8007f0a:	60fb      	str	r3, [r7, #12]
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f14:	4b67      	ldr	r3, [pc, #412]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f003 030c 	and.w	r3, r3, #12
 8007f1c:	2b08      	cmp	r3, #8
 8007f1e:	d00d      	beq.n	8007f3c <HAL_RCC_GetSysClockFreq+0x40>
 8007f20:	2b08      	cmp	r3, #8
 8007f22:	f200 80bd 	bhi.w	80080a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <HAL_RCC_GetSysClockFreq+0x34>
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	d003      	beq.n	8007f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8007f2e:	e0b7      	b.n	80080a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f30:	4b61      	ldr	r3, [pc, #388]	; (80080b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007f32:	60bb      	str	r3, [r7, #8]
       break;
 8007f34:	e0b7      	b.n	80080a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f36:	4b61      	ldr	r3, [pc, #388]	; (80080bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007f38:	60bb      	str	r3, [r7, #8]
      break;
 8007f3a:	e0b4      	b.n	80080a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f3c:	4b5d      	ldr	r3, [pc, #372]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f46:	4b5b      	ldr	r3, [pc, #364]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d04d      	beq.n	8007fee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f52:	4b58      	ldr	r3, [pc, #352]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	099b      	lsrs	r3, r3, #6
 8007f58:	461a      	mov	r2, r3
 8007f5a:	f04f 0300 	mov.w	r3, #0
 8007f5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f62:	f04f 0100 	mov.w	r1, #0
 8007f66:	ea02 0800 	and.w	r8, r2, r0
 8007f6a:	ea03 0901 	and.w	r9, r3, r1
 8007f6e:	4640      	mov	r0, r8
 8007f70:	4649      	mov	r1, r9
 8007f72:	f04f 0200 	mov.w	r2, #0
 8007f76:	f04f 0300 	mov.w	r3, #0
 8007f7a:	014b      	lsls	r3, r1, #5
 8007f7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007f80:	0142      	lsls	r2, r0, #5
 8007f82:	4610      	mov	r0, r2
 8007f84:	4619      	mov	r1, r3
 8007f86:	ebb0 0008 	subs.w	r0, r0, r8
 8007f8a:	eb61 0109 	sbc.w	r1, r1, r9
 8007f8e:	f04f 0200 	mov.w	r2, #0
 8007f92:	f04f 0300 	mov.w	r3, #0
 8007f96:	018b      	lsls	r3, r1, #6
 8007f98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007f9c:	0182      	lsls	r2, r0, #6
 8007f9e:	1a12      	subs	r2, r2, r0
 8007fa0:	eb63 0301 	sbc.w	r3, r3, r1
 8007fa4:	f04f 0000 	mov.w	r0, #0
 8007fa8:	f04f 0100 	mov.w	r1, #0
 8007fac:	00d9      	lsls	r1, r3, #3
 8007fae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fb2:	00d0      	lsls	r0, r2, #3
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	eb12 0208 	adds.w	r2, r2, r8
 8007fbc:	eb43 0309 	adc.w	r3, r3, r9
 8007fc0:	f04f 0000 	mov.w	r0, #0
 8007fc4:	f04f 0100 	mov.w	r1, #0
 8007fc8:	0259      	lsls	r1, r3, #9
 8007fca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007fce:	0250      	lsls	r0, r2, #9
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	f7f8 fd4c 	bl	8000a7c <__aeabi_uldivmod>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4613      	mov	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	e04a      	b.n	8008084 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fee:	4b31      	ldr	r3, [pc, #196]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	099b      	lsrs	r3, r3, #6
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	f04f 0300 	mov.w	r3, #0
 8007ffa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007ffe:	f04f 0100 	mov.w	r1, #0
 8008002:	ea02 0400 	and.w	r4, r2, r0
 8008006:	ea03 0501 	and.w	r5, r3, r1
 800800a:	4620      	mov	r0, r4
 800800c:	4629      	mov	r1, r5
 800800e:	f04f 0200 	mov.w	r2, #0
 8008012:	f04f 0300 	mov.w	r3, #0
 8008016:	014b      	lsls	r3, r1, #5
 8008018:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800801c:	0142      	lsls	r2, r0, #5
 800801e:	4610      	mov	r0, r2
 8008020:	4619      	mov	r1, r3
 8008022:	1b00      	subs	r0, r0, r4
 8008024:	eb61 0105 	sbc.w	r1, r1, r5
 8008028:	f04f 0200 	mov.w	r2, #0
 800802c:	f04f 0300 	mov.w	r3, #0
 8008030:	018b      	lsls	r3, r1, #6
 8008032:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008036:	0182      	lsls	r2, r0, #6
 8008038:	1a12      	subs	r2, r2, r0
 800803a:	eb63 0301 	sbc.w	r3, r3, r1
 800803e:	f04f 0000 	mov.w	r0, #0
 8008042:	f04f 0100 	mov.w	r1, #0
 8008046:	00d9      	lsls	r1, r3, #3
 8008048:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800804c:	00d0      	lsls	r0, r2, #3
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	1912      	adds	r2, r2, r4
 8008054:	eb45 0303 	adc.w	r3, r5, r3
 8008058:	f04f 0000 	mov.w	r0, #0
 800805c:	f04f 0100 	mov.w	r1, #0
 8008060:	0299      	lsls	r1, r3, #10
 8008062:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008066:	0290      	lsls	r0, r2, #10
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	4610      	mov	r0, r2
 800806e:	4619      	mov	r1, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	461a      	mov	r2, r3
 8008074:	f04f 0300 	mov.w	r3, #0
 8008078:	f7f8 fd00 	bl	8000a7c <__aeabi_uldivmod>
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	4613      	mov	r3, r2
 8008082:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008084:	4b0b      	ldr	r3, [pc, #44]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	0c1b      	lsrs	r3, r3, #16
 800808a:	f003 0303 	and.w	r3, r3, #3
 800808e:	3301      	adds	r3, #1
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	fbb2 f3f3 	udiv	r3, r2, r3
 800809c:	60bb      	str	r3, [r7, #8]
      break;
 800809e:	e002      	b.n	80080a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080a0:	4b05      	ldr	r3, [pc, #20]	; (80080b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80080a2:	60bb      	str	r3, [r7, #8]
      break;
 80080a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080a6:	68bb      	ldr	r3, [r7, #8]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80080b2:	bf00      	nop
 80080b4:	40023800 	.word	0x40023800
 80080b8:	00f42400 	.word	0x00f42400
 80080bc:	007a1200 	.word	0x007a1200

080080c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080c0:	b480      	push	{r7}
 80080c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080c4:	4b03      	ldr	r3, [pc, #12]	; (80080d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80080c6:	681b      	ldr	r3, [r3, #0]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	20000008 	.word	0x20000008

080080d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80080dc:	f7ff fff0 	bl	80080c0 <HAL_RCC_GetHCLKFreq>
 80080e0:	4602      	mov	r2, r0
 80080e2:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	0a9b      	lsrs	r3, r3, #10
 80080e8:	f003 0307 	and.w	r3, r3, #7
 80080ec:	4903      	ldr	r1, [pc, #12]	; (80080fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80080ee:	5ccb      	ldrb	r3, [r1, r3]
 80080f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	40023800 	.word	0x40023800
 80080fc:	0802fe04 	.word	0x0802fe04

08008100 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	220f      	movs	r2, #15
 800810e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008110:	4b12      	ldr	r3, [pc, #72]	; (800815c <HAL_RCC_GetClockConfig+0x5c>)
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f003 0203 	and.w	r2, r3, #3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800811c:	4b0f      	ldr	r3, [pc, #60]	; (800815c <HAL_RCC_GetClockConfig+0x5c>)
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008128:	4b0c      	ldr	r3, [pc, #48]	; (800815c <HAL_RCC_GetClockConfig+0x5c>)
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008134:	4b09      	ldr	r3, [pc, #36]	; (800815c <HAL_RCC_GetClockConfig+0x5c>)
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	08db      	lsrs	r3, r3, #3
 800813a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008142:	4b07      	ldr	r3, [pc, #28]	; (8008160 <HAL_RCC_GetClockConfig+0x60>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 020f 	and.w	r2, r3, #15
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	601a      	str	r2, [r3, #0]
}
 800814e:	bf00      	nop
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	40023800 	.word	0x40023800
 8008160:	40023c00 	.word	0x40023c00

08008164 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008168:	4b06      	ldr	r3, [pc, #24]	; (8008184 <HAL_RCC_NMI_IRQHandler+0x20>)
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008170:	2b80      	cmp	r3, #128	; 0x80
 8008172:	d104      	bne.n	800817e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008174:	f000 f80a 	bl	800818c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008178:	4b03      	ldr	r3, [pc, #12]	; (8008188 <HAL_RCC_NMI_IRQHandler+0x24>)
 800817a:	2280      	movs	r2, #128	; 0x80
 800817c:	701a      	strb	r2, [r3, #0]
  }
}
 800817e:	bf00      	nop
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	40023800 	.word	0x40023800
 8008188:	4002380e 	.word	0x4002380e

0800818c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008190:	bf00      	nop
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
	...

0800819c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10b      	bne.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d105      	bne.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d075      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80081d0:	4bad      	ldr	r3, [pc, #692]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80081d6:	f7fc f937 	bl	8004448 <HAL_GetTick>
 80081da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081dc:	e008      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80081de:	f7fc f933 	bl	8004448 <HAL_GetTick>
 80081e2:	4602      	mov	r2, r0
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d901      	bls.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e18b      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081f0:	4ba6      	ldr	r3, [pc, #664]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1f0      	bne.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d009      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	019a      	lsls	r2, r3, #6
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	071b      	lsls	r3, r3, #28
 8008214:	499d      	ldr	r1, [pc, #628]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008216:	4313      	orrs	r3, r2
 8008218:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0302 	and.w	r3, r3, #2
 8008224:	2b00      	cmp	r3, #0
 8008226:	d01f      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008228:	4b98      	ldr	r3, [pc, #608]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800822a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800822e:	0f1b      	lsrs	r3, r3, #28
 8008230:	f003 0307 	and.w	r3, r3, #7
 8008234:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	019a      	lsls	r2, r3, #6
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	061b      	lsls	r3, r3, #24
 8008242:	431a      	orrs	r2, r3
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	071b      	lsls	r3, r3, #28
 8008248:	4990      	ldr	r1, [pc, #576]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800824a:	4313      	orrs	r3, r2
 800824c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008250:	4b8e      	ldr	r3, [pc, #568]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008256:	f023 021f 	bic.w	r2, r3, #31
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	3b01      	subs	r3, #1
 8008260:	498a      	ldr	r1, [pc, #552]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008262:	4313      	orrs	r3, r2
 8008264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00d      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	019a      	lsls	r2, r3, #6
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	061b      	lsls	r3, r3, #24
 8008280:	431a      	orrs	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	071b      	lsls	r3, r3, #28
 8008288:	4980      	ldr	r1, [pc, #512]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800828a:	4313      	orrs	r3, r2
 800828c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008290:	4b7d      	ldr	r3, [pc, #500]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008292:	2201      	movs	r2, #1
 8008294:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008296:	f7fc f8d7 	bl	8004448 <HAL_GetTick>
 800829a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800829c:	e008      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800829e:	f7fc f8d3 	bl	8004448 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d901      	bls.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e12b      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082b0:	4b76      	ldr	r3, [pc, #472]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d0f0      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0304 	and.w	r3, r3, #4
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d105      	bne.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d079      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80082d4:	4b6e      	ldr	r3, [pc, #440]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80082da:	f7fc f8b5 	bl	8004448 <HAL_GetTick>
 80082de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80082e0:	e008      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80082e2:	f7fc f8b1 	bl	8004448 <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d901      	bls.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e109      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80082f4:	4b65      	ldr	r3, [pc, #404]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008300:	d0ef      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0304 	and.w	r3, r3, #4
 800830a:	2b00      	cmp	r3, #0
 800830c:	d020      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800830e:	4b5f      	ldr	r3, [pc, #380]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008314:	0f1b      	lsrs	r3, r3, #28
 8008316:	f003 0307 	and.w	r3, r3, #7
 800831a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	019a      	lsls	r2, r3, #6
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	061b      	lsls	r3, r3, #24
 8008328:	431a      	orrs	r2, r3
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	071b      	lsls	r3, r3, #28
 800832e:	4957      	ldr	r1, [pc, #348]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008330:	4313      	orrs	r3, r2
 8008332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008336:	4b55      	ldr	r3, [pc, #340]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800833c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	3b01      	subs	r3, #1
 8008346:	021b      	lsls	r3, r3, #8
 8008348:	4950      	ldr	r1, [pc, #320]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800834a:	4313      	orrs	r3, r2
 800834c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0308 	and.w	r3, r3, #8
 8008358:	2b00      	cmp	r3, #0
 800835a:	d01e      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800835c:	4b4b      	ldr	r3, [pc, #300]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800835e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008362:	0e1b      	lsrs	r3, r3, #24
 8008364:	f003 030f 	and.w	r3, r3, #15
 8008368:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	019a      	lsls	r2, r3, #6
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	061b      	lsls	r3, r3, #24
 8008374:	431a      	orrs	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	071b      	lsls	r3, r3, #28
 800837c:	4943      	ldr	r1, [pc, #268]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800837e:	4313      	orrs	r3, r2
 8008380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008384:	4b41      	ldr	r3, [pc, #260]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800838a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008392:	493e      	ldr	r1, [pc, #248]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008394:	4313      	orrs	r3, r2
 8008396:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800839a:	4b3d      	ldr	r3, [pc, #244]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800839c:	2201      	movs	r2, #1
 800839e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80083a0:	f7fc f852 	bl	8004448 <HAL_GetTick>
 80083a4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80083a6:	e008      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80083a8:	f7fc f84e 	bl	8004448 <HAL_GetTick>
 80083ac:	4602      	mov	r2, r0
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d901      	bls.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e0a6      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80083ba:	4b34      	ldr	r3, [pc, #208]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083c6:	d1ef      	bne.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 0320 	and.w	r3, r3, #32
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 808d 	beq.w	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	4b2c      	ldr	r3, [pc, #176]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083de:	4a2b      	ldr	r2, [pc, #172]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083e4:	6413      	str	r3, [r2, #64]	; 0x40
 80083e6:	4b29      	ldr	r3, [pc, #164]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80083f2:	4b28      	ldr	r3, [pc, #160]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a27      	ldr	r2, [pc, #156]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80083f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80083fe:	f7fc f823 	bl	8004448 <HAL_GetTick>
 8008402:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008404:	e008      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008406:	f7fc f81f 	bl	8004448 <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	2b02      	cmp	r3, #2
 8008412:	d901      	bls.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e077      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008418:	4b1e      	ldr	r3, [pc, #120]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008420:	2b00      	cmp	r3, #0
 8008422:	d0f0      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008424:	4b19      	ldr	r3, [pc, #100]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800842c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d039      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	429a      	cmp	r2, r3
 8008440:	d032      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008442:	4b12      	ldr	r3, [pc, #72]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800844a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800844c:	4b12      	ldr	r3, [pc, #72]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800844e:	2201      	movs	r2, #1
 8008450:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008452:	4b11      	ldr	r3, [pc, #68]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008458:	4a0c      	ldr	r2, [pc, #48]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800845e:	4b0b      	ldr	r3, [pc, #44]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b01      	cmp	r3, #1
 8008468:	d11e      	bne.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800846a:	f7fb ffed 	bl	8004448 <HAL_GetTick>
 800846e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008470:	e014      	b.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008472:	f7fb ffe9 	bl	8004448 <HAL_GetTick>
 8008476:	4602      	mov	r2, r0
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008480:	4293      	cmp	r3, r2
 8008482:	d90b      	bls.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e03f      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008488:	42470068 	.word	0x42470068
 800848c:	40023800 	.word	0x40023800
 8008490:	42470070 	.word	0x42470070
 8008494:	40007000 	.word	0x40007000
 8008498:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800849c:	4b1c      	ldr	r3, [pc, #112]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800849e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d0e4      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084b4:	d10d      	bne.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80084b6:	4b16      	ldr	r3, [pc, #88]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80084c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084ca:	4911      	ldr	r1, [pc, #68]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	608b      	str	r3, [r1, #8]
 80084d0:	e005      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x342>
 80084d2:	4b0f      	ldr	r3, [pc, #60]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	4a0e      	ldr	r2, [pc, #56]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80084dc:	6093      	str	r3, [r2, #8]
 80084de:	4b0c      	ldr	r3, [pc, #48]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084ea:	4909      	ldr	r1, [pc, #36]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0310 	and.w	r3, r3, #16
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d004      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008502:	4b04      	ldr	r3, [pc, #16]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008504:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3718      	adds	r7, #24
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	40023800 	.word	0x40023800
 8008514:	424711e0 	.word	0x424711e0

08008518 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e022      	b.n	8008570 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d105      	bne.n	8008542 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7fb fb6d 	bl	8003c1c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2203      	movs	r2, #3
 8008546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f814 	bl	8008578 <HAL_SD_InitCard>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e00a      	b.n	8008570 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008578:	b5b0      	push	{r4, r5, r7, lr}
 800857a:	b08e      	sub	sp, #56	; 0x38
 800857c:	af04      	add	r7, sp, #16
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008580:	2300      	movs	r3, #0
 8008582:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008584:	2300      	movs	r3, #0
 8008586:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008588:	2300      	movs	r3, #0
 800858a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800858c:	2300      	movs	r3, #0
 800858e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008590:	2300      	movs	r3, #0
 8008592:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008594:	2376      	movs	r3, #118	; 0x76
 8008596:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681d      	ldr	r5, [r3, #0]
 800859c:	466c      	mov	r4, sp
 800859e:	f107 0314 	add.w	r3, r7, #20
 80085a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80085a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80085aa:	f107 0308 	add.w	r3, r7, #8
 80085ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085b0:	4628      	mov	r0, r5
 80085b2:	f002 fd27 	bl	800b004 <SDIO_Init>
 80085b6:	4603      	mov	r3, r0
 80085b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80085bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e04c      	b.n	8008662 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80085c8:	4b28      	ldr	r3, [pc, #160]	; (800866c <HAL_SD_InitCard+0xf4>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f002 fd4e 	bl	800b074 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80085d8:	4b24      	ldr	r3, [pc, #144]	; (800866c <HAL_SD_InitCard+0xf4>)
 80085da:	2201      	movs	r2, #1
 80085dc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fe10 	bl	8009204 <SD_PowerON>
 80085e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00b      	beq.n	8008604 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	431a      	orrs	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e02e      	b.n	8008662 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fd31 	bl	800906c <SD_InitCard>
 800860a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00b      	beq.n	800862a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	431a      	orrs	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e01b      	b.n	8008662 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008632:	4618      	mov	r0, r3
 8008634:	f002 fdb1 	bl	800b19a <SDMMC_CmdBlockLength>
 8008638:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00f      	beq.n	8008660 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a0a      	ldr	r2, [pc, #40]	; (8008670 <HAL_SD_InitCard+0xf8>)
 8008646:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	431a      	orrs	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e000      	b.n	8008662 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3728      	adds	r7, #40	; 0x28
 8008666:	46bd      	mov	sp, r7
 8008668:	bdb0      	pop	{r4, r5, r7, pc}
 800866a:	bf00      	nop
 800866c:	422580a0 	.word	0x422580a0
 8008670:	004005ff 	.word	0x004005ff

08008674 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b08c      	sub	sp, #48	; 0x30
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
 8008680:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d107      	bne.n	800869c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008690:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e0c0      	b.n	800881e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	f040 80b9 	bne.w	800881c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80086b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	441a      	add	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d907      	bls.n	80086ce <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e0a7      	b.n	800881e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2203      	movs	r2, #3
 80086d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2200      	movs	r2, #0
 80086dc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	6812      	ldr	r2, [r2, #0]
 80086e8:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80086ec:	f043 0302 	orr.w	r3, r3, #2
 80086f0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f6:	4a4c      	ldr	r2, [pc, #304]	; (8008828 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80086f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	4a4b      	ldr	r2, [pc, #300]	; (800882c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008700:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008706:	2200      	movs	r2, #0
 8008708:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	2200      	movs	r2, #0
 8008710:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008722:	689a      	ldr	r2, [r3, #8]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	430a      	orrs	r2, r1
 800872c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3380      	adds	r3, #128	; 0x80
 8008738:	4619      	mov	r1, r3
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	025b      	lsls	r3, r3, #9
 8008740:	089b      	lsrs	r3, r3, #2
 8008742:	f7fc fdc9 	bl	80052d8 <HAL_DMA_Start_IT>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d017      	beq.n	800877c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800875a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a33      	ldr	r2, [pc, #204]	; (8008830 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008762:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008768:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e050      	b.n	800881e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800877c:	4b2d      	ldr	r3, [pc, #180]	; (8008834 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800877e:	2201      	movs	r2, #1
 8008780:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008786:	2b01      	cmp	r3, #1
 8008788:	d002      	beq.n	8008790 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800878a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878c:	025b      	lsls	r3, r3, #9
 800878e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008790:	f04f 33ff 	mov.w	r3, #4294967295
 8008794:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	025b      	lsls	r3, r3, #9
 800879a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800879c:	2390      	movs	r3, #144	; 0x90
 800879e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80087a0:	2302      	movs	r3, #2
 80087a2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80087a8:	2301      	movs	r3, #1
 80087aa:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f107 0210 	add.w	r2, r7, #16
 80087b4:	4611      	mov	r1, r2
 80087b6:	4618      	mov	r0, r3
 80087b8:	f002 fcc3 	bl	800b142 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d90a      	bls.n	80087d8 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2282      	movs	r2, #130	; 0x82
 80087c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ce:	4618      	mov	r0, r3
 80087d0:	f002 fd27 	bl	800b222 <SDMMC_CmdReadMultiBlock>
 80087d4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80087d6:	e009      	b.n	80087ec <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2281      	movs	r2, #129	; 0x81
 80087dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087e4:	4618      	mov	r0, r3
 80087e6:	f002 fcfa 	bl	800b1de <SDMMC_CmdReadSingleBlock>
 80087ea:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80087ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d012      	beq.n	8008818 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a0e      	ldr	r2, [pc, #56]	; (8008830 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80087f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008800:	431a      	orrs	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e002      	b.n	800881e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	e000      	b.n	800881e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800881c:	2302      	movs	r3, #2
  }
}
 800881e:	4618      	mov	r0, r3
 8008820:	3730      	adds	r7, #48	; 0x30
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	08008f57 	.word	0x08008f57
 800882c:	08008fc9 	.word	0x08008fc9
 8008830:	004005ff 	.word	0x004005ff
 8008834:	4225858c 	.word	0x4225858c

08008838 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b08c      	sub	sp, #48	; 0x30
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d107      	bne.n	8008860 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008854:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e0c5      	b.n	80089ec <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008866:	b2db      	uxtb	r3, r3
 8008868:	2b01      	cmp	r3, #1
 800886a:	f040 80be 	bne.w	80089ea <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	441a      	add	r2, r3
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800887e:	429a      	cmp	r2, r3
 8008880:	d907      	bls.n	8008892 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008886:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e0ac      	b.n	80089ec <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2203      	movs	r2, #3
 8008896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2200      	movs	r2, #0
 80088a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	6812      	ldr	r2, [r2, #0]
 80088ac:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80088b0:	f043 0302 	orr.w	r3, r3, #2
 80088b4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ba:	4a4e      	ldr	r2, [pc, #312]	; (80089f4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80088bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c2:	4a4d      	ldr	r2, [pc, #308]	; (80089f8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80088c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ca:	2200      	movs	r2, #0
 80088cc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d002      	beq.n	80088dc <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80088d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d8:	025b      	lsls	r3, r3, #9
 80088da:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d90a      	bls.n	80088f8 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	22a0      	movs	r2, #160	; 0xa0
 80088e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088ee:	4618      	mov	r0, r3
 80088f0:	f002 fcdb 	bl	800b2aa <SDMMC_CmdWriteMultiBlock>
 80088f4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80088f6:	e009      	b.n	800890c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2290      	movs	r2, #144	; 0x90
 80088fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008904:	4618      	mov	r0, r3
 8008906:	f002 fcae 	bl	800b266 <SDMMC_CmdWriteSingleBlock>
 800890a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800890c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890e:	2b00      	cmp	r3, #0
 8008910:	d012      	beq.n	8008938 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a39      	ldr	r2, [pc, #228]	; (80089fc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008918:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800891e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008920:	431a      	orrs	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e059      	b.n	80089ec <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008938:	4b31      	ldr	r3, [pc, #196]	; (8008a00 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800893a:	2201      	movs	r2, #1
 800893c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008942:	2240      	movs	r2, #64	; 0x40
 8008944:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008956:	689a      	ldr	r2, [r3, #8]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	430a      	orrs	r2, r1
 8008960:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008966:	68b9      	ldr	r1, [r7, #8]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3380      	adds	r3, #128	; 0x80
 800896e:	461a      	mov	r2, r3
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	025b      	lsls	r3, r3, #9
 8008974:	089b      	lsrs	r3, r3, #2
 8008976:	f7fc fcaf 	bl	80052d8 <HAL_DMA_Start_IT>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d01c      	beq.n	80089ba <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	6812      	ldr	r2, [r2, #0]
 800898a:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800898e:	f023 0302 	bic.w	r3, r3, #2
 8008992:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a18      	ldr	r2, [pc, #96]	; (80089fc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800899a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e018      	b.n	80089ec <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80089ba:	f04f 33ff 	mov.w	r3, #4294967295
 80089be:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	025b      	lsls	r3, r3, #9
 80089c4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80089c6:	2390      	movs	r3, #144	; 0x90
 80089c8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80089ca:	2300      	movs	r3, #0
 80089cc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80089d2:	2301      	movs	r3, #1
 80089d4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f107 0210 	add.w	r2, r7, #16
 80089de:	4611      	mov	r1, r2
 80089e0:	4618      	mov	r0, r3
 80089e2:	f002 fbae 	bl	800b142 <SDIO_ConfigData>

      return HAL_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	e000      	b.n	80089ec <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80089ea:	2302      	movs	r3, #2
  }
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3730      	adds	r7, #48	; 0x30
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	08008f2d 	.word	0x08008f2d
 80089f8:	08008fc9 	.word	0x08008fc9
 80089fc:	004005ff 	.word	0x004005ff
 8008a00:	4225858c 	.word	0x4225858c

08008a04 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a26:	0f9b      	lsrs	r3, r3, #30
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a32:	0e9b      	lsrs	r3, r3, #26
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	f003 030f 	and.w	r3, r3, #15
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a44:	0e1b      	lsrs	r3, r3, #24
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	f003 0303 	and.w	r3, r3, #3
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a56:	0c1b      	lsrs	r3, r3, #16
 8008a58:	b2da      	uxtb	r2, r3
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a62:	0a1b      	lsrs	r3, r3, #8
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a78:	0d1b      	lsrs	r3, r3, #20
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a84:	0c1b      	lsrs	r3, r3, #16
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	f003 030f 	and.w	r3, r3, #15
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a96:	0bdb      	lsrs	r3, r3, #15
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	f003 0301 	and.w	r3, r3, #1
 8008a9e:	b2da      	uxtb	r2, r3
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aa8:	0b9b      	lsrs	r3, r3, #14
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	f003 0301 	and.w	r3, r3, #1
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aba:	0b5b      	lsrs	r3, r3, #13
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008acc:	0b1b      	lsrs	r3, r3, #12
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	b2da      	uxtb	r2, r3
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2200      	movs	r2, #0
 8008ade:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d163      	bne.n	8008bb0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aec:	009a      	lsls	r2, r3, #2
 8008aee:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008af2:	4013      	ands	r3, r2
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008af8:	0f92      	lsrs	r2, r2, #30
 8008afa:	431a      	orrs	r2, r3
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b04:	0edb      	lsrs	r3, r3, #27
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	f003 0307 	and.w	r3, r3, #7
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b16:	0e1b      	lsrs	r3, r3, #24
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	f003 0307 	and.w	r3, r3, #7
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b28:	0d5b      	lsrs	r3, r3, #21
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	f003 0307 	and.w	r3, r3, #7
 8008b30:	b2da      	uxtb	r2, r3
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b3a:	0c9b      	lsrs	r3, r3, #18
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	f003 0307 	and.w	r3, r3, #7
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b4c:	0bdb      	lsrs	r3, r3, #15
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	f003 0307 	and.w	r3, r3, #7
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	1c5a      	adds	r2, r3, #1
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	7e1b      	ldrb	r3, [r3, #24]
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	f003 0307 	and.w	r3, r3, #7
 8008b6e:	3302      	adds	r3, #2
 8008b70:	2201      	movs	r2, #1
 8008b72:	fa02 f303 	lsl.w	r3, r2, r3
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008b7a:	fb02 f203 	mul.w	r2, r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	7a1b      	ldrb	r3, [r3, #8]
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	f003 030f 	and.w	r3, r3, #15
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	409a      	lsls	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008b9c:	0a52      	lsrs	r2, r2, #9
 8008b9e:	fb02 f203 	mul.w	r2, r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bac:	661a      	str	r2, [r3, #96]	; 0x60
 8008bae:	e031      	b.n	8008c14 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d11d      	bne.n	8008bf4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bbc:	041b      	lsls	r3, r3, #16
 8008bbe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bc6:	0c1b      	lsrs	r3, r3, #16
 8008bc8:	431a      	orrs	r2, r3
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	029a      	lsls	r2, r3, #10
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008be8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	661a      	str	r2, [r3, #96]	; 0x60
 8008bf2:	e00f      	b.n	8008c14 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a58      	ldr	r2, [pc, #352]	; (8008d5c <HAL_SD_GetCardCSD+0x344>)
 8008bfa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e09d      	b.n	8008d50 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c18:	0b9b      	lsrs	r3, r3, #14
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c2a:	09db      	lsrs	r3, r3, #7
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4c:	0fdb      	lsrs	r3, r3, #31
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c58:	0f5b      	lsrs	r3, r3, #29
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	f003 0303 	and.w	r3, r3, #3
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6a:	0e9b      	lsrs	r3, r3, #26
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	f003 0307 	and.w	r3, r3, #7
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c7c:	0d9b      	lsrs	r3, r3, #22
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	f003 030f 	and.w	r3, r3, #15
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8e:	0d5b      	lsrs	r3, r3, #21
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008caa:	0c1b      	lsrs	r3, r3, #16
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cbe:	0bdb      	lsrs	r3, r3, #15
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd2:	0b9b      	lsrs	r3, r3, #14
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce6:	0b5b      	lsrs	r3, r3, #13
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cfa:	0b1b      	lsrs	r3, r3, #12
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0e:	0a9b      	lsrs	r3, r3, #10
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	f003 0303 	and.w	r3, r3, #3
 8008d16:	b2da      	uxtb	r2, r3
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d22:	0a1b      	lsrs	r3, r3, #8
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	f003 0303 	and.w	r3, r3, #3
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d36:	085b      	lsrs	r3, r3, #1
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	004005ff 	.word	0x004005ff

08008d60 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008db8:	b5b0      	push	{r4, r5, r7, lr}
 8008dba:	b08e      	sub	sp, #56	; 0x38
 8008dbc:	af04      	add	r7, sp, #16
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2203      	movs	r2, #3
 8008dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d02e      	beq.n	8008e36 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dde:	d106      	bne.n	8008dee <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	639a      	str	r2, [r3, #56]	; 0x38
 8008dec:	e029      	b.n	8008e42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008df4:	d10a      	bne.n	8008e0c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 faba 	bl	8009370 <SD_WideBus_Enable>
 8008dfc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	431a      	orrs	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	639a      	str	r2, [r3, #56]	; 0x38
 8008e0a:	e01a      	b.n	8008e42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d10a      	bne.n	8008e28 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 faf7 	bl	8009406 <SD_WideBus_Disable>
 8008e18:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e1e:	6a3b      	ldr	r3, [r7, #32]
 8008e20:	431a      	orrs	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	639a      	str	r2, [r3, #56]	; 0x38
 8008e26:	e00c      	b.n	8008e42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	639a      	str	r2, [r3, #56]	; 0x38
 8008e34:	e005      	b.n	8008e42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00b      	beq.n	8008e62 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a26      	ldr	r2, [pc, #152]	; (8008ee8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008e50:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e60:	e01f      	b.n	8008ea2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681d      	ldr	r5, [r3, #0]
 8008e88:	466c      	mov	r4, sp
 8008e8a:	f107 0314 	add.w	r3, r7, #20
 8008e8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e96:	f107 0308 	add.w	r3, r7, #8
 8008e9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f002 f8b1 	bl	800b004 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f002 f975 	bl	800b19a <SDMMC_CmdBlockLength>
 8008eb0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00c      	beq.n	8008ed2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a0a      	ldr	r2, [pc, #40]	; (8008ee8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008ebe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	431a      	orrs	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3728      	adds	r7, #40	; 0x28
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	004005ff 	.word	0x004005ff

08008eec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008ef8:	f107 030c 	add.w	r3, r7, #12
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fa0e 	bl	8009320 <SD_SendStatus>
 8008f04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d005      	beq.n	8008f18 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	431a      	orrs	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	0a5b      	lsrs	r3, r3, #9
 8008f1c:	f003 030f 	and.w	r3, r3, #15
 8008f20:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008f22:	693b      	ldr	r3, [r7, #16]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3718      	adds	r7, #24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f48:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008f4a:	bf00      	nop
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f62:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f68:	2b82      	cmp	r3, #130	; 0x82
 8008f6a:	d111      	bne.n	8008f90 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f002 f9bd 	bl	800b2f0 <SDMMC_CmdStopTransfer>
 8008f76:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d008      	beq.n	8008f90 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	431a      	orrs	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f7ff fd3a 	bl	8008a04 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f022 0208 	bic.w	r2, r2, #8
 8008f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f240 523a 	movw	r2, #1338	; 0x53a
 8008fa8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f002 fe11 	bl	800bbe0 <HAL_SD_RxCpltCallback>
#endif
}
 8008fbe:	bf00      	nop
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
	...

08008fc8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7fc fb60 	bl	800569c <HAL_DMA_GetError>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d03e      	beq.n	8009060 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d002      	beq.n	8008ffe <SD_DMAError+0x36>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d12d      	bne.n	800905a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a19      	ldr	r2, [pc, #100]	; (8009068 <SD_DMAError+0xa0>)
 8009004:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009014:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009022:	6978      	ldr	r0, [r7, #20]
 8009024:	f7ff ff62 	bl	8008eec <HAL_SD_GetCardState>
 8009028:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	2b06      	cmp	r3, #6
 800902e:	d002      	beq.n	8009036 <SD_DMAError+0x6e>
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	2b05      	cmp	r3, #5
 8009034:	d10a      	bne.n	800904c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4618      	mov	r0, r3
 800903c:	f002 f958 	bl	800b2f0 <SDMMC_CmdStopTransfer>
 8009040:	4602      	mov	r2, r0
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009046:	431a      	orrs	r2, r3
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	2200      	movs	r2, #0
 8009058:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800905a:	6978      	ldr	r0, [r7, #20]
 800905c:	f7ff fcd2 	bl	8008a04 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009060:	bf00      	nop
 8009062:	3718      	adds	r7, #24
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	004005ff 	.word	0x004005ff

0800906c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800906c:	b5b0      	push	{r4, r5, r7, lr}
 800906e:	b094      	sub	sp, #80	; 0x50
 8009070:	af04      	add	r7, sp, #16
 8009072:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009074:	2301      	movs	r3, #1
 8009076:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4618      	mov	r0, r3
 800907e:	f002 f808 	bl	800b092 <SDIO_GetPowerState>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d102      	bne.n	800908e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009088:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800908c:	e0b6      	b.n	80091fc <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009092:	2b03      	cmp	r3, #3
 8009094:	d02f      	beq.n	80090f6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4618      	mov	r0, r3
 800909c:	f002 fa32 	bl	800b504 <SDMMC_CmdSendCID>
 80090a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <SD_InitCard+0x40>
    {
      return errorstate;
 80090a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090aa:	e0a7      	b.n	80091fc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2100      	movs	r1, #0
 80090b2:	4618      	mov	r0, r3
 80090b4:	f002 f832 	bl	800b11c <SDIO_GetResponse>
 80090b8:	4602      	mov	r2, r0
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2104      	movs	r1, #4
 80090c4:	4618      	mov	r0, r3
 80090c6:	f002 f829 	bl	800b11c <SDIO_GetResponse>
 80090ca:	4602      	mov	r2, r0
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2108      	movs	r1, #8
 80090d6:	4618      	mov	r0, r3
 80090d8:	f002 f820 	bl	800b11c <SDIO_GetResponse>
 80090dc:	4602      	mov	r2, r0
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	210c      	movs	r1, #12
 80090e8:	4618      	mov	r0, r3
 80090ea:	f002 f817 	bl	800b11c <SDIO_GetResponse>
 80090ee:	4602      	mov	r2, r0
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d00d      	beq.n	800911a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f107 020e 	add.w	r2, r7, #14
 8009106:	4611      	mov	r1, r2
 8009108:	4618      	mov	r0, r3
 800910a:	f002 fa38 	bl	800b57e <SDMMC_CmdSetRelAdd>
 800910e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <SD_InitCard+0xae>
    {
      return errorstate;
 8009116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009118:	e070      	b.n	80091fc <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800911e:	2b03      	cmp	r3, #3
 8009120:	d036      	beq.n	8009190 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009122:	89fb      	ldrh	r3, [r7, #14]
 8009124:	461a      	mov	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009132:	041b      	lsls	r3, r3, #16
 8009134:	4619      	mov	r1, r3
 8009136:	4610      	mov	r0, r2
 8009138:	f002 fa02 	bl	800b540 <SDMMC_CmdSendCSD>
 800913c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800913e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009140:	2b00      	cmp	r3, #0
 8009142:	d001      	beq.n	8009148 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009146:	e059      	b.n	80091fc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2100      	movs	r1, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f001 ffe4 	bl	800b11c <SDIO_GetResponse>
 8009154:	4602      	mov	r2, r0
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2104      	movs	r1, #4
 8009160:	4618      	mov	r0, r3
 8009162:	f001 ffdb 	bl	800b11c <SDIO_GetResponse>
 8009166:	4602      	mov	r2, r0
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2108      	movs	r1, #8
 8009172:	4618      	mov	r0, r3
 8009174:	f001 ffd2 	bl	800b11c <SDIO_GetResponse>
 8009178:	4602      	mov	r2, r0
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	210c      	movs	r1, #12
 8009184:	4618      	mov	r0, r3
 8009186:	f001 ffc9 	bl	800b11c <SDIO_GetResponse>
 800918a:	4602      	mov	r2, r0
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2104      	movs	r1, #4
 8009196:	4618      	mov	r0, r3
 8009198:	f001 ffc0 	bl	800b11c <SDIO_GetResponse>
 800919c:	4603      	mov	r3, r0
 800919e:	0d1a      	lsrs	r2, r3, #20
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80091a4:	f107 0310 	add.w	r3, r7, #16
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7ff fc34 	bl	8008a18 <HAL_SD_GetCardCSD>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d002      	beq.n	80091bc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091ba:	e01f      	b.n	80091fc <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6819      	ldr	r1, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c4:	041b      	lsls	r3, r3, #16
 80091c6:	461a      	mov	r2, r3
 80091c8:	f04f 0300 	mov.w	r3, #0
 80091cc:	4608      	mov	r0, r1
 80091ce:	f002 f8b1 	bl	800b334 <SDMMC_CmdSelDesel>
 80091d2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80091d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <SD_InitCard+0x172>
  {
    return errorstate;
 80091da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091dc:	e00e      	b.n	80091fc <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681d      	ldr	r5, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	466c      	mov	r4, sp
 80091e6:	f103 0210 	add.w	r2, r3, #16
 80091ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80091ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80091f0:	3304      	adds	r3, #4
 80091f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80091f4:	4628      	mov	r0, r5
 80091f6:	f001 ff05 	bl	800b004 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3740      	adds	r7, #64	; 0x40
 8009200:	46bd      	mov	sp, r7
 8009202:	bdb0      	pop	{r4, r5, r7, pc}

08009204 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800920c:	2300      	movs	r3, #0
 800920e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	617b      	str	r3, [r7, #20]
 8009214:	2300      	movs	r3, #0
 8009216:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4618      	mov	r0, r3
 800921e:	f002 f8ac 	bl	800b37a <SDMMC_CmdGoIdleState>
 8009222:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <SD_PowerON+0x2a>
  {
    return errorstate;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	e072      	b.n	8009314 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4618      	mov	r0, r3
 8009234:	f002 f8bf 	bl	800b3b6 <SDMMC_CmdOperCond>
 8009238:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00d      	beq.n	800925c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4618      	mov	r0, r3
 800924c:	f002 f895 	bl	800b37a <SDMMC_CmdGoIdleState>
 8009250:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d004      	beq.n	8009262 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	e05b      	b.n	8009314 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009266:	2b01      	cmp	r3, #1
 8009268:	d137      	bne.n	80092da <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2100      	movs	r1, #0
 8009270:	4618      	mov	r0, r3
 8009272:	f002 f8bf 	bl	800b3f4 <SDMMC_CmdAppCommand>
 8009276:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d02d      	beq.n	80092da <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800927e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009282:	e047      	b.n	8009314 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2100      	movs	r1, #0
 800928a:	4618      	mov	r0, r3
 800928c:	f002 f8b2 	bl	800b3f4 <SDMMC_CmdAppCommand>
 8009290:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d001      	beq.n	800929c <SD_PowerON+0x98>
    {
      return errorstate;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	e03b      	b.n	8009314 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	491e      	ldr	r1, [pc, #120]	; (800931c <SD_PowerON+0x118>)
 80092a2:	4618      	mov	r0, r3
 80092a4:	f002 f8c8 	bl	800b438 <SDMMC_CmdAppOperCommand>
 80092a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80092b4:	e02e      	b.n	8009314 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2100      	movs	r1, #0
 80092bc:	4618      	mov	r0, r3
 80092be:	f001 ff2d 	bl	800b11c <SDIO_GetResponse>
 80092c2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	0fdb      	lsrs	r3, r3, #31
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d101      	bne.n	80092d0 <SD_PowerON+0xcc>
 80092cc:	2301      	movs	r3, #1
 80092ce:	e000      	b.n	80092d2 <SD_PowerON+0xce>
 80092d0:	2300      	movs	r3, #0
 80092d2:	613b      	str	r3, [r7, #16]

    count++;
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	3301      	adds	r3, #1
 80092d8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d802      	bhi.n	80092ea <SD_PowerON+0xe6>
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0cc      	beq.n	8009284 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d902      	bls.n	80092fa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80092f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092f8:	e00c      	b.n	8009314 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	645a      	str	r2, [r3, #68]	; 0x44
 800930a:	e002      	b.n	8009312 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3718      	adds	r7, #24
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	c1100000 	.word	0xc1100000

08009320 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d102      	bne.n	8009336 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009330:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009334:	e018      	b.n	8009368 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800933e:	041b      	lsls	r3, r3, #16
 8009340:	4619      	mov	r1, r3
 8009342:	4610      	mov	r0, r2
 8009344:	f002 f93c 	bl	800b5c0 <SDMMC_CmdSendStatus>
 8009348:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	e009      	b.n	8009368 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2100      	movs	r1, #0
 800935a:	4618      	mov	r0, r3
 800935c:	f001 fede 	bl	800b11c <SDIO_GetResponse>
 8009360:	4602      	mov	r2, r0
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009378:	2300      	movs	r3, #0
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	2300      	movs	r3, #0
 800937e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2100      	movs	r1, #0
 8009386:	4618      	mov	r0, r3
 8009388:	f001 fec8 	bl	800b11c <SDIO_GetResponse>
 800938c:	4603      	mov	r3, r0
 800938e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009392:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009396:	d102      	bne.n	800939e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009398:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800939c:	e02f      	b.n	80093fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800939e:	f107 030c 	add.w	r3, r7, #12
 80093a2:	4619      	mov	r1, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f879 	bl	800949c <SD_FindSCR>
 80093aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	e023      	b.n	80093fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d01c      	beq.n	80093fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093c8:	041b      	lsls	r3, r3, #16
 80093ca:	4619      	mov	r1, r3
 80093cc:	4610      	mov	r0, r2
 80093ce:	f002 f811 	bl	800b3f4 <SDMMC_CmdAppCommand>
 80093d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	e00f      	b.n	80093fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2102      	movs	r1, #2
 80093e4:	4618      	mov	r0, r3
 80093e6:	f002 f84a 	bl	800b47e <SDMMC_CmdBusWidth>
 80093ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	e003      	b.n	80093fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80093f6:	2300      	movs	r3, #0
 80093f8:	e001      	b.n	80093fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b086      	sub	sp, #24
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800940e:	2300      	movs	r3, #0
 8009410:	60fb      	str	r3, [r7, #12]
 8009412:	2300      	movs	r3, #0
 8009414:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2100      	movs	r1, #0
 800941c:	4618      	mov	r0, r3
 800941e:	f001 fe7d 	bl	800b11c <SDIO_GetResponse>
 8009422:	4603      	mov	r3, r0
 8009424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800942c:	d102      	bne.n	8009434 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800942e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009432:	e02f      	b.n	8009494 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009434:	f107 030c 	add.w	r3, r7, #12
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f82e 	bl	800949c <SD_FindSCR>
 8009440:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	e023      	b.n	8009494 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009452:	2b00      	cmp	r3, #0
 8009454:	d01c      	beq.n	8009490 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800945e:	041b      	lsls	r3, r3, #16
 8009460:	4619      	mov	r1, r3
 8009462:	4610      	mov	r0, r2
 8009464:	f001 ffc6 	bl	800b3f4 <SDMMC_CmdAppCommand>
 8009468:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d001      	beq.n	8009474 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	e00f      	b.n	8009494 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2100      	movs	r1, #0
 800947a:	4618      	mov	r0, r3
 800947c:	f001 ffff 	bl	800b47e <SDMMC_CmdBusWidth>
 8009480:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	e003      	b.n	8009494 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800948c:	2300      	movs	r3, #0
 800948e:	e001      	b.n	8009494 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009490:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009494:	4618      	mov	r0, r3
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800949c:	b590      	push	{r4, r7, lr}
 800949e:	b08f      	sub	sp, #60	; 0x3c
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80094a6:	f7fa ffcf 	bl	8004448 <HAL_GetTick>
 80094aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80094b0:	2300      	movs	r3, #0
 80094b2:	60bb      	str	r3, [r7, #8]
 80094b4:	2300      	movs	r3, #0
 80094b6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2108      	movs	r1, #8
 80094c2:	4618      	mov	r0, r3
 80094c4:	f001 fe69 	bl	800b19a <SDMMC_CmdBlockLength>
 80094c8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80094ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80094d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d2:	e0b2      	b.n	800963a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094dc:	041b      	lsls	r3, r3, #16
 80094de:	4619      	mov	r1, r3
 80094e0:	4610      	mov	r0, r2
 80094e2:	f001 ff87 	bl	800b3f4 <SDMMC_CmdAppCommand>
 80094e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80094e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80094ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f0:	e0a3      	b.n	800963a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80094f2:	f04f 33ff 	mov.w	r3, #4294967295
 80094f6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80094f8:	2308      	movs	r3, #8
 80094fa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80094fc:	2330      	movs	r3, #48	; 0x30
 80094fe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009500:	2302      	movs	r3, #2
 8009502:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009504:	2300      	movs	r3, #0
 8009506:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009508:	2301      	movs	r3, #1
 800950a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f107 0210 	add.w	r2, r7, #16
 8009514:	4611      	mov	r1, r2
 8009516:	4618      	mov	r0, r3
 8009518:	f001 fe13 	bl	800b142 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4618      	mov	r0, r3
 8009522:	f001 ffce 	bl	800b4c2 <SDMMC_CmdSendSCR>
 8009526:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	2b00      	cmp	r3, #0
 800952c:	d02a      	beq.n	8009584 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009530:	e083      	b.n	800963a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00f      	beq.n	8009560 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6819      	ldr	r1, [r3, #0]
 8009544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	f107 0208 	add.w	r2, r7, #8
 800954c:	18d4      	adds	r4, r2, r3
 800954e:	4608      	mov	r0, r1
 8009550:	f001 fd83 	bl	800b05a <SDIO_ReadFIFO>
 8009554:	4603      	mov	r3, r0
 8009556:	6023      	str	r3, [r4, #0]
      index++;
 8009558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955a:	3301      	adds	r3, #1
 800955c:	637b      	str	r3, [r7, #52]	; 0x34
 800955e:	e006      	b.n	800956e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d012      	beq.n	8009594 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800956e:	f7fa ff6b 	bl	8004448 <HAL_GetTick>
 8009572:	4602      	mov	r2, r0
 8009574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009576:	1ad3      	subs	r3, r2, r3
 8009578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957c:	d102      	bne.n	8009584 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800957e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009582:	e05a      	b.n	800963a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800958a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800958e:	2b00      	cmp	r3, #0
 8009590:	d0cf      	beq.n	8009532 <SD_FindSCR+0x96>
 8009592:	e000      	b.n	8009596 <SD_FindSCR+0xfa>
      break;
 8009594:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959c:	f003 0308 	and.w	r3, r3, #8
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d005      	beq.n	80095b0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2208      	movs	r2, #8
 80095aa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80095ac:	2308      	movs	r3, #8
 80095ae:	e044      	b.n	800963a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b6:	f003 0302 	and.w	r3, r3, #2
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d005      	beq.n	80095ca <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2202      	movs	r2, #2
 80095c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80095c6:	2302      	movs	r3, #2
 80095c8:	e037      	b.n	800963a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095d0:	f003 0320 	and.w	r3, r3, #32
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d005      	beq.n	80095e4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2220      	movs	r2, #32
 80095de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80095e0:	2320      	movs	r3, #32
 80095e2:	e02a      	b.n	800963a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f240 523a 	movw	r2, #1338	; 0x53a
 80095ec:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	061a      	lsls	r2, r3, #24
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	021b      	lsls	r3, r3, #8
 80095f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80095fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	0a1b      	lsrs	r3, r3, #8
 8009600:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009604:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	0e1b      	lsrs	r3, r3, #24
 800960a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960e:	601a      	str	r2, [r3, #0]
    scr++;
 8009610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009612:	3304      	adds	r3, #4
 8009614:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	061a      	lsls	r2, r3, #24
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	021b      	lsls	r3, r3, #8
 800961e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009622:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	0a1b      	lsrs	r3, r3, #8
 8009628:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800962c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	0e1b      	lsrs	r3, r3, #24
 8009632:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009636:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	373c      	adds	r7, #60	; 0x3c
 800963e:	46bd      	mov	sp, r7
 8009640:	bd90      	pop	{r4, r7, pc}

08009642 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009642:	b580      	push	{r7, lr}
 8009644:	b082      	sub	sp, #8
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d101      	bne.n	8009656 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e025      	b.n	80096a2 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800965c:	b2db      	uxtb	r3, r3
 800965e:	2b00      	cmp	r3, #0
 8009660:	d106      	bne.n	8009670 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f7fa fcf0 	bl	8004050 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2202      	movs	r2, #2
 8009674:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	3304      	adds	r3, #4
 8009680:	4619      	mov	r1, r3
 8009682:	4610      	mov	r0, r2
 8009684:	f001 fb90 	bl	800ada8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6818      	ldr	r0, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	461a      	mov	r2, r3
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	f001 fbfb 	bl	800ae8e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
*/
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if(__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d10a      	bne.n	80096d6 <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 f80c 	bl	80096de <HAL_SDRAM_RefreshErrorCallback>
#endif

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	695a      	ldr	r2, [r3, #20]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f042 0201 	orr.w	r2, r2, #1
 80096d4:	615a      	str	r2, [r3, #20]
  }
}
 80096d6:	bf00      	nop
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module. 
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 80096de:	b480      	push	{r7}
 80096e0:	b083      	sub	sp, #12
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */ 
}
 80096e6:	bf00      	nop
 80096e8:	370c      	adds	r7, #12
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b084      	sub	sp, #16
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	60f8      	str	r0, [r7, #12]
 80096fa:	60b9      	str	r1, [r7, #8]
 80096fc:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b02      	cmp	r3, #2
 8009708:	d101      	bne.n	800970e <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800970a:	2302      	movs	r3, #2
 800970c:	e018      	b.n	8009740 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2202      	movs	r2, #2
 8009712:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	68b9      	ldr	r1, [r7, #8]
 800971e:	4618      	mov	r0, r3
 8009720:	f001 fc34 	bl	800af8c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b02      	cmp	r3, #2
 800972a:	d104      	bne.n	8009736 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2205      	movs	r2, #5
 8009730:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009734:	e003      	b.n	800973e <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d101      	bne.n	800975a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e041      	b.n	80097de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d106      	bne.n	8009774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7fa fabc 	bl	8003cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2202      	movs	r2, #2
 8009778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3304      	adds	r3, #4
 8009784:	4619      	mov	r1, r3
 8009786:	4610      	mov	r0, r2
 8009788:	f000 ff1c 	bl	800a5c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
	...

080097e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d001      	beq.n	8009800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e04e      	b.n	800989e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2202      	movs	r2, #2
 8009804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68da      	ldr	r2, [r3, #12]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f042 0201 	orr.w	r2, r2, #1
 8009816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a23      	ldr	r2, [pc, #140]	; (80098ac <HAL_TIM_Base_Start_IT+0xc4>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d022      	beq.n	8009868 <HAL_TIM_Base_Start_IT+0x80>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800982a:	d01d      	beq.n	8009868 <HAL_TIM_Base_Start_IT+0x80>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a1f      	ldr	r2, [pc, #124]	; (80098b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d018      	beq.n	8009868 <HAL_TIM_Base_Start_IT+0x80>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a1e      	ldr	r2, [pc, #120]	; (80098b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d013      	beq.n	8009868 <HAL_TIM_Base_Start_IT+0x80>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a1c      	ldr	r2, [pc, #112]	; (80098b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d00e      	beq.n	8009868 <HAL_TIM_Base_Start_IT+0x80>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a1b      	ldr	r2, [pc, #108]	; (80098bc <HAL_TIM_Base_Start_IT+0xd4>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d009      	beq.n	8009868 <HAL_TIM_Base_Start_IT+0x80>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a19      	ldr	r2, [pc, #100]	; (80098c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d004      	beq.n	8009868 <HAL_TIM_Base_Start_IT+0x80>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a18      	ldr	r2, [pc, #96]	; (80098c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d111      	bne.n	800988c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2b06      	cmp	r3, #6
 8009878:	d010      	beq.n	800989c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f042 0201 	orr.w	r2, r2, #1
 8009888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800988a:	e007      	b.n	800989c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0201 	orr.w	r2, r2, #1
 800989a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	40010000 	.word	0x40010000
 80098b0:	40000400 	.word	0x40000400
 80098b4:	40000800 	.word	0x40000800
 80098b8:	40000c00 	.word	0x40000c00
 80098bc:	40010400 	.word	0x40010400
 80098c0:	40014000 	.word	0x40014000
 80098c4:	40001800 	.word	0x40001800

080098c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d101      	bne.n	80098da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e041      	b.n	800995e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d106      	bne.n	80098f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7fa fa66 	bl	8003dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2202      	movs	r2, #2
 80098f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	3304      	adds	r3, #4
 8009904:	4619      	mov	r1, r3
 8009906:	4610      	mov	r0, r2
 8009908:	f000 fe5c 	bl	800a5c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
	...

08009968 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d109      	bne.n	800998c <HAL_TIM_PWM_Start+0x24>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800997e:	b2db      	uxtb	r3, r3
 8009980:	2b01      	cmp	r3, #1
 8009982:	bf14      	ite	ne
 8009984:	2301      	movne	r3, #1
 8009986:	2300      	moveq	r3, #0
 8009988:	b2db      	uxtb	r3, r3
 800998a:	e022      	b.n	80099d2 <HAL_TIM_PWM_Start+0x6a>
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2b04      	cmp	r3, #4
 8009990:	d109      	bne.n	80099a6 <HAL_TIM_PWM_Start+0x3e>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009998:	b2db      	uxtb	r3, r3
 800999a:	2b01      	cmp	r3, #1
 800999c:	bf14      	ite	ne
 800999e:	2301      	movne	r3, #1
 80099a0:	2300      	moveq	r3, #0
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	e015      	b.n	80099d2 <HAL_TIM_PWM_Start+0x6a>
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	d109      	bne.n	80099c0 <HAL_TIM_PWM_Start+0x58>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	bf14      	ite	ne
 80099b8:	2301      	movne	r3, #1
 80099ba:	2300      	moveq	r3, #0
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	e008      	b.n	80099d2 <HAL_TIM_PWM_Start+0x6a>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	bf14      	ite	ne
 80099cc:	2301      	movne	r3, #1
 80099ce:	2300      	moveq	r3, #0
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e07c      	b.n	8009ad4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d104      	bne.n	80099ea <HAL_TIM_PWM_Start+0x82>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2202      	movs	r2, #2
 80099e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099e8:	e013      	b.n	8009a12 <HAL_TIM_PWM_Start+0xaa>
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	2b04      	cmp	r3, #4
 80099ee:	d104      	bne.n	80099fa <HAL_TIM_PWM_Start+0x92>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2202      	movs	r2, #2
 80099f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099f8:	e00b      	b.n	8009a12 <HAL_TIM_PWM_Start+0xaa>
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	2b08      	cmp	r3, #8
 80099fe:	d104      	bne.n	8009a0a <HAL_TIM_PWM_Start+0xa2>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2202      	movs	r2, #2
 8009a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a08:	e003      	b.n	8009a12 <HAL_TIM_PWM_Start+0xaa>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2201      	movs	r2, #1
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f001 f8bc 	bl	800ab98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a2d      	ldr	r2, [pc, #180]	; (8009adc <HAL_TIM_PWM_Start+0x174>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d004      	beq.n	8009a34 <HAL_TIM_PWM_Start+0xcc>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a2c      	ldr	r2, [pc, #176]	; (8009ae0 <HAL_TIM_PWM_Start+0x178>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d101      	bne.n	8009a38 <HAL_TIM_PWM_Start+0xd0>
 8009a34:	2301      	movs	r3, #1
 8009a36:	e000      	b.n	8009a3a <HAL_TIM_PWM_Start+0xd2>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d007      	beq.n	8009a4e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a22      	ldr	r2, [pc, #136]	; (8009adc <HAL_TIM_PWM_Start+0x174>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d022      	beq.n	8009a9e <HAL_TIM_PWM_Start+0x136>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a60:	d01d      	beq.n	8009a9e <HAL_TIM_PWM_Start+0x136>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a1f      	ldr	r2, [pc, #124]	; (8009ae4 <HAL_TIM_PWM_Start+0x17c>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d018      	beq.n	8009a9e <HAL_TIM_PWM_Start+0x136>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a1d      	ldr	r2, [pc, #116]	; (8009ae8 <HAL_TIM_PWM_Start+0x180>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d013      	beq.n	8009a9e <HAL_TIM_PWM_Start+0x136>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a1c      	ldr	r2, [pc, #112]	; (8009aec <HAL_TIM_PWM_Start+0x184>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d00e      	beq.n	8009a9e <HAL_TIM_PWM_Start+0x136>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a16      	ldr	r2, [pc, #88]	; (8009ae0 <HAL_TIM_PWM_Start+0x178>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d009      	beq.n	8009a9e <HAL_TIM_PWM_Start+0x136>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a18      	ldr	r2, [pc, #96]	; (8009af0 <HAL_TIM_PWM_Start+0x188>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d004      	beq.n	8009a9e <HAL_TIM_PWM_Start+0x136>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a16      	ldr	r2, [pc, #88]	; (8009af4 <HAL_TIM_PWM_Start+0x18c>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d111      	bne.n	8009ac2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	f003 0307 	and.w	r3, r3, #7
 8009aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b06      	cmp	r3, #6
 8009aae:	d010      	beq.n	8009ad2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f042 0201 	orr.w	r2, r2, #1
 8009abe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ac0:	e007      	b.n	8009ad2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f042 0201 	orr.w	r2, r2, #1
 8009ad0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	40010000 	.word	0x40010000
 8009ae0:	40010400 	.word	0x40010400
 8009ae4:	40000400 	.word	0x40000400
 8009ae8:	40000800 	.word	0x40000800
 8009aec:	40000c00 	.word	0x40000c00
 8009af0:	40014000 	.word	0x40014000
 8009af4:	40001800 	.word	0x40001800

08009af8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009b06:	2300      	movs	r3, #0
 8009b08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d109      	bne.n	8009b24 <HAL_TIM_PWM_Start_DMA+0x2c>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	bf0c      	ite	eq
 8009b1c:	2301      	moveq	r3, #1
 8009b1e:	2300      	movne	r3, #0
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	e022      	b.n	8009b6a <HAL_TIM_PWM_Start_DMA+0x72>
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	2b04      	cmp	r3, #4
 8009b28:	d109      	bne.n	8009b3e <HAL_TIM_PWM_Start_DMA+0x46>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	bf0c      	ite	eq
 8009b36:	2301      	moveq	r3, #1
 8009b38:	2300      	movne	r3, #0
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	e015      	b.n	8009b6a <HAL_TIM_PWM_Start_DMA+0x72>
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	2b08      	cmp	r3, #8
 8009b42:	d109      	bne.n	8009b58 <HAL_TIM_PWM_Start_DMA+0x60>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	bf0c      	ite	eq
 8009b50:	2301      	moveq	r3, #1
 8009b52:	2300      	movne	r3, #0
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	e008      	b.n	8009b6a <HAL_TIM_PWM_Start_DMA+0x72>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	bf0c      	ite	eq
 8009b64:	2301      	moveq	r3, #1
 8009b66:	2300      	movne	r3, #0
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d001      	beq.n	8009b72 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8009b6e:	2302      	movs	r3, #2
 8009b70:	e171      	b.n	8009e56 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d109      	bne.n	8009b8c <HAL_TIM_PWM_Start_DMA+0x94>
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	bf0c      	ite	eq
 8009b84:	2301      	moveq	r3, #1
 8009b86:	2300      	movne	r3, #0
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	e022      	b.n	8009bd2 <HAL_TIM_PWM_Start_DMA+0xda>
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	2b04      	cmp	r3, #4
 8009b90:	d109      	bne.n	8009ba6 <HAL_TIM_PWM_Start_DMA+0xae>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	bf0c      	ite	eq
 8009b9e:	2301      	moveq	r3, #1
 8009ba0:	2300      	movne	r3, #0
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	e015      	b.n	8009bd2 <HAL_TIM_PWM_Start_DMA+0xda>
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	2b08      	cmp	r3, #8
 8009baa:	d109      	bne.n	8009bc0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	bf0c      	ite	eq
 8009bb8:	2301      	moveq	r3, #1
 8009bba:	2300      	movne	r3, #0
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	e008      	b.n	8009bd2 <HAL_TIM_PWM_Start_DMA+0xda>
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	bf0c      	ite	eq
 8009bcc:	2301      	moveq	r3, #1
 8009bce:	2300      	movne	r3, #0
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d024      	beq.n	8009c20 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d104      	bne.n	8009be6 <HAL_TIM_PWM_Start_DMA+0xee>
 8009bdc:	887b      	ldrh	r3, [r7, #2]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e137      	b.n	8009e56 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d104      	bne.n	8009bf6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2202      	movs	r2, #2
 8009bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bf4:	e016      	b.n	8009c24 <HAL_TIM_PWM_Start_DMA+0x12c>
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	2b04      	cmp	r3, #4
 8009bfa:	d104      	bne.n	8009c06 <HAL_TIM_PWM_Start_DMA+0x10e>
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2202      	movs	r2, #2
 8009c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c04:	e00e      	b.n	8009c24 <HAL_TIM_PWM_Start_DMA+0x12c>
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	2b08      	cmp	r3, #8
 8009c0a:	d104      	bne.n	8009c16 <HAL_TIM_PWM_Start_DMA+0x11e>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c14:	e006      	b.n	8009c24 <HAL_TIM_PWM_Start_DMA+0x12c>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2202      	movs	r2, #2
 8009c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c1e:	e001      	b.n	8009c24 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e118      	b.n	8009e56 <HAL_TIM_PWM_Start_DMA+0x35e>
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	2b0c      	cmp	r3, #12
 8009c28:	f200 80ae 	bhi.w	8009d88 <HAL_TIM_PWM_Start_DMA+0x290>
 8009c2c:	a201      	add	r2, pc, #4	; (adr r2, 8009c34 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8009c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c32:	bf00      	nop
 8009c34:	08009c69 	.word	0x08009c69
 8009c38:	08009d89 	.word	0x08009d89
 8009c3c:	08009d89 	.word	0x08009d89
 8009c40:	08009d89 	.word	0x08009d89
 8009c44:	08009cb1 	.word	0x08009cb1
 8009c48:	08009d89 	.word	0x08009d89
 8009c4c:	08009d89 	.word	0x08009d89
 8009c50:	08009d89 	.word	0x08009d89
 8009c54:	08009cf9 	.word	0x08009cf9
 8009c58:	08009d89 	.word	0x08009d89
 8009c5c:	08009d89 	.word	0x08009d89
 8009c60:	08009d89 	.word	0x08009d89
 8009c64:	08009d41 	.word	0x08009d41
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6c:	4a7c      	ldr	r2, [pc, #496]	; (8009e60 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009c6e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c74:	4a7b      	ldr	r2, [pc, #492]	; (8009e64 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009c76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7c:	4a7a      	ldr	r2, [pc, #488]	; (8009e68 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009c7e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009c84:	6879      	ldr	r1, [r7, #4]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3334      	adds	r3, #52	; 0x34
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	887b      	ldrh	r3, [r7, #2]
 8009c90:	f7fb fb22 	bl	80052d8 <HAL_DMA_Start_IT>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d001      	beq.n	8009c9e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e0db      	b.n	8009e56 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68da      	ldr	r2, [r3, #12]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cac:	60da      	str	r2, [r3, #12]
      break;
 8009cae:	e06e      	b.n	8009d8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb4:	4a6a      	ldr	r2, [pc, #424]	; (8009e60 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009cb6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cbc:	4a69      	ldr	r2, [pc, #420]	; (8009e64 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009cbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc4:	4a68      	ldr	r2, [pc, #416]	; (8009e68 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009cc6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009ccc:	6879      	ldr	r1, [r7, #4]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	3338      	adds	r3, #56	; 0x38
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	887b      	ldrh	r3, [r7, #2]
 8009cd8:	f7fb fafe 	bl	80052d8 <HAL_DMA_Start_IT>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e0b7      	b.n	8009e56 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68da      	ldr	r2, [r3, #12]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009cf4:	60da      	str	r2, [r3, #12]
      break;
 8009cf6:	e04a      	b.n	8009d8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfc:	4a58      	ldr	r2, [pc, #352]	; (8009e60 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009cfe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d04:	4a57      	ldr	r2, [pc, #348]	; (8009e64 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009d06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0c:	4a56      	ldr	r2, [pc, #344]	; (8009e68 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009d0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009d14:	6879      	ldr	r1, [r7, #4]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	333c      	adds	r3, #60	; 0x3c
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	887b      	ldrh	r3, [r7, #2]
 8009d20:	f7fb fada 	bl	80052d8 <HAL_DMA_Start_IT>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d001      	beq.n	8009d2e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e093      	b.n	8009e56 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68da      	ldr	r2, [r3, #12]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d3c:	60da      	str	r2, [r3, #12]
      break;
 8009d3e:	e026      	b.n	8009d8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d44:	4a46      	ldr	r2, [pc, #280]	; (8009e60 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009d46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4c:	4a45      	ldr	r2, [pc, #276]	; (8009e64 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009d4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d54:	4a44      	ldr	r2, [pc, #272]	; (8009e68 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009d56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009d5c:	6879      	ldr	r1, [r7, #4]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	3340      	adds	r3, #64	; 0x40
 8009d64:	461a      	mov	r2, r3
 8009d66:	887b      	ldrh	r3, [r7, #2]
 8009d68:	f7fb fab6 	bl	80052d8 <HAL_DMA_Start_IT>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e06f      	b.n	8009e56 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68da      	ldr	r2, [r3, #12]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009d84:	60da      	str	r2, [r3, #12]
      break;
 8009d86:	e002      	b.n	8009d8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8009d8e:	7dfb      	ldrb	r3, [r7, #23]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d15f      	bne.n	8009e54 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	68b9      	ldr	r1, [r7, #8]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 fefb 	bl	800ab98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a31      	ldr	r2, [pc, #196]	; (8009e6c <HAL_TIM_PWM_Start_DMA+0x374>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d004      	beq.n	8009db6 <HAL_TIM_PWM_Start_DMA+0x2be>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a2f      	ldr	r2, [pc, #188]	; (8009e70 <HAL_TIM_PWM_Start_DMA+0x378>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d101      	bne.n	8009dba <HAL_TIM_PWM_Start_DMA+0x2c2>
 8009db6:	2301      	movs	r3, #1
 8009db8:	e000      	b.n	8009dbc <HAL_TIM_PWM_Start_DMA+0x2c4>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d007      	beq.n	8009dd0 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009dce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a25      	ldr	r2, [pc, #148]	; (8009e6c <HAL_TIM_PWM_Start_DMA+0x374>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d022      	beq.n	8009e20 <HAL_TIM_PWM_Start_DMA+0x328>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009de2:	d01d      	beq.n	8009e20 <HAL_TIM_PWM_Start_DMA+0x328>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a22      	ldr	r2, [pc, #136]	; (8009e74 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d018      	beq.n	8009e20 <HAL_TIM_PWM_Start_DMA+0x328>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a21      	ldr	r2, [pc, #132]	; (8009e78 <HAL_TIM_PWM_Start_DMA+0x380>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d013      	beq.n	8009e20 <HAL_TIM_PWM_Start_DMA+0x328>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a1f      	ldr	r2, [pc, #124]	; (8009e7c <HAL_TIM_PWM_Start_DMA+0x384>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d00e      	beq.n	8009e20 <HAL_TIM_PWM_Start_DMA+0x328>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a1a      	ldr	r2, [pc, #104]	; (8009e70 <HAL_TIM_PWM_Start_DMA+0x378>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d009      	beq.n	8009e20 <HAL_TIM_PWM_Start_DMA+0x328>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a1b      	ldr	r2, [pc, #108]	; (8009e80 <HAL_TIM_PWM_Start_DMA+0x388>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d004      	beq.n	8009e20 <HAL_TIM_PWM_Start_DMA+0x328>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a1a      	ldr	r2, [pc, #104]	; (8009e84 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d111      	bne.n	8009e44 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	f003 0307 	and.w	r3, r3, #7
 8009e2a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	2b06      	cmp	r3, #6
 8009e30:	d010      	beq.n	8009e54 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f042 0201 	orr.w	r2, r2, #1
 8009e40:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e42:	e007      	b.n	8009e54 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f042 0201 	orr.w	r2, r2, #1
 8009e52:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	0800a4b5 	.word	0x0800a4b5
 8009e64:	0800a55d 	.word	0x0800a55d
 8009e68:	0800a423 	.word	0x0800a423
 8009e6c:	40010000 	.word	0x40010000
 8009e70:	40010400 	.word	0x40010400
 8009e74:	40000400 	.word	0x40000400
 8009e78:	40000800 	.word	0x40000800
 8009e7c:	40000c00 	.word	0x40000c00
 8009e80:	40014000 	.word	0x40014000
 8009e84:	40001800 	.word	0x40001800

08009e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	f003 0302 	and.w	r3, r3, #2
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d122      	bne.n	8009ee4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	f003 0302 	and.w	r3, r3, #2
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d11b      	bne.n	8009ee4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f06f 0202 	mvn.w	r2, #2
 8009eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	f003 0303 	and.w	r3, r3, #3
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d003      	beq.n	8009ed2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 fa77 	bl	800a3be <HAL_TIM_IC_CaptureCallback>
 8009ed0:	e005      	b.n	8009ede <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fa69 	bl	800a3aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 fa7a 	bl	800a3d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	f003 0304 	and.w	r3, r3, #4
 8009eee:	2b04      	cmp	r3, #4
 8009ef0:	d122      	bne.n	8009f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	f003 0304 	and.w	r3, r3, #4
 8009efc:	2b04      	cmp	r3, #4
 8009efe:	d11b      	bne.n	8009f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f06f 0204 	mvn.w	r2, #4
 8009f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2202      	movs	r2, #2
 8009f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d003      	beq.n	8009f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fa4d 	bl	800a3be <HAL_TIM_IC_CaptureCallback>
 8009f24:	e005      	b.n	8009f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fa3f 	bl	800a3aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 fa50 	bl	800a3d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	f003 0308 	and.w	r3, r3, #8
 8009f42:	2b08      	cmp	r3, #8
 8009f44:	d122      	bne.n	8009f8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	f003 0308 	and.w	r3, r3, #8
 8009f50:	2b08      	cmp	r3, #8
 8009f52:	d11b      	bne.n	8009f8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f06f 0208 	mvn.w	r2, #8
 8009f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2204      	movs	r2, #4
 8009f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	f003 0303 	and.w	r3, r3, #3
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d003      	beq.n	8009f7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fa23 	bl	800a3be <HAL_TIM_IC_CaptureCallback>
 8009f78:	e005      	b.n	8009f86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 fa15 	bl	800a3aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fa26 	bl	800a3d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	f003 0310 	and.w	r3, r3, #16
 8009f96:	2b10      	cmp	r3, #16
 8009f98:	d122      	bne.n	8009fe0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	f003 0310 	and.w	r3, r3, #16
 8009fa4:	2b10      	cmp	r3, #16
 8009fa6:	d11b      	bne.n	8009fe0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f06f 0210 	mvn.w	r2, #16
 8009fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2208      	movs	r2, #8
 8009fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	69db      	ldr	r3, [r3, #28]
 8009fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d003      	beq.n	8009fce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f9f9 	bl	800a3be <HAL_TIM_IC_CaptureCallback>
 8009fcc:	e005      	b.n	8009fda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f9eb 	bl	800a3aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f9fc 	bl	800a3d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d10e      	bne.n	800a00c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	f003 0301 	and.w	r3, r3, #1
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d107      	bne.n	800a00c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f06f 0201 	mvn.w	r2, #1
 800a004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f7f9 fb14 	bl	8003634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a016:	2b80      	cmp	r3, #128	; 0x80
 800a018:	d10e      	bne.n	800a038 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a024:	2b80      	cmp	r3, #128	; 0x80
 800a026:	d107      	bne.n	800a038 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 feae 	bl	800ad94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a042:	2b40      	cmp	r3, #64	; 0x40
 800a044:	d10e      	bne.n	800a064 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a050:	2b40      	cmp	r3, #64	; 0x40
 800a052:	d107      	bne.n	800a064 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a05c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 f9cb 	bl	800a3fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	f003 0320 	and.w	r3, r3, #32
 800a06e:	2b20      	cmp	r3, #32
 800a070:	d10e      	bne.n	800a090 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	f003 0320 	and.w	r3, r3, #32
 800a07c:	2b20      	cmp	r3, #32
 800a07e:	d107      	bne.n	800a090 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f06f 0220 	mvn.w	r2, #32
 800a088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fe78 	bl	800ad80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a090:	bf00      	nop
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d101      	bne.n	800a0b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	e0ae      	b.n	800a214 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2b0c      	cmp	r3, #12
 800a0c2:	f200 809f 	bhi.w	800a204 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a0c6:	a201      	add	r2, pc, #4	; (adr r2, 800a0cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0cc:	0800a101 	.word	0x0800a101
 800a0d0:	0800a205 	.word	0x0800a205
 800a0d4:	0800a205 	.word	0x0800a205
 800a0d8:	0800a205 	.word	0x0800a205
 800a0dc:	0800a141 	.word	0x0800a141
 800a0e0:	0800a205 	.word	0x0800a205
 800a0e4:	0800a205 	.word	0x0800a205
 800a0e8:	0800a205 	.word	0x0800a205
 800a0ec:	0800a183 	.word	0x0800a183
 800a0f0:	0800a205 	.word	0x0800a205
 800a0f4:	0800a205 	.word	0x0800a205
 800a0f8:	0800a205 	.word	0x0800a205
 800a0fc:	0800a1c3 	.word	0x0800a1c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68b9      	ldr	r1, [r7, #8]
 800a106:	4618      	mov	r0, r3
 800a108:	f000 fafc 	bl	800a704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	699a      	ldr	r2, [r3, #24]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f042 0208 	orr.w	r2, r2, #8
 800a11a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	699a      	ldr	r2, [r3, #24]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f022 0204 	bic.w	r2, r2, #4
 800a12a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6999      	ldr	r1, [r3, #24]
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	691a      	ldr	r2, [r3, #16]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	430a      	orrs	r2, r1
 800a13c:	619a      	str	r2, [r3, #24]
      break;
 800a13e:	e064      	b.n	800a20a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	68b9      	ldr	r1, [r7, #8]
 800a146:	4618      	mov	r0, r3
 800a148:	f000 fb4c 	bl	800a7e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	699a      	ldr	r2, [r3, #24]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a15a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	699a      	ldr	r2, [r3, #24]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a16a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6999      	ldr	r1, [r3, #24]
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	021a      	lsls	r2, r3, #8
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	430a      	orrs	r2, r1
 800a17e:	619a      	str	r2, [r3, #24]
      break;
 800a180:	e043      	b.n	800a20a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68b9      	ldr	r1, [r7, #8]
 800a188:	4618      	mov	r0, r3
 800a18a:	f000 fba1 	bl	800a8d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	69da      	ldr	r2, [r3, #28]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f042 0208 	orr.w	r2, r2, #8
 800a19c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	69da      	ldr	r2, [r3, #28]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f022 0204 	bic.w	r2, r2, #4
 800a1ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	69d9      	ldr	r1, [r3, #28]
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	691a      	ldr	r2, [r3, #16]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	430a      	orrs	r2, r1
 800a1be:	61da      	str	r2, [r3, #28]
      break;
 800a1c0:	e023      	b.n	800a20a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	68b9      	ldr	r1, [r7, #8]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f000 fbf5 	bl	800a9b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	69da      	ldr	r2, [r3, #28]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	69da      	ldr	r2, [r3, #28]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	69d9      	ldr	r1, [r3, #28]
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	021a      	lsls	r2, r3, #8
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	430a      	orrs	r2, r1
 800a200:	61da      	str	r2, [r3, #28]
      break;
 800a202:	e002      	b.n	800a20a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	75fb      	strb	r3, [r7, #23]
      break;
 800a208:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a212:	7dfb      	ldrb	r3, [r7, #23]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3718      	adds	r7, #24
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a230:	2b01      	cmp	r3, #1
 800a232:	d101      	bne.n	800a238 <HAL_TIM_ConfigClockSource+0x1c>
 800a234:	2302      	movs	r3, #2
 800a236:	e0b4      	b.n	800a3a2 <HAL_TIM_ConfigClockSource+0x186>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2202      	movs	r2, #2
 800a244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a25e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a270:	d03e      	beq.n	800a2f0 <HAL_TIM_ConfigClockSource+0xd4>
 800a272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a276:	f200 8087 	bhi.w	800a388 <HAL_TIM_ConfigClockSource+0x16c>
 800a27a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a27e:	f000 8086 	beq.w	800a38e <HAL_TIM_ConfigClockSource+0x172>
 800a282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a286:	d87f      	bhi.n	800a388 <HAL_TIM_ConfigClockSource+0x16c>
 800a288:	2b70      	cmp	r3, #112	; 0x70
 800a28a:	d01a      	beq.n	800a2c2 <HAL_TIM_ConfigClockSource+0xa6>
 800a28c:	2b70      	cmp	r3, #112	; 0x70
 800a28e:	d87b      	bhi.n	800a388 <HAL_TIM_ConfigClockSource+0x16c>
 800a290:	2b60      	cmp	r3, #96	; 0x60
 800a292:	d050      	beq.n	800a336 <HAL_TIM_ConfigClockSource+0x11a>
 800a294:	2b60      	cmp	r3, #96	; 0x60
 800a296:	d877      	bhi.n	800a388 <HAL_TIM_ConfigClockSource+0x16c>
 800a298:	2b50      	cmp	r3, #80	; 0x50
 800a29a:	d03c      	beq.n	800a316 <HAL_TIM_ConfigClockSource+0xfa>
 800a29c:	2b50      	cmp	r3, #80	; 0x50
 800a29e:	d873      	bhi.n	800a388 <HAL_TIM_ConfigClockSource+0x16c>
 800a2a0:	2b40      	cmp	r3, #64	; 0x40
 800a2a2:	d058      	beq.n	800a356 <HAL_TIM_ConfigClockSource+0x13a>
 800a2a4:	2b40      	cmp	r3, #64	; 0x40
 800a2a6:	d86f      	bhi.n	800a388 <HAL_TIM_ConfigClockSource+0x16c>
 800a2a8:	2b30      	cmp	r3, #48	; 0x30
 800a2aa:	d064      	beq.n	800a376 <HAL_TIM_ConfigClockSource+0x15a>
 800a2ac:	2b30      	cmp	r3, #48	; 0x30
 800a2ae:	d86b      	bhi.n	800a388 <HAL_TIM_ConfigClockSource+0x16c>
 800a2b0:	2b20      	cmp	r3, #32
 800a2b2:	d060      	beq.n	800a376 <HAL_TIM_ConfigClockSource+0x15a>
 800a2b4:	2b20      	cmp	r3, #32
 800a2b6:	d867      	bhi.n	800a388 <HAL_TIM_ConfigClockSource+0x16c>
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d05c      	beq.n	800a376 <HAL_TIM_ConfigClockSource+0x15a>
 800a2bc:	2b10      	cmp	r3, #16
 800a2be:	d05a      	beq.n	800a376 <HAL_TIM_ConfigClockSource+0x15a>
 800a2c0:	e062      	b.n	800a388 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6818      	ldr	r0, [r3, #0]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	6899      	ldr	r1, [r3, #8]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	685a      	ldr	r2, [r3, #4]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	f000 fc41 	bl	800ab58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a2e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68ba      	ldr	r2, [r7, #8]
 800a2ec:	609a      	str	r2, [r3, #8]
      break;
 800a2ee:	e04f      	b.n	800a390 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6818      	ldr	r0, [r3, #0]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	6899      	ldr	r1, [r3, #8]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	685a      	ldr	r2, [r3, #4]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	f000 fc2a 	bl	800ab58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	689a      	ldr	r2, [r3, #8]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a312:	609a      	str	r2, [r3, #8]
      break;
 800a314:	e03c      	b.n	800a390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6818      	ldr	r0, [r3, #0]
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	6859      	ldr	r1, [r3, #4]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	461a      	mov	r2, r3
 800a324:	f000 fb9e 	bl	800aa64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2150      	movs	r1, #80	; 0x50
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 fbf7 	bl	800ab22 <TIM_ITRx_SetConfig>
      break;
 800a334:	e02c      	b.n	800a390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6818      	ldr	r0, [r3, #0]
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	6859      	ldr	r1, [r3, #4]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	461a      	mov	r2, r3
 800a344:	f000 fbbd 	bl	800aac2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2160      	movs	r1, #96	; 0x60
 800a34e:	4618      	mov	r0, r3
 800a350:	f000 fbe7 	bl	800ab22 <TIM_ITRx_SetConfig>
      break;
 800a354:	e01c      	b.n	800a390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6818      	ldr	r0, [r3, #0]
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	6859      	ldr	r1, [r3, #4]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	461a      	mov	r2, r3
 800a364:	f000 fb7e 	bl	800aa64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2140      	movs	r1, #64	; 0x40
 800a36e:	4618      	mov	r0, r3
 800a370:	f000 fbd7 	bl	800ab22 <TIM_ITRx_SetConfig>
      break;
 800a374:	e00c      	b.n	800a390 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4619      	mov	r1, r3
 800a380:	4610      	mov	r0, r2
 800a382:	f000 fbce 	bl	800ab22 <TIM_ITRx_SetConfig>
      break;
 800a386:	e003      	b.n	800a390 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	73fb      	strb	r3, [r7, #15]
      break;
 800a38c:	e000      	b.n	800a390 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a38e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b083      	sub	sp, #12
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3b2:	bf00      	nop
 800a3b4:	370c      	adds	r7, #12
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr

0800a3be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3be:	b480      	push	{r7}
 800a3c0:	b083      	sub	sp, #12
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3c6:	bf00      	nop
 800a3c8:	370c      	adds	r7, #12
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b083      	sub	sp, #12
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3da:	bf00      	nop
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	b083      	sub	sp, #12
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a3ee:	bf00      	nop
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b083      	sub	sp, #12
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a402:	bf00      	nop
 800a404:	370c      	adds	r7, #12
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr

0800a40e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a40e:	b480      	push	{r7}
 800a410:	b083      	sub	sp, #12
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a416:	bf00      	nop
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	429a      	cmp	r2, r3
 800a438:	d107      	bne.n	800a44a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2201      	movs	r2, #1
 800a43e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a448:	e02a      	b.n	800a4a0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	429a      	cmp	r2, r3
 800a452:	d107      	bne.n	800a464 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2202      	movs	r2, #2
 800a458:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a462:	e01d      	b.n	800a4a0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d107      	bne.n	800a47e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2204      	movs	r2, #4
 800a472:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a47c:	e010      	b.n	800a4a0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	429a      	cmp	r2, r3
 800a486:	d107      	bne.n	800a498 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2208      	movs	r2, #8
 800a48c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2201      	movs	r2, #1
 800a492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a496:	e003      	b.n	800a4a0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f7ff ffb4 	bl	800a40e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	771a      	strb	r2, [r3, #28]
}
 800a4ac:	bf00      	nop
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d10b      	bne.n	800a4e4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	69db      	ldr	r3, [r3, #28]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d136      	bne.n	800a548 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4e2:	e031      	b.n	800a548 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d10b      	bne.n	800a506 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2202      	movs	r2, #2
 800a4f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	69db      	ldr	r3, [r3, #28]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d125      	bne.n	800a548 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a504:	e020      	b.n	800a548 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d10b      	bne.n	800a528 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2204      	movs	r2, #4
 800a514:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	69db      	ldr	r3, [r3, #28]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d114      	bne.n	800a548 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2201      	movs	r2, #1
 800a522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a526:	e00f      	b.n	800a548 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d10a      	bne.n	800a548 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2208      	movs	r2, #8
 800a536:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	69db      	ldr	r3, [r3, #28]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d103      	bne.n	800a548 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f7ff ff42 	bl	800a3d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	771a      	strb	r2, [r3, #28]
}
 800a554:	bf00      	nop
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a568:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	429a      	cmp	r2, r3
 800a572:	d103      	bne.n	800a57c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2201      	movs	r2, #1
 800a578:	771a      	strb	r2, [r3, #28]
 800a57a:	e019      	b.n	800a5b0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	429a      	cmp	r2, r3
 800a584:	d103      	bne.n	800a58e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2202      	movs	r2, #2
 800a58a:	771a      	strb	r2, [r3, #28]
 800a58c:	e010      	b.n	800a5b0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	429a      	cmp	r2, r3
 800a596:	d103      	bne.n	800a5a0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2204      	movs	r2, #4
 800a59c:	771a      	strb	r2, [r3, #28]
 800a59e:	e007      	b.n	800a5b0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d102      	bne.n	800a5b0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2208      	movs	r2, #8
 800a5ae:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f7ff ff18 	bl	800a3e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	771a      	strb	r2, [r3, #28]
}
 800a5bc:	bf00      	nop
 800a5be:	3710      	adds	r7, #16
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a40      	ldr	r2, [pc, #256]	; (800a6d8 <TIM_Base_SetConfig+0x114>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d013      	beq.n	800a604 <TIM_Base_SetConfig+0x40>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5e2:	d00f      	beq.n	800a604 <TIM_Base_SetConfig+0x40>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a3d      	ldr	r2, [pc, #244]	; (800a6dc <TIM_Base_SetConfig+0x118>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d00b      	beq.n	800a604 <TIM_Base_SetConfig+0x40>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a3c      	ldr	r2, [pc, #240]	; (800a6e0 <TIM_Base_SetConfig+0x11c>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d007      	beq.n	800a604 <TIM_Base_SetConfig+0x40>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a3b      	ldr	r2, [pc, #236]	; (800a6e4 <TIM_Base_SetConfig+0x120>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d003      	beq.n	800a604 <TIM_Base_SetConfig+0x40>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a3a      	ldr	r2, [pc, #232]	; (800a6e8 <TIM_Base_SetConfig+0x124>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d108      	bne.n	800a616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a60a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	4313      	orrs	r3, r2
 800a614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a2f      	ldr	r2, [pc, #188]	; (800a6d8 <TIM_Base_SetConfig+0x114>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d02b      	beq.n	800a676 <TIM_Base_SetConfig+0xb2>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a624:	d027      	beq.n	800a676 <TIM_Base_SetConfig+0xb2>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a2c      	ldr	r2, [pc, #176]	; (800a6dc <TIM_Base_SetConfig+0x118>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d023      	beq.n	800a676 <TIM_Base_SetConfig+0xb2>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a2b      	ldr	r2, [pc, #172]	; (800a6e0 <TIM_Base_SetConfig+0x11c>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d01f      	beq.n	800a676 <TIM_Base_SetConfig+0xb2>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a2a      	ldr	r2, [pc, #168]	; (800a6e4 <TIM_Base_SetConfig+0x120>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d01b      	beq.n	800a676 <TIM_Base_SetConfig+0xb2>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a29      	ldr	r2, [pc, #164]	; (800a6e8 <TIM_Base_SetConfig+0x124>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d017      	beq.n	800a676 <TIM_Base_SetConfig+0xb2>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a28      	ldr	r2, [pc, #160]	; (800a6ec <TIM_Base_SetConfig+0x128>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d013      	beq.n	800a676 <TIM_Base_SetConfig+0xb2>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a27      	ldr	r2, [pc, #156]	; (800a6f0 <TIM_Base_SetConfig+0x12c>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d00f      	beq.n	800a676 <TIM_Base_SetConfig+0xb2>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a26      	ldr	r2, [pc, #152]	; (800a6f4 <TIM_Base_SetConfig+0x130>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d00b      	beq.n	800a676 <TIM_Base_SetConfig+0xb2>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a25      	ldr	r2, [pc, #148]	; (800a6f8 <TIM_Base_SetConfig+0x134>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d007      	beq.n	800a676 <TIM_Base_SetConfig+0xb2>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a24      	ldr	r2, [pc, #144]	; (800a6fc <TIM_Base_SetConfig+0x138>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d003      	beq.n	800a676 <TIM_Base_SetConfig+0xb2>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a23      	ldr	r2, [pc, #140]	; (800a700 <TIM_Base_SetConfig+0x13c>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d108      	bne.n	800a688 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a67c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	4313      	orrs	r3, r2
 800a686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	695b      	ldr	r3, [r3, #20]
 800a692:	4313      	orrs	r3, r2
 800a694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	689a      	ldr	r2, [r3, #8]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a0a      	ldr	r2, [pc, #40]	; (800a6d8 <TIM_Base_SetConfig+0x114>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d003      	beq.n	800a6bc <TIM_Base_SetConfig+0xf8>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a0c      	ldr	r2, [pc, #48]	; (800a6e8 <TIM_Base_SetConfig+0x124>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d103      	bne.n	800a6c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	691a      	ldr	r2, [r3, #16]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	615a      	str	r2, [r3, #20]
}
 800a6ca:	bf00      	nop
 800a6cc:	3714      	adds	r7, #20
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop
 800a6d8:	40010000 	.word	0x40010000
 800a6dc:	40000400 	.word	0x40000400
 800a6e0:	40000800 	.word	0x40000800
 800a6e4:	40000c00 	.word	0x40000c00
 800a6e8:	40010400 	.word	0x40010400
 800a6ec:	40014000 	.word	0x40014000
 800a6f0:	40014400 	.word	0x40014400
 800a6f4:	40014800 	.word	0x40014800
 800a6f8:	40001800 	.word	0x40001800
 800a6fc:	40001c00 	.word	0x40001c00
 800a700:	40002000 	.word	0x40002000

0800a704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a704:	b480      	push	{r7}
 800a706:	b087      	sub	sp, #28
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	f023 0201 	bic.w	r2, r3, #1
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f023 0303 	bic.w	r3, r3, #3
 800a73a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	4313      	orrs	r3, r2
 800a744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	f023 0302 	bic.w	r3, r3, #2
 800a74c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	697a      	ldr	r2, [r7, #20]
 800a754:	4313      	orrs	r3, r2
 800a756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a20      	ldr	r2, [pc, #128]	; (800a7dc <TIM_OC1_SetConfig+0xd8>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d003      	beq.n	800a768 <TIM_OC1_SetConfig+0x64>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a1f      	ldr	r2, [pc, #124]	; (800a7e0 <TIM_OC1_SetConfig+0xdc>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d10c      	bne.n	800a782 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	f023 0308 	bic.w	r3, r3, #8
 800a76e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	697a      	ldr	r2, [r7, #20]
 800a776:	4313      	orrs	r3, r2
 800a778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	f023 0304 	bic.w	r3, r3, #4
 800a780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a15      	ldr	r2, [pc, #84]	; (800a7dc <TIM_OC1_SetConfig+0xd8>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d003      	beq.n	800a792 <TIM_OC1_SetConfig+0x8e>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a14      	ldr	r2, [pc, #80]	; (800a7e0 <TIM_OC1_SetConfig+0xdc>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d111      	bne.n	800a7b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	693a      	ldr	r2, [r7, #16]
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	699b      	ldr	r3, [r3, #24]
 800a7b0:	693a      	ldr	r2, [r7, #16]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	693a      	ldr	r2, [r7, #16]
 800a7ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	697a      	ldr	r2, [r7, #20]
 800a7ce:	621a      	str	r2, [r3, #32]
}
 800a7d0:	bf00      	nop
 800a7d2:	371c      	adds	r7, #28
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	40010000 	.word	0x40010000
 800a7e0:	40010400 	.word	0x40010400

0800a7e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a1b      	ldr	r3, [r3, #32]
 800a7f2:	f023 0210 	bic.w	r2, r3, #16
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a1b      	ldr	r3, [r3, #32]
 800a7fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	699b      	ldr	r3, [r3, #24]
 800a80a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a81a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	021b      	lsls	r3, r3, #8
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	4313      	orrs	r3, r2
 800a826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	f023 0320 	bic.w	r3, r3, #32
 800a82e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	011b      	lsls	r3, r3, #4
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	4313      	orrs	r3, r2
 800a83a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a22      	ldr	r2, [pc, #136]	; (800a8c8 <TIM_OC2_SetConfig+0xe4>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d003      	beq.n	800a84c <TIM_OC2_SetConfig+0x68>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a21      	ldr	r2, [pc, #132]	; (800a8cc <TIM_OC2_SetConfig+0xe8>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d10d      	bne.n	800a868 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	011b      	lsls	r3, r3, #4
 800a85a:	697a      	ldr	r2, [r7, #20]
 800a85c:	4313      	orrs	r3, r2
 800a85e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a866:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4a17      	ldr	r2, [pc, #92]	; (800a8c8 <TIM_OC2_SetConfig+0xe4>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d003      	beq.n	800a878 <TIM_OC2_SetConfig+0x94>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a16      	ldr	r2, [pc, #88]	; (800a8cc <TIM_OC2_SetConfig+0xe8>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d113      	bne.n	800a8a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a87e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a886:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	695b      	ldr	r3, [r3, #20]
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	693a      	ldr	r2, [r7, #16]
 800a890:	4313      	orrs	r3, r2
 800a892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	699b      	ldr	r3, [r3, #24]
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	693a      	ldr	r2, [r7, #16]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	685a      	ldr	r2, [r3, #4]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	697a      	ldr	r2, [r7, #20]
 800a8b8:	621a      	str	r2, [r3, #32]
}
 800a8ba:	bf00      	nop
 800a8bc:	371c      	adds	r7, #28
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	40010000 	.word	0x40010000
 800a8cc:	40010400 	.word	0x40010400

0800a8d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b087      	sub	sp, #28
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a1b      	ldr	r3, [r3, #32]
 800a8ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	69db      	ldr	r3, [r3, #28]
 800a8f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f023 0303 	bic.w	r3, r3, #3
 800a906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	4313      	orrs	r3, r2
 800a910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	021b      	lsls	r3, r3, #8
 800a920:	697a      	ldr	r2, [r7, #20]
 800a922:	4313      	orrs	r3, r2
 800a924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a21      	ldr	r2, [pc, #132]	; (800a9b0 <TIM_OC3_SetConfig+0xe0>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d003      	beq.n	800a936 <TIM_OC3_SetConfig+0x66>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a20      	ldr	r2, [pc, #128]	; (800a9b4 <TIM_OC3_SetConfig+0xe4>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d10d      	bne.n	800a952 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a93c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	021b      	lsls	r3, r3, #8
 800a944:	697a      	ldr	r2, [r7, #20]
 800a946:	4313      	orrs	r3, r2
 800a948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a16      	ldr	r2, [pc, #88]	; (800a9b0 <TIM_OC3_SetConfig+0xe0>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d003      	beq.n	800a962 <TIM_OC3_SetConfig+0x92>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a15      	ldr	r2, [pc, #84]	; (800a9b4 <TIM_OC3_SetConfig+0xe4>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d113      	bne.n	800a98a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	011b      	lsls	r3, r3, #4
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	011b      	lsls	r3, r3, #4
 800a984:	693a      	ldr	r2, [r7, #16]
 800a986:	4313      	orrs	r3, r2
 800a988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	693a      	ldr	r2, [r7, #16]
 800a98e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	685a      	ldr	r2, [r3, #4]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	621a      	str	r2, [r3, #32]
}
 800a9a4:	bf00      	nop
 800a9a6:	371c      	adds	r7, #28
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr
 800a9b0:	40010000 	.word	0x40010000
 800a9b4:	40010400 	.word	0x40010400

0800a9b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b087      	sub	sp, #28
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a1b      	ldr	r3, [r3, #32]
 800a9c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a1b      	ldr	r3, [r3, #32]
 800a9d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	021b      	lsls	r3, r3, #8
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	031b      	lsls	r3, r3, #12
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a12      	ldr	r2, [pc, #72]	; (800aa5c <TIM_OC4_SetConfig+0xa4>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d003      	beq.n	800aa20 <TIM_OC4_SetConfig+0x68>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4a11      	ldr	r2, [pc, #68]	; (800aa60 <TIM_OC4_SetConfig+0xa8>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d109      	bne.n	800aa34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	019b      	lsls	r3, r3, #6
 800aa2e:	697a      	ldr	r2, [r7, #20]
 800aa30:	4313      	orrs	r3, r2
 800aa32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	685a      	ldr	r2, [r3, #4]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	693a      	ldr	r2, [r7, #16]
 800aa4c:	621a      	str	r2, [r3, #32]
}
 800aa4e:	bf00      	nop
 800aa50:	371c      	adds	r7, #28
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	40010000 	.word	0x40010000
 800aa60:	40010400 	.word	0x40010400

0800aa64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b087      	sub	sp, #28
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6a1b      	ldr	r3, [r3, #32]
 800aa74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6a1b      	ldr	r3, [r3, #32]
 800aa7a:	f023 0201 	bic.w	r2, r3, #1
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	699b      	ldr	r3, [r3, #24]
 800aa86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	011b      	lsls	r3, r3, #4
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f023 030a 	bic.w	r3, r3, #10
 800aaa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	693a      	ldr	r2, [r7, #16]
 800aaae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	697a      	ldr	r2, [r7, #20]
 800aab4:	621a      	str	r2, [r3, #32]
}
 800aab6:	bf00      	nop
 800aab8:	371c      	adds	r7, #28
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aac2:	b480      	push	{r7}
 800aac4:	b087      	sub	sp, #28
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	60f8      	str	r0, [r7, #12]
 800aaca:	60b9      	str	r1, [r7, #8]
 800aacc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6a1b      	ldr	r3, [r3, #32]
 800aad2:	f023 0210 	bic.w	r2, r3, #16
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	699b      	ldr	r3, [r3, #24]
 800aade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6a1b      	ldr	r3, [r3, #32]
 800aae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aaec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	031b      	lsls	r3, r3, #12
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aafe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	011b      	lsls	r3, r3, #4
 800ab04:	693a      	ldr	r2, [r7, #16]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	697a      	ldr	r2, [r7, #20]
 800ab0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	621a      	str	r2, [r3, #32]
}
 800ab16:	bf00      	nop
 800ab18:	371c      	adds	r7, #28
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab22:	b480      	push	{r7}
 800ab24:	b085      	sub	sp, #20
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
 800ab2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab3a:	683a      	ldr	r2, [r7, #0]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	f043 0307 	orr.w	r3, r3, #7
 800ab44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	609a      	str	r2, [r3, #8]
}
 800ab4c:	bf00      	nop
 800ab4e:	3714      	adds	r7, #20
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b087      	sub	sp, #28
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
 800ab64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	021a      	lsls	r2, r3, #8
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	431a      	orrs	r2, r3
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	697a      	ldr	r2, [r7, #20]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	697a      	ldr	r2, [r7, #20]
 800ab8a:	609a      	str	r2, [r3, #8]
}
 800ab8c:	bf00      	nop
 800ab8e:	371c      	adds	r7, #28
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b087      	sub	sp, #28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	f003 031f 	and.w	r3, r3, #31
 800abaa:	2201      	movs	r2, #1
 800abac:	fa02 f303 	lsl.w	r3, r2, r3
 800abb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6a1a      	ldr	r2, [r3, #32]
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	43db      	mvns	r3, r3
 800abba:	401a      	ands	r2, r3
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6a1a      	ldr	r2, [r3, #32]
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	f003 031f 	and.w	r3, r3, #31
 800abca:	6879      	ldr	r1, [r7, #4]
 800abcc:	fa01 f303 	lsl.w	r3, r1, r3
 800abd0:	431a      	orrs	r2, r3
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	621a      	str	r2, [r3, #32]
}
 800abd6:	bf00      	nop
 800abd8:	371c      	adds	r7, #28
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
	...

0800abe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d101      	bne.n	800abfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abf8:	2302      	movs	r3, #2
 800abfa:	e05a      	b.n	800acb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2202      	movs	r2, #2
 800ac08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a21      	ldr	r2, [pc, #132]	; (800acc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d022      	beq.n	800ac86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac48:	d01d      	beq.n	800ac86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a1d      	ldr	r2, [pc, #116]	; (800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d018      	beq.n	800ac86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a1b      	ldr	r2, [pc, #108]	; (800acc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d013      	beq.n	800ac86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a1a      	ldr	r2, [pc, #104]	; (800accc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d00e      	beq.n	800ac86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a18      	ldr	r2, [pc, #96]	; (800acd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d009      	beq.n	800ac86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a17      	ldr	r2, [pc, #92]	; (800acd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d004      	beq.n	800ac86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a15      	ldr	r2, [pc, #84]	; (800acd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d10c      	bne.n	800aca0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	68ba      	ldr	r2, [r7, #8]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3714      	adds	r7, #20
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	40010000 	.word	0x40010000
 800acc4:	40000400 	.word	0x40000400
 800acc8:	40000800 	.word	0x40000800
 800accc:	40000c00 	.word	0x40000c00
 800acd0:	40010400 	.word	0x40010400
 800acd4:	40014000 	.word	0x40014000
 800acd8:	40001800 	.word	0x40001800

0800acdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ace6:	2300      	movs	r3, #0
 800ace8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d101      	bne.n	800acf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800acf4:	2302      	movs	r3, #2
 800acf6:	e03d      	b.n	800ad74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4313      	orrs	r3, r2
 800ad36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	695b      	ldr	r3, [r3, #20]
 800ad50:	4313      	orrs	r3, r2
 800ad52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	69db      	ldr	r3, [r3, #28]
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3714      	adds	r7, #20
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad88:	bf00      	nop
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad9c:	bf00      	nop
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800adb2:	2300      	movs	r3, #0
 800adb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800adb6:	2300      	movs	r3, #0
 800adb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d029      	beq.n	800ae16 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800adce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800add2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800addc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800ade2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800ade8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800adee:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800adf4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800adfa:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800ae00:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800ae06:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	601a      	str	r2, [r3, #0]
 800ae14:	e034      	b.n	800ae80 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae22:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ae2c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ae32:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ae46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae4a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae54:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800ae5a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800ae60:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800ae66:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800ae6c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae6e:	68ba      	ldr	r2, [r7, #8]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr

0800ae8e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ae8e:	b480      	push	{r7}
 800ae90:	b087      	sub	sp, #28
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	60f8      	str	r0, [r7, #12]
 800ae96:	60b9      	str	r1, [r7, #8]
 800ae98:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d02e      	beq.n	800af06 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aeb4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	3b01      	subs	r3, #1
 800aec2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800aec4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	3b01      	subs	r3, #1
 800aecc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800aece:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	3b01      	subs	r3, #1
 800aed6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800aed8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	3b01      	subs	r3, #1
 800aee0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800aee2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	695b      	ldr	r3, [r3, #20]
 800aee8:	3b01      	subs	r3, #1
 800aeea:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800aeec:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	3b01      	subs	r3, #1
 800aef4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800aef6:	4313      	orrs	r3, r2
 800aef8:	697a      	ldr	r2, [r7, #20]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	697a      	ldr	r2, [r7, #20]
 800af02:	609a      	str	r2, [r3, #8]
 800af04:	e03b      	b.n	800af7e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af16:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	3b01      	subs	r3, #1
 800af1e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	695b      	ldr	r3, [r3, #20]
 800af24:	3b01      	subs	r3, #1
 800af26:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800af28:	4313      	orrs	r3, r2
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	4313      	orrs	r3, r2
 800af2e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800af3c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	3b01      	subs	r3, #1
 800af4a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800af4c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	3b01      	subs	r3, #1
 800af54:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800af56:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	3b01      	subs	r3, #1
 800af5e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800af60:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	3b01      	subs	r3, #1
 800af68:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800af6a:	4313      	orrs	r3, r2
 800af6c:	693a      	ldr	r2, [r7, #16]
 800af6e:	4313      	orrs	r3, r2
 800af70:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	697a      	ldr	r2, [r7, #20]
 800af76:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	693a      	ldr	r2, [r7, #16]
 800af7c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	371c      	adds	r7, #28
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b086      	sub	sp, #24
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800af98:	2300      	movs	r3, #0
 800af9a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800af9c:	2300      	movs	r3, #0
 800af9e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800afa8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	3b01      	subs	r3, #1
 800afb0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800afb2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800afba:	4313      	orrs	r3, r2
 800afbc:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800afbe:	693a      	ldr	r2, [r7, #16]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800afc4:	f7f9 fa40 	bl	8004448 <HAL_GetTick>
 800afc8:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800afca:	e010      	b.n	800afee <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd2:	d00c      	beq.n	800afee <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d007      	beq.n	800afea <FMC_SDRAM_SendCommand+0x5e>
 800afda:	f7f9 fa35 	bl	8004448 <HAL_GetTick>
 800afde:	4602      	mov	r2, r0
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d201      	bcs.n	800afee <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800afea:	2303      	movs	r3, #3
 800afec:	e006      	b.n	800affc <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	699b      	ldr	r3, [r3, #24]
 800aff2:	f003 0320 	and.w	r3, r3, #32
 800aff6:	2b20      	cmp	r3, #32
 800aff8:	d0e8      	beq.n	800afcc <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800affa:	2300      	movs	r3, #0
}
 800affc:	4618      	mov	r0, r3
 800affe:	3718      	adds	r7, #24
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b004:	b084      	sub	sp, #16
 800b006:	b480      	push	{r7}
 800b008:	b085      	sub	sp, #20
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	f107 001c 	add.w	r0, r7, #28
 800b012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b016:	2300      	movs	r3, #0
 800b018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b01a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b01c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b01e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b022:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b024:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b026:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b02a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b02e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b030:	68fa      	ldr	r2, [r7, #12]
 800b032:	4313      	orrs	r3, r2
 800b034:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b03e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	431a      	orrs	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3714      	adds	r7, #20
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	b004      	add	sp, #16
 800b058:	4770      	bx	lr

0800b05a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b05a:	b480      	push	{r7}
 800b05c:	b083      	sub	sp, #12
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b068:	4618      	mov	r0, r3
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2203      	movs	r2, #3
 800b080:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b082:	2002      	movs	r0, #2
 800b084:	f7f9 f9ec 	bl	8004460 <HAL_Delay>
  
  return HAL_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3708      	adds	r7, #8
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b092:	b480      	push	{r7}
 800b094:	b083      	sub	sp, #12
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 0303 	and.w	r3, r3, #3
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	370c      	adds	r7, #12
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b0ae:	b480      	push	{r7}
 800b0b0:	b085      	sub	sp, #20
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b0cc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b0d2:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b0d8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b0e8:	f023 030f 	bic.w	r3, r3, #15
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	431a      	orrs	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3714      	adds	r7, #20
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr

0800b102 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b102:	b480      	push	{r7}
 800b104:	b083      	sub	sp, #12
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	b2db      	uxtb	r3, r3
}
 800b110:	4618      	mov	r0, r3
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	3314      	adds	r3, #20
 800b12a:	461a      	mov	r2, r3
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	4413      	add	r3, r2
 800b130:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
}  
 800b136:	4618      	mov	r0, r3
 800b138:	3714      	adds	r7, #20
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b142:	b480      	push	{r7}
 800b144:	b085      	sub	sp, #20
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	685a      	ldr	r2, [r3, #4]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b168:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b16e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b174:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	4313      	orrs	r3, r2
 800b17a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b180:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	431a      	orrs	r2, r3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b18c:	2300      	movs	r3, #0

}
 800b18e:	4618      	mov	r0, r3
 800b190:	3714      	adds	r7, #20
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr

0800b19a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b088      	sub	sp, #32
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
 800b1a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b1a8:	2310      	movs	r3, #16
 800b1aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1ac:	2340      	movs	r3, #64	; 0x40
 800b1ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1ba:	f107 0308 	add.w	r3, r7, #8
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f7ff ff74 	bl	800b0ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b1c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ca:	2110      	movs	r1, #16
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 fa45 	bl	800b65c <SDMMC_GetCmdResp1>
 800b1d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1d4:	69fb      	ldr	r3, [r7, #28]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3720      	adds	r7, #32
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b088      	sub	sp, #32
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
 800b1e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b1ec:	2311      	movs	r3, #17
 800b1ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1f0:	2340      	movs	r3, #64	; 0x40
 800b1f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1fe:	f107 0308 	add.w	r3, r7, #8
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f7ff ff52 	bl	800b0ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b20a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b20e:	2111      	movs	r1, #17
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 fa23 	bl	800b65c <SDMMC_GetCmdResp1>
 800b216:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b218:	69fb      	ldr	r3, [r7, #28]
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3720      	adds	r7, #32
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b088      	sub	sp, #32
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
 800b22a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b230:	2312      	movs	r3, #18
 800b232:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b234:	2340      	movs	r3, #64	; 0x40
 800b236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b238:	2300      	movs	r3, #0
 800b23a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b23c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b240:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b242:	f107 0308 	add.w	r3, r7, #8
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7ff ff30 	bl	800b0ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b24e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b252:	2112      	movs	r1, #18
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fa01 	bl	800b65c <SDMMC_GetCmdResp1>
 800b25a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b25c:	69fb      	ldr	r3, [r7, #28]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3720      	adds	r7, #32
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b088      	sub	sp, #32
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b274:	2318      	movs	r3, #24
 800b276:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b278:	2340      	movs	r3, #64	; 0x40
 800b27a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b27c:	2300      	movs	r3, #0
 800b27e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b284:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b286:	f107 0308 	add.w	r3, r7, #8
 800b28a:	4619      	mov	r1, r3
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f7ff ff0e 	bl	800b0ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b292:	f241 3288 	movw	r2, #5000	; 0x1388
 800b296:	2118      	movs	r1, #24
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f9df 	bl	800b65c <SDMMC_GetCmdResp1>
 800b29e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2a0:	69fb      	ldr	r3, [r7, #28]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3720      	adds	r7, #32
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b088      	sub	sp, #32
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
 800b2b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b2b8:	2319      	movs	r3, #25
 800b2ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2bc:	2340      	movs	r3, #64	; 0x40
 800b2be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2ca:	f107 0308 	add.w	r3, r7, #8
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f7ff feec 	bl	800b0ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b2d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2da:	2119      	movs	r1, #25
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 f9bd 	bl	800b65c <SDMMC_GetCmdResp1>
 800b2e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2e4:	69fb      	ldr	r3, [r7, #28]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3720      	adds	r7, #32
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b088      	sub	sp, #32
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b2fc:	230c      	movs	r3, #12
 800b2fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b300:	2340      	movs	r3, #64	; 0x40
 800b302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b304:	2300      	movs	r3, #0
 800b306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b30c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b30e:	f107 0308 	add.w	r3, r7, #8
 800b312:	4619      	mov	r1, r3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f7ff feca 	bl	800b0ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b31a:	4a05      	ldr	r2, [pc, #20]	; (800b330 <SDMMC_CmdStopTransfer+0x40>)
 800b31c:	210c      	movs	r1, #12
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f99c 	bl	800b65c <SDMMC_GetCmdResp1>
 800b324:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b326:	69fb      	ldr	r3, [r7, #28]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3720      	adds	r7, #32
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	05f5e100 	.word	0x05f5e100

0800b334 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b08a      	sub	sp, #40	; 0x28
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b344:	2307      	movs	r3, #7
 800b346:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b348:	2340      	movs	r3, #64	; 0x40
 800b34a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b34c:	2300      	movs	r3, #0
 800b34e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b354:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b356:	f107 0310 	add.w	r3, r7, #16
 800b35a:	4619      	mov	r1, r3
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f7ff fea6 	bl	800b0ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b362:	f241 3288 	movw	r2, #5000	; 0x1388
 800b366:	2107      	movs	r1, #7
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f000 f977 	bl	800b65c <SDMMC_GetCmdResp1>
 800b36e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b372:	4618      	mov	r0, r3
 800b374:	3728      	adds	r7, #40	; 0x28
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b088      	sub	sp, #32
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b382:	2300      	movs	r3, #0
 800b384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b386:	2300      	movs	r3, #0
 800b388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b38a:	2300      	movs	r3, #0
 800b38c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b38e:	2300      	movs	r3, #0
 800b390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b396:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b398:	f107 0308 	add.w	r3, r7, #8
 800b39c:	4619      	mov	r1, r3
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f7ff fe85 	bl	800b0ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 f92d 	bl	800b604 <SDMMC_GetCmdError>
 800b3aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3ac:	69fb      	ldr	r3, [r7, #28]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3720      	adds	r7, #32
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b088      	sub	sp, #32
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b3be:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b3c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b3c4:	2308      	movs	r3, #8
 800b3c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3c8:	2340      	movs	r3, #64	; 0x40
 800b3ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3d6:	f107 0308 	add.w	r3, r7, #8
 800b3da:	4619      	mov	r1, r3
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f7ff fe66 	bl	800b0ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fb24 	bl	800ba30 <SDMMC_GetCmdResp7>
 800b3e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3ea:	69fb      	ldr	r3, [r7, #28]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3720      	adds	r7, #32
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b088      	sub	sp, #32
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b402:	2337      	movs	r3, #55	; 0x37
 800b404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b406:	2340      	movs	r3, #64	; 0x40
 800b408:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b40a:	2300      	movs	r3, #0
 800b40c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b40e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b412:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b414:	f107 0308 	add.w	r3, r7, #8
 800b418:	4619      	mov	r1, r3
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7ff fe47 	bl	800b0ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b420:	f241 3288 	movw	r2, #5000	; 0x1388
 800b424:	2137      	movs	r1, #55	; 0x37
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f918 	bl	800b65c <SDMMC_GetCmdResp1>
 800b42c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b42e:	69fb      	ldr	r3, [r7, #28]
}
 800b430:	4618      	mov	r0, r3
 800b432:	3720      	adds	r7, #32
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b088      	sub	sp, #32
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b44c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b44e:	2329      	movs	r3, #41	; 0x29
 800b450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b452:	2340      	movs	r3, #64	; 0x40
 800b454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b456:	2300      	movs	r3, #0
 800b458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b45a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b45e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b460:	f107 0308 	add.w	r3, r7, #8
 800b464:	4619      	mov	r1, r3
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7ff fe21 	bl	800b0ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fa2b 	bl	800b8c8 <SDMMC_GetCmdResp3>
 800b472:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b474:	69fb      	ldr	r3, [r7, #28]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3720      	adds	r7, #32
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b088      	sub	sp, #32
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
 800b486:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b48c:	2306      	movs	r3, #6
 800b48e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b490:	2340      	movs	r3, #64	; 0x40
 800b492:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b494:	2300      	movs	r3, #0
 800b496:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b49c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b49e:	f107 0308 	add.w	r3, r7, #8
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f7ff fe02 	bl	800b0ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800b4aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4ae:	2106      	movs	r1, #6
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f8d3 	bl	800b65c <SDMMC_GetCmdResp1>
 800b4b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4b8:	69fb      	ldr	r3, [r7, #28]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3720      	adds	r7, #32
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b088      	sub	sp, #32
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b4ce:	2333      	movs	r3, #51	; 0x33
 800b4d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b4d2:	2340      	movs	r3, #64	; 0x40
 800b4d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4e0:	f107 0308 	add.w	r3, r7, #8
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7ff fde1 	bl	800b0ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800b4ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4f0:	2133      	movs	r1, #51	; 0x33
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f8b2 	bl	800b65c <SDMMC_GetCmdResp1>
 800b4f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4fa:	69fb      	ldr	r3, [r7, #28]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3720      	adds	r7, #32
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b088      	sub	sp, #32
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b50c:	2300      	movs	r3, #0
 800b50e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b510:	2302      	movs	r3, #2
 800b512:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b514:	23c0      	movs	r3, #192	; 0xc0
 800b516:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b518:	2300      	movs	r3, #0
 800b51a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b51c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b520:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b522:	f107 0308 	add.w	r3, r7, #8
 800b526:	4619      	mov	r1, r3
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f7ff fdc0 	bl	800b0ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 f982 	bl	800b838 <SDMMC_GetCmdResp2>
 800b534:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b536:	69fb      	ldr	r3, [r7, #28]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3720      	adds	r7, #32
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b088      	sub	sp, #32
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b54e:	2309      	movs	r3, #9
 800b550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b552:	23c0      	movs	r3, #192	; 0xc0
 800b554:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b556:	2300      	movs	r3, #0
 800b558:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b55a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b55e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b560:	f107 0308 	add.w	r3, r7, #8
 800b564:	4619      	mov	r1, r3
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7ff fda1 	bl	800b0ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 f963 	bl	800b838 <SDMMC_GetCmdResp2>
 800b572:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b574:	69fb      	ldr	r3, [r7, #28]
}
 800b576:	4618      	mov	r0, r3
 800b578:	3720      	adds	r7, #32
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b088      	sub	sp, #32
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
 800b586:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b588:	2300      	movs	r3, #0
 800b58a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b58c:	2303      	movs	r3, #3
 800b58e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b590:	2340      	movs	r3, #64	; 0x40
 800b592:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b594:	2300      	movs	r3, #0
 800b596:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b59c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b59e:	f107 0308 	add.w	r3, r7, #8
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f7ff fd82 	bl	800b0ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b5aa:	683a      	ldr	r2, [r7, #0]
 800b5ac:	2103      	movs	r1, #3
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 f9c8 	bl	800b944 <SDMMC_GetCmdResp6>
 800b5b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5b6:	69fb      	ldr	r3, [r7, #28]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3720      	adds	r7, #32
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b088      	sub	sp, #32
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b5ce:	230d      	movs	r3, #13
 800b5d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b5d2:	2340      	movs	r3, #64	; 0x40
 800b5d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b5e0:	f107 0308 	add.w	r3, r7, #8
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f7ff fd61 	bl	800b0ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b5ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5f0:	210d      	movs	r1, #13
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 f832 	bl	800b65c <SDMMC_GetCmdResp1>
 800b5f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5fa:	69fb      	ldr	r3, [r7, #28]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3720      	adds	r7, #32
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b60c:	4b11      	ldr	r3, [pc, #68]	; (800b654 <SDMMC_GetCmdError+0x50>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a11      	ldr	r2, [pc, #68]	; (800b658 <SDMMC_GetCmdError+0x54>)
 800b612:	fba2 2303 	umull	r2, r3, r2, r3
 800b616:	0a5b      	lsrs	r3, r3, #9
 800b618:	f241 3288 	movw	r2, #5000	; 0x1388
 800b61c:	fb02 f303 	mul.w	r3, r2, r3
 800b620:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	1e5a      	subs	r2, r3, #1
 800b626:	60fa      	str	r2, [r7, #12]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d102      	bne.n	800b632 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b62c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b630:	e009      	b.n	800b646 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d0f1      	beq.n	800b622 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	22c5      	movs	r2, #197	; 0xc5
 800b642:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3714      	adds	r7, #20
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	20000008 	.word	0x20000008
 800b658:	10624dd3 	.word	0x10624dd3

0800b65c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b088      	sub	sp, #32
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	460b      	mov	r3, r1
 800b666:	607a      	str	r2, [r7, #4]
 800b668:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b66a:	4b70      	ldr	r3, [pc, #448]	; (800b82c <SDMMC_GetCmdResp1+0x1d0>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a70      	ldr	r2, [pc, #448]	; (800b830 <SDMMC_GetCmdResp1+0x1d4>)
 800b670:	fba2 2303 	umull	r2, r3, r2, r3
 800b674:	0a5a      	lsrs	r2, r3, #9
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	fb02 f303 	mul.w	r3, r2, r3
 800b67c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	1e5a      	subs	r2, r3, #1
 800b682:	61fa      	str	r2, [r7, #28]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d102      	bne.n	800b68e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b688:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b68c:	e0c9      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b692:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b694:	69bb      	ldr	r3, [r7, #24]
 800b696:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d0ef      	beq.n	800b67e <SDMMC_GetCmdResp1+0x22>
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1ea      	bne.n	800b67e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ac:	f003 0304 	and.w	r3, r3, #4
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d004      	beq.n	800b6be <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2204      	movs	r2, #4
 800b6b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b6ba:	2304      	movs	r3, #4
 800b6bc:	e0b1      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c2:	f003 0301 	and.w	r3, r3, #1
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d004      	beq.n	800b6d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e0a6      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	22c5      	movs	r2, #197	; 0xc5
 800b6d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f7ff fd11 	bl	800b102 <SDIO_GetCommandResponse>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	7afb      	ldrb	r3, [r7, #11]
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d001      	beq.n	800b6ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e099      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f7ff fd13 	bl	800b11c <SDIO_GetResponse>
 800b6f6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	4b4e      	ldr	r3, [pc, #312]	; (800b834 <SDMMC_GetCmdResp1+0x1d8>)
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d101      	bne.n	800b706 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b702:	2300      	movs	r3, #0
 800b704:	e08d      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	da02      	bge.n	800b712 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b70c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b710:	e087      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d001      	beq.n	800b720 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b71c:	2340      	movs	r3, #64	; 0x40
 800b71e:	e080      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b72a:	2380      	movs	r3, #128	; 0x80
 800b72c:	e079      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b73c:	e071      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b744:	2b00      	cmp	r3, #0
 800b746:	d002      	beq.n	800b74e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b748:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b74c:	e069      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b754:	2b00      	cmp	r3, #0
 800b756:	d002      	beq.n	800b75e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b75c:	e061      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b764:	2b00      	cmp	r3, #0
 800b766:	d002      	beq.n	800b76e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b768:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b76c:	e059      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b774:	2b00      	cmp	r3, #0
 800b776:	d002      	beq.n	800b77e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b77c:	e051      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b784:	2b00      	cmp	r3, #0
 800b786:	d002      	beq.n	800b78e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b78c:	e049      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b794:	2b00      	cmp	r3, #0
 800b796:	d002      	beq.n	800b79e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b798:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b79c:	e041      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d002      	beq.n	800b7ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b7a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7ac:	e039      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d002      	beq.n	800b7be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b7b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b7bc:	e031      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d002      	beq.n	800b7ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b7c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b7cc:	e029      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d002      	beq.n	800b7de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b7d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b7dc:	e021      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d002      	beq.n	800b7ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b7e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b7ec:	e019      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d002      	beq.n	800b7fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b7f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b7fc:	e011      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b804:	2b00      	cmp	r3, #0
 800b806:	d002      	beq.n	800b80e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b808:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b80c:	e009      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	f003 0308 	and.w	r3, r3, #8
 800b814:	2b00      	cmp	r3, #0
 800b816:	d002      	beq.n	800b81e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b818:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b81c:	e001      	b.n	800b822 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b81e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b822:	4618      	mov	r0, r3
 800b824:	3720      	adds	r7, #32
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	20000008 	.word	0x20000008
 800b830:	10624dd3 	.word	0x10624dd3
 800b834:	fdffe008 	.word	0xfdffe008

0800b838 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b840:	4b1f      	ldr	r3, [pc, #124]	; (800b8c0 <SDMMC_GetCmdResp2+0x88>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a1f      	ldr	r2, [pc, #124]	; (800b8c4 <SDMMC_GetCmdResp2+0x8c>)
 800b846:	fba2 2303 	umull	r2, r3, r2, r3
 800b84a:	0a5b      	lsrs	r3, r3, #9
 800b84c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b850:	fb02 f303 	mul.w	r3, r2, r3
 800b854:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	1e5a      	subs	r2, r3, #1
 800b85a:	60fa      	str	r2, [r7, #12]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d102      	bne.n	800b866 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b860:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b864:	e026      	b.n	800b8b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b86a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b872:	2b00      	cmp	r3, #0
 800b874:	d0ef      	beq.n	800b856 <SDMMC_GetCmdResp2+0x1e>
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d1ea      	bne.n	800b856 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b884:	f003 0304 	and.w	r3, r3, #4
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d004      	beq.n	800b896 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2204      	movs	r2, #4
 800b890:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b892:	2304      	movs	r3, #4
 800b894:	e00e      	b.n	800b8b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b89a:	f003 0301 	and.w	r3, r3, #1
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d004      	beq.n	800b8ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e003      	b.n	800b8b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	22c5      	movs	r2, #197	; 0xc5
 800b8b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3714      	adds	r7, #20
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr
 800b8c0:	20000008 	.word	0x20000008
 800b8c4:	10624dd3 	.word	0x10624dd3

0800b8c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b8d0:	4b1a      	ldr	r3, [pc, #104]	; (800b93c <SDMMC_GetCmdResp3+0x74>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a1a      	ldr	r2, [pc, #104]	; (800b940 <SDMMC_GetCmdResp3+0x78>)
 800b8d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b8da:	0a5b      	lsrs	r3, r3, #9
 800b8dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8e0:	fb02 f303 	mul.w	r3, r2, r3
 800b8e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	1e5a      	subs	r2, r3, #1
 800b8ea:	60fa      	str	r2, [r7, #12]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d102      	bne.n	800b8f6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8f4:	e01b      	b.n	800b92e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b902:	2b00      	cmp	r3, #0
 800b904:	d0ef      	beq.n	800b8e6 <SDMMC_GetCmdResp3+0x1e>
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1ea      	bne.n	800b8e6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b914:	f003 0304 	and.w	r3, r3, #4
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d004      	beq.n	800b926 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2204      	movs	r2, #4
 800b920:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b922:	2304      	movs	r3, #4
 800b924:	e003      	b.n	800b92e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	22c5      	movs	r2, #197	; 0xc5
 800b92a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b92c:	2300      	movs	r3, #0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3714      	adds	r7, #20
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	20000008 	.word	0x20000008
 800b940:	10624dd3 	.word	0x10624dd3

0800b944 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b088      	sub	sp, #32
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	460b      	mov	r3, r1
 800b94e:	607a      	str	r2, [r7, #4]
 800b950:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b952:	4b35      	ldr	r3, [pc, #212]	; (800ba28 <SDMMC_GetCmdResp6+0xe4>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a35      	ldr	r2, [pc, #212]	; (800ba2c <SDMMC_GetCmdResp6+0xe8>)
 800b958:	fba2 2303 	umull	r2, r3, r2, r3
 800b95c:	0a5b      	lsrs	r3, r3, #9
 800b95e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b962:	fb02 f303 	mul.w	r3, r2, r3
 800b966:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	1e5a      	subs	r2, r3, #1
 800b96c:	61fa      	str	r2, [r7, #28]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d102      	bne.n	800b978 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b972:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b976:	e052      	b.n	800ba1e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b97c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b984:	2b00      	cmp	r3, #0
 800b986:	d0ef      	beq.n	800b968 <SDMMC_GetCmdResp6+0x24>
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1ea      	bne.n	800b968 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b996:	f003 0304 	and.w	r3, r3, #4
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d004      	beq.n	800b9a8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2204      	movs	r2, #4
 800b9a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b9a4:	2304      	movs	r3, #4
 800b9a6:	e03a      	b.n	800ba1e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ac:	f003 0301 	and.w	r3, r3, #1
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d004      	beq.n	800b9be <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e02f      	b.n	800ba1e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b9be:	68f8      	ldr	r0, [r7, #12]
 800b9c0:	f7ff fb9f 	bl	800b102 <SDIO_GetCommandResponse>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	7afb      	ldrb	r3, [r7, #11]
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d001      	beq.n	800b9d2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e025      	b.n	800ba1e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	22c5      	movs	r2, #197	; 0xc5
 800b9d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b9d8:	2100      	movs	r1, #0
 800b9da:	68f8      	ldr	r0, [r7, #12]
 800b9dc:	f7ff fb9e 	bl	800b11c <SDIO_GetResponse>
 800b9e0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d106      	bne.n	800b9fa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	0c1b      	lsrs	r3, r3, #16
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	e011      	b.n	800ba1e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba08:	e009      	b.n	800ba1e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d002      	beq.n	800ba1a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba18:	e001      	b.n	800ba1e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3720      	adds	r7, #32
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	20000008 	.word	0x20000008
 800ba2c:	10624dd3 	.word	0x10624dd3

0800ba30 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba38:	4b22      	ldr	r3, [pc, #136]	; (800bac4 <SDMMC_GetCmdResp7+0x94>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a22      	ldr	r2, [pc, #136]	; (800bac8 <SDMMC_GetCmdResp7+0x98>)
 800ba3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ba42:	0a5b      	lsrs	r3, r3, #9
 800ba44:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba48:	fb02 f303 	mul.w	r3, r2, r3
 800ba4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	1e5a      	subs	r2, r3, #1
 800ba52:	60fa      	str	r2, [r7, #12]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d102      	bne.n	800ba5e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba5c:	e02c      	b.n	800bab8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d0ef      	beq.n	800ba4e <SDMMC_GetCmdResp7+0x1e>
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d1ea      	bne.n	800ba4e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba7c:	f003 0304 	and.w	r3, r3, #4
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d004      	beq.n	800ba8e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2204      	movs	r2, #4
 800ba88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba8a:	2304      	movs	r3, #4
 800ba8c:	e014      	b.n	800bab8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d004      	beq.n	800baa4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800baa0:	2301      	movs	r3, #1
 800baa2:	e009      	b.n	800bab8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baac:	2b00      	cmp	r3, #0
 800baae:	d002      	beq.n	800bab6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2240      	movs	r2, #64	; 0x40
 800bab4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bab6:	2300      	movs	r3, #0
  
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3714      	adds	r7, #20
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	20000008 	.word	0x20000008
 800bac8:	10624dd3 	.word	0x10624dd3

0800bacc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bad0:	4904      	ldr	r1, [pc, #16]	; (800bae4 <MX_FATFS_Init+0x18>)
 800bad2:	4805      	ldr	r0, [pc, #20]	; (800bae8 <MX_FATFS_Init+0x1c>)
 800bad4:	f000 fa8a 	bl	800bfec <FATFS_LinkDriver>
 800bad8:	4603      	mov	r3, r0
 800bada:	461a      	mov	r2, r3
 800badc:	4b03      	ldr	r3, [pc, #12]	; (800baec <MX_FATFS_Init+0x20>)
 800bade:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bae0:	bf00      	nop
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	2000b148 	.word	0x2000b148
 800bae8:	0802fe14 	.word	0x0802fe14
 800baec:	2000b144 	.word	0x2000b144

0800baf0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800baf6:	2300      	movs	r3, #0
 800baf8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bafa:	f000 f87b 	bl	800bbf4 <BSP_SD_IsDetected>
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d001      	beq.n	800bb08 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800bb04:	2301      	movs	r3, #1
 800bb06:	e012      	b.n	800bb2e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800bb08:	480b      	ldr	r0, [pc, #44]	; (800bb38 <BSP_SD_Init+0x48>)
 800bb0a:	f7fc fd05 	bl	8008518 <HAL_SD_Init>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bb12:	79fb      	ldrb	r3, [r7, #7]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d109      	bne.n	800bb2c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800bb18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bb1c:	4806      	ldr	r0, [pc, #24]	; (800bb38 <BSP_SD_Init+0x48>)
 800bb1e:	f7fd f94b 	bl	8008db8 <HAL_SD_ConfigWideBusOperation>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d001      	beq.n	800bb2c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bb2c:	79fb      	ldrb	r3, [r7, #7]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	2000af88 	.word	0x2000af88

0800bb3c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	68f9      	ldr	r1, [r7, #12]
 800bb52:	4806      	ldr	r0, [pc, #24]	; (800bb6c <BSP_SD_ReadBlocks_DMA+0x30>)
 800bb54:	f7fc fd8e 	bl	8008674 <HAL_SD_ReadBlocks_DMA>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bb62:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3718      	adds	r7, #24
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	2000af88 	.word	0x2000af88

0800bb70 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	68f9      	ldr	r1, [r7, #12]
 800bb86:	4806      	ldr	r0, [pc, #24]	; (800bba0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bb88:	f7fc fe56 	bl	8008838 <HAL_SD_WriteBlocks_DMA>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d001      	beq.n	800bb96 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bb92:	2301      	movs	r3, #1
 800bb94:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bb96:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3718      	adds	r7, #24
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	2000af88 	.word	0x2000af88

0800bba4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bba8:	4805      	ldr	r0, [pc, #20]	; (800bbc0 <BSP_SD_GetCardState+0x1c>)
 800bbaa:	f7fd f99f 	bl	8008eec <HAL_SD_GetCardState>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b04      	cmp	r3, #4
 800bbb2:	bf14      	ite	ne
 800bbb4:	2301      	movne	r3, #1
 800bbb6:	2300      	moveq	r3, #0
 800bbb8:	b2db      	uxtb	r3, r3
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	2000af88 	.word	0x2000af88

0800bbc4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800bbcc:	6879      	ldr	r1, [r7, #4]
 800bbce:	4803      	ldr	r0, [pc, #12]	; (800bbdc <BSP_SD_GetCardInfo+0x18>)
 800bbd0:	f7fd f8c6 	bl	8008d60 <HAL_SD_GetCardInfo>
}
 800bbd4:	bf00      	nop
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	2000af88 	.word	0x2000af88

0800bbe0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bbe8:	f000 f9a2 	bl	800bf30 <BSP_SD_ReadCpltCallback>
}
 800bbec:	bf00      	nop
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bbfe:	f000 f80b 	bl	800bc18 <BSP_PlatformIsDetected>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d101      	bne.n	800bc0c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bc0c:	79fb      	ldrb	r3, [r7, #7]
 800bc0e:	b2db      	uxtb	r3, r3
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3708      	adds	r7, #8
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bc22:	2108      	movs	r1, #8
 800bc24:	4806      	ldr	r0, [pc, #24]	; (800bc40 <BSP_PlatformIsDetected+0x28>)
 800bc26:	f7fa f9bd 	bl	8005fa4 <HAL_GPIO_ReadPin>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d001      	beq.n	800bc34 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800bc30:	2300      	movs	r3, #0
 800bc32:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bc34:	79fb      	ldrb	r3, [r7, #7]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3708      	adds	r7, #8
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	40021800 	.word	0x40021800

0800bc44 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800bc4c:	f000 fa8e 	bl	800c16c <osKernelGetTickCount>
 800bc50:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800bc52:	e006      	b.n	800bc62 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bc54:	f7ff ffa6 	bl	800bba4 <BSP_SD_GetCardState>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d101      	bne.n	800bc62 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	e009      	b.n	800bc76 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800bc62:	f000 fa83 	bl	800c16c <osKernelGetTickCount>
 800bc66:	4602      	mov	r2, r0
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d8f0      	bhi.n	800bc54 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bc72:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
	...

0800bc80 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	4603      	mov	r3, r0
 800bc88:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bc8a:	4b0b      	ldr	r3, [pc, #44]	; (800bcb8 <SD_CheckStatus+0x38>)
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bc90:	f7ff ff88 	bl	800bba4 <BSP_SD_GetCardState>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d107      	bne.n	800bcaa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bc9a:	4b07      	ldr	r3, [pc, #28]	; (800bcb8 <SD_CheckStatus+0x38>)
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	f023 0301 	bic.w	r3, r3, #1
 800bca4:	b2da      	uxtb	r2, r3
 800bca6:	4b04      	ldr	r3, [pc, #16]	; (800bcb8 <SD_CheckStatus+0x38>)
 800bca8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bcaa:	4b03      	ldr	r3, [pc, #12]	; (800bcb8 <SD_CheckStatus+0x38>)
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	b2db      	uxtb	r3, r3
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	20000011 	.word	0x20000011

0800bcbc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bcc6:	4b1c      	ldr	r3, [pc, #112]	; (800bd38 <SD_initialize+0x7c>)
 800bcc8:	2201      	movs	r2, #1
 800bcca:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800bccc:	f000 fa06 	bl	800c0dc <osKernelGetState>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d129      	bne.n	800bd2a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800bcd6:	f7ff ff0b 	bl	800baf0 <BSP_SD_Init>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d107      	bne.n	800bcf0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800bce0:	79fb      	ldrb	r3, [r7, #7]
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7ff ffcc 	bl	800bc80 <SD_CheckStatus>
 800bce8:	4603      	mov	r3, r0
 800bcea:	461a      	mov	r2, r3
 800bcec:	4b12      	ldr	r3, [pc, #72]	; (800bd38 <SD_initialize+0x7c>)
 800bcee:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800bcf0:	4b11      	ldr	r3, [pc, #68]	; (800bd38 <SD_initialize+0x7c>)
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d017      	beq.n	800bd2a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800bcfa:	4b10      	ldr	r3, [pc, #64]	; (800bd3c <SD_initialize+0x80>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d107      	bne.n	800bd12 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800bd02:	2200      	movs	r2, #0
 800bd04:	2102      	movs	r1, #2
 800bd06:	200a      	movs	r0, #10
 800bd08:	f000 fc12 	bl	800c530 <osMessageQueueNew>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	4a0b      	ldr	r2, [pc, #44]	; (800bd3c <SD_initialize+0x80>)
 800bd10:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800bd12:	4b0a      	ldr	r3, [pc, #40]	; (800bd3c <SD_initialize+0x80>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d107      	bne.n	800bd2a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800bd1a:	4b07      	ldr	r3, [pc, #28]	; (800bd38 <SD_initialize+0x7c>)
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	f043 0301 	orr.w	r3, r3, #1
 800bd24:	b2da      	uxtb	r2, r3
 800bd26:	4b04      	ldr	r3, [pc, #16]	; (800bd38 <SD_initialize+0x7c>)
 800bd28:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800bd2a:	4b03      	ldr	r3, [pc, #12]	; (800bd38 <SD_initialize+0x7c>)
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	b2db      	uxtb	r3, r3
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	20000011 	.word	0x20000011
 800bd3c:	20000128 	.word	0x20000128

0800bd40 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	4603      	mov	r3, r0
 800bd48:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bd4a:	79fb      	ldrb	r3, [r7, #7]
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7ff ff97 	bl	800bc80 <SD_CheckStatus>
 800bd52:	4603      	mov	r3, r0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b088      	sub	sp, #32
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60b9      	str	r1, [r7, #8]
 800bd64:	607a      	str	r2, [r7, #4]
 800bd66:	603b      	str	r3, [r7, #0]
 800bd68:	4603      	mov	r3, r0
 800bd6a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bd70:	f247 5030 	movw	r0, #30000	; 0x7530
 800bd74:	f7ff ff66 	bl	800bc44 <SD_CheckStatusWithTimeout>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	da01      	bge.n	800bd82 <SD_read+0x26>
  {
    return res;
 800bd7e:	7ffb      	ldrb	r3, [r7, #31]
 800bd80:	e02f      	b.n	800bde2 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bd82:	683a      	ldr	r2, [r7, #0]
 800bd84:	6879      	ldr	r1, [r7, #4]
 800bd86:	68b8      	ldr	r0, [r7, #8]
 800bd88:	f7ff fed8 	bl	800bb3c <BSP_SD_ReadBlocks_DMA>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800bd90:	7fbb      	ldrb	r3, [r7, #30]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d124      	bne.n	800bde0 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800bd96:	4b15      	ldr	r3, [pc, #84]	; (800bdec <SD_read+0x90>)
 800bd98:	6818      	ldr	r0, [r3, #0]
 800bd9a:	f107 0112 	add.w	r1, r7, #18
 800bd9e:	f247 5330 	movw	r3, #30000	; 0x7530
 800bda2:	2200      	movs	r2, #0
 800bda4:	f000 fc98 	bl	800c6d8 <osMessageQueueGet>
 800bda8:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d117      	bne.n	800bde0 <SD_read+0x84>
 800bdb0:	8a7b      	ldrh	r3, [r7, #18]
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d114      	bne.n	800bde0 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800bdb6:	f000 f9d9 	bl	800c16c <osKernelGetTickCount>
 800bdba:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bdbc:	e007      	b.n	800bdce <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bdbe:	f7ff fef1 	bl	800bba4 <BSP_SD_GetCardState>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d102      	bne.n	800bdce <SD_read+0x72>
              {
                res = RES_OK;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bdcc:	e008      	b.n	800bde0 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bdce:	f000 f9cd 	bl	800c16c <osKernelGetTickCount>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	1ad3      	subs	r3, r2, r3
 800bdd8:	f247 522f 	movw	r2, #29999	; 0x752f
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d9ee      	bls.n	800bdbe <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bde0:	7ffb      	ldrb	r3, [r7, #31]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3720      	adds	r7, #32
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	20000128 	.word	0x20000128

0800bdf0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b088      	sub	sp, #32
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60b9      	str	r1, [r7, #8]
 800bdf8:	607a      	str	r2, [r7, #4]
 800bdfa:	603b      	str	r3, [r7, #0]
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800be04:	f247 5030 	movw	r0, #30000	; 0x7530
 800be08:	f7ff ff1c 	bl	800bc44 <SD_CheckStatusWithTimeout>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	da01      	bge.n	800be16 <SD_write+0x26>
  {
    return res;
 800be12:	7ffb      	ldrb	r3, [r7, #31]
 800be14:	e02d      	b.n	800be72 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800be16:	683a      	ldr	r2, [r7, #0]
 800be18:	6879      	ldr	r1, [r7, #4]
 800be1a:	68b8      	ldr	r0, [r7, #8]
 800be1c:	f7ff fea8 	bl	800bb70 <BSP_SD_WriteBlocks_DMA>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d124      	bne.n	800be70 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800be26:	4b15      	ldr	r3, [pc, #84]	; (800be7c <SD_write+0x8c>)
 800be28:	6818      	ldr	r0, [r3, #0]
 800be2a:	f107 0112 	add.w	r1, r7, #18
 800be2e:	f247 5330 	movw	r3, #30000	; 0x7530
 800be32:	2200      	movs	r2, #0
 800be34:	f000 fc50 	bl	800c6d8 <osMessageQueueGet>
 800be38:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d117      	bne.n	800be70 <SD_write+0x80>
 800be40:	8a7b      	ldrh	r3, [r7, #18]
 800be42:	2b02      	cmp	r3, #2
 800be44:	d114      	bne.n	800be70 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800be46:	f000 f991 	bl	800c16c <osKernelGetTickCount>
 800be4a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800be4c:	e007      	b.n	800be5e <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be4e:	f7ff fea9 	bl	800bba4 <BSP_SD_GetCardState>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d102      	bne.n	800be5e <SD_write+0x6e>
          {
            res = RES_OK;
 800be58:	2300      	movs	r3, #0
 800be5a:	77fb      	strb	r3, [r7, #31]
            break;
 800be5c:	e008      	b.n	800be70 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800be5e:	f000 f985 	bl	800c16c <osKernelGetTickCount>
 800be62:	4602      	mov	r2, r0
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	f247 522f 	movw	r2, #29999	; 0x752f
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d9ee      	bls.n	800be4e <SD_write+0x5e>
    }

  }
#endif

  return res;
 800be70:	7ffb      	ldrb	r3, [r7, #31]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3720      	adds	r7, #32
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	20000128 	.word	0x20000128

0800be80 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b08c      	sub	sp, #48	; 0x30
 800be84:	af00      	add	r7, sp, #0
 800be86:	4603      	mov	r3, r0
 800be88:	603a      	str	r2, [r7, #0]
 800be8a:	71fb      	strb	r3, [r7, #7]
 800be8c:	460b      	mov	r3, r1
 800be8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800be90:	2301      	movs	r3, #1
 800be92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800be96:	4b25      	ldr	r3, [pc, #148]	; (800bf2c <SD_ioctl+0xac>)
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	f003 0301 	and.w	r3, r3, #1
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <SD_ioctl+0x28>
 800bea4:	2303      	movs	r3, #3
 800bea6:	e03c      	b.n	800bf22 <SD_ioctl+0xa2>

  switch (cmd)
 800bea8:	79bb      	ldrb	r3, [r7, #6]
 800beaa:	2b03      	cmp	r3, #3
 800beac:	d834      	bhi.n	800bf18 <SD_ioctl+0x98>
 800beae:	a201      	add	r2, pc, #4	; (adr r2, 800beb4 <SD_ioctl+0x34>)
 800beb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb4:	0800bec5 	.word	0x0800bec5
 800beb8:	0800becd 	.word	0x0800becd
 800bebc:	0800bee5 	.word	0x0800bee5
 800bec0:	0800beff 	.word	0x0800beff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bec4:	2300      	movs	r3, #0
 800bec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800beca:	e028      	b.n	800bf1e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800becc:	f107 030c 	add.w	r3, r7, #12
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7ff fe77 	bl	800bbc4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bedc:	2300      	movs	r3, #0
 800bede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bee2:	e01c      	b.n	800bf1e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bee4:	f107 030c 	add.w	r3, r7, #12
 800bee8:	4618      	mov	r0, r3
 800beea:	f7ff fe6b 	bl	800bbc4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800beee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bef6:	2300      	movs	r3, #0
 800bef8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800befc:	e00f      	b.n	800bf1e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800befe:	f107 030c 	add.w	r3, r7, #12
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7ff fe5e 	bl	800bbc4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bf08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0a:	0a5a      	lsrs	r2, r3, #9
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bf10:	2300      	movs	r3, #0
 800bf12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bf16:	e002      	b.n	800bf1e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bf18:	2304      	movs	r3, #4
 800bf1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bf1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3730      	adds	r7, #48	; 0x30
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	20000011 	.word	0x20000011

0800bf30 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800bf36:	2301      	movs	r3, #1
 800bf38:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800bf3a:	4b05      	ldr	r3, [pc, #20]	; (800bf50 <BSP_SD_ReadCpltCallback+0x20>)
 800bf3c:	6818      	ldr	r0, [r3, #0]
 800bf3e:	1db9      	adds	r1, r7, #6
 800bf40:	2300      	movs	r3, #0
 800bf42:	2200      	movs	r2, #0
 800bf44:	f000 fb68 	bl	800c618 <osMessageQueuePut>
#endif
}
 800bf48:	bf00      	nop
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	20000128 	.word	0x20000128

0800bf54 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b087      	sub	sp, #28
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	4613      	mov	r3, r2
 800bf60:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bf62:	2301      	movs	r3, #1
 800bf64:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bf66:	2300      	movs	r3, #0
 800bf68:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bf6a:	4b1f      	ldr	r3, [pc, #124]	; (800bfe8 <FATFS_LinkDriverEx+0x94>)
 800bf6c:	7a5b      	ldrb	r3, [r3, #9]
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d131      	bne.n	800bfd8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bf74:	4b1c      	ldr	r3, [pc, #112]	; (800bfe8 <FATFS_LinkDriverEx+0x94>)
 800bf76:	7a5b      	ldrb	r3, [r3, #9]
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	4b1a      	ldr	r3, [pc, #104]	; (800bfe8 <FATFS_LinkDriverEx+0x94>)
 800bf7e:	2100      	movs	r1, #0
 800bf80:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bf82:	4b19      	ldr	r3, [pc, #100]	; (800bfe8 <FATFS_LinkDriverEx+0x94>)
 800bf84:	7a5b      	ldrb	r3, [r3, #9]
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	4a17      	ldr	r2, [pc, #92]	; (800bfe8 <FATFS_LinkDriverEx+0x94>)
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	4413      	add	r3, r2
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bf92:	4b15      	ldr	r3, [pc, #84]	; (800bfe8 <FATFS_LinkDriverEx+0x94>)
 800bf94:	7a5b      	ldrb	r3, [r3, #9]
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	461a      	mov	r2, r3
 800bf9a:	4b13      	ldr	r3, [pc, #76]	; (800bfe8 <FATFS_LinkDriverEx+0x94>)
 800bf9c:	4413      	add	r3, r2
 800bf9e:	79fa      	ldrb	r2, [r7, #7]
 800bfa0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bfa2:	4b11      	ldr	r3, [pc, #68]	; (800bfe8 <FATFS_LinkDriverEx+0x94>)
 800bfa4:	7a5b      	ldrb	r3, [r3, #9]
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	1c5a      	adds	r2, r3, #1
 800bfaa:	b2d1      	uxtb	r1, r2
 800bfac:	4a0e      	ldr	r2, [pc, #56]	; (800bfe8 <FATFS_LinkDriverEx+0x94>)
 800bfae:	7251      	strb	r1, [r2, #9]
 800bfb0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bfb2:	7dbb      	ldrb	r3, [r7, #22]
 800bfb4:	3330      	adds	r3, #48	; 0x30
 800bfb6:	b2da      	uxtb	r2, r3
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	223a      	movs	r2, #58	; 0x3a
 800bfc2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	3302      	adds	r3, #2
 800bfc8:	222f      	movs	r2, #47	; 0x2f
 800bfca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	3303      	adds	r3, #3
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bfd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	371c      	adds	r7, #28
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr
 800bfe6:	bf00      	nop
 800bfe8:	2000012c 	.word	0x2000012c

0800bfec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bff6:	2200      	movs	r2, #0
 800bff8:	6839      	ldr	r1, [r7, #0]
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f7ff ffaa 	bl	800bf54 <FATFS_LinkDriverEx>
 800c000:	4603      	mov	r3, r0
}
 800c002:	4618      	mov	r0, r3
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
	...

0800c00c <__NVIC_SetPriority>:
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	4603      	mov	r3, r0
 800c014:	6039      	str	r1, [r7, #0]
 800c016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	db0a      	blt.n	800c036 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	b2da      	uxtb	r2, r3
 800c024:	490c      	ldr	r1, [pc, #48]	; (800c058 <__NVIC_SetPriority+0x4c>)
 800c026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c02a:	0112      	lsls	r2, r2, #4
 800c02c:	b2d2      	uxtb	r2, r2
 800c02e:	440b      	add	r3, r1
 800c030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c034:	e00a      	b.n	800c04c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	b2da      	uxtb	r2, r3
 800c03a:	4908      	ldr	r1, [pc, #32]	; (800c05c <__NVIC_SetPriority+0x50>)
 800c03c:	79fb      	ldrb	r3, [r7, #7]
 800c03e:	f003 030f 	and.w	r3, r3, #15
 800c042:	3b04      	subs	r3, #4
 800c044:	0112      	lsls	r2, r2, #4
 800c046:	b2d2      	uxtb	r2, r2
 800c048:	440b      	add	r3, r1
 800c04a:	761a      	strb	r2, [r3, #24]
}
 800c04c:	bf00      	nop
 800c04e:	370c      	adds	r7, #12
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr
 800c058:	e000e100 	.word	0xe000e100
 800c05c:	e000ed00 	.word	0xe000ed00

0800c060 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c060:	b580      	push	{r7, lr}
 800c062:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c064:	4b05      	ldr	r3, [pc, #20]	; (800c07c <SysTick_Handler+0x1c>)
 800c066:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c068:	f002 fae4 	bl	800e634 <xTaskGetSchedulerState>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d001      	beq.n	800c076 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c072:	f003 f9c9 	bl	800f408 <xPortSysTickHandler>
  }
}
 800c076:	bf00      	nop
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	e000e010 	.word	0xe000e010

0800c080 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c080:	b580      	push	{r7, lr}
 800c082:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c084:	2100      	movs	r1, #0
 800c086:	f06f 0004 	mvn.w	r0, #4
 800c08a:	f7ff ffbf 	bl	800c00c <__NVIC_SetPriority>
#endif
}
 800c08e:	bf00      	nop
 800c090:	bd80      	pop	{r7, pc}
	...

0800c094 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c09a:	f3ef 8305 	mrs	r3, IPSR
 800c09e:	603b      	str	r3, [r7, #0]
  return(result);
 800c0a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d003      	beq.n	800c0ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c0a6:	f06f 0305 	mvn.w	r3, #5
 800c0aa:	607b      	str	r3, [r7, #4]
 800c0ac:	e00c      	b.n	800c0c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c0ae:	4b0a      	ldr	r3, [pc, #40]	; (800c0d8 <osKernelInitialize+0x44>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d105      	bne.n	800c0c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c0b6:	4b08      	ldr	r3, [pc, #32]	; (800c0d8 <osKernelInitialize+0x44>)
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	607b      	str	r3, [r7, #4]
 800c0c0:	e002      	b.n	800c0c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c0c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c0c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c0c8:	687b      	ldr	r3, [r7, #4]
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	370c      	adds	r7, #12
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	20000138 	.word	0x20000138

0800c0dc <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800c0e2:	f002 faa7 	bl	800e634 <xTaskGetSchedulerState>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d004      	beq.n	800c0f6 <osKernelGetState+0x1a>
 800c0ec:	2b02      	cmp	r3, #2
 800c0ee:	d105      	bne.n	800c0fc <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800c0f0:	2302      	movs	r3, #2
 800c0f2:	607b      	str	r3, [r7, #4]
      break;
 800c0f4:	e00c      	b.n	800c110 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800c0f6:	2303      	movs	r3, #3
 800c0f8:	607b      	str	r3, [r7, #4]
      break;
 800c0fa:	e009      	b.n	800c110 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800c0fc:	4b07      	ldr	r3, [pc, #28]	; (800c11c <osKernelGetState+0x40>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b01      	cmp	r3, #1
 800c102:	d102      	bne.n	800c10a <osKernelGetState+0x2e>
        state = osKernelReady;
 800c104:	2301      	movs	r3, #1
 800c106:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800c108:	e001      	b.n	800c10e <osKernelGetState+0x32>
        state = osKernelInactive;
 800c10a:	2300      	movs	r3, #0
 800c10c:	607b      	str	r3, [r7, #4]
      break;
 800c10e:	bf00      	nop
  }

  return (state);
 800c110:	687b      	ldr	r3, [r7, #4]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3708      	adds	r7, #8
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	20000138 	.word	0x20000138

0800c120 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c126:	f3ef 8305 	mrs	r3, IPSR
 800c12a:	603b      	str	r3, [r7, #0]
  return(result);
 800c12c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d003      	beq.n	800c13a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c132:	f06f 0305 	mvn.w	r3, #5
 800c136:	607b      	str	r3, [r7, #4]
 800c138:	e010      	b.n	800c15c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c13a:	4b0b      	ldr	r3, [pc, #44]	; (800c168 <osKernelStart+0x48>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d109      	bne.n	800c156 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c142:	f7ff ff9d 	bl	800c080 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c146:	4b08      	ldr	r3, [pc, #32]	; (800c168 <osKernelStart+0x48>)
 800c148:	2202      	movs	r2, #2
 800c14a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c14c:	f001 fe04 	bl	800dd58 <vTaskStartScheduler>
      stat = osOK;
 800c150:	2300      	movs	r3, #0
 800c152:	607b      	str	r3, [r7, #4]
 800c154:	e002      	b.n	800c15c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c156:	f04f 33ff 	mov.w	r3, #4294967295
 800c15a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c15c:	687b      	ldr	r3, [r7, #4]
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	20000138 	.word	0x20000138

0800c16c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c172:	f3ef 8305 	mrs	r3, IPSR
 800c176:	603b      	str	r3, [r7, #0]
  return(result);
 800c178:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d003      	beq.n	800c186 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c17e:	f001 ff17 	bl	800dfb0 <xTaskGetTickCountFromISR>
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	e002      	b.n	800c18c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c186:	f001 ff03 	bl	800df90 <xTaskGetTickCount>
 800c18a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c18c:	687b      	ldr	r3, [r7, #4]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c196:	b580      	push	{r7, lr}
 800c198:	b08e      	sub	sp, #56	; 0x38
 800c19a:	af04      	add	r7, sp, #16
 800c19c:	60f8      	str	r0, [r7, #12]
 800c19e:	60b9      	str	r1, [r7, #8]
 800c1a0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1a6:	f3ef 8305 	mrs	r3, IPSR
 800c1aa:	617b      	str	r3, [r7, #20]
  return(result);
 800c1ac:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d17e      	bne.n	800c2b0 <osThreadNew+0x11a>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d07b      	beq.n	800c2b0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c1b8:	2340      	movs	r3, #64	; 0x40
 800c1ba:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c1bc:	2318      	movs	r3, #24
 800c1be:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d045      	beq.n	800c25c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d002      	beq.n	800c1de <osThreadNew+0x48>
        name = attr->name;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	699b      	ldr	r3, [r3, #24]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d002      	beq.n	800c1ec <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	699b      	ldr	r3, [r3, #24]
 800c1ea:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d008      	beq.n	800c204 <osThreadNew+0x6e>
 800c1f2:	69fb      	ldr	r3, [r7, #28]
 800c1f4:	2b38      	cmp	r3, #56	; 0x38
 800c1f6:	d805      	bhi.n	800c204 <osThreadNew+0x6e>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	f003 0301 	and.w	r3, r3, #1
 800c200:	2b00      	cmp	r3, #0
 800c202:	d001      	beq.n	800c208 <osThreadNew+0x72>
        return (NULL);
 800c204:	2300      	movs	r3, #0
 800c206:	e054      	b.n	800c2b2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	695b      	ldr	r3, [r3, #20]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d003      	beq.n	800c218 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	695b      	ldr	r3, [r3, #20]
 800c214:	089b      	lsrs	r3, r3, #2
 800c216:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00e      	beq.n	800c23e <osThreadNew+0xa8>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	2bbb      	cmp	r3, #187	; 0xbb
 800c226:	d90a      	bls.n	800c23e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d006      	beq.n	800c23e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	695b      	ldr	r3, [r3, #20]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d002      	beq.n	800c23e <osThreadNew+0xa8>
        mem = 1;
 800c238:	2301      	movs	r3, #1
 800c23a:	61bb      	str	r3, [r7, #24]
 800c23c:	e010      	b.n	800c260 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d10c      	bne.n	800c260 <osThreadNew+0xca>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d108      	bne.n	800c260 <osThreadNew+0xca>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	691b      	ldr	r3, [r3, #16]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d104      	bne.n	800c260 <osThreadNew+0xca>
          mem = 0;
 800c256:	2300      	movs	r3, #0
 800c258:	61bb      	str	r3, [r7, #24]
 800c25a:	e001      	b.n	800c260 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c25c:	2300      	movs	r3, #0
 800c25e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	2b01      	cmp	r3, #1
 800c264:	d110      	bne.n	800c288 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c26e:	9202      	str	r2, [sp, #8]
 800c270:	9301      	str	r3, [sp, #4]
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	9300      	str	r3, [sp, #0]
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	6a3a      	ldr	r2, [r7, #32]
 800c27a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c27c:	68f8      	ldr	r0, [r7, #12]
 800c27e:	f001 fb7f 	bl	800d980 <xTaskCreateStatic>
 800c282:	4603      	mov	r3, r0
 800c284:	613b      	str	r3, [r7, #16]
 800c286:	e013      	b.n	800c2b0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d110      	bne.n	800c2b0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c28e:	6a3b      	ldr	r3, [r7, #32]
 800c290:	b29a      	uxth	r2, r3
 800c292:	f107 0310 	add.w	r3, r7, #16
 800c296:	9301      	str	r3, [sp, #4]
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	9300      	str	r3, [sp, #0]
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2a0:	68f8      	ldr	r0, [r7, #12]
 800c2a2:	f001 fbca 	bl	800da3a <xTaskCreate>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d001      	beq.n	800c2b0 <osThreadNew+0x11a>
            hTask = NULL;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c2b0:	693b      	ldr	r3, [r7, #16]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3728      	adds	r7, #40	; 0x28
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b084      	sub	sp, #16
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2c2:	f3ef 8305 	mrs	r3, IPSR
 800c2c6:	60bb      	str	r3, [r7, #8]
  return(result);
 800c2c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d003      	beq.n	800c2d6 <osDelay+0x1c>
    stat = osErrorISR;
 800c2ce:	f06f 0305 	mvn.w	r3, #5
 800c2d2:	60fb      	str	r3, [r7, #12]
 800c2d4:	e007      	b.n	800c2e6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d002      	beq.n	800c2e6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f001 fd05 	bl	800dcf0 <vTaskDelay>
    }
  }

  return (stat);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3710      	adds	r7, #16
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b08a      	sub	sp, #40	; 0x28
 800c2f4:	af02      	add	r7, sp, #8
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c300:	f3ef 8305 	mrs	r3, IPSR
 800c304:	613b      	str	r3, [r7, #16]
  return(result);
 800c306:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d175      	bne.n	800c3f8 <osSemaphoreNew+0x108>
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d072      	beq.n	800c3f8 <osSemaphoreNew+0x108>
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	429a      	cmp	r2, r3
 800c318:	d86e      	bhi.n	800c3f8 <osSemaphoreNew+0x108>
    mem = -1;
 800c31a:	f04f 33ff 	mov.w	r3, #4294967295
 800c31e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d015      	beq.n	800c352 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d006      	beq.n	800c33c <osSemaphoreNew+0x4c>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	2b4f      	cmp	r3, #79	; 0x4f
 800c334:	d902      	bls.n	800c33c <osSemaphoreNew+0x4c>
        mem = 1;
 800c336:	2301      	movs	r3, #1
 800c338:	61bb      	str	r3, [r7, #24]
 800c33a:	e00c      	b.n	800c356 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d108      	bne.n	800c356 <osSemaphoreNew+0x66>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d104      	bne.n	800c356 <osSemaphoreNew+0x66>
          mem = 0;
 800c34c:	2300      	movs	r3, #0
 800c34e:	61bb      	str	r3, [r7, #24]
 800c350:	e001      	b.n	800c356 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c352:	2300      	movs	r3, #0
 800c354:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c35c:	d04c      	beq.n	800c3f8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2b01      	cmp	r3, #1
 800c362:	d128      	bne.n	800c3b6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	2b01      	cmp	r3, #1
 800c368:	d10a      	bne.n	800c380 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	2203      	movs	r2, #3
 800c370:	9200      	str	r2, [sp, #0]
 800c372:	2200      	movs	r2, #0
 800c374:	2100      	movs	r1, #0
 800c376:	2001      	movs	r0, #1
 800c378:	f000 fb5c 	bl	800ca34 <xQueueGenericCreateStatic>
 800c37c:	61f8      	str	r0, [r7, #28]
 800c37e:	e005      	b.n	800c38c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c380:	2203      	movs	r2, #3
 800c382:	2100      	movs	r1, #0
 800c384:	2001      	movs	r0, #1
 800c386:	f000 fbcd 	bl	800cb24 <xQueueGenericCreate>
 800c38a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d022      	beq.n	800c3d8 <osSemaphoreNew+0xe8>
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d01f      	beq.n	800c3d8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c398:	2300      	movs	r3, #0
 800c39a:	2200      	movs	r2, #0
 800c39c:	2100      	movs	r1, #0
 800c39e:	69f8      	ldr	r0, [r7, #28]
 800c3a0:	f000 fc88 	bl	800ccb4 <xQueueGenericSend>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d016      	beq.n	800c3d8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c3aa:	69f8      	ldr	r0, [r7, #28]
 800c3ac:	f001 f914 	bl	800d5d8 <vQueueDelete>
            hSemaphore = NULL;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	61fb      	str	r3, [r7, #28]
 800c3b4:	e010      	b.n	800c3d8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d108      	bne.n	800c3ce <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	68b9      	ldr	r1, [r7, #8]
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f000 fc0a 	bl	800cbde <xQueueCreateCountingSemaphoreStatic>
 800c3ca:	61f8      	str	r0, [r7, #28]
 800c3cc:	e004      	b.n	800c3d8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c3ce:	68b9      	ldr	r1, [r7, #8]
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f000 fc3b 	bl	800cc4c <xQueueCreateCountingSemaphore>
 800c3d6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00c      	beq.n	800c3f8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d003      	beq.n	800c3ec <osSemaphoreNew+0xfc>
          name = attr->name;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	617b      	str	r3, [r7, #20]
 800c3ea:	e001      	b.n	800c3f0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c3f0:	6979      	ldr	r1, [r7, #20]
 800c3f2:	69f8      	ldr	r0, [r7, #28]
 800c3f4:	f001 fa3c 	bl	800d870 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c3f8:	69fb      	ldr	r3, [r7, #28]
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3720      	adds	r7, #32
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
	...

0800c404 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c404:	b580      	push	{r7, lr}
 800c406:	b086      	sub	sp, #24
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c412:	2300      	movs	r3, #0
 800c414:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d103      	bne.n	800c424 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c41c:	f06f 0303 	mvn.w	r3, #3
 800c420:	617b      	str	r3, [r7, #20]
 800c422:	e039      	b.n	800c498 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c424:	f3ef 8305 	mrs	r3, IPSR
 800c428:	60fb      	str	r3, [r7, #12]
  return(result);
 800c42a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d022      	beq.n	800c476 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d003      	beq.n	800c43e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c436:	f06f 0303 	mvn.w	r3, #3
 800c43a:	617b      	str	r3, [r7, #20]
 800c43c:	e02c      	b.n	800c498 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c43e:	2300      	movs	r3, #0
 800c440:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c442:	f107 0308 	add.w	r3, r7, #8
 800c446:	461a      	mov	r2, r3
 800c448:	2100      	movs	r1, #0
 800c44a:	6938      	ldr	r0, [r7, #16]
 800c44c:	f001 f844 	bl	800d4d8 <xQueueReceiveFromISR>
 800c450:	4603      	mov	r3, r0
 800c452:	2b01      	cmp	r3, #1
 800c454:	d003      	beq.n	800c45e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c456:	f06f 0302 	mvn.w	r3, #2
 800c45a:	617b      	str	r3, [r7, #20]
 800c45c:	e01c      	b.n	800c498 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d019      	beq.n	800c498 <osSemaphoreAcquire+0x94>
 800c464:	4b0f      	ldr	r3, [pc, #60]	; (800c4a4 <osSemaphoreAcquire+0xa0>)
 800c466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c46a:	601a      	str	r2, [r3, #0]
 800c46c:	f3bf 8f4f 	dsb	sy
 800c470:	f3bf 8f6f 	isb	sy
 800c474:	e010      	b.n	800c498 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c476:	6839      	ldr	r1, [r7, #0]
 800c478:	6938      	ldr	r0, [r7, #16]
 800c47a:	f000 ff21 	bl	800d2c0 <xQueueSemaphoreTake>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b01      	cmp	r3, #1
 800c482:	d009      	beq.n	800c498 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d003      	beq.n	800c492 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c48a:	f06f 0301 	mvn.w	r3, #1
 800c48e:	617b      	str	r3, [r7, #20]
 800c490:	e002      	b.n	800c498 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c492:	f06f 0302 	mvn.w	r3, #2
 800c496:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c498:	697b      	ldr	r3, [r7, #20]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3718      	adds	r7, #24
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	e000ed04 	.word	0xe000ed04

0800c4a8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b086      	sub	sp, #24
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d103      	bne.n	800c4c6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c4be:	f06f 0303 	mvn.w	r3, #3
 800c4c2:	617b      	str	r3, [r7, #20]
 800c4c4:	e02c      	b.n	800c520 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4c6:	f3ef 8305 	mrs	r3, IPSR
 800c4ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d01a      	beq.n	800c508 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c4d6:	f107 0308 	add.w	r3, r7, #8
 800c4da:	4619      	mov	r1, r3
 800c4dc:	6938      	ldr	r0, [r7, #16]
 800c4de:	f000 fd82 	bl	800cfe6 <xQueueGiveFromISR>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d003      	beq.n	800c4f0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c4e8:	f06f 0302 	mvn.w	r3, #2
 800c4ec:	617b      	str	r3, [r7, #20]
 800c4ee:	e017      	b.n	800c520 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d014      	beq.n	800c520 <osSemaphoreRelease+0x78>
 800c4f6:	4b0d      	ldr	r3, [pc, #52]	; (800c52c <osSemaphoreRelease+0x84>)
 800c4f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4fc:	601a      	str	r2, [r3, #0]
 800c4fe:	f3bf 8f4f 	dsb	sy
 800c502:	f3bf 8f6f 	isb	sy
 800c506:	e00b      	b.n	800c520 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c508:	2300      	movs	r3, #0
 800c50a:	2200      	movs	r2, #0
 800c50c:	2100      	movs	r1, #0
 800c50e:	6938      	ldr	r0, [r7, #16]
 800c510:	f000 fbd0 	bl	800ccb4 <xQueueGenericSend>
 800c514:	4603      	mov	r3, r0
 800c516:	2b01      	cmp	r3, #1
 800c518:	d002      	beq.n	800c520 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c51a:	f06f 0302 	mvn.w	r3, #2
 800c51e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c520:	697b      	ldr	r3, [r7, #20]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3718      	adds	r7, #24
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	e000ed04 	.word	0xe000ed04

0800c530 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c530:	b580      	push	{r7, lr}
 800c532:	b08a      	sub	sp, #40	; 0x28
 800c534:	af02      	add	r7, sp, #8
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c53c:	2300      	movs	r3, #0
 800c53e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c540:	f3ef 8305 	mrs	r3, IPSR
 800c544:	613b      	str	r3, [r7, #16]
  return(result);
 800c546:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d15f      	bne.n	800c60c <osMessageQueueNew+0xdc>
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d05c      	beq.n	800c60c <osMessageQueueNew+0xdc>
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d059      	beq.n	800c60c <osMessageQueueNew+0xdc>
    mem = -1;
 800c558:	f04f 33ff 	mov.w	r3, #4294967295
 800c55c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d029      	beq.n	800c5b8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d012      	beq.n	800c592 <osMessageQueueNew+0x62>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	2b4f      	cmp	r3, #79	; 0x4f
 800c572:	d90e      	bls.n	800c592 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d00a      	beq.n	800c592 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	695a      	ldr	r2, [r3, #20]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	68b9      	ldr	r1, [r7, #8]
 800c584:	fb01 f303 	mul.w	r3, r1, r3
 800c588:	429a      	cmp	r2, r3
 800c58a:	d302      	bcc.n	800c592 <osMessageQueueNew+0x62>
        mem = 1;
 800c58c:	2301      	movs	r3, #1
 800c58e:	61bb      	str	r3, [r7, #24]
 800c590:	e014      	b.n	800c5bc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	689b      	ldr	r3, [r3, #8]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d110      	bne.n	800c5bc <osMessageQueueNew+0x8c>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d10c      	bne.n	800c5bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d108      	bne.n	800c5bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	695b      	ldr	r3, [r3, #20]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d104      	bne.n	800c5bc <osMessageQueueNew+0x8c>
          mem = 0;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	61bb      	str	r3, [r7, #24]
 800c5b6:	e001      	b.n	800c5bc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d10b      	bne.n	800c5da <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	691a      	ldr	r2, [r3, #16]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	9100      	str	r1, [sp, #0]
 800c5ce:	68b9      	ldr	r1, [r7, #8]
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f000 fa2f 	bl	800ca34 <xQueueGenericCreateStatic>
 800c5d6:	61f8      	str	r0, [r7, #28]
 800c5d8:	e008      	b.n	800c5ec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d105      	bne.n	800c5ec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	68b9      	ldr	r1, [r7, #8]
 800c5e4:	68f8      	ldr	r0, [r7, #12]
 800c5e6:	f000 fa9d 	bl	800cb24 <xQueueGenericCreate>
 800c5ea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00c      	beq.n	800c60c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d003      	beq.n	800c600 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	617b      	str	r3, [r7, #20]
 800c5fe:	e001      	b.n	800c604 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c600:	2300      	movs	r3, #0
 800c602:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c604:	6979      	ldr	r1, [r7, #20]
 800c606:	69f8      	ldr	r0, [r7, #28]
 800c608:	f001 f932 	bl	800d870 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c60c:	69fb      	ldr	r3, [r7, #28]
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3720      	adds	r7, #32
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
	...

0800c618 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c618:	b580      	push	{r7, lr}
 800c61a:	b088      	sub	sp, #32
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	60b9      	str	r1, [r7, #8]
 800c622:	603b      	str	r3, [r7, #0]
 800c624:	4613      	mov	r3, r2
 800c626:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c62c:	2300      	movs	r3, #0
 800c62e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c630:	f3ef 8305 	mrs	r3, IPSR
 800c634:	617b      	str	r3, [r7, #20]
  return(result);
 800c636:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d028      	beq.n	800c68e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c63c:	69bb      	ldr	r3, [r7, #24]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d005      	beq.n	800c64e <osMessageQueuePut+0x36>
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d002      	beq.n	800c64e <osMessageQueuePut+0x36>
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d003      	beq.n	800c656 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c64e:	f06f 0303 	mvn.w	r3, #3
 800c652:	61fb      	str	r3, [r7, #28]
 800c654:	e038      	b.n	800c6c8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c656:	2300      	movs	r3, #0
 800c658:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c65a:	f107 0210 	add.w	r2, r7, #16
 800c65e:	2300      	movs	r3, #0
 800c660:	68b9      	ldr	r1, [r7, #8]
 800c662:	69b8      	ldr	r0, [r7, #24]
 800c664:	f000 fc24 	bl	800ceb0 <xQueueGenericSendFromISR>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d003      	beq.n	800c676 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c66e:	f06f 0302 	mvn.w	r3, #2
 800c672:	61fb      	str	r3, [r7, #28]
 800c674:	e028      	b.n	800c6c8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d025      	beq.n	800c6c8 <osMessageQueuePut+0xb0>
 800c67c:	4b15      	ldr	r3, [pc, #84]	; (800c6d4 <osMessageQueuePut+0xbc>)
 800c67e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c682:	601a      	str	r2, [r3, #0]
 800c684:	f3bf 8f4f 	dsb	sy
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	e01c      	b.n	800c6c8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d002      	beq.n	800c69a <osMessageQueuePut+0x82>
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d103      	bne.n	800c6a2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c69a:	f06f 0303 	mvn.w	r3, #3
 800c69e:	61fb      	str	r3, [r7, #28]
 800c6a0:	e012      	b.n	800c6c8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	683a      	ldr	r2, [r7, #0]
 800c6a6:	68b9      	ldr	r1, [r7, #8]
 800c6a8:	69b8      	ldr	r0, [r7, #24]
 800c6aa:	f000 fb03 	bl	800ccb4 <xQueueGenericSend>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d009      	beq.n	800c6c8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d003      	beq.n	800c6c2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c6ba:	f06f 0301 	mvn.w	r3, #1
 800c6be:	61fb      	str	r3, [r7, #28]
 800c6c0:	e002      	b.n	800c6c8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c6c2:	f06f 0302 	mvn.w	r3, #2
 800c6c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c6c8:	69fb      	ldr	r3, [r7, #28]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3720      	adds	r7, #32
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	e000ed04 	.word	0xe000ed04

0800c6d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b088      	sub	sp, #32
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
 800c6e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6ee:	f3ef 8305 	mrs	r3, IPSR
 800c6f2:	617b      	str	r3, [r7, #20]
  return(result);
 800c6f4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d028      	beq.n	800c74c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d005      	beq.n	800c70c <osMessageQueueGet+0x34>
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d002      	beq.n	800c70c <osMessageQueueGet+0x34>
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d003      	beq.n	800c714 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c70c:	f06f 0303 	mvn.w	r3, #3
 800c710:	61fb      	str	r3, [r7, #28]
 800c712:	e037      	b.n	800c784 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c714:	2300      	movs	r3, #0
 800c716:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c718:	f107 0310 	add.w	r3, r7, #16
 800c71c:	461a      	mov	r2, r3
 800c71e:	68b9      	ldr	r1, [r7, #8]
 800c720:	69b8      	ldr	r0, [r7, #24]
 800c722:	f000 fed9 	bl	800d4d8 <xQueueReceiveFromISR>
 800c726:	4603      	mov	r3, r0
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d003      	beq.n	800c734 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c72c:	f06f 0302 	mvn.w	r3, #2
 800c730:	61fb      	str	r3, [r7, #28]
 800c732:	e027      	b.n	800c784 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d024      	beq.n	800c784 <osMessageQueueGet+0xac>
 800c73a:	4b15      	ldr	r3, [pc, #84]	; (800c790 <osMessageQueueGet+0xb8>)
 800c73c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c740:	601a      	str	r2, [r3, #0]
 800c742:	f3bf 8f4f 	dsb	sy
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	e01b      	b.n	800c784 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c74c:	69bb      	ldr	r3, [r7, #24]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d002      	beq.n	800c758 <osMessageQueueGet+0x80>
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d103      	bne.n	800c760 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c758:	f06f 0303 	mvn.w	r3, #3
 800c75c:	61fb      	str	r3, [r7, #28]
 800c75e:	e011      	b.n	800c784 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c760:	683a      	ldr	r2, [r7, #0]
 800c762:	68b9      	ldr	r1, [r7, #8]
 800c764:	69b8      	ldr	r0, [r7, #24]
 800c766:	f000 fccb 	bl	800d100 <xQueueReceive>
 800c76a:	4603      	mov	r3, r0
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d009      	beq.n	800c784 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d003      	beq.n	800c77e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c776:	f06f 0301 	mvn.w	r3, #1
 800c77a:	61fb      	str	r3, [r7, #28]
 800c77c:	e002      	b.n	800c784 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c77e:	f06f 0302 	mvn.w	r3, #2
 800c782:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c784:	69fb      	ldr	r3, [r7, #28]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3720      	adds	r7, #32
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	e000ed04 	.word	0xe000ed04

0800c794 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	4a07      	ldr	r2, [pc, #28]	; (800c7c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800c7a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	4a06      	ldr	r2, [pc, #24]	; (800c7c4 <vApplicationGetIdleTaskMemory+0x30>)
 800c7aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2240      	movs	r2, #64	; 0x40
 800c7b0:	601a      	str	r2, [r3, #0]
}
 800c7b2:	bf00      	nop
 800c7b4:	3714      	adds	r7, #20
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr
 800c7be:	bf00      	nop
 800c7c0:	2000013c 	.word	0x2000013c
 800c7c4:	200001f8 	.word	0x200001f8

0800c7c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c7c8:	b480      	push	{r7}
 800c7ca:	b085      	sub	sp, #20
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	4a07      	ldr	r2, [pc, #28]	; (800c7f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800c7d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	4a06      	ldr	r2, [pc, #24]	; (800c7f8 <vApplicationGetTimerTaskMemory+0x30>)
 800c7de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2280      	movs	r2, #128	; 0x80
 800c7e4:	601a      	str	r2, [r3, #0]
}
 800c7e6:	bf00      	nop
 800c7e8:	3714      	adds	r7, #20
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	200002f8 	.word	0x200002f8
 800c7f8:	200003b4 	.word	0x200003b4

0800c7fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f103 0208 	add.w	r2, r3, #8
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f04f 32ff 	mov.w	r2, #4294967295
 800c814:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f103 0208 	add.w	r2, r3, #8
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f103 0208 	add.w	r2, r3, #8
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c830:	bf00      	nop
 800c832:	370c      	adds	r7, #12
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2200      	movs	r2, #0
 800c848:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c84a:	bf00      	nop
 800c84c:	370c      	adds	r7, #12
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr

0800c856 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c856:	b480      	push	{r7}
 800c858:	b085      	sub	sp, #20
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
 800c85e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	68fa      	ldr	r2, [r7, #12]
 800c86a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	689a      	ldr	r2, [r3, #8]
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	683a      	ldr	r2, [r7, #0]
 800c87a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	683a      	ldr	r2, [r7, #0]
 800c880:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	1c5a      	adds	r2, r3, #1
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	601a      	str	r2, [r3, #0]
}
 800c892:	bf00      	nop
 800c894:	3714      	adds	r7, #20
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr

0800c89e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c89e:	b480      	push	{r7}
 800c8a0:	b085      	sub	sp, #20
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]
 800c8a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b4:	d103      	bne.n	800c8be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	691b      	ldr	r3, [r3, #16]
 800c8ba:	60fb      	str	r3, [r7, #12]
 800c8bc:	e00c      	b.n	800c8d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	3308      	adds	r3, #8
 800c8c2:	60fb      	str	r3, [r7, #12]
 800c8c4:	e002      	b.n	800c8cc <vListInsert+0x2e>
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	60fb      	str	r3, [r7, #12]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	68ba      	ldr	r2, [r7, #8]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d2f6      	bcs.n	800c8c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	685a      	ldr	r2, [r3, #4]
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	683a      	ldr	r2, [r7, #0]
 800c8e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	68fa      	ldr	r2, [r7, #12]
 800c8ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	683a      	ldr	r2, [r7, #0]
 800c8f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	1c5a      	adds	r2, r3, #1
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	601a      	str	r2, [r3, #0]
}
 800c904:	bf00      	nop
 800c906:	3714      	adds	r7, #20
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c910:	b480      	push	{r7}
 800c912:	b085      	sub	sp, #20
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	691b      	ldr	r3, [r3, #16]
 800c91c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	6892      	ldr	r2, [r2, #8]
 800c926:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	6852      	ldr	r2, [r2, #4]
 800c930:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d103      	bne.n	800c944 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	689a      	ldr	r2, [r3, #8]
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	1e5a      	subs	r2, r3, #1
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3714      	adds	r7, #20
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d10a      	bne.n	800c98e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97c:	f383 8811 	msr	BASEPRI, r3
 800c980:	f3bf 8f6f 	isb	sy
 800c984:	f3bf 8f4f 	dsb	sy
 800c988:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c98a:	bf00      	nop
 800c98c:	e7fe      	b.n	800c98c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c98e:	f002 fca9 	bl	800f2e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c99a:	68f9      	ldr	r1, [r7, #12]
 800c99c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c99e:	fb01 f303 	mul.w	r3, r1, r3
 800c9a2:	441a      	add	r2, r3
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	68f9      	ldr	r1, [r7, #12]
 800c9c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c9c4:	fb01 f303 	mul.w	r3, r1, r3
 800c9c8:	441a      	add	r2, r3
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	22ff      	movs	r2, #255	; 0xff
 800c9d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	22ff      	movs	r2, #255	; 0xff
 800c9da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d114      	bne.n	800ca0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d01a      	beq.n	800ca22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	3310      	adds	r3, #16
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f001 fc5d 	bl	800e2b0 <xTaskRemoveFromEventList>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d012      	beq.n	800ca22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c9fc:	4b0c      	ldr	r3, [pc, #48]	; (800ca30 <xQueueGenericReset+0xcc>)
 800c9fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	f3bf 8f4f 	dsb	sy
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	e009      	b.n	800ca22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	3310      	adds	r3, #16
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7ff fef2 	bl	800c7fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	3324      	adds	r3, #36	; 0x24
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7ff feed 	bl	800c7fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ca22:	f002 fc8f 	bl	800f344 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ca26:	2301      	movs	r3, #1
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3710      	adds	r7, #16
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	e000ed04 	.word	0xe000ed04

0800ca34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b08e      	sub	sp, #56	; 0x38
 800ca38:	af02      	add	r7, sp, #8
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	607a      	str	r2, [r7, #4]
 800ca40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d10a      	bne.n	800ca5e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ca48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4c:	f383 8811 	msr	BASEPRI, r3
 800ca50:	f3bf 8f6f 	isb	sy
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ca5a:	bf00      	nop
 800ca5c:	e7fe      	b.n	800ca5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d10a      	bne.n	800ca7a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ca64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca68:	f383 8811 	msr	BASEPRI, r3
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca76:	bf00      	nop
 800ca78:	e7fe      	b.n	800ca78 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d002      	beq.n	800ca86 <xQueueGenericCreateStatic+0x52>
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d001      	beq.n	800ca8a <xQueueGenericCreateStatic+0x56>
 800ca86:	2301      	movs	r3, #1
 800ca88:	e000      	b.n	800ca8c <xQueueGenericCreateStatic+0x58>
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d10a      	bne.n	800caa6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ca90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca94:	f383 8811 	msr	BASEPRI, r3
 800ca98:	f3bf 8f6f 	isb	sy
 800ca9c:	f3bf 8f4f 	dsb	sy
 800caa0:	623b      	str	r3, [r7, #32]
}
 800caa2:	bf00      	nop
 800caa4:	e7fe      	b.n	800caa4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d102      	bne.n	800cab2 <xQueueGenericCreateStatic+0x7e>
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d101      	bne.n	800cab6 <xQueueGenericCreateStatic+0x82>
 800cab2:	2301      	movs	r3, #1
 800cab4:	e000      	b.n	800cab8 <xQueueGenericCreateStatic+0x84>
 800cab6:	2300      	movs	r3, #0
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d10a      	bne.n	800cad2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac0:	f383 8811 	msr	BASEPRI, r3
 800cac4:	f3bf 8f6f 	isb	sy
 800cac8:	f3bf 8f4f 	dsb	sy
 800cacc:	61fb      	str	r3, [r7, #28]
}
 800cace:	bf00      	nop
 800cad0:	e7fe      	b.n	800cad0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cad2:	2350      	movs	r3, #80	; 0x50
 800cad4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	2b50      	cmp	r3, #80	; 0x50
 800cada:	d00a      	beq.n	800caf2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae0:	f383 8811 	msr	BASEPRI, r3
 800cae4:	f3bf 8f6f 	isb	sy
 800cae8:	f3bf 8f4f 	dsb	sy
 800caec:	61bb      	str	r3, [r7, #24]
}
 800caee:	bf00      	nop
 800caf0:	e7fe      	b.n	800caf0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800caf2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800caf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00d      	beq.n	800cb1a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb00:	2201      	movs	r2, #1
 800cb02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0c:	9300      	str	r3, [sp, #0]
 800cb0e:	4613      	mov	r3, r2
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	68b9      	ldr	r1, [r7, #8]
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f000 f83f 	bl	800cb98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3730      	adds	r7, #48	; 0x30
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b08a      	sub	sp, #40	; 0x28
 800cb28:	af02      	add	r7, sp, #8
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	4613      	mov	r3, r2
 800cb30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10a      	bne.n	800cb4e <xQueueGenericCreate+0x2a>
	__asm volatile
 800cb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3c:	f383 8811 	msr	BASEPRI, r3
 800cb40:	f3bf 8f6f 	isb	sy
 800cb44:	f3bf 8f4f 	dsb	sy
 800cb48:	613b      	str	r3, [r7, #16]
}
 800cb4a:	bf00      	nop
 800cb4c:	e7fe      	b.n	800cb4c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	68ba      	ldr	r2, [r7, #8]
 800cb52:	fb02 f303 	mul.w	r3, r2, r3
 800cb56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	3350      	adds	r3, #80	; 0x50
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f002 fce3 	bl	800f528 <pvPortMalloc>
 800cb62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d011      	beq.n	800cb8e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cb6a:	69bb      	ldr	r3, [r7, #24]
 800cb6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	3350      	adds	r3, #80	; 0x50
 800cb72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cb74:	69bb      	ldr	r3, [r7, #24]
 800cb76:	2200      	movs	r2, #0
 800cb78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb7c:	79fa      	ldrb	r2, [r7, #7]
 800cb7e:	69bb      	ldr	r3, [r7, #24]
 800cb80:	9300      	str	r3, [sp, #0]
 800cb82:	4613      	mov	r3, r2
 800cb84:	697a      	ldr	r2, [r7, #20]
 800cb86:	68b9      	ldr	r1, [r7, #8]
 800cb88:	68f8      	ldr	r0, [r7, #12]
 800cb8a:	f000 f805 	bl	800cb98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb8e:	69bb      	ldr	r3, [r7, #24]
	}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3720      	adds	r7, #32
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	60b9      	str	r1, [r7, #8]
 800cba2:	607a      	str	r2, [r7, #4]
 800cba4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d103      	bne.n	800cbb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	69ba      	ldr	r2, [r7, #24]
 800cbb0:	601a      	str	r2, [r3, #0]
 800cbb2:	e002      	b.n	800cbba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	68fa      	ldr	r2, [r7, #12]
 800cbbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	68ba      	ldr	r2, [r7, #8]
 800cbc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cbc6:	2101      	movs	r1, #1
 800cbc8:	69b8      	ldr	r0, [r7, #24]
 800cbca:	f7ff fecb 	bl	800c964 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cbce:	69bb      	ldr	r3, [r7, #24]
 800cbd0:	78fa      	ldrb	r2, [r7, #3]
 800cbd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cbd6:	bf00      	nop
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b08a      	sub	sp, #40	; 0x28
 800cbe2:	af02      	add	r7, sp, #8
 800cbe4:	60f8      	str	r0, [r7, #12]
 800cbe6:	60b9      	str	r1, [r7, #8]
 800cbe8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d10a      	bne.n	800cc06 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800cbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf4:	f383 8811 	msr	BASEPRI, r3
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	61bb      	str	r3, [r7, #24]
}
 800cc02:	bf00      	nop
 800cc04:	e7fe      	b.n	800cc04 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cc06:	68ba      	ldr	r2, [r7, #8]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d90a      	bls.n	800cc24 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800cc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc12:	f383 8811 	msr	BASEPRI, r3
 800cc16:	f3bf 8f6f 	isb	sy
 800cc1a:	f3bf 8f4f 	dsb	sy
 800cc1e:	617b      	str	r3, [r7, #20]
}
 800cc20:	bf00      	nop
 800cc22:	e7fe      	b.n	800cc22 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cc24:	2302      	movs	r3, #2
 800cc26:	9300      	str	r3, [sp, #0]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	68f8      	ldr	r0, [r7, #12]
 800cc30:	f7ff ff00 	bl	800ca34 <xQueueGenericCreateStatic>
 800cc34:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cc36:	69fb      	ldr	r3, [r7, #28]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d002      	beq.n	800cc42 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	68ba      	ldr	r2, [r7, #8]
 800cc40:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cc42:	69fb      	ldr	r3, [r7, #28]
	}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3720      	adds	r7, #32
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b086      	sub	sp, #24
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d10a      	bne.n	800cc72 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800cc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc60:	f383 8811 	msr	BASEPRI, r3
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	613b      	str	r3, [r7, #16]
}
 800cc6e:	bf00      	nop
 800cc70:	e7fe      	b.n	800cc70 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cc72:	683a      	ldr	r2, [r7, #0]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d90a      	bls.n	800cc90 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800cc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7e:	f383 8811 	msr	BASEPRI, r3
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	60fb      	str	r3, [r7, #12]
}
 800cc8c:	bf00      	nop
 800cc8e:	e7fe      	b.n	800cc8e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cc90:	2202      	movs	r2, #2
 800cc92:	2100      	movs	r1, #0
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7ff ff45 	bl	800cb24 <xQueueGenericCreate>
 800cc9a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d002      	beq.n	800cca8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	683a      	ldr	r2, [r7, #0]
 800cca6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cca8:	697b      	ldr	r3, [r7, #20]
	}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3718      	adds	r7, #24
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
	...

0800ccb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b08e      	sub	sp, #56	; 0x38
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	607a      	str	r2, [r7, #4]
 800ccc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ccca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d10a      	bne.n	800cce6 <xQueueGenericSend+0x32>
	__asm volatile
 800ccd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd4:	f383 8811 	msr	BASEPRI, r3
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	f3bf 8f4f 	dsb	sy
 800cce0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cce2:	bf00      	nop
 800cce4:	e7fe      	b.n	800cce4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d103      	bne.n	800ccf4 <xQueueGenericSend+0x40>
 800ccec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d101      	bne.n	800ccf8 <xQueueGenericSend+0x44>
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	e000      	b.n	800ccfa <xQueueGenericSend+0x46>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d10a      	bne.n	800cd14 <xQueueGenericSend+0x60>
	__asm volatile
 800ccfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd02:	f383 8811 	msr	BASEPRI, r3
 800cd06:	f3bf 8f6f 	isb	sy
 800cd0a:	f3bf 8f4f 	dsb	sy
 800cd0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd10:	bf00      	nop
 800cd12:	e7fe      	b.n	800cd12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	2b02      	cmp	r3, #2
 800cd18:	d103      	bne.n	800cd22 <xQueueGenericSend+0x6e>
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d101      	bne.n	800cd26 <xQueueGenericSend+0x72>
 800cd22:	2301      	movs	r3, #1
 800cd24:	e000      	b.n	800cd28 <xQueueGenericSend+0x74>
 800cd26:	2300      	movs	r3, #0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d10a      	bne.n	800cd42 <xQueueGenericSend+0x8e>
	__asm volatile
 800cd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd30:	f383 8811 	msr	BASEPRI, r3
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	623b      	str	r3, [r7, #32]
}
 800cd3e:	bf00      	nop
 800cd40:	e7fe      	b.n	800cd40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd42:	f001 fc77 	bl	800e634 <xTaskGetSchedulerState>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d102      	bne.n	800cd52 <xQueueGenericSend+0x9e>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d101      	bne.n	800cd56 <xQueueGenericSend+0xa2>
 800cd52:	2301      	movs	r3, #1
 800cd54:	e000      	b.n	800cd58 <xQueueGenericSend+0xa4>
 800cd56:	2300      	movs	r3, #0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d10a      	bne.n	800cd72 <xQueueGenericSend+0xbe>
	__asm volatile
 800cd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd60:	f383 8811 	msr	BASEPRI, r3
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	61fb      	str	r3, [r7, #28]
}
 800cd6e:	bf00      	nop
 800cd70:	e7fe      	b.n	800cd70 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd72:	f002 fab7 	bl	800f2e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d302      	bcc.n	800cd88 <xQueueGenericSend+0xd4>
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	2b02      	cmp	r3, #2
 800cd86:	d129      	bne.n	800cddc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd88:	683a      	ldr	r2, [r7, #0]
 800cd8a:	68b9      	ldr	r1, [r7, #8]
 800cd8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd8e:	f000 fc5e 	bl	800d64e <prvCopyDataToQueue>
 800cd92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d010      	beq.n	800cdbe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9e:	3324      	adds	r3, #36	; 0x24
 800cda0:	4618      	mov	r0, r3
 800cda2:	f001 fa85 	bl	800e2b0 <xTaskRemoveFromEventList>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d013      	beq.n	800cdd4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cdac:	4b3f      	ldr	r3, [pc, #252]	; (800ceac <xQueueGenericSend+0x1f8>)
 800cdae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdb2:	601a      	str	r2, [r3, #0]
 800cdb4:	f3bf 8f4f 	dsb	sy
 800cdb8:	f3bf 8f6f 	isb	sy
 800cdbc:	e00a      	b.n	800cdd4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d007      	beq.n	800cdd4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cdc4:	4b39      	ldr	r3, [pc, #228]	; (800ceac <xQueueGenericSend+0x1f8>)
 800cdc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdca:	601a      	str	r2, [r3, #0]
 800cdcc:	f3bf 8f4f 	dsb	sy
 800cdd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cdd4:	f002 fab6 	bl	800f344 <vPortExitCritical>
				return pdPASS;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e063      	b.n	800cea4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d103      	bne.n	800cdea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cde2:	f002 faaf 	bl	800f344 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cde6:	2300      	movs	r3, #0
 800cde8:	e05c      	b.n	800cea4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d106      	bne.n	800cdfe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdf0:	f107 0314 	add.w	r3, r7, #20
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f001 fabf 	bl	800e378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cdfe:	f002 faa1 	bl	800f344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce02:	f001 f819 	bl	800de38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce06:	f002 fa6d 	bl	800f2e4 <vPortEnterCritical>
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce10:	b25b      	sxtb	r3, r3
 800ce12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce16:	d103      	bne.n	800ce20 <xQueueGenericSend+0x16c>
 800ce18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce26:	b25b      	sxtb	r3, r3
 800ce28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2c:	d103      	bne.n	800ce36 <xQueueGenericSend+0x182>
 800ce2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce30:	2200      	movs	r2, #0
 800ce32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce36:	f002 fa85 	bl	800f344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce3a:	1d3a      	adds	r2, r7, #4
 800ce3c:	f107 0314 	add.w	r3, r7, #20
 800ce40:	4611      	mov	r1, r2
 800ce42:	4618      	mov	r0, r3
 800ce44:	f001 faae 	bl	800e3a4 <xTaskCheckForTimeOut>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d124      	bne.n	800ce98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ce4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce50:	f000 fcf5 	bl	800d83e <prvIsQueueFull>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d018      	beq.n	800ce8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ce5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5c:	3310      	adds	r3, #16
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	4611      	mov	r1, r2
 800ce62:	4618      	mov	r0, r3
 800ce64:	f001 f9d4 	bl	800e210 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ce68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce6a:	f000 fc80 	bl	800d76e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ce6e:	f000 fff1 	bl	800de54 <xTaskResumeAll>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f47f af7c 	bne.w	800cd72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ce7a:	4b0c      	ldr	r3, [pc, #48]	; (800ceac <xQueueGenericSend+0x1f8>)
 800ce7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce80:	601a      	str	r2, [r3, #0]
 800ce82:	f3bf 8f4f 	dsb	sy
 800ce86:	f3bf 8f6f 	isb	sy
 800ce8a:	e772      	b.n	800cd72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ce8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce8e:	f000 fc6e 	bl	800d76e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce92:	f000 ffdf 	bl	800de54 <xTaskResumeAll>
 800ce96:	e76c      	b.n	800cd72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ce98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce9a:	f000 fc68 	bl	800d76e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce9e:	f000 ffd9 	bl	800de54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cea2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3738      	adds	r7, #56	; 0x38
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	e000ed04 	.word	0xe000ed04

0800ceb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b090      	sub	sp, #64	; 0x40
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	607a      	str	r2, [r7, #4]
 800cebc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d10a      	bne.n	800cede <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cecc:	f383 8811 	msr	BASEPRI, r3
 800ced0:	f3bf 8f6f 	isb	sy
 800ced4:	f3bf 8f4f 	dsb	sy
 800ced8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ceda:	bf00      	nop
 800cedc:	e7fe      	b.n	800cedc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d103      	bne.n	800ceec <xQueueGenericSendFromISR+0x3c>
 800cee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d101      	bne.n	800cef0 <xQueueGenericSendFromISR+0x40>
 800ceec:	2301      	movs	r3, #1
 800ceee:	e000      	b.n	800cef2 <xQueueGenericSendFromISR+0x42>
 800cef0:	2300      	movs	r3, #0
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d10a      	bne.n	800cf0c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefa:	f383 8811 	msr	BASEPRI, r3
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	f3bf 8f4f 	dsb	sy
 800cf06:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf08:	bf00      	nop
 800cf0a:	e7fe      	b.n	800cf0a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	2b02      	cmp	r3, #2
 800cf10:	d103      	bne.n	800cf1a <xQueueGenericSendFromISR+0x6a>
 800cf12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d101      	bne.n	800cf1e <xQueueGenericSendFromISR+0x6e>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e000      	b.n	800cf20 <xQueueGenericSendFromISR+0x70>
 800cf1e:	2300      	movs	r3, #0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d10a      	bne.n	800cf3a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf28:	f383 8811 	msr	BASEPRI, r3
 800cf2c:	f3bf 8f6f 	isb	sy
 800cf30:	f3bf 8f4f 	dsb	sy
 800cf34:	623b      	str	r3, [r7, #32]
}
 800cf36:	bf00      	nop
 800cf38:	e7fe      	b.n	800cf38 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf3a:	f002 fab5 	bl	800f4a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cf3e:	f3ef 8211 	mrs	r2, BASEPRI
 800cf42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf46:	f383 8811 	msr	BASEPRI, r3
 800cf4a:	f3bf 8f6f 	isb	sy
 800cf4e:	f3bf 8f4f 	dsb	sy
 800cf52:	61fa      	str	r2, [r7, #28]
 800cf54:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cf56:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf58:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d302      	bcc.n	800cf6c <xQueueGenericSendFromISR+0xbc>
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	d12f      	bne.n	800cfcc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf7c:	683a      	ldr	r2, [r7, #0]
 800cf7e:	68b9      	ldr	r1, [r7, #8]
 800cf80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf82:	f000 fb64 	bl	800d64e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cf8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf8e:	d112      	bne.n	800cfb6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d016      	beq.n	800cfc6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9a:	3324      	adds	r3, #36	; 0x24
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f001 f987 	bl	800e2b0 <xTaskRemoveFromEventList>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00e      	beq.n	800cfc6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d00b      	beq.n	800cfc6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	601a      	str	r2, [r3, #0]
 800cfb4:	e007      	b.n	800cfc6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cfb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cfba:	3301      	adds	r3, #1
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	b25a      	sxtb	r2, r3
 800cfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cfca:	e001      	b.n	800cfd0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfd2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cfda:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cfdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3740      	adds	r7, #64	; 0x40
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b08e      	sub	sp, #56	; 0x38
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
 800cfee:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d10a      	bne.n	800d010 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffe:	f383 8811 	msr	BASEPRI, r3
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	f3bf 8f4f 	dsb	sy
 800d00a:	623b      	str	r3, [r7, #32]
}
 800d00c:	bf00      	nop
 800d00e:	e7fe      	b.n	800d00e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00a      	beq.n	800d02e <xQueueGiveFromISR+0x48>
	__asm volatile
 800d018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01c:	f383 8811 	msr	BASEPRI, r3
 800d020:	f3bf 8f6f 	isb	sy
 800d024:	f3bf 8f4f 	dsb	sy
 800d028:	61fb      	str	r3, [r7, #28]
}
 800d02a:	bf00      	nop
 800d02c:	e7fe      	b.n	800d02c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d103      	bne.n	800d03e <xQueueGiveFromISR+0x58>
 800d036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d038:	689b      	ldr	r3, [r3, #8]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d101      	bne.n	800d042 <xQueueGiveFromISR+0x5c>
 800d03e:	2301      	movs	r3, #1
 800d040:	e000      	b.n	800d044 <xQueueGiveFromISR+0x5e>
 800d042:	2300      	movs	r3, #0
 800d044:	2b00      	cmp	r3, #0
 800d046:	d10a      	bne.n	800d05e <xQueueGiveFromISR+0x78>
	__asm volatile
 800d048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04c:	f383 8811 	msr	BASEPRI, r3
 800d050:	f3bf 8f6f 	isb	sy
 800d054:	f3bf 8f4f 	dsb	sy
 800d058:	61bb      	str	r3, [r7, #24]
}
 800d05a:	bf00      	nop
 800d05c:	e7fe      	b.n	800d05c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d05e:	f002 fa23 	bl	800f4a8 <vPortValidateInterruptPriority>
	__asm volatile
 800d062:	f3ef 8211 	mrs	r2, BASEPRI
 800d066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06a:	f383 8811 	msr	BASEPRI, r3
 800d06e:	f3bf 8f6f 	isb	sy
 800d072:	f3bf 8f4f 	dsb	sy
 800d076:	617a      	str	r2, [r7, #20]
 800d078:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d07a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d07c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d082:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d22b      	bcs.n	800d0e6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09a:	1c5a      	adds	r2, r3, #1
 800d09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d0a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0a8:	d112      	bne.n	800d0d0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d016      	beq.n	800d0e0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b4:	3324      	adds	r3, #36	; 0x24
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f001 f8fa 	bl	800e2b0 <xTaskRemoveFromEventList>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d00e      	beq.n	800d0e0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00b      	beq.n	800d0e0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	601a      	str	r2, [r3, #0]
 800d0ce:	e007      	b.n	800d0e0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	b25a      	sxtb	r2, r3
 800d0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	637b      	str	r3, [r7, #52]	; 0x34
 800d0e4:	e001      	b.n	800d0ea <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	637b      	str	r3, [r7, #52]	; 0x34
 800d0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f383 8811 	msr	BASEPRI, r3
}
 800d0f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3738      	adds	r7, #56	; 0x38
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b08c      	sub	sp, #48	; 0x30
 800d104:	af00      	add	r7, sp, #0
 800d106:	60f8      	str	r0, [r7, #12]
 800d108:	60b9      	str	r1, [r7, #8]
 800d10a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d10c:	2300      	movs	r3, #0
 800d10e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d116:	2b00      	cmp	r3, #0
 800d118:	d10a      	bne.n	800d130 <xQueueReceive+0x30>
	__asm volatile
 800d11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11e:	f383 8811 	msr	BASEPRI, r3
 800d122:	f3bf 8f6f 	isb	sy
 800d126:	f3bf 8f4f 	dsb	sy
 800d12a:	623b      	str	r3, [r7, #32]
}
 800d12c:	bf00      	nop
 800d12e:	e7fe      	b.n	800d12e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d103      	bne.n	800d13e <xQueueReceive+0x3e>
 800d136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d101      	bne.n	800d142 <xQueueReceive+0x42>
 800d13e:	2301      	movs	r3, #1
 800d140:	e000      	b.n	800d144 <xQueueReceive+0x44>
 800d142:	2300      	movs	r3, #0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d10a      	bne.n	800d15e <xQueueReceive+0x5e>
	__asm volatile
 800d148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14c:	f383 8811 	msr	BASEPRI, r3
 800d150:	f3bf 8f6f 	isb	sy
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	61fb      	str	r3, [r7, #28]
}
 800d15a:	bf00      	nop
 800d15c:	e7fe      	b.n	800d15c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d15e:	f001 fa69 	bl	800e634 <xTaskGetSchedulerState>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d102      	bne.n	800d16e <xQueueReceive+0x6e>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d101      	bne.n	800d172 <xQueueReceive+0x72>
 800d16e:	2301      	movs	r3, #1
 800d170:	e000      	b.n	800d174 <xQueueReceive+0x74>
 800d172:	2300      	movs	r3, #0
 800d174:	2b00      	cmp	r3, #0
 800d176:	d10a      	bne.n	800d18e <xQueueReceive+0x8e>
	__asm volatile
 800d178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17c:	f383 8811 	msr	BASEPRI, r3
 800d180:	f3bf 8f6f 	isb	sy
 800d184:	f3bf 8f4f 	dsb	sy
 800d188:	61bb      	str	r3, [r7, #24]
}
 800d18a:	bf00      	nop
 800d18c:	e7fe      	b.n	800d18c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d18e:	f002 f8a9 	bl	800f2e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d196:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d01f      	beq.n	800d1de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d19e:	68b9      	ldr	r1, [r7, #8]
 800d1a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1a2:	f000 fabe 	bl	800d722 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a8:	1e5a      	subs	r2, r3, #1
 800d1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b0:	691b      	ldr	r3, [r3, #16]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d00f      	beq.n	800d1d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b8:	3310      	adds	r3, #16
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f001 f878 	bl	800e2b0 <xTaskRemoveFromEventList>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d007      	beq.n	800d1d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d1c6:	4b3d      	ldr	r3, [pc, #244]	; (800d2bc <xQueueReceive+0x1bc>)
 800d1c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1cc:	601a      	str	r2, [r3, #0]
 800d1ce:	f3bf 8f4f 	dsb	sy
 800d1d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d1d6:	f002 f8b5 	bl	800f344 <vPortExitCritical>
				return pdPASS;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	e069      	b.n	800d2b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d103      	bne.n	800d1ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1e4:	f002 f8ae 	bl	800f344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	e062      	b.n	800d2b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d106      	bne.n	800d200 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1f2:	f107 0310 	add.w	r3, r7, #16
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f001 f8be 	bl	800e378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d200:	f002 f8a0 	bl	800f344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d204:	f000 fe18 	bl	800de38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d208:	f002 f86c 	bl	800f2e4 <vPortEnterCritical>
 800d20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d212:	b25b      	sxtb	r3, r3
 800d214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d218:	d103      	bne.n	800d222 <xQueueReceive+0x122>
 800d21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21c:	2200      	movs	r2, #0
 800d21e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d228:	b25b      	sxtb	r3, r3
 800d22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d22e:	d103      	bne.n	800d238 <xQueueReceive+0x138>
 800d230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d232:	2200      	movs	r2, #0
 800d234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d238:	f002 f884 	bl	800f344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d23c:	1d3a      	adds	r2, r7, #4
 800d23e:	f107 0310 	add.w	r3, r7, #16
 800d242:	4611      	mov	r1, r2
 800d244:	4618      	mov	r0, r3
 800d246:	f001 f8ad 	bl	800e3a4 <xTaskCheckForTimeOut>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d123      	bne.n	800d298 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d252:	f000 fade 	bl	800d812 <prvIsQueueEmpty>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d017      	beq.n	800d28c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25e:	3324      	adds	r3, #36	; 0x24
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	4611      	mov	r1, r2
 800d264:	4618      	mov	r0, r3
 800d266:	f000 ffd3 	bl	800e210 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d26a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d26c:	f000 fa7f 	bl	800d76e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d270:	f000 fdf0 	bl	800de54 <xTaskResumeAll>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d189      	bne.n	800d18e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d27a:	4b10      	ldr	r3, [pc, #64]	; (800d2bc <xQueueReceive+0x1bc>)
 800d27c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d280:	601a      	str	r2, [r3, #0]
 800d282:	f3bf 8f4f 	dsb	sy
 800d286:	f3bf 8f6f 	isb	sy
 800d28a:	e780      	b.n	800d18e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d28c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d28e:	f000 fa6e 	bl	800d76e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d292:	f000 fddf 	bl	800de54 <xTaskResumeAll>
 800d296:	e77a      	b.n	800d18e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d29a:	f000 fa68 	bl	800d76e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d29e:	f000 fdd9 	bl	800de54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2a4:	f000 fab5 	bl	800d812 <prvIsQueueEmpty>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	f43f af6f 	beq.w	800d18e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d2b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3730      	adds	r7, #48	; 0x30
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	e000ed04 	.word	0xe000ed04

0800d2c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b08e      	sub	sp, #56	; 0x38
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d10a      	bne.n	800d2f2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e0:	f383 8811 	msr	BASEPRI, r3
 800d2e4:	f3bf 8f6f 	isb	sy
 800d2e8:	f3bf 8f4f 	dsb	sy
 800d2ec:	623b      	str	r3, [r7, #32]
}
 800d2ee:	bf00      	nop
 800d2f0:	e7fe      	b.n	800d2f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d00a      	beq.n	800d310 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fe:	f383 8811 	msr	BASEPRI, r3
 800d302:	f3bf 8f6f 	isb	sy
 800d306:	f3bf 8f4f 	dsb	sy
 800d30a:	61fb      	str	r3, [r7, #28]
}
 800d30c:	bf00      	nop
 800d30e:	e7fe      	b.n	800d30e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d310:	f001 f990 	bl	800e634 <xTaskGetSchedulerState>
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d102      	bne.n	800d320 <xQueueSemaphoreTake+0x60>
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d101      	bne.n	800d324 <xQueueSemaphoreTake+0x64>
 800d320:	2301      	movs	r3, #1
 800d322:	e000      	b.n	800d326 <xQueueSemaphoreTake+0x66>
 800d324:	2300      	movs	r3, #0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d10a      	bne.n	800d340 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32e:	f383 8811 	msr	BASEPRI, r3
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	f3bf 8f4f 	dsb	sy
 800d33a:	61bb      	str	r3, [r7, #24]
}
 800d33c:	bf00      	nop
 800d33e:	e7fe      	b.n	800d33e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d340:	f001 ffd0 	bl	800f2e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d348:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d024      	beq.n	800d39a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d352:	1e5a      	subs	r2, r3, #1
 800d354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d356:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d104      	bne.n	800d36a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d360:	f001 fade 	bl	800e920 <pvTaskIncrementMutexHeldCount>
 800d364:	4602      	mov	r2, r0
 800d366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d368:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36c:	691b      	ldr	r3, [r3, #16]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d00f      	beq.n	800d392 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d374:	3310      	adds	r3, #16
 800d376:	4618      	mov	r0, r3
 800d378:	f000 ff9a 	bl	800e2b0 <xTaskRemoveFromEventList>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d007      	beq.n	800d392 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d382:	4b54      	ldr	r3, [pc, #336]	; (800d4d4 <xQueueSemaphoreTake+0x214>)
 800d384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d392:	f001 ffd7 	bl	800f344 <vPortExitCritical>
				return pdPASS;
 800d396:	2301      	movs	r3, #1
 800d398:	e097      	b.n	800d4ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d111      	bne.n	800d3c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d00a      	beq.n	800d3bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3aa:	f383 8811 	msr	BASEPRI, r3
 800d3ae:	f3bf 8f6f 	isb	sy
 800d3b2:	f3bf 8f4f 	dsb	sy
 800d3b6:	617b      	str	r3, [r7, #20]
}
 800d3b8:	bf00      	nop
 800d3ba:	e7fe      	b.n	800d3ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d3bc:	f001 ffc2 	bl	800f344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	e082      	b.n	800d4ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d106      	bne.n	800d3d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3ca:	f107 030c 	add.w	r3, r7, #12
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f000 ffd2 	bl	800e378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3d8:	f001 ffb4 	bl	800f344 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3dc:	f000 fd2c 	bl	800de38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3e0:	f001 ff80 	bl	800f2e4 <vPortEnterCritical>
 800d3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3ea:	b25b      	sxtb	r3, r3
 800d3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3f0:	d103      	bne.n	800d3fa <xQueueSemaphoreTake+0x13a>
 800d3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d400:	b25b      	sxtb	r3, r3
 800d402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d406:	d103      	bne.n	800d410 <xQueueSemaphoreTake+0x150>
 800d408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40a:	2200      	movs	r2, #0
 800d40c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d410:	f001 ff98 	bl	800f344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d414:	463a      	mov	r2, r7
 800d416:	f107 030c 	add.w	r3, r7, #12
 800d41a:	4611      	mov	r1, r2
 800d41c:	4618      	mov	r0, r3
 800d41e:	f000 ffc1 	bl	800e3a4 <xTaskCheckForTimeOut>
 800d422:	4603      	mov	r3, r0
 800d424:	2b00      	cmp	r3, #0
 800d426:	d132      	bne.n	800d48e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d428:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d42a:	f000 f9f2 	bl	800d812 <prvIsQueueEmpty>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d026      	beq.n	800d482 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d109      	bne.n	800d450 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d43c:	f001 ff52 	bl	800f2e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	4618      	mov	r0, r3
 800d446:	f001 f913 	bl	800e670 <xTaskPriorityInherit>
 800d44a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d44c:	f001 ff7a 	bl	800f344 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d452:	3324      	adds	r3, #36	; 0x24
 800d454:	683a      	ldr	r2, [r7, #0]
 800d456:	4611      	mov	r1, r2
 800d458:	4618      	mov	r0, r3
 800d45a:	f000 fed9 	bl	800e210 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d45e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d460:	f000 f985 	bl	800d76e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d464:	f000 fcf6 	bl	800de54 <xTaskResumeAll>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	f47f af68 	bne.w	800d340 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d470:	4b18      	ldr	r3, [pc, #96]	; (800d4d4 <xQueueSemaphoreTake+0x214>)
 800d472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d476:	601a      	str	r2, [r3, #0]
 800d478:	f3bf 8f4f 	dsb	sy
 800d47c:	f3bf 8f6f 	isb	sy
 800d480:	e75e      	b.n	800d340 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d482:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d484:	f000 f973 	bl	800d76e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d488:	f000 fce4 	bl	800de54 <xTaskResumeAll>
 800d48c:	e758      	b.n	800d340 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d48e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d490:	f000 f96d 	bl	800d76e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d494:	f000 fcde 	bl	800de54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d498:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d49a:	f000 f9ba 	bl	800d812 <prvIsQueueEmpty>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	f43f af4d 	beq.w	800d340 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d00d      	beq.n	800d4c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d4ac:	f001 ff1a 	bl	800f2e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d4b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4b2:	f000 f8b4 	bl	800d61e <prvGetDisinheritPriorityAfterTimeout>
 800d4b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f001 f9ac 	bl	800e81c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d4c4:	f001 ff3e 	bl	800f344 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d4c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3738      	adds	r7, #56	; 0x38
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	e000ed04 	.word	0xe000ed04

0800d4d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b08e      	sub	sp, #56	; 0x38
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d10a      	bne.n	800d504 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f2:	f383 8811 	msr	BASEPRI, r3
 800d4f6:	f3bf 8f6f 	isb	sy
 800d4fa:	f3bf 8f4f 	dsb	sy
 800d4fe:	623b      	str	r3, [r7, #32]
}
 800d500:	bf00      	nop
 800d502:	e7fe      	b.n	800d502 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d103      	bne.n	800d512 <xQueueReceiveFromISR+0x3a>
 800d50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d101      	bne.n	800d516 <xQueueReceiveFromISR+0x3e>
 800d512:	2301      	movs	r3, #1
 800d514:	e000      	b.n	800d518 <xQueueReceiveFromISR+0x40>
 800d516:	2300      	movs	r3, #0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d10a      	bne.n	800d532 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d520:	f383 8811 	msr	BASEPRI, r3
 800d524:	f3bf 8f6f 	isb	sy
 800d528:	f3bf 8f4f 	dsb	sy
 800d52c:	61fb      	str	r3, [r7, #28]
}
 800d52e:	bf00      	nop
 800d530:	e7fe      	b.n	800d530 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d532:	f001 ffb9 	bl	800f4a8 <vPortValidateInterruptPriority>
	__asm volatile
 800d536:	f3ef 8211 	mrs	r2, BASEPRI
 800d53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53e:	f383 8811 	msr	BASEPRI, r3
 800d542:	f3bf 8f6f 	isb	sy
 800d546:	f3bf 8f4f 	dsb	sy
 800d54a:	61ba      	str	r2, [r7, #24]
 800d54c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d54e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d550:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d556:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d02f      	beq.n	800d5be <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d560:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d568:	68b9      	ldr	r1, [r7, #8]
 800d56a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d56c:	f000 f8d9 	bl	800d722 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d572:	1e5a      	subs	r2, r3, #1
 800d574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d576:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d578:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d580:	d112      	bne.n	800d5a8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d584:	691b      	ldr	r3, [r3, #16]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d016      	beq.n	800d5b8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58c:	3310      	adds	r3, #16
 800d58e:	4618      	mov	r0, r3
 800d590:	f000 fe8e 	bl	800e2b0 <xTaskRemoveFromEventList>
 800d594:	4603      	mov	r3, r0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d00e      	beq.n	800d5b8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00b      	beq.n	800d5b8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	601a      	str	r2, [r3, #0]
 800d5a6:	e007      	b.n	800d5b8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d5a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	b25a      	sxtb	r2, r3
 800d5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	637b      	str	r3, [r7, #52]	; 0x34
 800d5bc:	e001      	b.n	800d5c2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	637b      	str	r3, [r7, #52]	; 0x34
 800d5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	f383 8811 	msr	BASEPRI, r3
}
 800d5cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3738      	adds	r7, #56	; 0x38
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d10a      	bne.n	800d600 <vQueueDelete+0x28>
	__asm volatile
 800d5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ee:	f383 8811 	msr	BASEPRI, r3
 800d5f2:	f3bf 8f6f 	isb	sy
 800d5f6:	f3bf 8f4f 	dsb	sy
 800d5fa:	60bb      	str	r3, [r7, #8]
}
 800d5fc:	bf00      	nop
 800d5fe:	e7fe      	b.n	800d5fe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d600:	68f8      	ldr	r0, [r7, #12]
 800d602:	f000 f95f 	bl	800d8c4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d102      	bne.n	800d616 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f002 f855 	bl	800f6c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d616:	bf00      	nop
 800d618:	3710      	adds	r7, #16
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}

0800d61e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d61e:	b480      	push	{r7}
 800d620:	b085      	sub	sp, #20
 800d622:	af00      	add	r7, sp, #0
 800d624:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d006      	beq.n	800d63c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d638:	60fb      	str	r3, [r7, #12]
 800d63a:	e001      	b.n	800d640 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d63c:	2300      	movs	r3, #0
 800d63e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d640:	68fb      	ldr	r3, [r7, #12]
	}
 800d642:	4618      	mov	r0, r3
 800d644:	3714      	adds	r7, #20
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr

0800d64e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b086      	sub	sp, #24
 800d652:	af00      	add	r7, sp, #0
 800d654:	60f8      	str	r0, [r7, #12]
 800d656:	60b9      	str	r1, [r7, #8]
 800d658:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d65a:	2300      	movs	r3, #0
 800d65c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d662:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d10d      	bne.n	800d688 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d14d      	bne.n	800d710 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	4618      	mov	r0, r3
 800d67a:	f001 f861 	bl	800e740 <xTaskPriorityDisinherit>
 800d67e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2200      	movs	r2, #0
 800d684:	609a      	str	r2, [r3, #8]
 800d686:	e043      	b.n	800d710 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d119      	bne.n	800d6c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	6858      	ldr	r0, [r3, #4]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d696:	461a      	mov	r2, r3
 800d698:	68b9      	ldr	r1, [r7, #8]
 800d69a:	f020 fd91 	bl	802e1c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	685a      	ldr	r2, [r3, #4]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a6:	441a      	add	r2, r3
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	685a      	ldr	r2, [r3, #4]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	689b      	ldr	r3, [r3, #8]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d32b      	bcc.n	800d710 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	605a      	str	r2, [r3, #4]
 800d6c0:	e026      	b.n	800d710 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	68d8      	ldr	r0, [r3, #12]
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	68b9      	ldr	r1, [r7, #8]
 800d6ce:	f020 fd77 	bl	802e1c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	68da      	ldr	r2, [r3, #12]
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6da:	425b      	negs	r3, r3
 800d6dc:	441a      	add	r2, r3
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	68da      	ldr	r2, [r3, #12]
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d207      	bcs.n	800d6fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	689a      	ldr	r2, [r3, #8]
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6f6:	425b      	negs	r3, r3
 800d6f8:	441a      	add	r2, r3
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2b02      	cmp	r3, #2
 800d702:	d105      	bne.n	800d710 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d002      	beq.n	800d710 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	3b01      	subs	r3, #1
 800d70e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	1c5a      	adds	r2, r3, #1
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d718:	697b      	ldr	r3, [r7, #20]
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3718      	adds	r7, #24
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b082      	sub	sp, #8
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
 800d72a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d730:	2b00      	cmp	r3, #0
 800d732:	d018      	beq.n	800d766 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	68da      	ldr	r2, [r3, #12]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d73c:	441a      	add	r2, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	68da      	ldr	r2, [r3, #12]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	689b      	ldr	r3, [r3, #8]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d303      	bcc.n	800d756 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	68d9      	ldr	r1, [r3, #12]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d75e:	461a      	mov	r2, r3
 800d760:	6838      	ldr	r0, [r7, #0]
 800d762:	f020 fd2d 	bl	802e1c0 <memcpy>
	}
}
 800d766:	bf00      	nop
 800d768:	3708      	adds	r7, #8
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d76e:	b580      	push	{r7, lr}
 800d770:	b084      	sub	sp, #16
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d776:	f001 fdb5 	bl	800f2e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d780:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d782:	e011      	b.n	800d7a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d012      	beq.n	800d7b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	3324      	adds	r3, #36	; 0x24
 800d790:	4618      	mov	r0, r3
 800d792:	f000 fd8d 	bl	800e2b0 <xTaskRemoveFromEventList>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d001      	beq.n	800d7a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d79c:	f000 fe64 	bl	800e468 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d7a0:	7bfb      	ldrb	r3, [r7, #15]
 800d7a2:	3b01      	subs	r3, #1
 800d7a4:	b2db      	uxtb	r3, r3
 800d7a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d7a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	dce9      	bgt.n	800d784 <prvUnlockQueue+0x16>
 800d7b0:	e000      	b.n	800d7b4 <prvUnlockQueue+0x46>
					break;
 800d7b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	22ff      	movs	r2, #255	; 0xff
 800d7b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d7bc:	f001 fdc2 	bl	800f344 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d7c0:	f001 fd90 	bl	800f2e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7cc:	e011      	b.n	800d7f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	691b      	ldr	r3, [r3, #16]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d012      	beq.n	800d7fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	3310      	adds	r3, #16
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f000 fd68 	bl	800e2b0 <xTaskRemoveFromEventList>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d001      	beq.n	800d7ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d7e6:	f000 fe3f 	bl	800e468 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d7ea:	7bbb      	ldrb	r3, [r7, #14]
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	dce9      	bgt.n	800d7ce <prvUnlockQueue+0x60>
 800d7fa:	e000      	b.n	800d7fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d7fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	22ff      	movs	r2, #255	; 0xff
 800d802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d806:	f001 fd9d 	bl	800f344 <vPortExitCritical>
}
 800d80a:	bf00      	nop
 800d80c:	3710      	adds	r7, #16
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}

0800d812 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d812:	b580      	push	{r7, lr}
 800d814:	b084      	sub	sp, #16
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d81a:	f001 fd63 	bl	800f2e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d822:	2b00      	cmp	r3, #0
 800d824:	d102      	bne.n	800d82c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d826:	2301      	movs	r3, #1
 800d828:	60fb      	str	r3, [r7, #12]
 800d82a:	e001      	b.n	800d830 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d82c:	2300      	movs	r3, #0
 800d82e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d830:	f001 fd88 	bl	800f344 <vPortExitCritical>

	return xReturn;
 800d834:	68fb      	ldr	r3, [r7, #12]
}
 800d836:	4618      	mov	r0, r3
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b084      	sub	sp, #16
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d846:	f001 fd4d 	bl	800f2e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d852:	429a      	cmp	r2, r3
 800d854:	d102      	bne.n	800d85c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d856:	2301      	movs	r3, #1
 800d858:	60fb      	str	r3, [r7, #12]
 800d85a:	e001      	b.n	800d860 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d85c:	2300      	movs	r3, #0
 800d85e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d860:	f001 fd70 	bl	800f344 <vPortExitCritical>

	return xReturn;
 800d864:	68fb      	ldr	r3, [r7, #12]
}
 800d866:	4618      	mov	r0, r3
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
	...

0800d870 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d870:	b480      	push	{r7}
 800d872:	b085      	sub	sp, #20
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d87a:	2300      	movs	r3, #0
 800d87c:	60fb      	str	r3, [r7, #12]
 800d87e:	e014      	b.n	800d8aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d880:	4a0f      	ldr	r2, [pc, #60]	; (800d8c0 <vQueueAddToRegistry+0x50>)
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d10b      	bne.n	800d8a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d88c:	490c      	ldr	r1, [pc, #48]	; (800d8c0 <vQueueAddToRegistry+0x50>)
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	683a      	ldr	r2, [r7, #0]
 800d892:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d896:	4a0a      	ldr	r2, [pc, #40]	; (800d8c0 <vQueueAddToRegistry+0x50>)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	00db      	lsls	r3, r3, #3
 800d89c:	4413      	add	r3, r2
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d8a2:	e006      	b.n	800d8b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	60fb      	str	r3, [r7, #12]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2b07      	cmp	r3, #7
 800d8ae:	d9e7      	bls.n	800d880 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d8b0:	bf00      	nop
 800d8b2:	bf00      	nop
 800d8b4:	3714      	adds	r7, #20
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr
 800d8be:	bf00      	nop
 800d8c0:	2000b5b0 	.word	0x2000b5b0

0800d8c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b085      	sub	sp, #20
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	60fb      	str	r3, [r7, #12]
 800d8d0:	e016      	b.n	800d900 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d8d2:	4a10      	ldr	r2, [pc, #64]	; (800d914 <vQueueUnregisterQueue+0x50>)
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	00db      	lsls	r3, r3, #3
 800d8d8:	4413      	add	r3, r2
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d10b      	bne.n	800d8fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d8e2:	4a0c      	ldr	r2, [pc, #48]	; (800d914 <vQueueUnregisterQueue+0x50>)
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2100      	movs	r1, #0
 800d8e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d8ec:	4a09      	ldr	r2, [pc, #36]	; (800d914 <vQueueUnregisterQueue+0x50>)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	00db      	lsls	r3, r3, #3
 800d8f2:	4413      	add	r3, r2
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	605a      	str	r2, [r3, #4]
				break;
 800d8f8:	e006      	b.n	800d908 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	60fb      	str	r3, [r7, #12]
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	2b07      	cmp	r3, #7
 800d904:	d9e5      	bls.n	800d8d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d906:	bf00      	nop
 800d908:	bf00      	nop
 800d90a:	3714      	adds	r7, #20
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr
 800d914:	2000b5b0 	.word	0x2000b5b0

0800d918 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b086      	sub	sp, #24
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d928:	f001 fcdc 	bl	800f2e4 <vPortEnterCritical>
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d932:	b25b      	sxtb	r3, r3
 800d934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d938:	d103      	bne.n	800d942 <vQueueWaitForMessageRestricted+0x2a>
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	2200      	movs	r2, #0
 800d93e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d948:	b25b      	sxtb	r3, r3
 800d94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d94e:	d103      	bne.n	800d958 <vQueueWaitForMessageRestricted+0x40>
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	2200      	movs	r2, #0
 800d954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d958:	f001 fcf4 	bl	800f344 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d960:	2b00      	cmp	r3, #0
 800d962:	d106      	bne.n	800d972 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	3324      	adds	r3, #36	; 0x24
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	68b9      	ldr	r1, [r7, #8]
 800d96c:	4618      	mov	r0, r3
 800d96e:	f000 fc73 	bl	800e258 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d972:	6978      	ldr	r0, [r7, #20]
 800d974:	f7ff fefb 	bl	800d76e <prvUnlockQueue>
	}
 800d978:	bf00      	nop
 800d97a:	3718      	adds	r7, #24
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d980:	b580      	push	{r7, lr}
 800d982:	b08e      	sub	sp, #56	; 0x38
 800d984:	af04      	add	r7, sp, #16
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	60b9      	str	r1, [r7, #8]
 800d98a:	607a      	str	r2, [r7, #4]
 800d98c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d990:	2b00      	cmp	r3, #0
 800d992:	d10a      	bne.n	800d9aa <xTaskCreateStatic+0x2a>
	__asm volatile
 800d994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d998:	f383 8811 	msr	BASEPRI, r3
 800d99c:	f3bf 8f6f 	isb	sy
 800d9a0:	f3bf 8f4f 	dsb	sy
 800d9a4:	623b      	str	r3, [r7, #32]
}
 800d9a6:	bf00      	nop
 800d9a8:	e7fe      	b.n	800d9a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d10a      	bne.n	800d9c6 <xTaskCreateStatic+0x46>
	__asm volatile
 800d9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b4:	f383 8811 	msr	BASEPRI, r3
 800d9b8:	f3bf 8f6f 	isb	sy
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	61fb      	str	r3, [r7, #28]
}
 800d9c2:	bf00      	nop
 800d9c4:	e7fe      	b.n	800d9c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d9c6:	23bc      	movs	r3, #188	; 0xbc
 800d9c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	2bbc      	cmp	r3, #188	; 0xbc
 800d9ce:	d00a      	beq.n	800d9e6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d4:	f383 8811 	msr	BASEPRI, r3
 800d9d8:	f3bf 8f6f 	isb	sy
 800d9dc:	f3bf 8f4f 	dsb	sy
 800d9e0:	61bb      	str	r3, [r7, #24]
}
 800d9e2:	bf00      	nop
 800d9e4:	e7fe      	b.n	800d9e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d9e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d01e      	beq.n	800da2c <xTaskCreateStatic+0xac>
 800d9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d01b      	beq.n	800da2c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da00:	2202      	movs	r2, #2
 800da02:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800da06:	2300      	movs	r3, #0
 800da08:	9303      	str	r3, [sp, #12]
 800da0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0c:	9302      	str	r3, [sp, #8]
 800da0e:	f107 0314 	add.w	r3, r7, #20
 800da12:	9301      	str	r3, [sp, #4]
 800da14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da16:	9300      	str	r3, [sp, #0]
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	68b9      	ldr	r1, [r7, #8]
 800da1e:	68f8      	ldr	r0, [r7, #12]
 800da20:	f000 f850 	bl	800dac4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da26:	f000 f8f3 	bl	800dc10 <prvAddNewTaskToReadyList>
 800da2a:	e001      	b.n	800da30 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800da2c:	2300      	movs	r3, #0
 800da2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800da30:	697b      	ldr	r3, [r7, #20]
	}
 800da32:	4618      	mov	r0, r3
 800da34:	3728      	adds	r7, #40	; 0x28
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b08c      	sub	sp, #48	; 0x30
 800da3e:	af04      	add	r7, sp, #16
 800da40:	60f8      	str	r0, [r7, #12]
 800da42:	60b9      	str	r1, [r7, #8]
 800da44:	603b      	str	r3, [r7, #0]
 800da46:	4613      	mov	r3, r2
 800da48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800da4a:	88fb      	ldrh	r3, [r7, #6]
 800da4c:	009b      	lsls	r3, r3, #2
 800da4e:	4618      	mov	r0, r3
 800da50:	f001 fd6a 	bl	800f528 <pvPortMalloc>
 800da54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00e      	beq.n	800da7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800da5c:	20bc      	movs	r0, #188	; 0xbc
 800da5e:	f001 fd63 	bl	800f528 <pvPortMalloc>
 800da62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d003      	beq.n	800da72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	697a      	ldr	r2, [r7, #20]
 800da6e:	631a      	str	r2, [r3, #48]	; 0x30
 800da70:	e005      	b.n	800da7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800da72:	6978      	ldr	r0, [r7, #20]
 800da74:	f001 fe24 	bl	800f6c0 <vPortFree>
 800da78:	e001      	b.n	800da7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800da7a:	2300      	movs	r3, #0
 800da7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800da7e:	69fb      	ldr	r3, [r7, #28]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d017      	beq.n	800dab4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800da84:	69fb      	ldr	r3, [r7, #28]
 800da86:	2200      	movs	r2, #0
 800da88:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800da8c:	88fa      	ldrh	r2, [r7, #6]
 800da8e:	2300      	movs	r3, #0
 800da90:	9303      	str	r3, [sp, #12]
 800da92:	69fb      	ldr	r3, [r7, #28]
 800da94:	9302      	str	r3, [sp, #8]
 800da96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da98:	9301      	str	r3, [sp, #4]
 800da9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9c:	9300      	str	r3, [sp, #0]
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	68b9      	ldr	r1, [r7, #8]
 800daa2:	68f8      	ldr	r0, [r7, #12]
 800daa4:	f000 f80e 	bl	800dac4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800daa8:	69f8      	ldr	r0, [r7, #28]
 800daaa:	f000 f8b1 	bl	800dc10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800daae:	2301      	movs	r3, #1
 800dab0:	61bb      	str	r3, [r7, #24]
 800dab2:	e002      	b.n	800daba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dab4:	f04f 33ff 	mov.w	r3, #4294967295
 800dab8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800daba:	69bb      	ldr	r3, [r7, #24]
	}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3720      	adds	r7, #32
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b088      	sub	sp, #32
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	607a      	str	r2, [r7, #4]
 800dad0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	461a      	mov	r2, r3
 800dadc:	21a5      	movs	r1, #165	; 0xa5
 800dade:	f020 fb7d 	bl	802e1dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800daec:	3b01      	subs	r3, #1
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	4413      	add	r3, r2
 800daf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	f023 0307 	bic.w	r3, r3, #7
 800dafa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	f003 0307 	and.w	r3, r3, #7
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00a      	beq.n	800db1c <prvInitialiseNewTask+0x58>
	__asm volatile
 800db06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0a:	f383 8811 	msr	BASEPRI, r3
 800db0e:	f3bf 8f6f 	isb	sy
 800db12:	f3bf 8f4f 	dsb	sy
 800db16:	617b      	str	r3, [r7, #20]
}
 800db18:	bf00      	nop
 800db1a:	e7fe      	b.n	800db1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d01f      	beq.n	800db62 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db22:	2300      	movs	r3, #0
 800db24:	61fb      	str	r3, [r7, #28]
 800db26:	e012      	b.n	800db4e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800db28:	68ba      	ldr	r2, [r7, #8]
 800db2a:	69fb      	ldr	r3, [r7, #28]
 800db2c:	4413      	add	r3, r2
 800db2e:	7819      	ldrb	r1, [r3, #0]
 800db30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	4413      	add	r3, r2
 800db36:	3334      	adds	r3, #52	; 0x34
 800db38:	460a      	mov	r2, r1
 800db3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800db3c:	68ba      	ldr	r2, [r7, #8]
 800db3e:	69fb      	ldr	r3, [r7, #28]
 800db40:	4413      	add	r3, r2
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d006      	beq.n	800db56 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	3301      	adds	r3, #1
 800db4c:	61fb      	str	r3, [r7, #28]
 800db4e:	69fb      	ldr	r3, [r7, #28]
 800db50:	2b0f      	cmp	r3, #15
 800db52:	d9e9      	bls.n	800db28 <prvInitialiseNewTask+0x64>
 800db54:	e000      	b.n	800db58 <prvInitialiseNewTask+0x94>
			{
				break;
 800db56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5a:	2200      	movs	r2, #0
 800db5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db60:	e003      	b.n	800db6a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800db62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db64:	2200      	movs	r2, #0
 800db66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6c:	2b37      	cmp	r3, #55	; 0x37
 800db6e:	d901      	bls.n	800db74 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800db70:	2337      	movs	r3, #55	; 0x37
 800db72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800db74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800db7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800db80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db82:	2200      	movs	r2, #0
 800db84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db88:	3304      	adds	r3, #4
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7fe fe56 	bl	800c83c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db92:	3318      	adds	r3, #24
 800db94:	4618      	mov	r0, r3
 800db96:	f7fe fe51 	bl	800c83c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc2:	3354      	adds	r3, #84	; 0x54
 800dbc4:	2260      	movs	r2, #96	; 0x60
 800dbc6:	2100      	movs	r1, #0
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f020 fb07 	bl	802e1dc <memset>
 800dbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd0:	4a0c      	ldr	r2, [pc, #48]	; (800dc04 <prvInitialiseNewTask+0x140>)
 800dbd2:	659a      	str	r2, [r3, #88]	; 0x58
 800dbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd6:	4a0c      	ldr	r2, [pc, #48]	; (800dc08 <prvInitialiseNewTask+0x144>)
 800dbd8:	65da      	str	r2, [r3, #92]	; 0x5c
 800dbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbdc:	4a0b      	ldr	r2, [pc, #44]	; (800dc0c <prvInitialiseNewTask+0x148>)
 800dbde:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dbe0:	683a      	ldr	r2, [r7, #0]
 800dbe2:	68f9      	ldr	r1, [r7, #12]
 800dbe4:	69b8      	ldr	r0, [r7, #24]
 800dbe6:	f001 fa51 	bl	800f08c <pxPortInitialiseStack>
 800dbea:	4602      	mov	r2, r0
 800dbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d002      	beq.n	800dbfc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbfa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbfc:	bf00      	nop
 800dbfe:	3720      	adds	r7, #32
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	08033b08 	.word	0x08033b08
 800dc08:	08033b28 	.word	0x08033b28
 800dc0c:	08033ae8 	.word	0x08033ae8

0800dc10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dc18:	f001 fb64 	bl	800f2e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dc1c:	4b2d      	ldr	r3, [pc, #180]	; (800dcd4 <prvAddNewTaskToReadyList+0xc4>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	3301      	adds	r3, #1
 800dc22:	4a2c      	ldr	r2, [pc, #176]	; (800dcd4 <prvAddNewTaskToReadyList+0xc4>)
 800dc24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dc26:	4b2c      	ldr	r3, [pc, #176]	; (800dcd8 <prvAddNewTaskToReadyList+0xc8>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d109      	bne.n	800dc42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dc2e:	4a2a      	ldr	r2, [pc, #168]	; (800dcd8 <prvAddNewTaskToReadyList+0xc8>)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dc34:	4b27      	ldr	r3, [pc, #156]	; (800dcd4 <prvAddNewTaskToReadyList+0xc4>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d110      	bne.n	800dc5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dc3c:	f000 fc38 	bl	800e4b0 <prvInitialiseTaskLists>
 800dc40:	e00d      	b.n	800dc5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dc42:	4b26      	ldr	r3, [pc, #152]	; (800dcdc <prvAddNewTaskToReadyList+0xcc>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d109      	bne.n	800dc5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc4a:	4b23      	ldr	r3, [pc, #140]	; (800dcd8 <prvAddNewTaskToReadyList+0xc8>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d802      	bhi.n	800dc5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dc58:	4a1f      	ldr	r2, [pc, #124]	; (800dcd8 <prvAddNewTaskToReadyList+0xc8>)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc5e:	4b20      	ldr	r3, [pc, #128]	; (800dce0 <prvAddNewTaskToReadyList+0xd0>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	3301      	adds	r3, #1
 800dc64:	4a1e      	ldr	r2, [pc, #120]	; (800dce0 <prvAddNewTaskToReadyList+0xd0>)
 800dc66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc68:	4b1d      	ldr	r3, [pc, #116]	; (800dce0 <prvAddNewTaskToReadyList+0xd0>)
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc74:	4b1b      	ldr	r3, [pc, #108]	; (800dce4 <prvAddNewTaskToReadyList+0xd4>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d903      	bls.n	800dc84 <prvAddNewTaskToReadyList+0x74>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc80:	4a18      	ldr	r2, [pc, #96]	; (800dce4 <prvAddNewTaskToReadyList+0xd4>)
 800dc82:	6013      	str	r3, [r2, #0]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc88:	4613      	mov	r3, r2
 800dc8a:	009b      	lsls	r3, r3, #2
 800dc8c:	4413      	add	r3, r2
 800dc8e:	009b      	lsls	r3, r3, #2
 800dc90:	4a15      	ldr	r2, [pc, #84]	; (800dce8 <prvAddNewTaskToReadyList+0xd8>)
 800dc92:	441a      	add	r2, r3
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	3304      	adds	r3, #4
 800dc98:	4619      	mov	r1, r3
 800dc9a:	4610      	mov	r0, r2
 800dc9c:	f7fe fddb 	bl	800c856 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dca0:	f001 fb50 	bl	800f344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dca4:	4b0d      	ldr	r3, [pc, #52]	; (800dcdc <prvAddNewTaskToReadyList+0xcc>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00e      	beq.n	800dcca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dcac:	4b0a      	ldr	r3, [pc, #40]	; (800dcd8 <prvAddNewTaskToReadyList+0xc8>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d207      	bcs.n	800dcca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dcba:	4b0c      	ldr	r3, [pc, #48]	; (800dcec <prvAddNewTaskToReadyList+0xdc>)
 800dcbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcc0:	601a      	str	r2, [r3, #0]
 800dcc2:	f3bf 8f4f 	dsb	sy
 800dcc6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcca:	bf00      	nop
 800dccc:	3708      	adds	r7, #8
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	20000a88 	.word	0x20000a88
 800dcd8:	200005b4 	.word	0x200005b4
 800dcdc:	20000a94 	.word	0x20000a94
 800dce0:	20000aa4 	.word	0x20000aa4
 800dce4:	20000a90 	.word	0x20000a90
 800dce8:	200005b8 	.word	0x200005b8
 800dcec:	e000ed04 	.word	0xe000ed04

0800dcf0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d017      	beq.n	800dd32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dd02:	4b13      	ldr	r3, [pc, #76]	; (800dd50 <vTaskDelay+0x60>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00a      	beq.n	800dd20 <vTaskDelay+0x30>
	__asm volatile
 800dd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0e:	f383 8811 	msr	BASEPRI, r3
 800dd12:	f3bf 8f6f 	isb	sy
 800dd16:	f3bf 8f4f 	dsb	sy
 800dd1a:	60bb      	str	r3, [r7, #8]
}
 800dd1c:	bf00      	nop
 800dd1e:	e7fe      	b.n	800dd1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dd20:	f000 f88a 	bl	800de38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dd24:	2100      	movs	r1, #0
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f000 fe0e 	bl	800e948 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dd2c:	f000 f892 	bl	800de54 <xTaskResumeAll>
 800dd30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d107      	bne.n	800dd48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dd38:	4b06      	ldr	r3, [pc, #24]	; (800dd54 <vTaskDelay+0x64>)
 800dd3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd3e:	601a      	str	r2, [r3, #0]
 800dd40:	f3bf 8f4f 	dsb	sy
 800dd44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd48:	bf00      	nop
 800dd4a:	3710      	adds	r7, #16
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	20000ab0 	.word	0x20000ab0
 800dd54:	e000ed04 	.word	0xe000ed04

0800dd58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b08a      	sub	sp, #40	; 0x28
 800dd5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dd62:	2300      	movs	r3, #0
 800dd64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dd66:	463a      	mov	r2, r7
 800dd68:	1d39      	adds	r1, r7, #4
 800dd6a:	f107 0308 	add.w	r3, r7, #8
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fe fd10 	bl	800c794 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dd74:	6839      	ldr	r1, [r7, #0]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	68ba      	ldr	r2, [r7, #8]
 800dd7a:	9202      	str	r2, [sp, #8]
 800dd7c:	9301      	str	r3, [sp, #4]
 800dd7e:	2300      	movs	r3, #0
 800dd80:	9300      	str	r3, [sp, #0]
 800dd82:	2300      	movs	r3, #0
 800dd84:	460a      	mov	r2, r1
 800dd86:	4924      	ldr	r1, [pc, #144]	; (800de18 <vTaskStartScheduler+0xc0>)
 800dd88:	4824      	ldr	r0, [pc, #144]	; (800de1c <vTaskStartScheduler+0xc4>)
 800dd8a:	f7ff fdf9 	bl	800d980 <xTaskCreateStatic>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	4a23      	ldr	r2, [pc, #140]	; (800de20 <vTaskStartScheduler+0xc8>)
 800dd92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd94:	4b22      	ldr	r3, [pc, #136]	; (800de20 <vTaskStartScheduler+0xc8>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d002      	beq.n	800dda2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	617b      	str	r3, [r7, #20]
 800dda0:	e001      	b.n	800dda6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dda2:	2300      	movs	r3, #0
 800dda4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	d102      	bne.n	800ddb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ddac:	f000 fe20 	bl	800e9f0 <xTimerCreateTimerTask>
 800ddb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d11b      	bne.n	800ddf0 <vTaskStartScheduler+0x98>
	__asm volatile
 800ddb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddbc:	f383 8811 	msr	BASEPRI, r3
 800ddc0:	f3bf 8f6f 	isb	sy
 800ddc4:	f3bf 8f4f 	dsb	sy
 800ddc8:	613b      	str	r3, [r7, #16]
}
 800ddca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ddcc:	4b15      	ldr	r3, [pc, #84]	; (800de24 <vTaskStartScheduler+0xcc>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	3354      	adds	r3, #84	; 0x54
 800ddd2:	4a15      	ldr	r2, [pc, #84]	; (800de28 <vTaskStartScheduler+0xd0>)
 800ddd4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ddd6:	4b15      	ldr	r3, [pc, #84]	; (800de2c <vTaskStartScheduler+0xd4>)
 800ddd8:	f04f 32ff 	mov.w	r2, #4294967295
 800dddc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ddde:	4b14      	ldr	r3, [pc, #80]	; (800de30 <vTaskStartScheduler+0xd8>)
 800dde0:	2201      	movs	r2, #1
 800dde2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dde4:	4b13      	ldr	r3, [pc, #76]	; (800de34 <vTaskStartScheduler+0xdc>)
 800dde6:	2200      	movs	r2, #0
 800dde8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ddea:	f001 f9d9 	bl	800f1a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ddee:	e00e      	b.n	800de0e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddf6:	d10a      	bne.n	800de0e <vTaskStartScheduler+0xb6>
	__asm volatile
 800ddf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddfc:	f383 8811 	msr	BASEPRI, r3
 800de00:	f3bf 8f6f 	isb	sy
 800de04:	f3bf 8f4f 	dsb	sy
 800de08:	60fb      	str	r3, [r7, #12]
}
 800de0a:	bf00      	nop
 800de0c:	e7fe      	b.n	800de0c <vTaskStartScheduler+0xb4>
}
 800de0e:	bf00      	nop
 800de10:	3718      	adds	r7, #24
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	0802f168 	.word	0x0802f168
 800de1c:	0800e481 	.word	0x0800e481
 800de20:	20000aac 	.word	0x20000aac
 800de24:	200005b4 	.word	0x200005b4
 800de28:	20000098 	.word	0x20000098
 800de2c:	20000aa8 	.word	0x20000aa8
 800de30:	20000a94 	.word	0x20000a94
 800de34:	20000a8c 	.word	0x20000a8c

0800de38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de38:	b480      	push	{r7}
 800de3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de3c:	4b04      	ldr	r3, [pc, #16]	; (800de50 <vTaskSuspendAll+0x18>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	3301      	adds	r3, #1
 800de42:	4a03      	ldr	r2, [pc, #12]	; (800de50 <vTaskSuspendAll+0x18>)
 800de44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800de46:	bf00      	nop
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	20000ab0 	.word	0x20000ab0

0800de54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b084      	sub	sp, #16
 800de58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800de5a:	2300      	movs	r3, #0
 800de5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800de5e:	2300      	movs	r3, #0
 800de60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800de62:	4b42      	ldr	r3, [pc, #264]	; (800df6c <xTaskResumeAll+0x118>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d10a      	bne.n	800de80 <xTaskResumeAll+0x2c>
	__asm volatile
 800de6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6e:	f383 8811 	msr	BASEPRI, r3
 800de72:	f3bf 8f6f 	isb	sy
 800de76:	f3bf 8f4f 	dsb	sy
 800de7a:	603b      	str	r3, [r7, #0]
}
 800de7c:	bf00      	nop
 800de7e:	e7fe      	b.n	800de7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800de80:	f001 fa30 	bl	800f2e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800de84:	4b39      	ldr	r3, [pc, #228]	; (800df6c <xTaskResumeAll+0x118>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	3b01      	subs	r3, #1
 800de8a:	4a38      	ldr	r2, [pc, #224]	; (800df6c <xTaskResumeAll+0x118>)
 800de8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de8e:	4b37      	ldr	r3, [pc, #220]	; (800df6c <xTaskResumeAll+0x118>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d162      	bne.n	800df5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de96:	4b36      	ldr	r3, [pc, #216]	; (800df70 <xTaskResumeAll+0x11c>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d05e      	beq.n	800df5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de9e:	e02f      	b.n	800df00 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dea0:	4b34      	ldr	r3, [pc, #208]	; (800df74 <xTaskResumeAll+0x120>)
 800dea2:	68db      	ldr	r3, [r3, #12]
 800dea4:	68db      	ldr	r3, [r3, #12]
 800dea6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	3318      	adds	r3, #24
 800deac:	4618      	mov	r0, r3
 800deae:	f7fe fd2f 	bl	800c910 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	3304      	adds	r3, #4
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7fe fd2a 	bl	800c910 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dec0:	4b2d      	ldr	r3, [pc, #180]	; (800df78 <xTaskResumeAll+0x124>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d903      	bls.n	800ded0 <xTaskResumeAll+0x7c>
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800decc:	4a2a      	ldr	r2, [pc, #168]	; (800df78 <xTaskResumeAll+0x124>)
 800dece:	6013      	str	r3, [r2, #0]
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded4:	4613      	mov	r3, r2
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	4413      	add	r3, r2
 800deda:	009b      	lsls	r3, r3, #2
 800dedc:	4a27      	ldr	r2, [pc, #156]	; (800df7c <xTaskResumeAll+0x128>)
 800dede:	441a      	add	r2, r3
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	3304      	adds	r3, #4
 800dee4:	4619      	mov	r1, r3
 800dee6:	4610      	mov	r0, r2
 800dee8:	f7fe fcb5 	bl	800c856 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800def0:	4b23      	ldr	r3, [pc, #140]	; (800df80 <xTaskResumeAll+0x12c>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def6:	429a      	cmp	r2, r3
 800def8:	d302      	bcc.n	800df00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800defa:	4b22      	ldr	r3, [pc, #136]	; (800df84 <xTaskResumeAll+0x130>)
 800defc:	2201      	movs	r2, #1
 800defe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df00:	4b1c      	ldr	r3, [pc, #112]	; (800df74 <xTaskResumeAll+0x120>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d1cb      	bne.n	800dea0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d001      	beq.n	800df12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800df0e:	f000 fb71 	bl	800e5f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800df12:	4b1d      	ldr	r3, [pc, #116]	; (800df88 <xTaskResumeAll+0x134>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d010      	beq.n	800df40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800df1e:	f000 f859 	bl	800dfd4 <xTaskIncrementTick>
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d002      	beq.n	800df2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800df28:	4b16      	ldr	r3, [pc, #88]	; (800df84 <xTaskResumeAll+0x130>)
 800df2a:	2201      	movs	r2, #1
 800df2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	3b01      	subs	r3, #1
 800df32:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d1f1      	bne.n	800df1e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800df3a:	4b13      	ldr	r3, [pc, #76]	; (800df88 <xTaskResumeAll+0x134>)
 800df3c:	2200      	movs	r2, #0
 800df3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df40:	4b10      	ldr	r3, [pc, #64]	; (800df84 <xTaskResumeAll+0x130>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d009      	beq.n	800df5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df48:	2301      	movs	r3, #1
 800df4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800df4c:	4b0f      	ldr	r3, [pc, #60]	; (800df8c <xTaskResumeAll+0x138>)
 800df4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df52:	601a      	str	r2, [r3, #0]
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df5c:	f001 f9f2 	bl	800f344 <vPortExitCritical>

	return xAlreadyYielded;
 800df60:	68bb      	ldr	r3, [r7, #8]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	20000ab0 	.word	0x20000ab0
 800df70:	20000a88 	.word	0x20000a88
 800df74:	20000a48 	.word	0x20000a48
 800df78:	20000a90 	.word	0x20000a90
 800df7c:	200005b8 	.word	0x200005b8
 800df80:	200005b4 	.word	0x200005b4
 800df84:	20000a9c 	.word	0x20000a9c
 800df88:	20000a98 	.word	0x20000a98
 800df8c:	e000ed04 	.word	0xe000ed04

0800df90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800df90:	b480      	push	{r7}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800df96:	4b05      	ldr	r3, [pc, #20]	; (800dfac <xTaskGetTickCount+0x1c>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800df9c:	687b      	ldr	r3, [r7, #4]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	370c      	adds	r7, #12
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	20000a8c 	.word	0x20000a8c

0800dfb0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dfb6:	f001 fa77 	bl	800f4a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800dfba:	2300      	movs	r3, #0
 800dfbc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800dfbe:	4b04      	ldr	r3, [pc, #16]	; (800dfd0 <xTaskGetTickCountFromISR+0x20>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dfc4:	683b      	ldr	r3, [r7, #0]
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3708      	adds	r7, #8
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	20000a8c 	.word	0x20000a8c

0800dfd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b086      	sub	sp, #24
 800dfd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfde:	4b4f      	ldr	r3, [pc, #316]	; (800e11c <xTaskIncrementTick+0x148>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	f040 808f 	bne.w	800e106 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dfe8:	4b4d      	ldr	r3, [pc, #308]	; (800e120 <xTaskIncrementTick+0x14c>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	3301      	adds	r3, #1
 800dfee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dff0:	4a4b      	ldr	r2, [pc, #300]	; (800e120 <xTaskIncrementTick+0x14c>)
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d120      	bne.n	800e03e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dffc:	4b49      	ldr	r3, [pc, #292]	; (800e124 <xTaskIncrementTick+0x150>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d00a      	beq.n	800e01c <xTaskIncrementTick+0x48>
	__asm volatile
 800e006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00a:	f383 8811 	msr	BASEPRI, r3
 800e00e:	f3bf 8f6f 	isb	sy
 800e012:	f3bf 8f4f 	dsb	sy
 800e016:	603b      	str	r3, [r7, #0]
}
 800e018:	bf00      	nop
 800e01a:	e7fe      	b.n	800e01a <xTaskIncrementTick+0x46>
 800e01c:	4b41      	ldr	r3, [pc, #260]	; (800e124 <xTaskIncrementTick+0x150>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	60fb      	str	r3, [r7, #12]
 800e022:	4b41      	ldr	r3, [pc, #260]	; (800e128 <xTaskIncrementTick+0x154>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4a3f      	ldr	r2, [pc, #252]	; (800e124 <xTaskIncrementTick+0x150>)
 800e028:	6013      	str	r3, [r2, #0]
 800e02a:	4a3f      	ldr	r2, [pc, #252]	; (800e128 <xTaskIncrementTick+0x154>)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	6013      	str	r3, [r2, #0]
 800e030:	4b3e      	ldr	r3, [pc, #248]	; (800e12c <xTaskIncrementTick+0x158>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	3301      	adds	r3, #1
 800e036:	4a3d      	ldr	r2, [pc, #244]	; (800e12c <xTaskIncrementTick+0x158>)
 800e038:	6013      	str	r3, [r2, #0]
 800e03a:	f000 fadb 	bl	800e5f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e03e:	4b3c      	ldr	r3, [pc, #240]	; (800e130 <xTaskIncrementTick+0x15c>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	693a      	ldr	r2, [r7, #16]
 800e044:	429a      	cmp	r2, r3
 800e046:	d349      	bcc.n	800e0dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e048:	4b36      	ldr	r3, [pc, #216]	; (800e124 <xTaskIncrementTick+0x150>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d104      	bne.n	800e05c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e052:	4b37      	ldr	r3, [pc, #220]	; (800e130 <xTaskIncrementTick+0x15c>)
 800e054:	f04f 32ff 	mov.w	r2, #4294967295
 800e058:	601a      	str	r2, [r3, #0]
					break;
 800e05a:	e03f      	b.n	800e0dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e05c:	4b31      	ldr	r3, [pc, #196]	; (800e124 <xTaskIncrementTick+0x150>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	68db      	ldr	r3, [r3, #12]
 800e062:	68db      	ldr	r3, [r3, #12]
 800e064:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e06c:	693a      	ldr	r2, [r7, #16]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	429a      	cmp	r2, r3
 800e072:	d203      	bcs.n	800e07c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e074:	4a2e      	ldr	r2, [pc, #184]	; (800e130 <xTaskIncrementTick+0x15c>)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e07a:	e02f      	b.n	800e0dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	3304      	adds	r3, #4
 800e080:	4618      	mov	r0, r3
 800e082:	f7fe fc45 	bl	800c910 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d004      	beq.n	800e098 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	3318      	adds	r3, #24
 800e092:	4618      	mov	r0, r3
 800e094:	f7fe fc3c 	bl	800c910 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e09c:	4b25      	ldr	r3, [pc, #148]	; (800e134 <xTaskIncrementTick+0x160>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d903      	bls.n	800e0ac <xTaskIncrementTick+0xd8>
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a8:	4a22      	ldr	r2, [pc, #136]	; (800e134 <xTaskIncrementTick+0x160>)
 800e0aa:	6013      	str	r3, [r2, #0]
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b0:	4613      	mov	r3, r2
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	4413      	add	r3, r2
 800e0b6:	009b      	lsls	r3, r3, #2
 800e0b8:	4a1f      	ldr	r2, [pc, #124]	; (800e138 <xTaskIncrementTick+0x164>)
 800e0ba:	441a      	add	r2, r3
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	3304      	adds	r3, #4
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	4610      	mov	r0, r2
 800e0c4:	f7fe fbc7 	bl	800c856 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0cc:	4b1b      	ldr	r3, [pc, #108]	; (800e13c <xTaskIncrementTick+0x168>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d3b8      	bcc.n	800e048 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0da:	e7b5      	b.n	800e048 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e0dc:	4b17      	ldr	r3, [pc, #92]	; (800e13c <xTaskIncrementTick+0x168>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0e2:	4915      	ldr	r1, [pc, #84]	; (800e138 <xTaskIncrementTick+0x164>)
 800e0e4:	4613      	mov	r3, r2
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	4413      	add	r3, r2
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	440b      	add	r3, r1
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d901      	bls.n	800e0f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e0f8:	4b11      	ldr	r3, [pc, #68]	; (800e140 <xTaskIncrementTick+0x16c>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d007      	beq.n	800e110 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e100:	2301      	movs	r3, #1
 800e102:	617b      	str	r3, [r7, #20]
 800e104:	e004      	b.n	800e110 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e106:	4b0f      	ldr	r3, [pc, #60]	; (800e144 <xTaskIncrementTick+0x170>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	3301      	adds	r3, #1
 800e10c:	4a0d      	ldr	r2, [pc, #52]	; (800e144 <xTaskIncrementTick+0x170>)
 800e10e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e110:	697b      	ldr	r3, [r7, #20]
}
 800e112:	4618      	mov	r0, r3
 800e114:	3718      	adds	r7, #24
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	20000ab0 	.word	0x20000ab0
 800e120:	20000a8c 	.word	0x20000a8c
 800e124:	20000a40 	.word	0x20000a40
 800e128:	20000a44 	.word	0x20000a44
 800e12c:	20000aa0 	.word	0x20000aa0
 800e130:	20000aa8 	.word	0x20000aa8
 800e134:	20000a90 	.word	0x20000a90
 800e138:	200005b8 	.word	0x200005b8
 800e13c:	200005b4 	.word	0x200005b4
 800e140:	20000a9c 	.word	0x20000a9c
 800e144:	20000a98 	.word	0x20000a98

0800e148 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e148:	b480      	push	{r7}
 800e14a:	b085      	sub	sp, #20
 800e14c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e14e:	4b2a      	ldr	r3, [pc, #168]	; (800e1f8 <vTaskSwitchContext+0xb0>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d003      	beq.n	800e15e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e156:	4b29      	ldr	r3, [pc, #164]	; (800e1fc <vTaskSwitchContext+0xb4>)
 800e158:	2201      	movs	r2, #1
 800e15a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e15c:	e046      	b.n	800e1ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e15e:	4b27      	ldr	r3, [pc, #156]	; (800e1fc <vTaskSwitchContext+0xb4>)
 800e160:	2200      	movs	r2, #0
 800e162:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e164:	4b26      	ldr	r3, [pc, #152]	; (800e200 <vTaskSwitchContext+0xb8>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	60fb      	str	r3, [r7, #12]
 800e16a:	e010      	b.n	800e18e <vTaskSwitchContext+0x46>
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d10a      	bne.n	800e188 <vTaskSwitchContext+0x40>
	__asm volatile
 800e172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e176:	f383 8811 	msr	BASEPRI, r3
 800e17a:	f3bf 8f6f 	isb	sy
 800e17e:	f3bf 8f4f 	dsb	sy
 800e182:	607b      	str	r3, [r7, #4]
}
 800e184:	bf00      	nop
 800e186:	e7fe      	b.n	800e186 <vTaskSwitchContext+0x3e>
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	3b01      	subs	r3, #1
 800e18c:	60fb      	str	r3, [r7, #12]
 800e18e:	491d      	ldr	r1, [pc, #116]	; (800e204 <vTaskSwitchContext+0xbc>)
 800e190:	68fa      	ldr	r2, [r7, #12]
 800e192:	4613      	mov	r3, r2
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4413      	add	r3, r2
 800e198:	009b      	lsls	r3, r3, #2
 800e19a:	440b      	add	r3, r1
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d0e4      	beq.n	800e16c <vTaskSwitchContext+0x24>
 800e1a2:	68fa      	ldr	r2, [r7, #12]
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	4413      	add	r3, r2
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	4a15      	ldr	r2, [pc, #84]	; (800e204 <vTaskSwitchContext+0xbc>)
 800e1ae:	4413      	add	r3, r2
 800e1b0:	60bb      	str	r3, [r7, #8]
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	685a      	ldr	r2, [r3, #4]
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	605a      	str	r2, [r3, #4]
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	685a      	ldr	r2, [r3, #4]
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	3308      	adds	r3, #8
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d104      	bne.n	800e1d2 <vTaskSwitchContext+0x8a>
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	685a      	ldr	r2, [r3, #4]
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	605a      	str	r2, [r3, #4]
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	68db      	ldr	r3, [r3, #12]
 800e1d8:	4a0b      	ldr	r2, [pc, #44]	; (800e208 <vTaskSwitchContext+0xc0>)
 800e1da:	6013      	str	r3, [r2, #0]
 800e1dc:	4a08      	ldr	r2, [pc, #32]	; (800e200 <vTaskSwitchContext+0xb8>)
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e1e2:	4b09      	ldr	r3, [pc, #36]	; (800e208 <vTaskSwitchContext+0xc0>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	3354      	adds	r3, #84	; 0x54
 800e1e8:	4a08      	ldr	r2, [pc, #32]	; (800e20c <vTaskSwitchContext+0xc4>)
 800e1ea:	6013      	str	r3, [r2, #0]
}
 800e1ec:	bf00      	nop
 800e1ee:	3714      	adds	r7, #20
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr
 800e1f8:	20000ab0 	.word	0x20000ab0
 800e1fc:	20000a9c 	.word	0x20000a9c
 800e200:	20000a90 	.word	0x20000a90
 800e204:	200005b8 	.word	0x200005b8
 800e208:	200005b4 	.word	0x200005b4
 800e20c:	20000098 	.word	0x20000098

0800e210 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d10a      	bne.n	800e236 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e224:	f383 8811 	msr	BASEPRI, r3
 800e228:	f3bf 8f6f 	isb	sy
 800e22c:	f3bf 8f4f 	dsb	sy
 800e230:	60fb      	str	r3, [r7, #12]
}
 800e232:	bf00      	nop
 800e234:	e7fe      	b.n	800e234 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e236:	4b07      	ldr	r3, [pc, #28]	; (800e254 <vTaskPlaceOnEventList+0x44>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	3318      	adds	r3, #24
 800e23c:	4619      	mov	r1, r3
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f7fe fb2d 	bl	800c89e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e244:	2101      	movs	r1, #1
 800e246:	6838      	ldr	r0, [r7, #0]
 800e248:	f000 fb7e 	bl	800e948 <prvAddCurrentTaskToDelayedList>
}
 800e24c:	bf00      	nop
 800e24e:	3710      	adds	r7, #16
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	200005b4 	.word	0x200005b4

0800e258 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b086      	sub	sp, #24
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d10a      	bne.n	800e280 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26e:	f383 8811 	msr	BASEPRI, r3
 800e272:	f3bf 8f6f 	isb	sy
 800e276:	f3bf 8f4f 	dsb	sy
 800e27a:	617b      	str	r3, [r7, #20]
}
 800e27c:	bf00      	nop
 800e27e:	e7fe      	b.n	800e27e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e280:	4b0a      	ldr	r3, [pc, #40]	; (800e2ac <vTaskPlaceOnEventListRestricted+0x54>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	3318      	adds	r3, #24
 800e286:	4619      	mov	r1, r3
 800e288:	68f8      	ldr	r0, [r7, #12]
 800e28a:	f7fe fae4 	bl	800c856 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d002      	beq.n	800e29a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e294:	f04f 33ff 	mov.w	r3, #4294967295
 800e298:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e29a:	6879      	ldr	r1, [r7, #4]
 800e29c:	68b8      	ldr	r0, [r7, #8]
 800e29e:	f000 fb53 	bl	800e948 <prvAddCurrentTaskToDelayedList>
	}
 800e2a2:	bf00      	nop
 800e2a4:	3718      	adds	r7, #24
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	200005b4 	.word	0x200005b4

0800e2b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b086      	sub	sp, #24
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	68db      	ldr	r3, [r3, #12]
 800e2be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d10a      	bne.n	800e2dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ca:	f383 8811 	msr	BASEPRI, r3
 800e2ce:	f3bf 8f6f 	isb	sy
 800e2d2:	f3bf 8f4f 	dsb	sy
 800e2d6:	60fb      	str	r3, [r7, #12]
}
 800e2d8:	bf00      	nop
 800e2da:	e7fe      	b.n	800e2da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	3318      	adds	r3, #24
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7fe fb15 	bl	800c910 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2e6:	4b1e      	ldr	r3, [pc, #120]	; (800e360 <xTaskRemoveFromEventList+0xb0>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d11d      	bne.n	800e32a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	3304      	adds	r3, #4
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7fe fb0c 	bl	800c910 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2fc:	4b19      	ldr	r3, [pc, #100]	; (800e364 <xTaskRemoveFromEventList+0xb4>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	429a      	cmp	r2, r3
 800e302:	d903      	bls.n	800e30c <xTaskRemoveFromEventList+0x5c>
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e308:	4a16      	ldr	r2, [pc, #88]	; (800e364 <xTaskRemoveFromEventList+0xb4>)
 800e30a:	6013      	str	r3, [r2, #0]
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e310:	4613      	mov	r3, r2
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	4413      	add	r3, r2
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	4a13      	ldr	r2, [pc, #76]	; (800e368 <xTaskRemoveFromEventList+0xb8>)
 800e31a:	441a      	add	r2, r3
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	3304      	adds	r3, #4
 800e320:	4619      	mov	r1, r3
 800e322:	4610      	mov	r0, r2
 800e324:	f7fe fa97 	bl	800c856 <vListInsertEnd>
 800e328:	e005      	b.n	800e336 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	3318      	adds	r3, #24
 800e32e:	4619      	mov	r1, r3
 800e330:	480e      	ldr	r0, [pc, #56]	; (800e36c <xTaskRemoveFromEventList+0xbc>)
 800e332:	f7fe fa90 	bl	800c856 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e33a:	4b0d      	ldr	r3, [pc, #52]	; (800e370 <xTaskRemoveFromEventList+0xc0>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e340:	429a      	cmp	r2, r3
 800e342:	d905      	bls.n	800e350 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e344:	2301      	movs	r3, #1
 800e346:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e348:	4b0a      	ldr	r3, [pc, #40]	; (800e374 <xTaskRemoveFromEventList+0xc4>)
 800e34a:	2201      	movs	r2, #1
 800e34c:	601a      	str	r2, [r3, #0]
 800e34e:	e001      	b.n	800e354 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e350:	2300      	movs	r3, #0
 800e352:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e354:	697b      	ldr	r3, [r7, #20]
}
 800e356:	4618      	mov	r0, r3
 800e358:	3718      	adds	r7, #24
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop
 800e360:	20000ab0 	.word	0x20000ab0
 800e364:	20000a90 	.word	0x20000a90
 800e368:	200005b8 	.word	0x200005b8
 800e36c:	20000a48 	.word	0x20000a48
 800e370:	200005b4 	.word	0x200005b4
 800e374:	20000a9c 	.word	0x20000a9c

0800e378 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e378:	b480      	push	{r7}
 800e37a:	b083      	sub	sp, #12
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e380:	4b06      	ldr	r3, [pc, #24]	; (800e39c <vTaskInternalSetTimeOutState+0x24>)
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e388:	4b05      	ldr	r3, [pc, #20]	; (800e3a0 <vTaskInternalSetTimeOutState+0x28>)
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	605a      	str	r2, [r3, #4]
}
 800e390:	bf00      	nop
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr
 800e39c:	20000aa0 	.word	0x20000aa0
 800e3a0:	20000a8c 	.word	0x20000a8c

0800e3a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b088      	sub	sp, #32
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d10a      	bne.n	800e3ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b8:	f383 8811 	msr	BASEPRI, r3
 800e3bc:	f3bf 8f6f 	isb	sy
 800e3c0:	f3bf 8f4f 	dsb	sy
 800e3c4:	613b      	str	r3, [r7, #16]
}
 800e3c6:	bf00      	nop
 800e3c8:	e7fe      	b.n	800e3c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d10a      	bne.n	800e3e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d4:	f383 8811 	msr	BASEPRI, r3
 800e3d8:	f3bf 8f6f 	isb	sy
 800e3dc:	f3bf 8f4f 	dsb	sy
 800e3e0:	60fb      	str	r3, [r7, #12]
}
 800e3e2:	bf00      	nop
 800e3e4:	e7fe      	b.n	800e3e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e3e6:	f000 ff7d 	bl	800f2e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e3ea:	4b1d      	ldr	r3, [pc, #116]	; (800e460 <xTaskCheckForTimeOut+0xbc>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	69ba      	ldr	r2, [r7, #24]
 800e3f6:	1ad3      	subs	r3, r2, r3
 800e3f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e402:	d102      	bne.n	800e40a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e404:	2300      	movs	r3, #0
 800e406:	61fb      	str	r3, [r7, #28]
 800e408:	e023      	b.n	800e452 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	4b15      	ldr	r3, [pc, #84]	; (800e464 <xTaskCheckForTimeOut+0xc0>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	429a      	cmp	r2, r3
 800e414:	d007      	beq.n	800e426 <xTaskCheckForTimeOut+0x82>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	69ba      	ldr	r2, [r7, #24]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d302      	bcc.n	800e426 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e420:	2301      	movs	r3, #1
 800e422:	61fb      	str	r3, [r7, #28]
 800e424:	e015      	b.n	800e452 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	697a      	ldr	r2, [r7, #20]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d20b      	bcs.n	800e448 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	681a      	ldr	r2, [r3, #0]
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	1ad2      	subs	r2, r2, r3
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f7ff ff9b 	bl	800e378 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e442:	2300      	movs	r3, #0
 800e444:	61fb      	str	r3, [r7, #28]
 800e446:	e004      	b.n	800e452 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	2200      	movs	r2, #0
 800e44c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e44e:	2301      	movs	r3, #1
 800e450:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e452:	f000 ff77 	bl	800f344 <vPortExitCritical>

	return xReturn;
 800e456:	69fb      	ldr	r3, [r7, #28]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3720      	adds	r7, #32
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	20000a8c 	.word	0x20000a8c
 800e464:	20000aa0 	.word	0x20000aa0

0800e468 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e468:	b480      	push	{r7}
 800e46a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e46c:	4b03      	ldr	r3, [pc, #12]	; (800e47c <vTaskMissedYield+0x14>)
 800e46e:	2201      	movs	r2, #1
 800e470:	601a      	str	r2, [r3, #0]
}
 800e472:	bf00      	nop
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr
 800e47c:	20000a9c 	.word	0x20000a9c

0800e480 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e488:	f000 f852 	bl	800e530 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e48c:	4b06      	ldr	r3, [pc, #24]	; (800e4a8 <prvIdleTask+0x28>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	2b01      	cmp	r3, #1
 800e492:	d9f9      	bls.n	800e488 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e494:	4b05      	ldr	r3, [pc, #20]	; (800e4ac <prvIdleTask+0x2c>)
 800e496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e49a:	601a      	str	r2, [r3, #0]
 800e49c:	f3bf 8f4f 	dsb	sy
 800e4a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e4a4:	e7f0      	b.n	800e488 <prvIdleTask+0x8>
 800e4a6:	bf00      	nop
 800e4a8:	200005b8 	.word	0x200005b8
 800e4ac:	e000ed04 	.word	0xe000ed04

0800e4b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	607b      	str	r3, [r7, #4]
 800e4ba:	e00c      	b.n	800e4d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	4613      	mov	r3, r2
 800e4c0:	009b      	lsls	r3, r3, #2
 800e4c2:	4413      	add	r3, r2
 800e4c4:	009b      	lsls	r3, r3, #2
 800e4c6:	4a12      	ldr	r2, [pc, #72]	; (800e510 <prvInitialiseTaskLists+0x60>)
 800e4c8:	4413      	add	r3, r2
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fe f996 	bl	800c7fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	607b      	str	r3, [r7, #4]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2b37      	cmp	r3, #55	; 0x37
 800e4da:	d9ef      	bls.n	800e4bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e4dc:	480d      	ldr	r0, [pc, #52]	; (800e514 <prvInitialiseTaskLists+0x64>)
 800e4de:	f7fe f98d 	bl	800c7fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e4e2:	480d      	ldr	r0, [pc, #52]	; (800e518 <prvInitialiseTaskLists+0x68>)
 800e4e4:	f7fe f98a 	bl	800c7fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e4e8:	480c      	ldr	r0, [pc, #48]	; (800e51c <prvInitialiseTaskLists+0x6c>)
 800e4ea:	f7fe f987 	bl	800c7fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e4ee:	480c      	ldr	r0, [pc, #48]	; (800e520 <prvInitialiseTaskLists+0x70>)
 800e4f0:	f7fe f984 	bl	800c7fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e4f4:	480b      	ldr	r0, [pc, #44]	; (800e524 <prvInitialiseTaskLists+0x74>)
 800e4f6:	f7fe f981 	bl	800c7fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e4fa:	4b0b      	ldr	r3, [pc, #44]	; (800e528 <prvInitialiseTaskLists+0x78>)
 800e4fc:	4a05      	ldr	r2, [pc, #20]	; (800e514 <prvInitialiseTaskLists+0x64>)
 800e4fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e500:	4b0a      	ldr	r3, [pc, #40]	; (800e52c <prvInitialiseTaskLists+0x7c>)
 800e502:	4a05      	ldr	r2, [pc, #20]	; (800e518 <prvInitialiseTaskLists+0x68>)
 800e504:	601a      	str	r2, [r3, #0]
}
 800e506:	bf00      	nop
 800e508:	3708      	adds	r7, #8
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	bf00      	nop
 800e510:	200005b8 	.word	0x200005b8
 800e514:	20000a18 	.word	0x20000a18
 800e518:	20000a2c 	.word	0x20000a2c
 800e51c:	20000a48 	.word	0x20000a48
 800e520:	20000a5c 	.word	0x20000a5c
 800e524:	20000a74 	.word	0x20000a74
 800e528:	20000a40 	.word	0x20000a40
 800e52c:	20000a44 	.word	0x20000a44

0800e530 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e536:	e019      	b.n	800e56c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e538:	f000 fed4 	bl	800f2e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e53c:	4b10      	ldr	r3, [pc, #64]	; (800e580 <prvCheckTasksWaitingTermination+0x50>)
 800e53e:	68db      	ldr	r3, [r3, #12]
 800e540:	68db      	ldr	r3, [r3, #12]
 800e542:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	3304      	adds	r3, #4
 800e548:	4618      	mov	r0, r3
 800e54a:	f7fe f9e1 	bl	800c910 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e54e:	4b0d      	ldr	r3, [pc, #52]	; (800e584 <prvCheckTasksWaitingTermination+0x54>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3b01      	subs	r3, #1
 800e554:	4a0b      	ldr	r2, [pc, #44]	; (800e584 <prvCheckTasksWaitingTermination+0x54>)
 800e556:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e558:	4b0b      	ldr	r3, [pc, #44]	; (800e588 <prvCheckTasksWaitingTermination+0x58>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	3b01      	subs	r3, #1
 800e55e:	4a0a      	ldr	r2, [pc, #40]	; (800e588 <prvCheckTasksWaitingTermination+0x58>)
 800e560:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e562:	f000 feef 	bl	800f344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f000 f810 	bl	800e58c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e56c:	4b06      	ldr	r3, [pc, #24]	; (800e588 <prvCheckTasksWaitingTermination+0x58>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d1e1      	bne.n	800e538 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e574:	bf00      	nop
 800e576:	bf00      	nop
 800e578:	3708      	adds	r7, #8
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	20000a5c 	.word	0x20000a5c
 800e584:	20000a88 	.word	0x20000a88
 800e588:	20000a70 	.word	0x20000a70

0800e58c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	3354      	adds	r3, #84	; 0x54
 800e598:	4618      	mov	r0, r3
 800e59a:	f020 f9dd 	bl	802e958 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d108      	bne.n	800e5ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f001 f887 	bl	800f6c0 <vPortFree>
				vPortFree( pxTCB );
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f001 f884 	bl	800f6c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e5b8:	e018      	b.n	800e5ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d103      	bne.n	800e5cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f001 f87b 	bl	800f6c0 <vPortFree>
	}
 800e5ca:	e00f      	b.n	800e5ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e5d2:	2b02      	cmp	r3, #2
 800e5d4:	d00a      	beq.n	800e5ec <prvDeleteTCB+0x60>
	__asm volatile
 800e5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5da:	f383 8811 	msr	BASEPRI, r3
 800e5de:	f3bf 8f6f 	isb	sy
 800e5e2:	f3bf 8f4f 	dsb	sy
 800e5e6:	60fb      	str	r3, [r7, #12]
}
 800e5e8:	bf00      	nop
 800e5ea:	e7fe      	b.n	800e5ea <prvDeleteTCB+0x5e>
	}
 800e5ec:	bf00      	nop
 800e5ee:	3710      	adds	r7, #16
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5fa:	4b0c      	ldr	r3, [pc, #48]	; (800e62c <prvResetNextTaskUnblockTime+0x38>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d104      	bne.n	800e60e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e604:	4b0a      	ldr	r3, [pc, #40]	; (800e630 <prvResetNextTaskUnblockTime+0x3c>)
 800e606:	f04f 32ff 	mov.w	r2, #4294967295
 800e60a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e60c:	e008      	b.n	800e620 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e60e:	4b07      	ldr	r3, [pc, #28]	; (800e62c <prvResetNextTaskUnblockTime+0x38>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	68db      	ldr	r3, [r3, #12]
 800e614:	68db      	ldr	r3, [r3, #12]
 800e616:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	685b      	ldr	r3, [r3, #4]
 800e61c:	4a04      	ldr	r2, [pc, #16]	; (800e630 <prvResetNextTaskUnblockTime+0x3c>)
 800e61e:	6013      	str	r3, [r2, #0]
}
 800e620:	bf00      	nop
 800e622:	370c      	adds	r7, #12
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr
 800e62c:	20000a40 	.word	0x20000a40
 800e630:	20000aa8 	.word	0x20000aa8

0800e634 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e634:	b480      	push	{r7}
 800e636:	b083      	sub	sp, #12
 800e638:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e63a:	4b0b      	ldr	r3, [pc, #44]	; (800e668 <xTaskGetSchedulerState+0x34>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d102      	bne.n	800e648 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e642:	2301      	movs	r3, #1
 800e644:	607b      	str	r3, [r7, #4]
 800e646:	e008      	b.n	800e65a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e648:	4b08      	ldr	r3, [pc, #32]	; (800e66c <xTaskGetSchedulerState+0x38>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d102      	bne.n	800e656 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e650:	2302      	movs	r3, #2
 800e652:	607b      	str	r3, [r7, #4]
 800e654:	e001      	b.n	800e65a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e656:	2300      	movs	r3, #0
 800e658:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e65a:	687b      	ldr	r3, [r7, #4]
	}
 800e65c:	4618      	mov	r0, r3
 800e65e:	370c      	adds	r7, #12
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr
 800e668:	20000a94 	.word	0x20000a94
 800e66c:	20000ab0 	.word	0x20000ab0

0800e670 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e670:	b580      	push	{r7, lr}
 800e672:	b084      	sub	sp, #16
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e67c:	2300      	movs	r3, #0
 800e67e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d051      	beq.n	800e72a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e68a:	4b2a      	ldr	r3, [pc, #168]	; (800e734 <xTaskPriorityInherit+0xc4>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e690:	429a      	cmp	r2, r3
 800e692:	d241      	bcs.n	800e718 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	699b      	ldr	r3, [r3, #24]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	db06      	blt.n	800e6aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e69c:	4b25      	ldr	r3, [pc, #148]	; (800e734 <xTaskPriorityInherit+0xc4>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	6959      	ldr	r1, [r3, #20]
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6b2:	4613      	mov	r3, r2
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	4413      	add	r3, r2
 800e6b8:	009b      	lsls	r3, r3, #2
 800e6ba:	4a1f      	ldr	r2, [pc, #124]	; (800e738 <xTaskPriorityInherit+0xc8>)
 800e6bc:	4413      	add	r3, r2
 800e6be:	4299      	cmp	r1, r3
 800e6c0:	d122      	bne.n	800e708 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	3304      	adds	r3, #4
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7fe f922 	bl	800c910 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e6cc:	4b19      	ldr	r3, [pc, #100]	; (800e734 <xTaskPriorityInherit+0xc4>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6da:	4b18      	ldr	r3, [pc, #96]	; (800e73c <xTaskPriorityInherit+0xcc>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d903      	bls.n	800e6ea <xTaskPriorityInherit+0x7a>
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6e6:	4a15      	ldr	r2, [pc, #84]	; (800e73c <xTaskPriorityInherit+0xcc>)
 800e6e8:	6013      	str	r3, [r2, #0]
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ee:	4613      	mov	r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	4413      	add	r3, r2
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	4a10      	ldr	r2, [pc, #64]	; (800e738 <xTaskPriorityInherit+0xc8>)
 800e6f8:	441a      	add	r2, r3
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	3304      	adds	r3, #4
 800e6fe:	4619      	mov	r1, r3
 800e700:	4610      	mov	r0, r2
 800e702:	f7fe f8a8 	bl	800c856 <vListInsertEnd>
 800e706:	e004      	b.n	800e712 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e708:	4b0a      	ldr	r3, [pc, #40]	; (800e734 <xTaskPriorityInherit+0xc4>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e712:	2301      	movs	r3, #1
 800e714:	60fb      	str	r3, [r7, #12]
 800e716:	e008      	b.n	800e72a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e71c:	4b05      	ldr	r3, [pc, #20]	; (800e734 <xTaskPriorityInherit+0xc4>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e722:	429a      	cmp	r2, r3
 800e724:	d201      	bcs.n	800e72a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e726:	2301      	movs	r3, #1
 800e728:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e72a:	68fb      	ldr	r3, [r7, #12]
	}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3710      	adds	r7, #16
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	200005b4 	.word	0x200005b4
 800e738:	200005b8 	.word	0x200005b8
 800e73c:	20000a90 	.word	0x20000a90

0800e740 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e740:	b580      	push	{r7, lr}
 800e742:	b086      	sub	sp, #24
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e74c:	2300      	movs	r3, #0
 800e74e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d056      	beq.n	800e804 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e756:	4b2e      	ldr	r3, [pc, #184]	; (800e810 <xTaskPriorityDisinherit+0xd0>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	693a      	ldr	r2, [r7, #16]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d00a      	beq.n	800e776 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e764:	f383 8811 	msr	BASEPRI, r3
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	60fb      	str	r3, [r7, #12]
}
 800e772:	bf00      	nop
 800e774:	e7fe      	b.n	800e774 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d10a      	bne.n	800e794 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	60bb      	str	r3, [r7, #8]
}
 800e790:	bf00      	nop
 800e792:	e7fe      	b.n	800e792 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e798:	1e5a      	subs	r2, r3, #1
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d02c      	beq.n	800e804 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d128      	bne.n	800e804 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	3304      	adds	r3, #4
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7fe f8aa 	bl	800c910 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7d4:	4b0f      	ldr	r3, [pc, #60]	; (800e814 <xTaskPriorityDisinherit+0xd4>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d903      	bls.n	800e7e4 <xTaskPriorityDisinherit+0xa4>
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e0:	4a0c      	ldr	r2, [pc, #48]	; (800e814 <xTaskPriorityDisinherit+0xd4>)
 800e7e2:	6013      	str	r3, [r2, #0]
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7e8:	4613      	mov	r3, r2
 800e7ea:	009b      	lsls	r3, r3, #2
 800e7ec:	4413      	add	r3, r2
 800e7ee:	009b      	lsls	r3, r3, #2
 800e7f0:	4a09      	ldr	r2, [pc, #36]	; (800e818 <xTaskPriorityDisinherit+0xd8>)
 800e7f2:	441a      	add	r2, r3
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	3304      	adds	r3, #4
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	4610      	mov	r0, r2
 800e7fc:	f7fe f82b 	bl	800c856 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e800:	2301      	movs	r3, #1
 800e802:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e804:	697b      	ldr	r3, [r7, #20]
	}
 800e806:	4618      	mov	r0, r3
 800e808:	3718      	adds	r7, #24
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
 800e80e:	bf00      	nop
 800e810:	200005b4 	.word	0x200005b4
 800e814:	20000a90 	.word	0x20000a90
 800e818:	200005b8 	.word	0x200005b8

0800e81c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b088      	sub	sp, #32
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e82a:	2301      	movs	r3, #1
 800e82c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d06a      	beq.n	800e90a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d10a      	bne.n	800e852 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e840:	f383 8811 	msr	BASEPRI, r3
 800e844:	f3bf 8f6f 	isb	sy
 800e848:	f3bf 8f4f 	dsb	sy
 800e84c:	60fb      	str	r3, [r7, #12]
}
 800e84e:	bf00      	nop
 800e850:	e7fe      	b.n	800e850 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e852:	69bb      	ldr	r3, [r7, #24]
 800e854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e856:	683a      	ldr	r2, [r7, #0]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d902      	bls.n	800e862 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	61fb      	str	r3, [r7, #28]
 800e860:	e002      	b.n	800e868 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e866:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e868:	69bb      	ldr	r3, [r7, #24]
 800e86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e86c:	69fa      	ldr	r2, [r7, #28]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d04b      	beq.n	800e90a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e872:	69bb      	ldr	r3, [r7, #24]
 800e874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e876:	697a      	ldr	r2, [r7, #20]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d146      	bne.n	800e90a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e87c:	4b25      	ldr	r3, [pc, #148]	; (800e914 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	69ba      	ldr	r2, [r7, #24]
 800e882:	429a      	cmp	r2, r3
 800e884:	d10a      	bne.n	800e89c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88a:	f383 8811 	msr	BASEPRI, r3
 800e88e:	f3bf 8f6f 	isb	sy
 800e892:	f3bf 8f4f 	dsb	sy
 800e896:	60bb      	str	r3, [r7, #8]
}
 800e898:	bf00      	nop
 800e89a:	e7fe      	b.n	800e89a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e8a2:	69bb      	ldr	r3, [r7, #24]
 800e8a4:	69fa      	ldr	r2, [r7, #28]
 800e8a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e8a8:	69bb      	ldr	r3, [r7, #24]
 800e8aa:	699b      	ldr	r3, [r3, #24]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	db04      	blt.n	800e8ba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8b0:	69fb      	ldr	r3, [r7, #28]
 800e8b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e8b6:	69bb      	ldr	r3, [r7, #24]
 800e8b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e8ba:	69bb      	ldr	r3, [r7, #24]
 800e8bc:	6959      	ldr	r1, [r3, #20]
 800e8be:	693a      	ldr	r2, [r7, #16]
 800e8c0:	4613      	mov	r3, r2
 800e8c2:	009b      	lsls	r3, r3, #2
 800e8c4:	4413      	add	r3, r2
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	4a13      	ldr	r2, [pc, #76]	; (800e918 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e8ca:	4413      	add	r3, r2
 800e8cc:	4299      	cmp	r1, r3
 800e8ce:	d11c      	bne.n	800e90a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8d0:	69bb      	ldr	r3, [r7, #24]
 800e8d2:	3304      	adds	r3, #4
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7fe f81b 	bl	800c910 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8de:	4b0f      	ldr	r3, [pc, #60]	; (800e91c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d903      	bls.n	800e8ee <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e8e6:	69bb      	ldr	r3, [r7, #24]
 800e8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ea:	4a0c      	ldr	r2, [pc, #48]	; (800e91c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e8ec:	6013      	str	r3, [r2, #0]
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8f2:	4613      	mov	r3, r2
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	4413      	add	r3, r2
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	4a07      	ldr	r2, [pc, #28]	; (800e918 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e8fc:	441a      	add	r2, r3
 800e8fe:	69bb      	ldr	r3, [r7, #24]
 800e900:	3304      	adds	r3, #4
 800e902:	4619      	mov	r1, r3
 800e904:	4610      	mov	r0, r2
 800e906:	f7fd ffa6 	bl	800c856 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e90a:	bf00      	nop
 800e90c:	3720      	adds	r7, #32
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	200005b4 	.word	0x200005b4
 800e918:	200005b8 	.word	0x200005b8
 800e91c:	20000a90 	.word	0x20000a90

0800e920 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e920:	b480      	push	{r7}
 800e922:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e924:	4b07      	ldr	r3, [pc, #28]	; (800e944 <pvTaskIncrementMutexHeldCount+0x24>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d004      	beq.n	800e936 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e92c:	4b05      	ldr	r3, [pc, #20]	; (800e944 <pvTaskIncrementMutexHeldCount+0x24>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e932:	3201      	adds	r2, #1
 800e934:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e936:	4b03      	ldr	r3, [pc, #12]	; (800e944 <pvTaskIncrementMutexHeldCount+0x24>)
 800e938:	681b      	ldr	r3, [r3, #0]
	}
 800e93a:	4618      	mov	r0, r3
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr
 800e944:	200005b4 	.word	0x200005b4

0800e948 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b084      	sub	sp, #16
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e952:	4b21      	ldr	r3, [pc, #132]	; (800e9d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e958:	4b20      	ldr	r3, [pc, #128]	; (800e9dc <prvAddCurrentTaskToDelayedList+0x94>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	3304      	adds	r3, #4
 800e95e:	4618      	mov	r0, r3
 800e960:	f7fd ffd6 	bl	800c910 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e96a:	d10a      	bne.n	800e982 <prvAddCurrentTaskToDelayedList+0x3a>
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d007      	beq.n	800e982 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e972:	4b1a      	ldr	r3, [pc, #104]	; (800e9dc <prvAddCurrentTaskToDelayedList+0x94>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	3304      	adds	r3, #4
 800e978:	4619      	mov	r1, r3
 800e97a:	4819      	ldr	r0, [pc, #100]	; (800e9e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800e97c:	f7fd ff6b 	bl	800c856 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e980:	e026      	b.n	800e9d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	4413      	add	r3, r2
 800e988:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e98a:	4b14      	ldr	r3, [pc, #80]	; (800e9dc <prvAddCurrentTaskToDelayedList+0x94>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	68ba      	ldr	r2, [r7, #8]
 800e990:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e992:	68ba      	ldr	r2, [r7, #8]
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	429a      	cmp	r2, r3
 800e998:	d209      	bcs.n	800e9ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e99a:	4b12      	ldr	r3, [pc, #72]	; (800e9e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	4b0f      	ldr	r3, [pc, #60]	; (800e9dc <prvAddCurrentTaskToDelayedList+0x94>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	3304      	adds	r3, #4
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	4610      	mov	r0, r2
 800e9a8:	f7fd ff79 	bl	800c89e <vListInsert>
}
 800e9ac:	e010      	b.n	800e9d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9ae:	4b0e      	ldr	r3, [pc, #56]	; (800e9e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e9b0:	681a      	ldr	r2, [r3, #0]
 800e9b2:	4b0a      	ldr	r3, [pc, #40]	; (800e9dc <prvAddCurrentTaskToDelayedList+0x94>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	3304      	adds	r3, #4
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	4610      	mov	r0, r2
 800e9bc:	f7fd ff6f 	bl	800c89e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e9c0:	4b0a      	ldr	r3, [pc, #40]	; (800e9ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	68ba      	ldr	r2, [r7, #8]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d202      	bcs.n	800e9d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e9ca:	4a08      	ldr	r2, [pc, #32]	; (800e9ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	6013      	str	r3, [r2, #0]
}
 800e9d0:	bf00      	nop
 800e9d2:	3710      	adds	r7, #16
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	20000a8c 	.word	0x20000a8c
 800e9dc:	200005b4 	.word	0x200005b4
 800e9e0:	20000a74 	.word	0x20000a74
 800e9e4:	20000a44 	.word	0x20000a44
 800e9e8:	20000a40 	.word	0x20000a40
 800e9ec:	20000aa8 	.word	0x20000aa8

0800e9f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b08a      	sub	sp, #40	; 0x28
 800e9f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e9fa:	f000 fb07 	bl	800f00c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e9fe:	4b1c      	ldr	r3, [pc, #112]	; (800ea70 <xTimerCreateTimerTask+0x80>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d021      	beq.n	800ea4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ea06:	2300      	movs	r3, #0
 800ea08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ea0e:	1d3a      	adds	r2, r7, #4
 800ea10:	f107 0108 	add.w	r1, r7, #8
 800ea14:	f107 030c 	add.w	r3, r7, #12
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7fd fed5 	bl	800c7c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ea1e:	6879      	ldr	r1, [r7, #4]
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	9202      	str	r2, [sp, #8]
 800ea26:	9301      	str	r3, [sp, #4]
 800ea28:	2302      	movs	r3, #2
 800ea2a:	9300      	str	r3, [sp, #0]
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	460a      	mov	r2, r1
 800ea30:	4910      	ldr	r1, [pc, #64]	; (800ea74 <xTimerCreateTimerTask+0x84>)
 800ea32:	4811      	ldr	r0, [pc, #68]	; (800ea78 <xTimerCreateTimerTask+0x88>)
 800ea34:	f7fe ffa4 	bl	800d980 <xTaskCreateStatic>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	4a10      	ldr	r2, [pc, #64]	; (800ea7c <xTimerCreateTimerTask+0x8c>)
 800ea3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ea3e:	4b0f      	ldr	r3, [pc, #60]	; (800ea7c <xTimerCreateTimerTask+0x8c>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d001      	beq.n	800ea4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ea46:	2301      	movs	r3, #1
 800ea48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d10a      	bne.n	800ea66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ea50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea54:	f383 8811 	msr	BASEPRI, r3
 800ea58:	f3bf 8f6f 	isb	sy
 800ea5c:	f3bf 8f4f 	dsb	sy
 800ea60:	613b      	str	r3, [r7, #16]
}
 800ea62:	bf00      	nop
 800ea64:	e7fe      	b.n	800ea64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ea66:	697b      	ldr	r3, [r7, #20]
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3718      	adds	r7, #24
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}
 800ea70:	20000ae4 	.word	0x20000ae4
 800ea74:	0802f170 	.word	0x0802f170
 800ea78:	0800ebb5 	.word	0x0800ebb5
 800ea7c:	20000ae8 	.word	0x20000ae8

0800ea80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b08a      	sub	sp, #40	; 0x28
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	60f8      	str	r0, [r7, #12]
 800ea88:	60b9      	str	r1, [r7, #8]
 800ea8a:	607a      	str	r2, [r7, #4]
 800ea8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d10a      	bne.n	800eaae <xTimerGenericCommand+0x2e>
	__asm volatile
 800ea98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea9c:	f383 8811 	msr	BASEPRI, r3
 800eaa0:	f3bf 8f6f 	isb	sy
 800eaa4:	f3bf 8f4f 	dsb	sy
 800eaa8:	623b      	str	r3, [r7, #32]
}
 800eaaa:	bf00      	nop
 800eaac:	e7fe      	b.n	800eaac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eaae:	4b1a      	ldr	r3, [pc, #104]	; (800eb18 <xTimerGenericCommand+0x98>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d02a      	beq.n	800eb0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	2b05      	cmp	r3, #5
 800eac6:	dc18      	bgt.n	800eafa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eac8:	f7ff fdb4 	bl	800e634 <xTaskGetSchedulerState>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b02      	cmp	r3, #2
 800ead0:	d109      	bne.n	800eae6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ead2:	4b11      	ldr	r3, [pc, #68]	; (800eb18 <xTimerGenericCommand+0x98>)
 800ead4:	6818      	ldr	r0, [r3, #0]
 800ead6:	f107 0110 	add.w	r1, r7, #16
 800eada:	2300      	movs	r3, #0
 800eadc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eade:	f7fe f8e9 	bl	800ccb4 <xQueueGenericSend>
 800eae2:	6278      	str	r0, [r7, #36]	; 0x24
 800eae4:	e012      	b.n	800eb0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eae6:	4b0c      	ldr	r3, [pc, #48]	; (800eb18 <xTimerGenericCommand+0x98>)
 800eae8:	6818      	ldr	r0, [r3, #0]
 800eaea:	f107 0110 	add.w	r1, r7, #16
 800eaee:	2300      	movs	r3, #0
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f7fe f8df 	bl	800ccb4 <xQueueGenericSend>
 800eaf6:	6278      	str	r0, [r7, #36]	; 0x24
 800eaf8:	e008      	b.n	800eb0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eafa:	4b07      	ldr	r3, [pc, #28]	; (800eb18 <xTimerGenericCommand+0x98>)
 800eafc:	6818      	ldr	r0, [r3, #0]
 800eafe:	f107 0110 	add.w	r1, r7, #16
 800eb02:	2300      	movs	r3, #0
 800eb04:	683a      	ldr	r2, [r7, #0]
 800eb06:	f7fe f9d3 	bl	800ceb0 <xQueueGenericSendFromISR>
 800eb0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3728      	adds	r7, #40	; 0x28
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	20000ae4 	.word	0x20000ae4

0800eb1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b088      	sub	sp, #32
 800eb20:	af02      	add	r7, sp, #8
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb26:	4b22      	ldr	r3, [pc, #136]	; (800ebb0 <prvProcessExpiredTimer+0x94>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	68db      	ldr	r3, [r3, #12]
 800eb2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	3304      	adds	r3, #4
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7fd feeb 	bl	800c910 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb40:	f003 0304 	and.w	r3, r3, #4
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d022      	beq.n	800eb8e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	699a      	ldr	r2, [r3, #24]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	18d1      	adds	r1, r2, r3
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	683a      	ldr	r2, [r7, #0]
 800eb54:	6978      	ldr	r0, [r7, #20]
 800eb56:	f000 f8d1 	bl	800ecfc <prvInsertTimerInActiveList>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d01f      	beq.n	800eba0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb60:	2300      	movs	r3, #0
 800eb62:	9300      	str	r3, [sp, #0]
 800eb64:	2300      	movs	r3, #0
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	2100      	movs	r1, #0
 800eb6a:	6978      	ldr	r0, [r7, #20]
 800eb6c:	f7ff ff88 	bl	800ea80 <xTimerGenericCommand>
 800eb70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d113      	bne.n	800eba0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800eb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7c:	f383 8811 	msr	BASEPRI, r3
 800eb80:	f3bf 8f6f 	isb	sy
 800eb84:	f3bf 8f4f 	dsb	sy
 800eb88:	60fb      	str	r3, [r7, #12]
}
 800eb8a:	bf00      	nop
 800eb8c:	e7fe      	b.n	800eb8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb94:	f023 0301 	bic.w	r3, r3, #1
 800eb98:	b2da      	uxtb	r2, r3
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	6a1b      	ldr	r3, [r3, #32]
 800eba4:	6978      	ldr	r0, [r7, #20]
 800eba6:	4798      	blx	r3
}
 800eba8:	bf00      	nop
 800ebaa:	3718      	adds	r7, #24
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	20000adc 	.word	0x20000adc

0800ebb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b084      	sub	sp, #16
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ebbc:	f107 0308 	add.w	r3, r7, #8
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f000 f857 	bl	800ec74 <prvGetNextExpireTime>
 800ebc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	4619      	mov	r1, r3
 800ebcc:	68f8      	ldr	r0, [r7, #12]
 800ebce:	f000 f803 	bl	800ebd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ebd2:	f000 f8d5 	bl	800ed80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ebd6:	e7f1      	b.n	800ebbc <prvTimerTask+0x8>

0800ebd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ebe2:	f7ff f929 	bl	800de38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ebe6:	f107 0308 	add.w	r3, r7, #8
 800ebea:	4618      	mov	r0, r3
 800ebec:	f000 f866 	bl	800ecbc <prvSampleTimeNow>
 800ebf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d130      	bne.n	800ec5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d10a      	bne.n	800ec14 <prvProcessTimerOrBlockTask+0x3c>
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d806      	bhi.n	800ec14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ec06:	f7ff f925 	bl	800de54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ec0a:	68f9      	ldr	r1, [r7, #12]
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f7ff ff85 	bl	800eb1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ec12:	e024      	b.n	800ec5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d008      	beq.n	800ec2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ec1a:	4b13      	ldr	r3, [pc, #76]	; (800ec68 <prvProcessTimerOrBlockTask+0x90>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d101      	bne.n	800ec28 <prvProcessTimerOrBlockTask+0x50>
 800ec24:	2301      	movs	r3, #1
 800ec26:	e000      	b.n	800ec2a <prvProcessTimerOrBlockTask+0x52>
 800ec28:	2300      	movs	r3, #0
 800ec2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ec2c:	4b0f      	ldr	r3, [pc, #60]	; (800ec6c <prvProcessTimerOrBlockTask+0x94>)
 800ec2e:	6818      	ldr	r0, [r3, #0]
 800ec30:	687a      	ldr	r2, [r7, #4]
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	1ad3      	subs	r3, r2, r3
 800ec36:	683a      	ldr	r2, [r7, #0]
 800ec38:	4619      	mov	r1, r3
 800ec3a:	f7fe fe6d 	bl	800d918 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ec3e:	f7ff f909 	bl	800de54 <xTaskResumeAll>
 800ec42:	4603      	mov	r3, r0
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d10a      	bne.n	800ec5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ec48:	4b09      	ldr	r3, [pc, #36]	; (800ec70 <prvProcessTimerOrBlockTask+0x98>)
 800ec4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec4e:	601a      	str	r2, [r3, #0]
 800ec50:	f3bf 8f4f 	dsb	sy
 800ec54:	f3bf 8f6f 	isb	sy
}
 800ec58:	e001      	b.n	800ec5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ec5a:	f7ff f8fb 	bl	800de54 <xTaskResumeAll>
}
 800ec5e:	bf00      	nop
 800ec60:	3710      	adds	r7, #16
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	20000ae0 	.word	0x20000ae0
 800ec6c:	20000ae4 	.word	0x20000ae4
 800ec70:	e000ed04 	.word	0xe000ed04

0800ec74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ec74:	b480      	push	{r7}
 800ec76:	b085      	sub	sp, #20
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ec7c:	4b0e      	ldr	r3, [pc, #56]	; (800ecb8 <prvGetNextExpireTime+0x44>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d101      	bne.n	800ec8a <prvGetNextExpireTime+0x16>
 800ec86:	2201      	movs	r2, #1
 800ec88:	e000      	b.n	800ec8c <prvGetNextExpireTime+0x18>
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d105      	bne.n	800eca4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec98:	4b07      	ldr	r3, [pc, #28]	; (800ecb8 <prvGetNextExpireTime+0x44>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	68db      	ldr	r3, [r3, #12]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	60fb      	str	r3, [r7, #12]
 800eca2:	e001      	b.n	800eca8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eca4:	2300      	movs	r3, #0
 800eca6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eca8:	68fb      	ldr	r3, [r7, #12]
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3714      	adds	r7, #20
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop
 800ecb8:	20000adc 	.word	0x20000adc

0800ecbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ecc4:	f7ff f964 	bl	800df90 <xTaskGetTickCount>
 800ecc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ecca:	4b0b      	ldr	r3, [pc, #44]	; (800ecf8 <prvSampleTimeNow+0x3c>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	68fa      	ldr	r2, [r7, #12]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d205      	bcs.n	800ece0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ecd4:	f000 f936 	bl	800ef44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2201      	movs	r2, #1
 800ecdc:	601a      	str	r2, [r3, #0]
 800ecde:	e002      	b.n	800ece6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2200      	movs	r2, #0
 800ece4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ece6:	4a04      	ldr	r2, [pc, #16]	; (800ecf8 <prvSampleTimeNow+0x3c>)
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ecec:	68fb      	ldr	r3, [r7, #12]
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3710      	adds	r7, #16
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	20000aec 	.word	0x20000aec

0800ecfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b086      	sub	sp, #24
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	60f8      	str	r0, [r7, #12]
 800ed04:	60b9      	str	r1, [r7, #8]
 800ed06:	607a      	str	r2, [r7, #4]
 800ed08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	68ba      	ldr	r2, [r7, #8]
 800ed12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	68fa      	ldr	r2, [r7, #12]
 800ed18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ed1a:	68ba      	ldr	r2, [r7, #8]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d812      	bhi.n	800ed48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	1ad2      	subs	r2, r2, r3
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	699b      	ldr	r3, [r3, #24]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d302      	bcc.n	800ed36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ed30:	2301      	movs	r3, #1
 800ed32:	617b      	str	r3, [r7, #20]
 800ed34:	e01b      	b.n	800ed6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ed36:	4b10      	ldr	r3, [pc, #64]	; (800ed78 <prvInsertTimerInActiveList+0x7c>)
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	3304      	adds	r3, #4
 800ed3e:	4619      	mov	r1, r3
 800ed40:	4610      	mov	r0, r2
 800ed42:	f7fd fdac 	bl	800c89e <vListInsert>
 800ed46:	e012      	b.n	800ed6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ed48:	687a      	ldr	r2, [r7, #4]
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d206      	bcs.n	800ed5e <prvInsertTimerInActiveList+0x62>
 800ed50:	68ba      	ldr	r2, [r7, #8]
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d302      	bcc.n	800ed5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	617b      	str	r3, [r7, #20]
 800ed5c:	e007      	b.n	800ed6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed5e:	4b07      	ldr	r3, [pc, #28]	; (800ed7c <prvInsertTimerInActiveList+0x80>)
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	3304      	adds	r3, #4
 800ed66:	4619      	mov	r1, r3
 800ed68:	4610      	mov	r0, r2
 800ed6a:	f7fd fd98 	bl	800c89e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ed6e:	697b      	ldr	r3, [r7, #20]
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3718      	adds	r7, #24
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	20000ae0 	.word	0x20000ae0
 800ed7c:	20000adc 	.word	0x20000adc

0800ed80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b08e      	sub	sp, #56	; 0x38
 800ed84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ed86:	e0ca      	b.n	800ef1e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	da18      	bge.n	800edc0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ed8e:	1d3b      	adds	r3, r7, #4
 800ed90:	3304      	adds	r3, #4
 800ed92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ed94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d10a      	bne.n	800edb0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ed9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9e:	f383 8811 	msr	BASEPRI, r3
 800eda2:	f3bf 8f6f 	isb	sy
 800eda6:	f3bf 8f4f 	dsb	sy
 800edaa:	61fb      	str	r3, [r7, #28]
}
 800edac:	bf00      	nop
 800edae:	e7fe      	b.n	800edae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800edb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edb6:	6850      	ldr	r0, [r2, #4]
 800edb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edba:	6892      	ldr	r2, [r2, #8]
 800edbc:	4611      	mov	r1, r2
 800edbe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	f2c0 80aa 	blt.w	800ef1c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800edcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edce:	695b      	ldr	r3, [r3, #20]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d004      	beq.n	800edde <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800edd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd6:	3304      	adds	r3, #4
 800edd8:	4618      	mov	r0, r3
 800edda:	f7fd fd99 	bl	800c910 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800edde:	463b      	mov	r3, r7
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7ff ff6b 	bl	800ecbc <prvSampleTimeNow>
 800ede6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2b09      	cmp	r3, #9
 800edec:	f200 8097 	bhi.w	800ef1e <prvProcessReceivedCommands+0x19e>
 800edf0:	a201      	add	r2, pc, #4	; (adr r2, 800edf8 <prvProcessReceivedCommands+0x78>)
 800edf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edf6:	bf00      	nop
 800edf8:	0800ee21 	.word	0x0800ee21
 800edfc:	0800ee21 	.word	0x0800ee21
 800ee00:	0800ee21 	.word	0x0800ee21
 800ee04:	0800ee95 	.word	0x0800ee95
 800ee08:	0800eea9 	.word	0x0800eea9
 800ee0c:	0800eef3 	.word	0x0800eef3
 800ee10:	0800ee21 	.word	0x0800ee21
 800ee14:	0800ee21 	.word	0x0800ee21
 800ee18:	0800ee95 	.word	0x0800ee95
 800ee1c:	0800eea9 	.word	0x0800eea9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee26:	f043 0301 	orr.w	r3, r3, #1
 800ee2a:	b2da      	uxtb	r2, r3
 800ee2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ee32:	68ba      	ldr	r2, [r7, #8]
 800ee34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee36:	699b      	ldr	r3, [r3, #24]
 800ee38:	18d1      	adds	r1, r2, r3
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee40:	f7ff ff5c 	bl	800ecfc <prvInsertTimerInActiveList>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d069      	beq.n	800ef1e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4c:	6a1b      	ldr	r3, [r3, #32]
 800ee4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee58:	f003 0304 	and.w	r3, r3, #4
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d05e      	beq.n	800ef1e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ee60:	68ba      	ldr	r2, [r7, #8]
 800ee62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee64:	699b      	ldr	r3, [r3, #24]
 800ee66:	441a      	add	r2, r3
 800ee68:	2300      	movs	r3, #0
 800ee6a:	9300      	str	r3, [sp, #0]
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	2100      	movs	r1, #0
 800ee70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee72:	f7ff fe05 	bl	800ea80 <xTimerGenericCommand>
 800ee76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ee78:	6a3b      	ldr	r3, [r7, #32]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d14f      	bne.n	800ef1e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ee7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee82:	f383 8811 	msr	BASEPRI, r3
 800ee86:	f3bf 8f6f 	isb	sy
 800ee8a:	f3bf 8f4f 	dsb	sy
 800ee8e:	61bb      	str	r3, [r7, #24]
}
 800ee90:	bf00      	nop
 800ee92:	e7fe      	b.n	800ee92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee9a:	f023 0301 	bic.w	r3, r3, #1
 800ee9e:	b2da      	uxtb	r2, r3
 800eea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800eea6:	e03a      	b.n	800ef1e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eeae:	f043 0301 	orr.w	r3, r3, #1
 800eeb2:	b2da      	uxtb	r2, r3
 800eeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eeba:	68ba      	ldr	r2, [r7, #8]
 800eebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eebe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec2:	699b      	ldr	r3, [r3, #24]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d10a      	bne.n	800eede <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800eec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eecc:	f383 8811 	msr	BASEPRI, r3
 800eed0:	f3bf 8f6f 	isb	sy
 800eed4:	f3bf 8f4f 	dsb	sy
 800eed8:	617b      	str	r3, [r7, #20]
}
 800eeda:	bf00      	nop
 800eedc:	e7fe      	b.n	800eedc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee0:	699a      	ldr	r2, [r3, #24]
 800eee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee4:	18d1      	adds	r1, r2, r3
 800eee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eeec:	f7ff ff06 	bl	800ecfc <prvInsertTimerInActiveList>
					break;
 800eef0:	e015      	b.n	800ef1e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eef8:	f003 0302 	and.w	r3, r3, #2
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d103      	bne.n	800ef08 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ef00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef02:	f000 fbdd 	bl	800f6c0 <vPortFree>
 800ef06:	e00a      	b.n	800ef1e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef0e:	f023 0301 	bic.w	r3, r3, #1
 800ef12:	b2da      	uxtb	r2, r3
 800ef14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ef1a:	e000      	b.n	800ef1e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ef1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef1e:	4b08      	ldr	r3, [pc, #32]	; (800ef40 <prvProcessReceivedCommands+0x1c0>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	1d39      	adds	r1, r7, #4
 800ef24:	2200      	movs	r2, #0
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7fe f8ea 	bl	800d100 <xQueueReceive>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	f47f af2a 	bne.w	800ed88 <prvProcessReceivedCommands+0x8>
	}
}
 800ef34:	bf00      	nop
 800ef36:	bf00      	nop
 800ef38:	3730      	adds	r7, #48	; 0x30
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	20000ae4 	.word	0x20000ae4

0800ef44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b088      	sub	sp, #32
 800ef48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef4a:	e048      	b.n	800efde <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef4c:	4b2d      	ldr	r3, [pc, #180]	; (800f004 <prvSwitchTimerLists+0xc0>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef56:	4b2b      	ldr	r3, [pc, #172]	; (800f004 <prvSwitchTimerLists+0xc0>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	68db      	ldr	r3, [r3, #12]
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	3304      	adds	r3, #4
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7fd fcd3 	bl	800c910 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	6a1b      	ldr	r3, [r3, #32]
 800ef6e:	68f8      	ldr	r0, [r7, #12]
 800ef70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef78:	f003 0304 	and.w	r3, r3, #4
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d02e      	beq.n	800efde <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	699b      	ldr	r3, [r3, #24]
 800ef84:	693a      	ldr	r2, [r7, #16]
 800ef86:	4413      	add	r3, r2
 800ef88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ef8a:	68ba      	ldr	r2, [r7, #8]
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d90e      	bls.n	800efb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	68ba      	ldr	r2, [r7, #8]
 800ef96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	68fa      	ldr	r2, [r7, #12]
 800ef9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef9e:	4b19      	ldr	r3, [pc, #100]	; (800f004 <prvSwitchTimerLists+0xc0>)
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	3304      	adds	r3, #4
 800efa6:	4619      	mov	r1, r3
 800efa8:	4610      	mov	r0, r2
 800efaa:	f7fd fc78 	bl	800c89e <vListInsert>
 800efae:	e016      	b.n	800efde <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800efb0:	2300      	movs	r3, #0
 800efb2:	9300      	str	r3, [sp, #0]
 800efb4:	2300      	movs	r3, #0
 800efb6:	693a      	ldr	r2, [r7, #16]
 800efb8:	2100      	movs	r1, #0
 800efba:	68f8      	ldr	r0, [r7, #12]
 800efbc:	f7ff fd60 	bl	800ea80 <xTimerGenericCommand>
 800efc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d10a      	bne.n	800efde <prvSwitchTimerLists+0x9a>
	__asm volatile
 800efc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efcc:	f383 8811 	msr	BASEPRI, r3
 800efd0:	f3bf 8f6f 	isb	sy
 800efd4:	f3bf 8f4f 	dsb	sy
 800efd8:	603b      	str	r3, [r7, #0]
}
 800efda:	bf00      	nop
 800efdc:	e7fe      	b.n	800efdc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efde:	4b09      	ldr	r3, [pc, #36]	; (800f004 <prvSwitchTimerLists+0xc0>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d1b1      	bne.n	800ef4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800efe8:	4b06      	ldr	r3, [pc, #24]	; (800f004 <prvSwitchTimerLists+0xc0>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800efee:	4b06      	ldr	r3, [pc, #24]	; (800f008 <prvSwitchTimerLists+0xc4>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	4a04      	ldr	r2, [pc, #16]	; (800f004 <prvSwitchTimerLists+0xc0>)
 800eff4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eff6:	4a04      	ldr	r2, [pc, #16]	; (800f008 <prvSwitchTimerLists+0xc4>)
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	6013      	str	r3, [r2, #0]
}
 800effc:	bf00      	nop
 800effe:	3718      	adds	r7, #24
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	20000adc 	.word	0x20000adc
 800f008:	20000ae0 	.word	0x20000ae0

0800f00c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b082      	sub	sp, #8
 800f010:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f012:	f000 f967 	bl	800f2e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f016:	4b15      	ldr	r3, [pc, #84]	; (800f06c <prvCheckForValidListAndQueue+0x60>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d120      	bne.n	800f060 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f01e:	4814      	ldr	r0, [pc, #80]	; (800f070 <prvCheckForValidListAndQueue+0x64>)
 800f020:	f7fd fbec 	bl	800c7fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f024:	4813      	ldr	r0, [pc, #76]	; (800f074 <prvCheckForValidListAndQueue+0x68>)
 800f026:	f7fd fbe9 	bl	800c7fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f02a:	4b13      	ldr	r3, [pc, #76]	; (800f078 <prvCheckForValidListAndQueue+0x6c>)
 800f02c:	4a10      	ldr	r2, [pc, #64]	; (800f070 <prvCheckForValidListAndQueue+0x64>)
 800f02e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f030:	4b12      	ldr	r3, [pc, #72]	; (800f07c <prvCheckForValidListAndQueue+0x70>)
 800f032:	4a10      	ldr	r2, [pc, #64]	; (800f074 <prvCheckForValidListAndQueue+0x68>)
 800f034:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f036:	2300      	movs	r3, #0
 800f038:	9300      	str	r3, [sp, #0]
 800f03a:	4b11      	ldr	r3, [pc, #68]	; (800f080 <prvCheckForValidListAndQueue+0x74>)
 800f03c:	4a11      	ldr	r2, [pc, #68]	; (800f084 <prvCheckForValidListAndQueue+0x78>)
 800f03e:	2110      	movs	r1, #16
 800f040:	200a      	movs	r0, #10
 800f042:	f7fd fcf7 	bl	800ca34 <xQueueGenericCreateStatic>
 800f046:	4603      	mov	r3, r0
 800f048:	4a08      	ldr	r2, [pc, #32]	; (800f06c <prvCheckForValidListAndQueue+0x60>)
 800f04a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f04c:	4b07      	ldr	r3, [pc, #28]	; (800f06c <prvCheckForValidListAndQueue+0x60>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d005      	beq.n	800f060 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f054:	4b05      	ldr	r3, [pc, #20]	; (800f06c <prvCheckForValidListAndQueue+0x60>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	490b      	ldr	r1, [pc, #44]	; (800f088 <prvCheckForValidListAndQueue+0x7c>)
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7fe fc08 	bl	800d870 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f060:	f000 f970 	bl	800f344 <vPortExitCritical>
}
 800f064:	bf00      	nop
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	20000ae4 	.word	0x20000ae4
 800f070:	20000ab4 	.word	0x20000ab4
 800f074:	20000ac8 	.word	0x20000ac8
 800f078:	20000adc 	.word	0x20000adc
 800f07c:	20000ae0 	.word	0x20000ae0
 800f080:	20000b90 	.word	0x20000b90
 800f084:	20000af0 	.word	0x20000af0
 800f088:	0802f178 	.word	0x0802f178

0800f08c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f08c:	b480      	push	{r7}
 800f08e:	b085      	sub	sp, #20
 800f090:	af00      	add	r7, sp, #0
 800f092:	60f8      	str	r0, [r7, #12]
 800f094:	60b9      	str	r1, [r7, #8]
 800f096:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	3b04      	subs	r3, #4
 800f09c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f0a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	3b04      	subs	r3, #4
 800f0aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	f023 0201 	bic.w	r2, r3, #1
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	3b04      	subs	r3, #4
 800f0ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f0bc:	4a0c      	ldr	r2, [pc, #48]	; (800f0f0 <pxPortInitialiseStack+0x64>)
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	3b14      	subs	r3, #20
 800f0c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f0c8:	687a      	ldr	r2, [r7, #4]
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	3b04      	subs	r3, #4
 800f0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f06f 0202 	mvn.w	r2, #2
 800f0da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	3b20      	subs	r3, #32
 800f0e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3714      	adds	r7, #20
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr
 800f0f0:	0800f0f5 	.word	0x0800f0f5

0800f0f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b085      	sub	sp, #20
 800f0f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f0fe:	4b12      	ldr	r3, [pc, #72]	; (800f148 <prvTaskExitError+0x54>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f106:	d00a      	beq.n	800f11e <prvTaskExitError+0x2a>
	__asm volatile
 800f108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10c:	f383 8811 	msr	BASEPRI, r3
 800f110:	f3bf 8f6f 	isb	sy
 800f114:	f3bf 8f4f 	dsb	sy
 800f118:	60fb      	str	r3, [r7, #12]
}
 800f11a:	bf00      	nop
 800f11c:	e7fe      	b.n	800f11c <prvTaskExitError+0x28>
	__asm volatile
 800f11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f122:	f383 8811 	msr	BASEPRI, r3
 800f126:	f3bf 8f6f 	isb	sy
 800f12a:	f3bf 8f4f 	dsb	sy
 800f12e:	60bb      	str	r3, [r7, #8]
}
 800f130:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f132:	bf00      	nop
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d0fc      	beq.n	800f134 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f13a:	bf00      	nop
 800f13c:	bf00      	nop
 800f13e:	3714      	adds	r7, #20
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr
 800f148:	20000014 	.word	0x20000014
 800f14c:	00000000 	.word	0x00000000

0800f150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f150:	4b07      	ldr	r3, [pc, #28]	; (800f170 <pxCurrentTCBConst2>)
 800f152:	6819      	ldr	r1, [r3, #0]
 800f154:	6808      	ldr	r0, [r1, #0]
 800f156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f15a:	f380 8809 	msr	PSP, r0
 800f15e:	f3bf 8f6f 	isb	sy
 800f162:	f04f 0000 	mov.w	r0, #0
 800f166:	f380 8811 	msr	BASEPRI, r0
 800f16a:	4770      	bx	lr
 800f16c:	f3af 8000 	nop.w

0800f170 <pxCurrentTCBConst2>:
 800f170:	200005b4 	.word	0x200005b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f174:	bf00      	nop
 800f176:	bf00      	nop

0800f178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f178:	4808      	ldr	r0, [pc, #32]	; (800f19c <prvPortStartFirstTask+0x24>)
 800f17a:	6800      	ldr	r0, [r0, #0]
 800f17c:	6800      	ldr	r0, [r0, #0]
 800f17e:	f380 8808 	msr	MSP, r0
 800f182:	f04f 0000 	mov.w	r0, #0
 800f186:	f380 8814 	msr	CONTROL, r0
 800f18a:	b662      	cpsie	i
 800f18c:	b661      	cpsie	f
 800f18e:	f3bf 8f4f 	dsb	sy
 800f192:	f3bf 8f6f 	isb	sy
 800f196:	df00      	svc	0
 800f198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f19a:	bf00      	nop
 800f19c:	e000ed08 	.word	0xe000ed08

0800f1a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b086      	sub	sp, #24
 800f1a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f1a6:	4b46      	ldr	r3, [pc, #280]	; (800f2c0 <xPortStartScheduler+0x120>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	4a46      	ldr	r2, [pc, #280]	; (800f2c4 <xPortStartScheduler+0x124>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d10a      	bne.n	800f1c6 <xPortStartScheduler+0x26>
	__asm volatile
 800f1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b4:	f383 8811 	msr	BASEPRI, r3
 800f1b8:	f3bf 8f6f 	isb	sy
 800f1bc:	f3bf 8f4f 	dsb	sy
 800f1c0:	613b      	str	r3, [r7, #16]
}
 800f1c2:	bf00      	nop
 800f1c4:	e7fe      	b.n	800f1c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f1c6:	4b3e      	ldr	r3, [pc, #248]	; (800f2c0 <xPortStartScheduler+0x120>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4a3f      	ldr	r2, [pc, #252]	; (800f2c8 <xPortStartScheduler+0x128>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d10a      	bne.n	800f1e6 <xPortStartScheduler+0x46>
	__asm volatile
 800f1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d4:	f383 8811 	msr	BASEPRI, r3
 800f1d8:	f3bf 8f6f 	isb	sy
 800f1dc:	f3bf 8f4f 	dsb	sy
 800f1e0:	60fb      	str	r3, [r7, #12]
}
 800f1e2:	bf00      	nop
 800f1e4:	e7fe      	b.n	800f1e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f1e6:	4b39      	ldr	r3, [pc, #228]	; (800f2cc <xPortStartScheduler+0x12c>)
 800f1e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	22ff      	movs	r2, #255	; 0xff
 800f1f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f200:	78fb      	ldrb	r3, [r7, #3]
 800f202:	b2db      	uxtb	r3, r3
 800f204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f208:	b2da      	uxtb	r2, r3
 800f20a:	4b31      	ldr	r3, [pc, #196]	; (800f2d0 <xPortStartScheduler+0x130>)
 800f20c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f20e:	4b31      	ldr	r3, [pc, #196]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f210:	2207      	movs	r2, #7
 800f212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f214:	e009      	b.n	800f22a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f216:	4b2f      	ldr	r3, [pc, #188]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	3b01      	subs	r3, #1
 800f21c:	4a2d      	ldr	r2, [pc, #180]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f21e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f220:	78fb      	ldrb	r3, [r7, #3]
 800f222:	b2db      	uxtb	r3, r3
 800f224:	005b      	lsls	r3, r3, #1
 800f226:	b2db      	uxtb	r3, r3
 800f228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f22a:	78fb      	ldrb	r3, [r7, #3]
 800f22c:	b2db      	uxtb	r3, r3
 800f22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f232:	2b80      	cmp	r3, #128	; 0x80
 800f234:	d0ef      	beq.n	800f216 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f236:	4b27      	ldr	r3, [pc, #156]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f1c3 0307 	rsb	r3, r3, #7
 800f23e:	2b04      	cmp	r3, #4
 800f240:	d00a      	beq.n	800f258 <xPortStartScheduler+0xb8>
	__asm volatile
 800f242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f246:	f383 8811 	msr	BASEPRI, r3
 800f24a:	f3bf 8f6f 	isb	sy
 800f24e:	f3bf 8f4f 	dsb	sy
 800f252:	60bb      	str	r3, [r7, #8]
}
 800f254:	bf00      	nop
 800f256:	e7fe      	b.n	800f256 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f258:	4b1e      	ldr	r3, [pc, #120]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	021b      	lsls	r3, r3, #8
 800f25e:	4a1d      	ldr	r2, [pc, #116]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f260:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f262:	4b1c      	ldr	r3, [pc, #112]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f26a:	4a1a      	ldr	r2, [pc, #104]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f26c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	b2da      	uxtb	r2, r3
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f276:	4b18      	ldr	r3, [pc, #96]	; (800f2d8 <xPortStartScheduler+0x138>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	4a17      	ldr	r2, [pc, #92]	; (800f2d8 <xPortStartScheduler+0x138>)
 800f27c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f280:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f282:	4b15      	ldr	r3, [pc, #84]	; (800f2d8 <xPortStartScheduler+0x138>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	4a14      	ldr	r2, [pc, #80]	; (800f2d8 <xPortStartScheduler+0x138>)
 800f288:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f28c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f28e:	f000 f8dd 	bl	800f44c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f292:	4b12      	ldr	r3, [pc, #72]	; (800f2dc <xPortStartScheduler+0x13c>)
 800f294:	2200      	movs	r2, #0
 800f296:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f298:	f000 f8fc 	bl	800f494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f29c:	4b10      	ldr	r3, [pc, #64]	; (800f2e0 <xPortStartScheduler+0x140>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4a0f      	ldr	r2, [pc, #60]	; (800f2e0 <xPortStartScheduler+0x140>)
 800f2a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f2a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f2a8:	f7ff ff66 	bl	800f178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f2ac:	f7fe ff4c 	bl	800e148 <vTaskSwitchContext>
	prvTaskExitError();
 800f2b0:	f7ff ff20 	bl	800f0f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f2b4:	2300      	movs	r3, #0
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3718      	adds	r7, #24
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	e000ed00 	.word	0xe000ed00
 800f2c4:	410fc271 	.word	0x410fc271
 800f2c8:	410fc270 	.word	0x410fc270
 800f2cc:	e000e400 	.word	0xe000e400
 800f2d0:	20000be0 	.word	0x20000be0
 800f2d4:	20000be4 	.word	0x20000be4
 800f2d8:	e000ed20 	.word	0xe000ed20
 800f2dc:	20000014 	.word	0x20000014
 800f2e0:	e000ef34 	.word	0xe000ef34

0800f2e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	af00      	add	r7, sp, #0
	__asm volatile
 800f2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ee:	f383 8811 	msr	BASEPRI, r3
 800f2f2:	f3bf 8f6f 	isb	sy
 800f2f6:	f3bf 8f4f 	dsb	sy
 800f2fa:	607b      	str	r3, [r7, #4]
}
 800f2fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f2fe:	4b0f      	ldr	r3, [pc, #60]	; (800f33c <vPortEnterCritical+0x58>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	3301      	adds	r3, #1
 800f304:	4a0d      	ldr	r2, [pc, #52]	; (800f33c <vPortEnterCritical+0x58>)
 800f306:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f308:	4b0c      	ldr	r3, [pc, #48]	; (800f33c <vPortEnterCritical+0x58>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d10f      	bne.n	800f330 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f310:	4b0b      	ldr	r3, [pc, #44]	; (800f340 <vPortEnterCritical+0x5c>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	b2db      	uxtb	r3, r3
 800f316:	2b00      	cmp	r3, #0
 800f318:	d00a      	beq.n	800f330 <vPortEnterCritical+0x4c>
	__asm volatile
 800f31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f31e:	f383 8811 	msr	BASEPRI, r3
 800f322:	f3bf 8f6f 	isb	sy
 800f326:	f3bf 8f4f 	dsb	sy
 800f32a:	603b      	str	r3, [r7, #0]
}
 800f32c:	bf00      	nop
 800f32e:	e7fe      	b.n	800f32e <vPortEnterCritical+0x4a>
	}
}
 800f330:	bf00      	nop
 800f332:	370c      	adds	r7, #12
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr
 800f33c:	20000014 	.word	0x20000014
 800f340:	e000ed04 	.word	0xe000ed04

0800f344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f344:	b480      	push	{r7}
 800f346:	b083      	sub	sp, #12
 800f348:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f34a:	4b12      	ldr	r3, [pc, #72]	; (800f394 <vPortExitCritical+0x50>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d10a      	bne.n	800f368 <vPortExitCritical+0x24>
	__asm volatile
 800f352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f356:	f383 8811 	msr	BASEPRI, r3
 800f35a:	f3bf 8f6f 	isb	sy
 800f35e:	f3bf 8f4f 	dsb	sy
 800f362:	607b      	str	r3, [r7, #4]
}
 800f364:	bf00      	nop
 800f366:	e7fe      	b.n	800f366 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f368:	4b0a      	ldr	r3, [pc, #40]	; (800f394 <vPortExitCritical+0x50>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	3b01      	subs	r3, #1
 800f36e:	4a09      	ldr	r2, [pc, #36]	; (800f394 <vPortExitCritical+0x50>)
 800f370:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f372:	4b08      	ldr	r3, [pc, #32]	; (800f394 <vPortExitCritical+0x50>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d105      	bne.n	800f386 <vPortExitCritical+0x42>
 800f37a:	2300      	movs	r3, #0
 800f37c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	f383 8811 	msr	BASEPRI, r3
}
 800f384:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f386:	bf00      	nop
 800f388:	370c      	adds	r7, #12
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop
 800f394:	20000014 	.word	0x20000014
	...

0800f3a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f3a0:	f3ef 8009 	mrs	r0, PSP
 800f3a4:	f3bf 8f6f 	isb	sy
 800f3a8:	4b15      	ldr	r3, [pc, #84]	; (800f400 <pxCurrentTCBConst>)
 800f3aa:	681a      	ldr	r2, [r3, #0]
 800f3ac:	f01e 0f10 	tst.w	lr, #16
 800f3b0:	bf08      	it	eq
 800f3b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f3b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ba:	6010      	str	r0, [r2, #0]
 800f3bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f3c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f3c4:	f380 8811 	msr	BASEPRI, r0
 800f3c8:	f3bf 8f4f 	dsb	sy
 800f3cc:	f3bf 8f6f 	isb	sy
 800f3d0:	f7fe feba 	bl	800e148 <vTaskSwitchContext>
 800f3d4:	f04f 0000 	mov.w	r0, #0
 800f3d8:	f380 8811 	msr	BASEPRI, r0
 800f3dc:	bc09      	pop	{r0, r3}
 800f3de:	6819      	ldr	r1, [r3, #0]
 800f3e0:	6808      	ldr	r0, [r1, #0]
 800f3e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3e6:	f01e 0f10 	tst.w	lr, #16
 800f3ea:	bf08      	it	eq
 800f3ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f3f0:	f380 8809 	msr	PSP, r0
 800f3f4:	f3bf 8f6f 	isb	sy
 800f3f8:	4770      	bx	lr
 800f3fa:	bf00      	nop
 800f3fc:	f3af 8000 	nop.w

0800f400 <pxCurrentTCBConst>:
 800f400:	200005b4 	.word	0x200005b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f404:	bf00      	nop
 800f406:	bf00      	nop

0800f408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
	__asm volatile
 800f40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f412:	f383 8811 	msr	BASEPRI, r3
 800f416:	f3bf 8f6f 	isb	sy
 800f41a:	f3bf 8f4f 	dsb	sy
 800f41e:	607b      	str	r3, [r7, #4]
}
 800f420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f422:	f7fe fdd7 	bl	800dfd4 <xTaskIncrementTick>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d003      	beq.n	800f434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f42c:	4b06      	ldr	r3, [pc, #24]	; (800f448 <xPortSysTickHandler+0x40>)
 800f42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f432:	601a      	str	r2, [r3, #0]
 800f434:	2300      	movs	r3, #0
 800f436:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	f383 8811 	msr	BASEPRI, r3
}
 800f43e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f440:	bf00      	nop
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	e000ed04 	.word	0xe000ed04

0800f44c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f44c:	b480      	push	{r7}
 800f44e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f450:	4b0b      	ldr	r3, [pc, #44]	; (800f480 <vPortSetupTimerInterrupt+0x34>)
 800f452:	2200      	movs	r2, #0
 800f454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f456:	4b0b      	ldr	r3, [pc, #44]	; (800f484 <vPortSetupTimerInterrupt+0x38>)
 800f458:	2200      	movs	r2, #0
 800f45a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f45c:	4b0a      	ldr	r3, [pc, #40]	; (800f488 <vPortSetupTimerInterrupt+0x3c>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4a0a      	ldr	r2, [pc, #40]	; (800f48c <vPortSetupTimerInterrupt+0x40>)
 800f462:	fba2 2303 	umull	r2, r3, r2, r3
 800f466:	099b      	lsrs	r3, r3, #6
 800f468:	4a09      	ldr	r2, [pc, #36]	; (800f490 <vPortSetupTimerInterrupt+0x44>)
 800f46a:	3b01      	subs	r3, #1
 800f46c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f46e:	4b04      	ldr	r3, [pc, #16]	; (800f480 <vPortSetupTimerInterrupt+0x34>)
 800f470:	2207      	movs	r2, #7
 800f472:	601a      	str	r2, [r3, #0]
}
 800f474:	bf00      	nop
 800f476:	46bd      	mov	sp, r7
 800f478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47c:	4770      	bx	lr
 800f47e:	bf00      	nop
 800f480:	e000e010 	.word	0xe000e010
 800f484:	e000e018 	.word	0xe000e018
 800f488:	20000008 	.word	0x20000008
 800f48c:	10624dd3 	.word	0x10624dd3
 800f490:	e000e014 	.word	0xe000e014

0800f494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f494:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f4a4 <vPortEnableVFP+0x10>
 800f498:	6801      	ldr	r1, [r0, #0]
 800f49a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f49e:	6001      	str	r1, [r0, #0]
 800f4a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f4a2:	bf00      	nop
 800f4a4:	e000ed88 	.word	0xe000ed88

0800f4a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b085      	sub	sp, #20
 800f4ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f4ae:	f3ef 8305 	mrs	r3, IPSR
 800f4b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	2b0f      	cmp	r3, #15
 800f4b8:	d914      	bls.n	800f4e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f4ba:	4a17      	ldr	r2, [pc, #92]	; (800f518 <vPortValidateInterruptPriority+0x70>)
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	4413      	add	r3, r2
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f4c4:	4b15      	ldr	r3, [pc, #84]	; (800f51c <vPortValidateInterruptPriority+0x74>)
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	7afa      	ldrb	r2, [r7, #11]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d20a      	bcs.n	800f4e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d2:	f383 8811 	msr	BASEPRI, r3
 800f4d6:	f3bf 8f6f 	isb	sy
 800f4da:	f3bf 8f4f 	dsb	sy
 800f4de:	607b      	str	r3, [r7, #4]
}
 800f4e0:	bf00      	nop
 800f4e2:	e7fe      	b.n	800f4e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f4e4:	4b0e      	ldr	r3, [pc, #56]	; (800f520 <vPortValidateInterruptPriority+0x78>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f4ec:	4b0d      	ldr	r3, [pc, #52]	; (800f524 <vPortValidateInterruptPriority+0x7c>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d90a      	bls.n	800f50a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f8:	f383 8811 	msr	BASEPRI, r3
 800f4fc:	f3bf 8f6f 	isb	sy
 800f500:	f3bf 8f4f 	dsb	sy
 800f504:	603b      	str	r3, [r7, #0]
}
 800f506:	bf00      	nop
 800f508:	e7fe      	b.n	800f508 <vPortValidateInterruptPriority+0x60>
	}
 800f50a:	bf00      	nop
 800f50c:	3714      	adds	r7, #20
 800f50e:	46bd      	mov	sp, r7
 800f510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f514:	4770      	bx	lr
 800f516:	bf00      	nop
 800f518:	e000e3f0 	.word	0xe000e3f0
 800f51c:	20000be0 	.word	0x20000be0
 800f520:	e000ed0c 	.word	0xe000ed0c
 800f524:	20000be4 	.word	0x20000be4

0800f528 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b08a      	sub	sp, #40	; 0x28
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f530:	2300      	movs	r3, #0
 800f532:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f534:	f7fe fc80 	bl	800de38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f538:	4b5b      	ldr	r3, [pc, #364]	; (800f6a8 <pvPortMalloc+0x180>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d101      	bne.n	800f544 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f540:	f000 f920 	bl	800f784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f544:	4b59      	ldr	r3, [pc, #356]	; (800f6ac <pvPortMalloc+0x184>)
 800f546:	681a      	ldr	r2, [r3, #0]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4013      	ands	r3, r2
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	f040 8093 	bne.w	800f678 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d01d      	beq.n	800f594 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f558:	2208      	movs	r2, #8
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	4413      	add	r3, r2
 800f55e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f003 0307 	and.w	r3, r3, #7
 800f566:	2b00      	cmp	r3, #0
 800f568:	d014      	beq.n	800f594 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f023 0307 	bic.w	r3, r3, #7
 800f570:	3308      	adds	r3, #8
 800f572:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f003 0307 	and.w	r3, r3, #7
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00a      	beq.n	800f594 <pvPortMalloc+0x6c>
	__asm volatile
 800f57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f582:	f383 8811 	msr	BASEPRI, r3
 800f586:	f3bf 8f6f 	isb	sy
 800f58a:	f3bf 8f4f 	dsb	sy
 800f58e:	617b      	str	r3, [r7, #20]
}
 800f590:	bf00      	nop
 800f592:	e7fe      	b.n	800f592 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d06e      	beq.n	800f678 <pvPortMalloc+0x150>
 800f59a:	4b45      	ldr	r3, [pc, #276]	; (800f6b0 <pvPortMalloc+0x188>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d869      	bhi.n	800f678 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f5a4:	4b43      	ldr	r3, [pc, #268]	; (800f6b4 <pvPortMalloc+0x18c>)
 800f5a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f5a8:	4b42      	ldr	r3, [pc, #264]	; (800f6b4 <pvPortMalloc+0x18c>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f5ae:	e004      	b.n	800f5ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5bc:	685b      	ldr	r3, [r3, #4]
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d903      	bls.n	800f5cc <pvPortMalloc+0xa4>
 800f5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d1f1      	bne.n	800f5b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f5cc:	4b36      	ldr	r3, [pc, #216]	; (800f6a8 <pvPortMalloc+0x180>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d050      	beq.n	800f678 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f5d6:	6a3b      	ldr	r3, [r7, #32]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	2208      	movs	r2, #8
 800f5dc:	4413      	add	r3, r2
 800f5de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e2:	681a      	ldr	r2, [r3, #0]
 800f5e4:	6a3b      	ldr	r3, [r7, #32]
 800f5e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ea:	685a      	ldr	r2, [r3, #4]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	1ad2      	subs	r2, r2, r3
 800f5f0:	2308      	movs	r3, #8
 800f5f2:	005b      	lsls	r3, r3, #1
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d91f      	bls.n	800f638 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f5f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	4413      	add	r3, r2
 800f5fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f600:	69bb      	ldr	r3, [r7, #24]
 800f602:	f003 0307 	and.w	r3, r3, #7
 800f606:	2b00      	cmp	r3, #0
 800f608:	d00a      	beq.n	800f620 <pvPortMalloc+0xf8>
	__asm volatile
 800f60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f60e:	f383 8811 	msr	BASEPRI, r3
 800f612:	f3bf 8f6f 	isb	sy
 800f616:	f3bf 8f4f 	dsb	sy
 800f61a:	613b      	str	r3, [r7, #16]
}
 800f61c:	bf00      	nop
 800f61e:	e7fe      	b.n	800f61e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f622:	685a      	ldr	r2, [r3, #4]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	1ad2      	subs	r2, r2, r3
 800f628:	69bb      	ldr	r3, [r7, #24]
 800f62a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f632:	69b8      	ldr	r0, [r7, #24]
 800f634:	f000 f908 	bl	800f848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f638:	4b1d      	ldr	r3, [pc, #116]	; (800f6b0 <pvPortMalloc+0x188>)
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	1ad3      	subs	r3, r2, r3
 800f642:	4a1b      	ldr	r2, [pc, #108]	; (800f6b0 <pvPortMalloc+0x188>)
 800f644:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f646:	4b1a      	ldr	r3, [pc, #104]	; (800f6b0 <pvPortMalloc+0x188>)
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	4b1b      	ldr	r3, [pc, #108]	; (800f6b8 <pvPortMalloc+0x190>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d203      	bcs.n	800f65a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f652:	4b17      	ldr	r3, [pc, #92]	; (800f6b0 <pvPortMalloc+0x188>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4a18      	ldr	r2, [pc, #96]	; (800f6b8 <pvPortMalloc+0x190>)
 800f658:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65c:	685a      	ldr	r2, [r3, #4]
 800f65e:	4b13      	ldr	r3, [pc, #76]	; (800f6ac <pvPortMalloc+0x184>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	431a      	orrs	r2, r3
 800f664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f666:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66a:	2200      	movs	r2, #0
 800f66c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f66e:	4b13      	ldr	r3, [pc, #76]	; (800f6bc <pvPortMalloc+0x194>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	3301      	adds	r3, #1
 800f674:	4a11      	ldr	r2, [pc, #68]	; (800f6bc <pvPortMalloc+0x194>)
 800f676:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f678:	f7fe fbec 	bl	800de54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	f003 0307 	and.w	r3, r3, #7
 800f682:	2b00      	cmp	r3, #0
 800f684:	d00a      	beq.n	800f69c <pvPortMalloc+0x174>
	__asm volatile
 800f686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f68a:	f383 8811 	msr	BASEPRI, r3
 800f68e:	f3bf 8f6f 	isb	sy
 800f692:	f3bf 8f4f 	dsb	sy
 800f696:	60fb      	str	r3, [r7, #12]
}
 800f698:	bf00      	nop
 800f69a:	e7fe      	b.n	800f69a <pvPortMalloc+0x172>
	return pvReturn;
 800f69c:	69fb      	ldr	r3, [r7, #28]
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3728      	adds	r7, #40	; 0x28
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	20007ab8 	.word	0x20007ab8
 800f6ac:	20007acc 	.word	0x20007acc
 800f6b0:	20007abc 	.word	0x20007abc
 800f6b4:	20007ab0 	.word	0x20007ab0
 800f6b8:	20007ac0 	.word	0x20007ac0
 800f6bc:	20007ac4 	.word	0x20007ac4

0800f6c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b086      	sub	sp, #24
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d04d      	beq.n	800f76e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f6d2:	2308      	movs	r3, #8
 800f6d4:	425b      	negs	r3, r3
 800f6d6:	697a      	ldr	r2, [r7, #20]
 800f6d8:	4413      	add	r3, r2
 800f6da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	685a      	ldr	r2, [r3, #4]
 800f6e4:	4b24      	ldr	r3, [pc, #144]	; (800f778 <vPortFree+0xb8>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4013      	ands	r3, r2
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d10a      	bne.n	800f704 <vPortFree+0x44>
	__asm volatile
 800f6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f2:	f383 8811 	msr	BASEPRI, r3
 800f6f6:	f3bf 8f6f 	isb	sy
 800f6fa:	f3bf 8f4f 	dsb	sy
 800f6fe:	60fb      	str	r3, [r7, #12]
}
 800f700:	bf00      	nop
 800f702:	e7fe      	b.n	800f702 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d00a      	beq.n	800f722 <vPortFree+0x62>
	__asm volatile
 800f70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f710:	f383 8811 	msr	BASEPRI, r3
 800f714:	f3bf 8f6f 	isb	sy
 800f718:	f3bf 8f4f 	dsb	sy
 800f71c:	60bb      	str	r3, [r7, #8]
}
 800f71e:	bf00      	nop
 800f720:	e7fe      	b.n	800f720 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	685a      	ldr	r2, [r3, #4]
 800f726:	4b14      	ldr	r3, [pc, #80]	; (800f778 <vPortFree+0xb8>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	4013      	ands	r3, r2
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d01e      	beq.n	800f76e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d11a      	bne.n	800f76e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	685a      	ldr	r2, [r3, #4]
 800f73c:	4b0e      	ldr	r3, [pc, #56]	; (800f778 <vPortFree+0xb8>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	43db      	mvns	r3, r3
 800f742:	401a      	ands	r2, r3
 800f744:	693b      	ldr	r3, [r7, #16]
 800f746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f748:	f7fe fb76 	bl	800de38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	685a      	ldr	r2, [r3, #4]
 800f750:	4b0a      	ldr	r3, [pc, #40]	; (800f77c <vPortFree+0xbc>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4413      	add	r3, r2
 800f756:	4a09      	ldr	r2, [pc, #36]	; (800f77c <vPortFree+0xbc>)
 800f758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f75a:	6938      	ldr	r0, [r7, #16]
 800f75c:	f000 f874 	bl	800f848 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f760:	4b07      	ldr	r3, [pc, #28]	; (800f780 <vPortFree+0xc0>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	3301      	adds	r3, #1
 800f766:	4a06      	ldr	r2, [pc, #24]	; (800f780 <vPortFree+0xc0>)
 800f768:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f76a:	f7fe fb73 	bl	800de54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f76e:	bf00      	nop
 800f770:	3718      	adds	r7, #24
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}
 800f776:	bf00      	nop
 800f778:	20007acc 	.word	0x20007acc
 800f77c:	20007abc 	.word	0x20007abc
 800f780:	20007ac8 	.word	0x20007ac8

0800f784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f784:	b480      	push	{r7}
 800f786:	b085      	sub	sp, #20
 800f788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f78a:	f646 63c8 	movw	r3, #28360	; 0x6ec8
 800f78e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f790:	4b27      	ldr	r3, [pc, #156]	; (800f830 <prvHeapInit+0xac>)
 800f792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f003 0307 	and.w	r3, r3, #7
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d00c      	beq.n	800f7b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	3307      	adds	r3, #7
 800f7a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f023 0307 	bic.w	r3, r3, #7
 800f7aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f7ac:	68ba      	ldr	r2, [r7, #8]
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	1ad3      	subs	r3, r2, r3
 800f7b2:	4a1f      	ldr	r2, [pc, #124]	; (800f830 <prvHeapInit+0xac>)
 800f7b4:	4413      	add	r3, r2
 800f7b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f7bc:	4a1d      	ldr	r2, [pc, #116]	; (800f834 <prvHeapInit+0xb0>)
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f7c2:	4b1c      	ldr	r3, [pc, #112]	; (800f834 <prvHeapInit+0xb0>)
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	68ba      	ldr	r2, [r7, #8]
 800f7cc:	4413      	add	r3, r2
 800f7ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f7d0:	2208      	movs	r2, #8
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	1a9b      	subs	r3, r3, r2
 800f7d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f023 0307 	bic.w	r3, r3, #7
 800f7de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	4a15      	ldr	r2, [pc, #84]	; (800f838 <prvHeapInit+0xb4>)
 800f7e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f7e6:	4b14      	ldr	r3, [pc, #80]	; (800f838 <prvHeapInit+0xb4>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f7ee:	4b12      	ldr	r3, [pc, #72]	; (800f838 <prvHeapInit+0xb4>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	68fa      	ldr	r2, [r7, #12]
 800f7fe:	1ad2      	subs	r2, r2, r3
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f804:	4b0c      	ldr	r3, [pc, #48]	; (800f838 <prvHeapInit+0xb4>)
 800f806:	681a      	ldr	r2, [r3, #0]
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	4a0a      	ldr	r2, [pc, #40]	; (800f83c <prvHeapInit+0xb8>)
 800f812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	4a09      	ldr	r2, [pc, #36]	; (800f840 <prvHeapInit+0xbc>)
 800f81a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f81c:	4b09      	ldr	r3, [pc, #36]	; (800f844 <prvHeapInit+0xc0>)
 800f81e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f822:	601a      	str	r2, [r3, #0]
}
 800f824:	bf00      	nop
 800f826:	3714      	adds	r7, #20
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr
 800f830:	20000be8 	.word	0x20000be8
 800f834:	20007ab0 	.word	0x20007ab0
 800f838:	20007ab8 	.word	0x20007ab8
 800f83c:	20007ac0 	.word	0x20007ac0
 800f840:	20007abc 	.word	0x20007abc
 800f844:	20007acc 	.word	0x20007acc

0800f848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f848:	b480      	push	{r7}
 800f84a:	b085      	sub	sp, #20
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f850:	4b28      	ldr	r3, [pc, #160]	; (800f8f4 <prvInsertBlockIntoFreeList+0xac>)
 800f852:	60fb      	str	r3, [r7, #12]
 800f854:	e002      	b.n	800f85c <prvInsertBlockIntoFreeList+0x14>
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	60fb      	str	r3, [r7, #12]
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	687a      	ldr	r2, [r7, #4]
 800f862:	429a      	cmp	r2, r3
 800f864:	d8f7      	bhi.n	800f856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	685b      	ldr	r3, [r3, #4]
 800f86e:	68ba      	ldr	r2, [r7, #8]
 800f870:	4413      	add	r3, r2
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	429a      	cmp	r2, r3
 800f876:	d108      	bne.n	800f88a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	685a      	ldr	r2, [r3, #4]
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	685b      	ldr	r3, [r3, #4]
 800f880:	441a      	add	r2, r3
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	68ba      	ldr	r2, [r7, #8]
 800f894:	441a      	add	r2, r3
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	429a      	cmp	r2, r3
 800f89c:	d118      	bne.n	800f8d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	4b15      	ldr	r3, [pc, #84]	; (800f8f8 <prvInsertBlockIntoFreeList+0xb0>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d00d      	beq.n	800f8c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	685a      	ldr	r2, [r3, #4]
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	685b      	ldr	r3, [r3, #4]
 800f8b4:	441a      	add	r2, r3
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	681a      	ldr	r2, [r3, #0]
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	601a      	str	r2, [r3, #0]
 800f8c4:	e008      	b.n	800f8d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f8c6:	4b0c      	ldr	r3, [pc, #48]	; (800f8f8 <prvInsertBlockIntoFreeList+0xb0>)
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	601a      	str	r2, [r3, #0]
 800f8ce:	e003      	b.n	800f8d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f8d8:	68fa      	ldr	r2, [r7, #12]
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d002      	beq.n	800f8e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	687a      	ldr	r2, [r7, #4]
 800f8e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8e6:	bf00      	nop
 800f8e8:	3714      	adds	r7, #20
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr
 800f8f2:	bf00      	nop
 800f8f4:	20007ab0 	.word	0x20007ab0
 800f8f8:	20007ab8 	.word	0x20007ab8

0800f8fc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800f900:	f006 fe5a 	bl	80165b8 <touchgfx_init>
}
 800f904:	bf00      	nop
 800f906:	bd80      	pop	{r7, pc}

0800f908 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800f910:	f006 fe7c 	bl	801660c <touchgfx_taskEntry>
}
 800f914:	bf00      	nop
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800f91c:	b480      	push	{r7}
 800f91e:	b083      	sub	sp, #12
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
    {
 800f924:	4a04      	ldr	r2, [pc, #16]	; (800f938 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	601a      	str	r2, [r3, #0]
    }
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4618      	mov	r0, r3
 800f92e:	370c      	adds	r7, #12
 800f930:	46bd      	mov	sp, r7
 800f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f936:	4770      	bx	lr
 800f938:	0802fe44 	.word	0x0802fe44

0800f93c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b082      	sub	sp, #8
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
    }
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f7ff ffe9 	bl	800f91c <_ZN8touchgfx12FontProviderD1Ev>
 800f94a:	2104      	movs	r1, #4
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f01d fc98 	bl	802d282 <_ZdlPvj>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	4618      	mov	r0, r3
 800f956:	3708      	adds	r7, #8
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	460b      	mov	r3, r1
 800f966:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f968:	887b      	ldrh	r3, [r7, #2]
 800f96a:	2b02      	cmp	r3, #2
 800f96c:	d010      	beq.n	800f990 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800f96e:	2b02      	cmp	r3, #2
 800f970:	dc13      	bgt.n	800f99a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800f972:	2b00      	cmp	r3, #0
 800f974:	d002      	beq.n	800f97c <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800f976:	2b01      	cmp	r3, #1
 800f978:	d005      	beq.n	800f986 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800f97a:	e00e      	b.n	800f99a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::SENSOR_VALUES:
        // bahnschrift_100_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f97c:	f004 fdf2 	bl	8014564 <_ZN17TypedTextDatabase8getFontsEv>
 800f980:	4603      	mov	r3, r0
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	e00a      	b.n	800f99c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SENSOR_LABEL:
        // bahnschrift_25_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f986:	f004 fded 	bl	8014564 <_ZN17TypedTextDatabase8getFontsEv>
 800f98a:	4603      	mov	r3, r0
 800f98c:	685b      	ldr	r3, [r3, #4]
 800f98e:	e005      	b.n	800f99c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SENSOR_UNIT:
        // bahnschrift_25_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f990:	f004 fde8 	bl	8014564 <_ZN17TypedTextDatabase8getFontsEv>
 800f994:	4603      	mov	r3, r0
 800f996:	685b      	ldr	r3, [r3, #4]
 800f998:	e000      	b.n	800f99c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800f99a:	2300      	movs	r3, #0
    }
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	3708      	adds	r7, #8
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SENSOR_LABEL = 1;  // bahnschrift_25_2bpp
    static const touchgfx::FontId SENSOR_UNIT = 1;   // bahnschrift_25_2bpp
    static const uint16_t NUMBER_OF_FONTS = 2;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b082      	sub	sp, #8
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	4a05      	ldr	r2, [pc, #20]	; (800f9c4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	601a      	str	r2, [r3, #0]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7ff ffb1 	bl	800f91c <_ZN8touchgfx12FontProviderD1Ev>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3708      	adds	r7, #8
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	0802fe30 	.word	0x0802fe30

0800f9c8 <_ZN23ApplicationFontProviderD0Ev>:
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b082      	sub	sp, #8
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f7ff ffe7 	bl	800f9a4 <_ZN23ApplicationFontProviderD1Ev>
 800f9d6:	2104      	movs	r1, #4
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f01d fc52 	bl	802d282 <_ZdlPvj>
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800f9e8:	b480      	push	{r7}
 800f9ea:	b083      	sub	sp, #12
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
    {
 800f9f0:	4a04      	ldr	r2, [pc, #16]	; (800fa04 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	601a      	str	r2, [r3, #0]
    }
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	370c      	adds	r7, #12
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa02:	4770      	bx	lr
 800fa04:	08030208 	.word	0x08030208

0800fa08 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
    }
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f7ff ffe9 	bl	800f9e8 <_ZN8touchgfx4FontD1Ev>
 800fa16:	2110      	movs	r1, #16
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f01d fc32 	bl	802d282 <_ZdlPvj>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	4618      	mov	r0, r3
 800fa22:	3708      	adds	r7, #8
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800fa28:	b590      	push	{r4, r7, lr}
 800fa2a:	b087      	sub	sp, #28
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	460b      	mov	r3, r1
 800fa32:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800fa34:	887b      	ldrh	r3, [r7, #2]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d101      	bne.n	800fa3e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	e010      	b.n	800fa60 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800fa42:	2300      	movs	r3, #0
 800fa44:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	3308      	adds	r3, #8
 800fa4c:	681c      	ldr	r4, [r3, #0]
 800fa4e:	f107 030f 	add.w	r3, r7, #15
 800fa52:	f107 0210 	add.w	r2, r7, #16
 800fa56:	8879      	ldrh	r1, [r7, #2]
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	47a0      	blx	r4
 800fa5c:	6178      	str	r0, [r7, #20]
        return glyph;
 800fa5e:	697b      	ldr	r3, [r7, #20]
    }
 800fa60:	4618      	mov	r0, r3
 800fa62:	371c      	adds	r7, #28
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd90      	pop	{r4, r7, pc}

0800fa68 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800fa68:	b480      	push	{r7}
 800fa6a:	b083      	sub	sp, #12
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	895b      	ldrh	r3, [r3, #10]
    }
 800fa74:	4618      	mov	r0, r3
 800fa76:	370c      	adds	r7, #12
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr

0800fa80 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	899b      	ldrh	r3, [r3, #12]
    }
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800fa98:	b480      	push	{r7}
 800fa9a:	b083      	sub	sp, #12
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	889b      	ldrh	r3, [r3, #4]
    }
 800faa4:	4618      	mov	r0, r3
 800faa6:	370c      	adds	r7, #12
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr

0800fab0 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800fab0:	b480      	push	{r7}
 800fab2:	b083      	sub	sp, #12
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	889a      	ldrh	r2, [r3, #4]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	799b      	ldrb	r3, [r3, #6]
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	4413      	add	r3, r2
 800fac4:	b29b      	uxth	r3, r3
    }
 800fac6:	4618      	mov	r0, r3
 800fac8:	370c      	adds	r7, #12
 800faca:	46bd      	mov	sp, r7
 800facc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad0:	4770      	bx	lr

0800fad2 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800fad2:	b480      	push	{r7}
 800fad4:	b083      	sub	sp, #12
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	79db      	ldrb	r3, [r3, #7]
 800fade:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800fae2:	b2db      	uxtb	r3, r3
    }
 800fae4:	4618      	mov	r0, r3
 800fae6:	370c      	adds	r7, #12
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr

0800faf0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800faf0:	b480      	push	{r7}
 800faf2:	b083      	sub	sp, #12
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	79db      	ldrb	r3, [r3, #7]
 800fafc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fb00:	b2db      	uxtb	r3, r3
    }
 800fb02:	4618      	mov	r0, r3
 800fb04:	370c      	adds	r7, #12
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr
	...

0800fb10 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	4a05      	ldr	r2, [pc, #20]	; (800fb30 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	601a      	str	r2, [r3, #0]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7ff ff61 	bl	800f9e8 <_ZN8touchgfx4FontD1Ev>
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3708      	adds	r7, #8
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}
 800fb30:	08031fc8 	.word	0x08031fc8

0800fb34 <_ZN8touchgfx9ConstFontD0Ev>:
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f7ff ffe7 	bl	800fb10 <_ZN8touchgfx9ConstFontD1Ev>
 800fb42:	2118      	movs	r1, #24
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f01d fb9c 	bl	802d282 <_ZdlPvj>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3708      	adds	r7, #8
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}

0800fb54 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	4a05      	ldr	r2, [pc, #20]	; (800fb74 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	601a      	str	r2, [r3, #0]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7ff ffd3 	bl	800fb10 <_ZN8touchgfx9ConstFontD1Ev>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3708      	adds	r7, #8
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	0802fe68 	.word	0x0802fe68

0800fb78 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f7ff ffe7 	bl	800fb54 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fb86:	2128      	movs	r1, #40	; 0x28
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f01d fb7a 	bl	802d282 <_ZdlPvj>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	4618      	mov	r0, r3
 800fb92:	3708      	adds	r7, #8
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800fb98:	b480      	push	{r7}
 800fb9a:	b083      	sub	sp, #12
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
    {
 800fba0:	4a04      	ldr	r2, [pc, #16]	; (800fbb4 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	601a      	str	r2, [r3, #0]
    }
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	4618      	mov	r0, r3
 800fbaa:	370c      	adds	r7, #12
 800fbac:	46bd      	mov	sp, r7
 800fbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb2:	4770      	bx	lr
 800fbb4:	0802fe58 	.word	0x0802fe58

0800fbb8 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
    }
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f7ff ffe9 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
 800fbc6:	2108      	movs	r1, #8
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f01d fb5a 	bl	802d282 <_ZdlPvj>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3708      	adds	r7, #8
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800fbd8:	b480      	push	{r7}
 800fbda:	b083      	sub	sp, #12
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6a1b      	ldr	r3, [r3, #32]
    }
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	370c      	adds	r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800fbf0:	b480      	push	{r7}
 800fbf2:	b083      	sub	sp, #12
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	370c      	adds	r7, #12
 800fc00:	46bd      	mov	sp, r7
 800fc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc06:	4770      	bx	lr

0800fc08 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b08c      	sub	sp, #48	; 0x30
 800fc0c:	af08      	add	r7, sp, #32
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	60b9      	str	r1, [r7, #8]
 800fc12:	4611      	mov	r1, r2
 800fc14:	461a      	mov	r2, r3
 800fc16:	460b      	mov	r3, r1
 800fc18:	80fb      	strh	r3, [r7, #6]
 800fc1a:	4613      	mov	r3, r2
 800fc1c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800fc1e:	68f8      	ldr	r0, [r7, #12]
 800fc20:	88b9      	ldrh	r1, [r7, #4]
 800fc22:	88fa      	ldrh	r2, [r7, #6]
 800fc24:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fc26:	9306      	str	r3, [sp, #24]
 800fc28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fc2a:	9305      	str	r3, [sp, #20]
 800fc2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fc30:	9304      	str	r3, [sp, #16]
 800fc32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fc36:	9303      	str	r3, [sp, #12]
 800fc38:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc3c:	9302      	str	r3, [sp, #8]
 800fc3e:	7f3b      	ldrb	r3, [r7, #28]
 800fc40:	9301      	str	r3, [sp, #4]
 800fc42:	7e3b      	ldrb	r3, [r7, #24]
 800fc44:	9300      	str	r3, [sp, #0]
 800fc46:	460b      	mov	r3, r1
 800fc48:	68b9      	ldr	r1, [r7, #8]
 800fc4a:	f00d fa8f 	bl	801d16c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800fc4e:	4a0a      	ldr	r2, [pc, #40]	; (800fc78 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	601a      	str	r2, [r3, #0]
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc58:	619a      	str	r2, [r3, #24]
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc5e:	61da      	str	r2, [r3, #28]
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fc64:	621a      	str	r2, [r3, #32]
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fc6a:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3710      	adds	r7, #16
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop
 800fc78:	0802fe68 	.word	0x0802fe68

0800fc7c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b085      	sub	sp, #20
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	699b      	ldr	r3, [r3, #24]
 800fc8a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	889b      	ldrh	r3, [r3, #4]
 800fc90:	0adb      	lsrs	r3, r3, #11
 800fc92:	b29b      	uxth	r3, r3
 800fc94:	009b      	lsls	r3, r3, #2
 800fc96:	68fa      	ldr	r2, [r7, #12]
 800fc98:	4413      	add	r3, r2
 800fc9a:	681a      	ldr	r2, [r3, #0]
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	4413      	add	r3, r2
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3714      	adds	r7, #20
 800fca6:	46bd      	mov	sp, r7
 800fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcac:	4770      	bx	lr

0800fcae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800fcae:	b480      	push	{r7}
 800fcb0:	b089      	sub	sp, #36	; 0x24
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	60f8      	str	r0, [r7, #12]
 800fcb6:	460b      	mov	r3, r1
 800fcb8:	607a      	str	r2, [r7, #4]
 800fcba:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d003      	beq.n	800fcca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	7b1b      	ldrb	r3, [r3, #12]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d101      	bne.n	800fcce <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800fcca:	2300      	movs	r3, #0
 800fccc:	e030      	b.n	800fd30 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	69da      	ldr	r2, [r3, #28]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	7b5b      	ldrb	r3, [r3, #13]
 800fcda:	021b      	lsls	r3, r3, #8
 800fcdc:	b21b      	sxth	r3, r3
 800fcde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fce2:	b219      	sxth	r1, r3
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	7adb      	ldrb	r3, [r3, #11]
 800fce8:	b21b      	sxth	r3, r3
 800fcea:	430b      	orrs	r3, r1
 800fcec:	b21b      	sxth	r3, r3
 800fcee:	b29b      	uxth	r3, r3
 800fcf0:	009b      	lsls	r3, r3, #2
 800fcf2:	4413      	add	r3, r2
 800fcf4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	7b1b      	ldrb	r3, [r3, #12]
 800fcfa:	837b      	strh	r3, [r7, #26]
 800fcfc:	8b7b      	ldrh	r3, [r7, #26]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d015      	beq.n	800fd2e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800fd02:	69fb      	ldr	r3, [r7, #28]
 800fd04:	881b      	ldrh	r3, [r3, #0]
 800fd06:	897a      	ldrh	r2, [r7, #10]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d103      	bne.n	800fd14 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800fd0c:	69fb      	ldr	r3, [r7, #28]
 800fd0e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800fd12:	e00d      	b.n	800fd30 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800fd14:	69fb      	ldr	r3, [r7, #28]
 800fd16:	881b      	ldrh	r3, [r3, #0]
 800fd18:	897a      	ldrh	r2, [r7, #10]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d306      	bcc.n	800fd2c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800fd1e:	8b7b      	ldrh	r3, [r7, #26]
 800fd20:	3b01      	subs	r3, #1
 800fd22:	837b      	strh	r3, [r7, #26]
 800fd24:	69fb      	ldr	r3, [r7, #28]
 800fd26:	3304      	adds	r3, #4
 800fd28:	61fb      	str	r3, [r7, #28]
 800fd2a:	e7e7      	b.n	800fcfc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800fd2c:	bf00      	nop
        }
    }
    return 0;
 800fd2e:	2300      	movs	r3, #0
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3724      	adds	r7, #36	; 0x24
 800fd34:	46bd      	mov	sp, r7
 800fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3a:	4770      	bx	lr

0800fd3c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_bahnschrift_100_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_bahnschrift_100_2bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_100_2bpp()
{
    static touchgfx::GeneratedFont bahnschrift_100_2bpp(glyphs_bahnschrift_100_2bpp, 70, 100, 22, 2, 0, 2, 2, unicodes_bahnschrift_100_2bpp, kerning_bahnschrift_100_2bpp, 0, 0, 0, 0);
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	4801      	ldr	r0, [pc, #4]	; (800fd48 <__tcf_0+0xc>)
 800fd42:	f7ff ff07 	bl	800fb54 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	20007ad0 	.word	0x20007ad0

0800fd4c <_Z28getFont_bahnschrift_100_2bppv>:
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b08c      	sub	sp, #48	; 0x30
 800fd50:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_100_2bpp(glyphs_bahnschrift_100_2bpp, 70, 100, 22, 2, 0, 2, 2, unicodes_bahnschrift_100_2bpp, kerning_bahnschrift_100_2bpp, 0, 0, 0, 0);
 800fd52:	4b1f      	ldr	r3, [pc, #124]	; (800fdd0 <_Z28getFont_bahnschrift_100_2bppv+0x84>)
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	f3bf 8f5b 	dmb	ish
 800fd5a:	b2db      	uxtb	r3, r3
 800fd5c:	f003 0301 	and.w	r3, r3, #1
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	bf0c      	ite	eq
 800fd64:	2301      	moveq	r3, #1
 800fd66:	2300      	movne	r3, #0
 800fd68:	b2db      	uxtb	r3, r3
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d02c      	beq.n	800fdc8 <_Z28getFont_bahnschrift_100_2bppv+0x7c>
 800fd6e:	4818      	ldr	r0, [pc, #96]	; (800fdd0 <_Z28getFont_bahnschrift_100_2bppv+0x84>)
 800fd70:	f01d fa89 	bl	802d286 <__cxa_guard_acquire>
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	bf14      	ite	ne
 800fd7a:	2301      	movne	r3, #1
 800fd7c:	2300      	moveq	r3, #0
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d021      	beq.n	800fdc8 <_Z28getFont_bahnschrift_100_2bppv+0x7c>
 800fd84:	2300      	movs	r3, #0
 800fd86:	930a      	str	r3, [sp, #40]	; 0x28
 800fd88:	2300      	movs	r3, #0
 800fd8a:	9309      	str	r3, [sp, #36]	; 0x24
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	9308      	str	r3, [sp, #32]
 800fd90:	2300      	movs	r3, #0
 800fd92:	9307      	str	r3, [sp, #28]
 800fd94:	4b0f      	ldr	r3, [pc, #60]	; (800fdd4 <_Z28getFont_bahnschrift_100_2bppv+0x88>)
 800fd96:	9306      	str	r3, [sp, #24]
 800fd98:	4b0f      	ldr	r3, [pc, #60]	; (800fdd8 <_Z28getFont_bahnschrift_100_2bppv+0x8c>)
 800fd9a:	9305      	str	r3, [sp, #20]
 800fd9c:	2302      	movs	r3, #2
 800fd9e:	9304      	str	r3, [sp, #16]
 800fda0:	2302      	movs	r3, #2
 800fda2:	9303      	str	r3, [sp, #12]
 800fda4:	2300      	movs	r3, #0
 800fda6:	9302      	str	r3, [sp, #8]
 800fda8:	2302      	movs	r3, #2
 800fdaa:	9301      	str	r3, [sp, #4]
 800fdac:	2316      	movs	r3, #22
 800fdae:	9300      	str	r3, [sp, #0]
 800fdb0:	2364      	movs	r3, #100	; 0x64
 800fdb2:	2246      	movs	r2, #70	; 0x46
 800fdb4:	4909      	ldr	r1, [pc, #36]	; (800fddc <_Z28getFont_bahnschrift_100_2bppv+0x90>)
 800fdb6:	480a      	ldr	r0, [pc, #40]	; (800fde0 <_Z28getFont_bahnschrift_100_2bppv+0x94>)
 800fdb8:	f7ff ff26 	bl	800fc08 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800fdbc:	4804      	ldr	r0, [pc, #16]	; (800fdd0 <_Z28getFont_bahnschrift_100_2bppv+0x84>)
 800fdbe:	f01d fa6e 	bl	802d29e <__cxa_guard_release>
 800fdc2:	4808      	ldr	r0, [pc, #32]	; (800fde4 <_Z28getFont_bahnschrift_100_2bppv+0x98>)
 800fdc4:	f01e f89a 	bl	802defc <atexit>
    return bahnschrift_100_2bpp;
 800fdc8:	4b05      	ldr	r3, [pc, #20]	; (800fde0 <_Z28getFont_bahnschrift_100_2bppv+0x94>)
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	20007af8 	.word	0x20007af8
 800fdd4:	0804139c 	.word	0x0804139c
 800fdd8:	080413a4 	.word	0x080413a4
 800fddc:	08040bf4 	.word	0x08040bf4
 800fde0:	20007ad0 	.word	0x20007ad0
 800fde4:	0800fd3d 	.word	0x0800fd3d

0800fde8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_bahnschrift_25_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_bahnschrift_25_2bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_25_2bpp()
{
    static touchgfx::GeneratedFont bahnschrift_25_2bpp(glyphs_bahnschrift_25_2bpp, 70, 25, 5, 2, 0, 1, 1, unicodes_bahnschrift_25_2bpp, kerning_bahnschrift_25_2bpp, 0, 0, 0, 0);
 800fde8:	b580      	push	{r7, lr}
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	4801      	ldr	r0, [pc, #4]	; (800fdf4 <__tcf_0+0xc>)
 800fdee:	f7ff feb1 	bl	800fb54 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	20007afc 	.word	0x20007afc

0800fdf8 <_Z27getFont_bahnschrift_25_2bppv>:
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b08c      	sub	sp, #48	; 0x30
 800fdfc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_25_2bpp(glyphs_bahnschrift_25_2bpp, 70, 25, 5, 2, 0, 1, 1, unicodes_bahnschrift_25_2bpp, kerning_bahnschrift_25_2bpp, 0, 0, 0, 0);
 800fdfe:	4b1f      	ldr	r3, [pc, #124]	; (800fe7c <_Z27getFont_bahnschrift_25_2bppv+0x84>)
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	f3bf 8f5b 	dmb	ish
 800fe06:	b2db      	uxtb	r3, r3
 800fe08:	f003 0301 	and.w	r3, r3, #1
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	bf0c      	ite	eq
 800fe10:	2301      	moveq	r3, #1
 800fe12:	2300      	movne	r3, #0
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d02c      	beq.n	800fe74 <_Z27getFont_bahnschrift_25_2bppv+0x7c>
 800fe1a:	4818      	ldr	r0, [pc, #96]	; (800fe7c <_Z27getFont_bahnschrift_25_2bppv+0x84>)
 800fe1c:	f01d fa33 	bl	802d286 <__cxa_guard_acquire>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	bf14      	ite	ne
 800fe26:	2301      	movne	r3, #1
 800fe28:	2300      	moveq	r3, #0
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d021      	beq.n	800fe74 <_Z27getFont_bahnschrift_25_2bppv+0x7c>
 800fe30:	2300      	movs	r3, #0
 800fe32:	930a      	str	r3, [sp, #40]	; 0x28
 800fe34:	2300      	movs	r3, #0
 800fe36:	9309      	str	r3, [sp, #36]	; 0x24
 800fe38:	2300      	movs	r3, #0
 800fe3a:	9308      	str	r3, [sp, #32]
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	9307      	str	r3, [sp, #28]
 800fe40:	4b0f      	ldr	r3, [pc, #60]	; (800fe80 <_Z27getFont_bahnschrift_25_2bppv+0x88>)
 800fe42:	9306      	str	r3, [sp, #24]
 800fe44:	4b0f      	ldr	r3, [pc, #60]	; (800fe84 <_Z27getFont_bahnschrift_25_2bppv+0x8c>)
 800fe46:	9305      	str	r3, [sp, #20]
 800fe48:	2301      	movs	r3, #1
 800fe4a:	9304      	str	r3, [sp, #16]
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	9303      	str	r3, [sp, #12]
 800fe50:	2300      	movs	r3, #0
 800fe52:	9302      	str	r3, [sp, #8]
 800fe54:	2302      	movs	r3, #2
 800fe56:	9301      	str	r3, [sp, #4]
 800fe58:	2305      	movs	r3, #5
 800fe5a:	9300      	str	r3, [sp, #0]
 800fe5c:	2319      	movs	r3, #25
 800fe5e:	2246      	movs	r2, #70	; 0x46
 800fe60:	4909      	ldr	r1, [pc, #36]	; (800fe88 <_Z27getFont_bahnschrift_25_2bppv+0x90>)
 800fe62:	480a      	ldr	r0, [pc, #40]	; (800fe8c <_Z27getFont_bahnschrift_25_2bppv+0x94>)
 800fe64:	f7ff fed0 	bl	800fc08 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800fe68:	4804      	ldr	r0, [pc, #16]	; (800fe7c <_Z27getFont_bahnschrift_25_2bppv+0x84>)
 800fe6a:	f01d fa18 	bl	802d29e <__cxa_guard_release>
 800fe6e:	4808      	ldr	r0, [pc, #32]	; (800fe90 <_Z27getFont_bahnschrift_25_2bppv+0x98>)
 800fe70:	f01e f844 	bl	802defc <atexit>
    return bahnschrift_25_2bpp;
 800fe74:	4b05      	ldr	r3, [pc, #20]	; (800fe8c <_Z27getFont_bahnschrift_25_2bppv+0x94>)
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	20007b24 	.word	0x20007b24
 800fe80:	080413a0 	.word	0x080413a0
 800fe84:	080413a8 	.word	0x080413a8
 800fe88:	08040fc8 	.word	0x08040fc8
 800fe8c:	20007afc 	.word	0x20007afc
 800fe90:	0800fde9 	.word	0x0800fde9

0800fe94 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	4618      	mov	r0, r3
 800fea2:	370c      	adds	r7, #12
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	4770      	bx	lr

0800feac <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800feac:	b480      	push	{r7}
 800feae:	b083      	sub	sp, #12
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	6039      	str	r1, [r7, #0]
    {
    }
 800feb6:	bf00      	nop
 800feb8:	370c      	adds	r7, #12
 800feba:	46bd      	mov	sp, r7
 800febc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec0:	4770      	bx	lr

0800fec2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800fec2:	b480      	push	{r7}
 800fec4:	b083      	sub	sp, #12
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	6078      	str	r0, [r7, #4]
 800feca:	6039      	str	r1, [r7, #0]
    {
    }
 800fecc:	bf00      	nop
 800fece:	370c      	adds	r7, #12
 800fed0:	46bd      	mov	sp, r7
 800fed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed6:	4770      	bx	lr

0800fed8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
    {
    }
 800fee2:	bf00      	nop
 800fee4:	370c      	adds	r7, #12
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr

0800feee <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800feee:	b480      	push	{r7}
 800fef0:	b083      	sub	sp, #12
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	6078      	str	r0, [r7, #4]
 800fef6:	460b      	mov	r3, r1
 800fef8:	70fb      	strb	r3, [r7, #3]
    {
    }
 800fefa:	bf00      	nop
 800fefc:	370c      	adds	r7, #12
 800fefe:	46bd      	mov	sp, r7
 800ff00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff04:	4770      	bx	lr

0800ff06 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800ff06:	b480      	push	{r7}
 800ff08:	b083      	sub	sp, #12
 800ff0a:	af00      	add	r7, sp, #0
 800ff0c:	6078      	str	r0, [r7, #4]
    {
    }
 800ff0e:	bf00      	nop
 800ff10:	370c      	adds	r7, #12
 800ff12:	46bd      	mov	sp, r7
 800ff14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff18:	4770      	bx	lr

0800ff1a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800ff1a:	b480      	push	{r7}
 800ff1c:	b083      	sub	sp, #12
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	6078      	str	r0, [r7, #4]
    {
    }
 800ff22:	bf00      	nop
 800ff24:	370c      	adds	r7, #12
 800ff26:	46bd      	mov	sp, r7
 800ff28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2c:	4770      	bx	lr
	...

0800ff30 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800ff30:	b480      	push	{r7}
 800ff32:	b083      	sub	sp, #12
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
    {
 800ff38:	4a04      	ldr	r2, [pc, #16]	; (800ff4c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	601a      	str	r2, [r3, #0]
    }
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	4618      	mov	r0, r3
 800ff42:	370c      	adds	r7, #12
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr
 800ff4c:	0802ffc0 	.word	0x0802ffc0

0800ff50 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
    }
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f7ff ffe9 	bl	800ff30 <_ZN8touchgfx15UIEventListenerD1Ev>
 800ff5e:	2104      	movs	r1, #4
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f01d f98e 	bl	802d282 <_ZdlPvj>
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3708      	adds	r7, #8
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800ff70:	b480      	push	{r7}
 800ff72:	b083      	sub	sp, #12
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	460b      	mov	r3, r1
 800ff7a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800ff7c:	bf00      	nop
 800ff7e:	370c      	adds	r7, #12
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr

0800ff88 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800ff88:	b480      	push	{r7}
 800ff8a:	b083      	sub	sp, #12
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
 800ff90:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	683a      	ldr	r2, [r7, #0]
 800ff96:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800ff9a:	6810      	ldr	r0, [r2, #0]
 800ff9c:	6851      	ldr	r1, [r2, #4]
 800ff9e:	c303      	stmia	r3!, {r0, r1}
    }
 800ffa0:	bf00      	nop
 800ffa2:	370c      	adds	r7, #12
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr

0800ffac <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800ffac:	b480      	push	{r7}
 800ffae:	b083      	sub	sp, #12
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
    {
 800ffb4:	4a04      	ldr	r2, [pc, #16]	; (800ffc8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	601a      	str	r2, [r3, #0]
    }
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	370c      	adds	r7, #12
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr
 800ffc8:	0802ffa8 	.word	0x0802ffa8

0800ffcc <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b082      	sub	sp, #8
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
    }
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f7ff ffe9 	bl	800ffac <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ffda:	2104      	movs	r1, #4
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f01d f950 	bl	802d282 <_ZdlPvj>
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3708      	adds	r7, #8
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}

0800ffec <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800ffec:	b480      	push	{r7}
 800ffee:	af00      	add	r7, sp, #0
    {
        return instance;
 800fff0:	4b03      	ldr	r3, [pc, #12]	; (8010000 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800fff2:	681b      	ldr	r3, [r3, #0]
    }
 800fff4:	4618      	mov	r0, r3
 800fff6:	46bd      	mov	sp, r7
 800fff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffc:	4770      	bx	lr
 800fffe:	bf00      	nop
 8010000:	2000977c 	.word	0x2000977c

08010004 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8010004:	b480      	push	{r7}
 8010006:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8010008:	4b0b      	ldr	r3, [pc, #44]	; (8010038 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8010010:	2b00      	cmp	r3, #0
 8010012:	d008      	beq.n	8010026 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8010014:	4b08      	ldr	r3, [pc, #32]	; (8010038 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801001a:	2b00      	cmp	r3, #0
 801001c:	d003      	beq.n	8010026 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 801001e:	4b06      	ldr	r3, [pc, #24]	; (8010038 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010024:	e002      	b.n	801002c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 8010026:	4b04      	ldr	r3, [pc, #16]	; (8010038 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	689b      	ldr	r3, [r3, #8]
    }
 801002c:	4618      	mov	r0, r3
 801002e:	46bd      	mov	sp, r7
 8010030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010034:	4770      	bx	lr
 8010036:	bf00      	nop
 8010038:	2000977c 	.word	0x2000977c

0801003c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 801003c:	b480      	push	{r7}
 801003e:	b083      	sub	sp, #12
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8010044:	4a07      	ldr	r2, [pc, #28]	; (8010064 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	601a      	str	r2, [r3, #0]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2200      	movs	r2, #0
 801004e:	605a      	str	r2, [r3, #4]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2200      	movs	r2, #0
 8010054:	721a      	strb	r2, [r3, #8]
    {
    }
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4618      	mov	r0, r3
 801005a:	370c      	adds	r7, #12
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr
 8010064:	0802ff84 	.word	0x0802ff84

08010068 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8010068:	b480      	push	{r7}
 801006a:	b083      	sub	sp, #12
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
    {
 8010070:	4a04      	ldr	r2, [pc, #16]	; (8010084 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	601a      	str	r2, [r3, #0]
    }
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	4618      	mov	r0, r3
 801007a:	370c      	adds	r7, #12
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr
 8010084:	0802ff84 	.word	0x0802ff84

08010088 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
    }
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f7ff ffe9 	bl	8010068 <_ZN8touchgfx10TransitionD1Ev>
 8010096:	210c      	movs	r1, #12
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f01d f8f2 	bl	802d282 <_ZdlPvj>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	4618      	mov	r0, r3
 80100a2:	3708      	adds	r7, #8
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80100a8:	b480      	push	{r7}
 80100aa:	b083      	sub	sp, #12
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
    {
    }
 80100b0:	bf00      	nop
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr

080100bc <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80100bc:	b480      	push	{r7}
 80100be:	b083      	sub	sp, #12
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
    {
    }
 80100c4:	bf00      	nop
 80100c6:	370c      	adds	r7, #12
 80100c8:	46bd      	mov	sp, r7
 80100ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ce:	4770      	bx	lr

080100d0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80100d0:	b480      	push	{r7}
 80100d2:	b083      	sub	sp, #12
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
    {
    }
 80100d8:	bf00      	nop
 80100da:	370c      	adds	r7, #12
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr

080100e4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b082      	sub	sp, #8
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 80100ec:	f00b ffca 	bl	801c084 <_ZN8touchgfx11Application11getInstanceEv>
 80100f0:	4603      	mov	r3, r0
 80100f2:	681a      	ldr	r2, [r3, #0]
 80100f4:	3230      	adds	r2, #48	; 0x30
 80100f6:	6812      	ldr	r2, [r2, #0]
 80100f8:	4618      	mov	r0, r3
 80100fa:	4790      	blx	r2
    }
 80100fc:	bf00      	nop
 80100fe:	3708      	adds	r7, #8
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8010104:	b480      	push	{r7}
 8010106:	b083      	sub	sp, #12
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	683a      	ldr	r2, [r7, #0]
 8010112:	605a      	str	r2, [r3, #4]
    }
 8010114:	bf00      	nop
 8010116:	370c      	adds	r7, #12
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr

08010120 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	4a05      	ldr	r2, [pc, #20]	; (8010140 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	601a      	str	r2, [r3, #0]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	4618      	mov	r0, r3
 8010132:	f7ff fefd 	bl	800ff30 <_ZN8touchgfx15UIEventListenerD1Ev>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	4618      	mov	r0, r3
 801013a:	3708      	adds	r7, #8
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}
 8010140:	08031d04 	.word	0x08031d04

08010144 <_ZN8touchgfx11ApplicationD0Ev>:
 8010144:	b580      	push	{r7, lr}
 8010146:	b082      	sub	sp, #8
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f7ff ffe7 	bl	8010120 <_ZN8touchgfx11ApplicationD1Ev>
 8010152:	f44f 719c 	mov.w	r1, #312	; 0x138
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f01d f893 	bl	802d282 <_ZdlPvj>
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	4618      	mov	r0, r3
 8010160:	3708      	adds	r7, #8
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}
	...

08010168 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8010168:	b580      	push	{r7, lr}
 801016a:	b082      	sub	sp, #8
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	4618      	mov	r0, r3
 8010174:	f00b ffee 	bl	801c154 <_ZN8touchgfx11ApplicationC1Ev>
 8010178:	4a09      	ldr	r2, [pc, #36]	; (80101a0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	601a      	str	r2, [r3, #0]
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2200      	movs	r2, #0
 8010182:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2200      	movs	r2, #0
 801018a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	4a04      	ldr	r2, [pc, #16]	; (80101a4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8010192:	6013      	str	r3, [r2, #0]
    }
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	4618      	mov	r0, r3
 8010198:	3708      	adds	r7, #8
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
 801019e:	bf00      	nop
 80101a0:	0802ff40 	.word	0x0802ff40
 80101a4:	200097c8 	.word	0x200097c8

080101a8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b082      	sub	sp, #8
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f000 f804 	bl	80101be <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80101b6:	bf00      	nop
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}

080101be <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80101be:	b580      	push	{r7, lr}
 80101c0:	b082      	sub	sp, #8
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d00f      	beq.n	80101f0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	330c      	adds	r3, #12
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	4610      	mov	r0, r2
 80101e4:	4798      	blx	r3
 80101e6:	4603      	mov	r3, r0
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d001      	beq.n	80101f0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80101ec:	2301      	movs	r3, #1
 80101ee:	e000      	b.n	80101f2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 80101f0:	2300      	movs	r3, #0
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d00e      	beq.n	8010214 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	3308      	adds	r3, #8
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	4610      	mov	r0, r2
 801020a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2200      	movs	r2, #0
 8010210:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8010214:	bf00      	nop
 8010216:	3708      	adds	r7, #8
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 801021c:	b480      	push	{r7}
 801021e:	b083      	sub	sp, #12
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	683a      	ldr	r2, [r7, #0]
 801022a:	601a      	str	r2, [r3, #0]
    }
 801022c:	bf00      	nop
 801022e:	370c      	adds	r7, #12
 8010230:	46bd      	mov	sp, r7
 8010232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010236:	4770      	bx	lr

08010238 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	4a05      	ldr	r2, [pc, #20]	; (8010258 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	601a      	str	r2, [r3, #0]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	4618      	mov	r0, r3
 801024a:	f7ff ff69 	bl	8010120 <_ZN8touchgfx11ApplicationD1Ev>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	4618      	mov	r0, r3
 8010252:	3708      	adds	r7, #8
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}
 8010258:	0802ff40 	.word	0x0802ff40

0801025c <_ZN8touchgfx14MVPApplicationD0Ev>:
 801025c:	b580      	push	{r7, lr}
 801025e:	b082      	sub	sp, #8
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f7ff ffe7 	bl	8010238 <_ZN8touchgfx14MVPApplicationD1Ev>
 801026a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f01d f807 	bl	802d282 <_ZdlPvj>
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	4618      	mov	r0, r3
 8010278:	3708      	adds	r7, #8
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}
	...

08010280 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8010280:	b580      	push	{r7, lr}
 8010282:	b082      	sub	sp, #8
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	4a08      	ldr	r2, [pc, #32]	; (80102ac <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	601a      	str	r2, [r3, #0]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010294:	4618      	mov	r0, r3
 8010296:	f000 fabd 	bl	8010814 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	4618      	mov	r0, r3
 801029e:	f7ff ffcb 	bl	8010238 <_ZN8touchgfx14MVPApplicationD1Ev>
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	4618      	mov	r0, r3
 80102a6:	3708      	adds	r7, #8
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}
 80102ac:	0802fee4 	.word	0x0802fee4

080102b0 <_ZN23FrontendApplicationBaseD0Ev>:
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f7ff ffe1 	bl	8010280 <_ZN23FrontendApplicationBaseD1Ev>
 80102be:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f01c ffdd 	bl	802d282 <_ZdlPvj>
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	4618      	mov	r0, r3
 80102cc:	3708      	adds	r7, #8
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}

080102d2 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80102d2:	b480      	push	{r7}
 80102d4:	b083      	sub	sp, #12
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2201      	movs	r2, #1
 80102de:	721a      	strb	r2, [r3, #8]
    }
 80102e0:	bf00      	nop
 80102e2:	370c      	adds	r7, #12
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr

080102ec <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 80102ec:	b480      	push	{r7}
 80102ee:	b083      	sub	sp, #12
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	683a      	ldr	r2, [r7, #0]
 80102fa:	605a      	str	r2, [r3, #4]
    }
 80102fc:	bf00      	nop
 80102fe:	370c      	adds	r7, #12
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8010308:	b580      	push	{r7, lr}
 801030a:	b084      	sub	sp, #16
 801030c:	af00      	add	r7, sp, #0
 801030e:	60f8      	str	r0, [r7, #12]
 8010310:	60b9      	str	r1, [r7, #8]
 8010312:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	4618      	mov	r0, r3
 8010318:	f7ff ff26 	bl	8010168 <_ZN8touchgfx14MVPApplicationC1Ev>
 801031c:	4a13      	ldr	r2, [pc, #76]	; (801036c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	601a      	str	r2, [r3, #0]
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010328:	4618      	mov	r0, r3
 801032a:	f000 f89f 	bl	801046c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	687a      	ldr	r2, [r7, #4]
 8010332:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	68ba      	ldr	r2, [r7, #8]
 801033a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 801033e:	f7ff fe55 	bl	800ffec <_ZN8touchgfx3HAL11getInstanceEv>
 8010342:	4603      	mov	r3, r0
 8010344:	681a      	ldr	r2, [r3, #0]
 8010346:	3208      	adds	r2, #8
 8010348:	6812      	ldr	r2, [r2, #0]
 801034a:	2100      	movs	r1, #0
 801034c:	4618      	mov	r0, r3
 801034e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8010350:	2000      	movs	r0, #0
 8010352:	f004 f88f 	bl	8014474 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8010356:	f7ff fe55 	bl	8010004 <_ZN8touchgfx3HAL3lcdEv>
 801035a:	4603      	mov	r3, r0
 801035c:	4618      	mov	r0, r3
 801035e:	f014 f994 	bl	802468a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	4618      	mov	r0, r3
 8010366:	3710      	adds	r7, #16
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}
 801036c:	0802fee4 	.word	0x0802fee4

08010370 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8010370:	b480      	push	{r7}
 8010372:	b083      	sub	sp, #12
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
 8010378:	6039      	str	r1, [r7, #0]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	4618      	mov	r0, r3
 801037e:	370c      	adds	r7, #12
 8010380:	46bd      	mov	sp, r7
 8010382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010386:	4770      	bx	lr

08010388 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6039      	str	r1, [r7, #0]
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	683a      	ldr	r2, [r7, #0]
 8010396:	4611      	mov	r1, r2
 8010398:	4618      	mov	r0, r3
 801039a:	f7ff ffe9 	bl	8010370 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	685a      	ldr	r2, [r3, #4]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	605a      	str	r2, [r3, #4]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	683a      	ldr	r2, [r7, #0]
 80103aa:	3308      	adds	r3, #8
 80103ac:	3208      	adds	r2, #8
 80103ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80103b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4618      	mov	r0, r3
 80103ba:	3708      	adds	r7, #8
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 80103c0:	b590      	push	{r4, r7, lr}
 80103c2:	b089      	sub	sp, #36	; 0x24
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80103ce:	4b10      	ldr	r3, [pc, #64]	; (8010410 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 80103d0:	61bb      	str	r3, [r7, #24]
 80103d2:	2300      	movs	r3, #0
 80103d4:	61fb      	str	r3, [r7, #28]
 80103d6:	f107 0008 	add.w	r0, r7, #8
 80103da:	f107 0318 	add.w	r3, r7, #24
 80103de:	cb0c      	ldmia	r3, {r2, r3}
 80103e0:	6879      	ldr	r1, [r7, #4]
 80103e2:	f000 f85f 	bl	80104a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80103e6:	f107 0308 	add.w	r3, r7, #8
 80103ea:	4619      	mov	r1, r3
 80103ec:	4620      	mov	r0, r4
 80103ee:	f7ff ffcb 	bl	8010388 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80103f2:	f107 0308 	add.w	r3, r7, #8
 80103f6:	4618      	mov	r0, r3
 80103f8:	f000 fa0c 	bl	8010814 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8010408:	bf00      	nop
 801040a:	3724      	adds	r7, #36	; 0x24
 801040c:	46bd      	mov	sp, r7
 801040e:	bd90      	pop	{r4, r7, pc}
 8010410:	08010415 	.word	0x08010415

08010414 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b084      	sub	sp, #16
 8010418:	af02      	add	r7, sp, #8
 801041a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8010428:	461a      	mov	r2, r3
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8010430:	9300      	str	r3, [sp, #0]
 8010432:	4b04      	ldr	r3, [pc, #16]	; (8010444 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8010434:	4804      	ldr	r0, [pc, #16]	; (8010448 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8010436:	f000 f867 	bl	8010508 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801043a:	bf00      	nop
 801043c:	3708      	adds	r7, #8
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}
 8010442:	bf00      	nop
 8010444:	200097bc 	.word	0x200097bc
 8010448:	200097b8 	.word	0x200097b8

0801044c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 801044c:	b480      	push	{r7}
 801044e:	b083      	sub	sp, #12
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	4a04      	ldr	r2, [pc, #16]	; (8010468 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	601a      	str	r2, [r3, #0]
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	4618      	mov	r0, r3
 801045e:	370c      	adds	r7, #12
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr
 8010468:	0802ffa8 	.word	0x0802ffa8

0801046c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 801046c:	b580      	push	{r7, lr}
 801046e:	b082      	sub	sp, #8
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	4618      	mov	r0, r3
 8010478:	f7ff ffe8 	bl	801044c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801047c:	4a08      	ldr	r2, [pc, #32]	; (80104a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	601a      	str	r2, [r3, #0]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2200      	movs	r2, #0
 8010486:	605a      	str	r2, [r3, #4]
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2200      	movs	r2, #0
 801048c:	609a      	str	r2, [r3, #8]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2200      	movs	r2, #0
 8010492:	60da      	str	r2, [r3, #12]
    {
    }
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	4618      	mov	r0, r3
 8010498:	3708      	adds	r7, #8
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
 801049e:	bf00      	nop
 80104a0:	0802ff28 	.word	0x0802ff28

080104a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b084      	sub	sp, #16
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	4639      	mov	r1, r7
 80104b0:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	4618      	mov	r0, r3
 80104b8:	f7ff ffc8 	bl	801044c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80104bc:	4a08      	ldr	r2, [pc, #32]	; (80104e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	601a      	str	r2, [r3, #0]
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	68ba      	ldr	r2, [r7, #8]
 80104c6:	605a      	str	r2, [r3, #4]
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	3308      	adds	r3, #8
 80104cc:	463a      	mov	r2, r7
 80104ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80104d2:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	4618      	mov	r0, r3
 80104da:	3710      	adds	r7, #16
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}
 80104e0:	0802ff28 	.word	0x0802ff28

080104e4 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b082      	sub	sp, #8
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7ff fda4 	bl	801003c <_ZN8touchgfx10TransitionC1Ev>
 80104f4:	4a03      	ldr	r2, [pc, #12]	; (8010504 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	601a      	str	r2, [r3, #0]
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	4618      	mov	r0, r3
 80104fe:	3708      	adds	r7, #8
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}
 8010504:	0802fec0 	.word	0x0802fec0

08010508 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010508:	b590      	push	{r4, r7, lr}
 801050a:	b08f      	sub	sp, #60	; 0x3c
 801050c:	af00      	add	r7, sp, #0
 801050e:	60f8      	str	r0, [r7, #12]
 8010510:	60b9      	str	r1, [r7, #8]
 8010512:	607a      	str	r2, [r7, #4]
 8010514:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	689a      	ldr	r2, [r3, #8]
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	689b      	ldr	r3, [r3, #8]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	3320      	adds	r3, #32
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	4610      	mov	r0, r2
 8010526:	4798      	blx	r3
 8010528:	4603      	mov	r3, r0
 801052a:	f5b3 6f56 	cmp.w	r3, #3424	; 0xd60
 801052e:	d205      	bcs.n	801053c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8010530:	4b7e      	ldr	r3, [pc, #504]	; (801072c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8010532:	4a7f      	ldr	r2, [pc, #508]	; (8010730 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8010534:	21a3      	movs	r1, #163	; 0xa3
 8010536:	487f      	ldr	r0, [pc, #508]	; (8010734 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8010538:	f01d fcc2 	bl	802dec0 <__assert_func>
 801053c:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	685a      	ldr	r2, [r3, #4]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	3320      	adds	r3, #32
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	4610      	mov	r0, r2
 801054e:	4798      	blx	r3
 8010550:	4603      	mov	r3, r0
 8010552:	2b0f      	cmp	r3, #15
 8010554:	d805      	bhi.n	8010562 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8010556:	4b78      	ldr	r3, [pc, #480]	; (8010738 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8010558:	4a75      	ldr	r2, [pc, #468]	; (8010730 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 801055a:	21a4      	movs	r1, #164	; 0xa4
 801055c:	4875      	ldr	r0, [pc, #468]	; (8010734 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 801055e:	f01d fcaf 	bl	802dec0 <__assert_func>
 8010562:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	68da      	ldr	r2, [r3, #12]
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	68db      	ldr	r3, [r3, #12]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	3320      	adds	r3, #32
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	4610      	mov	r0, r2
 8010574:	4798      	blx	r3
 8010576:	4603      	mov	r3, r0
 8010578:	2b0b      	cmp	r3, #11
 801057a:	d805      	bhi.n	8010588 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 801057c:	4b6f      	ldr	r3, [pc, #444]	; (801073c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 801057e:	4a6c      	ldr	r2, [pc, #432]	; (8010730 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8010580:	21a5      	movs	r1, #165	; 0xa5
 8010582:	486c      	ldr	r0, [pc, #432]	; (8010734 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8010584:	f01d fc9c 	bl	802dec0 <__assert_func>
 8010588:	bf00      	nop
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	62bb      	str	r3, [r7, #40]	; 0x28
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	627b      	str	r3, [r7, #36]	; 0x24
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8010596:	f00b fd75 	bl	801c084 <_ZN8touchgfx11Application11getInstanceEv>
 801059a:	4603      	mov	r3, r0
 801059c:	4618      	mov	r0, r3
 801059e:	f00b fdbf 	bl	801c120 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80105a2:	6a3b      	ldr	r3, [r7, #32]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d008      	beq.n	80105bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 80105aa:	6a3b      	ldr	r3, [r7, #32]
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	6a3b      	ldr	r3, [r7, #32]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	330c      	adds	r3, #12
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	4610      	mov	r0, r2
 80105ba:	4798      	blx	r3
    if (*currentTrans)
 80105bc:	6a3b      	ldr	r3, [r7, #32]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d007      	beq.n	80105d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 80105c4:	6a3b      	ldr	r3, [r7, #32]
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	6a3b      	ldr	r3, [r7, #32]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	4610      	mov	r0, r2
 80105d2:	4798      	blx	r3
    if (*currentScreen)
 80105d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d008      	beq.n	80105ee <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 80105dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105de:	681a      	ldr	r2, [r3, #0]
 80105e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	3314      	adds	r3, #20
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	4610      	mov	r0, r2
 80105ec:	4798      	blx	r3
    if (*currentPresenter)
 80105ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d008      	beq.n	8010608 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 80105f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f8:	681a      	ldr	r2, [r3, #0]
 80105fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	3304      	adds	r3, #4
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	4610      	mov	r0, r2
 8010606:	4798      	blx	r3
    if (*currentScreen)
 8010608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d007      	beq.n	8010620 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8010610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	4610      	mov	r0, r2
 801061e:	4798      	blx	r3
    if (*currentPresenter)
 8010620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d008      	beq.n	801063a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8010628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	3308      	adds	r3, #8
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	4610      	mov	r0, r2
 8010638:	4798      	blx	r3
}
 801063a:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	2100      	movs	r1, #0
 8010642:	4618      	mov	r0, r3
 8010644:	f000 f87c 	bl	8010740 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8010648:	4603      	mov	r3, r0
 801064a:	4619      	mov	r1, r3
 801064c:	200c      	movs	r0, #12
 801064e:	f7ff fc21 	bl	800fe94 <_ZnwjPv>
 8010652:	4604      	mov	r4, r0
 8010654:	4620      	mov	r0, r4
 8010656:	f7ff ff45 	bl	80104e4 <_ZN8touchgfx12NoTransitionC1Ev>
 801065a:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	689b      	ldr	r3, [r3, #8]
 8010660:	2100      	movs	r1, #0
 8010662:	4618      	mov	r0, r3
 8010664:	f000 f87f 	bl	8010766 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8010668:	4603      	mov	r3, r0
 801066a:	4619      	mov	r1, r3
 801066c:	f44f 6056 	mov.w	r0, #3424	; 0xd60
 8010670:	f7ff fc10 	bl	800fe94 <_ZnwjPv>
 8010674:	4604      	mov	r4, r0
 8010676:	4620      	mov	r0, r4
 8010678:	f004 f930 	bl	80148dc <_ZN11Screen1ViewC1Ev>
 801067c:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	2100      	movs	r1, #0
 8010684:	4618      	mov	r0, r3
 8010686:	f000 f881 	bl	801078c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 801068a:	4603      	mov	r3, r0
 801068c:	4619      	mov	r1, r3
 801068e:	2010      	movs	r0, #16
 8010690:	f7ff fc00 	bl	800fe94 <_ZnwjPv>
 8010694:	4604      	mov	r4, r0
 8010696:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010698:	4620      	mov	r0, r4
 801069a:	f004 f8a3 	bl	80147e4 <_ZN16Screen1PresenterC1ER11Screen1View>
 801069e:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106a4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106aa:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106b0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80106b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d002      	beq.n	80106be <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 80106b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ba:	3304      	adds	r3, #4
 80106bc:	e000      	b.n	80106c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 80106be:	2300      	movs	r3, #0
 80106c0:	4619      	mov	r1, r3
 80106c2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80106c4:	f7ff fdaa 	bl	801021c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80106c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ca:	3304      	adds	r3, #4
 80106cc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7ff fe0c 	bl	80102ec <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80106d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80106d8:	4618      	mov	r0, r3
 80106da:	f000 f86a 	bl	80107b2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 80106de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e0:	61fb      	str	r3, [r7, #28]
 80106e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e4:	61bb      	str	r3, [r7, #24]
 80106e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106e8:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	330c      	adds	r3, #12
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	69f8      	ldr	r0, [r7, #28]
 80106f4:	4798      	blx	r3
    newPresenter->activate();
 80106f6:	69bb      	ldr	r3, [r7, #24]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	69b8      	ldr	r0, [r7, #24]
 80106fe:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010700:	6979      	ldr	r1, [r7, #20]
 8010702:	69f8      	ldr	r0, [r7, #28]
 8010704:	f00d f97c 	bl	801da00 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	3310      	adds	r3, #16
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	6978      	ldr	r0, [r7, #20]
 8010712:	4798      	blx	r3
    newTransition->invalidate();
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	3314      	adds	r3, #20
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	6978      	ldr	r0, [r7, #20]
 801071e:	4798      	blx	r3
}
 8010720:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8010722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010724:	4618      	mov	r0, r3
 8010726:	373c      	adds	r7, #60	; 0x3c
 8010728:	46bd      	mov	sp, r7
 801072a:	bd90      	pop	{r4, r7, pc}
 801072c:	0802f180 	.word	0x0802f180
 8010730:	0802f210 	.word	0x0802f210
 8010734:	0802f314 	.word	0x0802f314
 8010738:	0802f358 	.word	0x0802f358
 801073c:	0802f3fc 	.word	0x0802f3fc

08010740 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8010740:	b580      	push	{r7, lr}
 8010742:	b082      	sub	sp, #8
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
 8010748:	460b      	mov	r3, r1
 801074a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	3324      	adds	r3, #36	; 0x24
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	887a      	ldrh	r2, [r7, #2]
 8010756:	4611      	mov	r1, r2
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	4798      	blx	r3
 801075c:	4603      	mov	r3, r0
    }
 801075e:	4618      	mov	r0, r3
 8010760:	3708      	adds	r7, #8
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}

08010766 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8010766:	b580      	push	{r7, lr}
 8010768:	b082      	sub	sp, #8
 801076a:	af00      	add	r7, sp, #0
 801076c:	6078      	str	r0, [r7, #4]
 801076e:	460b      	mov	r3, r1
 8010770:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	3324      	adds	r3, #36	; 0x24
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	887a      	ldrh	r2, [r7, #2]
 801077c:	4611      	mov	r1, r2
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	4798      	blx	r3
 8010782:	4603      	mov	r3, r0
    }
 8010784:	4618      	mov	r0, r3
 8010786:	3708      	adds	r7, #8
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 801078c:	b580      	push	{r7, lr}
 801078e:	b082      	sub	sp, #8
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	460b      	mov	r3, r1
 8010796:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	3324      	adds	r3, #36	; 0x24
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	887a      	ldrh	r2, [r7, #2]
 80107a2:	4611      	mov	r1, r2
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	4798      	blx	r3
 80107a8:	4603      	mov	r3, r0
    }
 80107aa:	4618      	mov	r0, r3
 80107ac:	3708      	adds	r7, #8
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}

080107b2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80107b2:	b480      	push	{r7}
 80107b4:	b083      	sub	sp, #12
 80107b6:	af00      	add	r7, sp, #0
 80107b8:	6078      	str	r0, [r7, #4]
 80107ba:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	683a      	ldr	r2, [r7, #0]
 80107c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80107c2:	bf00      	nop
 80107c4:	370c      	adds	r7, #12
 80107c6:	46bd      	mov	sp, r7
 80107c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107cc:	4770      	bx	lr
	...

080107d0 <_ZN8touchgfx12NoTransitionD1Ev>:
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	4a05      	ldr	r2, [pc, #20]	; (80107f0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	601a      	str	r2, [r3, #0]
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	4618      	mov	r0, r3
 80107e2:	f7ff fc41 	bl	8010068 <_ZN8touchgfx10TransitionD1Ev>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	4618      	mov	r0, r3
 80107ea:	3708      	adds	r7, #8
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}
 80107f0:	0802fec0 	.word	0x0802fec0

080107f4 <_ZN8touchgfx12NoTransitionD0Ev>:
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b082      	sub	sp, #8
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f7ff ffe7 	bl	80107d0 <_ZN8touchgfx12NoTransitionD1Ev>
 8010802:	210c      	movs	r1, #12
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f01c fd3c 	bl	802d282 <_ZdlPvj>
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	4618      	mov	r0, r3
 801080e:	3708      	adds	r7, #8
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}

08010814 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010814:	b580      	push	{r7, lr}
 8010816:	b082      	sub	sp, #8
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	4a05      	ldr	r2, [pc, #20]	; (8010834 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	601a      	str	r2, [r3, #0]
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	4618      	mov	r0, r3
 8010826:	f7ff fbc1 	bl	800ffac <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	4618      	mov	r0, r3
 801082e:	3708      	adds	r7, #8
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}
 8010834:	0802ff28 	.word	0x0802ff28

08010838 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f7ff ffe7 	bl	8010814 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8010846:	2110      	movs	r1, #16
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f01c fd1a 	bl	802d282 <_ZdlPvj>
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	4618      	mov	r0, r3
 8010852:	3708      	adds	r7, #8
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}

08010858 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8010858:	b580      	push	{r7, lr}
 801085a:	b082      	sub	sp, #8
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	685b      	ldr	r3, [r3, #4]
 8010864:	687a      	ldr	r2, [r7, #4]
 8010866:	68d2      	ldr	r2, [r2, #12]
 8010868:	1052      	asrs	r2, r2, #1
 801086a:	1899      	adds	r1, r3, r2
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	68db      	ldr	r3, [r3, #12]
 8010870:	f003 0301 	and.w	r3, r3, #1
 8010874:	2b00      	cmp	r3, #0
 8010876:	d102      	bne.n	801087e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	689b      	ldr	r3, [r3, #8]
 801087c:	e00a      	b.n	8010894 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	685b      	ldr	r3, [r3, #4]
 8010882:	687a      	ldr	r2, [r7, #4]
 8010884:	68d2      	ldr	r2, [r2, #12]
 8010886:	1052      	asrs	r2, r2, #1
 8010888:	4413      	add	r3, r2
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	687a      	ldr	r2, [r7, #4]
 801088e:	6892      	ldr	r2, [r2, #8]
 8010890:	4413      	add	r3, r2
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	4608      	mov	r0, r1
 8010896:	4798      	blx	r3
    }
 8010898:	bf00      	nop
 801089a:	3708      	adds	r7, #8
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}

080108a0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80108a0:	b480      	push	{r7}
 80108a2:	b083      	sub	sp, #12
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d010      	beq.n	80108d2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	689b      	ldr	r3, [r3, #8]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d107      	bne.n	80108c8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	68db      	ldr	r3, [r3, #12]
 80108bc:	f003 0301 	and.w	r3, r3, #1
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d101      	bne.n	80108c8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80108c4:	2301      	movs	r3, #1
 80108c6:	e000      	b.n	80108ca <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80108c8:	2300      	movs	r3, #0
 80108ca:	2b01      	cmp	r3, #1
 80108cc:	d001      	beq.n	80108d2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80108ce:	2301      	movs	r3, #1
 80108d0:	e000      	b.n	80108d4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80108d2:	2300      	movs	r3, #0
    }
 80108d4:	4618      	mov	r0, r3
 80108d6:	370c      	adds	r7, #12
 80108d8:	46bd      	mov	sp, r7
 80108da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108de:	4770      	bx	lr

080108e0 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 80108e0:	b480      	push	{r7}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
        : color(col)
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	683a      	ldr	r2, [r7, #0]
 80108ee:	601a      	str	r2, [r3, #0]
    {
    }
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	4618      	mov	r0, r3
 80108f4:	370c      	adds	r7, #12
 80108f6:	46bd      	mov	sp, r7
 80108f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fc:	4770      	bx	lr

080108fe <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80108fe:	b480      	push	{r7}
 8010900:	b083      	sub	sp, #12
 8010902:	af00      	add	r7, sp, #0
 8010904:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2200      	movs	r2, #0
 801090a:	801a      	strh	r2, [r3, #0]
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2200      	movs	r2, #0
 8010910:	805a      	strh	r2, [r3, #2]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2200      	movs	r2, #0
 8010916:	809a      	strh	r2, [r3, #4]
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2200      	movs	r2, #0
 801091c:	80da      	strh	r2, [r3, #6]
    {
    }
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	4618      	mov	r0, r3
 8010922:	370c      	adds	r7, #12
 8010924:	46bd      	mov	sp, r7
 8010926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092a:	4770      	bx	lr

0801092c <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 801092c:	b480      	push	{r7}
 801092e:	b083      	sub	sp, #12
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	460b      	mov	r3, r1
 8010936:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	887a      	ldrh	r2, [r7, #2]
 801093c:	801a      	strh	r2, [r3, #0]
    {
    }
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	4618      	mov	r0, r3
 8010942:	370c      	adds	r7, #12
 8010944:	46bd      	mov	sp, r7
 8010946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094a:	4770      	bx	lr

0801094c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8010954:	4a14      	ldr	r2, [pc, #80]	; (80109a8 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	601a      	str	r2, [r3, #0]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	3304      	adds	r3, #4
 801095e:	4618      	mov	r0, r3
 8010960:	f7ff ffcd 	bl	80108fe <_ZN8touchgfx4RectC1Ev>
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	330c      	adds	r3, #12
 8010968:	4618      	mov	r0, r3
 801096a:	f7ff ffc8 	bl	80108fe <_ZN8touchgfx4RectC1Ev>
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2200      	movs	r2, #0
 8010972:	615a      	str	r2, [r3, #20]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2200      	movs	r2, #0
 8010978:	619a      	str	r2, [r3, #24]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2200      	movs	r2, #0
 801097e:	61da      	str	r2, [r3, #28]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2200      	movs	r2, #0
 8010984:	841a      	strh	r2, [r3, #32]
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	2200      	movs	r2, #0
 801098a:	845a      	strh	r2, [r3, #34]	; 0x22
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2200      	movs	r2, #0
 8010990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2201      	movs	r2, #1
 8010998:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	4618      	mov	r0, r3
 80109a0:	3708      	adds	r7, #8
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
 80109a6:	bf00      	nop
 80109a8:	08031f64 	.word	0x08031f64

080109ac <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80109ac:	b480      	push	{r7}
 80109ae:	b083      	sub	sp, #12
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
    {
 80109b4:	4a04      	ldr	r2, [pc, #16]	; (80109c8 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	601a      	str	r2, [r3, #0]
    }
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	4618      	mov	r0, r3
 80109be:	370c      	adds	r7, #12
 80109c0:	46bd      	mov	sp, r7
 80109c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c6:	4770      	bx	lr
 80109c8:	08031f64 	.word	0x08031f64

080109cc <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
    }
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f7ff ffe9 	bl	80109ac <_ZN8touchgfx8DrawableD1Ev>
 80109da:	2128      	movs	r1, #40	; 0x28
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f01c fc50 	bl	802d282 <_ZdlPvj>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	4618      	mov	r0, r3
 80109e6:	3708      	adds	r7, #8
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}

080109ec <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 80109ec:	b480      	push	{r7}
 80109ee:	b083      	sub	sp, #12
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80109f4:	2300      	movs	r3, #0
    }
 80109f6:	4618      	mov	r0, r3
 80109f8:	370c      	adds	r7, #12
 80109fa:	46bd      	mov	sp, r7
 80109fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a00:	4770      	bx	lr

08010a02 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010a02:	b580      	push	{r7, lr}
 8010a04:	b084      	sub	sp, #16
 8010a06:	af00      	add	r7, sp, #0
 8010a08:	60f8      	str	r0, [r7, #12]
 8010a0a:	4608      	mov	r0, r1
 8010a0c:	4611      	mov	r1, r2
 8010a0e:	461a      	mov	r2, r3
 8010a10:	4603      	mov	r3, r0
 8010a12:	817b      	strh	r3, [r7, #10]
 8010a14:	460b      	mov	r3, r1
 8010a16:	813b      	strh	r3, [r7, #8]
 8010a18:	4613      	mov	r3, r2
 8010a1a:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010a1c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010a20:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010a24:	4619      	mov	r1, r3
 8010a26:	68f8      	ldr	r0, [r7, #12]
 8010a28:	f000 f82a 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8010a2c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a34:	4619      	mov	r1, r3
 8010a36:	68f8      	ldr	r0, [r7, #12]
 8010a38:	f000 f87e 	bl	8010b38 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8010a3c:	bf00      	nop
 8010a3e:	3710      	adds	r7, #16
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8010a44:	b480      	push	{r7}
 8010a46:	b083      	sub	sp, #12
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	460b      	mov	r3, r1
 8010a4e:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	887a      	ldrh	r2, [r7, #2]
 8010a54:	809a      	strh	r2, [r3, #4]
    }
 8010a56:	bf00      	nop
 8010a58:	370c      	adds	r7, #12
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a60:	4770      	bx	lr

08010a62 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8010a62:	b480      	push	{r7}
 8010a64:	b083      	sub	sp, #12
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	6078      	str	r0, [r7, #4]
 8010a6a:	460b      	mov	r3, r1
 8010a6c:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	887a      	ldrh	r2, [r7, #2]
 8010a72:	80da      	strh	r2, [r3, #6]
    }
 8010a74:	bf00      	nop
 8010a76:	370c      	adds	r7, #12
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	4770      	bx	lr

08010a80 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	460b      	mov	r3, r1
 8010a8a:	807b      	strh	r3, [r7, #2]
 8010a8c:	4613      	mov	r3, r2
 8010a8e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	332c      	adds	r3, #44	; 0x2c
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010a9c:	4611      	mov	r1, r2
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	4798      	blx	r3
        setY(y);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	3330      	adds	r3, #48	; 0x30
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010aae:	4611      	mov	r1, r2
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	4798      	blx	r3
    }
 8010ab4:	bf00      	nop
 8010ab6:	3708      	adds	r7, #8
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}

08010abc <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8010abc:	b480      	push	{r7}
 8010abe:	b083      	sub	sp, #12
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
 8010ac4:	460b      	mov	r3, r1
 8010ac6:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	887a      	ldrh	r2, [r7, #2]
 8010acc:	811a      	strh	r2, [r3, #8]
    }
 8010ace:	bf00      	nop
 8010ad0:	370c      	adds	r7, #12
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad8:	4770      	bx	lr

08010ada <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8010ada:	b480      	push	{r7}
 8010adc:	b083      	sub	sp, #12
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
 8010ae2:	460b      	mov	r3, r1
 8010ae4:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	887a      	ldrh	r2, [r7, #2]
 8010aea:	815a      	strh	r2, [r3, #10]
    }
 8010aec:	bf00      	nop
 8010aee:	370c      	adds	r7, #12
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr

08010af8 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8010af8:	b480      	push	{r7}
 8010afa:	b083      	sub	sp, #12
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
    {
    }
 8010b00:	bf00      	nop
 8010b02:	370c      	adds	r7, #12
 8010b04:	46bd      	mov	sp, r7
 8010b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0a:	4770      	bx	lr

08010b0c <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010b0c:	b480      	push	{r7}
 8010b0e:	b083      	sub	sp, #12
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	6039      	str	r1, [r7, #0]
    {
    }
 8010b16:	bf00      	nop
 8010b18:	370c      	adds	r7, #12
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b20:	4770      	bx	lr

08010b22 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8010b22:	b480      	push	{r7}
 8010b24:	b083      	sub	sp, #12
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	6078      	str	r0, [r7, #4]
 8010b2a:	6039      	str	r1, [r7, #0]
    {
    }
 8010b2c:	bf00      	nop
 8010b2e:	370c      	adds	r7, #12
 8010b30:	46bd      	mov	sp, r7
 8010b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b36:	4770      	bx	lr

08010b38 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	460b      	mov	r3, r1
 8010b42:	807b      	strh	r3, [r7, #2]
 8010b44:	4613      	mov	r3, r2
 8010b46:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	3334      	adds	r3, #52	; 0x34
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010b54:	4611      	mov	r1, r2
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	4798      	blx	r3
        setHeight(height);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	3338      	adds	r3, #56	; 0x38
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010b66:	4611      	mov	r1, r2
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	4798      	blx	r3
    }
 8010b6c:	bf00      	nop
 8010b6e:	3708      	adds	r7, #8
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}

08010b74 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8010b74:	b480      	push	{r7}
 8010b76:	b083      	sub	sp, #12
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	6039      	str	r1, [r7, #0]
    {
    }
 8010b7e:	bf00      	nop
 8010b80:	370c      	adds	r7, #12
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr

08010b8a <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8010b8a:	b480      	push	{r7}
 8010b8c:	b083      	sub	sp, #12
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
    {
    }
 8010b92:	bf00      	nop
 8010b94:	370c      	adds	r7, #12
 8010b96:	46bd      	mov	sp, r7
 8010b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9c:	4770      	bx	lr

08010b9e <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010b9e:	b480      	push	{r7}
 8010ba0:	b083      	sub	sp, #12
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8010bac:	4618      	mov	r0, r3
 8010bae:	370c      	adds	r7, #12
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb6:	4770      	bx	lr

08010bb8 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8010bb8:	b480      	push	{r7}
 8010bba:	b083      	sub	sp, #12
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	370c      	adds	r7, #12
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd0:	4770      	bx	lr

08010bd2 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8010bd2:	b580      	push	{r7, lr}
 8010bd4:	b082      	sub	sp, #8
 8010bd6:	af00      	add	r7, sp, #0
 8010bd8:	6078      	str	r0, [r7, #4]
 8010bda:	460b      	mov	r3, r1
 8010bdc:	807b      	strh	r3, [r7, #2]
 8010bde:	4613      	mov	r3, r2
 8010be0:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	3350      	adds	r3, #80	; 0x50
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	8879      	ldrh	r1, [r7, #2]
 8010bec:	687a      	ldr	r2, [r7, #4]
 8010bee:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010bf2:	b292      	uxth	r2, r2
 8010bf4:	1a8a      	subs	r2, r1, r2
 8010bf6:	b292      	uxth	r2, r2
 8010bf8:	b210      	sxth	r0, r2
 8010bfa:	8839      	ldrh	r1, [r7, #0]
 8010bfc:	687a      	ldr	r2, [r7, #4]
 8010bfe:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010c02:	b292      	uxth	r2, r2
 8010c04:	1a8a      	subs	r2, r1, r2
 8010c06:	b292      	uxth	r2, r2
 8010c08:	b212      	sxth	r2, r2
 8010c0a:	4601      	mov	r1, r0
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	4798      	blx	r3
    }
 8010c10:	bf00      	nop
 8010c12:	3708      	adds	r7, #8
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8010c18:	b480      	push	{r7}
 8010c1a:	b083      	sub	sp, #12
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c26:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c2e:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c36:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8010c38:	bf00      	nop
 8010c3a:	370c      	adds	r7, #12
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c42:	4770      	bx	lr

08010c44 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	60f8      	str	r0, [r7, #12]
 8010c4c:	60b9      	str	r1, [r7, #8]
 8010c4e:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8010c50:	68f8      	ldr	r0, [r7, #12]
 8010c52:	f7ff ffe1 	bl	8010c18 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681a      	ldr	r2, [r3, #0]
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	68fa      	ldr	r2, [r7, #12]
 8010c62:	601a      	str	r2, [r3, #0]
    }
 8010c64:	bf00      	nop
 8010c66:	3710      	adds	r7, #16
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}

08010c6c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b082      	sub	sp, #8
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
    {
 8010c74:	4a06      	ldr	r2, [pc, #24]	; (8010c90 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	601a      	str	r2, [r3, #0]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	3304      	adds	r3, #4
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f003 f960 	bl	8013f44 <_ZN8touchgfx9ContainerD1Ev>
    }
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	4618      	mov	r0, r3
 8010c88:	3708      	adds	r7, #8
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	bf00      	nop
 8010c90:	0803205c 	.word	0x0803205c

08010c94 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
    }
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f7ff ffe5 	bl	8010c6c <_ZN8touchgfx6ScreenD1Ev>
 8010ca2:	213c      	movs	r1, #60	; 0x3c
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f01c faec 	bl	802d282 <_ZdlPvj>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	4618      	mov	r0, r3
 8010cae:	3708      	adds	r7, #8
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}

08010cb4 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8010cb4:	b480      	push	{r7}
 8010cb6:	b083      	sub	sp, #12
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
    {
    }
 8010cbc:	bf00      	nop
 8010cbe:	370c      	adds	r7, #12
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc6:	4770      	bx	lr

08010cc8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8010cc8:	b480      	push	{r7}
 8010cca:	b083      	sub	sp, #12
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
    {
    }
 8010cd0:	bf00      	nop
 8010cd2:	370c      	adds	r7, #12
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cda:	4770      	bx	lr

08010cdc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8010cdc:	b480      	push	{r7}
 8010cde:	b083      	sub	sp, #12
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
    {
    }
 8010ce4:	bf00      	nop
 8010ce6:	370c      	adds	r7, #12
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cee:	4770      	bx	lr

08010cf0 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010cf0:	b480      	push	{r7}
 8010cf2:	b083      	sub	sp, #12
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
    {
    }
 8010cf8:	bf00      	nop
 8010cfa:	370c      	adds	r7, #12
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr

08010d04 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010d04:	b480      	push	{r7}
 8010d06:	b083      	sub	sp, #12
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	460b      	mov	r3, r1
 8010d0e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010d10:	bf00      	nop
 8010d12:	370c      	adds	r7, #12
 8010d14:	46bd      	mov	sp, r7
 8010d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1a:	4770      	bx	lr

08010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
 8010d24:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	3304      	adds	r3, #4
 8010d2a:	6839      	ldr	r1, [r7, #0]
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f006 fa97 	bl	8017260 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010d32:	bf00      	nop
 8010d34:	3708      	adds	r7, #8
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}

08010d3a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8010d3a:	b580      	push	{r7, lr}
 8010d3c:	b084      	sub	sp, #16
 8010d3e:	af00      	add	r7, sp, #0
 8010d40:	60f8      	str	r0, [r7, #12]
 8010d42:	607b      	str	r3, [r7, #4]
 8010d44:	460b      	mov	r3, r1
 8010d46:	817b      	strh	r3, [r7, #10]
 8010d48:	4613      	mov	r3, r2
 8010d4a:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7ff ff25 	bl	8010b9e <_ZNK8touchgfx8Drawable9isVisibleEv>
 8010d54:	4603      	mov	r3, r0
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d008      	beq.n	8010d6c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f7ff ff2b 	bl	8010bb8 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8010d62:	4603      	mov	r3, r0
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d001      	beq.n	8010d6c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010d68:	2301      	movs	r3, #1
 8010d6a:	e000      	b.n	8010d6e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d002      	beq.n	8010d78 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8010d72:	68fa      	ldr	r2, [r7, #12]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	601a      	str	r2, [r3, #0]
        }
    }
 8010d78:	bf00      	nop
 8010d7a:	3710      	adds	r7, #16
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}

08010d80 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b082      	sub	sp, #8
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7ff fdde 	bl	801094c <_ZN8touchgfx8DrawableC1Ev>
 8010d90:	4a03      	ldr	r2, [pc, #12]	; (8010da0 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	601a      	str	r2, [r3, #0]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3708      	adds	r7, #8
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	08030050 	.word	0x08030050

08010da4 <_ZN8touchgfx6WidgetD1Ev>:
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	4a05      	ldr	r2, [pc, #20]	; (8010dc4 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	601a      	str	r2, [r3, #0]
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7ff fdf9 	bl	80109ac <_ZN8touchgfx8DrawableD1Ev>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3708      	adds	r7, #8
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}
 8010dc4:	08030050 	.word	0x08030050

08010dc8 <_ZN8touchgfx6WidgetD0Ev>:
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b082      	sub	sp, #8
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f7ff ffe7 	bl	8010da4 <_ZN8touchgfx6WidgetD1Ev>
 8010dd6:	2128      	movs	r1, #40	; 0x28
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f01c fa52 	bl	802d282 <_ZdlPvj>
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	4618      	mov	r0, r3
 8010de2:	3708      	adds	r7, #8
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	4618      	mov	r0, r3
 8010df4:	2326      	movs	r3, #38	; 0x26
 8010df6:	461a      	mov	r2, r3
 8010df8:	2100      	movs	r1, #0
 8010dfa:	f01d f9ef 	bl	802e1dc <memset>
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7ff ffbd 	bl	8010d80 <_ZN8touchgfx6WidgetC1Ev>
 8010e06:	4a09      	ldr	r2, [pc, #36]	; (8010e2c <_ZN8touchgfx3BoxC1Ev+0x44>)
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	601a      	str	r2, [r3, #0]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	22ff      	movs	r2, #255	; 0xff
 8010e10:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	3328      	adds	r3, #40	; 0x28
 8010e18:	2100      	movs	r1, #0
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7ff fd60 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	4618      	mov	r0, r3
 8010e24:	3708      	adds	r7, #8
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}
 8010e2a:	bf00      	nop
 8010e2c:	08031918 	.word	0x08031918

08010e30 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8010e30:	b480      	push	{r7}
 8010e32:	b083      	sub	sp, #12
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	683a      	ldr	r2, [r7, #0]
 8010e3e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010e40:	bf00      	nop
 8010e42:	370c      	adds	r7, #12
 8010e44:	46bd      	mov	sp, r7
 8010e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4a:	4770      	bx	lr

08010e4c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bitmap), alpha(255)
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	4618      	mov	r0, r3
 8010e5a:	2326      	movs	r3, #38	; 0x26
 8010e5c:	461a      	mov	r2, r3
 8010e5e:	2100      	movs	r1, #0
 8010e60:	f01d f9bc 	bl	802e1dc <memset>
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7ff ff8a 	bl	8010d80 <_ZN8touchgfx6WidgetC1Ev>
 8010e6c:	4a09      	ldr	r2, [pc, #36]	; (8010e94 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	601a      	str	r2, [r3, #0]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	683a      	ldr	r2, [r7, #0]
 8010e76:	8812      	ldrh	r2, [r2, #0]
 8010e78:	84da      	strh	r2, [r3, #38]	; 0x26
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	22ff      	movs	r2, #255	; 0xff
 8010e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bitmap);
 8010e82:	6839      	ldr	r1, [r7, #0]
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f009 fbf5 	bl	801a674 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3708      	adds	r7, #8
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}
 8010e94:	08031b88 	.word	0x08031b88

08010e98 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8010e98:	b480      	push	{r7}
 8010e9a:	b083      	sub	sp, #12
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
 8010ea0:	460b      	mov	r3, r1
 8010ea2:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8010ea4:	4a06      	ldr	r2, [pc, #24]	; (8010ec0 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	601a      	str	r2, [r3, #0]
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	887a      	ldrh	r2, [r7, #2]
 8010eae:	809a      	strh	r2, [r3, #4]
    }
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	370c      	adds	r7, #12
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebc:	4770      	bx	lr
 8010ebe:	bf00      	nop
 8010ec0:	0802fe58 	.word	0x0802fe58

08010ec4 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	4618      	mov	r0, r3
 8010ed0:	2326      	movs	r3, #38	; 0x26
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	2100      	movs	r1, #0
 8010ed6:	f01d f981 	bl	802e1dc <memset>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	4618      	mov	r0, r3
 8010ede:	f7ff ff4f 	bl	8010d80 <_ZN8touchgfx6WidgetC1Ev>
 8010ee2:	4a14      	ldr	r2, [pc, #80]	; (8010f34 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	601a      	str	r2, [r3, #0]
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	3328      	adds	r3, #40	; 0x28
 8010eec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f7ff ffd1 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	3330      	adds	r3, #48	; 0x30
 8010efa:	2100      	movs	r1, #0
 8010efc:	4618      	mov	r0, r3
 8010efe:	f7ff fcef 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2200      	movs	r2, #0
 8010f06:	869a      	strh	r2, [r3, #52]	; 0x34
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	22ff      	movs	r2, #255	; 0xff
 8010f0c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2200      	movs	r2, #0
 8010f14:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2200      	movs	r2, #0
 8010f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	3708      	adds	r7, #8
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	08031870 	.word	0x08031870

08010f38 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	4a08      	ldr	r2, [pc, #32]	; (8010f64 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	601a      	str	r2, [r3, #0]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	3328      	adds	r3, #40	; 0x28
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7fe fe24 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	4618      	mov	r0, r3
 8010f54:	f7ff ff26 	bl	8010da4 <_ZN8touchgfx6WidgetD1Ev>
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3708      	adds	r7, #8
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}
 8010f62:	bf00      	nop
 8010f64:	08031870 	.word	0x08031870

08010f68 <_ZN8touchgfx8TextAreaD0Ev>:
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b082      	sub	sp, #8
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	6878      	ldr	r0, [r7, #4]
 8010f72:	f7ff ffe1 	bl	8010f38 <_ZN8touchgfx8TextAreaD1Ev>
 8010f76:	213c      	movs	r1, #60	; 0x3c
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f01c f982 	bl	802d282 <_ZdlPvj>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	4618      	mov	r0, r3
 8010f82:	3708      	adds	r7, #8
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}

08010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7ff ff96 	bl	8010ec4 <_ZN8touchgfx8TextAreaC1Ev>
 8010f98:	4a05      	ldr	r2, [pc, #20]	; (8010fb0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	601a      	str	r2, [r3, #0]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3708      	adds	r7, #8
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
 8010fae:	bf00      	nop
 8010fb0:	08031ae0 	.word	0x08031ae0

08010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8010fb4:	b480      	push	{r7}
 8010fb6:	b083      	sub	sp, #12
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	683a      	ldr	r2, [r7, #0]
 8010fc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010fc4:	bf00      	nop
 8010fc6:	370c      	adds	r7, #12
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fce:	4770      	bx	lr

08010fd0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
 8010fd8:	4a05      	ldr	r2, [pc, #20]	; (8010ff0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	601a      	str	r2, [r3, #0]
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7ff fe43 	bl	8010c6c <_ZN8touchgfx6ScreenD1Ev>
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3708      	adds	r7, #8
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}
 8010ff0:	0803001c 	.word	0x0803001c

08010ff4 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b082      	sub	sp, #8
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f7ff ffe7 	bl	8010fd0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8011002:	2140      	movs	r1, #64	; 0x40
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f01c f93c 	bl	802d282 <_ZdlPvj>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	4618      	mov	r0, r3
 801100e:	3708      	adds	r7, #8
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
 801101c:	4a75      	ldr	r2, [pc, #468]	; (80111f4 <_ZN15Screen1ViewBaseD1Ev+0x1e0>)
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	601a      	str	r2, [r3, #0]
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8011028:	4618      	mov	r0, r3
 801102a:	f003 f8a5 	bl	8014178 <_ZN8touchgfx5GaugeD1Ev>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8011034:	4618      	mov	r0, r3
 8011036:	f002 ffeb 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8011040:	4618      	mov	r0, r3
 8011042:	f002 ffe5 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 801104c:	4618      	mov	r0, r3
 801104e:	f002 ffdf 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8011058:	4618      	mov	r0, r3
 801105a:	f002 ffd9 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8011064:	4618      	mov	r0, r3
 8011066:	f002 ffd3 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8011070:	4618      	mov	r0, r3
 8011072:	f002 ffcd 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 801107c:	4618      	mov	r0, r3
 801107e:	f002 ffc7 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8011088:	4618      	mov	r0, r3
 801108a:	f002 ffc1 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8011094:	4618      	mov	r0, r3
 8011096:	f002 ffbb 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 80110a0:	4618      	mov	r0, r3
 80110a2:	f002 ffb5 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 80110ac:	4618      	mov	r0, r3
 80110ae:	f002 ffaf 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 80110b8:	4618      	mov	r0, r3
 80110ba:	f002 ffa9 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 80110c4:	4618      	mov	r0, r3
 80110c6:	f002 ffa3 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 80110d0:	4618      	mov	r0, r3
 80110d2:	f002 ff9d 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 80110dc:	4618      	mov	r0, r3
 80110de:	f002 ff97 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 80110e8:	4618      	mov	r0, r3
 80110ea:	f002 ff91 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 80110f4:	4618      	mov	r0, r3
 80110f6:	f002 ff8b 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8011100:	4618      	mov	r0, r3
 8011102:	f002 ff85 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 801110c:	4618      	mov	r0, r3
 801110e:	f002 ff7f 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8011118:	4618      	mov	r0, r3
 801111a:	f002 ff79 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8011124:	4618      	mov	r0, r3
 8011126:	f002 ff73 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8011130:	4618      	mov	r0, r3
 8011132:	f002 ff6d 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801113c:	4618      	mov	r0, r3
 801113e:	f002 ff67 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8011148:	4618      	mov	r0, r3
 801114a:	f002 ff61 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8011154:	4618      	mov	r0, r3
 8011156:	f002 ff39 	bl	8013fcc <_ZN8touchgfx5ImageD1Ev>
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8011160:	4618      	mov	r0, r3
 8011162:	f002 ff33 	bl	8013fcc <_ZN8touchgfx5ImageD1Ev>
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801116c:	4618      	mov	r0, r3
 801116e:	f002 ff2d 	bl	8013fcc <_ZN8touchgfx5ImageD1Ev>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8011178:	4618      	mov	r0, r3
 801117a:	f002 ff27 	bl	8013fcc <_ZN8touchgfx5ImageD1Ev>
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8011184:	4618      	mov	r0, r3
 8011186:	f002 ff21 	bl	8013fcc <_ZN8touchgfx5ImageD1Ev>
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8011190:	4618      	mov	r0, r3
 8011192:	f002 ff1b 	bl	8013fcc <_ZN8touchgfx5ImageD1Ev>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 801119c:	4618      	mov	r0, r3
 801119e:	f002 ff15 	bl	8013fcc <_ZN8touchgfx5ImageD1Ev>
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80111a8:	4618      	mov	r0, r3
 80111aa:	f002 ff0f 	bl	8013fcc <_ZN8touchgfx5ImageD1Ev>
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	33f0      	adds	r3, #240	; 0xf0
 80111b2:	4618      	mov	r0, r3
 80111b4:	f002 ff0a 	bl	8013fcc <_ZN8touchgfx5ImageD1Ev>
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	33c4      	adds	r3, #196	; 0xc4
 80111bc:	4618      	mov	r0, r3
 80111be:	f002 ff05 	bl	8013fcc <_ZN8touchgfx5ImageD1Ev>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	3398      	adds	r3, #152	; 0x98
 80111c6:	4618      	mov	r0, r3
 80111c8:	f002 ff00 	bl	8013fcc <_ZN8touchgfx5ImageD1Ev>
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	336c      	adds	r3, #108	; 0x6c
 80111d0:	4618      	mov	r0, r3
 80111d2:	f002 fed9 	bl	8013f88 <_ZN8touchgfx3BoxD1Ev>
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	3340      	adds	r3, #64	; 0x40
 80111da:	4618      	mov	r0, r3
 80111dc:	f002 fed4 	bl	8013f88 <_ZN8touchgfx3BoxD1Ev>
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7ff fef4 	bl	8010fd0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	4618      	mov	r0, r3
 80111ec:	3708      	adds	r7, #8
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
 80111f2:	bf00      	nop
 80111f4:	0802ffe8 	.word	0x0802ffe8

080111f8 <_ZN15Screen1ViewBaseD0Ev>:
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f7ff ff07 	bl	8011014 <_ZN15Screen1ViewBaseD1Ev>
 8011206:	f44f 6156 	mov.w	r1, #3424	; 0xd60
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f01c f839 	bl	802d282 <_ZdlPvj>
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	4618      	mov	r0, r3
 8011214:	3708      	adds	r7, #8
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}
	...

0801121c <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 801121c:	b590      	push	{r4, r7, lr}
 801121e:	f2ad 4d9c 	subw	sp, sp, #1180	; 0x49c
 8011222:	af02      	add	r7, sp, #8
 8011224:	1d3b      	adds	r3, r7, #4
 8011226:	6018      	str	r0, [r3, #0]
 8011228:	1d3b      	adds	r3, r7, #4
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	4618      	mov	r0, r3
 801122e:	f002 fe73 	bl	8013f18 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8011232:	4ae5      	ldr	r2, [pc, #916]	; (80115c8 <_ZN15Screen1ViewBaseC1Ev+0x3ac>)
 8011234:	1d3b      	adds	r3, r7, #4
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	601a      	str	r2, [r3, #0]
 801123a:	1d3b      	adds	r3, r7, #4
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	3340      	adds	r3, #64	; 0x40
 8011240:	4618      	mov	r0, r3
 8011242:	f7ff fdd1 	bl	8010de8 <_ZN8touchgfx3BoxC1Ev>
 8011246:	1d3b      	adds	r3, r7, #4
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	336c      	adds	r3, #108	; 0x6c
 801124c:	4618      	mov	r0, r3
 801124e:	f7ff fdcb 	bl	8010de8 <_ZN8touchgfx3BoxC1Ev>
 8011252:	1d3b      	adds	r3, r7, #4
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	f103 0498 	add.w	r4, r3, #152	; 0x98
 801125a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801125e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011262:	4618      	mov	r0, r3
 8011264:	f7ff fb62 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 8011268:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801126c:	4619      	mov	r1, r3
 801126e:	4620      	mov	r0, r4
 8011270:	f7ff fdec 	bl	8010e4c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011274:	1d3b      	adds	r3, r7, #4
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 801127c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011280:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011284:	4618      	mov	r0, r3
 8011286:	f7ff fb51 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 801128a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801128e:	4619      	mov	r1, r3
 8011290:	4620      	mov	r0, r4
 8011292:	f7ff fddb 	bl	8010e4c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011296:	1d3b      	adds	r3, r7, #4
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 801129e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80112a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7ff fb40 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 80112ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80112b0:	4619      	mov	r1, r3
 80112b2:	4620      	mov	r0, r4
 80112b4:	f7ff fdca 	bl	8010e4c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80112b8:	1d3b      	adds	r3, r7, #4
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 80112c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80112c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80112c8:	4618      	mov	r0, r3
 80112ca:	f7ff fb2f 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 80112ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80112d2:	4619      	mov	r1, r3
 80112d4:	4620      	mov	r0, r4
 80112d6:	f7ff fdb9 	bl	8010e4c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80112da:	1d3b      	adds	r3, r7, #4
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 80112e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80112e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7ff fb1e 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 80112f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80112f4:	4619      	mov	r1, r3
 80112f6:	4620      	mov	r0, r4
 80112f8:	f7ff fda8 	bl	8010e4c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80112fc:	1d3b      	adds	r3, r7, #4
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8011304:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011308:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801130c:	4618      	mov	r0, r3
 801130e:	f7ff fb0d 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 8011312:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011316:	4619      	mov	r1, r3
 8011318:	4620      	mov	r0, r4
 801131a:	f7ff fd97 	bl	8010e4c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801131e:	1d3b      	adds	r3, r7, #4
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8011326:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801132a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801132e:	4618      	mov	r0, r3
 8011330:	f7ff fafc 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 8011334:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011338:	4619      	mov	r1, r3
 801133a:	4620      	mov	r0, r4
 801133c:	f7ff fd86 	bl	8010e4c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011340:	1d3b      	adds	r3, r7, #4
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 8011348:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801134c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011350:	4618      	mov	r0, r3
 8011352:	f7ff faeb 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 8011356:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801135a:	4619      	mov	r1, r3
 801135c:	4620      	mov	r0, r4
 801135e:	f7ff fd75 	bl	8010e4c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011362:	1d3b      	adds	r3, r7, #4
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 801136a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801136e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011372:	4618      	mov	r0, r3
 8011374:	f7ff fada 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 8011378:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801137c:	4619      	mov	r1, r3
 801137e:	4620      	mov	r0, r4
 8011380:	f7ff fd64 	bl	8010e4c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011384:	1d3b      	adds	r3, r7, #4
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	f503 7409 	add.w	r4, r3, #548	; 0x224
 801138c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011390:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011394:	4618      	mov	r0, r3
 8011396:	f7ff fac9 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 801139a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801139e:	4619      	mov	r1, r3
 80113a0:	4620      	mov	r0, r4
 80113a2:	f7ff fd53 	bl	8010e4c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80113a6:	1d3b      	adds	r3, r7, #4
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	f503 7414 	add.w	r4, r3, #592	; 0x250
 80113ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80113b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7ff fab8 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 80113bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80113c0:	4619      	mov	r1, r3
 80113c2:	4620      	mov	r0, r4
 80113c4:	f7ff fd42 	bl	8010e4c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80113c8:	1d3b      	adds	r3, r7, #4
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80113d0:	4618      	mov	r0, r3
 80113d2:	f7ff fdd9 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113d6:	1d3b      	adds	r3, r7, #4
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80113de:	4618      	mov	r0, r3
 80113e0:	f7ff fdd2 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113e4:	1d3b      	adds	r3, r7, #4
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80113ec:	4618      	mov	r0, r3
 80113ee:	f7ff fdcb 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113f2:	1d3b      	adds	r3, r7, #4
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7ff fdc4 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011400:	1d3b      	adds	r3, r7, #4
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8011408:	4618      	mov	r0, r3
 801140a:	f7ff fdbd 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801140e:	1d3b      	adds	r3, r7, #4
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8011416:	4618      	mov	r0, r3
 8011418:	f7ff fdb6 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801141c:	1d3b      	adds	r3, r7, #4
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8011424:	4618      	mov	r0, r3
 8011426:	f7ff fdaf 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801142a:	1d3b      	adds	r3, r7, #4
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8011432:	4618      	mov	r0, r3
 8011434:	f7ff fda8 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011438:	1d3b      	adds	r3, r7, #4
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8011440:	4618      	mov	r0, r3
 8011442:	f7ff fda1 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011446:	1d3b      	adds	r3, r7, #4
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 801144e:	4618      	mov	r0, r3
 8011450:	f7ff fd9a 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011454:	1d3b      	adds	r3, r7, #4
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 801145c:	4618      	mov	r0, r3
 801145e:	f7ff fd93 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011462:	1d3b      	adds	r3, r7, #4
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 801146a:	4618      	mov	r0, r3
 801146c:	f7ff fd8c 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011470:	1d3b      	adds	r3, r7, #4
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8011478:	4618      	mov	r0, r3
 801147a:	f7ff fd85 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801147e:	1d3b      	adds	r3, r7, #4
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8011486:	4618      	mov	r0, r3
 8011488:	f7ff fd7e 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801148c:	1d3b      	adds	r3, r7, #4
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8011494:	4618      	mov	r0, r3
 8011496:	f7ff fd77 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801149a:	1d3b      	adds	r3, r7, #4
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7ff fd70 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114a8:	1d3b      	adds	r3, r7, #4
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7ff fd69 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114b6:	1d3b      	adds	r3, r7, #4
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 80114be:	4618      	mov	r0, r3
 80114c0:	f7ff fd62 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114c4:	1d3b      	adds	r3, r7, #4
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7ff fd5b 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114d2:	1d3b      	adds	r3, r7, #4
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 80114da:	4618      	mov	r0, r3
 80114dc:	f7ff fd54 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114e0:	1d3b      	adds	r3, r7, #4
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7ff fd4d 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114ee:	1d3b      	adds	r3, r7, #4
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7ff fd46 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114fc:	1d3b      	adds	r3, r7, #4
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8011504:	4618      	mov	r0, r3
 8011506:	f7ff fd3f 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801150a:	1d3b      	adds	r3, r7, #4
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8011512:	4618      	mov	r0, r3
 8011514:	f7ff fd38 	bl	8010f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011518:	1d3b      	adds	r3, r7, #4
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8011520:	4618      	mov	r0, r3
 8011522:	f008 fe5f 	bl	801a1e4 <_ZN8touchgfx5GaugeC1Ev>
{

    __background.setPosition(0, 0, 1024, 600);
 8011526:	1d3b      	adds	r3, r7, #4
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801152e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8011532:	9300      	str	r3, [sp, #0]
 8011534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011538:	2200      	movs	r2, #0
 801153a:	2100      	movs	r1, #0
 801153c:	f7ff fa61 	bl	8010a02 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8011540:	1d3b      	adds	r3, r7, #4
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8011548:	f207 23ad 	addw	r3, r7, #685	; 0x2ad
 801154c:	2200      	movs	r2, #0
 801154e:	701a      	strb	r2, [r3, #0]
 8011550:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8011554:	2200      	movs	r2, #0
 8011556:	701a      	strb	r2, [r3, #0]
 8011558:	f207 23ab 	addw	r3, r7, #683	; 0x2ab
 801155c:	2200      	movs	r2, #0
 801155e:	701a      	strb	r2, [r3, #0]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8011560:	f207 23ad 	addw	r3, r7, #685	; 0x2ad
 8011564:	781b      	ldrb	r3, [r3, #0]
 8011566:	041b      	lsls	r3, r3, #16
 8011568:	461a      	mov	r2, r3
 801156a:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801156e:	781b      	ldrb	r3, [r3, #0]
 8011570:	021b      	lsls	r3, r3, #8
 8011572:	431a      	orrs	r2, r3
 8011574:	f207 23ab 	addw	r3, r7, #683	; 0x2ab
 8011578:	781b      	ldrb	r3, [r3, #0]
 801157a:	4313      	orrs	r3, r2
 801157c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011580:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8011584:	4611      	mov	r1, r2
 8011586:	4618      	mov	r0, r3
 8011588:	f7ff f9aa 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 801158c:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	4619      	mov	r1, r3
 8011594:	4620      	mov	r0, r4
 8011596:	f7ff fc4b 	bl	8010e30 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(1, 1, 1024, 600);
 801159a:	1d3b      	adds	r3, r7, #4
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80115a2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80115a6:	9300      	str	r3, [sp, #0]
 80115a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115ac:	2201      	movs	r2, #1
 80115ae:	2101      	movs	r1, #1
 80115b0:	f7ff fa27 	bl	8010a02 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80115b4:	1d3b      	adds	r3, r7, #4
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80115bc:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80115c0:	2200      	movs	r2, #0
 80115c2:	701a      	strb	r2, [r3, #0]
 80115c4:	e002      	b.n	80115cc <_ZN15Screen1ViewBaseC1Ev+0x3b0>
 80115c6:	bf00      	nop
 80115c8:	0802ffe8 	.word	0x0802ffe8
 80115cc:	f207 23af 	addw	r3, r7, #687	; 0x2af
 80115d0:	2200      	movs	r2, #0
 80115d2:	701a      	strb	r2, [r3, #0]
 80115d4:	f207 23ae 	addw	r3, r7, #686	; 0x2ae
 80115d8:	2200      	movs	r2, #0
 80115da:	701a      	strb	r2, [r3, #0]
 80115dc:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80115e0:	781b      	ldrb	r3, [r3, #0]
 80115e2:	041b      	lsls	r3, r3, #16
 80115e4:	461a      	mov	r2, r3
 80115e6:	f207 23af 	addw	r3, r7, #687	; 0x2af
 80115ea:	781b      	ldrb	r3, [r3, #0]
 80115ec:	021b      	lsls	r3, r3, #8
 80115ee:	431a      	orrs	r2, r3
 80115f0:	f207 23ae 	addw	r3, r7, #686	; 0x2ae
 80115f4:	781b      	ldrb	r3, [r3, #0]
 80115f6:	4313      	orrs	r3, r2
 80115f8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80115fc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8011600:	4611      	mov	r1, r2
 8011602:	4618      	mov	r0, r3
 8011604:	f7ff f96c 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 8011608:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	4619      	mov	r1, r3
 8011610:	4620      	mov	r0, r4
 8011612:	f7ff fc0d 	bl	8010e30 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(1, -8);
 8011616:	1d3b      	adds	r3, r7, #4
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	3398      	adds	r3, #152	; 0x98
 801161c:	f06f 0207 	mvn.w	r2, #7
 8011620:	2101      	movs	r1, #1
 8011622:	4618      	mov	r0, r3
 8011624:	f7ff fa2c 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_RACE_DASH_ID));
 8011628:	1d3b      	adds	r3, r7, #4
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8011630:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011634:	210e      	movs	r1, #14
 8011636:	4618      	mov	r0, r3
 8011638:	f7ff f978 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 801163c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011640:	4619      	mov	r1, r3
 8011642:	4620      	mov	r0, r4
 8011644:	f009 f816 	bl	801a674 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indLeft.setXY(263, 32);
 8011648:	1d3b      	adds	r3, r7, #4
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	33c4      	adds	r3, #196	; 0xc4
 801164e:	2220      	movs	r2, #32
 8011650:	f240 1107 	movw	r1, #263	; 0x107
 8011654:	4618      	mov	r0, r3
 8011656:	f7ff fa13 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    indLeft.setBitmap(touchgfx::Bitmap(BITMAP_INDLEFT_ID));
 801165a:	1d3b      	adds	r3, r7, #4
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8011662:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011666:	2108      	movs	r1, #8
 8011668:	4618      	mov	r0, r3
 801166a:	f7ff f95f 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 801166e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011672:	4619      	mov	r1, r3
 8011674:	4620      	mov	r0, r4
 8011676:	f008 fffd 	bl	801a674 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indRight.setXY(725, 32);
 801167a:	1d3b      	adds	r3, r7, #4
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	33f0      	adds	r3, #240	; 0xf0
 8011680:	2220      	movs	r2, #32
 8011682:	f240 21d5 	movw	r1, #725	; 0x2d5
 8011686:	4618      	mov	r0, r3
 8011688:	f7ff f9fa 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    indRight.setBitmap(touchgfx::Bitmap(BITMAP_INDRIGHT_ID));
 801168c:	1d3b      	adds	r3, r7, #4
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8011694:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011698:	210c      	movs	r1, #12
 801169a:	4618      	mov	r0, r3
 801169c:	f7ff f946 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 80116a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80116a4:	4619      	mov	r1, r3
 80116a6:	4620      	mov	r0, r4
 80116a8:	f008 ffe4 	bl	801a674 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indHigh.setXY(394, 285);
 80116ac:	1d3b      	adds	r3, r7, #4
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80116b4:	f240 121d 	movw	r2, #285	; 0x11d
 80116b8:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80116bc:	4618      	mov	r0, r3
 80116be:	f7ff f9df 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    indHigh.setBitmap(touchgfx::Bitmap(BITMAP_INDHIGH_ID));
 80116c2:	1d3b      	adds	r3, r7, #4
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 80116ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80116ce:	2107      	movs	r1, #7
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7ff f92b 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 80116d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80116da:	4619      	mov	r1, r3
 80116dc:	4620      	mov	r0, r4
 80116de:	f008 ffc9 	bl	801a674 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indFuel.setXY(563, 213);
 80116e2:	1d3b      	adds	r3, r7, #4
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80116ea:	22d5      	movs	r2, #213	; 0xd5
 80116ec:	f240 2133 	movw	r1, #563	; 0x233
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7ff f9c5 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    indFuel.setBitmap(touchgfx::Bitmap(BITMAP_INDFUEL_ID));
 80116f6:	1d3b      	adds	r3, r7, #4
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 80116fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011702:	2106      	movs	r1, #6
 8011704:	4618      	mov	r0, r3
 8011706:	f7ff f911 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 801170a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801170e:	4619      	mov	r1, r3
 8011710:	4620      	mov	r0, r4
 8011712:	f008 ffaf 	bl	801a674 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indOil.setXY(410, 344);
 8011716:	1d3b      	adds	r3, r7, #4
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801171e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011722:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8011726:	4618      	mov	r0, r3
 8011728:	f7ff f9aa 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    indOil.setBitmap(touchgfx::Bitmap(BITMAP_INDOIL_ID));
 801172c:	1d3b      	adds	r3, r7, #4
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8011734:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011738:	210a      	movs	r1, #10
 801173a:	4618      	mov	r0, r3
 801173c:	f7ff f8f6 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 8011740:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011744:	4619      	mov	r1, r3
 8011746:	4620      	mov	r0, r4
 8011748:	f008 ff94 	bl	801a674 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indBatt.setXY(425, 215);
 801174c:	1d3b      	adds	r3, r7, #4
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8011754:	22d7      	movs	r2, #215	; 0xd7
 8011756:	f240 11a9 	movw	r1, #425	; 0x1a9
 801175a:	4618      	mov	r0, r3
 801175c:	f7ff f990 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    indBatt.setBitmap(touchgfx::Bitmap(BITMAP_INDBATT_ID));
 8011760:	1d3b      	adds	r3, r7, #4
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8011768:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801176c:	2103      	movs	r1, #3
 801176e:	4618      	mov	r0, r3
 8011770:	f7ff f8dc 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 8011774:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011778:	4619      	mov	r1, r3
 801177a:	4620      	mov	r0, r4
 801177c:	f008 ff7a 	bl	801a674 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indPark.setXY(496, 186);
 8011780:	1d3b      	adds	r3, r7, #4
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8011788:	22ba      	movs	r2, #186	; 0xba
 801178a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 801178e:	4618      	mov	r0, r3
 8011790:	f7ff f976 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    indPark.setBitmap(touchgfx::Bitmap(BITMAP_INDPARK_ID));
 8011794:	1d3b      	adds	r3, r7, #4
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 801179c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80117a0:	210b      	movs	r1, #11
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7ff f8c2 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 80117a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80117ac:	4619      	mov	r1, r3
 80117ae:	4620      	mov	r0, r4
 80117b0:	f008 ff60 	bl	801a674 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indDTC.setXY(495, 232);
 80117b4:	1d3b      	adds	r3, r7, #4
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80117bc:	22e8      	movs	r2, #232	; 0xe8
 80117be:	f240 11ef 	movw	r1, #495	; 0x1ef
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7ff f95c 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    indDTC.setBitmap(touchgfx::Bitmap(BITMAP_INDDTC_ID));
 80117c8:	1d3b      	adds	r3, r7, #4
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 80117d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80117d4:	2104      	movs	r1, #4
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7ff f8a8 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 80117dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80117e0:	4619      	mov	r1, r3
 80117e2:	4620      	mov	r0, r4
 80117e4:	f008 ff46 	bl	801a674 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indECT.setXY(451, 377);
 80117e8:	1d3b      	adds	r3, r7, #4
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80117f0:	f240 1279 	movw	r2, #377	; 0x179
 80117f4:	f240 11c3 	movw	r1, #451	; 0x1c3
 80117f8:	4618      	mov	r0, r3
 80117fa:	f7ff f941 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    indECT.setBitmap(touchgfx::Bitmap(BITMAP_INDECT_ID));
 80117fe:	1d3b      	adds	r3, r7, #4
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	f503 7409 	add.w	r4, r3, #548	; 0x224
 8011806:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801180a:	2105      	movs	r1, #5
 801180c:	4618      	mov	r0, r3
 801180e:	f7ff f88d 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 8011812:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011816:	4619      	mov	r1, r3
 8011818:	4620      	mov	r0, r4
 801181a:	f008 ff2b 	bl	801a674 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indLow.setXY(452, 287);
 801181e:	1d3b      	adds	r3, r7, #4
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8011826:	f240 121f 	movw	r2, #287	; 0x11f
 801182a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 801182e:	4618      	mov	r0, r3
 8011830:	f7ff f926 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    indLow.setBitmap(touchgfx::Bitmap(BITMAP_INDLOW_ID));
 8011834:	1d3b      	adds	r3, r7, #4
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	f503 7414 	add.w	r4, r3, #592	; 0x250
 801183c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011840:	2109      	movs	r1, #9
 8011842:	4618      	mov	r0, r3
 8011844:	f7ff f872 	bl	801092c <_ZN8touchgfx6BitmapC1Et>
 8011848:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801184c:	4619      	mov	r1, r3
 801184e:	4620      	mov	r0, r4
 8011850:	f008 ff10 	bl	801a674 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    map_value.setXY(942, 0);
 8011854:	1d3b      	adds	r3, r7, #4
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 801185c:	2200      	movs	r2, #0
 801185e:	f240 31ae 	movw	r1, #942	; 0x3ae
 8011862:	4618      	mov	r0, r3
 8011864:	f7ff f90c 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    map_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011868:	1d3b      	adds	r3, r7, #4
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	f503 741f 	add.w	r4, r3, #636	; 0x27c
 8011870:	f207 23b3 	addw	r3, r7, #691	; 0x2b3
 8011874:	22ff      	movs	r2, #255	; 0xff
 8011876:	701a      	strb	r2, [r3, #0]
 8011878:	f207 23b2 	addw	r3, r7, #690	; 0x2b2
 801187c:	22ff      	movs	r2, #255	; 0xff
 801187e:	701a      	strb	r2, [r3, #0]
 8011880:	f207 23b1 	addw	r3, r7, #689	; 0x2b1
 8011884:	22ff      	movs	r2, #255	; 0xff
 8011886:	701a      	strb	r2, [r3, #0]
 8011888:	f207 23b3 	addw	r3, r7, #691	; 0x2b3
 801188c:	781b      	ldrb	r3, [r3, #0]
 801188e:	041b      	lsls	r3, r3, #16
 8011890:	461a      	mov	r2, r3
 8011892:	f207 23b2 	addw	r3, r7, #690	; 0x2b2
 8011896:	781b      	ldrb	r3, [r3, #0]
 8011898:	021b      	lsls	r3, r3, #8
 801189a:	431a      	orrs	r2, r3
 801189c:	f207 23b1 	addw	r3, r7, #689	; 0x2b1
 80118a0:	781b      	ldrb	r3, [r3, #0]
 80118a2:	4313      	orrs	r3, r2
 80118a4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80118a8:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80118ac:	4611      	mov	r1, r2
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7ff f816 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 80118b4:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	461a      	mov	r2, r3
 80118bc:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80118c0:	601c      	str	r4, [r3, #0]
 80118c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80118c6:	601a      	str	r2, [r3, #0]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80118c8:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80118d2:	6812      	ldr	r2, [r2, #0]
 80118d4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80118d6:	bf00      	nop
    map_value.setLinespacing(0);
 80118d8:	1d3b      	adds	r3, r7, #4
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 80118e0:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 80118e4:	601a      	str	r2, [r3, #0]
 80118e6:	f207 23ba 	addw	r3, r7, #698	; 0x2ba
 80118ea:	2200      	movs	r2, #0
 80118ec:	801a      	strh	r2, [r3, #0]
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 80118ee:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	f207 22ba 	addw	r2, r7, #698	; 0x2ba
 80118f8:	8812      	ldrh	r2, [r2, #0]
 80118fa:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80118fc:	bf00      	nop
    Unicode::snprintf(map_valueBuffer, MAP_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_1H44).getText());
 80118fe:	1d3b      	adds	r3, r7, #4
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 8011906:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801190a:	2118      	movs	r1, #24
 801190c:	4618      	mov	r0, r3
 801190e:	f7ff fac3 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8011912:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8011916:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 801191a:	601a      	str	r2, [r3, #0]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801191c:	4bc5      	ldr	r3, [pc, #788]	; (8011c34 <_ZN15Screen1ViewBaseC1Ev+0xa18>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d105      	bne.n	8011930 <_ZN15Screen1ViewBaseC1Ev+0x714>
 8011924:	4bc4      	ldr	r3, [pc, #784]	; (8011c38 <_ZN15Screen1ViewBaseC1Ev+0xa1c>)
 8011926:	4ac5      	ldr	r2, [pc, #788]	; (8011c3c <_ZN15Screen1ViewBaseC1Ev+0xa20>)
 8011928:	21ae      	movs	r1, #174	; 0xae
 801192a:	48c5      	ldr	r0, [pc, #788]	; (8011c40 <_ZN15Screen1ViewBaseC1Ev+0xa24>)
 801192c:	f01c fac8 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011930:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	889a      	ldrh	r2, [r3, #4]
 8011938:	4bc2      	ldr	r3, [pc, #776]	; (8011c44 <_ZN15Screen1ViewBaseC1Ev+0xa28>)
 801193a:	881b      	ldrh	r3, [r3, #0]
 801193c:	429a      	cmp	r2, r3
 801193e:	d305      	bcc.n	801194c <_ZN15Screen1ViewBaseC1Ev+0x730>
 8011940:	4bc1      	ldr	r3, [pc, #772]	; (8011c48 <_ZN15Screen1ViewBaseC1Ev+0xa2c>)
 8011942:	4abe      	ldr	r2, [pc, #760]	; (8011c3c <_ZN15Screen1ViewBaseC1Ev+0xa20>)
 8011944:	21af      	movs	r1, #175	; 0xaf
 8011946:	48be      	ldr	r0, [pc, #760]	; (8011c40 <_ZN15Screen1ViewBaseC1Ev+0xa24>)
 8011948:	f01c faba 	bl	802dec0 <__assert_func>
    }
 801194c:	bf00      	nop
        return texts->getText(typedTextId);
 801194e:	4bbf      	ldr	r3, [pc, #764]	; (8011c4c <_ZN15Screen1ViewBaseC1Ev+0xa30>)
 8011950:	681a      	ldr	r2, [r3, #0]
 8011952:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011956:	889b      	ldrh	r3, [r3, #4]
 8011958:	4619      	mov	r1, r3
 801195a:	4610      	mov	r0, r2
 801195c:	f002 fde0 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8011960:	4603      	mov	r3, r0
 8011962:	bf00      	nop
 8011964:	4aba      	ldr	r2, [pc, #744]	; (8011c50 <_ZN15Screen1ViewBaseC1Ev+0xa34>)
 8011966:	2120      	movs	r1, #32
 8011968:	4620      	mov	r0, r4
 801196a:	f00d fcf5 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801196e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011972:	4618      	mov	r0, r3
 8011974:	f7fe f910 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    map_value.setWildcard(map_valueBuffer);
 8011978:	1d3b      	adds	r3, r7, #4
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 8011980:	1d3b      	adds	r3, r7, #4
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8011988:	4619      	mov	r1, r3
 801198a:	4610      	mov	r0, r2
 801198c:	f7ff fb12 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_value.resizeToCurrentText();
 8011990:	1d3b      	adds	r3, r7, #4
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8011998:	4618      	mov	r0, r3
 801199a:	f008 fb11 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LQYM));
 801199e:	1d3b      	adds	r3, r7, #4
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	f503 741f 	add.w	r4, r3, #636	; 0x27c
 80119a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80119aa:	2116      	movs	r1, #22
 80119ac:	4618      	mov	r0, r3
 80119ae:	f7ff fa73 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 80119b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80119b6:	4619      	mov	r1, r3
 80119b8:	4620      	mov	r0, r4
 80119ba:	f008 fb1e 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80119be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7fe f8e8 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    map_label.setXY(889, 100);
 80119c8:	1d3b      	adds	r3, r7, #4
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80119d0:	2264      	movs	r2, #100	; 0x64
 80119d2:	f240 3179 	movw	r1, #889	; 0x379
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7ff f852 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    map_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80119dc:	1d3b      	adds	r3, r7, #4
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 80119e4:	f207 23c7 	addw	r3, r7, #711	; 0x2c7
 80119e8:	22ff      	movs	r2, #255	; 0xff
 80119ea:	701a      	strb	r2, [r3, #0]
 80119ec:	f207 23c6 	addw	r3, r7, #710	; 0x2c6
 80119f0:	22ff      	movs	r2, #255	; 0xff
 80119f2:	701a      	strb	r2, [r3, #0]
 80119f4:	f207 23c5 	addw	r3, r7, #709	; 0x2c5
 80119f8:	22ff      	movs	r2, #255	; 0xff
 80119fa:	701a      	strb	r2, [r3, #0]
 80119fc:	f207 23c7 	addw	r3, r7, #711	; 0x2c7
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	041b      	lsls	r3, r3, #16
 8011a04:	461a      	mov	r2, r3
 8011a06:	f207 23c6 	addw	r3, r7, #710	; 0x2c6
 8011a0a:	781b      	ldrb	r3, [r3, #0]
 8011a0c:	021b      	lsls	r3, r3, #8
 8011a0e:	431a      	orrs	r2, r3
 8011a10:	f207 23c5 	addw	r3, r7, #709	; 0x2c5
 8011a14:	781b      	ldrb	r3, [r3, #0]
 8011a16:	4313      	orrs	r3, r2
 8011a18:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011a1c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8011a20:	4611      	mov	r1, r2
 8011a22:	4618      	mov	r0, r3
 8011a24:	f7fe ff5c 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 8011a28:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	461a      	mov	r2, r3
 8011a30:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8011a34:	601c      	str	r4, [r3, #0]
 8011a36:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011a3a:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011a3c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8011a46:	6812      	ldr	r2, [r2, #0]
 8011a48:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011a4a:	bf00      	nop
    map_label.setLinespacing(0);
 8011a4c:	1d3b      	adds	r3, r7, #4
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 8011a54:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8011a58:	601a      	str	r2, [r3, #0]
 8011a5a:	f207 23ce 	addw	r3, r7, #718	; 0x2ce
 8011a5e:	2200      	movs	r2, #0
 8011a60:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011a62:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	f207 22ce 	addw	r2, r7, #718	; 0x2ce
 8011a6c:	8812      	ldrh	r2, [r2, #0]
 8011a6e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011a70:	bf00      	nop
    Unicode::snprintf(map_labelBuffer, MAP_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_FXL2).getText());
 8011a72:	1d3b      	adds	r3, r7, #4
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	f503 6426 	add.w	r4, r3, #2656	; 0xa60
 8011a7a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8011a7e:	2119      	movs	r1, #25
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7ff fa09 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8011a86:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8011a8a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8011a8e:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011a90:	4b68      	ldr	r3, [pc, #416]	; (8011c34 <_ZN15Screen1ViewBaseC1Ev+0xa18>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d105      	bne.n	8011aa4 <_ZN15Screen1ViewBaseC1Ev+0x888>
 8011a98:	4b67      	ldr	r3, [pc, #412]	; (8011c38 <_ZN15Screen1ViewBaseC1Ev+0xa1c>)
 8011a9a:	4a68      	ldr	r2, [pc, #416]	; (8011c3c <_ZN15Screen1ViewBaseC1Ev+0xa20>)
 8011a9c:	21ae      	movs	r1, #174	; 0xae
 8011a9e:	4868      	ldr	r0, [pc, #416]	; (8011c40 <_ZN15Screen1ViewBaseC1Ev+0xa24>)
 8011aa0:	f01c fa0e 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011aa4:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	889a      	ldrh	r2, [r3, #4]
 8011aac:	4b65      	ldr	r3, [pc, #404]	; (8011c44 <_ZN15Screen1ViewBaseC1Ev+0xa28>)
 8011aae:	881b      	ldrh	r3, [r3, #0]
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d305      	bcc.n	8011ac0 <_ZN15Screen1ViewBaseC1Ev+0x8a4>
 8011ab4:	4b64      	ldr	r3, [pc, #400]	; (8011c48 <_ZN15Screen1ViewBaseC1Ev+0xa2c>)
 8011ab6:	4a61      	ldr	r2, [pc, #388]	; (8011c3c <_ZN15Screen1ViewBaseC1Ev+0xa20>)
 8011ab8:	21af      	movs	r1, #175	; 0xaf
 8011aba:	4861      	ldr	r0, [pc, #388]	; (8011c40 <_ZN15Screen1ViewBaseC1Ev+0xa24>)
 8011abc:	f01c fa00 	bl	802dec0 <__assert_func>
    }
 8011ac0:	bf00      	nop
        return texts->getText(typedTextId);
 8011ac2:	4b62      	ldr	r3, [pc, #392]	; (8011c4c <_ZN15Screen1ViewBaseC1Ev+0xa30>)
 8011ac4:	681a      	ldr	r2, [r3, #0]
 8011ac6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8011aca:	889b      	ldrh	r3, [r3, #4]
 8011acc:	4619      	mov	r1, r3
 8011ace:	4610      	mov	r0, r2
 8011ad0:	f002 fd26 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	bf00      	nop
 8011ad8:	4a5d      	ldr	r2, [pc, #372]	; (8011c50 <_ZN15Screen1ViewBaseC1Ev+0xa34>)
 8011ada:	210a      	movs	r1, #10
 8011adc:	4620      	mov	r0, r4
 8011ade:	f00d fc3b 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011ae2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f7fe f856 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    map_label.setWildcard(map_labelBuffer);
 8011aec:	1d3b      	adds	r3, r7, #4
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 8011af4:	1d3b      	adds	r3, r7, #4
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 8011afc:	4619      	mov	r1, r3
 8011afe:	4610      	mov	r0, r2
 8011b00:	f7ff fa58 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_label.resizeToCurrentText();
 8011b04:	1d3b      	adds	r3, r7, #4
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f008 fa57 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W2NZ));
 8011b12:	1d3b      	adds	r3, r7, #4
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8011b1a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8011b1e:	2114      	movs	r1, #20
 8011b20:	4618      	mov	r0, r3
 8011b22:	f7ff f9b9 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8011b26:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	4620      	mov	r0, r4
 8011b2e:	f008 fa64 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011b32:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7fe f82e 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    map_units.setXY(779, 100);
 8011b3c:	1d3b      	adds	r3, r7, #4
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8011b44:	2264      	movs	r2, #100	; 0x64
 8011b46:	f240 310b 	movw	r1, #779	; 0x30b
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7fe ff98 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    map_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011b50:	1d3b      	adds	r3, r7, #4
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	f503 743f 	add.w	r4, r3, #764	; 0x2fc
 8011b58:	f207 23db 	addw	r3, r7, #731	; 0x2db
 8011b5c:	22ff      	movs	r2, #255	; 0xff
 8011b5e:	701a      	strb	r2, [r3, #0]
 8011b60:	f207 23da 	addw	r3, r7, #730	; 0x2da
 8011b64:	22ff      	movs	r2, #255	; 0xff
 8011b66:	701a      	strb	r2, [r3, #0]
 8011b68:	f207 23d9 	addw	r3, r7, #729	; 0x2d9
 8011b6c:	22ff      	movs	r2, #255	; 0xff
 8011b6e:	701a      	strb	r2, [r3, #0]
 8011b70:	f207 23db 	addw	r3, r7, #731	; 0x2db
 8011b74:	781b      	ldrb	r3, [r3, #0]
 8011b76:	041b      	lsls	r3, r3, #16
 8011b78:	461a      	mov	r2, r3
 8011b7a:	f207 23da 	addw	r3, r7, #730	; 0x2da
 8011b7e:	781b      	ldrb	r3, [r3, #0]
 8011b80:	021b      	lsls	r3, r3, #8
 8011b82:	431a      	orrs	r2, r3
 8011b84:	f207 23d9 	addw	r3, r7, #729	; 0x2d9
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	4313      	orrs	r3, r2
 8011b8c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011b90:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8011b94:	4611      	mov	r1, r2
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7fe fea2 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 8011b9c:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	461a      	mov	r2, r3
 8011ba4:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8011ba8:	601c      	str	r4, [r3, #0]
 8011baa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011bae:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011bb0:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8011bba:	6812      	ldr	r2, [r2, #0]
 8011bbc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011bbe:	bf00      	nop
    map_units.setLinespacing(0);
 8011bc0:	1d3b      	adds	r3, r7, #4
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	f503 723f 	add.w	r2, r3, #764	; 0x2fc
 8011bc8:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8011bcc:	601a      	str	r2, [r3, #0]
 8011bce:	f207 23e2 	addw	r3, r7, #738	; 0x2e2
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011bd6:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	f207 22e2 	addw	r2, r7, #738	; 0x2e2
 8011be0:	8812      	ldrh	r2, [r2, #0]
 8011be2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011be4:	bf00      	nop
    Unicode::snprintf(map_unitsBuffer, MAP_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_13X6).getText());
 8011be6:	1d3b      	adds	r3, r7, #4
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	f603 2474 	addw	r4, r3, #2676	; 0xa74
 8011bee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8011bf2:	2117      	movs	r1, #23
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f7ff f94f 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8011bfa:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8011bfe:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8011c02:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011c04:	4b0b      	ldr	r3, [pc, #44]	; (8011c34 <_ZN15Screen1ViewBaseC1Ev+0xa18>)
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d105      	bne.n	8011c18 <_ZN15Screen1ViewBaseC1Ev+0x9fc>
 8011c0c:	4b0a      	ldr	r3, [pc, #40]	; (8011c38 <_ZN15Screen1ViewBaseC1Ev+0xa1c>)
 8011c0e:	4a0b      	ldr	r2, [pc, #44]	; (8011c3c <_ZN15Screen1ViewBaseC1Ev+0xa20>)
 8011c10:	21ae      	movs	r1, #174	; 0xae
 8011c12:	480b      	ldr	r0, [pc, #44]	; (8011c40 <_ZN15Screen1ViewBaseC1Ev+0xa24>)
 8011c14:	f01c f954 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011c18:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	889a      	ldrh	r2, [r3, #4]
 8011c20:	4b08      	ldr	r3, [pc, #32]	; (8011c44 <_ZN15Screen1ViewBaseC1Ev+0xa28>)
 8011c22:	881b      	ldrh	r3, [r3, #0]
 8011c24:	429a      	cmp	r2, r3
 8011c26:	d315      	bcc.n	8011c54 <_ZN15Screen1ViewBaseC1Ev+0xa38>
 8011c28:	4b07      	ldr	r3, [pc, #28]	; (8011c48 <_ZN15Screen1ViewBaseC1Ev+0xa2c>)
 8011c2a:	4a04      	ldr	r2, [pc, #16]	; (8011c3c <_ZN15Screen1ViewBaseC1Ev+0xa20>)
 8011c2c:	21af      	movs	r1, #175	; 0xaf
 8011c2e:	4804      	ldr	r0, [pc, #16]	; (8011c40 <_ZN15Screen1ViewBaseC1Ev+0xa24>)
 8011c30:	f01c f946 	bl	802dec0 <__assert_func>
 8011c34:	200097cc 	.word	0x200097cc
 8011c38:	0802f4a0 	.word	0x0802f4a0
 8011c3c:	0802f4e4 	.word	0x0802f4e4
 8011c40:	0802f514 	.word	0x0802f514
 8011c44:	200097d0 	.word	0x200097d0
 8011c48:	0802f558 	.word	0x0802f558
 8011c4c:	200097d8 	.word	0x200097d8
 8011c50:	0802f5ac 	.word	0x0802f5ac
    }
 8011c54:	bf00      	nop
        return texts->getText(typedTextId);
 8011c56:	4bb9      	ldr	r3, [pc, #740]	; (8011f3c <_ZN15Screen1ViewBaseC1Ev+0xd20>)
 8011c58:	681a      	ldr	r2, [r3, #0]
 8011c5a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8011c5e:	889b      	ldrh	r3, [r3, #4]
 8011c60:	4619      	mov	r1, r3
 8011c62:	4610      	mov	r0, r2
 8011c64:	f002 fc5c 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	bf00      	nop
 8011c6c:	4ab4      	ldr	r2, [pc, #720]	; (8011f40 <_ZN15Screen1ViewBaseC1Ev+0xd24>)
 8011c6e:	210a      	movs	r1, #10
 8011c70:	4620      	mov	r0, r4
 8011c72:	f00d fb71 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011c76:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f7fd ff8c 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    map_units.setWildcard(map_unitsBuffer);
 8011c80:	1d3b      	adds	r3, r7, #4
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	f503 723f 	add.w	r2, r3, #764	; 0x2fc
 8011c88:	1d3b      	adds	r3, r7, #4
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	f603 2374 	addw	r3, r3, #2676	; 0xa74
 8011c90:	4619      	mov	r1, r3
 8011c92:	4610      	mov	r0, r2
 8011c94:	f7ff f98e 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_units.resizeToCurrentText();
 8011c98:	1d3b      	adds	r3, r7, #4
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f008 f98d 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_G76O));
 8011ca6:	1d3b      	adds	r3, r7, #4
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	f503 743f 	add.w	r4, r3, #764	; 0x2fc
 8011cae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8011cb2:	2115      	movs	r1, #21
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f7ff f8ef 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8011cba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8011cbe:	4619      	mov	r1, r3
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	f008 f99a 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011cc6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7fd ff64 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    batt_value.setXY(942, 148);
 8011cd0:	1d3b      	adds	r3, r7, #4
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8011cd8:	2294      	movs	r2, #148	; 0x94
 8011cda:	f240 31ae 	movw	r1, #942	; 0x3ae
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7fe fece 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    batt_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011ce4:	1d3b      	adds	r3, r7, #4
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	f503 744f 	add.w	r4, r3, #828	; 0x33c
 8011cec:	f207 23ef 	addw	r3, r7, #751	; 0x2ef
 8011cf0:	22ff      	movs	r2, #255	; 0xff
 8011cf2:	701a      	strb	r2, [r3, #0]
 8011cf4:	f207 23ee 	addw	r3, r7, #750	; 0x2ee
 8011cf8:	22ff      	movs	r2, #255	; 0xff
 8011cfa:	701a      	strb	r2, [r3, #0]
 8011cfc:	f207 23ed 	addw	r3, r7, #749	; 0x2ed
 8011d00:	22ff      	movs	r2, #255	; 0xff
 8011d02:	701a      	strb	r2, [r3, #0]
 8011d04:	f207 23ef 	addw	r3, r7, #751	; 0x2ef
 8011d08:	781b      	ldrb	r3, [r3, #0]
 8011d0a:	041b      	lsls	r3, r3, #16
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	f207 23ee 	addw	r3, r7, #750	; 0x2ee
 8011d12:	781b      	ldrb	r3, [r3, #0]
 8011d14:	021b      	lsls	r3, r3, #8
 8011d16:	431a      	orrs	r2, r3
 8011d18:	f207 23ed 	addw	r3, r7, #749	; 0x2ed
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	4313      	orrs	r3, r2
 8011d20:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011d24:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8011d28:	4611      	mov	r1, r2
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f7fe fdd8 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 8011d30:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	461a      	mov	r2, r3
 8011d38:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8011d3c:	601c      	str	r4, [r3, #0]
 8011d3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011d42:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011d44:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011d4e:	6812      	ldr	r2, [r2, #0]
 8011d50:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011d52:	bf00      	nop
    batt_value.setLinespacing(0);
 8011d54:	1d3b      	adds	r3, r7, #4
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8011d5c:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8011d60:	601a      	str	r2, [r3, #0]
 8011d62:	f207 23f6 	addw	r3, r7, #758	; 0x2f6
 8011d66:	2200      	movs	r2, #0
 8011d68:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011d6a:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	f207 22f6 	addw	r2, r7, #758	; 0x2f6
 8011d74:	8812      	ldrh	r2, [r2, #0]
 8011d76:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011d78:	bf00      	nop
    Unicode::snprintf(batt_valueBuffer, BATT_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_TSMP).getText());
 8011d7a:	1d3b      	adds	r3, r7, #4
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	f603 2488 	addw	r4, r3, #2696	; 0xa88
 8011d82:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8011d86:	211d      	movs	r1, #29
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f7ff f885 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8011d8e:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8011d92:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8011d96:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011d98:	4b6a      	ldr	r3, [pc, #424]	; (8011f44 <_ZN15Screen1ViewBaseC1Ev+0xd28>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d105      	bne.n	8011dac <_ZN15Screen1ViewBaseC1Ev+0xb90>
 8011da0:	4b69      	ldr	r3, [pc, #420]	; (8011f48 <_ZN15Screen1ViewBaseC1Ev+0xd2c>)
 8011da2:	4a6a      	ldr	r2, [pc, #424]	; (8011f4c <_ZN15Screen1ViewBaseC1Ev+0xd30>)
 8011da4:	21ae      	movs	r1, #174	; 0xae
 8011da6:	486a      	ldr	r0, [pc, #424]	; (8011f50 <_ZN15Screen1ViewBaseC1Ev+0xd34>)
 8011da8:	f01c f88a 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011dac:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	889a      	ldrh	r2, [r3, #4]
 8011db4:	4b67      	ldr	r3, [pc, #412]	; (8011f54 <_ZN15Screen1ViewBaseC1Ev+0xd38>)
 8011db6:	881b      	ldrh	r3, [r3, #0]
 8011db8:	429a      	cmp	r2, r3
 8011dba:	d305      	bcc.n	8011dc8 <_ZN15Screen1ViewBaseC1Ev+0xbac>
 8011dbc:	4b66      	ldr	r3, [pc, #408]	; (8011f58 <_ZN15Screen1ViewBaseC1Ev+0xd3c>)
 8011dbe:	4a63      	ldr	r2, [pc, #396]	; (8011f4c <_ZN15Screen1ViewBaseC1Ev+0xd30>)
 8011dc0:	21af      	movs	r1, #175	; 0xaf
 8011dc2:	4863      	ldr	r0, [pc, #396]	; (8011f50 <_ZN15Screen1ViewBaseC1Ev+0xd34>)
 8011dc4:	f01c f87c 	bl	802dec0 <__assert_func>
    }
 8011dc8:	bf00      	nop
        return texts->getText(typedTextId);
 8011dca:	4b5c      	ldr	r3, [pc, #368]	; (8011f3c <_ZN15Screen1ViewBaseC1Ev+0xd20>)
 8011dcc:	681a      	ldr	r2, [r3, #0]
 8011dce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8011dd2:	889b      	ldrh	r3, [r3, #4]
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	4610      	mov	r0, r2
 8011dd8:	f002 fba2 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	bf00      	nop
 8011de0:	4a57      	ldr	r2, [pc, #348]	; (8011f40 <_ZN15Screen1ViewBaseC1Ev+0xd24>)
 8011de2:	2120      	movs	r1, #32
 8011de4:	4620      	mov	r0, r4
 8011de6:	f00d fab7 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011dea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8011dee:	4618      	mov	r0, r3
 8011df0:	f7fd fed2 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    batt_value.setWildcard(batt_valueBuffer);
 8011df4:	1d3b      	adds	r3, r7, #4
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8011dfc:	1d3b      	adds	r3, r7, #4
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8011e04:	4619      	mov	r1, r3
 8011e06:	4610      	mov	r0, r2
 8011e08:	f7ff f8d4 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_value.resizeToCurrentText();
 8011e0c:	1d3b      	adds	r3, r7, #4
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8011e14:	4618      	mov	r0, r3
 8011e16:	f008 f8d3 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_391O));
 8011e1a:	1d3b      	adds	r3, r7, #4
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	f503 744f 	add.w	r4, r3, #828	; 0x33c
 8011e22:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8011e26:	2113      	movs	r1, #19
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7ff f835 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8011e2e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8011e32:	4619      	mov	r1, r3
 8011e34:	4620      	mov	r0, r4
 8011e36:	f008 f8e0 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011e3a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7fd feaa 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    batt_label.setXY(888, 247);
 8011e44:	1d3b      	adds	r3, r7, #4
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8011e4c:	22f7      	movs	r2, #247	; 0xf7
 8011e4e:	f44f 715e 	mov.w	r1, #888	; 0x378
 8011e52:	4618      	mov	r0, r3
 8011e54:	f7fe fe14 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    batt_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011e58:	1d3b      	adds	r3, r7, #4
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	f503 745f 	add.w	r4, r3, #892	; 0x37c
 8011e60:	f207 3303 	addw	r3, r7, #771	; 0x303
 8011e64:	22ff      	movs	r2, #255	; 0xff
 8011e66:	701a      	strb	r2, [r3, #0]
 8011e68:	f207 3302 	addw	r3, r7, #770	; 0x302
 8011e6c:	22ff      	movs	r2, #255	; 0xff
 8011e6e:	701a      	strb	r2, [r3, #0]
 8011e70:	f207 3301 	addw	r3, r7, #769	; 0x301
 8011e74:	22ff      	movs	r2, #255	; 0xff
 8011e76:	701a      	strb	r2, [r3, #0]
 8011e78:	f207 3303 	addw	r3, r7, #771	; 0x303
 8011e7c:	781b      	ldrb	r3, [r3, #0]
 8011e7e:	041b      	lsls	r3, r3, #16
 8011e80:	461a      	mov	r2, r3
 8011e82:	f207 3302 	addw	r3, r7, #770	; 0x302
 8011e86:	781b      	ldrb	r3, [r3, #0]
 8011e88:	021b      	lsls	r3, r3, #8
 8011e8a:	431a      	orrs	r2, r3
 8011e8c:	f207 3301 	addw	r3, r7, #769	; 0x301
 8011e90:	781b      	ldrb	r3, [r3, #0]
 8011e92:	4313      	orrs	r3, r2
 8011e94:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011e98:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8011e9c:	4611      	mov	r1, r2
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7fe fd1e 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 8011ea4:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	461a      	mov	r2, r3
 8011eac:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8011eb0:	601c      	str	r4, [r3, #0]
 8011eb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011eb6:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011eb8:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8011ec2:	6812      	ldr	r2, [r2, #0]
 8011ec4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011ec6:	bf00      	nop
    batt_label.setLinespacing(0);
 8011ec8:	1d3b      	adds	r3, r7, #4
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	f503 725f 	add.w	r2, r3, #892	; 0x37c
 8011ed0:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8011ed4:	601a      	str	r2, [r3, #0]
 8011ed6:	f207 330a 	addw	r3, r7, #778	; 0x30a
 8011eda:	2200      	movs	r2, #0
 8011edc:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011ede:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	f207 320a 	addw	r2, r7, #778	; 0x30a
 8011ee8:	8812      	ldrh	r2, [r2, #0]
 8011eea:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011eec:	bf00      	nop
    Unicode::snprintf(batt_labelBuffer, BATT_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_RUP7).getText());
 8011eee:	1d3b      	adds	r3, r7, #4
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	f603 24c8 	addw	r4, r3, #2760	; 0xac8
 8011ef6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8011efa:	2121      	movs	r1, #33	; 0x21
 8011efc:	4618      	mov	r0, r3
 8011efe:	f7fe ffcb 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8011f02:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8011f06:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8011f0a:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011f0c:	4b0d      	ldr	r3, [pc, #52]	; (8011f44 <_ZN15Screen1ViewBaseC1Ev+0xd28>)
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d105      	bne.n	8011f20 <_ZN15Screen1ViewBaseC1Ev+0xd04>
 8011f14:	4b0c      	ldr	r3, [pc, #48]	; (8011f48 <_ZN15Screen1ViewBaseC1Ev+0xd2c>)
 8011f16:	4a0d      	ldr	r2, [pc, #52]	; (8011f4c <_ZN15Screen1ViewBaseC1Ev+0xd30>)
 8011f18:	21ae      	movs	r1, #174	; 0xae
 8011f1a:	480d      	ldr	r0, [pc, #52]	; (8011f50 <_ZN15Screen1ViewBaseC1Ev+0xd34>)
 8011f1c:	f01b ffd0 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011f20:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	889a      	ldrh	r2, [r3, #4]
 8011f28:	4b0a      	ldr	r3, [pc, #40]	; (8011f54 <_ZN15Screen1ViewBaseC1Ev+0xd38>)
 8011f2a:	881b      	ldrh	r3, [r3, #0]
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	d315      	bcc.n	8011f5c <_ZN15Screen1ViewBaseC1Ev+0xd40>
 8011f30:	4b09      	ldr	r3, [pc, #36]	; (8011f58 <_ZN15Screen1ViewBaseC1Ev+0xd3c>)
 8011f32:	4a06      	ldr	r2, [pc, #24]	; (8011f4c <_ZN15Screen1ViewBaseC1Ev+0xd30>)
 8011f34:	21af      	movs	r1, #175	; 0xaf
 8011f36:	4806      	ldr	r0, [pc, #24]	; (8011f50 <_ZN15Screen1ViewBaseC1Ev+0xd34>)
 8011f38:	f01b ffc2 	bl	802dec0 <__assert_func>
 8011f3c:	200097d8 	.word	0x200097d8
 8011f40:	0802f5ac 	.word	0x0802f5ac
 8011f44:	200097cc 	.word	0x200097cc
 8011f48:	0802f4a0 	.word	0x0802f4a0
 8011f4c:	0802f4e4 	.word	0x0802f4e4
 8011f50:	0802f514 	.word	0x0802f514
 8011f54:	200097d0 	.word	0x200097d0
 8011f58:	0802f558 	.word	0x0802f558
    }
 8011f5c:	bf00      	nop
        return texts->getText(typedTextId);
 8011f5e:	4bba      	ldr	r3, [pc, #744]	; (8012248 <_ZN15Screen1ViewBaseC1Ev+0x102c>)
 8011f60:	681a      	ldr	r2, [r3, #0]
 8011f62:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8011f66:	889b      	ldrh	r3, [r3, #4]
 8011f68:	4619      	mov	r1, r3
 8011f6a:	4610      	mov	r0, r2
 8011f6c:	f002 fad8 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8011f70:	4603      	mov	r3, r0
 8011f72:	bf00      	nop
 8011f74:	4ab5      	ldr	r2, [pc, #724]	; (801224c <_ZN15Screen1ViewBaseC1Ev+0x1030>)
 8011f76:	210a      	movs	r1, #10
 8011f78:	4620      	mov	r0, r4
 8011f7a:	f00d f9ed 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011f7e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7fd fe08 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    batt_label.setWildcard(batt_labelBuffer);
 8011f88:	1d3b      	adds	r3, r7, #4
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	f503 725f 	add.w	r2, r3, #892	; 0x37c
 8011f90:	1d3b      	adds	r3, r7, #4
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 8011f98:	4619      	mov	r1, r3
 8011f9a:	4610      	mov	r0, r2
 8011f9c:	f7ff f80a 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_label.resizeToCurrentText();
 8011fa0:	1d3b      	adds	r3, r7, #4
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f008 f809 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4QE0));
 8011fae:	1d3b      	adds	r3, r7, #4
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	f503 745f 	add.w	r4, r3, #892	; 0x37c
 8011fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fba:	2112      	movs	r1, #18
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f7fe ff6b 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8011fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fc6:	4619      	mov	r1, r3
 8011fc8:	4620      	mov	r0, r4
 8011fca:	f008 f816 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7fd fde0 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    batt_units.setXY(831, 247);
 8011fd8:	1d3b      	adds	r3, r7, #4
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8011fe0:	22f7      	movs	r2, #247	; 0xf7
 8011fe2:	f240 313f 	movw	r1, #831	; 0x33f
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f7fe fd4a 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    batt_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011fec:	1d3b      	adds	r3, r7, #4
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 8011ff4:	f207 3317 	addw	r3, r7, #791	; 0x317
 8011ff8:	22ff      	movs	r2, #255	; 0xff
 8011ffa:	701a      	strb	r2, [r3, #0]
 8011ffc:	f207 3316 	addw	r3, r7, #790	; 0x316
 8012000:	22ff      	movs	r2, #255	; 0xff
 8012002:	701a      	strb	r2, [r3, #0]
 8012004:	f207 3315 	addw	r3, r7, #789	; 0x315
 8012008:	22ff      	movs	r2, #255	; 0xff
 801200a:	701a      	strb	r2, [r3, #0]
 801200c:	f207 3317 	addw	r3, r7, #791	; 0x317
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	041b      	lsls	r3, r3, #16
 8012014:	461a      	mov	r2, r3
 8012016:	f207 3316 	addw	r3, r7, #790	; 0x316
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	021b      	lsls	r3, r3, #8
 801201e:	431a      	orrs	r2, r3
 8012020:	f207 3315 	addw	r3, r7, #789	; 0x315
 8012024:	781b      	ldrb	r3, [r3, #0]
 8012026:	4313      	orrs	r3, r2
 8012028:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801202c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8012030:	4611      	mov	r1, r2
 8012032:	4618      	mov	r0, r3
 8012034:	f7fe fc54 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 8012038:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	461a      	mov	r2, r3
 8012040:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8012044:	601c      	str	r4, [r3, #0]
 8012046:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801204a:	601a      	str	r2, [r3, #0]
        this->color = color;
 801204c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8012056:	6812      	ldr	r2, [r2, #0]
 8012058:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801205a:	bf00      	nop
    batt_units.setLinespacing(0);
 801205c:	1d3b      	adds	r3, r7, #4
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	f503 726f 	add.w	r2, r3, #956	; 0x3bc
 8012064:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8012068:	601a      	str	r2, [r3, #0]
 801206a:	f207 331e 	addw	r3, r7, #798	; 0x31e
 801206e:	2200      	movs	r2, #0
 8012070:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8012072:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	f207 321e 	addw	r2, r7, #798	; 0x31e
 801207c:	8812      	ldrh	r2, [r2, #0]
 801207e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012080:	bf00      	nop
    Unicode::snprintf(batt_unitsBuffer, BATT_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_F7I8).getText());
 8012082:	1d3b      	adds	r3, r7, #4
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	f603 24dc 	addw	r4, r3, #2780	; 0xadc
 801208a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801208e:	2120      	movs	r1, #32
 8012090:	4618      	mov	r0, r3
 8012092:	f7fe ff01 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8012096:	f507 7349 	add.w	r3, r7, #804	; 0x324
 801209a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801209e:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80120a0:	4b6b      	ldr	r3, [pc, #428]	; (8012250 <_ZN15Screen1ViewBaseC1Ev+0x1034>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d105      	bne.n	80120b4 <_ZN15Screen1ViewBaseC1Ev+0xe98>
 80120a8:	4b6a      	ldr	r3, [pc, #424]	; (8012254 <_ZN15Screen1ViewBaseC1Ev+0x1038>)
 80120aa:	4a6b      	ldr	r2, [pc, #428]	; (8012258 <_ZN15Screen1ViewBaseC1Ev+0x103c>)
 80120ac:	21ae      	movs	r1, #174	; 0xae
 80120ae:	486b      	ldr	r0, [pc, #428]	; (801225c <_ZN15Screen1ViewBaseC1Ev+0x1040>)
 80120b0:	f01b ff06 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80120b4:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	889a      	ldrh	r2, [r3, #4]
 80120bc:	4b68      	ldr	r3, [pc, #416]	; (8012260 <_ZN15Screen1ViewBaseC1Ev+0x1044>)
 80120be:	881b      	ldrh	r3, [r3, #0]
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d305      	bcc.n	80120d0 <_ZN15Screen1ViewBaseC1Ev+0xeb4>
 80120c4:	4b67      	ldr	r3, [pc, #412]	; (8012264 <_ZN15Screen1ViewBaseC1Ev+0x1048>)
 80120c6:	4a64      	ldr	r2, [pc, #400]	; (8012258 <_ZN15Screen1ViewBaseC1Ev+0x103c>)
 80120c8:	21af      	movs	r1, #175	; 0xaf
 80120ca:	4864      	ldr	r0, [pc, #400]	; (801225c <_ZN15Screen1ViewBaseC1Ev+0x1040>)
 80120cc:	f01b fef8 	bl	802dec0 <__assert_func>
    }
 80120d0:	bf00      	nop
        return texts->getText(typedTextId);
 80120d2:	4b5d      	ldr	r3, [pc, #372]	; (8012248 <_ZN15Screen1ViewBaseC1Ev+0x102c>)
 80120d4:	681a      	ldr	r2, [r3, #0]
 80120d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80120da:	889b      	ldrh	r3, [r3, #4]
 80120dc:	4619      	mov	r1, r3
 80120de:	4610      	mov	r0, r2
 80120e0:	f002 fa1e 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 80120e4:	4603      	mov	r3, r0
 80120e6:	bf00      	nop
 80120e8:	4a58      	ldr	r2, [pc, #352]	; (801224c <_ZN15Screen1ViewBaseC1Ev+0x1030>)
 80120ea:	210a      	movs	r1, #10
 80120ec:	4620      	mov	r0, r4
 80120ee:	f00d f933 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80120f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7fd fd4e 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    batt_units.setWildcard(batt_unitsBuffer);
 80120fc:	1d3b      	adds	r3, r7, #4
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	f503 726f 	add.w	r2, r3, #956	; 0x3bc
 8012104:	1d3b      	adds	r3, r7, #4
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	f603 23dc 	addw	r3, r3, #2780	; 0xadc
 801210c:	4619      	mov	r1, r3
 801210e:	4610      	mov	r0, r2
 8012110:	f7fe ff50 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_units.resizeToCurrentText();
 8012114:	1d3b      	adds	r3, r7, #4
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 801211c:	4618      	mov	r0, r3
 801211e:	f007 ff4f 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6YBF));
 8012122:	1d3b      	adds	r3, r7, #4
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 801212a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801212e:	2111      	movs	r1, #17
 8012130:	4618      	mov	r0, r3
 8012132:	f7fe feb1 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8012136:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801213a:	4619      	mov	r1, r3
 801213c:	4620      	mov	r0, r4
 801213e:	f007 ff5c 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012142:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012146:	4618      	mov	r0, r3
 8012148:	f7fd fd26 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    tps_value.setXY(942, 299);
 801214c:	1d3b      	adds	r3, r7, #4
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8012154:	f240 122b 	movw	r2, #299	; 0x12b
 8012158:	f240 31ae 	movw	r1, #942	; 0x3ae
 801215c:	4618      	mov	r0, r3
 801215e:	f7fe fc8f 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    tps_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012162:	1d3b      	adds	r3, r7, #4
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	f503 747f 	add.w	r4, r3, #1020	; 0x3fc
 801216a:	f207 332b 	addw	r3, r7, #811	; 0x32b
 801216e:	22ff      	movs	r2, #255	; 0xff
 8012170:	701a      	strb	r2, [r3, #0]
 8012172:	f207 332a 	addw	r3, r7, #810	; 0x32a
 8012176:	22ff      	movs	r2, #255	; 0xff
 8012178:	701a      	strb	r2, [r3, #0]
 801217a:	f207 3329 	addw	r3, r7, #809	; 0x329
 801217e:	22ff      	movs	r2, #255	; 0xff
 8012180:	701a      	strb	r2, [r3, #0]
 8012182:	f207 332b 	addw	r3, r7, #811	; 0x32b
 8012186:	781b      	ldrb	r3, [r3, #0]
 8012188:	041b      	lsls	r3, r3, #16
 801218a:	461a      	mov	r2, r3
 801218c:	f207 332a 	addw	r3, r7, #810	; 0x32a
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	021b      	lsls	r3, r3, #8
 8012194:	431a      	orrs	r2, r3
 8012196:	f207 3329 	addw	r3, r7, #809	; 0x329
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	4313      	orrs	r3, r2
 801219e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80121a2:	f507 7321 	add.w	r3, r7, #644	; 0x284
 80121a6:	4611      	mov	r1, r2
 80121a8:	4618      	mov	r0, r3
 80121aa:	f7fe fb99 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 80121ae:	f507 7321 	add.w	r3, r7, #644	; 0x284
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	461a      	mov	r2, r3
 80121b6:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80121ba:	601c      	str	r4, [r3, #0]
 80121bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80121c0:	601a      	str	r2, [r3, #0]
        this->color = color;
 80121c2:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80121cc:	6812      	ldr	r2, [r2, #0]
 80121ce:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80121d0:	bf00      	nop
    tps_value.setLinespacing(0);
 80121d2:	1d3b      	adds	r3, r7, #4
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	f503 727f 	add.w	r2, r3, #1020	; 0x3fc
 80121da:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80121de:	601a      	str	r2, [r3, #0]
 80121e0:	f207 3332 	addw	r3, r7, #818	; 0x332
 80121e4:	2200      	movs	r2, #0
 80121e6:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80121e8:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	f207 3232 	addw	r2, r7, #818	; 0x332
 80121f2:	8812      	ldrh	r2, [r2, #0]
 80121f4:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80121f6:	bf00      	nop
    Unicode::snprintf(tps_valueBuffer, TPS_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_AYOA).getText());
 80121f8:	1d3b      	adds	r3, r7, #4
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	f503 642f 	add.w	r4, r3, #2800	; 0xaf0
 8012200:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012204:	211e      	movs	r1, #30
 8012206:	4618      	mov	r0, r3
 8012208:	f7fe fe46 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 801220c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8012210:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8012214:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012216:	4b0e      	ldr	r3, [pc, #56]	; (8012250 <_ZN15Screen1ViewBaseC1Ev+0x1034>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d105      	bne.n	801222a <_ZN15Screen1ViewBaseC1Ev+0x100e>
 801221e:	4b0d      	ldr	r3, [pc, #52]	; (8012254 <_ZN15Screen1ViewBaseC1Ev+0x1038>)
 8012220:	4a0d      	ldr	r2, [pc, #52]	; (8012258 <_ZN15Screen1ViewBaseC1Ev+0x103c>)
 8012222:	21ae      	movs	r1, #174	; 0xae
 8012224:	480d      	ldr	r0, [pc, #52]	; (801225c <_ZN15Screen1ViewBaseC1Ev+0x1040>)
 8012226:	f01b fe4b 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801222a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	889a      	ldrh	r2, [r3, #4]
 8012232:	4b0b      	ldr	r3, [pc, #44]	; (8012260 <_ZN15Screen1ViewBaseC1Ev+0x1044>)
 8012234:	881b      	ldrh	r3, [r3, #0]
 8012236:	429a      	cmp	r2, r3
 8012238:	d316      	bcc.n	8012268 <_ZN15Screen1ViewBaseC1Ev+0x104c>
 801223a:	4b0a      	ldr	r3, [pc, #40]	; (8012264 <_ZN15Screen1ViewBaseC1Ev+0x1048>)
 801223c:	4a06      	ldr	r2, [pc, #24]	; (8012258 <_ZN15Screen1ViewBaseC1Ev+0x103c>)
 801223e:	21af      	movs	r1, #175	; 0xaf
 8012240:	4806      	ldr	r0, [pc, #24]	; (801225c <_ZN15Screen1ViewBaseC1Ev+0x1040>)
 8012242:	f01b fe3d 	bl	802dec0 <__assert_func>
 8012246:	bf00      	nop
 8012248:	200097d8 	.word	0x200097d8
 801224c:	0802f5ac 	.word	0x0802f5ac
 8012250:	200097cc 	.word	0x200097cc
 8012254:	0802f4a0 	.word	0x0802f4a0
 8012258:	0802f4e4 	.word	0x0802f4e4
 801225c:	0802f514 	.word	0x0802f514
 8012260:	200097d0 	.word	0x200097d0
 8012264:	0802f558 	.word	0x0802f558
    }
 8012268:	bf00      	nop
        return texts->getText(typedTextId);
 801226a:	4bba      	ldr	r3, [pc, #744]	; (8012554 <_ZN15Screen1ViewBaseC1Ev+0x1338>)
 801226c:	681a      	ldr	r2, [r3, #0]
 801226e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012272:	889b      	ldrh	r3, [r3, #4]
 8012274:	4619      	mov	r1, r3
 8012276:	4610      	mov	r0, r2
 8012278:	f002 f952 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 801227c:	4603      	mov	r3, r0
 801227e:	bf00      	nop
 8012280:	4ab5      	ldr	r2, [pc, #724]	; (8012558 <_ZN15Screen1ViewBaseC1Ev+0x133c>)
 8012282:	2120      	movs	r1, #32
 8012284:	4620      	mov	r0, r4
 8012286:	f00d f867 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801228a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801228e:	4618      	mov	r0, r3
 8012290:	f7fd fc82 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    tps_value.setWildcard(tps_valueBuffer);
 8012294:	1d3b      	adds	r3, r7, #4
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	f503 727f 	add.w	r2, r3, #1020	; 0x3fc
 801229c:	1d3b      	adds	r3, r7, #4
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 80122a4:	4619      	mov	r1, r3
 80122a6:	4610      	mov	r0, r2
 80122a8:	f7fe fe84 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_value.resizeToCurrentText();
 80122ac:	1d3b      	adds	r3, r7, #4
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 80122b4:	4618      	mov	r0, r3
 80122b6:	f007 fe83 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MP7X));
 80122ba:	1d3b      	adds	r3, r7, #4
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	f503 747f 	add.w	r4, r3, #1020	; 0x3fc
 80122c2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80122c6:	2110      	movs	r1, #16
 80122c8:	4618      	mov	r0, r3
 80122ca:	f7fe fde5 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 80122ce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80122d2:	4619      	mov	r1, r3
 80122d4:	4620      	mov	r0, r4
 80122d6:	f007 fe90 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80122da:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80122de:	4618      	mov	r0, r3
 80122e0:	f7fd fc5a 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    tps_label.setXY(888, 400);
 80122e4:	1d3b      	adds	r3, r7, #4
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 80122ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80122f0:	f44f 715e 	mov.w	r1, #888	; 0x378
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7fe fbc3 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    tps_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80122fa:	1d3b      	adds	r3, r7, #4
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	f203 443c 	addw	r4, r3, #1084	; 0x43c
 8012302:	f207 333f 	addw	r3, r7, #831	; 0x33f
 8012306:	22ff      	movs	r2, #255	; 0xff
 8012308:	701a      	strb	r2, [r3, #0]
 801230a:	f207 333e 	addw	r3, r7, #830	; 0x33e
 801230e:	22ff      	movs	r2, #255	; 0xff
 8012310:	701a      	strb	r2, [r3, #0]
 8012312:	f207 333d 	addw	r3, r7, #829	; 0x33d
 8012316:	22ff      	movs	r2, #255	; 0xff
 8012318:	701a      	strb	r2, [r3, #0]
 801231a:	f207 333f 	addw	r3, r7, #831	; 0x33f
 801231e:	781b      	ldrb	r3, [r3, #0]
 8012320:	041b      	lsls	r3, r3, #16
 8012322:	461a      	mov	r2, r3
 8012324:	f207 333e 	addw	r3, r7, #830	; 0x33e
 8012328:	781b      	ldrb	r3, [r3, #0]
 801232a:	021b      	lsls	r3, r3, #8
 801232c:	431a      	orrs	r2, r3
 801232e:	f207 333d 	addw	r3, r7, #829	; 0x33d
 8012332:	781b      	ldrb	r3, [r3, #0]
 8012334:	4313      	orrs	r3, r2
 8012336:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801233a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801233e:	4611      	mov	r1, r2
 8012340:	4618      	mov	r0, r3
 8012342:	f7fe facd 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 8012346:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	461a      	mov	r2, r3
 801234e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8012352:	601c      	str	r4, [r3, #0]
 8012354:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012358:	601a      	str	r2, [r3, #0]
        this->color = color;
 801235a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012364:	6812      	ldr	r2, [r2, #0]
 8012366:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012368:	bf00      	nop
    tps_label.setLinespacing(0);
 801236a:	1d3b      	adds	r3, r7, #4
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	f203 423c 	addw	r2, r3, #1084	; 0x43c
 8012372:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8012376:	601a      	str	r2, [r3, #0]
 8012378:	f207 3346 	addw	r3, r7, #838	; 0x346
 801237c:	2200      	movs	r2, #0
 801237e:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8012380:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	f207 3246 	addw	r2, r7, #838	; 0x346
 801238a:	8812      	ldrh	r2, [r2, #0]
 801238c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801238e:	bf00      	nop
    Unicode::snprintf(tps_labelBuffer, TPS_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_VMJT).getText());
 8012390:	1d3b      	adds	r3, r7, #4
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	f503 6433 	add.w	r4, r3, #2864	; 0xb30
 8012398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801239c:	2123      	movs	r1, #35	; 0x23
 801239e:	4618      	mov	r0, r3
 80123a0:	f7fe fd7a 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 80123a4:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80123a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80123ac:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80123ae:	4b6b      	ldr	r3, [pc, #428]	; (801255c <_ZN15Screen1ViewBaseC1Ev+0x1340>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d105      	bne.n	80123c2 <_ZN15Screen1ViewBaseC1Ev+0x11a6>
 80123b6:	4b6a      	ldr	r3, [pc, #424]	; (8012560 <_ZN15Screen1ViewBaseC1Ev+0x1344>)
 80123b8:	4a6a      	ldr	r2, [pc, #424]	; (8012564 <_ZN15Screen1ViewBaseC1Ev+0x1348>)
 80123ba:	21ae      	movs	r1, #174	; 0xae
 80123bc:	486a      	ldr	r0, [pc, #424]	; (8012568 <_ZN15Screen1ViewBaseC1Ev+0x134c>)
 80123be:	f01b fd7f 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80123c2:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	889a      	ldrh	r2, [r3, #4]
 80123ca:	4b68      	ldr	r3, [pc, #416]	; (801256c <_ZN15Screen1ViewBaseC1Ev+0x1350>)
 80123cc:	881b      	ldrh	r3, [r3, #0]
 80123ce:	429a      	cmp	r2, r3
 80123d0:	d305      	bcc.n	80123de <_ZN15Screen1ViewBaseC1Ev+0x11c2>
 80123d2:	4b67      	ldr	r3, [pc, #412]	; (8012570 <_ZN15Screen1ViewBaseC1Ev+0x1354>)
 80123d4:	4a63      	ldr	r2, [pc, #396]	; (8012564 <_ZN15Screen1ViewBaseC1Ev+0x1348>)
 80123d6:	21af      	movs	r1, #175	; 0xaf
 80123d8:	4863      	ldr	r0, [pc, #396]	; (8012568 <_ZN15Screen1ViewBaseC1Ev+0x134c>)
 80123da:	f01b fd71 	bl	802dec0 <__assert_func>
    }
 80123de:	bf00      	nop
        return texts->getText(typedTextId);
 80123e0:	4b5c      	ldr	r3, [pc, #368]	; (8012554 <_ZN15Screen1ViewBaseC1Ev+0x1338>)
 80123e2:	681a      	ldr	r2, [r3, #0]
 80123e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80123e8:	889b      	ldrh	r3, [r3, #4]
 80123ea:	4619      	mov	r1, r3
 80123ec:	4610      	mov	r0, r2
 80123ee:	f002 f897 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 80123f2:	4603      	mov	r3, r0
 80123f4:	bf00      	nop
 80123f6:	4a58      	ldr	r2, [pc, #352]	; (8012558 <_ZN15Screen1ViewBaseC1Ev+0x133c>)
 80123f8:	210a      	movs	r1, #10
 80123fa:	4620      	mov	r0, r4
 80123fc:	f00c ffac 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012404:	4618      	mov	r0, r3
 8012406:	f7fd fbc7 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    tps_label.setWildcard(tps_labelBuffer);
 801240a:	1d3b      	adds	r3, r7, #4
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	f203 423c 	addw	r2, r3, #1084	; 0x43c
 8012412:	1d3b      	adds	r3, r7, #4
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 801241a:	4619      	mov	r1, r3
 801241c:	4610      	mov	r0, r2
 801241e:	f7fe fdc9 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_label.resizeToCurrentText();
 8012422:	1d3b      	adds	r3, r7, #4
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 801242a:	4618      	mov	r0, r3
 801242c:	f007 fdc8 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_L5WH));
 8012430:	1d3b      	adds	r3, r7, #4
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	f203 443c 	addw	r4, r3, #1084	; 0x43c
 8012438:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801243c:	210e      	movs	r1, #14
 801243e:	4618      	mov	r0, r3
 8012440:	f7fe fd2a 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8012444:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012448:	4619      	mov	r1, r3
 801244a:	4620      	mov	r0, r4
 801244c:	f007 fdd5 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012450:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012454:	4618      	mov	r0, r3
 8012456:	f7fd fb9f 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    tps_units.setXY(813, 399);
 801245a:	1d3b      	adds	r3, r7, #4
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8012462:	f240 128f 	movw	r2, #399	; 0x18f
 8012466:	f240 312d 	movw	r1, #813	; 0x32d
 801246a:	4618      	mov	r0, r3
 801246c:	f7fe fb08 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    tps_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012470:	1d3b      	adds	r3, r7, #4
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	f203 447c 	addw	r4, r3, #1148	; 0x47c
 8012478:	f207 3353 	addw	r3, r7, #851	; 0x353
 801247c:	22ff      	movs	r2, #255	; 0xff
 801247e:	701a      	strb	r2, [r3, #0]
 8012480:	f207 3352 	addw	r3, r7, #850	; 0x352
 8012484:	22ff      	movs	r2, #255	; 0xff
 8012486:	701a      	strb	r2, [r3, #0]
 8012488:	f207 3351 	addw	r3, r7, #849	; 0x351
 801248c:	22ff      	movs	r2, #255	; 0xff
 801248e:	701a      	strb	r2, [r3, #0]
 8012490:	f207 3353 	addw	r3, r7, #851	; 0x353
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	041b      	lsls	r3, r3, #16
 8012498:	461a      	mov	r2, r3
 801249a:	f207 3352 	addw	r3, r7, #850	; 0x352
 801249e:	781b      	ldrb	r3, [r3, #0]
 80124a0:	021b      	lsls	r3, r3, #8
 80124a2:	431a      	orrs	r2, r3
 80124a4:	f207 3351 	addw	r3, r7, #849	; 0x351
 80124a8:	781b      	ldrb	r3, [r3, #0]
 80124aa:	4313      	orrs	r3, r2
 80124ac:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80124b0:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80124b4:	4611      	mov	r1, r2
 80124b6:	4618      	mov	r0, r3
 80124b8:	f7fe fa12 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 80124bc:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	461a      	mov	r2, r3
 80124c4:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80124c8:	601c      	str	r4, [r3, #0]
 80124ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80124ce:	601a      	str	r2, [r3, #0]
        this->color = color;
 80124d0:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80124da:	6812      	ldr	r2, [r2, #0]
 80124dc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80124de:	bf00      	nop
    tps_units.setLinespacing(0);
 80124e0:	1d3b      	adds	r3, r7, #4
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	f203 427c 	addw	r2, r3, #1148	; 0x47c
 80124e8:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80124ec:	601a      	str	r2, [r3, #0]
 80124ee:	f207 335a 	addw	r3, r7, #858	; 0x35a
 80124f2:	2200      	movs	r2, #0
 80124f4:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80124f6:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	f207 325a 	addw	r2, r7, #858	; 0x35a
 8012500:	8812      	ldrh	r2, [r2, #0]
 8012502:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012504:	bf00      	nop
    Unicode::snprintf(tps_unitsBuffer, TPS_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_L3HM).getText());
 8012506:	1d3b      	adds	r3, r7, #4
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	f603 3444 	addw	r4, r3, #2884	; 0xb44
 801250e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8012512:	2122      	movs	r1, #34	; 0x22
 8012514:	4618      	mov	r0, r3
 8012516:	f7fe fcbf 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 801251a:	f507 7358 	add.w	r3, r7, #864	; 0x360
 801251e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8012522:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012524:	4b0d      	ldr	r3, [pc, #52]	; (801255c <_ZN15Screen1ViewBaseC1Ev+0x1340>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d105      	bne.n	8012538 <_ZN15Screen1ViewBaseC1Ev+0x131c>
 801252c:	4b0c      	ldr	r3, [pc, #48]	; (8012560 <_ZN15Screen1ViewBaseC1Ev+0x1344>)
 801252e:	4a0d      	ldr	r2, [pc, #52]	; (8012564 <_ZN15Screen1ViewBaseC1Ev+0x1348>)
 8012530:	21ae      	movs	r1, #174	; 0xae
 8012532:	480d      	ldr	r0, [pc, #52]	; (8012568 <_ZN15Screen1ViewBaseC1Ev+0x134c>)
 8012534:	f01b fcc4 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012538:	f507 7358 	add.w	r3, r7, #864	; 0x360
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	889a      	ldrh	r2, [r3, #4]
 8012540:	4b0a      	ldr	r3, [pc, #40]	; (801256c <_ZN15Screen1ViewBaseC1Ev+0x1350>)
 8012542:	881b      	ldrh	r3, [r3, #0]
 8012544:	429a      	cmp	r2, r3
 8012546:	d315      	bcc.n	8012574 <_ZN15Screen1ViewBaseC1Ev+0x1358>
 8012548:	4b09      	ldr	r3, [pc, #36]	; (8012570 <_ZN15Screen1ViewBaseC1Ev+0x1354>)
 801254a:	4a06      	ldr	r2, [pc, #24]	; (8012564 <_ZN15Screen1ViewBaseC1Ev+0x1348>)
 801254c:	21af      	movs	r1, #175	; 0xaf
 801254e:	4806      	ldr	r0, [pc, #24]	; (8012568 <_ZN15Screen1ViewBaseC1Ev+0x134c>)
 8012550:	f01b fcb6 	bl	802dec0 <__assert_func>
 8012554:	200097d8 	.word	0x200097d8
 8012558:	0802f5ac 	.word	0x0802f5ac
 801255c:	200097cc 	.word	0x200097cc
 8012560:	0802f4a0 	.word	0x0802f4a0
 8012564:	0802f4e4 	.word	0x0802f4e4
 8012568:	0802f514 	.word	0x0802f514
 801256c:	200097d0 	.word	0x200097d0
 8012570:	0802f558 	.word	0x0802f558
    }
 8012574:	bf00      	nop
        return texts->getText(typedTextId);
 8012576:	4bba      	ldr	r3, [pc, #744]	; (8012860 <_ZN15Screen1ViewBaseC1Ev+0x1644>)
 8012578:	681a      	ldr	r2, [r3, #0]
 801257a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801257e:	889b      	ldrh	r3, [r3, #4]
 8012580:	4619      	mov	r1, r3
 8012582:	4610      	mov	r0, r2
 8012584:	f001 ffcc 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8012588:	4603      	mov	r3, r0
 801258a:	bf00      	nop
 801258c:	4ab5      	ldr	r2, [pc, #724]	; (8012864 <_ZN15Screen1ViewBaseC1Ev+0x1648>)
 801258e:	210a      	movs	r1, #10
 8012590:	4620      	mov	r0, r4
 8012592:	f00c fee1 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012596:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801259a:	4618      	mov	r0, r3
 801259c:	f7fd fafc 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    tps_units.setWildcard(tps_unitsBuffer);
 80125a0:	1d3b      	adds	r3, r7, #4
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	f203 427c 	addw	r2, r3, #1148	; 0x47c
 80125a8:	1d3b      	adds	r3, r7, #4
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	f603 3344 	addw	r3, r3, #2884	; 0xb44
 80125b0:	4619      	mov	r1, r3
 80125b2:	4610      	mov	r0, r2
 80125b4:	f7fe fcfe 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_units.resizeToCurrentText();
 80125b8:	1d3b      	adds	r3, r7, #4
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 80125c0:	4618      	mov	r0, r3
 80125c2:	f007 fcfd 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RPXE));
 80125c6:	1d3b      	adds	r3, r7, #4
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	f203 447c 	addw	r4, r3, #1148	; 0x47c
 80125ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80125d2:	210f      	movs	r1, #15
 80125d4:	4618      	mov	r0, r3
 80125d6:	f7fe fc5f 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 80125da:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80125de:	4619      	mov	r1, r3
 80125e0:	4620      	mov	r0, r4
 80125e2:	f007 fd0a 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80125e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7fd fad4 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    lambda_value.setXY(942, 448);
 80125f0:	1d3b      	adds	r3, r7, #4
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 80125f8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80125fc:	f240 31ae 	movw	r1, #942	; 0x3ae
 8012600:	4618      	mov	r0, r3
 8012602:	f7fe fa3d 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    lambda_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012606:	1d3b      	adds	r3, r7, #4
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	f203 44bc 	addw	r4, r3, #1212	; 0x4bc
 801260e:	f207 3367 	addw	r3, r7, #871	; 0x367
 8012612:	22ff      	movs	r2, #255	; 0xff
 8012614:	701a      	strb	r2, [r3, #0]
 8012616:	f207 3366 	addw	r3, r7, #870	; 0x366
 801261a:	22ff      	movs	r2, #255	; 0xff
 801261c:	701a      	strb	r2, [r3, #0]
 801261e:	f207 3365 	addw	r3, r7, #869	; 0x365
 8012622:	22ff      	movs	r2, #255	; 0xff
 8012624:	701a      	strb	r2, [r3, #0]
 8012626:	f207 3367 	addw	r3, r7, #871	; 0x367
 801262a:	781b      	ldrb	r3, [r3, #0]
 801262c:	041b      	lsls	r3, r3, #16
 801262e:	461a      	mov	r2, r3
 8012630:	f207 3366 	addw	r3, r7, #870	; 0x366
 8012634:	781b      	ldrb	r3, [r3, #0]
 8012636:	021b      	lsls	r3, r3, #8
 8012638:	431a      	orrs	r2, r3
 801263a:	f207 3365 	addw	r3, r7, #869	; 0x365
 801263e:	781b      	ldrb	r3, [r3, #0]
 8012640:	4313      	orrs	r3, r2
 8012642:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012646:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801264a:	4611      	mov	r1, r2
 801264c:	4618      	mov	r0, r3
 801264e:	f7fe f947 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 8012652:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	461a      	mov	r2, r3
 801265a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 801265e:	601c      	str	r4, [r3, #0]
 8012660:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012664:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012666:	f507 735a 	add.w	r3, r7, #872	; 0x368
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012670:	6812      	ldr	r2, [r2, #0]
 8012672:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012674:	bf00      	nop
    lambda_value.setLinespacing(0);
 8012676:	1d3b      	adds	r3, r7, #4
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	f203 42bc 	addw	r2, r3, #1212	; 0x4bc
 801267e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8012682:	601a      	str	r2, [r3, #0]
 8012684:	f207 336e 	addw	r3, r7, #878	; 0x36e
 8012688:	2200      	movs	r2, #0
 801268a:	801a      	strh	r2, [r3, #0]
        linespace = space;
 801268c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	f207 326e 	addw	r2, r7, #878	; 0x36e
 8012696:	8812      	ldrh	r2, [r2, #0]
 8012698:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801269a:	bf00      	nop
    Unicode::snprintf(lambda_valueBuffer, LAMBDA_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_2H8W).getText());
 801269c:	1d3b      	adds	r3, r7, #4
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	f603 3458 	addw	r4, r3, #2904	; 0xb58
 80126a4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80126a8:	211f      	movs	r1, #31
 80126aa:	4618      	mov	r0, r3
 80126ac:	f7fe fbf4 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 80126b0:	f507 735d 	add.w	r3, r7, #884	; 0x374
 80126b4:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80126b8:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80126ba:	4b6b      	ldr	r3, [pc, #428]	; (8012868 <_ZN15Screen1ViewBaseC1Ev+0x164c>)
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d105      	bne.n	80126ce <_ZN15Screen1ViewBaseC1Ev+0x14b2>
 80126c2:	4b6a      	ldr	r3, [pc, #424]	; (801286c <_ZN15Screen1ViewBaseC1Ev+0x1650>)
 80126c4:	4a6a      	ldr	r2, [pc, #424]	; (8012870 <_ZN15Screen1ViewBaseC1Ev+0x1654>)
 80126c6:	21ae      	movs	r1, #174	; 0xae
 80126c8:	486a      	ldr	r0, [pc, #424]	; (8012874 <_ZN15Screen1ViewBaseC1Ev+0x1658>)
 80126ca:	f01b fbf9 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80126ce:	f507 735d 	add.w	r3, r7, #884	; 0x374
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	889a      	ldrh	r2, [r3, #4]
 80126d6:	4b68      	ldr	r3, [pc, #416]	; (8012878 <_ZN15Screen1ViewBaseC1Ev+0x165c>)
 80126d8:	881b      	ldrh	r3, [r3, #0]
 80126da:	429a      	cmp	r2, r3
 80126dc:	d305      	bcc.n	80126ea <_ZN15Screen1ViewBaseC1Ev+0x14ce>
 80126de:	4b67      	ldr	r3, [pc, #412]	; (801287c <_ZN15Screen1ViewBaseC1Ev+0x1660>)
 80126e0:	4a63      	ldr	r2, [pc, #396]	; (8012870 <_ZN15Screen1ViewBaseC1Ev+0x1654>)
 80126e2:	21af      	movs	r1, #175	; 0xaf
 80126e4:	4863      	ldr	r0, [pc, #396]	; (8012874 <_ZN15Screen1ViewBaseC1Ev+0x1658>)
 80126e6:	f01b fbeb 	bl	802dec0 <__assert_func>
    }
 80126ea:	bf00      	nop
        return texts->getText(typedTextId);
 80126ec:	4b5c      	ldr	r3, [pc, #368]	; (8012860 <_ZN15Screen1ViewBaseC1Ev+0x1644>)
 80126ee:	681a      	ldr	r2, [r3, #0]
 80126f0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80126f4:	889b      	ldrh	r3, [r3, #4]
 80126f6:	4619      	mov	r1, r3
 80126f8:	4610      	mov	r0, r2
 80126fa:	f001 ff11 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 80126fe:	4603      	mov	r3, r0
 8012700:	bf00      	nop
 8012702:	4a58      	ldr	r2, [pc, #352]	; (8012864 <_ZN15Screen1ViewBaseC1Ev+0x1648>)
 8012704:	2120      	movs	r1, #32
 8012706:	4620      	mov	r0, r4
 8012708:	f00c fe26 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801270c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8012710:	4618      	mov	r0, r3
 8012712:	f7fd fa41 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    lambda_value.setWildcard(lambda_valueBuffer);
 8012716:	1d3b      	adds	r3, r7, #4
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	f203 42bc 	addw	r2, r3, #1212	; 0x4bc
 801271e:	1d3b      	adds	r3, r7, #4
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 8012726:	4619      	mov	r1, r3
 8012728:	4610      	mov	r0, r2
 801272a:	f7fe fc43 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_value.resizeToCurrentText();
 801272e:	1d3b      	adds	r3, r7, #4
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8012736:	4618      	mov	r0, r3
 8012738:	f007 fc42 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_TLZY));
 801273c:	1d3b      	adds	r3, r7, #4
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	f203 44bc 	addw	r4, r3, #1212	; 0x4bc
 8012744:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012748:	210d      	movs	r1, #13
 801274a:	4618      	mov	r0, r3
 801274c:	f7fe fba4 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8012750:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012754:	4619      	mov	r1, r3
 8012756:	4620      	mov	r0, r4
 8012758:	f007 fc4f 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801275c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012760:	4618      	mov	r0, r3
 8012762:	f7fd fa19 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    lambda_label.setXY(888, 547);
 8012766:	1d3b      	adds	r3, r7, #4
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 801276e:	f240 2223 	movw	r2, #547	; 0x223
 8012772:	f44f 715e 	mov.w	r1, #888	; 0x378
 8012776:	4618      	mov	r0, r3
 8012778:	f7fe f982 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    lambda_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801277c:	1d3b      	adds	r3, r7, #4
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 8012784:	f207 337b 	addw	r3, r7, #891	; 0x37b
 8012788:	22ff      	movs	r2, #255	; 0xff
 801278a:	701a      	strb	r2, [r3, #0]
 801278c:	f207 337a 	addw	r3, r7, #890	; 0x37a
 8012790:	22ff      	movs	r2, #255	; 0xff
 8012792:	701a      	strb	r2, [r3, #0]
 8012794:	f207 3379 	addw	r3, r7, #889	; 0x379
 8012798:	22ff      	movs	r2, #255	; 0xff
 801279a:	701a      	strb	r2, [r3, #0]
 801279c:	f207 337b 	addw	r3, r7, #891	; 0x37b
 80127a0:	781b      	ldrb	r3, [r3, #0]
 80127a2:	041b      	lsls	r3, r3, #16
 80127a4:	461a      	mov	r2, r3
 80127a6:	f207 337a 	addw	r3, r7, #890	; 0x37a
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	021b      	lsls	r3, r3, #8
 80127ae:	431a      	orrs	r2, r3
 80127b0:	f207 3379 	addw	r3, r7, #889	; 0x379
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	4313      	orrs	r3, r2
 80127b8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80127bc:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80127c0:	4611      	mov	r1, r2
 80127c2:	4618      	mov	r0, r3
 80127c4:	f7fe f88c 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 80127c8:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	461a      	mov	r2, r3
 80127d0:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80127d4:	601c      	str	r4, [r3, #0]
 80127d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80127da:	601a      	str	r2, [r3, #0]
        this->color = color;
 80127dc:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80127e6:	6812      	ldr	r2, [r2, #0]
 80127e8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80127ea:	bf00      	nop
    lambda_label.setLinespacing(0);
 80127ec:	1d3b      	adds	r3, r7, #4
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	f203 42fc 	addw	r2, r3, #1276	; 0x4fc
 80127f4:	f507 7361 	add.w	r3, r7, #900	; 0x384
 80127f8:	601a      	str	r2, [r3, #0]
 80127fa:	f207 3382 	addw	r3, r7, #898	; 0x382
 80127fe:	2200      	movs	r2, #0
 8012800:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8012802:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	f207 3282 	addw	r2, r7, #898	; 0x382
 801280c:	8812      	ldrh	r2, [r2, #0]
 801280e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012810:	bf00      	nop
    Unicode::snprintf(lambda_labelBuffer, LAMBDA_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_JQKX).getText());
 8012812:	1d3b      	adds	r3, r7, #4
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	f603 3498 	addw	r4, r3, #2968	; 0xb98
 801281a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801281e:	2125      	movs	r1, #37	; 0x25
 8012820:	4618      	mov	r0, r3
 8012822:	f7fe fb39 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8012826:	f507 7362 	add.w	r3, r7, #904	; 0x388
 801282a:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801282e:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012830:	4b0d      	ldr	r3, [pc, #52]	; (8012868 <_ZN15Screen1ViewBaseC1Ev+0x164c>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d105      	bne.n	8012844 <_ZN15Screen1ViewBaseC1Ev+0x1628>
 8012838:	4b0c      	ldr	r3, [pc, #48]	; (801286c <_ZN15Screen1ViewBaseC1Ev+0x1650>)
 801283a:	4a0d      	ldr	r2, [pc, #52]	; (8012870 <_ZN15Screen1ViewBaseC1Ev+0x1654>)
 801283c:	21ae      	movs	r1, #174	; 0xae
 801283e:	480d      	ldr	r0, [pc, #52]	; (8012874 <_ZN15Screen1ViewBaseC1Ev+0x1658>)
 8012840:	f01b fb3e 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012844:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	889a      	ldrh	r2, [r3, #4]
 801284c:	4b0a      	ldr	r3, [pc, #40]	; (8012878 <_ZN15Screen1ViewBaseC1Ev+0x165c>)
 801284e:	881b      	ldrh	r3, [r3, #0]
 8012850:	429a      	cmp	r2, r3
 8012852:	d315      	bcc.n	8012880 <_ZN15Screen1ViewBaseC1Ev+0x1664>
 8012854:	4b09      	ldr	r3, [pc, #36]	; (801287c <_ZN15Screen1ViewBaseC1Ev+0x1660>)
 8012856:	4a06      	ldr	r2, [pc, #24]	; (8012870 <_ZN15Screen1ViewBaseC1Ev+0x1654>)
 8012858:	21af      	movs	r1, #175	; 0xaf
 801285a:	4806      	ldr	r0, [pc, #24]	; (8012874 <_ZN15Screen1ViewBaseC1Ev+0x1658>)
 801285c:	f01b fb30 	bl	802dec0 <__assert_func>
 8012860:	200097d8 	.word	0x200097d8
 8012864:	0802f5ac 	.word	0x0802f5ac
 8012868:	200097cc 	.word	0x200097cc
 801286c:	0802f4a0 	.word	0x0802f4a0
 8012870:	0802f4e4 	.word	0x0802f4e4
 8012874:	0802f514 	.word	0x0802f514
 8012878:	200097d0 	.word	0x200097d0
 801287c:	0802f558 	.word	0x0802f558
    }
 8012880:	bf00      	nop
        return texts->getText(typedTextId);
 8012882:	4baf      	ldr	r3, [pc, #700]	; (8012b40 <_ZN15Screen1ViewBaseC1Ev+0x1924>)
 8012884:	681a      	ldr	r2, [r3, #0]
 8012886:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801288a:	889b      	ldrh	r3, [r3, #4]
 801288c:	4619      	mov	r1, r3
 801288e:	4610      	mov	r0, r2
 8012890:	f001 fe46 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8012894:	4603      	mov	r3, r0
 8012896:	bf00      	nop
 8012898:	4aaa      	ldr	r2, [pc, #680]	; (8012b44 <_ZN15Screen1ViewBaseC1Ev+0x1928>)
 801289a:	210a      	movs	r1, #10
 801289c:	4620      	mov	r0, r4
 801289e:	f00c fd5b 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80128a2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7fd f976 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    lambda_label.setWildcard(lambda_labelBuffer);
 80128ac:	1d3b      	adds	r3, r7, #4
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	f203 42fc 	addw	r2, r3, #1276	; 0x4fc
 80128b4:	1d3b      	adds	r3, r7, #4
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 80128bc:	4619      	mov	r1, r3
 80128be:	4610      	mov	r0, r2
 80128c0:	f7fe fb78 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_label.resizeToCurrentText();
 80128c4:	1d3b      	adds	r3, r7, #4
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 80128cc:	4618      	mov	r0, r3
 80128ce:	f007 fb77 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RLOQ));
 80128d2:	1d3b      	adds	r3, r7, #4
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 80128da:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80128de:	210c      	movs	r1, #12
 80128e0:	4618      	mov	r0, r3
 80128e2:	f7fe fad9 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 80128e6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80128ea:	4619      	mov	r1, r3
 80128ec:	4620      	mov	r0, r4
 80128ee:	f007 fb84 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80128f2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80128f6:	4618      	mov	r0, r3
 80128f8:	f7fd f94e 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    lambda_units.setXY(699, 547);
 80128fc:	1d3b      	adds	r3, r7, #4
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8012904:	f240 2223 	movw	r2, #547	; 0x223
 8012908:	f240 21bb 	movw	r1, #699	; 0x2bb
 801290c:	4618      	mov	r0, r3
 801290e:	f7fe f8b7 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    lambda_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012912:	1d3b      	adds	r3, r7, #4
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	f203 543c 	addw	r4, r3, #1340	; 0x53c
 801291a:	f207 338f 	addw	r3, r7, #911	; 0x38f
 801291e:	22ff      	movs	r2, #255	; 0xff
 8012920:	701a      	strb	r2, [r3, #0]
 8012922:	f207 338e 	addw	r3, r7, #910	; 0x38e
 8012926:	22ff      	movs	r2, #255	; 0xff
 8012928:	701a      	strb	r2, [r3, #0]
 801292a:	f207 338d 	addw	r3, r7, #909	; 0x38d
 801292e:	22ff      	movs	r2, #255	; 0xff
 8012930:	701a      	strb	r2, [r3, #0]
 8012932:	f207 338f 	addw	r3, r7, #911	; 0x38f
 8012936:	781b      	ldrb	r3, [r3, #0]
 8012938:	041b      	lsls	r3, r3, #16
 801293a:	461a      	mov	r2, r3
 801293c:	f207 338e 	addw	r3, r7, #910	; 0x38e
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	021b      	lsls	r3, r3, #8
 8012944:	431a      	orrs	r2, r3
 8012946:	f207 338d 	addw	r3, r7, #909	; 0x38d
 801294a:	781b      	ldrb	r3, [r3, #0]
 801294c:	4313      	orrs	r3, r2
 801294e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012952:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012956:	4611      	mov	r1, r2
 8012958:	4618      	mov	r0, r3
 801295a:	f7fd ffc1 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 801295e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	461a      	mov	r2, r3
 8012966:	f507 7364 	add.w	r3, r7, #912	; 0x390
 801296a:	601c      	str	r4, [r3, #0]
 801296c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012970:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012972:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801297c:	6812      	ldr	r2, [r2, #0]
 801297e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012980:	bf00      	nop
    lambda_units.setLinespacing(0);
 8012982:	1d3b      	adds	r3, r7, #4
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 801298a:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 801298e:	2300      	movs	r3, #0
 8012990:	f8a7 3396 	strh.w	r3, [r7, #918]	; 0x396
        linespace = space;
 8012994:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8012998:	f8b7 2396 	ldrh.w	r2, [r7, #918]	; 0x396
 801299c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801299e:	bf00      	nop
    Unicode::snprintf(lambda_unitsBuffer, LAMBDA_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_J843).getText());
 80129a0:	1d3b      	adds	r3, r7, #4
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	f603 34ac 	addw	r4, r3, #2988	; 0xbac
 80129a8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80129ac:	2124      	movs	r1, #36	; 0x24
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7fe fa72 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 80129b4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80129b8:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80129bc:	4b62      	ldr	r3, [pc, #392]	; (8012b48 <_ZN15Screen1ViewBaseC1Ev+0x192c>)
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d105      	bne.n	80129d0 <_ZN15Screen1ViewBaseC1Ev+0x17b4>
 80129c4:	4b61      	ldr	r3, [pc, #388]	; (8012b4c <_ZN15Screen1ViewBaseC1Ev+0x1930>)
 80129c6:	4a62      	ldr	r2, [pc, #392]	; (8012b50 <_ZN15Screen1ViewBaseC1Ev+0x1934>)
 80129c8:	21ae      	movs	r1, #174	; 0xae
 80129ca:	4862      	ldr	r0, [pc, #392]	; (8012b54 <_ZN15Screen1ViewBaseC1Ev+0x1938>)
 80129cc:	f01b fa78 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80129d0:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80129d4:	889a      	ldrh	r2, [r3, #4]
 80129d6:	4b60      	ldr	r3, [pc, #384]	; (8012b58 <_ZN15Screen1ViewBaseC1Ev+0x193c>)
 80129d8:	881b      	ldrh	r3, [r3, #0]
 80129da:	429a      	cmp	r2, r3
 80129dc:	d305      	bcc.n	80129ea <_ZN15Screen1ViewBaseC1Ev+0x17ce>
 80129de:	4b5f      	ldr	r3, [pc, #380]	; (8012b5c <_ZN15Screen1ViewBaseC1Ev+0x1940>)
 80129e0:	4a5b      	ldr	r2, [pc, #364]	; (8012b50 <_ZN15Screen1ViewBaseC1Ev+0x1934>)
 80129e2:	21af      	movs	r1, #175	; 0xaf
 80129e4:	485b      	ldr	r0, [pc, #364]	; (8012b54 <_ZN15Screen1ViewBaseC1Ev+0x1938>)
 80129e6:	f01b fa6b 	bl	802dec0 <__assert_func>
    }
 80129ea:	bf00      	nop
        return texts->getText(typedTextId);
 80129ec:	4b54      	ldr	r3, [pc, #336]	; (8012b40 <_ZN15Screen1ViewBaseC1Ev+0x1924>)
 80129ee:	681a      	ldr	r2, [r3, #0]
 80129f0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80129f4:	889b      	ldrh	r3, [r3, #4]
 80129f6:	4619      	mov	r1, r3
 80129f8:	4610      	mov	r0, r2
 80129fa:	f001 fd91 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 80129fe:	4603      	mov	r3, r0
 8012a00:	bf00      	nop
 8012a02:	4a50      	ldr	r2, [pc, #320]	; (8012b44 <_ZN15Screen1ViewBaseC1Ev+0x1928>)
 8012a04:	210a      	movs	r1, #10
 8012a06:	4620      	mov	r0, r4
 8012a08:	f00c fca6 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012a0c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7fd f8c1 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    lambda_units.setWildcard(lambda_unitsBuffer);
 8012a16:	1d3b      	adds	r3, r7, #4
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	f203 523c 	addw	r2, r3, #1340	; 0x53c
 8012a1e:	1d3b      	adds	r3, r7, #4
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	f603 33ac 	addw	r3, r3, #2988	; 0xbac
 8012a26:	4619      	mov	r1, r3
 8012a28:	4610      	mov	r0, r2
 8012a2a:	f7fe fac3 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_units.resizeToCurrentText();
 8012a2e:	1d3b      	adds	r3, r7, #4
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8012a36:	4618      	mov	r0, r3
 8012a38:	f007 fac2 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KCKH));
 8012a3c:	1d3b      	adds	r3, r7, #4
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	f203 543c 	addw	r4, r3, #1340	; 0x53c
 8012a44:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8012a48:	210b      	movs	r1, #11
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7fe fa24 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8012a50:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8012a54:	4619      	mov	r1, r3
 8012a56:	4620      	mov	r0, r4
 8012a58:	f007 facf 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012a5c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8012a60:	4618      	mov	r0, r3
 8012a62:	f7fd f899 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    ect_value.setXY(31, 0);
 8012a66:	1d3b      	adds	r3, r7, #4
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8012a6e:	2200      	movs	r2, #0
 8012a70:	211f      	movs	r1, #31
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7fe f804 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    ect_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012a78:	1d3b      	adds	r3, r7, #4
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	f203 547c 	addw	r4, r3, #1404	; 0x57c
 8012a80:	23ff      	movs	r3, #255	; 0xff
 8012a82:	f887 33a3 	strb.w	r3, [r7, #931]	; 0x3a3
 8012a86:	23ff      	movs	r3, #255	; 0xff
 8012a88:	f887 33a2 	strb.w	r3, [r7, #930]	; 0x3a2
 8012a8c:	23ff      	movs	r3, #255	; 0xff
 8012a8e:	f887 33a1 	strb.w	r3, [r7, #929]	; 0x3a1
 8012a92:	f897 33a3 	ldrb.w	r3, [r7, #931]	; 0x3a3
 8012a96:	041b      	lsls	r3, r3, #16
 8012a98:	461a      	mov	r2, r3
 8012a9a:	f897 33a2 	ldrb.w	r3, [r7, #930]	; 0x3a2
 8012a9e:	021b      	lsls	r3, r3, #8
 8012aa0:	431a      	orrs	r2, r3
 8012aa2:	f897 33a1 	ldrb.w	r3, [r7, #929]	; 0x3a1
 8012aa6:	4313      	orrs	r3, r2
 8012aa8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012aac:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8012ab0:	4611      	mov	r1, r2
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7fd ff14 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 8012ab8:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	461a      	mov	r2, r3
 8012ac0:	f8c7 43a4 	str.w	r4, [r7, #932]	; 0x3a4
 8012ac4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012ac8:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012aca:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8012ace:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012ad2:	6812      	ldr	r2, [r2, #0]
 8012ad4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012ad6:	bf00      	nop
    ect_value.setLinespacing(0);
 8012ad8:	1d3b      	adds	r3, r7, #4
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8012ae0:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	f8a7 33aa 	strh.w	r3, [r7, #938]	; 0x3aa
        linespace = space;
 8012aea:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8012aee:	f8b7 23aa 	ldrh.w	r2, [r7, #938]	; 0x3aa
 8012af2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012af4:	bf00      	nop
    Unicode::snprintf(ect_valueBuffer, ECT_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_6GW0).getText());
 8012af6:	1d3b      	adds	r3, r7, #4
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	f503 643c 	add.w	r4, r3, #3008	; 0xbc0
 8012afe:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012b02:	212f      	movs	r1, #47	; 0x2f
 8012b04:	4618      	mov	r0, r3
 8012b06:	f7fe f9c7 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8012b0a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012b0e:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012b12:	4b0d      	ldr	r3, [pc, #52]	; (8012b48 <_ZN15Screen1ViewBaseC1Ev+0x192c>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d105      	bne.n	8012b26 <_ZN15Screen1ViewBaseC1Ev+0x190a>
 8012b1a:	4b0c      	ldr	r3, [pc, #48]	; (8012b4c <_ZN15Screen1ViewBaseC1Ev+0x1930>)
 8012b1c:	4a0c      	ldr	r2, [pc, #48]	; (8012b50 <_ZN15Screen1ViewBaseC1Ev+0x1934>)
 8012b1e:	21ae      	movs	r1, #174	; 0xae
 8012b20:	480c      	ldr	r0, [pc, #48]	; (8012b54 <_ZN15Screen1ViewBaseC1Ev+0x1938>)
 8012b22:	f01b f9cd 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012b26:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8012b2a:	889a      	ldrh	r2, [r3, #4]
 8012b2c:	4b0a      	ldr	r3, [pc, #40]	; (8012b58 <_ZN15Screen1ViewBaseC1Ev+0x193c>)
 8012b2e:	881b      	ldrh	r3, [r3, #0]
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d315      	bcc.n	8012b60 <_ZN15Screen1ViewBaseC1Ev+0x1944>
 8012b34:	4b09      	ldr	r3, [pc, #36]	; (8012b5c <_ZN15Screen1ViewBaseC1Ev+0x1940>)
 8012b36:	4a06      	ldr	r2, [pc, #24]	; (8012b50 <_ZN15Screen1ViewBaseC1Ev+0x1934>)
 8012b38:	21af      	movs	r1, #175	; 0xaf
 8012b3a:	4806      	ldr	r0, [pc, #24]	; (8012b54 <_ZN15Screen1ViewBaseC1Ev+0x1938>)
 8012b3c:	f01b f9c0 	bl	802dec0 <__assert_func>
 8012b40:	200097d8 	.word	0x200097d8
 8012b44:	0802f5ac 	.word	0x0802f5ac
 8012b48:	200097cc 	.word	0x200097cc
 8012b4c:	0802f4a0 	.word	0x0802f4a0
 8012b50:	0802f4e4 	.word	0x0802f4e4
 8012b54:	0802f514 	.word	0x0802f514
 8012b58:	200097d0 	.word	0x200097d0
 8012b5c:	0802f558 	.word	0x0802f558
    }
 8012b60:	bf00      	nop
        return texts->getText(typedTextId);
 8012b62:	4baa      	ldr	r3, [pc, #680]	; (8012e0c <_ZN15Screen1ViewBaseC1Ev+0x1bf0>)
 8012b64:	681a      	ldr	r2, [r3, #0]
 8012b66:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012b6a:	889b      	ldrh	r3, [r3, #4]
 8012b6c:	4619      	mov	r1, r3
 8012b6e:	4610      	mov	r0, r2
 8012b70:	f001 fcd6 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8012b74:	4603      	mov	r3, r0
 8012b76:	bf00      	nop
 8012b78:	4aa5      	ldr	r2, [pc, #660]	; (8012e10 <_ZN15Screen1ViewBaseC1Ev+0x1bf4>)
 8012b7a:	2120      	movs	r1, #32
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	f00c fbeb 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012b82:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012b86:	4618      	mov	r0, r3
 8012b88:	f7fd f806 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    ect_value.setWildcard(ect_valueBuffer);
 8012b8c:	1d3b      	adds	r3, r7, #4
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	f203 527c 	addw	r2, r3, #1404	; 0x57c
 8012b94:	1d3b      	adds	r3, r7, #4
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 8012b9c:	4619      	mov	r1, r3
 8012b9e:	4610      	mov	r0, r2
 8012ba0:	f7fe fa08 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_value.resizeToCurrentText();
 8012ba4:	1d3b      	adds	r3, r7, #4
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8012bac:	4618      	mov	r0, r3
 8012bae:	f007 fa07 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LD25));
 8012bb2:	1d3b      	adds	r3, r7, #4
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	f203 547c 	addw	r4, r3, #1404	; 0x57c
 8012bba:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8012bbe:	212e      	movs	r1, #46	; 0x2e
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7fe f969 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8012bc6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8012bca:	4619      	mov	r1, r3
 8012bcc:	4620      	mov	r0, r4
 8012bce:	f007 fa14 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012bd2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7fc ffde 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    ect_label.setXY(34, 97);
 8012bdc:	1d3b      	adds	r3, r7, #4
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8012be4:	2261      	movs	r2, #97	; 0x61
 8012be6:	2122      	movs	r1, #34	; 0x22
 8012be8:	4618      	mov	r0, r3
 8012bea:	f7fd ff49 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    ect_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012bee:	1d3b      	adds	r3, r7, #4
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	f203 54bc 	addw	r4, r3, #1468	; 0x5bc
 8012bf6:	23ff      	movs	r3, #255	; 0xff
 8012bf8:	f887 33b7 	strb.w	r3, [r7, #951]	; 0x3b7
 8012bfc:	23ff      	movs	r3, #255	; 0xff
 8012bfe:	f887 33b6 	strb.w	r3, [r7, #950]	; 0x3b6
 8012c02:	23ff      	movs	r3, #255	; 0xff
 8012c04:	f887 33b5 	strb.w	r3, [r7, #949]	; 0x3b5
 8012c08:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 8012c0c:	041b      	lsls	r3, r3, #16
 8012c0e:	461a      	mov	r2, r3
 8012c10:	f897 33b6 	ldrb.w	r3, [r7, #950]	; 0x3b6
 8012c14:	021b      	lsls	r3, r3, #8
 8012c16:	431a      	orrs	r2, r3
 8012c18:	f897 33b5 	ldrb.w	r3, [r7, #949]	; 0x3b5
 8012c1c:	4313      	orrs	r3, r2
 8012c1e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012c22:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012c26:	4611      	mov	r1, r2
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f7fd fe59 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 8012c2e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	461a      	mov	r2, r3
 8012c36:	f8c7 43b8 	str.w	r4, [r7, #952]	; 0x3b8
 8012c3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012c3e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012c40:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8012c44:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012c48:	6812      	ldr	r2, [r2, #0]
 8012c4a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012c4c:	bf00      	nop
    ect_label.setLinespacing(0);
 8012c4e:	1d3b      	adds	r3, r7, #4
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8012c56:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        linespace = space;
 8012c60:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8012c64:	f8b7 23be 	ldrh.w	r2, [r7, #958]	; 0x3be
 8012c68:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012c6a:	bf00      	nop
    Unicode::snprintf(ect_labelBuffer, ECT_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_P413).getText());
 8012c6c:	1d3b      	adds	r3, r7, #4
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	f503 6440 	add.w	r4, r3, #3072	; 0xc00
 8012c74:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012c78:	212c      	movs	r1, #44	; 0x2c
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7fe f90c 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8012c80:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012c84:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012c88:	4b62      	ldr	r3, [pc, #392]	; (8012e14 <_ZN15Screen1ViewBaseC1Ev+0x1bf8>)
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d105      	bne.n	8012c9c <_ZN15Screen1ViewBaseC1Ev+0x1a80>
 8012c90:	4b61      	ldr	r3, [pc, #388]	; (8012e18 <_ZN15Screen1ViewBaseC1Ev+0x1bfc>)
 8012c92:	4a62      	ldr	r2, [pc, #392]	; (8012e1c <_ZN15Screen1ViewBaseC1Ev+0x1c00>)
 8012c94:	21ae      	movs	r1, #174	; 0xae
 8012c96:	4862      	ldr	r0, [pc, #392]	; (8012e20 <_ZN15Screen1ViewBaseC1Ev+0x1c04>)
 8012c98:	f01b f912 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012c9c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8012ca0:	889a      	ldrh	r2, [r3, #4]
 8012ca2:	4b60      	ldr	r3, [pc, #384]	; (8012e24 <_ZN15Screen1ViewBaseC1Ev+0x1c08>)
 8012ca4:	881b      	ldrh	r3, [r3, #0]
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d305      	bcc.n	8012cb6 <_ZN15Screen1ViewBaseC1Ev+0x1a9a>
 8012caa:	4b5f      	ldr	r3, [pc, #380]	; (8012e28 <_ZN15Screen1ViewBaseC1Ev+0x1c0c>)
 8012cac:	4a5b      	ldr	r2, [pc, #364]	; (8012e1c <_ZN15Screen1ViewBaseC1Ev+0x1c00>)
 8012cae:	21af      	movs	r1, #175	; 0xaf
 8012cb0:	485b      	ldr	r0, [pc, #364]	; (8012e20 <_ZN15Screen1ViewBaseC1Ev+0x1c04>)
 8012cb2:	f01b f905 	bl	802dec0 <__assert_func>
    }
 8012cb6:	bf00      	nop
        return texts->getText(typedTextId);
 8012cb8:	4b54      	ldr	r3, [pc, #336]	; (8012e0c <_ZN15Screen1ViewBaseC1Ev+0x1bf0>)
 8012cba:	681a      	ldr	r2, [r3, #0]
 8012cbc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012cc0:	889b      	ldrh	r3, [r3, #4]
 8012cc2:	4619      	mov	r1, r3
 8012cc4:	4610      	mov	r0, r2
 8012cc6:	f001 fc2b 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	bf00      	nop
 8012cce:	4a50      	ldr	r2, [pc, #320]	; (8012e10 <_ZN15Screen1ViewBaseC1Ev+0x1bf4>)
 8012cd0:	210a      	movs	r1, #10
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	f00c fb40 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012cd8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f7fc ff5b 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    ect_label.setWildcard(ect_labelBuffer);
 8012ce2:	1d3b      	adds	r3, r7, #4
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	f203 52bc 	addw	r2, r3, #1468	; 0x5bc
 8012cea:	1d3b      	adds	r3, r7, #4
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8012cf2:	4619      	mov	r1, r3
 8012cf4:	4610      	mov	r0, r2
 8012cf6:	f7fe f95d 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_label.resizeToCurrentText();
 8012cfa:	1d3b      	adds	r3, r7, #4
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8012d02:	4618      	mov	r0, r3
 8012d04:	f007 f95c 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4T7D));
 8012d08:	1d3b      	adds	r3, r7, #4
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	f203 54bc 	addw	r4, r3, #1468	; 0x5bc
 8012d10:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8012d14:	2100      	movs	r1, #0
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7fe f8be 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8012d1c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8012d20:	4619      	mov	r1, r3
 8012d22:	4620      	mov	r0, r4
 8012d24:	f007 f969 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012d28:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f7fc ff33 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    ect_units.setXY(173, 97);
 8012d32:	1d3b      	adds	r3, r7, #4
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8012d3a:	2261      	movs	r2, #97	; 0x61
 8012d3c:	21ad      	movs	r1, #173	; 0xad
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f7fd fe9e 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    ect_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012d44:	1d3b      	adds	r3, r7, #4
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	f203 54fc 	addw	r4, r3, #1532	; 0x5fc
 8012d4c:	23ff      	movs	r3, #255	; 0xff
 8012d4e:	f887 33cb 	strb.w	r3, [r7, #971]	; 0x3cb
 8012d52:	23ff      	movs	r3, #255	; 0xff
 8012d54:	f887 33ca 	strb.w	r3, [r7, #970]	; 0x3ca
 8012d58:	23ff      	movs	r3, #255	; 0xff
 8012d5a:	f887 33c9 	strb.w	r3, [r7, #969]	; 0x3c9
 8012d5e:	f897 33cb 	ldrb.w	r3, [r7, #971]	; 0x3cb
 8012d62:	041b      	lsls	r3, r3, #16
 8012d64:	461a      	mov	r2, r3
 8012d66:	f897 33ca 	ldrb.w	r3, [r7, #970]	; 0x3ca
 8012d6a:	021b      	lsls	r3, r3, #8
 8012d6c:	431a      	orrs	r2, r3
 8012d6e:	f897 33c9 	ldrb.w	r3, [r7, #969]	; 0x3c9
 8012d72:	4313      	orrs	r3, r2
 8012d74:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012d78:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8012d7c:	4611      	mov	r1, r2
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7fd fdae 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 8012d84:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	461a      	mov	r2, r3
 8012d8c:	f8c7 43cc 	str.w	r4, [r7, #972]	; 0x3cc
 8012d90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012d94:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012d96:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8012d9a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012d9e:	6812      	ldr	r2, [r2, #0]
 8012da0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012da2:	bf00      	nop
    ect_units.setLinespacing(0);
 8012da4:	1d3b      	adds	r3, r7, #4
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8012dac:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8012db0:	2300      	movs	r3, #0
 8012db2:	f8a7 33d2 	strh.w	r3, [r7, #978]	; 0x3d2
        linespace = space;
 8012db6:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8012dba:	f8b7 23d2 	ldrh.w	r2, [r7, #978]	; 0x3d2
 8012dbe:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012dc0:	bf00      	nop
    Unicode::snprintf(ect_unitsBuffer, ECT_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NFMY).getText());
 8012dc2:	1d3b      	adds	r3, r7, #4
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	f603 4414 	addw	r4, r3, #3092	; 0xc14
 8012dca:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012dce:	212d      	movs	r1, #45	; 0x2d
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7fe f861 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8012dd6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012dda:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012dde:	4b0d      	ldr	r3, [pc, #52]	; (8012e14 <_ZN15Screen1ViewBaseC1Ev+0x1bf8>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d105      	bne.n	8012df2 <_ZN15Screen1ViewBaseC1Ev+0x1bd6>
 8012de6:	4b0c      	ldr	r3, [pc, #48]	; (8012e18 <_ZN15Screen1ViewBaseC1Ev+0x1bfc>)
 8012de8:	4a0c      	ldr	r2, [pc, #48]	; (8012e1c <_ZN15Screen1ViewBaseC1Ev+0x1c00>)
 8012dea:	21ae      	movs	r1, #174	; 0xae
 8012dec:	480c      	ldr	r0, [pc, #48]	; (8012e20 <_ZN15Screen1ViewBaseC1Ev+0x1c04>)
 8012dee:	f01b f867 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012df2:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8012df6:	889a      	ldrh	r2, [r3, #4]
 8012df8:	4b0a      	ldr	r3, [pc, #40]	; (8012e24 <_ZN15Screen1ViewBaseC1Ev+0x1c08>)
 8012dfa:	881b      	ldrh	r3, [r3, #0]
 8012dfc:	429a      	cmp	r2, r3
 8012dfe:	d315      	bcc.n	8012e2c <_ZN15Screen1ViewBaseC1Ev+0x1c10>
 8012e00:	4b09      	ldr	r3, [pc, #36]	; (8012e28 <_ZN15Screen1ViewBaseC1Ev+0x1c0c>)
 8012e02:	4a06      	ldr	r2, [pc, #24]	; (8012e1c <_ZN15Screen1ViewBaseC1Ev+0x1c00>)
 8012e04:	21af      	movs	r1, #175	; 0xaf
 8012e06:	4806      	ldr	r0, [pc, #24]	; (8012e20 <_ZN15Screen1ViewBaseC1Ev+0x1c04>)
 8012e08:	f01b f85a 	bl	802dec0 <__assert_func>
 8012e0c:	200097d8 	.word	0x200097d8
 8012e10:	0802f5ac 	.word	0x0802f5ac
 8012e14:	200097cc 	.word	0x200097cc
 8012e18:	0802f4a0 	.word	0x0802f4a0
 8012e1c:	0802f4e4 	.word	0x0802f4e4
 8012e20:	0802f514 	.word	0x0802f514
 8012e24:	200097d0 	.word	0x200097d0
 8012e28:	0802f558 	.word	0x0802f558
    }
 8012e2c:	bf00      	nop
        return texts->getText(typedTextId);
 8012e2e:	4baa      	ldr	r3, [pc, #680]	; (80130d8 <_ZN15Screen1ViewBaseC1Ev+0x1ebc>)
 8012e30:	681a      	ldr	r2, [r3, #0]
 8012e32:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012e36:	889b      	ldrh	r3, [r3, #4]
 8012e38:	4619      	mov	r1, r3
 8012e3a:	4610      	mov	r0, r2
 8012e3c:	f001 fb70 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8012e40:	4603      	mov	r3, r0
 8012e42:	bf00      	nop
 8012e44:	4aa5      	ldr	r2, [pc, #660]	; (80130dc <_ZN15Screen1ViewBaseC1Ev+0x1ec0>)
 8012e46:	210a      	movs	r1, #10
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f00c fa85 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012e4e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7fc fea0 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    ect_units.setWildcard(ect_unitsBuffer);
 8012e58:	1d3b      	adds	r3, r7, #4
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	f203 52fc 	addw	r2, r3, #1532	; 0x5fc
 8012e60:	1d3b      	adds	r3, r7, #4
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	f603 4314 	addw	r3, r3, #3092	; 0xc14
 8012e68:	4619      	mov	r1, r3
 8012e6a:	4610      	mov	r0, r2
 8012e6c:	f7fe f8a2 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_units.resizeToCurrentText();
 8012e70:	1d3b      	adds	r3, r7, #4
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f007 f8a1 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ERKY));
 8012e7e:	1d3b      	adds	r3, r7, #4
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	f203 54fc 	addw	r4, r3, #1532	; 0x5fc
 8012e86:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8012e8a:	2101      	movs	r1, #1
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f7fe f803 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8012e92:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8012e96:	4619      	mov	r1, r3
 8012e98:	4620      	mov	r0, r4
 8012e9a:	f007 f8ae 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012e9e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f7fc fe78 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    iat_value.setXY(31, 148);
 8012ea8:	1d3b      	adds	r3, r7, #4
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8012eb0:	2294      	movs	r2, #148	; 0x94
 8012eb2:	211f      	movs	r1, #31
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f7fd fde3 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    iat_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012eba:	1d3b      	adds	r3, r7, #4
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	f203 643c 	addw	r4, r3, #1596	; 0x63c
 8012ec2:	23ff      	movs	r3, #255	; 0xff
 8012ec4:	f887 33df 	strb.w	r3, [r7, #991]	; 0x3df
 8012ec8:	23ff      	movs	r3, #255	; 0xff
 8012eca:	f887 33de 	strb.w	r3, [r7, #990]	; 0x3de
 8012ece:	23ff      	movs	r3, #255	; 0xff
 8012ed0:	f887 33dd 	strb.w	r3, [r7, #989]	; 0x3dd
 8012ed4:	f897 33df 	ldrb.w	r3, [r7, #991]	; 0x3df
 8012ed8:	041b      	lsls	r3, r3, #16
 8012eda:	461a      	mov	r2, r3
 8012edc:	f897 33de 	ldrb.w	r3, [r7, #990]	; 0x3de
 8012ee0:	021b      	lsls	r3, r3, #8
 8012ee2:	431a      	orrs	r2, r3
 8012ee4:	f897 33dd 	ldrb.w	r3, [r7, #989]	; 0x3dd
 8012ee8:	4313      	orrs	r3, r2
 8012eea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012eee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8012ef2:	4611      	mov	r1, r2
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7fd fcf3 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 8012efa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	461a      	mov	r2, r3
 8012f02:	f8c7 43e0 	str.w	r4, [r7, #992]	; 0x3e0
 8012f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012f0a:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012f0c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8012f10:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012f14:	6812      	ldr	r2, [r2, #0]
 8012f16:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012f18:	bf00      	nop
    iat_value.setLinespacing(0);
 8012f1a:	1d3b      	adds	r3, r7, #4
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8012f22:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8012f26:	2300      	movs	r3, #0
 8012f28:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
        linespace = space;
 8012f2c:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8012f30:	f8b7 23e6 	ldrh.w	r2, [r7, #998]	; 0x3e6
 8012f34:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012f36:	bf00      	nop
    Unicode::snprintf(iat_valueBuffer, IAT_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_H85L).getText());
 8012f38:	1d3b      	adds	r3, r7, #4
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	f603 4428 	addw	r4, r3, #3112	; 0xc28
 8012f40:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8012f44:	211a      	movs	r1, #26
 8012f46:	4618      	mov	r0, r3
 8012f48:	f7fd ffa6 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8012f4c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8012f50:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012f54:	4b62      	ldr	r3, [pc, #392]	; (80130e0 <_ZN15Screen1ViewBaseC1Ev+0x1ec4>)
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d105      	bne.n	8012f68 <_ZN15Screen1ViewBaseC1Ev+0x1d4c>
 8012f5c:	4b61      	ldr	r3, [pc, #388]	; (80130e4 <_ZN15Screen1ViewBaseC1Ev+0x1ec8>)
 8012f5e:	4a62      	ldr	r2, [pc, #392]	; (80130e8 <_ZN15Screen1ViewBaseC1Ev+0x1ecc>)
 8012f60:	21ae      	movs	r1, #174	; 0xae
 8012f62:	4862      	ldr	r0, [pc, #392]	; (80130ec <_ZN15Screen1ViewBaseC1Ev+0x1ed0>)
 8012f64:	f01a ffac 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012f68:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8012f6c:	889a      	ldrh	r2, [r3, #4]
 8012f6e:	4b60      	ldr	r3, [pc, #384]	; (80130f0 <_ZN15Screen1ViewBaseC1Ev+0x1ed4>)
 8012f70:	881b      	ldrh	r3, [r3, #0]
 8012f72:	429a      	cmp	r2, r3
 8012f74:	d305      	bcc.n	8012f82 <_ZN15Screen1ViewBaseC1Ev+0x1d66>
 8012f76:	4b5f      	ldr	r3, [pc, #380]	; (80130f4 <_ZN15Screen1ViewBaseC1Ev+0x1ed8>)
 8012f78:	4a5b      	ldr	r2, [pc, #364]	; (80130e8 <_ZN15Screen1ViewBaseC1Ev+0x1ecc>)
 8012f7a:	21af      	movs	r1, #175	; 0xaf
 8012f7c:	485b      	ldr	r0, [pc, #364]	; (80130ec <_ZN15Screen1ViewBaseC1Ev+0x1ed0>)
 8012f7e:	f01a ff9f 	bl	802dec0 <__assert_func>
    }
 8012f82:	bf00      	nop
        return texts->getText(typedTextId);
 8012f84:	4b54      	ldr	r3, [pc, #336]	; (80130d8 <_ZN15Screen1ViewBaseC1Ev+0x1ebc>)
 8012f86:	681a      	ldr	r2, [r3, #0]
 8012f88:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8012f8c:	889b      	ldrh	r3, [r3, #4]
 8012f8e:	4619      	mov	r1, r3
 8012f90:	4610      	mov	r0, r2
 8012f92:	f001 fac5 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8012f96:	4603      	mov	r3, r0
 8012f98:	bf00      	nop
 8012f9a:	4a50      	ldr	r2, [pc, #320]	; (80130dc <_ZN15Screen1ViewBaseC1Ev+0x1ec0>)
 8012f9c:	2120      	movs	r1, #32
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	f00c f9da 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012fa4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f7fc fdf5 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    iat_value.setWildcard(iat_valueBuffer);
 8012fae:	1d3b      	adds	r3, r7, #4
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	f203 623c 	addw	r2, r3, #1596	; 0x63c
 8012fb6:	1d3b      	adds	r3, r7, #4
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	4610      	mov	r0, r2
 8012fc2:	f7fd fff7 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_value.resizeToCurrentText();
 8012fc6:	1d3b      	adds	r3, r7, #4
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f006 fff6 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z15X));
 8012fd4:	1d3b      	adds	r3, r7, #4
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	f203 643c 	addw	r4, r3, #1596	; 0x63c
 8012fdc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8012fe0:	2102      	movs	r1, #2
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f7fd ff58 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8012fe8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8012fec:	4619      	mov	r1, r3
 8012fee:	4620      	mov	r0, r4
 8012ff0:	f007 f803 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012ff4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f7fc fdcd 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    iat_label.setXY(34, 246);
 8012ffe:	1d3b      	adds	r3, r7, #4
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8013006:	22f6      	movs	r2, #246	; 0xf6
 8013008:	2122      	movs	r1, #34	; 0x22
 801300a:	4618      	mov	r0, r3
 801300c:	f7fd fd38 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    iat_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8013010:	1d3b      	adds	r3, r7, #4
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	f203 647c 	addw	r4, r3, #1660	; 0x67c
 8013018:	23ff      	movs	r3, #255	; 0xff
 801301a:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
 801301e:	23ff      	movs	r3, #255	; 0xff
 8013020:	f887 33f2 	strb.w	r3, [r7, #1010]	; 0x3f2
 8013024:	23ff      	movs	r3, #255	; 0xff
 8013026:	f887 33f1 	strb.w	r3, [r7, #1009]	; 0x3f1
 801302a:	f897 33f3 	ldrb.w	r3, [r7, #1011]	; 0x3f3
 801302e:	041b      	lsls	r3, r3, #16
 8013030:	461a      	mov	r2, r3
 8013032:	f897 33f2 	ldrb.w	r3, [r7, #1010]	; 0x3f2
 8013036:	021b      	lsls	r3, r3, #8
 8013038:	431a      	orrs	r2, r3
 801303a:	f897 33f1 	ldrb.w	r3, [r7, #1009]	; 0x3f1
 801303e:	4313      	orrs	r3, r2
 8013040:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013044:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8013048:	4611      	mov	r1, r2
 801304a:	4618      	mov	r0, r3
 801304c:	f7fd fc48 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 8013050:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	461a      	mov	r2, r3
 8013058:	f8c7 43f4 	str.w	r4, [r7, #1012]	; 0x3f4
 801305c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013060:	601a      	str	r2, [r3, #0]
        this->color = color;
 8013062:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8013066:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801306a:	6812      	ldr	r2, [r2, #0]
 801306c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801306e:	bf00      	nop
    iat_label.setLinespacing(0);
 8013070:	1d3b      	adds	r3, r7, #4
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8013078:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 801307c:	2300      	movs	r3, #0
 801307e:	f8a7 33fa 	strh.w	r3, [r7, #1018]	; 0x3fa
        linespace = space;
 8013082:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8013086:	f8b7 23fa 	ldrh.w	r2, [r7, #1018]	; 0x3fa
 801308a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801308c:	bf00      	nop
    Unicode::snprintf(iat_labelBuffer, IAT_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_K94Y).getText());
 801308e:	1d3b      	adds	r3, r7, #4
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	f603 4468 	addw	r4, r3, #3176	; 0xc68
 8013096:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801309a:	212b      	movs	r1, #43	; 0x2b
 801309c:	4618      	mov	r0, r3
 801309e:	f7fd fefb 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 80130a2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80130a6:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80130aa:	4b0d      	ldr	r3, [pc, #52]	; (80130e0 <_ZN15Screen1ViewBaseC1Ev+0x1ec4>)
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d105      	bne.n	80130be <_ZN15Screen1ViewBaseC1Ev+0x1ea2>
 80130b2:	4b0c      	ldr	r3, [pc, #48]	; (80130e4 <_ZN15Screen1ViewBaseC1Ev+0x1ec8>)
 80130b4:	4a0c      	ldr	r2, [pc, #48]	; (80130e8 <_ZN15Screen1ViewBaseC1Ev+0x1ecc>)
 80130b6:	21ae      	movs	r1, #174	; 0xae
 80130b8:	480c      	ldr	r0, [pc, #48]	; (80130ec <_ZN15Screen1ViewBaseC1Ev+0x1ed0>)
 80130ba:	f01a ff01 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80130be:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80130c2:	889a      	ldrh	r2, [r3, #4]
 80130c4:	4b0a      	ldr	r3, [pc, #40]	; (80130f0 <_ZN15Screen1ViewBaseC1Ev+0x1ed4>)
 80130c6:	881b      	ldrh	r3, [r3, #0]
 80130c8:	429a      	cmp	r2, r3
 80130ca:	d315      	bcc.n	80130f8 <_ZN15Screen1ViewBaseC1Ev+0x1edc>
 80130cc:	4b09      	ldr	r3, [pc, #36]	; (80130f4 <_ZN15Screen1ViewBaseC1Ev+0x1ed8>)
 80130ce:	4a06      	ldr	r2, [pc, #24]	; (80130e8 <_ZN15Screen1ViewBaseC1Ev+0x1ecc>)
 80130d0:	21af      	movs	r1, #175	; 0xaf
 80130d2:	4806      	ldr	r0, [pc, #24]	; (80130ec <_ZN15Screen1ViewBaseC1Ev+0x1ed0>)
 80130d4:	f01a fef4 	bl	802dec0 <__assert_func>
 80130d8:	200097d8 	.word	0x200097d8
 80130dc:	0802f5ac 	.word	0x0802f5ac
 80130e0:	200097cc 	.word	0x200097cc
 80130e4:	0802f4a0 	.word	0x0802f4a0
 80130e8:	0802f4e4 	.word	0x0802f4e4
 80130ec:	0802f514 	.word	0x0802f514
 80130f0:	200097d0 	.word	0x200097d0
 80130f4:	0802f558 	.word	0x0802f558
    }
 80130f8:	bf00      	nop
        return texts->getText(typedTextId);
 80130fa:	4bab      	ldr	r3, [pc, #684]	; (80133a8 <_ZN15Screen1ViewBaseC1Ev+0x218c>)
 80130fc:	681a      	ldr	r2, [r3, #0]
 80130fe:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8013102:	889b      	ldrh	r3, [r3, #4]
 8013104:	4619      	mov	r1, r3
 8013106:	4610      	mov	r0, r2
 8013108:	f001 fa0a 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 801310c:	4603      	mov	r3, r0
 801310e:	bf00      	nop
 8013110:	4aa6      	ldr	r2, [pc, #664]	; (80133ac <_ZN15Screen1ViewBaseC1Ev+0x2190>)
 8013112:	210a      	movs	r1, #10
 8013114:	4620      	mov	r0, r4
 8013116:	f00c f91f 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801311a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801311e:	4618      	mov	r0, r3
 8013120:	f7fc fd3a 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    iat_label.setWildcard(iat_labelBuffer);
 8013124:	1d3b      	adds	r3, r7, #4
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	f203 627c 	addw	r2, r3, #1660	; 0x67c
 801312c:	1d3b      	adds	r3, r7, #4
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 8013134:	4619      	mov	r1, r3
 8013136:	4610      	mov	r0, r2
 8013138:	f7fd ff3c 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_label.resizeToCurrentText();
 801313c:	1d3b      	adds	r3, r7, #4
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8013144:	4618      	mov	r0, r3
 8013146:	f006 ff3b 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_S5UQ));
 801314a:	1d3b      	adds	r3, r7, #4
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	f203 647c 	addw	r4, r3, #1660	; 0x67c
 8013152:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8013156:	2104      	movs	r1, #4
 8013158:	4618      	mov	r0, r3
 801315a:	f7fd fe9d 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 801315e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8013162:	4619      	mov	r1, r3
 8013164:	4620      	mov	r0, r4
 8013166:	f006 ff48 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801316a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801316e:	4618      	mov	r0, r3
 8013170:	f7fc fd12 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    iat_units.setXY(114, 246);
 8013174:	1d3b      	adds	r3, r7, #4
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 801317c:	22f6      	movs	r2, #246	; 0xf6
 801317e:	2172      	movs	r1, #114	; 0x72
 8013180:	4618      	mov	r0, r3
 8013182:	f7fd fc7d 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    iat_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8013186:	1d3b      	adds	r3, r7, #4
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	f203 64bc 	addw	r4, r3, #1724	; 0x6bc
 801318e:	23ff      	movs	r3, #255	; 0xff
 8013190:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
 8013194:	23ff      	movs	r3, #255	; 0xff
 8013196:	f887 3406 	strb.w	r3, [r7, #1030]	; 0x406
 801319a:	23ff      	movs	r3, #255	; 0xff
 801319c:	f887 3405 	strb.w	r3, [r7, #1029]	; 0x405
 80131a0:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 80131a4:	041b      	lsls	r3, r3, #16
 80131a6:	461a      	mov	r2, r3
 80131a8:	f897 3406 	ldrb.w	r3, [r7, #1030]	; 0x406
 80131ac:	021b      	lsls	r3, r3, #8
 80131ae:	431a      	orrs	r2, r3
 80131b0:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 80131b4:	4313      	orrs	r3, r2
 80131b6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80131ba:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80131be:	4611      	mov	r1, r2
 80131c0:	4618      	mov	r0, r3
 80131c2:	f7fd fb8d 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 80131c6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	461a      	mov	r2, r3
 80131ce:	f8c7 4408 	str.w	r4, [r7, #1032]	; 0x408
 80131d2:	f107 0320 	add.w	r3, r7, #32
 80131d6:	601a      	str	r2, [r3, #0]
        this->color = color;
 80131d8:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80131dc:	f107 0220 	add.w	r2, r7, #32
 80131e0:	6812      	ldr	r2, [r2, #0]
 80131e2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80131e4:	bf00      	nop
    iat_units.setLinespacing(0);
 80131e6:	1d3b      	adds	r3, r7, #4
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 80131ee:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 80131f2:	2300      	movs	r3, #0
 80131f4:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
        linespace = space;
 80131f8:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80131fc:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8013200:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8013202:	bf00      	nop
    Unicode::snprintf(iat_unitsBuffer, IAT_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_S9CZ).getText());
 8013204:	1d3b      	adds	r3, r7, #4
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	f603 447c 	addw	r4, r3, #3196	; 0xc7c
 801320c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013210:	212a      	movs	r1, #42	; 0x2a
 8013212:	4618      	mov	r0, r3
 8013214:	f7fd fe40 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8013218:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801321c:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013220:	4b63      	ldr	r3, [pc, #396]	; (80133b0 <_ZN15Screen1ViewBaseC1Ev+0x2194>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d105      	bne.n	8013234 <_ZN15Screen1ViewBaseC1Ev+0x2018>
 8013228:	4b62      	ldr	r3, [pc, #392]	; (80133b4 <_ZN15Screen1ViewBaseC1Ev+0x2198>)
 801322a:	4a63      	ldr	r2, [pc, #396]	; (80133b8 <_ZN15Screen1ViewBaseC1Ev+0x219c>)
 801322c:	21ae      	movs	r1, #174	; 0xae
 801322e:	4863      	ldr	r0, [pc, #396]	; (80133bc <_ZN15Screen1ViewBaseC1Ev+0x21a0>)
 8013230:	f01a fe46 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8013234:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8013238:	889a      	ldrh	r2, [r3, #4]
 801323a:	4b61      	ldr	r3, [pc, #388]	; (80133c0 <_ZN15Screen1ViewBaseC1Ev+0x21a4>)
 801323c:	881b      	ldrh	r3, [r3, #0]
 801323e:	429a      	cmp	r2, r3
 8013240:	d305      	bcc.n	801324e <_ZN15Screen1ViewBaseC1Ev+0x2032>
 8013242:	4b60      	ldr	r3, [pc, #384]	; (80133c4 <_ZN15Screen1ViewBaseC1Ev+0x21a8>)
 8013244:	4a5c      	ldr	r2, [pc, #368]	; (80133b8 <_ZN15Screen1ViewBaseC1Ev+0x219c>)
 8013246:	21af      	movs	r1, #175	; 0xaf
 8013248:	485c      	ldr	r0, [pc, #368]	; (80133bc <_ZN15Screen1ViewBaseC1Ev+0x21a0>)
 801324a:	f01a fe39 	bl	802dec0 <__assert_func>
    }
 801324e:	bf00      	nop
        return texts->getText(typedTextId);
 8013250:	4b55      	ldr	r3, [pc, #340]	; (80133a8 <_ZN15Screen1ViewBaseC1Ev+0x218c>)
 8013252:	681a      	ldr	r2, [r3, #0]
 8013254:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013258:	889b      	ldrh	r3, [r3, #4]
 801325a:	4619      	mov	r1, r3
 801325c:	4610      	mov	r0, r2
 801325e:	f001 f95f 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8013262:	4603      	mov	r3, r0
 8013264:	bf00      	nop
 8013266:	4a51      	ldr	r2, [pc, #324]	; (80133ac <_ZN15Screen1ViewBaseC1Ev+0x2190>)
 8013268:	210a      	movs	r1, #10
 801326a:	4620      	mov	r0, r4
 801326c:	f00c f874 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013270:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013274:	4618      	mov	r0, r3
 8013276:	f7fc fc8f 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    iat_units.setWildcard(iat_unitsBuffer);
 801327a:	1d3b      	adds	r3, r7, #4
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	f203 62bc 	addw	r2, r3, #1724	; 0x6bc
 8013282:	1d3b      	adds	r3, r7, #4
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	f603 437c 	addw	r3, r3, #3196	; 0xc7c
 801328a:	4619      	mov	r1, r3
 801328c:	4610      	mov	r0, r2
 801328e:	f7fd fe91 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_units.resizeToCurrentText();
 8013292:	1d3b      	adds	r3, r7, #4
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 801329a:	4618      	mov	r0, r3
 801329c:	f006 fe90 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XBZK));
 80132a0:	1d3b      	adds	r3, r7, #4
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	f203 64bc 	addw	r4, r3, #1724	; 0x6bc
 80132a8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80132ac:	2103      	movs	r1, #3
 80132ae:	4618      	mov	r0, r3
 80132b0:	f7fd fdf2 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 80132b4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80132b8:	4619      	mov	r1, r3
 80132ba:	4620      	mov	r0, r4
 80132bc:	f006 fe9d 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80132c0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80132c4:	4618      	mov	r0, r3
 80132c6:	f7fc fc67 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    oilp_value.setXY(31, 299);
 80132ca:	1d3b      	adds	r3, r7, #4
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 80132d2:	f240 122b 	movw	r2, #299	; 0x12b
 80132d6:	211f      	movs	r1, #31
 80132d8:	4618      	mov	r0, r3
 80132da:	f7fd fbd1 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    oilp_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80132de:	1d3b      	adds	r3, r7, #4
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	f203 64fc 	addw	r4, r3, #1788	; 0x6fc
 80132e6:	23ff      	movs	r3, #255	; 0xff
 80132e8:	f887 341b 	strb.w	r3, [r7, #1051]	; 0x41b
 80132ec:	23ff      	movs	r3, #255	; 0xff
 80132ee:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
 80132f2:	23ff      	movs	r3, #255	; 0xff
 80132f4:	f887 3419 	strb.w	r3, [r7, #1049]	; 0x419
 80132f8:	f897 341b 	ldrb.w	r3, [r7, #1051]	; 0x41b
 80132fc:	041b      	lsls	r3, r3, #16
 80132fe:	461a      	mov	r2, r3
 8013300:	f897 341a 	ldrb.w	r3, [r7, #1050]	; 0x41a
 8013304:	021b      	lsls	r3, r3, #8
 8013306:	431a      	orrs	r2, r3
 8013308:	f897 3419 	ldrb.w	r3, [r7, #1049]	; 0x419
 801330c:	4313      	orrs	r3, r2
 801330e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013312:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8013316:	4611      	mov	r1, r2
 8013318:	4618      	mov	r0, r3
 801331a:	f7fd fae1 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 801331e:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	461a      	mov	r2, r3
 8013326:	f8c7 441c 	str.w	r4, [r7, #1052]	; 0x41c
 801332a:	f107 031c 	add.w	r3, r7, #28
 801332e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8013330:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8013334:	f107 021c 	add.w	r2, r7, #28
 8013338:	6812      	ldr	r2, [r2, #0]
 801333a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801333c:	bf00      	nop
    oilp_value.setLinespacing(0);
 801333e:	1d3b      	adds	r3, r7, #4
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8013346:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 801334a:	2300      	movs	r3, #0
 801334c:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
        linespace = space;
 8013350:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8013354:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8013358:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801335a:	bf00      	nop
    Unicode::snprintf(oilp_valueBuffer, OILP_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_DHUY).getText());
 801335c:	1d3b      	adds	r3, r7, #4
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	f503 6449 	add.w	r4, r3, #3216	; 0xc90
 8013364:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8013368:	211b      	movs	r1, #27
 801336a:	4618      	mov	r0, r3
 801336c:	f7fd fd94 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8013370:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8013374:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013378:	4b0d      	ldr	r3, [pc, #52]	; (80133b0 <_ZN15Screen1ViewBaseC1Ev+0x2194>)
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d105      	bne.n	801338c <_ZN15Screen1ViewBaseC1Ev+0x2170>
 8013380:	4b0c      	ldr	r3, [pc, #48]	; (80133b4 <_ZN15Screen1ViewBaseC1Ev+0x2198>)
 8013382:	4a0d      	ldr	r2, [pc, #52]	; (80133b8 <_ZN15Screen1ViewBaseC1Ev+0x219c>)
 8013384:	21ae      	movs	r1, #174	; 0xae
 8013386:	480d      	ldr	r0, [pc, #52]	; (80133bc <_ZN15Screen1ViewBaseC1Ev+0x21a0>)
 8013388:	f01a fd9a 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801338c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8013390:	889a      	ldrh	r2, [r3, #4]
 8013392:	4b0b      	ldr	r3, [pc, #44]	; (80133c0 <_ZN15Screen1ViewBaseC1Ev+0x21a4>)
 8013394:	881b      	ldrh	r3, [r3, #0]
 8013396:	429a      	cmp	r2, r3
 8013398:	d316      	bcc.n	80133c8 <_ZN15Screen1ViewBaseC1Ev+0x21ac>
 801339a:	4b0a      	ldr	r3, [pc, #40]	; (80133c4 <_ZN15Screen1ViewBaseC1Ev+0x21a8>)
 801339c:	4a06      	ldr	r2, [pc, #24]	; (80133b8 <_ZN15Screen1ViewBaseC1Ev+0x219c>)
 801339e:	21af      	movs	r1, #175	; 0xaf
 80133a0:	4806      	ldr	r0, [pc, #24]	; (80133bc <_ZN15Screen1ViewBaseC1Ev+0x21a0>)
 80133a2:	f01a fd8d 	bl	802dec0 <__assert_func>
 80133a6:	bf00      	nop
 80133a8:	200097d8 	.word	0x200097d8
 80133ac:	0802f5ac 	.word	0x0802f5ac
 80133b0:	200097cc 	.word	0x200097cc
 80133b4:	0802f4a0 	.word	0x0802f4a0
 80133b8:	0802f4e4 	.word	0x0802f4e4
 80133bc:	0802f514 	.word	0x0802f514
 80133c0:	200097d0 	.word	0x200097d0
 80133c4:	0802f558 	.word	0x0802f558
    }
 80133c8:	bf00      	nop
        return texts->getText(typedTextId);
 80133ca:	4bab      	ldr	r3, [pc, #684]	; (8013678 <_ZN15Screen1ViewBaseC1Ev+0x245c>)
 80133cc:	681a      	ldr	r2, [r3, #0]
 80133ce:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80133d2:	889b      	ldrh	r3, [r3, #4]
 80133d4:	4619      	mov	r1, r3
 80133d6:	4610      	mov	r0, r2
 80133d8:	f001 f8a2 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 80133dc:	4603      	mov	r3, r0
 80133de:	bf00      	nop
 80133e0:	4aa6      	ldr	r2, [pc, #664]	; (801367c <_ZN15Screen1ViewBaseC1Ev+0x2460>)
 80133e2:	2120      	movs	r1, #32
 80133e4:	4620      	mov	r0, r4
 80133e6:	f00b ffb7 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80133ea:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7fc fbd2 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    oilp_value.setWildcard(oilp_valueBuffer);
 80133f4:	1d3b      	adds	r3, r7, #4
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	f203 62fc 	addw	r2, r3, #1788	; 0x6fc
 80133fc:	1d3b      	adds	r3, r7, #4
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	f503 6349 	add.w	r3, r3, #3216	; 0xc90
 8013404:	4619      	mov	r1, r3
 8013406:	4610      	mov	r0, r2
 8013408:	f7fd fdd4 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_value.resizeToCurrentText();
 801340c:	1d3b      	adds	r3, r7, #4
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8013414:	4618      	mov	r0, r3
 8013416:	f006 fdd3 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GFHB));
 801341a:	1d3b      	adds	r3, r7, #4
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	f203 64fc 	addw	r4, r3, #1788	; 0x6fc
 8013422:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8013426:	2105      	movs	r1, #5
 8013428:	4618      	mov	r0, r3
 801342a:	f7fd fd35 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 801342e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8013432:	4619      	mov	r1, r3
 8013434:	4620      	mov	r0, r4
 8013436:	f006 fde0 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801343a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801343e:	4618      	mov	r0, r3
 8013440:	f7fc fbaa 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    oilp_label.setXY(34, 400);
 8013444:	1d3b      	adds	r3, r7, #4
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 801344c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013450:	2122      	movs	r1, #34	; 0x22
 8013452:	4618      	mov	r0, r3
 8013454:	f7fd fb14 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    oilp_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8013458:	1d3b      	adds	r3, r7, #4
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	f203 743c 	addw	r4, r3, #1852	; 0x73c
 8013460:	23ff      	movs	r3, #255	; 0xff
 8013462:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
 8013466:	23ff      	movs	r3, #255	; 0xff
 8013468:	f887 342e 	strb.w	r3, [r7, #1070]	; 0x42e
 801346c:	23ff      	movs	r3, #255	; 0xff
 801346e:	f887 342d 	strb.w	r3, [r7, #1069]	; 0x42d
 8013472:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8013476:	041b      	lsls	r3, r3, #16
 8013478:	461a      	mov	r2, r3
 801347a:	f897 342e 	ldrb.w	r3, [r7, #1070]	; 0x42e
 801347e:	021b      	lsls	r3, r3, #8
 8013480:	431a      	orrs	r2, r3
 8013482:	f897 342d 	ldrb.w	r3, [r7, #1069]	; 0x42d
 8013486:	4313      	orrs	r3, r2
 8013488:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801348c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8013490:	4611      	mov	r1, r2
 8013492:	4618      	mov	r0, r3
 8013494:	f7fd fa24 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 8013498:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	461a      	mov	r2, r3
 80134a0:	f8c7 4430 	str.w	r4, [r7, #1072]	; 0x430
 80134a4:	f107 0318 	add.w	r3, r7, #24
 80134a8:	601a      	str	r2, [r3, #0]
        this->color = color;
 80134aa:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80134ae:	f107 0218 	add.w	r2, r7, #24
 80134b2:	6812      	ldr	r2, [r2, #0]
 80134b4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80134b6:	bf00      	nop
    oilp_label.setLinespacing(0);
 80134b8:	1d3b      	adds	r3, r7, #4
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 80134c0:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80134c4:	2300      	movs	r3, #0
 80134c6:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436
        linespace = space;
 80134ca:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80134ce:	f8b7 2436 	ldrh.w	r2, [r7, #1078]	; 0x436
 80134d2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80134d4:	bf00      	nop
    Unicode::snprintf(oilp_labelBuffer, OILP_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_9VHS).getText());
 80134d6:	1d3b      	adds	r3, r7, #4
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	f503 644d 	add.w	r4, r3, #3280	; 0xcd0
 80134de:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80134e2:	2129      	movs	r1, #41	; 0x29
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7fd fcd7 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 80134ea:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80134ee:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80134f2:	4b63      	ldr	r3, [pc, #396]	; (8013680 <_ZN15Screen1ViewBaseC1Ev+0x2464>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d105      	bne.n	8013506 <_ZN15Screen1ViewBaseC1Ev+0x22ea>
 80134fa:	4b62      	ldr	r3, [pc, #392]	; (8013684 <_ZN15Screen1ViewBaseC1Ev+0x2468>)
 80134fc:	4a62      	ldr	r2, [pc, #392]	; (8013688 <_ZN15Screen1ViewBaseC1Ev+0x246c>)
 80134fe:	21ae      	movs	r1, #174	; 0xae
 8013500:	4862      	ldr	r0, [pc, #392]	; (801368c <_ZN15Screen1ViewBaseC1Ev+0x2470>)
 8013502:	f01a fcdd 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8013506:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801350a:	889a      	ldrh	r2, [r3, #4]
 801350c:	4b60      	ldr	r3, [pc, #384]	; (8013690 <_ZN15Screen1ViewBaseC1Ev+0x2474>)
 801350e:	881b      	ldrh	r3, [r3, #0]
 8013510:	429a      	cmp	r2, r3
 8013512:	d305      	bcc.n	8013520 <_ZN15Screen1ViewBaseC1Ev+0x2304>
 8013514:	4b5f      	ldr	r3, [pc, #380]	; (8013694 <_ZN15Screen1ViewBaseC1Ev+0x2478>)
 8013516:	4a5c      	ldr	r2, [pc, #368]	; (8013688 <_ZN15Screen1ViewBaseC1Ev+0x246c>)
 8013518:	21af      	movs	r1, #175	; 0xaf
 801351a:	485c      	ldr	r0, [pc, #368]	; (801368c <_ZN15Screen1ViewBaseC1Ev+0x2470>)
 801351c:	f01a fcd0 	bl	802dec0 <__assert_func>
    }
 8013520:	bf00      	nop
        return texts->getText(typedTextId);
 8013522:	4b55      	ldr	r3, [pc, #340]	; (8013678 <_ZN15Screen1ViewBaseC1Ev+0x245c>)
 8013524:	681a      	ldr	r2, [r3, #0]
 8013526:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801352a:	889b      	ldrh	r3, [r3, #4]
 801352c:	4619      	mov	r1, r3
 801352e:	4610      	mov	r0, r2
 8013530:	f000 fff6 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8013534:	4603      	mov	r3, r0
 8013536:	bf00      	nop
 8013538:	4a50      	ldr	r2, [pc, #320]	; (801367c <_ZN15Screen1ViewBaseC1Ev+0x2460>)
 801353a:	210a      	movs	r1, #10
 801353c:	4620      	mov	r0, r4
 801353e:	f00b ff0b 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013542:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8013546:	4618      	mov	r0, r3
 8013548:	f7fc fb26 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    oilp_label.setWildcard(oilp_labelBuffer);
 801354c:	1d3b      	adds	r3, r7, #4
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	f203 723c 	addw	r2, r3, #1852	; 0x73c
 8013554:	1d3b      	adds	r3, r7, #4
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 801355c:	4619      	mov	r1, r3
 801355e:	4610      	mov	r0, r2
 8013560:	f7fd fd28 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_label.resizeToCurrentText();
 8013564:	1d3b      	adds	r3, r7, #4
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 801356c:	4618      	mov	r0, r3
 801356e:	f006 fd27 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BVOP));
 8013572:	1d3b      	adds	r3, r7, #4
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	f203 743c 	addw	r4, r3, #1852	; 0x73c
 801357a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801357e:	2107      	movs	r1, #7
 8013580:	4618      	mov	r0, r3
 8013582:	f7fd fc89 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8013586:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801358a:	4619      	mov	r1, r3
 801358c:	4620      	mov	r0, r4
 801358e:	f006 fd34 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013592:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013596:	4618      	mov	r0, r3
 8013598:	f7fc fafe 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    oilp_units.setXY(137, 400);
 801359c:	1d3b      	adds	r3, r7, #4
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80135a4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80135a8:	2189      	movs	r1, #137	; 0x89
 80135aa:	4618      	mov	r0, r3
 80135ac:	f7fd fa68 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    oilp_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80135b0:	1d3b      	adds	r3, r7, #4
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	f203 747c 	addw	r4, r3, #1916	; 0x77c
 80135b8:	23ff      	movs	r3, #255	; 0xff
 80135ba:	f887 3443 	strb.w	r3, [r7, #1091]	; 0x443
 80135be:	23ff      	movs	r3, #255	; 0xff
 80135c0:	f887 3442 	strb.w	r3, [r7, #1090]	; 0x442
 80135c4:	23ff      	movs	r3, #255	; 0xff
 80135c6:	f887 3441 	strb.w	r3, [r7, #1089]	; 0x441
 80135ca:	f897 3443 	ldrb.w	r3, [r7, #1091]	; 0x443
 80135ce:	041b      	lsls	r3, r3, #16
 80135d0:	461a      	mov	r2, r3
 80135d2:	f897 3442 	ldrb.w	r3, [r7, #1090]	; 0x442
 80135d6:	021b      	lsls	r3, r3, #8
 80135d8:	431a      	orrs	r2, r3
 80135da:	f897 3441 	ldrb.w	r3, [r7, #1089]	; 0x441
 80135de:	4313      	orrs	r3, r2
 80135e0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80135e4:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80135e8:	4611      	mov	r1, r2
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7fd f978 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 80135f0:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	461a      	mov	r2, r3
 80135f8:	f8c7 4444 	str.w	r4, [r7, #1092]	; 0x444
 80135fc:	f107 0314 	add.w	r3, r7, #20
 8013600:	601a      	str	r2, [r3, #0]
        this->color = color;
 8013602:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8013606:	f107 0214 	add.w	r2, r7, #20
 801360a:	6812      	ldr	r2, [r2, #0]
 801360c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801360e:	bf00      	nop
    oilp_units.setLinespacing(0);
 8013610:	1d3b      	adds	r3, r7, #4
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8013618:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 801361c:	2300      	movs	r3, #0
 801361e:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        linespace = space;
 8013622:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8013626:	f8b7 244a 	ldrh.w	r2, [r7, #1098]	; 0x44a
 801362a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801362c:	bf00      	nop
    Unicode::snprintf(oilp_unitsBuffer, OILP_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_9IGG).getText());
 801362e:	1d3b      	adds	r3, r7, #4
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f603 44e4 	addw	r4, r3, #3300	; 0xce4
 8013636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801363a:	2128      	movs	r1, #40	; 0x28
 801363c:	4618      	mov	r0, r3
 801363e:	f7fd fc2b 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8013642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013646:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801364a:	4b0d      	ldr	r3, [pc, #52]	; (8013680 <_ZN15Screen1ViewBaseC1Ev+0x2464>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d105      	bne.n	801365e <_ZN15Screen1ViewBaseC1Ev+0x2442>
 8013652:	4b0c      	ldr	r3, [pc, #48]	; (8013684 <_ZN15Screen1ViewBaseC1Ev+0x2468>)
 8013654:	4a0c      	ldr	r2, [pc, #48]	; (8013688 <_ZN15Screen1ViewBaseC1Ev+0x246c>)
 8013656:	21ae      	movs	r1, #174	; 0xae
 8013658:	480c      	ldr	r0, [pc, #48]	; (801368c <_ZN15Screen1ViewBaseC1Ev+0x2470>)
 801365a:	f01a fc31 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801365e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8013662:	889a      	ldrh	r2, [r3, #4]
 8013664:	4b0a      	ldr	r3, [pc, #40]	; (8013690 <_ZN15Screen1ViewBaseC1Ev+0x2474>)
 8013666:	881b      	ldrh	r3, [r3, #0]
 8013668:	429a      	cmp	r2, r3
 801366a:	d315      	bcc.n	8013698 <_ZN15Screen1ViewBaseC1Ev+0x247c>
 801366c:	4b09      	ldr	r3, [pc, #36]	; (8013694 <_ZN15Screen1ViewBaseC1Ev+0x2478>)
 801366e:	4a06      	ldr	r2, [pc, #24]	; (8013688 <_ZN15Screen1ViewBaseC1Ev+0x246c>)
 8013670:	21af      	movs	r1, #175	; 0xaf
 8013672:	4806      	ldr	r0, [pc, #24]	; (801368c <_ZN15Screen1ViewBaseC1Ev+0x2470>)
 8013674:	f01a fc24 	bl	802dec0 <__assert_func>
 8013678:	200097d8 	.word	0x200097d8
 801367c:	0802f5ac 	.word	0x0802f5ac
 8013680:	200097cc 	.word	0x200097cc
 8013684:	0802f4a0 	.word	0x0802f4a0
 8013688:	0802f4e4 	.word	0x0802f4e4
 801368c:	0802f514 	.word	0x0802f514
 8013690:	200097d0 	.word	0x200097d0
 8013694:	0802f558 	.word	0x0802f558
    }
 8013698:	bf00      	nop
        return texts->getText(typedTextId);
 801369a:	4bab      	ldr	r3, [pc, #684]	; (8013948 <_ZN15Screen1ViewBaseC1Ev+0x272c>)
 801369c:	681a      	ldr	r2, [r3, #0]
 801369e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80136a2:	889b      	ldrh	r3, [r3, #4]
 80136a4:	4619      	mov	r1, r3
 80136a6:	4610      	mov	r0, r2
 80136a8:	f000 ff3a 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 80136ac:	4603      	mov	r3, r0
 80136ae:	bf00      	nop
 80136b0:	4aa6      	ldr	r2, [pc, #664]	; (801394c <_ZN15Screen1ViewBaseC1Ev+0x2730>)
 80136b2:	210a      	movs	r1, #10
 80136b4:	4620      	mov	r0, r4
 80136b6:	f00b fe4f 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80136ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80136be:	4618      	mov	r0, r3
 80136c0:	f7fc fa6a 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    oilp_units.setWildcard(oilp_unitsBuffer);
 80136c4:	1d3b      	adds	r3, r7, #4
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	f203 727c 	addw	r2, r3, #1916	; 0x77c
 80136cc:	1d3b      	adds	r3, r7, #4
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	f603 43e4 	addw	r3, r3, #3300	; 0xce4
 80136d4:	4619      	mov	r1, r3
 80136d6:	4610      	mov	r0, r2
 80136d8:	f7fd fc6c 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_units.resizeToCurrentText();
 80136dc:	1d3b      	adds	r3, r7, #4
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80136e4:	4618      	mov	r0, r3
 80136e6:	f006 fc6b 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_R7A4));
 80136ea:	1d3b      	adds	r3, r7, #4
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	f203 747c 	addw	r4, r3, #1916	; 0x77c
 80136f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80136f6:	2106      	movs	r1, #6
 80136f8:	4618      	mov	r0, r3
 80136fa:	f7fd fbcd 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 80136fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8013702:	4619      	mov	r1, r3
 8013704:	4620      	mov	r0, r4
 8013706:	f006 fc78 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801370a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801370e:	4618      	mov	r0, r3
 8013710:	f7fc fa42 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_value.setXY(31, 448);
 8013714:	1d3b      	adds	r3, r7, #4
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 801371c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8013720:	211f      	movs	r1, #31
 8013722:	4618      	mov	r0, r3
 8013724:	f7fd f9ac 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8013728:	1d3b      	adds	r3, r7, #4
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	f203 74bc 	addw	r4, r3, #1980	; 0x7bc
 8013730:	23ff      	movs	r3, #255	; 0xff
 8013732:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 8013736:	23ff      	movs	r3, #255	; 0xff
 8013738:	f887 3456 	strb.w	r3, [r7, #1110]	; 0x456
 801373c:	23ff      	movs	r3, #255	; 0xff
 801373e:	f887 3455 	strb.w	r3, [r7, #1109]	; 0x455
 8013742:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8013746:	041b      	lsls	r3, r3, #16
 8013748:	461a      	mov	r2, r3
 801374a:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 801374e:	021b      	lsls	r3, r3, #8
 8013750:	431a      	orrs	r2, r3
 8013752:	f897 3455 	ldrb.w	r3, [r7, #1109]	; 0x455
 8013756:	4313      	orrs	r3, r2
 8013758:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801375c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8013760:	4611      	mov	r1, r2
 8013762:	4618      	mov	r0, r3
 8013764:	f7fd f8bc 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 8013768:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	461a      	mov	r2, r3
 8013770:	f8c7 4458 	str.w	r4, [r7, #1112]	; 0x458
 8013774:	f107 0310 	add.w	r3, r7, #16
 8013778:	601a      	str	r2, [r3, #0]
        this->color = color;
 801377a:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 801377e:	f107 0210 	add.w	r2, r7, #16
 8013782:	6812      	ldr	r2, [r2, #0]
 8013784:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013786:	bf00      	nop
    fuelp_value.setLinespacing(0);
 8013788:	1d3b      	adds	r3, r7, #4
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8013790:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8013794:	2300      	movs	r3, #0
 8013796:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
        linespace = space;
 801379a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 801379e:	f8b7 245e 	ldrh.w	r2, [r7, #1118]	; 0x45e
 80137a2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80137a4:	bf00      	nop
    Unicode::snprintf(fuelp_valueBuffer, FUELP_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_C87O).getText());
 80137a6:	1d3b      	adds	r3, r7, #4
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	f603 44f8 	addw	r4, r3, #3320	; 0xcf8
 80137ae:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80137b2:	211c      	movs	r1, #28
 80137b4:	4618      	mov	r0, r3
 80137b6:	f7fd fb6f 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 80137ba:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80137be:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80137c2:	4b63      	ldr	r3, [pc, #396]	; (8013950 <_ZN15Screen1ViewBaseC1Ev+0x2734>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d105      	bne.n	80137d6 <_ZN15Screen1ViewBaseC1Ev+0x25ba>
 80137ca:	4b62      	ldr	r3, [pc, #392]	; (8013954 <_ZN15Screen1ViewBaseC1Ev+0x2738>)
 80137cc:	4a62      	ldr	r2, [pc, #392]	; (8013958 <_ZN15Screen1ViewBaseC1Ev+0x273c>)
 80137ce:	21ae      	movs	r1, #174	; 0xae
 80137d0:	4862      	ldr	r0, [pc, #392]	; (801395c <_ZN15Screen1ViewBaseC1Ev+0x2740>)
 80137d2:	f01a fb75 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80137d6:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80137da:	889a      	ldrh	r2, [r3, #4]
 80137dc:	4b60      	ldr	r3, [pc, #384]	; (8013960 <_ZN15Screen1ViewBaseC1Ev+0x2744>)
 80137de:	881b      	ldrh	r3, [r3, #0]
 80137e0:	429a      	cmp	r2, r3
 80137e2:	d305      	bcc.n	80137f0 <_ZN15Screen1ViewBaseC1Ev+0x25d4>
 80137e4:	4b5f      	ldr	r3, [pc, #380]	; (8013964 <_ZN15Screen1ViewBaseC1Ev+0x2748>)
 80137e6:	4a5c      	ldr	r2, [pc, #368]	; (8013958 <_ZN15Screen1ViewBaseC1Ev+0x273c>)
 80137e8:	21af      	movs	r1, #175	; 0xaf
 80137ea:	485c      	ldr	r0, [pc, #368]	; (801395c <_ZN15Screen1ViewBaseC1Ev+0x2740>)
 80137ec:	f01a fb68 	bl	802dec0 <__assert_func>
    }
 80137f0:	bf00      	nop
        return texts->getText(typedTextId);
 80137f2:	4b55      	ldr	r3, [pc, #340]	; (8013948 <_ZN15Screen1ViewBaseC1Ev+0x272c>)
 80137f4:	681a      	ldr	r2, [r3, #0]
 80137f6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80137fa:	889b      	ldrh	r3, [r3, #4]
 80137fc:	4619      	mov	r1, r3
 80137fe:	4610      	mov	r0, r2
 8013800:	f000 fe8e 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8013804:	4603      	mov	r3, r0
 8013806:	bf00      	nop
 8013808:	4a50      	ldr	r2, [pc, #320]	; (801394c <_ZN15Screen1ViewBaseC1Ev+0x2730>)
 801380a:	2120      	movs	r1, #32
 801380c:	4620      	mov	r0, r4
 801380e:	f00b fda3 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013812:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8013816:	4618      	mov	r0, r3
 8013818:	f7fc f9be 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_value.setWildcard(fuelp_valueBuffer);
 801381c:	1d3b      	adds	r3, r7, #4
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 8013824:	1d3b      	adds	r3, r7, #4
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	f603 43f8 	addw	r3, r3, #3320	; 0xcf8
 801382c:	4619      	mov	r1, r3
 801382e:	4610      	mov	r0, r2
 8013830:	f7fd fbc0 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_value.resizeToCurrentText();
 8013834:	1d3b      	adds	r3, r7, #4
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 801383c:	4618      	mov	r0, r3
 801383e:	f006 fbbf 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0AFA));
 8013842:	1d3b      	adds	r3, r7, #4
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	f203 74bc 	addw	r4, r3, #1980	; 0x7bc
 801384a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801384e:	2108      	movs	r1, #8
 8013850:	4618      	mov	r0, r3
 8013852:	f7fd fb21 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8013856:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801385a:	4619      	mov	r1, r3
 801385c:	4620      	mov	r0, r4
 801385e:	f006 fbcc 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013862:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013866:	4618      	mov	r0, r3
 8013868:	f7fc f996 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_label.setXY(34, 547);
 801386c:	1d3b      	adds	r3, r7, #4
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8013874:	f240 2223 	movw	r2, #547	; 0x223
 8013878:	2122      	movs	r1, #34	; 0x22
 801387a:	4618      	mov	r0, r3
 801387c:	f7fd f900 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8013880:	1d3b      	adds	r3, r7, #4
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	f203 74fc 	addw	r4, r3, #2044	; 0x7fc
 8013888:	23ff      	movs	r3, #255	; 0xff
 801388a:	f887 346b 	strb.w	r3, [r7, #1131]	; 0x46b
 801388e:	23ff      	movs	r3, #255	; 0xff
 8013890:	f887 346a 	strb.w	r3, [r7, #1130]	; 0x46a
 8013894:	23ff      	movs	r3, #255	; 0xff
 8013896:	f887 3469 	strb.w	r3, [r7, #1129]	; 0x469
 801389a:	f897 346b 	ldrb.w	r3, [r7, #1131]	; 0x46b
 801389e:	041b      	lsls	r3, r3, #16
 80138a0:	461a      	mov	r2, r3
 80138a2:	f897 346a 	ldrb.w	r3, [r7, #1130]	; 0x46a
 80138a6:	021b      	lsls	r3, r3, #8
 80138a8:	431a      	orrs	r2, r3
 80138aa:	f897 3469 	ldrb.w	r3, [r7, #1129]	; 0x469
 80138ae:	4313      	orrs	r3, r2
 80138b0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80138b4:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80138b8:	4611      	mov	r1, r2
 80138ba:	4618      	mov	r0, r3
 80138bc:	f7fd f810 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 80138c0:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	461a      	mov	r2, r3
 80138c8:	f8c7 446c 	str.w	r4, [r7, #1132]	; 0x46c
 80138cc:	f107 030c 	add.w	r3, r7, #12
 80138d0:	601a      	str	r2, [r3, #0]
        this->color = color;
 80138d2:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80138d6:	f107 020c 	add.w	r2, r7, #12
 80138da:	6812      	ldr	r2, [r2, #0]
 80138dc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80138de:	bf00      	nop
    fuelp_label.setLinespacing(0);
 80138e0:	1d3b      	adds	r3, r7, #4
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 80138e8:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 80138ec:	2300      	movs	r3, #0
 80138ee:	f8a7 3472 	strh.w	r3, [r7, #1138]	; 0x472
        linespace = space;
 80138f2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80138f6:	f8b7 2472 	ldrh.w	r2, [r7, #1138]	; 0x472
 80138fa:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80138fc:	bf00      	nop
    Unicode::snprintf(fuelp_labelBuffer, FUELP_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_4VJ9).getText());
 80138fe:	1d3b      	adds	r3, r7, #4
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	f603 5438 	addw	r4, r3, #3384	; 0xd38
 8013906:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801390a:	2127      	movs	r1, #39	; 0x27
 801390c:	4618      	mov	r0, r3
 801390e:	f7fd fac3 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8013912:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013916:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801391a:	4b0d      	ldr	r3, [pc, #52]	; (8013950 <_ZN15Screen1ViewBaseC1Ev+0x2734>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d105      	bne.n	801392e <_ZN15Screen1ViewBaseC1Ev+0x2712>
 8013922:	4b0c      	ldr	r3, [pc, #48]	; (8013954 <_ZN15Screen1ViewBaseC1Ev+0x2738>)
 8013924:	4a0c      	ldr	r2, [pc, #48]	; (8013958 <_ZN15Screen1ViewBaseC1Ev+0x273c>)
 8013926:	21ae      	movs	r1, #174	; 0xae
 8013928:	480c      	ldr	r0, [pc, #48]	; (801395c <_ZN15Screen1ViewBaseC1Ev+0x2740>)
 801392a:	f01a fac9 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801392e:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8013932:	889a      	ldrh	r2, [r3, #4]
 8013934:	4b0a      	ldr	r3, [pc, #40]	; (8013960 <_ZN15Screen1ViewBaseC1Ev+0x2744>)
 8013936:	881b      	ldrh	r3, [r3, #0]
 8013938:	429a      	cmp	r2, r3
 801393a:	d315      	bcc.n	8013968 <_ZN15Screen1ViewBaseC1Ev+0x274c>
 801393c:	4b09      	ldr	r3, [pc, #36]	; (8013964 <_ZN15Screen1ViewBaseC1Ev+0x2748>)
 801393e:	4a06      	ldr	r2, [pc, #24]	; (8013958 <_ZN15Screen1ViewBaseC1Ev+0x273c>)
 8013940:	21af      	movs	r1, #175	; 0xaf
 8013942:	4806      	ldr	r0, [pc, #24]	; (801395c <_ZN15Screen1ViewBaseC1Ev+0x2740>)
 8013944:	f01a fabc 	bl	802dec0 <__assert_func>
 8013948:	200097d8 	.word	0x200097d8
 801394c:	0802f5ac 	.word	0x0802f5ac
 8013950:	200097cc 	.word	0x200097cc
 8013954:	0802f4a0 	.word	0x0802f4a0
 8013958:	0802f4e4 	.word	0x0802f4e4
 801395c:	0802f514 	.word	0x0802f514
 8013960:	200097d0 	.word	0x200097d0
 8013964:	0802f558 	.word	0x0802f558
    }
 8013968:	bf00      	nop
        return texts->getText(typedTextId);
 801396a:	4b55      	ldr	r3, [pc, #340]	; (8013ac0 <_ZN15Screen1ViewBaseC1Ev+0x28a4>)
 801396c:	681a      	ldr	r2, [r3, #0]
 801396e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013972:	889b      	ldrh	r3, [r3, #4]
 8013974:	4619      	mov	r1, r3
 8013976:	4610      	mov	r0, r2
 8013978:	f000 fdd2 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 801397c:	4603      	mov	r3, r0
 801397e:	bf00      	nop
 8013980:	4a50      	ldr	r2, [pc, #320]	; (8013ac4 <_ZN15Screen1ViewBaseC1Ev+0x28a8>)
 8013982:	210a      	movs	r1, #10
 8013984:	4620      	mov	r0, r4
 8013986:	f00b fce7 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801398a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801398e:	4618      	mov	r0, r3
 8013990:	f7fc f902 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_label.setWildcard(fuelp_labelBuffer);
 8013994:	1d3b      	adds	r3, r7, #4
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	f203 72fc 	addw	r2, r3, #2044	; 0x7fc
 801399c:	1d3b      	adds	r3, r7, #4
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	f603 5338 	addw	r3, r3, #3384	; 0xd38
 80139a4:	4619      	mov	r1, r3
 80139a6:	4610      	mov	r0, r2
 80139a8:	f7fd fb04 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_label.resizeToCurrentText();
 80139ac:	1d3b      	adds	r3, r7, #4
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 80139b4:	4618      	mov	r0, r3
 80139b6:	f006 fb03 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MPLH));
 80139ba:	1d3b      	adds	r3, r7, #4
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	f203 74fc 	addw	r4, r3, #2044	; 0x7fc
 80139c2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80139c6:	210a      	movs	r1, #10
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7fd fa65 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 80139ce:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80139d2:	4619      	mov	r1, r3
 80139d4:	4620      	mov	r0, r4
 80139d6:	f006 fb10 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80139da:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80139de:	4618      	mov	r0, r3
 80139e0:	f7fc f8da 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_units.setXY(247, 547);
 80139e4:	1d3b      	adds	r3, r7, #4
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 80139ec:	f240 2223 	movw	r2, #547	; 0x223
 80139f0:	21f7      	movs	r1, #247	; 0xf7
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7fd f844 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80139f8:	1d3b      	adds	r3, r7, #4
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	f603 043c 	addw	r4, r3, #2108	; 0x83c
 8013a00:	23ff      	movs	r3, #255	; 0xff
 8013a02:	f887 347f 	strb.w	r3, [r7, #1151]	; 0x47f
 8013a06:	23ff      	movs	r3, #255	; 0xff
 8013a08:	f887 347e 	strb.w	r3, [r7, #1150]	; 0x47e
 8013a0c:	23ff      	movs	r3, #255	; 0xff
 8013a0e:	f887 347d 	strb.w	r3, [r7, #1149]	; 0x47d
 8013a12:	f897 347f 	ldrb.w	r3, [r7, #1151]	; 0x47f
 8013a16:	041b      	lsls	r3, r3, #16
 8013a18:	461a      	mov	r2, r3
 8013a1a:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 8013a1e:	021b      	lsls	r3, r3, #8
 8013a20:	431a      	orrs	r2, r3
 8013a22:	f897 347d 	ldrb.w	r3, [r7, #1149]	; 0x47d
 8013a26:	4313      	orrs	r3, r2
 8013a28:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013a2c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8013a30:	4611      	mov	r1, r2
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7fc ff54 	bl	80108e0 <_ZN8touchgfx9colortypeC1Em>
 8013a38:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	461a      	mov	r2, r3
 8013a40:	f8c7 4480 	str.w	r4, [r7, #1152]	; 0x480
 8013a44:	f107 0308 	add.w	r3, r7, #8
 8013a48:	601a      	str	r2, [r3, #0]
        this->color = color;
 8013a4a:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8013a4e:	f107 0208 	add.w	r2, r7, #8
 8013a52:	6812      	ldr	r2, [r2, #0]
 8013a54:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013a56:	bf00      	nop
    fuelp_units.setLinespacing(0);
 8013a58:	1d3b      	adds	r3, r7, #4
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8013a60:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 8013a64:	2300      	movs	r3, #0
 8013a66:	f8a7 3486 	strh.w	r3, [r7, #1158]	; 0x486
        linespace = space;
 8013a6a:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8013a6e:	f8b7 2486 	ldrh.w	r2, [r7, #1158]	; 0x486
 8013a72:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8013a74:	bf00      	nop
    Unicode::snprintf(fuelp_unitsBuffer, FUELP_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_L52U).getText());
 8013a76:	1d3b      	adds	r3, r7, #4
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	f603 544c 	addw	r4, r3, #3404	; 0xd4c
 8013a7e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8013a82:	2126      	movs	r1, #38	; 0x26
 8013a84:	4618      	mov	r0, r3
 8013a86:	f7fd fa07 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8013a8a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8013a8e:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013a92:	4b0d      	ldr	r3, [pc, #52]	; (8013ac8 <_ZN15Screen1ViewBaseC1Ev+0x28ac>)
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d105      	bne.n	8013aa6 <_ZN15Screen1ViewBaseC1Ev+0x288a>
 8013a9a:	4b0c      	ldr	r3, [pc, #48]	; (8013acc <_ZN15Screen1ViewBaseC1Ev+0x28b0>)
 8013a9c:	4a0c      	ldr	r2, [pc, #48]	; (8013ad0 <_ZN15Screen1ViewBaseC1Ev+0x28b4>)
 8013a9e:	21ae      	movs	r1, #174	; 0xae
 8013aa0:	480c      	ldr	r0, [pc, #48]	; (8013ad4 <_ZN15Screen1ViewBaseC1Ev+0x28b8>)
 8013aa2:	f01a fa0d 	bl	802dec0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8013aa6:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8013aaa:	889a      	ldrh	r2, [r3, #4]
 8013aac:	4b0a      	ldr	r3, [pc, #40]	; (8013ad8 <_ZN15Screen1ViewBaseC1Ev+0x28bc>)
 8013aae:	881b      	ldrh	r3, [r3, #0]
 8013ab0:	429a      	cmp	r2, r3
 8013ab2:	d315      	bcc.n	8013ae0 <_ZN15Screen1ViewBaseC1Ev+0x28c4>
 8013ab4:	4b09      	ldr	r3, [pc, #36]	; (8013adc <_ZN15Screen1ViewBaseC1Ev+0x28c0>)
 8013ab6:	4a06      	ldr	r2, [pc, #24]	; (8013ad0 <_ZN15Screen1ViewBaseC1Ev+0x28b4>)
 8013ab8:	21af      	movs	r1, #175	; 0xaf
 8013aba:	4806      	ldr	r0, [pc, #24]	; (8013ad4 <_ZN15Screen1ViewBaseC1Ev+0x28b8>)
 8013abc:	f01a fa00 	bl	802dec0 <__assert_func>
 8013ac0:	200097d8 	.word	0x200097d8
 8013ac4:	0802f5ac 	.word	0x0802f5ac
 8013ac8:	200097cc 	.word	0x200097cc
 8013acc:	0802f4a0 	.word	0x0802f4a0
 8013ad0:	0802f4e4 	.word	0x0802f4e4
 8013ad4:	0802f514 	.word	0x0802f514
 8013ad8:	200097d0 	.word	0x200097d0
 8013adc:	0802f558 	.word	0x0802f558
    }
 8013ae0:	bf00      	nop
        return texts->getText(typedTextId);
 8013ae2:	4bd7      	ldr	r3, [pc, #860]	; (8013e40 <_ZN15Screen1ViewBaseC1Ev+0x2c24>)
 8013ae4:	681a      	ldr	r2, [r3, #0]
 8013ae6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8013aea:	889b      	ldrh	r3, [r3, #4]
 8013aec:	4619      	mov	r1, r3
 8013aee:	4610      	mov	r0, r2
 8013af0:	f000 fd16 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8013af4:	4603      	mov	r3, r0
 8013af6:	bf00      	nop
 8013af8:	4ad2      	ldr	r2, [pc, #840]	; (8013e44 <_ZN15Screen1ViewBaseC1Ev+0x2c28>)
 8013afa:	210a      	movs	r1, #10
 8013afc:	4620      	mov	r0, r4
 8013afe:	f00b fc2b 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013b02:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7fc f846 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_units.setWildcard(fuelp_unitsBuffer);
 8013b0c:	1d3b      	adds	r3, r7, #4
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	f603 023c 	addw	r2, r3, #2108	; 0x83c
 8013b14:	1d3b      	adds	r3, r7, #4
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	f603 534c 	addw	r3, r3, #3404	; 0xd4c
 8013b1c:	4619      	mov	r1, r3
 8013b1e:	4610      	mov	r0, r2
 8013b20:	f7fd fa48 	bl	8010fb4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_units.resizeToCurrentText();
 8013b24:	1d3b      	adds	r3, r7, #4
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f006 fa47 	bl	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_INAE));
 8013b32:	1d3b      	adds	r3, r7, #4
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	f603 043c 	addw	r4, r3, #2108	; 0x83c
 8013b3a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8013b3e:	2109      	movs	r1, #9
 8013b40:	4618      	mov	r0, r3
 8013b42:	f7fd f9a9 	bl	8010e98 <_ZN8touchgfx9TypedTextC1Et>
 8013b46:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8013b4a:	4619      	mov	r1, r3
 8013b4c:	4620      	mov	r0, r4
 8013b4e:	f006 fa54 	bl	8019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013b52:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8013b56:	4618      	mov	r0, r3
 8013b58:	f7fc f81e 	bl	800fb98 <_ZN8touchgfx9TypedTextD1Ev>

    gauge1.setPosition(229, -1, 600, 600);
 8013b5c:	1d3b      	adds	r3, r7, #4
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	f603 007c 	addw	r0, r3, #2172	; 0x87c
 8013b64:	f44f 7316 	mov.w	r3, #600	; 0x258
 8013b68:	9300      	str	r3, [sp, #0]
 8013b6a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8013b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8013b72:	21e5      	movs	r1, #229	; 0xe5
 8013b74:	f7fc ff45 	bl	8010a02 <_ZN8touchgfx8Drawable11setPositionEssss>
    gauge1.setCenter(300, 300);
 8013b78:	1d3b      	adds	r3, r7, #4
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013b80:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013b84:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f006 fbd6 	bl	801a33a <_ZN8touchgfx5Gauge9setCenterEii>
    gauge1.setStartEndAngle(0, 240);
 8013b8e:	1d3b      	adds	r3, r7, #4
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013b96:	22f0      	movs	r2, #240	; 0xf0
 8013b98:	2100      	movs	r1, #0
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f006 fc52 	bl	801a444 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gauge1.setRange(0, 8000);
 8013ba0:	1d3b      	adds	r3, r7, #4
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	f603 007c 	addw	r0, r3, #2172	; 0x87c
 8013ba8:	2300      	movs	r3, #0
 8013baa:	9300      	str	r3, [sp, #0]
 8013bac:	2300      	movs	r3, #0
 8013bae:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8013bb2:	2100      	movs	r1, #0
 8013bb4:	f003 f9dc 	bl	8016f70 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge1.setValue(0);
 8013bb8:	1d3b      	adds	r3, r7, #4
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013bc0:	2100      	movs	r1, #0
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f006 fbe8 	bl	801a398 <_ZN8touchgfx5Gauge8setValueEi>
    gauge1.setNeedle(BITMAP_NEEDEL_ID, 16, 16);
 8013bc8:	1d3b      	adds	r3, r7, #4
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	f603 007c 	addw	r0, r3, #2172	; 0x87c
 8013bd0:	2310      	movs	r3, #16
 8013bd2:	2210      	movs	r2, #16
 8013bd4:	210d      	movs	r1, #13
 8013bd6:	f006 fb9b 	bl	801a310 <_ZN8touchgfx5Gauge9setNeedleEtss>
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8013bda:	1d3b      	adds	r3, r7, #4
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013be2:	2101      	movs	r1, #1
 8013be4:	4618      	mov	r0, r3
 8013be6:	f006 fb35 	bl	801a254 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8013bea:	1d3b      	adds	r3, r7, #4
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013bf2:	2101      	movs	r1, #1
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f006 fb30 	bl	801a25a <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>

    add(__background);
 8013bfa:	1d3b      	adds	r3, r7, #4
 8013bfc:	681a      	ldr	r2, [r3, #0]
 8013bfe:	1d3b      	adds	r3, r7, #4
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	3340      	adds	r3, #64	; 0x40
 8013c04:	4619      	mov	r1, r3
 8013c06:	4610      	mov	r0, r2
 8013c08:	f7fd f888 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8013c0c:	1d3b      	adds	r3, r7, #4
 8013c0e:	681a      	ldr	r2, [r3, #0]
 8013c10:	1d3b      	adds	r3, r7, #4
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	336c      	adds	r3, #108	; 0x6c
 8013c16:	4619      	mov	r1, r3
 8013c18:	4610      	mov	r0, r2
 8013c1a:	f7fd f87f 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 8013c1e:	1d3b      	adds	r3, r7, #4
 8013c20:	681a      	ldr	r2, [r3, #0]
 8013c22:	1d3b      	adds	r3, r7, #4
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	3398      	adds	r3, #152	; 0x98
 8013c28:	4619      	mov	r1, r3
 8013c2a:	4610      	mov	r0, r2
 8013c2c:	f7fd f876 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indLeft);
 8013c30:	1d3b      	adds	r3, r7, #4
 8013c32:	681a      	ldr	r2, [r3, #0]
 8013c34:	1d3b      	adds	r3, r7, #4
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	33c4      	adds	r3, #196	; 0xc4
 8013c3a:	4619      	mov	r1, r3
 8013c3c:	4610      	mov	r0, r2
 8013c3e:	f7fd f86d 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indRight);
 8013c42:	1d3b      	adds	r3, r7, #4
 8013c44:	681a      	ldr	r2, [r3, #0]
 8013c46:	1d3b      	adds	r3, r7, #4
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	33f0      	adds	r3, #240	; 0xf0
 8013c4c:	4619      	mov	r1, r3
 8013c4e:	4610      	mov	r0, r2
 8013c50:	f7fd f864 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indHigh);
 8013c54:	1d3b      	adds	r3, r7, #4
 8013c56:	681a      	ldr	r2, [r3, #0]
 8013c58:	1d3b      	adds	r3, r7, #4
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013c60:	4619      	mov	r1, r3
 8013c62:	4610      	mov	r0, r2
 8013c64:	f7fd f85a 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indFuel);
 8013c68:	1d3b      	adds	r3, r7, #4
 8013c6a:	681a      	ldr	r2, [r3, #0]
 8013c6c:	1d3b      	adds	r3, r7, #4
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8013c74:	4619      	mov	r1, r3
 8013c76:	4610      	mov	r0, r2
 8013c78:	f7fd f850 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indOil);
 8013c7c:	1d3b      	adds	r3, r7, #4
 8013c7e:	681a      	ldr	r2, [r3, #0]
 8013c80:	1d3b      	adds	r3, r7, #4
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8013c88:	4619      	mov	r1, r3
 8013c8a:	4610      	mov	r0, r2
 8013c8c:	f7fd f846 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indBatt);
 8013c90:	1d3b      	adds	r3, r7, #4
 8013c92:	681a      	ldr	r2, [r3, #0]
 8013c94:	1d3b      	adds	r3, r7, #4
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8013c9c:	4619      	mov	r1, r3
 8013c9e:	4610      	mov	r0, r2
 8013ca0:	f7fd f83c 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indPark);
 8013ca4:	1d3b      	adds	r3, r7, #4
 8013ca6:	681a      	ldr	r2, [r3, #0]
 8013ca8:	1d3b      	adds	r3, r7, #4
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8013cb0:	4619      	mov	r1, r3
 8013cb2:	4610      	mov	r0, r2
 8013cb4:	f7fd f832 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indDTC);
 8013cb8:	1d3b      	adds	r3, r7, #4
 8013cba:	681a      	ldr	r2, [r3, #0]
 8013cbc:	1d3b      	adds	r3, r7, #4
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8013cc4:	4619      	mov	r1, r3
 8013cc6:	4610      	mov	r0, r2
 8013cc8:	f7fd f828 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indECT);
 8013ccc:	1d3b      	adds	r3, r7, #4
 8013cce:	681a      	ldr	r2, [r3, #0]
 8013cd0:	1d3b      	adds	r3, r7, #4
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8013cd8:	4619      	mov	r1, r3
 8013cda:	4610      	mov	r0, r2
 8013cdc:	f7fd f81e 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indLow);
 8013ce0:	1d3b      	adds	r3, r7, #4
 8013ce2:	681a      	ldr	r2, [r3, #0]
 8013ce4:	1d3b      	adds	r3, r7, #4
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8013cec:	4619      	mov	r1, r3
 8013cee:	4610      	mov	r0, r2
 8013cf0:	f7fd f814 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_value);
 8013cf4:	1d3b      	adds	r3, r7, #4
 8013cf6:	681a      	ldr	r2, [r3, #0]
 8013cf8:	1d3b      	adds	r3, r7, #4
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8013d00:	4619      	mov	r1, r3
 8013d02:	4610      	mov	r0, r2
 8013d04:	f7fd f80a 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_label);
 8013d08:	1d3b      	adds	r3, r7, #4
 8013d0a:	681a      	ldr	r2, [r3, #0]
 8013d0c:	1d3b      	adds	r3, r7, #4
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8013d14:	4619      	mov	r1, r3
 8013d16:	4610      	mov	r0, r2
 8013d18:	f7fd f800 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_units);
 8013d1c:	1d3b      	adds	r3, r7, #4
 8013d1e:	681a      	ldr	r2, [r3, #0]
 8013d20:	1d3b      	adds	r3, r7, #4
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8013d28:	4619      	mov	r1, r3
 8013d2a:	4610      	mov	r0, r2
 8013d2c:	f7fc fff6 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_value);
 8013d30:	1d3b      	adds	r3, r7, #4
 8013d32:	681a      	ldr	r2, [r3, #0]
 8013d34:	1d3b      	adds	r3, r7, #4
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8013d3c:	4619      	mov	r1, r3
 8013d3e:	4610      	mov	r0, r2
 8013d40:	f7fc ffec 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_label);
 8013d44:	1d3b      	adds	r3, r7, #4
 8013d46:	681a      	ldr	r2, [r3, #0]
 8013d48:	1d3b      	adds	r3, r7, #4
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8013d50:	4619      	mov	r1, r3
 8013d52:	4610      	mov	r0, r2
 8013d54:	f7fc ffe2 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_units);
 8013d58:	1d3b      	adds	r3, r7, #4
 8013d5a:	681a      	ldr	r2, [r3, #0]
 8013d5c:	1d3b      	adds	r3, r7, #4
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013d64:	4619      	mov	r1, r3
 8013d66:	4610      	mov	r0, r2
 8013d68:	f7fc ffd8 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_value);
 8013d6c:	1d3b      	adds	r3, r7, #4
 8013d6e:	681a      	ldr	r2, [r3, #0]
 8013d70:	1d3b      	adds	r3, r7, #4
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8013d78:	4619      	mov	r1, r3
 8013d7a:	4610      	mov	r0, r2
 8013d7c:	f7fc ffce 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_label);
 8013d80:	1d3b      	adds	r3, r7, #4
 8013d82:	681a      	ldr	r2, [r3, #0]
 8013d84:	1d3b      	adds	r3, r7, #4
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8013d8c:	4619      	mov	r1, r3
 8013d8e:	4610      	mov	r0, r2
 8013d90:	f7fc ffc4 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_units);
 8013d94:	1d3b      	adds	r3, r7, #4
 8013d96:	681a      	ldr	r2, [r3, #0]
 8013d98:	1d3b      	adds	r3, r7, #4
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8013da0:	4619      	mov	r1, r3
 8013da2:	4610      	mov	r0, r2
 8013da4:	f7fc ffba 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_value);
 8013da8:	1d3b      	adds	r3, r7, #4
 8013daa:	681a      	ldr	r2, [r3, #0]
 8013dac:	1d3b      	adds	r3, r7, #4
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8013db4:	4619      	mov	r1, r3
 8013db6:	4610      	mov	r0, r2
 8013db8:	f7fc ffb0 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_label);
 8013dbc:	1d3b      	adds	r3, r7, #4
 8013dbe:	681a      	ldr	r2, [r3, #0]
 8013dc0:	1d3b      	adds	r3, r7, #4
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8013dc8:	4619      	mov	r1, r3
 8013dca:	4610      	mov	r0, r2
 8013dcc:	f7fc ffa6 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_units);
 8013dd0:	1d3b      	adds	r3, r7, #4
 8013dd2:	681a      	ldr	r2, [r3, #0]
 8013dd4:	1d3b      	adds	r3, r7, #4
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8013ddc:	4619      	mov	r1, r3
 8013dde:	4610      	mov	r0, r2
 8013de0:	f7fc ff9c 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_value);
 8013de4:	1d3b      	adds	r3, r7, #4
 8013de6:	681a      	ldr	r2, [r3, #0]
 8013de8:	1d3b      	adds	r3, r7, #4
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8013df0:	4619      	mov	r1, r3
 8013df2:	4610      	mov	r0, r2
 8013df4:	f7fc ff92 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_label);
 8013df8:	1d3b      	adds	r3, r7, #4
 8013dfa:	681a      	ldr	r2, [r3, #0]
 8013dfc:	1d3b      	adds	r3, r7, #4
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8013e04:	4619      	mov	r1, r3
 8013e06:	4610      	mov	r0, r2
 8013e08:	f7fc ff88 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_units);
 8013e0c:	1d3b      	adds	r3, r7, #4
 8013e0e:	681a      	ldr	r2, [r3, #0]
 8013e10:	1d3b      	adds	r3, r7, #4
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8013e18:	4619      	mov	r1, r3
 8013e1a:	4610      	mov	r0, r2
 8013e1c:	f7fc ff7e 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_value);
 8013e20:	1d3b      	adds	r3, r7, #4
 8013e22:	681a      	ldr	r2, [r3, #0]
 8013e24:	1d3b      	adds	r3, r7, #4
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8013e2c:	4619      	mov	r1, r3
 8013e2e:	4610      	mov	r0, r2
 8013e30:	f7fc ff74 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_label);
 8013e34:	1d3b      	adds	r3, r7, #4
 8013e36:	681a      	ldr	r2, [r3, #0]
 8013e38:	1d3b      	adds	r3, r7, #4
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	e004      	b.n	8013e48 <_ZN15Screen1ViewBaseC1Ev+0x2c2c>
 8013e3e:	bf00      	nop
 8013e40:	200097d8 	.word	0x200097d8
 8013e44:	0802f5ac 	.word	0x0802f5ac
 8013e48:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8013e4c:	4619      	mov	r1, r3
 8013e4e:	4610      	mov	r0, r2
 8013e50:	f7fc ff64 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_units);
 8013e54:	1d3b      	adds	r3, r7, #4
 8013e56:	681a      	ldr	r2, [r3, #0]
 8013e58:	1d3b      	adds	r3, r7, #4
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 8013e60:	4619      	mov	r1, r3
 8013e62:	4610      	mov	r0, r2
 8013e64:	f7fc ff5a 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_value);
 8013e68:	1d3b      	adds	r3, r7, #4
 8013e6a:	681a      	ldr	r2, [r3, #0]
 8013e6c:	1d3b      	adds	r3, r7, #4
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8013e74:	4619      	mov	r1, r3
 8013e76:	4610      	mov	r0, r2
 8013e78:	f7fc ff50 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_label);
 8013e7c:	1d3b      	adds	r3, r7, #4
 8013e7e:	681a      	ldr	r2, [r3, #0]
 8013e80:	1d3b      	adds	r3, r7, #4
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8013e88:	4619      	mov	r1, r3
 8013e8a:	4610      	mov	r0, r2
 8013e8c:	f7fc ff46 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_units);
 8013e90:	1d3b      	adds	r3, r7, #4
 8013e92:	681a      	ldr	r2, [r3, #0]
 8013e94:	1d3b      	adds	r3, r7, #4
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8013e9c:	4619      	mov	r1, r3
 8013e9e:	4610      	mov	r0, r2
 8013ea0:	f7fc ff3c 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_value);
 8013ea4:	1d3b      	adds	r3, r7, #4
 8013ea6:	681a      	ldr	r2, [r3, #0]
 8013ea8:	1d3b      	adds	r3, r7, #4
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8013eb0:	4619      	mov	r1, r3
 8013eb2:	4610      	mov	r0, r2
 8013eb4:	f7fc ff32 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_label);
 8013eb8:	1d3b      	adds	r3, r7, #4
 8013eba:	681a      	ldr	r2, [r3, #0]
 8013ebc:	1d3b      	adds	r3, r7, #4
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8013ec4:	4619      	mov	r1, r3
 8013ec6:	4610      	mov	r0, r2
 8013ec8:	f7fc ff28 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_units);
 8013ecc:	1d3b      	adds	r3, r7, #4
 8013ece:	681a      	ldr	r2, [r3, #0]
 8013ed0:	1d3b      	adds	r3, r7, #4
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8013ed8:	4619      	mov	r1, r3
 8013eda:	4610      	mov	r0, r2
 8013edc:	f7fc ff1e 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gauge1);
 8013ee0:	1d3b      	adds	r3, r7, #4
 8013ee2:	681a      	ldr	r2, [r3, #0]
 8013ee4:	1d3b      	adds	r3, r7, #4
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013eec:	4619      	mov	r1, r3
 8013eee:	4610      	mov	r0, r2
 8013ef0:	f7fc ff14 	bl	8010d1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013ef4:	1d3b      	adds	r3, r7, #4
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f207 4794 	addw	r7, r7, #1172	; 0x494
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd90      	pop	{r4, r7, pc}
 8013f02:	bf00      	nop

08013f04 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8013f04:	b480      	push	{r7}
 8013f06:	b083      	sub	sp, #12
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]

}
 8013f0c:	bf00      	nop
 8013f0e:	370c      	adds	r7, #12
 8013f10:	46bd      	mov	sp, r7
 8013f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f16:	4770      	bx	lr

08013f18 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b082      	sub	sp, #8
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	4618      	mov	r0, r3
 8013f24:	f009 fbc0 	bl	801d6a8 <_ZN8touchgfx6ScreenC1Ev>
 8013f28:	4a05      	ldr	r2, [pc, #20]	; (8013f40 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	601a      	str	r2, [r3, #0]
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	2200      	movs	r2, #0
 8013f32:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	4618      	mov	r0, r3
 8013f38:	3708      	adds	r7, #8
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}
 8013f3e:	bf00      	nop
 8013f40:	0803001c 	.word	0x0803001c

08013f44 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b082      	sub	sp, #8
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
 8013f4c:	4a05      	ldr	r2, [pc, #20]	; (8013f64 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	601a      	str	r2, [r3, #0]
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7fc fd29 	bl	80109ac <_ZN8touchgfx8DrawableD1Ev>
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	3708      	adds	r7, #8
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bd80      	pop	{r7, pc}
 8013f64:	08030a9c 	.word	0x08030a9c

08013f68 <_ZN8touchgfx9ContainerD0Ev>:
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b082      	sub	sp, #8
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f7ff ffe7 	bl	8013f44 <_ZN8touchgfx9ContainerD1Ev>
 8013f76:	212c      	movs	r1, #44	; 0x2c
 8013f78:	6878      	ldr	r0, [r7, #4]
 8013f7a:	f019 f982 	bl	802d282 <_ZdlPvj>
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	4618      	mov	r0, r3
 8013f82:	3708      	adds	r7, #8
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd80      	pop	{r7, pc}

08013f88 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b082      	sub	sp, #8
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
 8013f90:	4a05      	ldr	r2, [pc, #20]	; (8013fa8 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	601a      	str	r2, [r3, #0]
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7fc ff03 	bl	8010da4 <_ZN8touchgfx6WidgetD1Ev>
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	3708      	adds	r7, #8
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	bd80      	pop	{r7, pc}
 8013fa8:	08031918 	.word	0x08031918

08013fac <_ZN8touchgfx3BoxD0Ev>:
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b082      	sub	sp, #8
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	f7ff ffe7 	bl	8013f88 <_ZN8touchgfx3BoxD1Ev>
 8013fba:	212c      	movs	r1, #44	; 0x2c
 8013fbc:	6878      	ldr	r0, [r7, #4]
 8013fbe:	f019 f960 	bl	802d282 <_ZdlPvj>
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	3708      	adds	r7, #8
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bd80      	pop	{r7, pc}

08013fcc <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b082      	sub	sp, #8
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
 8013fd4:	4a05      	ldr	r2, [pc, #20]	; (8013fec <_ZN8touchgfx5ImageD1Ev+0x20>)
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	601a      	str	r2, [r3, #0]
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f7fc fee1 	bl	8010da4 <_ZN8touchgfx6WidgetD1Ev>
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	3708      	adds	r7, #8
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	bd80      	pop	{r7, pc}
 8013fec:	08031b88 	.word	0x08031b88

08013ff0 <_ZN8touchgfx5ImageD0Ev>:
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b082      	sub	sp, #8
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	f7ff ffe7 	bl	8013fcc <_ZN8touchgfx5ImageD1Ev>
 8013ffe:	212c      	movs	r1, #44	; 0x2c
 8014000:	6878      	ldr	r0, [r7, #4]
 8014002:	f019 f93e 	bl	802d282 <_ZdlPvj>
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	4618      	mov	r0, r3
 801400a:	3708      	adds	r7, #8
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}

08014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8014010:	b580      	push	{r7, lr}
 8014012:	b082      	sub	sp, #8
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	4a05      	ldr	r2, [pc, #20]	; (8014030 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	601a      	str	r2, [r3, #0]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	4618      	mov	r0, r3
 8014022:	f7fc ff89 	bl	8010f38 <_ZN8touchgfx8TextAreaD1Ev>
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	4618      	mov	r0, r3
 801402a:	3708      	adds	r7, #8
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}
 8014030:	08031ae0 	.word	0x08031ae0

08014034 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8014034:	b580      	push	{r7, lr}
 8014036:	b082      	sub	sp, #8
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
 801403c:	6878      	ldr	r0, [r7, #4]
 801403e:	f7ff ffe7 	bl	8014010 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014042:	2140      	movs	r1, #64	; 0x40
 8014044:	6878      	ldr	r0, [r7, #4]
 8014046:	f019 f91c 	bl	802d282 <_ZdlPvj>
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	4618      	mov	r0, r3
 801404e:	3708      	adds	r7, #8
 8014050:	46bd      	mov	sp, r7
 8014052:	bd80      	pop	{r7, pc}

08014054 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 8014054:	b580      	push	{r7, lr}
 8014056:	b082      	sub	sp, #8
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
 801405c:	4a0a      	ldr	r2, [pc, #40]	; (8014088 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	601a      	str	r2, [r3, #0]
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	3358      	adds	r3, #88	; 0x58
 8014066:	4618      	mov	r0, r3
 8014068:	f7ff ff6c 	bl	8013f44 <_ZN8touchgfx9ContainerD1Ev>
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	332c      	adds	r3, #44	; 0x2c
 8014070:	4618      	mov	r0, r3
 8014072:	f7ff ffab 	bl	8013fcc <_ZN8touchgfx5ImageD1Ev>
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	4618      	mov	r0, r3
 801407a:	f7ff ff63 	bl	8013f44 <_ZN8touchgfx9ContainerD1Ev>
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	4618      	mov	r0, r3
 8014082:	3708      	adds	r7, #8
 8014084:	46bd      	mov	sp, r7
 8014086:	bd80      	pop	{r7, pc}
 8014088:	080308a8 	.word	0x080308a8

0801408c <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 801408c:	b580      	push	{r7, lr}
 801408e:	b082      	sub	sp, #8
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
 8014094:	6878      	ldr	r0, [r7, #4]
 8014096:	f7ff ffdd 	bl	8014054 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 801409a:	21b4      	movs	r1, #180	; 0xb4
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	f019 f8f0 	bl	802d282 <_ZdlPvj>
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	4618      	mov	r0, r3
 80140a6:	3708      	adds	r7, #8
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bd80      	pop	{r7, pc}

080140ac <_ZN8touchgfx13TextureMapperD1Ev>:
 * @note The drawing of this widget is not trivial and typically has a significant performance
 *       penalty. The number of pixels drawn, the presence of global alpha or per pixel alpha
 *       inflicts the computation and should be considered.
 * @note This widget does not support 1 bit per pixel color depth.
 */
class TextureMapper : public Image
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b082      	sub	sp, #8
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
 80140b4:	4a05      	ldr	r2, [pc, #20]	; (80140cc <_ZN8touchgfx13TextureMapperD1Ev+0x20>)
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	601a      	str	r2, [r3, #0]
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	4618      	mov	r0, r3
 80140be:	f7ff ff85 	bl	8013fcc <_ZN8touchgfx5ImageD1Ev>
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	4618      	mov	r0, r3
 80140c6:	3708      	adds	r7, #8
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}
 80140cc:	080316a0 	.word	0x080316a0

080140d0 <_ZN8touchgfx13TextureMapperD0Ev>:
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b082      	sub	sp, #8
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
 80140d8:	6878      	ldr	r0, [r7, #4]
 80140da:	f7ff ffe7 	bl	80140ac <_ZN8touchgfx13TextureMapperD1Ev>
 80140de:	2190      	movs	r1, #144	; 0x90
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f019 f8ce 	bl	802d282 <_ZdlPvj>
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	4618      	mov	r0, r3
 80140ea:	3708      	adds	r7, #8
 80140ec:	46bd      	mov	sp, r7
 80140ee:	bd80      	pop	{r7, pc}

080140f0 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 * Class for drawing complex polygons on the display using CanvasWidgetRenderer. The
 * CanvasWidget is used by passing it to a Canvas object, drawing the outline of the
 * object and then having CanvasWidget render the outline on the display using the
 * assigned painter.
 */
class CanvasWidget : public Widget
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b082      	sub	sp, #8
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
 80140f8:	4a05      	ldr	r2, [pc, #20]	; (8014110 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	601a      	str	r2, [r3, #0]
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	4618      	mov	r0, r3
 8014102:	f7fc fe4f 	bl	8010da4 <_ZN8touchgfx6WidgetD1Ev>
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	4618      	mov	r0, r3
 801410a:	3708      	adds	r7, #8
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}
 8014110:	080315d4 	.word	0x080315d4

08014114 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8014114:	b580      	push	{r7, lr}
 8014116:	b082      	sub	sp, #8
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
 801411c:	6878      	ldr	r0, [r7, #4]
 801411e:	f7ff ffe7 	bl	80140f0 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8014122:	2130      	movs	r1, #48	; 0x30
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	f019 f8ac 	bl	802d282 <_ZdlPvj>
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	4618      	mov	r0, r3
 801412e:	3708      	adds	r7, #8
 8014130:	46bd      	mov	sp, r7
 8014132:	bd80      	pop	{r7, pc}

08014134 <_ZN8touchgfx6CircleD1Ev>:
 *            int x, y, r;
 *            circle.getCenter(&amp;x, &amp;y); // Will return (1, 1)
 *            circle.getRadius(&amp;r); // Will return 0
 *       @endcode.
 */
class Circle : public CanvasWidget
 8014134:	b580      	push	{r7, lr}
 8014136:	b082      	sub	sp, #8
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
 801413c:	4a05      	ldr	r2, [pc, #20]	; (8014154 <_ZN8touchgfx6CircleD1Ev+0x20>)
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	601a      	str	r2, [r3, #0]
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	4618      	mov	r0, r3
 8014146:	f7ff ffd3 	bl	80140f0 <_ZN8touchgfx12CanvasWidgetD1Ev>
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	4618      	mov	r0, r3
 801414e:	3708      	adds	r7, #8
 8014150:	46bd      	mov	sp, r7
 8014152:	bd80      	pop	{r7, pc}
 8014154:	080314f4 	.word	0x080314f4

08014158 <_ZN8touchgfx6CircleD0Ev>:
 8014158:	b580      	push	{r7, lr}
 801415a:	b082      	sub	sp, #8
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
 8014160:	6878      	ldr	r0, [r7, #4]
 8014162:	f7ff ffe7 	bl	8014134 <_ZN8touchgfx6CircleD1Ev>
 8014166:	214c      	movs	r1, #76	; 0x4c
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f019 f88a 	bl	802d282 <_ZdlPvj>
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	4618      	mov	r0, r3
 8014172:	3708      	adds	r7, #8
 8014174:	46bd      	mov	sp, r7
 8014176:	bd80      	pop	{r7, pc}

08014178 <_ZN8touchgfx5GaugeD1Ev>:
 * Much like a progress indicator, the minimum and maximum value of the Gauge, as well as steps
 * can be set. For more information on this, consult the documentation on ProgressIndicators.
 *
 * A Gauge has a needle and optionally an arc that follows the needle.
 */
class Gauge : public AbstractProgressIndicator
 8014178:	b580      	push	{r7, lr}
 801417a:	b082      	sub	sp, #8
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
 8014180:	4a0b      	ldr	r2, [pc, #44]	; (80141b0 <_ZN8touchgfx5GaugeD1Ev+0x38>)
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	601a      	str	r2, [r3, #0]
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801418c:	4618      	mov	r0, r3
 801418e:	f7ff ffd1 	bl	8014134 <_ZN8touchgfx6CircleD1Ev>
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	33b4      	adds	r3, #180	; 0xb4
 8014196:	4618      	mov	r0, r3
 8014198:	f7ff ff88 	bl	80140ac <_ZN8touchgfx13TextureMapperD1Ev>
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	4618      	mov	r0, r3
 80141a0:	f7ff ff58 	bl	8014054 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	4618      	mov	r0, r3
 80141a8:	3708      	adds	r7, #8
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}
 80141ae:	bf00      	nop
 80141b0:	080319c0 	.word	0x080319c0

080141b4 <_ZN8touchgfx5GaugeD0Ev>:
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b082      	sub	sp, #8
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
 80141bc:	6878      	ldr	r0, [r7, #4]
 80141be:	f7ff ffdb 	bl	8014178 <_ZN8touchgfx5GaugeD1Ev>
 80141c2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80141c6:	6878      	ldr	r0, [r7, #4]
 80141c8:	f019 f85b 	bl	802d282 <_ZdlPvj>
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	4618      	mov	r0, r3
 80141d0:	3708      	adds	r7, #8
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}
	...

080141d8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80141d8:	b480      	push	{r7}
 80141da:	af00      	add	r7, sp, #0
    return bitmap_database;
 80141dc:	4b02      	ldr	r3, [pc, #8]	; (80141e8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80141de:	4618      	mov	r0, r3
 80141e0:	46bd      	mov	sp, r7
 80141e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e6:	4770      	bx	lr
 80141e8:	080300ac 	.word	0x080300ac

080141ec <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80141ec:	b480      	push	{r7}
 80141ee:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80141f0:	2311      	movs	r3, #17
}
 80141f2:	4618      	mov	r0, r3
 80141f4:	46bd      	mov	sp, r7
 80141f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fa:	4770      	bx	lr

080141fc <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80141fc:	b480      	push	{r7}
 80141fe:	b085      	sub	sp, #20
 8014200:	af00      	add	r7, sp, #0
 8014202:	60f8      	str	r0, [r7, #12]
 8014204:	460b      	mov	r3, r1
 8014206:	607a      	str	r2, [r7, #4]
 8014208:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 801420a:	2300      	movs	r3, #0
    }
 801420c:	4618      	mov	r0, r3
 801420e:	3714      	adds	r7, #20
 8014210:	46bd      	mov	sp, r7
 8014212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014216:	4770      	bx	lr

08014218 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8014218:	b480      	push	{r7}
 801421a:	b083      	sub	sp, #12
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8014220:	2300      	movs	r3, #0
    }
 8014222:	4618      	mov	r0, r3
 8014224:	370c      	adds	r7, #12
 8014226:	46bd      	mov	sp, r7
 8014228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422c:	4770      	bx	lr

0801422e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 801422e:	b480      	push	{r7}
 8014230:	b083      	sub	sp, #12
 8014232:	af00      	add	r7, sp, #0
 8014234:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8014236:	2300      	movs	r3, #0
    }
 8014238:	4618      	mov	r0, r3
 801423a:	370c      	adds	r7, #12
 801423c:	46bd      	mov	sp, r7
 801423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014242:	4770      	bx	lr

08014244 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8014244:	b480      	push	{r7}
 8014246:	b085      	sub	sp, #20
 8014248:	af00      	add	r7, sp, #0
 801424a:	60f8      	str	r0, [r7, #12]
 801424c:	60b9      	str	r1, [r7, #8]
 801424e:	4613      	mov	r3, r2
 8014250:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8014252:	4a07      	ldr	r2, [pc, #28]	; (8014270 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	6013      	str	r3, [r2, #0]
        fonts = f;
 8014258:	4a06      	ldr	r2, [pc, #24]	; (8014274 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801425a:	68bb      	ldr	r3, [r7, #8]
 801425c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801425e:	4a06      	ldr	r2, [pc, #24]	; (8014278 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8014260:	88fb      	ldrh	r3, [r7, #6]
 8014262:	8013      	strh	r3, [r2, #0]
    }
 8014264:	bf00      	nop
 8014266:	3714      	adds	r7, #20
 8014268:	46bd      	mov	sp, r7
 801426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426e:	4770      	bx	lr
 8014270:	200097cc 	.word	0x200097cc
 8014274:	200097d4 	.word	0x200097d4
 8014278:	200097d0 	.word	0x200097d0

0801427c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 801427c:	b40e      	push	{r1, r2, r3}
 801427e:	b580      	push	{r7, lr}
 8014280:	b085      	sub	sp, #20
 8014282:	af00      	add	r7, sp, #0
 8014284:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8014286:	f107 0320 	add.w	r3, r7, #32
 801428a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 801428c:	68bb      	ldr	r3, [r7, #8]
 801428e:	69fa      	ldr	r2, [r7, #28]
 8014290:	2100      	movs	r1, #0
 8014292:	6878      	ldr	r0, [r7, #4]
 8014294:	f008 fda0 	bl	801cdd8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8014298:	4603      	mov	r3, r0
 801429a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 801429c:	89fb      	ldrh	r3, [r7, #14]
}
 801429e:	4618      	mov	r0, r3
 80142a0:	3714      	adds	r7, #20
 80142a2:	46bd      	mov	sp, r7
 80142a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80142a8:	b003      	add	sp, #12
 80142aa:	4770      	bx	lr

080142ac <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80142ac:	b40c      	push	{r2, r3}
 80142ae:	b580      	push	{r7, lr}
 80142b0:	b084      	sub	sp, #16
 80142b2:	af00      	add	r7, sp, #0
 80142b4:	6078      	str	r0, [r7, #4]
 80142b6:	460b      	mov	r3, r1
 80142b8:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80142ba:	f107 031c 	add.w	r3, r7, #28
 80142be:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80142c0:	78f9      	ldrb	r1, [r7, #3]
 80142c2:	68bb      	ldr	r3, [r7, #8]
 80142c4:	69ba      	ldr	r2, [r7, #24]
 80142c6:	6878      	ldr	r0, [r7, #4]
 80142c8:	f008 fd86 	bl	801cdd8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80142cc:	4603      	mov	r3, r0
 80142ce:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80142d0:	89fb      	ldrh	r3, [r7, #14]
}
 80142d2:	4618      	mov	r0, r3
 80142d4:	3710      	adds	r7, #16
 80142d6:	46bd      	mov	sp, r7
 80142d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80142dc:	b002      	add	sp, #8
 80142de:	4770      	bx	lr

080142e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b08a      	sub	sp, #40	; 0x28
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
 80142e8:	460b      	mov	r3, r1
 80142ea:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d016      	beq.n	8014322 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	3322      	adds	r3, #34	; 0x22
 80142f8:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80142fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142fc:	8adb      	ldrh	r3, [r3, #22]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d105      	bne.n	801430e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8014302:	4b43      	ldr	r3, [pc, #268]	; (8014410 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8014304:	4a43      	ldr	r2, [pc, #268]	; (8014414 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014306:	21c0      	movs	r1, #192	; 0xc0
 8014308:	4843      	ldr	r0, [pc, #268]	; (8014418 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801430a:	f019 fdd9 	bl	802dec0 <__assert_func>
            return buffer[pos];
 801430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014310:	8a9b      	ldrh	r3, [r3, #20]
 8014312:	461a      	mov	r2, r3
 8014314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014316:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d001      	beq.n	8014322 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 801431e:	2301      	movs	r3, #1
 8014320:	e000      	b.n	8014324 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8014322:	2300      	movs	r3, #0
 8014324:	2b00      	cmp	r3, #0
 8014326:	d06a      	beq.n	80143fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f00a f905 	bl	801e538 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	3322      	adds	r3, #34	; 0x22
 8014332:	623b      	str	r3, [r7, #32]
 8014334:	2301      	movs	r3, #1
 8014336:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8014338:	6a3b      	ldr	r3, [r7, #32]
 801433a:	8adb      	ldrh	r3, [r3, #22]
 801433c:	8bfa      	ldrh	r2, [r7, #30]
 801433e:	429a      	cmp	r2, r3
 8014340:	d305      	bcc.n	801434e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8014342:	4b36      	ldr	r3, [pc, #216]	; (801441c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8014344:	4a36      	ldr	r2, [pc, #216]	; (8014420 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8014346:	21c5      	movs	r1, #197	; 0xc5
 8014348:	4833      	ldr	r0, [pc, #204]	; (8014418 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801434a:	f019 fdb9 	bl	802dec0 <__assert_func>
            const uint16_t index = pos + offset;
 801434e:	6a3b      	ldr	r3, [r7, #32]
 8014350:	8a9a      	ldrh	r2, [r3, #20]
 8014352:	8bfb      	ldrh	r3, [r7, #30]
 8014354:	4413      	add	r3, r2
 8014356:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8014358:	8bbb      	ldrh	r3, [r7, #28]
 801435a:	2b09      	cmp	r3, #9
 801435c:	d801      	bhi.n	8014362 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 801435e:	8bbb      	ldrh	r3, [r7, #28]
 8014360:	e001      	b.n	8014366 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8014362:	8bbb      	ldrh	r3, [r7, #28]
 8014364:	3b0a      	subs	r3, #10
 8014366:	6a3a      	ldr	r2, [r7, #32]
 8014368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801436c:	f640 123f 	movw	r2, #2367	; 0x93f
 8014370:	4293      	cmp	r3, r2
 8014372:	bf0c      	ite	eq
 8014374:	2301      	moveq	r3, #1
 8014376:	2300      	movne	r3, #0
 8014378:	b2db      	uxtb	r3, r3
 801437a:	2b00      	cmp	r3, #0
 801437c:	d03f      	beq.n	80143fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	3322      	adds	r3, #34	; 0x22
 8014382:	687a      	ldr	r2, [r7, #4]
 8014384:	3222      	adds	r2, #34	; 0x22
 8014386:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8014388:	68ba      	ldr	r2, [r7, #8]
 801438a:	8ad2      	ldrh	r2, [r2, #22]
 801438c:	2a00      	cmp	r2, #0
 801438e:	d105      	bne.n	801439c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8014390:	4b1f      	ldr	r3, [pc, #124]	; (8014410 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8014392:	4a20      	ldr	r2, [pc, #128]	; (8014414 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014394:	21c0      	movs	r1, #192	; 0xc0
 8014396:	4820      	ldr	r0, [pc, #128]	; (8014418 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8014398:	f019 fd92 	bl	802dec0 <__assert_func>
            return buffer[pos];
 801439c:	68ba      	ldr	r2, [r7, #8]
 801439e:	8a92      	ldrh	r2, [r2, #20]
 80143a0:	4611      	mov	r1, r2
 80143a2:	68ba      	ldr	r2, [r7, #8]
 80143a4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80143a8:	613b      	str	r3, [r7, #16]
 80143aa:	4613      	mov	r3, r2
 80143ac:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80143ae:	693b      	ldr	r3, [r7, #16]
 80143b0:	8adb      	ldrh	r3, [r3, #22]
 80143b2:	2b01      	cmp	r3, #1
 80143b4:	d806      	bhi.n	80143c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80143b6:	4b1b      	ldr	r3, [pc, #108]	; (8014424 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80143b8:	4a1b      	ldr	r2, [pc, #108]	; (8014428 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80143ba:	f240 110d 	movw	r1, #269	; 0x10d
 80143be:	4816      	ldr	r0, [pc, #88]	; (8014418 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80143c0:	f019 fd7e 	bl	802dec0 <__assert_func>
            const uint16_t index = pos + 1;
 80143c4:	693b      	ldr	r3, [r7, #16]
 80143c6:	8a9b      	ldrh	r3, [r3, #20]
 80143c8:	3301      	adds	r3, #1
 80143ca:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80143cc:	89bb      	ldrh	r3, [r7, #12]
 80143ce:	2b09      	cmp	r3, #9
 80143d0:	d801      	bhi.n	80143d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80143d2:	89bb      	ldrh	r3, [r7, #12]
 80143d4:	e000      	b.n	80143d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80143d6:	2300      	movs	r3, #0
 80143d8:	693a      	ldr	r2, [r7, #16]
 80143da:	89f9      	ldrh	r1, [r7, #14]
 80143dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80143e0:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	3322      	adds	r3, #34	; 0x22
 80143e6:	61bb      	str	r3, [r7, #24]
 80143e8:	f640 133f 	movw	r3, #2367	; 0x93f
 80143ec:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80143ee:	69bb      	ldr	r3, [r7, #24]
 80143f0:	8a9b      	ldrh	r3, [r3, #20]
 80143f2:	4619      	mov	r1, r3
 80143f4:	69bb      	ldr	r3, [r7, #24]
 80143f6:	8afa      	ldrh	r2, [r7, #22]
 80143f8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80143fc:	bf00      	nop
        }
    }
    return getNextChar();
 80143fe:	6878      	ldr	r0, [r7, #4]
 8014400:	f009 ff7e 	bl	801e300 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014404:	4603      	mov	r3, r0
}
 8014406:	4618      	mov	r0, r3
 8014408:	3728      	adds	r7, #40	; 0x28
 801440a:	46bd      	mov	sp, r7
 801440c:	bd80      	pop	{r7, pc}
 801440e:	bf00      	nop
 8014410:	0802f5b0 	.word	0x0802f5b0
 8014414:	0802f5bc 	.word	0x0802f5bc
 8014418:	0802f668 	.word	0x0802f668
 801441c:	0802f6b0 	.word	0x0802f6b0
 8014420:	0802f6c0 	.word	0x0802f6c0
 8014424:	0802f794 	.word	0x0802f794
 8014428:	0802f7a0 	.word	0x0802f7a0

0801442c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8014434:	6878      	ldr	r0, [r7, #4]
 8014436:	f009 ff1b 	bl	801e270 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 801443a:	bf00      	nop
 801443c:	3708      	adds	r7, #8
 801443e:	46bd      	mov	sp, r7
 8014440:	bd80      	pop	{r7, pc}

08014442 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8014442:	b580      	push	{r7, lr}
 8014444:	b088      	sub	sp, #32
 8014446:	af02      	add	r7, sp, #8
 8014448:	60f8      	str	r0, [r7, #12]
 801444a:	1d38      	adds	r0, r7, #4
 801444c:	e880 0006 	stmia.w	r0, {r1, r2}
 8014450:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8014452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014456:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8014458:	1d39      	adds	r1, r7, #4
 801445a:	697b      	ldr	r3, [r7, #20]
 801445c:	9301      	str	r3, [sp, #4]
 801445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014460:	9300      	str	r3, [sp, #0]
 8014462:	6a3b      	ldr	r3, [r7, #32]
 8014464:	683a      	ldr	r2, [r7, #0]
 8014466:	68f8      	ldr	r0, [r7, #12]
 8014468:	f007 f993 	bl	801b792 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 801446c:	bf00      	nop
 801446e:	3718      	adds	r7, #24
 8014470:	46bd      	mov	sp, r7
 8014472:	bd80      	pop	{r7, pc}

08014474 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8014474:	b590      	push	{r4, r7, lr}
 8014476:	b085      	sub	sp, #20
 8014478:	af00      	add	r7, sp, #0
 801447a:	4603      	mov	r3, r0
 801447c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 801447e:	2300      	movs	r3, #0
 8014480:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8014482:	88fb      	ldrh	r3, [r7, #6]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d127      	bne.n	80144d8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8014488:	88fb      	ldrh	r3, [r7, #6]
 801448a:	4a1e      	ldr	r2, [pc, #120]	; (8014504 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 801448c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d016      	beq.n	80144c2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8014494:	88fb      	ldrh	r3, [r7, #6]
 8014496:	4a1b      	ldr	r2, [pc, #108]	; (8014504 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801449c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 801449e:	68bb      	ldr	r3, [r7, #8]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	68ba      	ldr	r2, [r7, #8]
 80144a4:	4413      	add	r3, r2
 80144a6:	4a18      	ldr	r2, [pc, #96]	; (8014508 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80144a8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80144aa:	68bb      	ldr	r3, [r7, #8]
 80144ac:	685b      	ldr	r3, [r3, #4]
 80144ae:	68ba      	ldr	r2, [r7, #8]
 80144b0:	4413      	add	r3, r2
 80144b2:	4a16      	ldr	r2, [pc, #88]	; (801450c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80144b4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80144b6:	68bb      	ldr	r3, [r7, #8]
 80144b8:	689b      	ldr	r3, [r3, #8]
 80144ba:	68ba      	ldr	r2, [r7, #8]
 80144bc:	4413      	add	r3, r2
 80144be:	60fb      	str	r3, [r7, #12]
 80144c0:	e00a      	b.n	80144d8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80144c2:	4b11      	ldr	r3, [pc, #68]	; (8014508 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80144c4:	4a12      	ldr	r2, [pc, #72]	; (8014510 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80144c6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80144c8:	4a12      	ldr	r2, [pc, #72]	; (8014514 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80144ca:	4b10      	ldr	r3, [pc, #64]	; (801450c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80144cc:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80144ce:	88fb      	ldrh	r3, [r7, #6]
 80144d0:	4a11      	ldr	r2, [pc, #68]	; (8014518 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80144d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144d6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d00d      	beq.n	80144fa <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80144de:	4a0f      	ldr	r2, [pc, #60]	; (801451c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80144e0:	88fb      	ldrh	r3, [r7, #6]
 80144e2:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80144e4:	f000 f83e 	bl	8014564 <_ZN17TypedTextDatabase8getFontsEv>
 80144e8:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80144ea:	f000 f833 	bl	8014554 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80144ee:	4603      	mov	r3, r0
 80144f0:	461a      	mov	r2, r3
 80144f2:	4621      	mov	r1, r4
 80144f4:	68f8      	ldr	r0, [r7, #12]
 80144f6:	f7ff fea5 	bl	8014244 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80144fa:	bf00      	nop
 80144fc:	3714      	adds	r7, #20
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd90      	pop	{r4, r7, pc}
 8014502:	bf00      	nop
 8014504:	20007b28 	.word	0x20007b28
 8014508:	20007b30 	.word	0x20007b30
 801450c:	20007b34 	.word	0x20007b34
 8014510:	080edc48 	.word	0x080edc48
 8014514:	080edb88 	.word	0x080edb88
 8014518:	080edcc4 	.word	0x080edcc4
 801451c:	20007b2c 	.word	0x20007b2c

08014520 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8014520:	b480      	push	{r7}
 8014522:	b083      	sub	sp, #12
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
 8014528:	460b      	mov	r3, r1
 801452a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 801452c:	4b07      	ldr	r3, [pc, #28]	; (801454c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 801452e:	681a      	ldr	r2, [r3, #0]
 8014530:	4b07      	ldr	r3, [pc, #28]	; (8014550 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8014532:	6819      	ldr	r1, [r3, #0]
 8014534:	887b      	ldrh	r3, [r7, #2]
 8014536:	009b      	lsls	r3, r3, #2
 8014538:	440b      	add	r3, r1
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	005b      	lsls	r3, r3, #1
 801453e:	4413      	add	r3, r2
}
 8014540:	4618      	mov	r0, r3
 8014542:	370c      	adds	r7, #12
 8014544:	46bd      	mov	sp, r7
 8014546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454a:	4770      	bx	lr
 801454c:	20007b30 	.word	0x20007b30
 8014550:	20007b34 	.word	0x20007b34

08014554 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8014554:	b480      	push	{r7}
 8014556:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8014558:	2330      	movs	r3, #48	; 0x30
}
 801455a:	4618      	mov	r0, r3
 801455c:	46bd      	mov	sp, r7
 801455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014562:	4770      	bx	lr

08014564 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8014564:	b480      	push	{r7}
 8014566:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8014568:	4b02      	ldr	r3, [pc, #8]	; (8014574 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801456a:	4618      	mov	r0, r3
 801456c:	46bd      	mov	sp, r7
 801456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014572:	4770      	bx	lr
 8014574:	20007b38 	.word	0x20007b38

08014578 <_Z41__static_initialization_and_destruction_0ii>:
    case 1:
        touchgfx_fonts[1] = &(getFont_bahnschrift_25_2bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	6039      	str	r1, [r7, #0]
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	2b01      	cmp	r3, #1
 8014586:	d10e      	bne.n	80145a6 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801458e:	4293      	cmp	r3, r2
 8014590:	d109      	bne.n	80145a6 <_Z41__static_initialization_and_destruction_0ii+0x2e>
    &(getFont_bahnschrift_100_2bpp()),
 8014592:	f7fb fbdb 	bl	800fd4c <_Z28getFont_bahnschrift_100_2bppv>
 8014596:	4603      	mov	r3, r0
};
 8014598:	4a05      	ldr	r2, [pc, #20]	; (80145b0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 801459a:	6013      	str	r3, [r2, #0]
    &(getFont_bahnschrift_25_2bpp())
 801459c:	f7fb fc2c 	bl	800fdf8 <_Z27getFont_bahnschrift_25_2bppv>
 80145a0:	4603      	mov	r3, r0
};
 80145a2:	4a03      	ldr	r2, [pc, #12]	; (80145b0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80145a4:	6053      	str	r3, [r2, #4]
} // namespace TypedTextDatabase
 80145a6:	bf00      	nop
 80145a8:	3708      	adds	r7, #8
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}
 80145ae:	bf00      	nop
 80145b0:	20007b38 	.word	0x20007b38

080145b4 <_GLOBAL__sub_I_touchgfx_fonts>:
 80145b4:	b580      	push	{r7, lr}
 80145b6:	af00      	add	r7, sp, #0
 80145b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80145bc:	2001      	movs	r0, #1
 80145be:	f7ff ffdb 	bl	8014578 <_Z41__static_initialization_and_destruction_0ii>
 80145c2:	bd80      	pop	{r7, pc}

080145c4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b082      	sub	sp, #8
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
 80145cc:	4a05      	ldr	r2, [pc, #20]	; (80145e4 <_ZN19FrontendApplicationD1Ev+0x20>)
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	601a      	str	r2, [r3, #0]
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	4618      	mov	r0, r3
 80145d6:	f7fb fe53 	bl	8010280 <_ZN23FrontendApplicationBaseD1Ev>
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	4618      	mov	r0, r3
 80145de:	3708      	adds	r7, #8
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}
 80145e4:	0803025c 	.word	0x0803025c

080145e8 <_ZN19FrontendApplicationD0Ev>:
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b082      	sub	sp, #8
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	f7ff ffe7 	bl	80145c4 <_ZN19FrontendApplicationD1Ev>
 80145f6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80145fa:	6878      	ldr	r0, [r7, #4]
 80145fc:	f018 fe41 	bl	802d282 <_ZdlPvj>
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	4618      	mov	r0, r3
 8014604:	3708      	adds	r7, #8
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}

0801460a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801460a:	b580      	push	{r7, lr}
 801460c:	b082      	sub	sp, #8
 801460e:	af00      	add	r7, sp, #0
 8014610:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8014618:	4618      	mov	r0, r3
 801461a:	f000 f82d 	bl	8014678 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	4618      	mov	r0, r3
 8014622:	f007 fc25 	bl	801be70 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8014626:	bf00      	nop
 8014628:	3708      	adds	r7, #8
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}
	...

08014630 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8014630:	b580      	push	{r7, lr}
 8014632:	b084      	sub	sp, #16
 8014634:	af00      	add	r7, sp, #0
 8014636:	60f8      	str	r0, [r7, #12]
 8014638:	60b9      	str	r1, [r7, #8]
 801463a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	687a      	ldr	r2, [r7, #4]
 8014640:	68b9      	ldr	r1, [r7, #8]
 8014642:	4618      	mov	r0, r3
 8014644:	f7fb fe60 	bl	8010308 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8014648:	4a03      	ldr	r2, [pc, #12]	; (8014658 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	601a      	str	r2, [r3, #0]
{

}
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	4618      	mov	r0, r3
 8014652:	3710      	adds	r7, #16
 8014654:	46bd      	mov	sp, r7
 8014656:	bd80      	pop	{r7, pc}
 8014658:	0803025c 	.word	0x0803025c

0801465c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 801465c:	b480      	push	{r7}
 801465e:	b083      	sub	sp, #12
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2200      	movs	r2, #0
 8014668:	601a      	str	r2, [r3, #0]
{

}
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	4618      	mov	r0, r3
 801466e:	370c      	adds	r7, #12
 8014670:	46bd      	mov	sp, r7
 8014672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014676:	4770      	bx	lr

08014678 <_ZN5Model4tickEv>:

void Model::tick()
{
 8014678:	b480      	push	{r7}
 801467a:	b083      	sub	sp, #12
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]

}
 8014680:	bf00      	nop
 8014682:	370c      	adds	r7, #12
 8014684:	46bd      	mov	sp, r7
 8014686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468a:	4770      	bx	lr

0801468c <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 801468c:	b480      	push	{r7}
 801468e:	b083      	sub	sp, #12
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
    {
    }
 8014694:	bf00      	nop
 8014696:	370c      	adds	r7, #12
 8014698:	46bd      	mov	sp, r7
 801469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469e:	4770      	bx	lr

080146a0 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80146a0:	b480      	push	{r7}
 80146a2:	b083      	sub	sp, #12
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
    {
    }
 80146a8:	bf00      	nop
 80146aa:	370c      	adds	r7, #12
 80146ac:	46bd      	mov	sp, r7
 80146ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b2:	4770      	bx	lr

080146b4 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80146b4:	b480      	push	{r7}
 80146b6:	b083      	sub	sp, #12
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	6078      	str	r0, [r7, #4]
    {
 80146bc:	4a04      	ldr	r2, [pc, #16]	; (80146d0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	601a      	str	r2, [r3, #0]
    }
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	4618      	mov	r0, r3
 80146c6:	370c      	adds	r7, #12
 80146c8:	46bd      	mov	sp, r7
 80146ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ce:	4770      	bx	lr
 80146d0:	080302d8 	.word	0x080302d8

080146d4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b082      	sub	sp, #8
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
    }
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	f7ff ffe9 	bl	80146b4 <_ZN8touchgfx9PresenterD1Ev>
 80146e2:	2104      	movs	r1, #4
 80146e4:	6878      	ldr	r0, [r7, #4]
 80146e6:	f018 fdcc 	bl	802d282 <_ZdlPvj>
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	4618      	mov	r0, r3
 80146ee:	3708      	adds	r7, #8
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}

080146f4 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80146f4:	b480      	push	{r7}
 80146f6:	b083      	sub	sp, #12
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
    {
 80146fc:	4a04      	ldr	r2, [pc, #16]	; (8014710 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	601a      	str	r2, [r3, #0]
    }
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	4618      	mov	r0, r3
 8014706:	370c      	adds	r7, #12
 8014708:	46bd      	mov	sp, r7
 801470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470e:	4770      	bx	lr
 8014710:	080302d8 	.word	0x080302d8

08014714 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8014714:	b480      	push	{r7}
 8014716:	b083      	sub	sp, #12
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	4a06      	ldr	r2, [pc, #24]	; (8014738 <_ZN13ModelListenerC1Ev+0x24>)
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	601a      	str	r2, [r3, #0]
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2200      	movs	r2, #0
 8014726:	605a      	str	r2, [r3, #4]
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	4618      	mov	r0, r3
 801472c:	370c      	adds	r7, #12
 801472e:	46bd      	mov	sp, r7
 8014730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014734:	4770      	bx	lr
 8014736:	bf00      	nop
 8014738:	080302c8 	.word	0x080302c8

0801473c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 801473c:	b480      	push	{r7}
 801473e:	b083      	sub	sp, #12
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
 8014744:	4a04      	ldr	r2, [pc, #16]	; (8014758 <_ZN13ModelListenerD1Ev+0x1c>)
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	601a      	str	r2, [r3, #0]
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	4618      	mov	r0, r3
 801474e:	370c      	adds	r7, #12
 8014750:	46bd      	mov	sp, r7
 8014752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014756:	4770      	bx	lr
 8014758:	080302c8 	.word	0x080302c8

0801475c <_ZN13ModelListenerD0Ev>:
 801475c:	b580      	push	{r7, lr}
 801475e:	b082      	sub	sp, #8
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	6878      	ldr	r0, [r7, #4]
 8014766:	f7ff ffe9 	bl	801473c <_ZN13ModelListenerD1Ev>
 801476a:	2108      	movs	r1, #8
 801476c:	6878      	ldr	r0, [r7, #4]
 801476e:	f018 fd88 	bl	802d282 <_ZdlPvj>
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	4618      	mov	r0, r3
 8014776:	3708      	adds	r7, #8
 8014778:	46bd      	mov	sp, r7
 801477a:	bd80      	pop	{r7, pc}

0801477c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 801477c:	b580      	push	{r7, lr}
 801477e:	b082      	sub	sp, #8
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
 8014784:	4a09      	ldr	r2, [pc, #36]	; (80147ac <_ZN16Screen1PresenterD1Ev+0x30>)
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	601a      	str	r2, [r3, #0]
 801478a:	4a09      	ldr	r2, [pc, #36]	; (80147b0 <_ZN16Screen1PresenterD1Ev+0x34>)
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	605a      	str	r2, [r3, #4]
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	3304      	adds	r3, #4
 8014794:	4618      	mov	r0, r3
 8014796:	f7ff ffd1 	bl	801473c <_ZN13ModelListenerD1Ev>
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	4618      	mov	r0, r3
 801479e:	f7ff ff89 	bl	80146b4 <_ZN8touchgfx9PresenterD1Ev>
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	4618      	mov	r0, r3
 80147a6:	3708      	adds	r7, #8
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}
 80147ac:	080302a0 	.word	0x080302a0
 80147b0:	080302b8 	.word	0x080302b8

080147b4 <_ZThn4_N16Screen1PresenterD1Ev>:
 80147b4:	f1a0 0004 	sub.w	r0, r0, #4
 80147b8:	e7e0      	b.n	801477c <_ZN16Screen1PresenterD1Ev>
 80147ba:	bf00      	nop

080147bc <_ZN16Screen1PresenterD0Ev>:
 80147bc:	b580      	push	{r7, lr}
 80147be:	b082      	sub	sp, #8
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f7ff ffd9 	bl	801477c <_ZN16Screen1PresenterD1Ev>
 80147ca:	2110      	movs	r1, #16
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f018 fd58 	bl	802d282 <_ZdlPvj>
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	4618      	mov	r0, r3
 80147d6:	3708      	adds	r7, #8
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}

080147dc <_ZThn4_N16Screen1PresenterD0Ev>:
 80147dc:	f1a0 0004 	sub.w	r0, r0, #4
 80147e0:	e7ec      	b.n	80147bc <_ZN16Screen1PresenterD0Ev>
	...

080147e4 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
 80147ec:	6039      	str	r1, [r7, #0]
    : view(v)
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	4618      	mov	r0, r3
 80147f2:	f7ff ff7f 	bl	80146f4 <_ZN8touchgfx9PresenterC1Ev>
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	3304      	adds	r3, #4
 80147fa:	4618      	mov	r0, r3
 80147fc:	f7ff ff8a 	bl	8014714 <_ZN13ModelListenerC1Ev>
 8014800:	4a06      	ldr	r2, [pc, #24]	; (801481c <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	601a      	str	r2, [r3, #0]
 8014806:	4a06      	ldr	r2, [pc, #24]	; (8014820 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	605a      	str	r2, [r3, #4]
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	683a      	ldr	r2, [r7, #0]
 8014810:	60da      	str	r2, [r3, #12]
{

}
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	4618      	mov	r0, r3
 8014816:	3708      	adds	r7, #8
 8014818:	46bd      	mov	sp, r7
 801481a:	bd80      	pop	{r7, pc}
 801481c:	080302a0 	.word	0x080302a0
 8014820:	080302b8 	.word	0x080302b8

08014824 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8014824:	b480      	push	{r7}
 8014826:	b083      	sub	sp, #12
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]

}
 801482c:	bf00      	nop
 801482e:	370c      	adds	r7, #12
 8014830:	46bd      	mov	sp, r7
 8014832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014836:	4770      	bx	lr

08014838 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8014838:	b480      	push	{r7}
 801483a:	b083      	sub	sp, #12
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]

}
 8014840:	bf00      	nop
 8014842:	370c      	adds	r7, #12
 8014844:	46bd      	mov	sp, r7
 8014846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801484a:	4770      	bx	lr

0801484c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     * @return pointer to the first element in the buffer where the formatted string is
     *         placed.
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 801484c:	b580      	push	{r7, lr}
 801484e:	b084      	sub	sp, #16
 8014850:	af00      	add	r7, sp, #0
 8014852:	60f8      	str	r0, [r7, #12]
 8014854:	460b      	mov	r3, r1
 8014856:	607a      	str	r2, [r7, #4]
 8014858:	ed87 0a00 	vstr	s0, [r7]
 801485c:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 801485e:	463b      	mov	r3, r7
 8014860:	8979      	ldrh	r1, [r7, #10]
 8014862:	687a      	ldr	r2, [r7, #4]
 8014864:	68f8      	ldr	r0, [r7, #12]
 8014866:	f00a ff37 	bl	801f6d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 801486a:	4603      	mov	r3, r0
    }
 801486c:	4618      	mov	r0, r3
 801486e:	3710      	adds	r7, #16
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}

08014874 <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 8014874:	b480      	push	{r7}
 8014876:	b083      	sub	sp, #12
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
 801487c:	460b      	mov	r3, r1
 801487e:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	78fa      	ldrb	r2, [r7, #3]
 8014884:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8014888:	bf00      	nop
 801488a:	370c      	adds	r7, #12
 801488c:	46bd      	mov	sp, r7
 801488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014892:	4770      	bx	lr

08014894 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8014894:	b580      	push	{r7, lr}
 8014896:	b082      	sub	sp, #8
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
 801489c:	4a05      	ldr	r2, [pc, #20]	; (80148b4 <_ZN11Screen1ViewD1Ev+0x20>)
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	601a      	str	r2, [r3, #0]
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	4618      	mov	r0, r3
 80148a6:	f7fc fbb5 	bl	8011014 <_ZN15Screen1ViewBaseD1Ev>
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	4618      	mov	r0, r3
 80148ae:	3708      	adds	r7, #8
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	080302f0 	.word	0x080302f0

080148b8 <_ZN11Screen1ViewD0Ev>:
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b082      	sub	sp, #8
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f7ff ffe7 	bl	8014894 <_ZN11Screen1ViewD1Ev>
 80148c6:	f44f 6156 	mov.w	r1, #3424	; 0xd60
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f018 fcd9 	bl	802d282 <_ZdlPvj>
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	4618      	mov	r0, r3
 80148d4:	3708      	adds	r7, #8
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
	...

080148dc <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

#include "main.h"
#include "extern.h"

Screen1View::Screen1View() {
 80148dc:	b580      	push	{r7, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	4618      	mov	r0, r3
 80148e8:	f7fc fc98 	bl	801121c <_ZN15Screen1ViewBaseC1Ev>
 80148ec:	4a03      	ldr	r2, [pc, #12]	; (80148fc <_ZN11Screen1ViewC1Ev+0x20>)
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	601a      	str	r2, [r3, #0]

}
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	4618      	mov	r0, r3
 80148f6:	3708      	adds	r7, #8
 80148f8:	46bd      	mov	sp, r7
 80148fa:	bd80      	pop	{r7, pc}
 80148fc:	080302f0 	.word	0x080302f0

08014900 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen() {
 8014900:	b580      	push	{r7, lr}
 8014902:	b088      	sub	sp, #32
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::setupScreen();
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	4618      	mov	r0, r3
 801490c:	f7ff fafa 	bl	8013f04 <_ZN15Screen1ViewBase11setupScreenEv>

	Unicode::UnicodeChar buffer[10];

	//.................UNITS.................

	Unicode::strncpy(buffer, "BAR", 10);
 8014910:	f107 030c 	add.w	r3, r7, #12
 8014914:	220a      	movs	r2, #10
 8014916:	49d7      	ldr	r1, [pc, #860]	; (8014c74 <_ZN11Screen1View11setupScreenEv+0x374>)
 8014918:	4618      	mov	r0, r3
 801491a:	f00a f9b6 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(map_unitsBuffer, 10, "%s", buffer);
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	f603 2074 	addw	r0, r3, #2676	; 0xa74
 8014924:	f107 030c 	add.w	r3, r7, #12
 8014928:	4ad3      	ldr	r2, [pc, #844]	; (8014c78 <_ZN11Screen1View11setupScreenEv+0x378>)
 801492a:	210a      	movs	r1, #10
 801492c:	f00a fd14 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014936:	4618      	mov	r0, r3
 8014938:	f005 fb6a 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_units.invalidate();
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014942:	4618      	mov	r0, r3
 8014944:	f008 fb69 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "Lambda", 10);
 8014948:	f107 030c 	add.w	r3, r7, #12
 801494c:	220a      	movs	r2, #10
 801494e:	49cb      	ldr	r1, [pc, #812]	; (8014c7c <_ZN11Screen1View11setupScreenEv+0x37c>)
 8014950:	4618      	mov	r0, r3
 8014952:	f00a f99a 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(lambda_unitsBuffer, 10, "%s", buffer);
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	f603 30ac 	addw	r0, r3, #2988	; 0xbac
 801495c:	f107 030c 	add.w	r3, r7, #12
 8014960:	4ac5      	ldr	r2, [pc, #788]	; (8014c78 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014962:	210a      	movs	r1, #10
 8014964:	f00a fcf8 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 801496e:	4618      	mov	r0, r3
 8014970:	f005 fb4e 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_units.invalidate();
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 801497a:	4618      	mov	r0, r3
 801497c:	f008 fb4d 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BAR", 10);
 8014980:	f107 030c 	add.w	r3, r7, #12
 8014984:	220a      	movs	r2, #10
 8014986:	49bb      	ldr	r1, [pc, #748]	; (8014c74 <_ZN11Screen1View11setupScreenEv+0x374>)
 8014988:	4618      	mov	r0, r3
 801498a:	f00a f97e 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(oilp_unitsBuffer, 10, "%s", buffer);
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	f603 40e4 	addw	r0, r3, #3300	; 0xce4
 8014994:	f107 030c 	add.w	r3, r7, #12
 8014998:	4ab7      	ldr	r2, [pc, #732]	; (8014c78 <_ZN11Screen1View11setupScreenEv+0x378>)
 801499a:	210a      	movs	r1, #10
 801499c:	f00a fcdc 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_units.resizeToCurrentTextWithAlignment();
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80149a6:	4618      	mov	r0, r3
 80149a8:	f005 fb32 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_units.invalidate();
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80149b2:	4618      	mov	r0, r3
 80149b4:	f008 fb31 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BAR", 10);
 80149b8:	f107 030c 	add.w	r3, r7, #12
 80149bc:	220a      	movs	r2, #10
 80149be:	49ad      	ldr	r1, [pc, #692]	; (8014c74 <_ZN11Screen1View11setupScreenEv+0x374>)
 80149c0:	4618      	mov	r0, r3
 80149c2:	f00a f962 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(fuelp_unitsBuffer, 10, "%s", buffer);
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f603 504c 	addw	r0, r3, #3404	; 0xd4c
 80149cc:	f107 030c 	add.w	r3, r7, #12
 80149d0:	4aa9      	ldr	r2, [pc, #676]	; (8014c78 <_ZN11Screen1View11setupScreenEv+0x378>)
 80149d2:	210a      	movs	r1, #10
 80149d4:	f00a fcc0 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 80149de:	4618      	mov	r0, r3
 80149e0:	f005 fb16 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 80149ea:	4618      	mov	r0, r3
 80149ec:	f008 fb15 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "°C", 10);
 80149f0:	f107 030c 	add.w	r3, r7, #12
 80149f4:	220a      	movs	r2, #10
 80149f6:	49a2      	ldr	r1, [pc, #648]	; (8014c80 <_ZN11Screen1View11setupScreenEv+0x380>)
 80149f8:	4618      	mov	r0, r3
 80149fa:	f00a f946 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(ect_unitsBuffer, 10, "%s", buffer);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	f603 4014 	addw	r0, r3, #3092	; 0xc14
 8014a04:	f107 030c 	add.w	r3, r7, #12
 8014a08:	4a9b      	ldr	r2, [pc, #620]	; (8014c78 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014a0a:	210a      	movs	r1, #10
 8014a0c:	f00a fca4 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014a16:	4618      	mov	r0, r3
 8014a18:	f005 fafa 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014a22:	4618      	mov	r0, r3
 8014a24:	f008 faf9 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "°C", 10);
 8014a28:	f107 030c 	add.w	r3, r7, #12
 8014a2c:	220a      	movs	r2, #10
 8014a2e:	4994      	ldr	r1, [pc, #592]	; (8014c80 <_ZN11Screen1View11setupScreenEv+0x380>)
 8014a30:	4618      	mov	r0, r3
 8014a32:	f00a f92a 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(iat_unitsBuffer, 10, "%s", buffer);
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f603 407c 	addw	r0, r3, #3196	; 0xc7c
 8014a3c:	f107 030c 	add.w	r3, r7, #12
 8014a40:	4a8d      	ldr	r2, [pc, #564]	; (8014c78 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014a42:	210a      	movs	r1, #10
 8014a44:	f00a fc88 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f005 fade 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f008 fadd 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "V", 10);
 8014a60:	f107 030c 	add.w	r3, r7, #12
 8014a64:	220a      	movs	r2, #10
 8014a66:	4987      	ldr	r1, [pc, #540]	; (8014c84 <_ZN11Screen1View11setupScreenEv+0x384>)
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f00a f90e 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(batt_unitsBuffer, 10, "%s", buffer);
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	f603 20dc 	addw	r0, r3, #2780	; 0xadc
 8014a74:	f107 030c 	add.w	r3, r7, #12
 8014a78:	4a7f      	ldr	r2, [pc, #508]	; (8014c78 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014a7a:	210a      	movs	r1, #10
 8014a7c:	f00a fc6c 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014a86:	4618      	mov	r0, r3
 8014a88:	f005 fac2 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014a92:	4618      	mov	r0, r3
 8014a94:	f008 fac1 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "%", 10);
 8014a98:	f107 030c 	add.w	r3, r7, #12
 8014a9c:	220a      	movs	r2, #10
 8014a9e:	497a      	ldr	r1, [pc, #488]	; (8014c88 <_ZN11Screen1View11setupScreenEv+0x388>)
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	f00a f8f2 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(tps_unitsBuffer, 10, "%s", buffer);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	f603 3044 	addw	r0, r3, #2884	; 0xb44
 8014aac:	f107 030c 	add.w	r3, r7, #12
 8014ab0:	4a71      	ldr	r2, [pc, #452]	; (8014c78 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014ab2:	210a      	movs	r1, #10
 8014ab4:	f00a fc50 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f005 faa6 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014aca:	4618      	mov	r0, r3
 8014acc:	f008 faa5 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	//.................LABELS.................

	Unicode::strncpy(buffer, "MAP", 10);
 8014ad0:	f107 030c 	add.w	r3, r7, #12
 8014ad4:	220a      	movs	r2, #10
 8014ad6:	496d      	ldr	r1, [pc, #436]	; (8014c8c <_ZN11Screen1View11setupScreenEv+0x38c>)
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f00a f8d6 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(map_labelBuffer, 10, "%s", buffer);
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	f503 6026 	add.w	r0, r3, #2656	; 0xa60
 8014ae4:	f107 030c 	add.w	r3, r7, #12
 8014ae8:	4a63      	ldr	r2, [pc, #396]	; (8014c78 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014aea:	210a      	movs	r1, #10
 8014aec:	f00a fc34 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014af6:	4618      	mov	r0, r3
 8014af8:	f005 fa8a 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_units.invalidate();
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014b02:	4618      	mov	r0, r3
 8014b04:	f008 fa89 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "AFP", 10);
 8014b08:	f107 030c 	add.w	r3, r7, #12
 8014b0c:	220a      	movs	r2, #10
 8014b0e:	4960      	ldr	r1, [pc, #384]	; (8014c90 <_ZN11Screen1View11setupScreenEv+0x390>)
 8014b10:	4618      	mov	r0, r3
 8014b12:	f00a f8ba 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(lambda_labelBuffer, 10, "%s", buffer);
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f603 3098 	addw	r0, r3, #2968	; 0xb98
 8014b1c:	f107 030c 	add.w	r3, r7, #12
 8014b20:	4a55      	ldr	r2, [pc, #340]	; (8014c78 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014b22:	210a      	movs	r1, #10
 8014b24:	f00a fc18 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f005 fa6e 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_units.invalidate();
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f008 fa6d 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "OIL P", 10);
 8014b40:	f107 030c 	add.w	r3, r7, #12
 8014b44:	220a      	movs	r2, #10
 8014b46:	4953      	ldr	r1, [pc, #332]	; (8014c94 <_ZN11Screen1View11setupScreenEv+0x394>)
 8014b48:	4618      	mov	r0, r3
 8014b4a:	f00a f89e 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(oilp_labelBuffer, 10, "%s", buffer);
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	f503 604d 	add.w	r0, r3, #3280	; 0xcd0
 8014b54:	f107 030c 	add.w	r3, r7, #12
 8014b58:	4a47      	ldr	r2, [pc, #284]	; (8014c78 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014b5a:	210a      	movs	r1, #10
 8014b5c:	f00a fbfc 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_units.resizeToCurrentTextWithAlignment();
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014b66:	4618      	mov	r0, r3
 8014b68:	f005 fa52 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_units.invalidate();
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014b72:	4618      	mov	r0, r3
 8014b74:	f008 fa51 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "FUEL P", 10);
 8014b78:	f107 030c 	add.w	r3, r7, #12
 8014b7c:	220a      	movs	r2, #10
 8014b7e:	4946      	ldr	r1, [pc, #280]	; (8014c98 <_ZN11Screen1View11setupScreenEv+0x398>)
 8014b80:	4618      	mov	r0, r3
 8014b82:	f00a f882 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(fuelp_labelBuffer, 10, "%s", buffer);
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	f603 5038 	addw	r0, r3, #3384	; 0xd38
 8014b8c:	f107 030c 	add.w	r3, r7, #12
 8014b90:	4a39      	ldr	r2, [pc, #228]	; (8014c78 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014b92:	210a      	movs	r1, #10
 8014b94:	f00a fbe0 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f005 fa36 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014baa:	4618      	mov	r0, r3
 8014bac:	f008 fa35 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "ECT", 10);
 8014bb0:	f107 030c 	add.w	r3, r7, #12
 8014bb4:	220a      	movs	r2, #10
 8014bb6:	4939      	ldr	r1, [pc, #228]	; (8014c9c <_ZN11Screen1View11setupScreenEv+0x39c>)
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f00a f866 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(ect_labelBuffer, 10, "%s", buffer);
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	f503 6040 	add.w	r0, r3, #3072	; 0xc00
 8014bc4:	f107 030c 	add.w	r3, r7, #12
 8014bc8:	4a2b      	ldr	r2, [pc, #172]	; (8014c78 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014bca:	210a      	movs	r1, #10
 8014bcc:	f00a fbc4 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f005 fa1a 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014be2:	4618      	mov	r0, r3
 8014be4:	f008 fa19 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "IAT", 10);
 8014be8:	f107 030c 	add.w	r3, r7, #12
 8014bec:	220a      	movs	r2, #10
 8014bee:	492c      	ldr	r1, [pc, #176]	; (8014ca0 <_ZN11Screen1View11setupScreenEv+0x3a0>)
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f00a f84a 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(iat_labelBuffer, 10, "%s", buffer);
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	f603 4068 	addw	r0, r3, #3176	; 0xc68
 8014bfc:	f107 030c 	add.w	r3, r7, #12
 8014c00:	4a1d      	ldr	r2, [pc, #116]	; (8014c78 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014c02:	210a      	movs	r1, #10
 8014c04:	f00a fba8 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f005 f9fe 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f008 f9fd 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BATTERY", 10);
 8014c20:	f107 030c 	add.w	r3, r7, #12
 8014c24:	220a      	movs	r2, #10
 8014c26:	491f      	ldr	r1, [pc, #124]	; (8014ca4 <_ZN11Screen1View11setupScreenEv+0x3a4>)
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f00a f82e 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(batt_labelBuffer, 10, "%s", buffer);
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	f603 20c8 	addw	r0, r3, #2760	; 0xac8
 8014c34:	f107 030c 	add.w	r3, r7, #12
 8014c38:	4a0f      	ldr	r2, [pc, #60]	; (8014c78 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014c3a:	210a      	movs	r1, #10
 8014c3c:	f00a fb8c 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014c46:	4618      	mov	r0, r3
 8014c48:	f005 f9e2 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014c52:	4618      	mov	r0, r3
 8014c54:	f008 f9e1 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "TPS", 10);
 8014c58:	f107 030c 	add.w	r3, r7, #12
 8014c5c:	220a      	movs	r2, #10
 8014c5e:	4912      	ldr	r1, [pc, #72]	; (8014ca8 <_ZN11Screen1View11setupScreenEv+0x3a8>)
 8014c60:	4618      	mov	r0, r3
 8014c62:	f00a f812 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(tps_labelBuffer, 10, "%s", buffer);
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	f503 6033 	add.w	r0, r3, #2864	; 0xb30
 8014c6c:	f107 030c 	add.w	r3, r7, #12
 8014c70:	e01c      	b.n	8014cac <_ZN11Screen1View11setupScreenEv+0x3ac>
 8014c72:	bf00      	nop
 8014c74:	0802f854 	.word	0x0802f854
 8014c78:	0802f858 	.word	0x0802f858
 8014c7c:	0802f85c 	.word	0x0802f85c
 8014c80:	0802f864 	.word	0x0802f864
 8014c84:	0802f868 	.word	0x0802f868
 8014c88:	0802f86c 	.word	0x0802f86c
 8014c8c:	0802f870 	.word	0x0802f870
 8014c90:	0802f874 	.word	0x0802f874
 8014c94:	0802f878 	.word	0x0802f878
 8014c98:	0802f880 	.word	0x0802f880
 8014c9c:	0802f888 	.word	0x0802f888
 8014ca0:	0802f88c 	.word	0x0802f88c
 8014ca4:	0802f890 	.word	0x0802f890
 8014ca8:	0802f898 	.word	0x0802f898
 8014cac:	4a09      	ldr	r2, [pc, #36]	; (8014cd4 <_ZN11Screen1View11setupScreenEv+0x3d4>)
 8014cae:	210a      	movs	r1, #10
 8014cb0:	f00a fb52 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f005 f9a8 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f008 f9a7 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8014ccc:	bf00      	nop
 8014cce:	3720      	adds	r7, #32
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	bd80      	pop	{r7, pc}
 8014cd4:	0802f858 	.word	0x0802f858

08014cd8 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen() {
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b082      	sub	sp, #8
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::tearDownScreen();
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	f7fb fffa 	bl	8010cdc <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8014ce8:	bf00      	nop
 8014cea:	3708      	adds	r7, #8
 8014cec:	46bd      	mov	sp, r7
 8014cee:	bd80      	pop	{r7, pc}

08014cf0 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent() {
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b08a      	sub	sp, #40	; 0x28
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
	Unicode::UnicodeChar buffer[16];

	map_value.invalidate();
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f008 f98b 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.MAP * PSI_TO_BAR));
 8014d04:	4bd1      	ldr	r3, [pc, #836]	; (801504c <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014d06:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 8014d0a:	ee07 3a90 	vmov	s15, r3
 8014d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d12:	ed9f 7acf 	vldr	s14, [pc, #828]	; 8015050 <_ZN11Screen1View15handleTickEventEv+0x360>
 8014d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d1a:	f107 0308 	add.w	r3, r7, #8
 8014d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8014d22:	4acc      	ldr	r2, [pc, #816]	; (8015054 <_ZN11Screen1View15handleTickEventEv+0x364>)
 8014d24:	2110      	movs	r1, #16
 8014d26:	4618      	mov	r0, r3
 8014d28:	f7ff fd90 	bl	801484c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(map_valueBuffer, 16, "%s", buffer);
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f503 6022 	add.w	r0, r3, #2592	; 0xa20
 8014d32:	f107 0308 	add.w	r3, r7, #8
 8014d36:	4ac8      	ldr	r2, [pc, #800]	; (8015058 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8014d38:	2110      	movs	r1, #16
 8014d3a:	f00a fb0d 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_value.resizeToCurrentTextWithAlignment();
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8014d44:	4618      	mov	r0, r3
 8014d46:	f005 f963 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_value.invalidate();
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8014d50:	4618      	mov	r0, r3
 8014d52:	f008 f962 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	batt_value.invalidate();
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f008 f95c 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f", (Current_Status.BATT / 100.00f));
 8014d62:	4bba      	ldr	r3, [pc, #744]	; (801504c <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014d64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8014d68:	ee07 3a90 	vmov	s15, r3
 8014d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d70:	eddf 6aba 	vldr	s13, [pc, #744]	; 801505c <_ZN11Screen1View15handleTickEventEv+0x36c>
 8014d74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014d78:	f107 0308 	add.w	r3, r7, #8
 8014d7c:	eeb0 0a47 	vmov.f32	s0, s14
 8014d80:	4ab4      	ldr	r2, [pc, #720]	; (8015054 <_ZN11Screen1View15handleTickEventEv+0x364>)
 8014d82:	2110      	movs	r1, #16
 8014d84:	4618      	mov	r0, r3
 8014d86:	f7ff fd61 	bl	801484c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(batt_valueBuffer, 16, "%s", buffer);
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	f603 2088 	addw	r0, r3, #2696	; 0xa88
 8014d90:	f107 0308 	add.w	r3, r7, #8
 8014d94:	4ab0      	ldr	r2, [pc, #704]	; (8015058 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8014d96:	2110      	movs	r1, #16
 8014d98:	f00a fade 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	batt_value.resizeToCurrentTextWithAlignment();
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8014da2:	4618      	mov	r0, r3
 8014da4:	f005 f934 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	batt_value.invalidate();
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8014dae:	4618      	mov	r0, r3
 8014db0:	f008 f933 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	tps_value.invalidate();
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f008 f92d 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(tps_valueBuffer, 16, "%d", (Current_Status.TPS / 10));
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	f503 602f 	add.w	r0, r3, #2800	; 0xaf0
 8014dc6:	4ba1      	ldr	r3, [pc, #644]	; (801504c <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014dc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014dcc:	4aa4      	ldr	r2, [pc, #656]	; (8015060 <_ZN11Screen1View15handleTickEventEv+0x370>)
 8014dce:	fba2 2303 	umull	r2, r3, r2, r3
 8014dd2:	08db      	lsrs	r3, r3, #3
 8014dd4:	b29b      	uxth	r3, r3
 8014dd6:	4aa3      	ldr	r2, [pc, #652]	; (8015064 <_ZN11Screen1View15handleTickEventEv+0x374>)
 8014dd8:	2110      	movs	r1, #16
 8014dda:	f00a fabd 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	tps_value.resizeToCurrentTextWithAlignment();
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8014de4:	4618      	mov	r0, r3
 8014de6:	f005 f913 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	tps_value.invalidate();
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8014df0:	4618      	mov	r0, r3
 8014df2:	f008 f912 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	lambda_value.invalidate();
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f008 f90c 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f",
			(Current_Status.LAMBDA1 * AFR_TO_LAMBDA / 100.00f));
 8014e02:	4b92      	ldr	r3, [pc, #584]	; (801504c <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014e04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014e06:	ee07 3a90 	vmov	s15, r3
 8014e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014e0e:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8015068 <_ZN11Screen1View15handleTickEventEv+0x378>
 8014e12:	ee67 7a87 	vmul.f32	s15, s15, s14
	Unicode::snprintfFloat(buffer, 16, "%.2f",
 8014e16:	eddf 6a91 	vldr	s13, [pc, #580]	; 801505c <_ZN11Screen1View15handleTickEventEv+0x36c>
 8014e1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014e1e:	f107 0308 	add.w	r3, r7, #8
 8014e22:	eeb0 0a47 	vmov.f32	s0, s14
 8014e26:	4a91      	ldr	r2, [pc, #580]	; (801506c <_ZN11Screen1View15handleTickEventEv+0x37c>)
 8014e28:	2110      	movs	r1, #16
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f7ff fd0e 	bl	801484c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(lambda_valueBuffer, 16, "%s", buffer);
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	f603 3058 	addw	r0, r3, #2904	; 0xb58
 8014e36:	f107 0308 	add.w	r3, r7, #8
 8014e3a:	4a87      	ldr	r2, [pc, #540]	; (8015058 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8014e3c:	2110      	movs	r1, #16
 8014e3e:	f00a fa8b 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	lambda_value.resizeToCurrentTextWithAlignment();
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8014e48:	4618      	mov	r0, r3
 8014e4a:	f005 f8e1 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_value.invalidate();
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8014e54:	4618      	mov	r0, r3
 8014e56:	f008 f8e0 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	ect_value.invalidate();
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8014e60:	4618      	mov	r0, r3
 8014e62:	f008 f8da 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(ect_valueBuffer, 16, "%d", Current_Status.ECT - 50);
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	f503 603c 	add.w	r0, r3, #3008	; 0xbc0
 8014e6c:	4b77      	ldr	r3, [pc, #476]	; (801504c <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014e6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014e72:	3b32      	subs	r3, #50	; 0x32
 8014e74:	4a7b      	ldr	r2, [pc, #492]	; (8015064 <_ZN11Screen1View15handleTickEventEv+0x374>)
 8014e76:	2110      	movs	r1, #16
 8014e78:	f00a fa6e 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ect_value.resizeToCurrentTextWithAlignment();
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8014e82:	4618      	mov	r0, r3
 8014e84:	f005 f8c4 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ect_value.invalidate();
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f008 f8c3 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	iat_value.invalidate();
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	f008 f8bd 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(iat_valueBuffer, 16, "%d", Current_Status.IAT - 50);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	f603 4028 	addw	r0, r3, #3112	; 0xc28
 8014ea6:	4b69      	ldr	r3, [pc, #420]	; (801504c <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014ea8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014eac:	3b32      	subs	r3, #50	; 0x32
 8014eae:	4a6d      	ldr	r2, [pc, #436]	; (8015064 <_ZN11Screen1View15handleTickEventEv+0x374>)
 8014eb0:	2110      	movs	r1, #16
 8014eb2:	f00a fa51 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	iat_value.resizeToCurrentTextWithAlignment();
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f005 f8a7 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	iat_value.invalidate();
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8014ec8:	4618      	mov	r0, r3
 8014eca:	f008 f8a6 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	oilp_value.invalidate();
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f008 f8a0 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.OILP * PSI_TO_BAR));
 8014eda:	4b5c      	ldr	r3, [pc, #368]	; (801504c <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014edc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014ee0:	ee07 3a90 	vmov	s15, r3
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 8014ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ee8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8015050 <_ZN11Screen1View15handleTickEventEv+0x360>
 8014eec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014ef0:	f107 0308 	add.w	r3, r7, #8
 8014ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8014ef8:	4a56      	ldr	r2, [pc, #344]	; (8015054 <_ZN11Screen1View15handleTickEventEv+0x364>)
 8014efa:	2110      	movs	r1, #16
 8014efc:	4618      	mov	r0, r3
 8014efe:	f7ff fca5 	bl	801484c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(oilp_valueBuffer, 16, "%s", buffer);
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	f503 6049 	add.w	r0, r3, #3216	; 0xc90
 8014f08:	f107 0308 	add.w	r3, r7, #8
 8014f0c:	4a52      	ldr	r2, [pc, #328]	; (8015058 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8014f0e:	2110      	movs	r1, #16
 8014f10:	f00a fa22 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_value.resizeToCurrentTextWithAlignment();
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f005 f878 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_value.invalidate();
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8014f26:	4618      	mov	r0, r3
 8014f28:	f008 f877 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	fuelp_value.invalidate();
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8014f32:	4618      	mov	r0, r3
 8014f34:	f008 f871 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.FUELP * PSI_TO_BAR));
 8014f38:	4b44      	ldr	r3, [pc, #272]	; (801504c <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014f3a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8014f3e:	ee07 3a90 	vmov	s15, r3
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 8014f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f46:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8015050 <_ZN11Screen1View15handleTickEventEv+0x360>
 8014f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f4e:	f107 0308 	add.w	r3, r7, #8
 8014f52:	eeb0 0a67 	vmov.f32	s0, s15
 8014f56:	4a3f      	ldr	r2, [pc, #252]	; (8015054 <_ZN11Screen1View15handleTickEventEv+0x364>)
 8014f58:	2110      	movs	r1, #16
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f7ff fc76 	bl	801484c <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(fuelp_valueBuffer, 16, "%s", buffer);
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	f603 40f8 	addw	r0, r3, #3320	; 0xcf8
 8014f66:	f107 0308 	add.w	r3, r7, #8
 8014f6a:	4a3b      	ldr	r2, [pc, #236]	; (8015058 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8014f6c:	2110      	movs	r1, #16
 8014f6e:	f00a f9f3 	bl	801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_value.resizeToCurrentTextWithAlignment();
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8014f78:	4618      	mov	r0, r3
 8014f7a:	f005 f849 	bl	801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_value.invalidate();
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8014f84:	4618      	mov	r0, r3
 8014f86:	f008 f848 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	indLeft.setVisible(Current_Status.IND_LEFT);
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8014f90:	4b2e      	ldr	r3, [pc, #184]	; (801504c <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014f92:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	bf14      	ite	ne
 8014f9a:	2301      	movne	r3, #1
 8014f9c:	2300      	moveq	r3, #0
 8014f9e:	b2db      	uxtb	r3, r3
 8014fa0:	4619      	mov	r1, r3
 8014fa2:	4610      	mov	r0, r2
 8014fa4:	f7ff fc66 	bl	8014874 <_ZN8touchgfx8Drawable10setVisibleEb>
	indLeft.invalidate();
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	33c4      	adds	r3, #196	; 0xc4
 8014fac:	4618      	mov	r0, r3
 8014fae:	f008 f834 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	indHigh.setVisible(Current_Status.IND_HIGH);
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8014fb8:	4b24      	ldr	r3, [pc, #144]	; (801504c <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014fba:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	bf14      	ite	ne
 8014fc2:	2301      	movne	r3, #1
 8014fc4:	2300      	moveq	r3, #0
 8014fc6:	b2db      	uxtb	r3, r3
 8014fc8:	4619      	mov	r1, r3
 8014fca:	4610      	mov	r0, r2
 8014fcc:	f7ff fc52 	bl	8014874 <_ZN8touchgfx8Drawable10setVisibleEb>
	indHigh.invalidate();
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f008 f81f 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	indFuel.setVisible(Current_Status.IND_FUEL);
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 8014fe2:	4b1a      	ldr	r3, [pc, #104]	; (801504c <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014fe4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	bf14      	ite	ne
 8014fec:	2301      	movne	r3, #1
 8014fee:	2300      	moveq	r3, #0
 8014ff0:	b2db      	uxtb	r3, r3
 8014ff2:	4619      	mov	r1, r3
 8014ff4:	4610      	mov	r0, r2
 8014ff6:	f7ff fc3d 	bl	8014874 <_ZN8touchgfx8Drawable10setVisibleEb>
	indFuel.invalidate();
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8015000:	4618      	mov	r0, r3
 8015002:	f008 f80a 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	indOil.setVisible(Current_Status.IND_OIL);
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 801500c:	4b0f      	ldr	r3, [pc, #60]	; (801504c <_ZN11Screen1View15handleTickEventEv+0x35c>)
 801500e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8015012:	2b00      	cmp	r3, #0
 8015014:	bf14      	ite	ne
 8015016:	2301      	movne	r3, #1
 8015018:	2300      	moveq	r3, #0
 801501a:	b2db      	uxtb	r3, r3
 801501c:	4619      	mov	r1, r3
 801501e:	4610      	mov	r0, r2
 8015020:	f7ff fc28 	bl	8014874 <_ZN8touchgfx8Drawable10setVisibleEb>
	indOil.invalidate();
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801502a:	4618      	mov	r0, r3
 801502c:	f007 fff5 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	indBatt.setVisible(Current_Status.IND_BATT);
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8015036:	4b05      	ldr	r3, [pc, #20]	; (801504c <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8015038:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 801503c:	2b00      	cmp	r3, #0
 801503e:	bf14      	ite	ne
 8015040:	2301      	movne	r3, #1
 8015042:	2300      	moveq	r3, #0
 8015044:	b2db      	uxtb	r3, r3
 8015046:	4619      	mov	r1, r3
 8015048:	4610      	mov	r0, r2
 801504a:	e011      	b.n	8015070 <_ZN11Screen1View15handleTickEventEv+0x380>
 801504c:	2000a4d8 	.word	0x2000a4d8
 8015050:	3d8d3466 	.word	0x3d8d3466
 8015054:	0802f89c 	.word	0x0802f89c
 8015058:	0802f858 	.word	0x0802f858
 801505c:	42c80000 	.word	0x42c80000
 8015060:	cccccccd 	.word	0xcccccccd
 8015064:	0802f8a4 	.word	0x0802f8a4
 8015068:	416b3333 	.word	0x416b3333
 801506c:	0802f8a8 	.word	0x0802f8a8
 8015070:	f7ff fc00 	bl	8014874 <_ZN8touchgfx8Drawable10setVisibleEb>
	indBatt.invalidate();
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801507a:	4618      	mov	r0, r3
 801507c:	f007 ffcd 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	indPark.setVisible(Current_Status.IND_PARK);
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	f503 72e6 	add.w	r2, r3, #460	; 0x1cc
 8015086:	4b39      	ldr	r3, [pc, #228]	; (801516c <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8015088:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 801508c:	2b00      	cmp	r3, #0
 801508e:	bf14      	ite	ne
 8015090:	2301      	movne	r3, #1
 8015092:	2300      	moveq	r3, #0
 8015094:	b2db      	uxtb	r3, r3
 8015096:	4619      	mov	r1, r3
 8015098:	4610      	mov	r0, r2
 801509a:	f7ff fbeb 	bl	8014874 <_ZN8touchgfx8Drawable10setVisibleEb>
	indPark.invalidate();
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80150a4:	4618      	mov	r0, r3
 80150a6:	f007 ffb8 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	indDTC.setVisible(Current_Status.IND_DTC);
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 80150b0:	4b2e      	ldr	r3, [pc, #184]	; (801516c <_ZN11Screen1View15handleTickEventEv+0x47c>)
 80150b2:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	bf14      	ite	ne
 80150ba:	2301      	movne	r3, #1
 80150bc:	2300      	moveq	r3, #0
 80150be:	b2db      	uxtb	r3, r3
 80150c0:	4619      	mov	r1, r3
 80150c2:	4610      	mov	r0, r2
 80150c4:	f7ff fbd6 	bl	8014874 <_ZN8touchgfx8Drawable10setVisibleEb>
	indDTC.invalidate();
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80150ce:	4618      	mov	r0, r3
 80150d0:	f007 ffa3 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	indECT.setVisible(Current_Status.IND_ECT);
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	f503 7209 	add.w	r2, r3, #548	; 0x224
 80150da:	4b24      	ldr	r3, [pc, #144]	; (801516c <_ZN11Screen1View15handleTickEventEv+0x47c>)
 80150dc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	bf14      	ite	ne
 80150e4:	2301      	movne	r3, #1
 80150e6:	2300      	moveq	r3, #0
 80150e8:	b2db      	uxtb	r3, r3
 80150ea:	4619      	mov	r1, r3
 80150ec:	4610      	mov	r0, r2
 80150ee:	f7ff fbc1 	bl	8014874 <_ZN8touchgfx8Drawable10setVisibleEb>
	indECT.invalidate();
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80150f8:	4618      	mov	r0, r3
 80150fa:	f007 ff8e 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	indLow.setVisible(Current_Status.IND_LOW);
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	f503 7214 	add.w	r2, r3, #592	; 0x250
 8015104:	4b19      	ldr	r3, [pc, #100]	; (801516c <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8015106:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 801510a:	2b00      	cmp	r3, #0
 801510c:	bf14      	ite	ne
 801510e:	2301      	movne	r3, #1
 8015110:	2300      	moveq	r3, #0
 8015112:	b2db      	uxtb	r3, r3
 8015114:	4619      	mov	r1, r3
 8015116:	4610      	mov	r0, r2
 8015118:	f7ff fbac 	bl	8014874 <_ZN8touchgfx8Drawable10setVisibleEb>
	indLow.invalidate();
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8015122:	4618      	mov	r0, r3
 8015124:	f007 ff79 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>

	indRight.setVisible(Current_Status.IND_RIGHT);
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 801512e:	4b0f      	ldr	r3, [pc, #60]	; (801516c <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8015130:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8015134:	2b00      	cmp	r3, #0
 8015136:	bf14      	ite	ne
 8015138:	2301      	movne	r3, #1
 801513a:	2300      	moveq	r3, #0
 801513c:	b2db      	uxtb	r3, r3
 801513e:	4619      	mov	r1, r3
 8015140:	4610      	mov	r0, r2
 8015142:	f7ff fb97 	bl	8014874 <_ZN8touchgfx8Drawable10setVisibleEb>
	indRight.invalidate();
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	33f0      	adds	r3, #240	; 0xf0
 801514a:	4618      	mov	r0, r3
 801514c:	f007 ff65 	bl	801d01a <_ZNK8touchgfx8Drawable10invalidateEv>
	gauge1.updateValue(Current_Status.RPM, 0);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8015156:	4a05      	ldr	r2, [pc, #20]	; (801516c <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8015158:	8812      	ldrh	r2, [r2, #0]
 801515a:	4611      	mov	r1, r2
 801515c:	2200      	movs	r2, #0
 801515e:	4618      	mov	r0, r3
 8015160:	f001 fea1 	bl	8016ea6 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>
	//gauge1.set
	//gauge1.invalidate();

}
 8015164:	bf00      	nop
 8015166:	3728      	adds	r7, #40	; 0x28
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}
 801516c:	2000a4d8 	.word	0x2000a4d8

08015170 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8015170:	b480      	push	{r7}
 8015172:	b083      	sub	sp, #12
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
    {
 8015178:	4a04      	ldr	r2, [pc, #16]	; (801518c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	601a      	str	r2, [r3, #0]
    }
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	4618      	mov	r0, r3
 8015182:	370c      	adds	r7, #12
 8015184:	46bd      	mov	sp, r7
 8015186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518a:	4770      	bx	lr
 801518c:	0803033c 	.word	0x0803033c

08015190 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8015190:	b580      	push	{r7, lr}
 8015192:	b082      	sub	sp, #8
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
    }
 8015198:	6878      	ldr	r0, [r7, #4]
 801519a:	f7ff ffe9 	bl	8015170 <_ZN8touchgfx15TouchControllerD1Ev>
 801519e:	2104      	movs	r1, #4
 80151a0:	6878      	ldr	r0, [r7, #4]
 80151a2:	f018 f86e 	bl	802d282 <_ZdlPvj>
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	4618      	mov	r0, r3
 80151aa:	3708      	adds	r7, #8
 80151ac:	46bd      	mov	sp, r7
 80151ae:	bd80      	pop	{r7, pc}

080151b0 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 80151b0:	b480      	push	{r7}
 80151b2:	b083      	sub	sp, #12
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 80151b8:	bf00      	nop
 80151ba:	370c      	adds	r7, #12
 80151bc:	46bd      	mov	sp, r7
 80151be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c2:	4770      	bx	lr

080151c4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80151c4:	b480      	push	{r7}
 80151c6:	b085      	sub	sp, #20
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	60f8      	str	r0, [r7, #12]
 80151cc:	60b9      	str	r1, [r7, #8]
 80151ce:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 80151d0:	2300      	movs	r3, #0
}
 80151d2:	4618      	mov	r0, r3
 80151d4:	3714      	adds	r7, #20
 80151d6:	46bd      	mov	sp, r7
 80151d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151dc:	4770      	bx	lr
	...

080151e0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b082      	sub	sp, #8
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	6078      	str	r0, [r7, #4]
 80151e8:	4a05      	ldr	r2, [pc, #20]	; (8015200 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	601a      	str	r2, [r3, #0]
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	4618      	mov	r0, r3
 80151f2:	f7ff ffbd 	bl	8015170 <_ZN8touchgfx15TouchControllerD1Ev>
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	4618      	mov	r0, r3
 80151fa:	3708      	adds	r7, #8
 80151fc:	46bd      	mov	sp, r7
 80151fe:	bd80      	pop	{r7, pc}
 8015200:	08030324 	.word	0x08030324

08015204 <_ZN20STM32TouchControllerD0Ev>:
 8015204:	b580      	push	{r7, lr}
 8015206:	b082      	sub	sp, #8
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
 801520c:	6878      	ldr	r0, [r7, #4]
 801520e:	f7ff ffe7 	bl	80151e0 <_ZN20STM32TouchControllerD1Ev>
 8015212:	2104      	movs	r1, #4
 8015214:	6878      	ldr	r0, [r7, #4]
 8015216:	f018 f834 	bl	802d282 <_ZdlPvj>
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	4618      	mov	r0, r3
 801521e:	3708      	adds	r7, #8
 8015220:	46bd      	mov	sp, r7
 8015222:	bd80      	pop	{r7, pc}

08015224 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8015224:	b480      	push	{r7}
 8015226:	b083      	sub	sp, #12
 8015228:	af00      	add	r7, sp, #0
 801522a:	4603      	mov	r3, r0
 801522c:	71fb      	strb	r3, [r7, #7]

}
 801522e:	bf00      	nop
 8015230:	370c      	adds	r7, #12
 8015232:	46bd      	mov	sp, r7
 8015234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015238:	4770      	bx	lr

0801523a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 801523a:	b480      	push	{r7}
 801523c:	b083      	sub	sp, #12
 801523e:	af00      	add	r7, sp, #0
 8015240:	4603      	mov	r3, r0
 8015242:	71fb      	strb	r3, [r7, #7]

}
 8015244:	bf00      	nop
 8015246:	370c      	adds	r7, #12
 8015248:	46bd      	mov	sp, r7
 801524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801524e:	4770      	bx	lr

08015250 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8015250:	b480      	push	{r7}
 8015252:	b083      	sub	sp, #12
 8015254:	af00      	add	r7, sp, #0
 8015256:	4603      	mov	r3, r0
 8015258:	71fb      	strb	r3, [r7, #7]

}
 801525a:	bf00      	nop
 801525c:	370c      	adds	r7, #12
 801525e:	46bd      	mov	sp, r7
 8015260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015264:	4770      	bx	lr
	...

08015268 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8015268:	b480      	push	{r7}
 801526a:	b083      	sub	sp, #12
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
    {
 8015270:	4a04      	ldr	r2, [pc, #16]	; (8015284 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	601a      	str	r2, [r3, #0]
    }
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	4618      	mov	r0, r3
 801527a:	370c      	adds	r7, #12
 801527c:	46bd      	mov	sp, r7
 801527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015282:	4770      	bx	lr
 8015284:	08030dc4 	.word	0x08030dc4

08015288 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8015288:	b580      	push	{r7, lr}
 801528a:	b082      	sub	sp, #8
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
    }
 8015290:	6878      	ldr	r0, [r7, #4]
 8015292:	f7ff ffe9 	bl	8015268 <_ZN8touchgfx3HALD1Ev>
 8015296:	217c      	movs	r1, #124	; 0x7c
 8015298:	6878      	ldr	r0, [r7, #4]
 801529a:	f017 fff2 	bl	802d282 <_ZdlPvj>
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	4618      	mov	r0, r3
 80152a2:	3708      	adds	r7, #8
 80152a4:	46bd      	mov	sp, r7
 80152a6:	bd80      	pop	{r7, pc}

080152a8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80152a8:	b480      	push	{r7}
 80152aa:	b083      	sub	sp, #12
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
 80152b0:	460b      	mov	r3, r1
 80152b2:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	78fa      	ldrb	r2, [r7, #3]
 80152b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	2201      	movs	r2, #1
 80152c0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80152c4:	bf00      	nop
 80152c6:	370c      	adds	r7, #12
 80152c8:	46bd      	mov	sp, r7
 80152ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ce:	4770      	bx	lr

080152d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b082      	sub	sp, #8
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
 80152d8:	460b      	mov	r3, r1
 80152da:	807b      	strh	r3, [r7, #2]
 80152dc:	4613      	mov	r3, r2
 80152de:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80152e0:	4b0c      	ldr	r3, [pc, #48]	; (8015314 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 80152e2:	881b      	ldrh	r3, [r3, #0]
 80152e4:	887a      	ldrh	r2, [r7, #2]
 80152e6:	429a      	cmp	r2, r3
 80152e8:	d304      	bcc.n	80152f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 80152ea:	4b0b      	ldr	r3, [pc, #44]	; (8015318 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 80152ec:	881b      	ldrh	r3, [r3, #0]
 80152ee:	883a      	ldrh	r2, [r7, #0]
 80152f0:	429a      	cmp	r2, r3
 80152f2:	d205      	bcs.n	8015300 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80152f4:	4b09      	ldr	r3, [pc, #36]	; (801531c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80152f6:	4a0a      	ldr	r2, [pc, #40]	; (8015320 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80152f8:	219e      	movs	r1, #158	; 0x9e
 80152fa:	480a      	ldr	r0, [pc, #40]	; (8015324 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80152fc:	f018 fde0 	bl	802dec0 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8015300:	4a09      	ldr	r2, [pc, #36]	; (8015328 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8015302:	887b      	ldrh	r3, [r7, #2]
 8015304:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8015306:	4a09      	ldr	r2, [pc, #36]	; (801532c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8015308:	883b      	ldrh	r3, [r7, #0]
 801530a:	8013      	strh	r3, [r2, #0]
    }
 801530c:	bf00      	nop
 801530e:	3708      	adds	r7, #8
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}
 8015314:	20009770 	.word	0x20009770
 8015318:	20009772 	.word	0x20009772
 801531c:	0802f8b0 	.word	0x0802f8b0
 8015320:	0802f914 	.word	0x0802f914
 8015324:	0802f958 	.word	0x0802f958
 8015328:	20009776 	.word	0x20009776
 801532c:	20009778 	.word	0x20009778

08015330 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8015330:	b580      	push	{r7, lr}
 8015332:	b082      	sub	sp, #8
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 801533e:	2b00      	cmp	r3, #0
 8015340:	d009      	beq.n	8015356 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	685a      	ldr	r2, [r3, #4]
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	685b      	ldr	r3, [r3, #4]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	4610      	mov	r0, r2
 8015350:	4798      	blx	r3
 8015352:	4603      	mov	r3, r0
 8015354:	e000      	b.n	8015358 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8015356:	2300      	movs	r3, #0
    }
 8015358:	4618      	mov	r0, r3
 801535a:	3708      	adds	r7, #8
 801535c:	46bd      	mov	sp, r7
 801535e:	bd80      	pop	{r7, pc}

08015360 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8015360:	b580      	push	{r7, lr}
 8015362:	b082      	sub	sp, #8
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	f003 f831 	bl	80183d0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	33a4      	adds	r3, #164	; 0xa4
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	6878      	ldr	r0, [r7, #4]
 8015378:	4798      	blx	r3
    }
 801537a:	bf00      	nop
 801537c:	3708      	adds	r7, #8
 801537e:	46bd      	mov	sp, r7
 8015380:	bd80      	pop	{r7, pc}

08015382 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8015382:	b480      	push	{r7}
 8015384:	b083      	sub	sp, #12
 8015386:	af00      	add	r7, sp, #0
 8015388:	6078      	str	r0, [r7, #4]
 801538a:	6039      	str	r1, [r7, #0]
    {
        return false;
 801538c:	2300      	movs	r3, #0
    }
 801538e:	4618      	mov	r0, r3
 8015390:	370c      	adds	r7, #12
 8015392:	46bd      	mov	sp, r7
 8015394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015398:	4770      	bx	lr
	...

0801539c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801539c:	b580      	push	{r7, lr}
 801539e:	b084      	sub	sp, #16
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	60f8      	str	r0, [r7, #12]
 80153a4:	60b9      	str	r1, [r7, #8]
 80153a6:	607a      	str	r2, [r7, #4]
 80153a8:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80153aa:	68bb      	ldr	r3, [r7, #8]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d106      	bne.n	80153be <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80153b0:	4b11      	ldr	r3, [pc, #68]	; (80153f8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80153b2:	4a12      	ldr	r2, [pc, #72]	; (80153fc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80153b4:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 80153b8:	4811      	ldr	r0, [pc, #68]	; (8015400 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80153ba:	f018 fd81 	bl	802dec0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	68ba      	ldr	r2, [r7, #8]
 80153c2:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	687a      	ldr	r2, [r7, #4]
 80153c8:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	683a      	ldr	r2, [r7, #0]
 80153ce:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	bf14      	ite	ne
 80153d6:	2301      	movne	r3, #1
 80153d8:	2300      	moveq	r3, #0
 80153da:	b2da      	uxtb	r2, r3
 80153dc:	4b09      	ldr	r3, [pc, #36]	; (8015404 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 80153de:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80153e0:	683b      	ldr	r3, [r7, #0]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	bf14      	ite	ne
 80153e6:	2301      	movne	r3, #1
 80153e8:	2300      	moveq	r3, #0
 80153ea:	b2da      	uxtb	r2, r3
 80153ec:	4b06      	ldr	r3, [pc, #24]	; (8015408 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 80153ee:	701a      	strb	r2, [r3, #0]
    }
 80153f0:	bf00      	nop
 80153f2:	3710      	adds	r7, #16
 80153f4:	46bd      	mov	sp, r7
 80153f6:	bd80      	pop	{r7, pc}
 80153f8:	0802f99c 	.word	0x0802f99c
 80153fc:	0802f9d4 	.word	0x0802f9d4
 8015400:	0802f958 	.word	0x0802f958
 8015404:	2000977a 	.word	0x2000977a
 8015408:	2000977b 	.word	0x2000977b

0801540c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 801540c:	b480      	push	{r7}
 801540e:	b083      	sub	sp, #12
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8015414:	2300      	movs	r3, #0
    }
 8015416:	4618      	mov	r0, r3
 8015418:	370c      	adds	r7, #12
 801541a:	46bd      	mov	sp, r7
 801541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015420:	4770      	bx	lr

08015422 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8015422:	b580      	push	{r7, lr}
 8015424:	b082      	sub	sp, #8
 8015426:	af00      	add	r7, sp, #0
 8015428:	6078      	str	r0, [r7, #4]
 801542a:	460b      	mov	r3, r1
 801542c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015432:	2b00      	cmp	r3, #0
 8015434:	d004      	beq.n	8015440 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801543a:	887a      	ldrh	r2, [r7, #2]
 801543c:	4610      	mov	r0, r2
 801543e:	4798      	blx	r3
        }
    }
 8015440:	bf00      	nop
 8015442:	3708      	adds	r7, #8
 8015444:	46bd      	mov	sp, r7
 8015446:	bd80      	pop	{r7, pc}

08015448 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8015448:	b480      	push	{r7}
 801544a:	b083      	sub	sp, #12
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8015450:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8015454:	4618      	mov	r0, r3
 8015456:	370c      	adds	r7, #12
 8015458:	46bd      	mov	sp, r7
 801545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545e:	4770      	bx	lr

08015460 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8015460:	b580      	push	{r7, lr}
 8015462:	b082      	sub	sp, #8
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	685a      	ldr	r2, [r3, #4]
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	685b      	ldr	r3, [r3, #4]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	3318      	adds	r3, #24
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	4610      	mov	r0, r2
 8015478:	4798      	blx	r3
 801547a:	4603      	mov	r3, r0
    }
 801547c:	4618      	mov	r0, r3
 801547e:	3708      	adds	r7, #8
 8015480:	46bd      	mov	sp, r7
 8015482:	bd80      	pop	{r7, pc}

08015484 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8015484:	b480      	push	{r7}
 8015486:	b085      	sub	sp, #20
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015498:	429a      	cmp	r2, r3
 801549a:	d011      	beq.n	80154c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 801549c:	4b14      	ldr	r3, [pc, #80]	; (80154f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801549e:	781b      	ldrb	r3, [r3, #0]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d11e      	bne.n	80154e2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80154a4:	4b13      	ldr	r3, [pc, #76]	; (80154f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80154a6:	881b      	ldrh	r3, [r3, #0]
 80154a8:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80154aa:	4b13      	ldr	r3, [pc, #76]	; (80154f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80154ac:	881a      	ldrh	r2, [r3, #0]
 80154ae:	4b11      	ldr	r3, [pc, #68]	; (80154f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80154b0:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 80154b2:	4a11      	ldr	r2, [pc, #68]	; (80154f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80154b4:	89bb      	ldrh	r3, [r7, #12]
 80154b6:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80154b8:	4b0d      	ldr	r3, [pc, #52]	; (80154f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80154ba:	2201      	movs	r2, #1
 80154bc:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80154be:	e010      	b.n	80154e2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80154c0:	4b0b      	ldr	r3, [pc, #44]	; (80154f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80154c2:	781b      	ldrb	r3, [r3, #0]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d00c      	beq.n	80154e2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80154c8:	4b0a      	ldr	r3, [pc, #40]	; (80154f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80154ca:	881b      	ldrh	r3, [r3, #0]
 80154cc:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80154ce:	4b0a      	ldr	r3, [pc, #40]	; (80154f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80154d0:	881a      	ldrh	r2, [r3, #0]
 80154d2:	4b08      	ldr	r3, [pc, #32]	; (80154f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80154d4:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80154d6:	4a08      	ldr	r2, [pc, #32]	; (80154f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80154d8:	89fb      	ldrh	r3, [r7, #14]
 80154da:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80154dc:	4b04      	ldr	r3, [pc, #16]	; (80154f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80154de:	2200      	movs	r2, #0
 80154e0:	701a      	strb	r2, [r3, #0]
    }
 80154e2:	bf00      	nop
 80154e4:	3714      	adds	r7, #20
 80154e6:	46bd      	mov	sp, r7
 80154e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ec:	4770      	bx	lr
 80154ee:	bf00      	nop
 80154f0:	20009774 	.word	0x20009774
 80154f4:	20009772 	.word	0x20009772
 80154f8:	20009770 	.word	0x20009770

080154fc <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 80154fc:	b480      	push	{r7}
 80154fe:	b083      	sub	sp, #12
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
    {
    }
 8015504:	bf00      	nop
 8015506:	370c      	adds	r7, #12
 8015508:	46bd      	mov	sp, r7
 801550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550e:	4770      	bx	lr

08015510 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8015510:	b480      	push	{r7}
 8015512:	b083      	sub	sp, #12
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
    {
    }
 8015518:	bf00      	nop
 801551a:	370c      	adds	r7, #12
 801551c:	46bd      	mov	sp, r7
 801551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015522:	4770      	bx	lr

08015524 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8015524:	b580      	push	{r7, lr}
 8015526:	b082      	sub	sp, #8
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	4618      	mov	r0, r3
 8015530:	f002 f8ea 	bl	8017708 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8015534:	bf00      	nop
 8015536:	3708      	adds	r7, #8
 8015538:	46bd      	mov	sp, r7
 801553a:	bd80      	pop	{r7, pc}

0801553c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 801553c:	b580      	push	{r7, lr}
 801553e:	b082      	sub	sp, #8
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
 8015544:	4a05      	ldr	r2, [pc, #20]	; (801555c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	601a      	str	r2, [r3, #0]
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	4618      	mov	r0, r3
 801554e:	f7ff fe8b 	bl	8015268 <_ZN8touchgfx3HALD1Ev>
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	4618      	mov	r0, r3
 8015556:	3708      	adds	r7, #8
 8015558:	46bd      	mov	sp, r7
 801555a:	bd80      	pop	{r7, pc}
 801555c:	0803056c 	.word	0x0803056c

08015560 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8015560:	b580      	push	{r7, lr}
 8015562:	b082      	sub	sp, #8
 8015564:	af00      	add	r7, sp, #0
 8015566:	6078      	str	r0, [r7, #4]
 8015568:	6878      	ldr	r0, [r7, #4]
 801556a:	f7ff ffe7 	bl	801553c <_ZN20TouchGFXGeneratedHALD1Ev>
 801556e:	217c      	movs	r1, #124	; 0x7c
 8015570:	6878      	ldr	r0, [r7, #4]
 8015572:	f017 fe86 	bl	802d282 <_ZdlPvj>
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	4618      	mov	r0, r3
 801557a:	3708      	adds	r7, #8
 801557c:	46bd      	mov	sp, r7
 801557e:	bd80      	pop	{r7, pc}

08015580 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8015580:	b580      	push	{r7, lr}
 8015582:	b082      	sub	sp, #8
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	4618      	mov	r0, r3
 801558c:	f7ff ffca 	bl	8015524 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8015590:	bf00      	nop
 8015592:	3708      	adds	r7, #8
 8015594:	46bd      	mov	sp, r7
 8015596:	bd80      	pop	{r7, pc}

08015598 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b082      	sub	sp, #8
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	4618      	mov	r0, r3
 80155a4:	f001 fa9a 	bl	8016adc <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80155a8:	bf00      	nop
 80155aa:	3708      	adds	r7, #8
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bd80      	pop	{r7, pc}

080155b0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b082      	sub	sp, #8
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	4618      	mov	r0, r3
 80155bc:	f001 fb26 	bl	8016c0c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80155c0:	4603      	mov	r3, r0
}
 80155c2:	4618      	mov	r0, r3
 80155c4:	3708      	adds	r7, #8
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}

080155ca <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80155ca:	b580      	push	{r7, lr}
 80155cc:	b082      	sub	sp, #8
 80155ce:	af00      	add	r7, sp, #0
 80155d0:	6078      	str	r0, [r7, #4]
 80155d2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	6839      	ldr	r1, [r7, #0]
 80155d8:	4618      	mov	r0, r3
 80155da:	f001 fb25 	bl	8016c28 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80155de:	bf00      	nop
 80155e0:	3708      	adds	r7, #8
 80155e2:	46bd      	mov	sp, r7
 80155e4:	bd80      	pop	{r7, pc}

080155e6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80155e6:	b580      	push	{r7, lr}
 80155e8:	b082      	sub	sp, #8
 80155ea:	af00      	add	r7, sp, #0
 80155ec:	6078      	str	r0, [r7, #4]
 80155ee:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	6839      	ldr	r1, [r7, #0]
 80155f4:	4618      	mov	r0, r3
 80155f6:	f001 fb2d 	bl	8016c54 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80155fa:	bf00      	nop
 80155fc:	3708      	adds	r7, #8
 80155fe:	46bd      	mov	sp, r7
 8015600:	bd80      	pop	{r7, pc}

08015602 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8015602:	b580      	push	{r7, lr}
 8015604:	b084      	sub	sp, #16
 8015606:	af00      	add	r7, sp, #0
 8015608:	60f8      	str	r0, [r7, #12]
 801560a:	60b9      	str	r1, [r7, #8]
 801560c:	607a      	str	r2, [r7, #4]
 801560e:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8015610:	68f8      	ldr	r0, [r7, #12]
 8015612:	683b      	ldr	r3, [r7, #0]
 8015614:	687a      	ldr	r2, [r7, #4]
 8015616:	68b9      	ldr	r1, [r7, #8]
 8015618:	f001 fb2a 	bl	8016c70 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 801561c:	4603      	mov	r3, r0
}
 801561e:	4618      	mov	r0, r3
 8015620:	3710      	adds	r7, #16
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}

08015626 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8015626:	b580      	push	{r7, lr}
 8015628:	b082      	sub	sp, #8
 801562a:	af00      	add	r7, sp, #0
 801562c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	4618      	mov	r0, r3
 8015632:	f001 fa77 	bl	8016b24 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8015636:	bf00      	nop
 8015638:	3708      	adds	r7, #8
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}

0801563e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801563e:	b580      	push	{r7, lr}
 8015640:	b082      	sub	sp, #8
 8015642:	af00      	add	r7, sp, #0
 8015644:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	4618      	mov	r0, r3
 801564a:	f001 fa7b 	bl	8016b44 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801564e:	bf00      	nop
 8015650:	3708      	adds	r7, #8
 8015652:	46bd      	mov	sp, r7
 8015654:	bd80      	pop	{r7, pc}

08015656 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8015656:	b580      	push	{r7, lr}
 8015658:	b082      	sub	sp, #8
 801565a:	af00      	add	r7, sp, #0
 801565c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	4618      	mov	r0, r3
 8015662:	f001 fa7d 	bl	8016b60 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8015666:	bf00      	nop
 8015668:	3708      	adds	r7, #8
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}

0801566e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 801566e:	b580      	push	{r7, lr}
 8015670:	b082      	sub	sp, #8
 8015672:	af00      	add	r7, sp, #0
 8015674:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	4618      	mov	r0, r3
 801567a:	f001 fa7f 	bl	8016b7c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801567e:	bf00      	nop
 8015680:	3708      	adds	r7, #8
 8015682:	46bd      	mov	sp, r7
 8015684:	bd80      	pop	{r7, pc}
	...

08015688 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8015688:	b580      	push	{r7, lr}
 801568a:	b082      	sub	sp, #8
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]
 8015690:	4a05      	ldr	r2, [pc, #20]	; (80156a8 <_ZN11TouchGFXHALD1Ev+0x20>)
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	601a      	str	r2, [r3, #0]
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	4618      	mov	r0, r3
 801569a:	f7ff ff4f 	bl	801553c <_ZN20TouchGFXGeneratedHALD1Ev>
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	4618      	mov	r0, r3
 80156a2:	3708      	adds	r7, #8
 80156a4:	46bd      	mov	sp, r7
 80156a6:	bd80      	pop	{r7, pc}
 80156a8:	08030354 	.word	0x08030354

080156ac <_ZN11TouchGFXHALD0Ev>:
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b082      	sub	sp, #8
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
 80156b4:	6878      	ldr	r0, [r7, #4]
 80156b6:	f7ff ffe7 	bl	8015688 <_ZN11TouchGFXHALD1Ev>
 80156ba:	217c      	movs	r1, #124	; 0x7c
 80156bc:	6878      	ldr	r0, [r7, #4]
 80156be:	f017 fde0 	bl	802d282 <_ZdlPvj>
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	4618      	mov	r0, r3
 80156c6:	3708      	adds	r7, #8
 80156c8:	46bd      	mov	sp, r7
 80156ca:	bd80      	pop	{r7, pc}

080156cc <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80156d0:	2200      	movs	r2, #0
 80156d2:	2101      	movs	r1, #1
 80156d4:	2001      	movs	r0, #1
 80156d6:	f7f6 fe0b 	bl	800c2f0 <osSemaphoreNew>
 80156da:	4603      	mov	r3, r0
 80156dc:	4a0f      	ldr	r2, [pc, #60]	; (801571c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80156de:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80156e0:	4b0e      	ldr	r3, [pc, #56]	; (801571c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d105      	bne.n	80156f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80156e8:	4b0d      	ldr	r3, [pc, #52]	; (8015720 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80156ea:	4a0e      	ldr	r2, [pc, #56]	; (8015724 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80156ec:	2128      	movs	r1, #40	; 0x28
 80156ee:	480e      	ldr	r0, [pc, #56]	; (8015728 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80156f0:	f018 fbe6 	bl	802dec0 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80156f4:	2200      	movs	r2, #0
 80156f6:	2104      	movs	r1, #4
 80156f8:	2001      	movs	r0, #1
 80156fa:	f7f6 ff19 	bl	800c530 <osMessageQueueNew>
 80156fe:	4603      	mov	r3, r0
 8015700:	4a0a      	ldr	r2, [pc, #40]	; (801572c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8015702:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8015704:	4b09      	ldr	r3, [pc, #36]	; (801572c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d105      	bne.n	8015718 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 801570c:	4b08      	ldr	r3, [pc, #32]	; (8015730 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801570e:	4a05      	ldr	r2, [pc, #20]	; (8015724 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8015710:	212c      	movs	r1, #44	; 0x2c
 8015712:	4805      	ldr	r0, [pc, #20]	; (8015728 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8015714:	f018 fbd4 	bl	802dec0 <__assert_func>
}
 8015718:	bf00      	nop
 801571a:	bd80      	pop	{r7, pc}
 801571c:	20007b40 	.word	0x20007b40
 8015720:	0802fa24 	.word	0x0802fa24
 8015724:	0802fa70 	.word	0x0802fa70
 8015728:	0802faa0 	.word	0x0802faa0
 801572c:	20007b44 	.word	0x20007b44
 8015730:	0802facc 	.word	0x0802facc

08015734 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8015734:	b580      	push	{r7, lr}
 8015736:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8015738:	4b04      	ldr	r3, [pc, #16]	; (801574c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	f04f 31ff 	mov.w	r1, #4294967295
 8015740:	4618      	mov	r0, r3
 8015742:	f7f6 fe5f 	bl	800c404 <osSemaphoreAcquire>
}
 8015746:	bf00      	nop
 8015748:	bd80      	pop	{r7, pc}
 801574a:	bf00      	nop
 801574c:	20007b40 	.word	0x20007b40

08015750 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8015750:	b580      	push	{r7, lr}
 8015752:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8015754:	4b03      	ldr	r3, [pc, #12]	; (8015764 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	4618      	mov	r0, r3
 801575a:	f7f6 fea5 	bl	800c4a8 <osSemaphoreRelease>
}
 801575e:	bf00      	nop
 8015760:	bd80      	pop	{r7, pc}
 8015762:	bf00      	nop
 8015764:	20007b40 	.word	0x20007b40

08015768 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8015768:	b580      	push	{r7, lr}
 801576a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 801576c:	4b03      	ldr	r3, [pc, #12]	; (801577c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	2100      	movs	r1, #0
 8015772:	4618      	mov	r0, r3
 8015774:	f7f6 fe46 	bl	800c404 <osSemaphoreAcquire>
}
 8015778:	bf00      	nop
 801577a:	bd80      	pop	{r7, pc}
 801577c:	20007b40 	.word	0x20007b40

08015780 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8015780:	b580      	push	{r7, lr}
 8015782:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8015784:	4b03      	ldr	r3, [pc, #12]	; (8015794 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	4618      	mov	r0, r3
 801578a:	f7f6 fe8d 	bl	800c4a8 <osSemaphoreRelease>
}
 801578e:	bf00      	nop
 8015790:	bd80      	pop	{r7, pc}
 8015792:	bf00      	nop
 8015794:	20007b40 	.word	0x20007b40

08015798 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8015798:	b580      	push	{r7, lr}
 801579a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 801579c:	4b04      	ldr	r3, [pc, #16]	; (80157b0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 801579e:	6818      	ldr	r0, [r3, #0]
 80157a0:	2300      	movs	r3, #0
 80157a2:	2200      	movs	r2, #0
 80157a4:	4903      	ldr	r1, [pc, #12]	; (80157b4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80157a6:	f7f6 ff37 	bl	800c618 <osMessageQueuePut>
}
 80157aa:	bf00      	nop
 80157ac:	bd80      	pop	{r7, pc}
 80157ae:	bf00      	nop
 80157b0:	20007b44 	.word	0x20007b44
 80157b4:	20000018 	.word	0x20000018

080157b8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b082      	sub	sp, #8
 80157bc:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80157be:	4b09      	ldr	r3, [pc, #36]	; (80157e4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80157c0:	6818      	ldr	r0, [r3, #0]
 80157c2:	1d39      	adds	r1, r7, #4
 80157c4:	2300      	movs	r3, #0
 80157c6:	2200      	movs	r2, #0
 80157c8:	f7f6 ff86 	bl	800c6d8 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80157cc:	4b05      	ldr	r3, [pc, #20]	; (80157e4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80157ce:	6818      	ldr	r0, [r3, #0]
 80157d0:	1d39      	adds	r1, r7, #4
 80157d2:	f04f 33ff 	mov.w	r3, #4294967295
 80157d6:	2200      	movs	r2, #0
 80157d8:	f7f6 ff7e 	bl	800c6d8 <osMessageQueueGet>
}
 80157dc:	bf00      	nop
 80157de:	3708      	adds	r7, #8
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}
 80157e4:	20007b44 	.word	0x20007b44

080157e8 <__NVIC_EnableIRQ>:
{
 80157e8:	b480      	push	{r7}
 80157ea:	b083      	sub	sp, #12
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	4603      	mov	r3, r0
 80157f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80157f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	db0b      	blt.n	8015812 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80157fa:	79fb      	ldrb	r3, [r7, #7]
 80157fc:	f003 021f 	and.w	r2, r3, #31
 8015800:	4907      	ldr	r1, [pc, #28]	; (8015820 <__NVIC_EnableIRQ+0x38>)
 8015802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015806:	095b      	lsrs	r3, r3, #5
 8015808:	2001      	movs	r0, #1
 801580a:	fa00 f202 	lsl.w	r2, r0, r2
 801580e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015812:	bf00      	nop
 8015814:	370c      	adds	r7, #12
 8015816:	46bd      	mov	sp, r7
 8015818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581c:	4770      	bx	lr
 801581e:	bf00      	nop
 8015820:	e000e100 	.word	0xe000e100

08015824 <__NVIC_DisableIRQ>:
{
 8015824:	b480      	push	{r7}
 8015826:	b083      	sub	sp, #12
 8015828:	af00      	add	r7, sp, #0
 801582a:	4603      	mov	r3, r0
 801582c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801582e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015832:	2b00      	cmp	r3, #0
 8015834:	db12      	blt.n	801585c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015836:	79fb      	ldrb	r3, [r7, #7]
 8015838:	f003 021f 	and.w	r2, r3, #31
 801583c:	490a      	ldr	r1, [pc, #40]	; (8015868 <__NVIC_DisableIRQ+0x44>)
 801583e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015842:	095b      	lsrs	r3, r3, #5
 8015844:	2001      	movs	r0, #1
 8015846:	fa00 f202 	lsl.w	r2, r0, r2
 801584a:	3320      	adds	r3, #32
 801584c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8015850:	f3bf 8f4f 	dsb	sy
}
 8015854:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015856:	f3bf 8f6f 	isb	sy
}
 801585a:	bf00      	nop
}
 801585c:	bf00      	nop
 801585e:	370c      	adds	r7, #12
 8015860:	46bd      	mov	sp, r7
 8015862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015866:	4770      	bx	lr
 8015868:	e000e100 	.word	0xe000e100

0801586c <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 801586c:	b480      	push	{r7}
 801586e:	b083      	sub	sp, #12
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
        : color(0)
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	2200      	movs	r2, #0
 8015878:	601a      	str	r2, [r3, #0]
    }
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	4618      	mov	r0, r3
 801587e:	370c      	adds	r7, #12
 8015880:	46bd      	mov	sp, r7
 8015882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015886:	4770      	bx	lr

08015888 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8015888:	b480      	push	{r7}
 801588a:	b083      	sub	sp, #12
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
        return color;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	681b      	ldr	r3, [r3, #0]
    }
 8015894:	4618      	mov	r0, r3
 8015896:	370c      	adds	r7, #12
 8015898:	46bd      	mov	sp, r7
 801589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801589e:	4770      	bx	lr

080158a0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80158a0:	b480      	push	{r7}
 80158a2:	b083      	sub	sp, #12
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
    {
 80158a8:	4a04      	ldr	r2, [pc, #16]	; (80158bc <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	601a      	str	r2, [r3, #0]
    }
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	4618      	mov	r0, r3
 80158b2:	370c      	adds	r7, #12
 80158b4:	46bd      	mov	sp, r7
 80158b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ba:	4770      	bx	lr
 80158bc:	08030474 	.word	0x08030474

080158c0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b082      	sub	sp, #8
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
    }
 80158c8:	6878      	ldr	r0, [r7, #4]
 80158ca:	f7ff ffe9 	bl	80158a0 <_ZN8touchgfx9DMA_QueueD1Ev>
 80158ce:	2104      	movs	r1, #4
 80158d0:	6878      	ldr	r0, [r7, #4]
 80158d2:	f017 fcd6 	bl	802d282 <_ZdlPvj>
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	4618      	mov	r0, r3
 80158da:	3708      	adds	r7, #8
 80158dc:	46bd      	mov	sp, r7
 80158de:	bd80      	pop	{r7, pc}

080158e0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b082      	sub	sp, #8
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	3344      	adds	r3, #68	; 0x44
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	6878      	ldr	r0, [r7, #4]
 80158f2:	4798      	blx	r3
    }
 80158f4:	bf00      	nop
 80158f6:	3708      	adds	r7, #8
 80158f8:	46bd      	mov	sp, r7
 80158fa:	bd80      	pop	{r7, pc}

080158fc <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80158fc:	b480      	push	{r7}
 80158fe:	b083      	sub	sp, #12
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
    {
 8015904:	4a04      	ldr	r2, [pc, #16]	; (8015918 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	601a      	str	r2, [r3, #0]
    }
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	4618      	mov	r0, r3
 801590e:	370c      	adds	r7, #12
 8015910:	46bd      	mov	sp, r7
 8015912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015916:	4770      	bx	lr
 8015918:	0803131c 	.word	0x0803131c

0801591c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 801591c:	b580      	push	{r7, lr}
 801591e:	b082      	sub	sp, #8
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
    }
 8015924:	6878      	ldr	r0, [r7, #4]
 8015926:	f7ff ffe9 	bl	80158fc <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801592a:	210c      	movs	r1, #12
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f017 fca8 	bl	802d282 <_ZdlPvj>
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	4618      	mov	r0, r3
 8015936:	3708      	adds	r7, #8
 8015938:	46bd      	mov	sp, r7
 801593a:	bd80      	pop	{r7, pc}

0801593c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 801593c:	b480      	push	{r7}
 801593e:	b083      	sub	sp, #12
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
 8015944:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8015946:	4a09      	ldr	r2, [pc, #36]	; (801596c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	601a      	str	r2, [r3, #0]
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	683a      	ldr	r2, [r7, #0]
 8015950:	605a      	str	r2, [r3, #4]
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	2200      	movs	r2, #0
 8015956:	721a      	strb	r2, [r3, #8]
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	2200      	movs	r2, #0
 801595c:	725a      	strb	r2, [r3, #9]
    {
    }
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	4618      	mov	r0, r3
 8015962:	370c      	adds	r7, #12
 8015964:	46bd      	mov	sp, r7
 8015966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596a:	4770      	bx	lr
 801596c:	0803131c 	.word	0x0803131c

08015970 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8015970:	b480      	push	{r7}
 8015972:	b083      	sub	sp, #12
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8015978:	2301      	movs	r3, #1
    }
 801597a:	4618      	mov	r0, r3
 801597c:	370c      	adds	r7, #12
 801597e:	46bd      	mov	sp, r7
 8015980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015984:	4770      	bx	lr

08015986 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8015986:	b580      	push	{r7, lr}
 8015988:	b082      	sub	sp, #8
 801598a:	af00      	add	r7, sp, #0
 801598c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 801598e:	687a      	ldr	r2, [r7, #4]
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	3328      	adds	r3, #40	; 0x28
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	4610      	mov	r0, r2
 801599a:	4798      	blx	r3
    }
 801599c:	bf00      	nop
 801599e:	3708      	adds	r7, #8
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bd80      	pop	{r7, pc}

080159a4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b082      	sub	sp, #8
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	685a      	ldr	r2, [r3, #4]
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	685b      	ldr	r3, [r3, #4]
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	3314      	adds	r3, #20
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	4610      	mov	r0, r2
 80159bc:	4798      	blx	r3
    }
 80159be:	bf00      	nop
 80159c0:	3708      	adds	r7, #8
 80159c2:	46bd      	mov	sp, r7
 80159c4:	bd80      	pop	{r7, pc}

080159c6 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 80159c6:	b580      	push	{r7, lr}
 80159c8:	b082      	sub	sp, #8
 80159ca:	af00      	add	r7, sp, #0
 80159cc:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 80159ce:	f7fa fb0d 	bl	800ffec <_ZN8touchgfx3HAL11getInstanceEv>
 80159d2:	4603      	mov	r3, r0
 80159d4:	4618      	mov	r0, r3
 80159d6:	f7ff ffe5 	bl	80159a4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 80159da:	bf00      	nop
 80159dc:	3708      	adds	r7, #8
 80159de:	46bd      	mov	sp, r7
 80159e0:	bd80      	pop	{r7, pc}

080159e2 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80159e2:	b580      	push	{r7, lr}
 80159e4:	b082      	sub	sp, #8
 80159e6:	af00      	add	r7, sp, #0
 80159e8:	6078      	str	r0, [r7, #4]
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	330c      	adds	r3, #12
 80159ee:	4618      	mov	r0, r3
 80159f0:	f7ff ff3c 	bl	801586c <_ZN8touchgfx9colortypeC1Ev>
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	4618      	mov	r0, r3
 80159f8:	3708      	adds	r7, #8
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
	...

08015a00 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8015a00:	b5b0      	push	{r4, r5, r7, lr}
 8015a02:	b082      	sub	sp, #8
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8015a08:	687a      	ldr	r2, [r7, #4]
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	330c      	adds	r3, #12
 8015a0e:	4619      	mov	r1, r3
 8015a10:	4610      	mov	r0, r2
 8015a12:	f7ff ff93 	bl	801593c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8015a16:	4a0e      	ldr	r2, [pc, #56]	; (8015a50 <_ZN8STM32DMAC1Ev+0x50>)
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	601a      	str	r2, [r3, #0]
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	f103 000c 	add.w	r0, r3, #12
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	3320      	adds	r3, #32
 8015a26:	2260      	movs	r2, #96	; 0x60
 8015a28:	4619      	mov	r1, r3
 8015a2a:	f002 fe03 	bl	8018634 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	3320      	adds	r3, #32
 8015a32:	245f      	movs	r4, #95	; 0x5f
 8015a34:	461d      	mov	r5, r3
 8015a36:	2c00      	cmp	r4, #0
 8015a38:	db05      	blt.n	8015a46 <_ZN8STM32DMAC1Ev+0x46>
 8015a3a:	4628      	mov	r0, r5
 8015a3c:	f7ff ffd1 	bl	80159e2 <_ZN8touchgfx6BlitOpC1Ev>
 8015a40:	3520      	adds	r5, #32
 8015a42:	3c01      	subs	r4, #1
 8015a44:	e7f7      	b.n	8015a36 <_ZN8STM32DMAC1Ev+0x36>
{
}
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	4618      	mov	r0, r3
 8015a4a:	3708      	adds	r7, #8
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8015a50:	08030424 	.word	0x08030424

08015a54 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b082      	sub	sp, #8
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
 8015a5c:	4a09      	ldr	r2, [pc, #36]	; (8015a84 <_ZN8STM32DMAD1Ev+0x30>)
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8015a62:	205a      	movs	r0, #90	; 0x5a
 8015a64:	f7ff fede 	bl	8015824 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	330c      	adds	r3, #12
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f000 fac3 	bl	8015ff8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	4618      	mov	r0, r3
 8015a76:	f7ff ff41 	bl	80158fc <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	3708      	adds	r7, #8
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd80      	pop	{r7, pc}
 8015a84:	08030424 	.word	0x08030424

08015a88 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b082      	sub	sp, #8
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
}
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f7ff ffdf 	bl	8015a54 <_ZN8STM32DMAD1Ev>
 8015a96:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8015a9a:	6878      	ldr	r0, [r7, #4]
 8015a9c:	f017 fbf1 	bl	802d282 <_ZdlPvj>
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	3708      	adds	r7, #8
 8015aa6:	46bd      	mov	sp, r7
 8015aa8:	bd80      	pop	{r7, pc}
	...

08015aac <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b084      	sub	sp, #16
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	60fb      	str	r3, [r7, #12]
 8015ab8:	4b10      	ldr	r3, [pc, #64]	; (8015afc <_ZN8STM32DMA10initializeEv+0x50>)
 8015aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015abc:	4a0f      	ldr	r2, [pc, #60]	; (8015afc <_ZN8STM32DMA10initializeEv+0x50>)
 8015abe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8015ac4:	4b0d      	ldr	r3, [pc, #52]	; (8015afc <_ZN8STM32DMA10initializeEv+0x50>)
 8015ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ac8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015acc:	60fb      	str	r3, [r7, #12]
 8015ace:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8015ad0:	4b0a      	ldr	r3, [pc, #40]	; (8015afc <_ZN8STM32DMA10initializeEv+0x50>)
 8015ad2:	691b      	ldr	r3, [r3, #16]
 8015ad4:	4a09      	ldr	r2, [pc, #36]	; (8015afc <_ZN8STM32DMA10initializeEv+0x50>)
 8015ad6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015ada:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8015adc:	4b07      	ldr	r3, [pc, #28]	; (8015afc <_ZN8STM32DMA10initializeEv+0x50>)
 8015ade:	691b      	ldr	r3, [r3, #16]
 8015ae0:	4a06      	ldr	r2, [pc, #24]	; (8015afc <_ZN8STM32DMA10initializeEv+0x50>)
 8015ae2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8015ae6:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8015ae8:	4b05      	ldr	r3, [pc, #20]	; (8015b00 <_ZN8STM32DMA10initializeEv+0x54>)
 8015aea:	4a06      	ldr	r2, [pc, #24]	; (8015b04 <_ZN8STM32DMA10initializeEv+0x58>)
 8015aec:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8015aee:	205a      	movs	r0, #90	; 0x5a
 8015af0:	f7ff fe7a 	bl	80157e8 <__NVIC_EnableIRQ>
}
 8015af4:	bf00      	nop
 8015af6:	3710      	adds	r7, #16
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bd80      	pop	{r7, pc}
 8015afc:	40023800 	.word	0x40023800
 8015b00:	2000b014 	.word	0x2000b014
 8015b04:	080159c7 	.word	0x080159c7

08015b08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b084      	sub	sp, #16
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
 8015b10:	460b      	mov	r3, r1
 8015b12:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8015b14:	2300      	movs	r3, #0
 8015b16:	60fb      	str	r3, [r7, #12]

    switch (format)
 8015b18:	78fb      	ldrb	r3, [r7, #3]
 8015b1a:	2b0b      	cmp	r3, #11
 8015b1c:	d826      	bhi.n	8015b6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8015b1e:	a201      	add	r2, pc, #4	; (adr r2, 8015b24 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8015b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b24:	08015b61 	.word	0x08015b61
 8015b28:	08015b5b 	.word	0x08015b5b
 8015b2c:	08015b55 	.word	0x08015b55
 8015b30:	08015b6d 	.word	0x08015b6d
 8015b34:	08015b6d 	.word	0x08015b6d
 8015b38:	08015b6d 	.word	0x08015b6d
 8015b3c:	08015b6d 	.word	0x08015b6d
 8015b40:	08015b67 	.word	0x08015b67
 8015b44:	08015b67 	.word	0x08015b67
 8015b48:	08015b67 	.word	0x08015b67
 8015b4c:	08015b67 	.word	0x08015b67
 8015b50:	08015b67 	.word	0x08015b67
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8015b54:	2300      	movs	r3, #0
 8015b56:	60fb      	str	r3, [r7, #12]
        break;
 8015b58:	e00e      	b.n	8015b78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	60fb      	str	r3, [r7, #12]
        break;
 8015b5e:	e00b      	b.n	8015b78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8015b60:	2302      	movs	r3, #2
 8015b62:	60fb      	str	r3, [r7, #12]
        break;
 8015b64:	e008      	b.n	8015b78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8015b66:	2305      	movs	r3, #5
 8015b68:	60fb      	str	r3, [r7, #12]
        break;
 8015b6a:	e005      	b.n	8015b78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8015b6c:	4b05      	ldr	r3, [pc, #20]	; (8015b84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8015b6e:	4a06      	ldr	r2, [pc, #24]	; (8015b88 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8015b70:	2166      	movs	r1, #102	; 0x66
 8015b72:	4806      	ldr	r0, [pc, #24]	; (8015b8c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8015b74:	f018 f9a4 	bl	802dec0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8015b78:	68fb      	ldr	r3, [r7, #12]
}
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	3710      	adds	r7, #16
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}
 8015b82:	bf00      	nop
 8015b84:	0802fb10 	.word	0x0802fb10
 8015b88:	0802fb2c 	.word	0x0802fb2c
 8015b8c:	0802fb78 	.word	0x0802fb78

08015b90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b084      	sub	sp, #16
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
 8015b98:	460b      	mov	r3, r1
 8015b9a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8015ba0:	78fb      	ldrb	r3, [r7, #3]
 8015ba2:	2b0a      	cmp	r3, #10
 8015ba4:	d821      	bhi.n	8015bea <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8015ba6:	a201      	add	r2, pc, #4	; (adr r2, 8015bac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8015ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bac:	08015be5 	.word	0x08015be5
 8015bb0:	08015bdf 	.word	0x08015bdf
 8015bb4:	08015bd9 	.word	0x08015bd9
 8015bb8:	08015beb 	.word	0x08015beb
 8015bbc:	08015beb 	.word	0x08015beb
 8015bc0:	08015beb 	.word	0x08015beb
 8015bc4:	08015beb 	.word	0x08015beb
 8015bc8:	08015bdf 	.word	0x08015bdf
 8015bcc:	08015bdf 	.word	0x08015bdf
 8015bd0:	08015bdf 	.word	0x08015bdf
 8015bd4:	08015bdf 	.word	0x08015bdf
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8015bd8:	2300      	movs	r3, #0
 8015bda:	60fb      	str	r3, [r7, #12]
        break;
 8015bdc:	e00b      	b.n	8015bf6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8015bde:	2301      	movs	r3, #1
 8015be0:	60fb      	str	r3, [r7, #12]
        break;
 8015be2:	e008      	b.n	8015bf6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8015be4:	2302      	movs	r3, #2
 8015be6:	60fb      	str	r3, [r7, #12]
        break;
 8015be8:	e005      	b.n	8015bf6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8015bea:	4b05      	ldr	r3, [pc, #20]	; (8015c00 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8015bec:	4a05      	ldr	r2, [pc, #20]	; (8015c04 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8015bee:	2187      	movs	r1, #135	; 0x87
 8015bf0:	4805      	ldr	r0, [pc, #20]	; (8015c08 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8015bf2:	f018 f965 	bl	802dec0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8015bf6:	68fb      	ldr	r3, [r7, #12]
}
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	3710      	adds	r7, #16
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	bd80      	pop	{r7, pc}
 8015c00:	0802fb10 	.word	0x0802fb10
 8015c04:	0802fba4 	.word	0x0802fba4
 8015c08:	0802fb78 	.word	0x0802fb78

08015c0c <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8015c0c:	b480      	push	{r7}
 8015c0e:	b083      	sub	sp, #12
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8015c14:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8015c18:	4618      	mov	r0, r3
 8015c1a:	370c      	adds	r7, #12
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c22:	4770      	bx	lr

08015c24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8015c24:	b590      	push	{r4, r7, lr}
 8015c26:	b089      	sub	sp, #36	; 0x24
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
 8015c2c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8015c2e:	683b      	ldr	r3, [r7, #0]
 8015c30:	7f5b      	ldrb	r3, [r3, #29]
 8015c32:	4619      	mov	r1, r3
 8015c34:	6878      	ldr	r0, [r7, #4]
 8015c36:	f7ff ff67 	bl	8015b08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015c3a:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8015c3c:	683b      	ldr	r3, [r7, #0]
 8015c3e:	7f9b      	ldrb	r3, [r3, #30]
 8015c40:	4619      	mov	r1, r3
 8015c42:	6878      	ldr	r0, [r7, #4]
 8015c44:	f7ff ff60 	bl	8015b08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015c48:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	7f9b      	ldrb	r3, [r3, #30]
 8015c4e:	4619      	mov	r1, r3
 8015c50:	6878      	ldr	r0, [r7, #4]
 8015c52:	f7ff ff9d 	bl	8015b90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015c56:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015c58:	683b      	ldr	r3, [r7, #0]
 8015c5a:	8b5b      	ldrh	r3, [r3, #26]
 8015c5c:	461a      	mov	r2, r3
 8015c5e:	683b      	ldr	r3, [r7, #0]
 8015c60:	8a9b      	ldrh	r3, [r3, #20]
 8015c62:	1ad2      	subs	r2, r2, r3
 8015c64:	4b99      	ldr	r3, [pc, #612]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015c66:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015c68:	683b      	ldr	r3, [r7, #0]
 8015c6a:	8b5b      	ldrh	r3, [r3, #26]
 8015c6c:	461a      	mov	r2, r3
 8015c6e:	683b      	ldr	r3, [r7, #0]
 8015c70:	8a9b      	ldrh	r3, [r3, #20]
 8015c72:	1ad2      	subs	r2, r2, r3
 8015c74:	4b95      	ldr	r3, [pc, #596]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015c76:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8015c78:	683b      	ldr	r3, [r7, #0]
 8015c7a:	8b1b      	ldrh	r3, [r3, #24]
 8015c7c:	461a      	mov	r2, r3
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	8a9b      	ldrh	r3, [r3, #20]
 8015c82:	1ad2      	subs	r2, r2, r3
 8015c84:	4b91      	ldr	r3, [pc, #580]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015c86:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8015c88:	4a90      	ldr	r2, [pc, #576]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015c8a:	693b      	ldr	r3, [r7, #16]
 8015c8c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8015c8e:	683b      	ldr	r3, [r7, #0]
 8015c90:	8adb      	ldrh	r3, [r3, #22]
 8015c92:	461a      	mov	r2, r3
 8015c94:	683b      	ldr	r3, [r7, #0]
 8015c96:	8a9b      	ldrh	r3, [r3, #20]
 8015c98:	041b      	lsls	r3, r3, #16
 8015c9a:	431a      	orrs	r2, r3
 8015c9c:	4b8b      	ldr	r3, [pc, #556]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015c9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015ca0:	683b      	ldr	r3, [r7, #0]
 8015ca2:	691a      	ldr	r2, [r3, #16]
 8015ca4:	4b89      	ldr	r3, [pc, #548]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015ca6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	685a      	ldr	r2, [r3, #4]
 8015cac:	4b87      	ldr	r3, [pc, #540]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015cae:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8015cb0:	683b      	ldr	r3, [r7, #0]
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015cb8:	d037      	beq.n	8015d2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8015cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015cbe:	f200 80e8 	bhi.w	8015e92 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8015cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015cc6:	d014      	beq.n	8015cf2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8015cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015ccc:	f200 80e1 	bhi.w	8015e92 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8015cd0:	2b80      	cmp	r3, #128	; 0x80
 8015cd2:	d05b      	beq.n	8015d8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
 8015cd4:	2b80      	cmp	r3, #128	; 0x80
 8015cd6:	f200 80dc 	bhi.w	8015e92 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8015cda:	2b40      	cmp	r3, #64	; 0x40
 8015cdc:	f000 80c4 	beq.w	8015e68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8015ce0:	2b40      	cmp	r3, #64	; 0x40
 8015ce2:	f200 80d6 	bhi.w	8015e92 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8015ce6:	2b04      	cmp	r3, #4
 8015ce8:	d03b      	beq.n	8015d62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 8015cea:	2b20      	cmp	r3, #32
 8015cec:	f000 80bc 	beq.w	8015e68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8015cf0:	e0cf      	b.n	8015e92 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	7f1b      	ldrb	r3, [r3, #28]
 8015cf6:	061b      	lsls	r3, r3, #24
 8015cf8:	4a74      	ldr	r2, [pc, #464]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015cfe:	f043 030a 	orr.w	r3, r3, #10
 8015d02:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8015d04:	683b      	ldr	r3, [r7, #0]
 8015d06:	330c      	adds	r3, #12
 8015d08:	4c70      	ldr	r4, [pc, #448]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f7ff fdbc 	bl	8015888 <_ZNK8touchgfx9colortypecvmEv>
 8015d10:	4603      	mov	r3, r0
 8015d12:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015d14:	4a6d      	ldr	r2, [pc, #436]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d16:	697b      	ldr	r3, [r7, #20]
 8015d18:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015d1a:	683b      	ldr	r3, [r7, #0]
 8015d1c:	691a      	ldr	r2, [r3, #16]
 8015d1e:	4b6b      	ldr	r3, [pc, #428]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d20:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015d22:	4b6a      	ldr	r3, [pc, #424]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d24:	4a6a      	ldr	r2, [pc, #424]	; (8015ed0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015d26:	601a      	str	r2, [r3, #0]
        break;
 8015d28:	e0cc      	b.n	8015ec4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015d2a:	683b      	ldr	r3, [r7, #0]
 8015d2c:	7f1b      	ldrb	r3, [r3, #28]
 8015d2e:	061b      	lsls	r3, r3, #24
 8015d30:	4a66      	ldr	r2, [pc, #408]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015d36:	f043 0309 	orr.w	r3, r3, #9
 8015d3a:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8015d3c:	683b      	ldr	r3, [r7, #0]
 8015d3e:	330c      	adds	r3, #12
 8015d40:	4c62      	ldr	r4, [pc, #392]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d42:	4618      	mov	r0, r3
 8015d44:	f7ff fda0 	bl	8015888 <_ZNK8touchgfx9colortypecvmEv>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015d4c:	4a5f      	ldr	r2, [pc, #380]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015d52:	683b      	ldr	r3, [r7, #0]
 8015d54:	691a      	ldr	r2, [r3, #16]
 8015d56:	4b5d      	ldr	r3, [pc, #372]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d58:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015d5a:	4b5c      	ldr	r3, [pc, #368]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d5c:	4a5c      	ldr	r2, [pc, #368]	; (8015ed0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015d5e:	601a      	str	r2, [r3, #0]
        break;
 8015d60:	e0b0      	b.n	8015ec4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015d62:	683b      	ldr	r3, [r7, #0]
 8015d64:	7f1b      	ldrb	r3, [r3, #28]
 8015d66:	061b      	lsls	r3, r3, #24
 8015d68:	461a      	mov	r2, r3
 8015d6a:	69bb      	ldr	r3, [r7, #24]
 8015d6c:	4313      	orrs	r3, r2
 8015d6e:	4a57      	ldr	r2, [pc, #348]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015d74:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015d76:	4a55      	ldr	r2, [pc, #340]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d78:	697b      	ldr	r3, [r7, #20]
 8015d7a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015d7c:	683b      	ldr	r3, [r7, #0]
 8015d7e:	691a      	ldr	r2, [r3, #16]
 8015d80:	4b52      	ldr	r3, [pc, #328]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d82:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015d84:	4b51      	ldr	r3, [pc, #324]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d86:	4a52      	ldr	r2, [pc, #328]	; (8015ed0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015d88:	601a      	str	r2, [r3, #0]
        break;
 8015d8a:	e09b      	b.n	8015ec4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8015d8c:	2301      	movs	r3, #1
 8015d8e:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8015d90:	683b      	ldr	r3, [r7, #0]
 8015d92:	689b      	ldr	r3, [r3, #8]
 8015d94:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	1d1a      	adds	r2, r3, #4
 8015d9a:	4b4c      	ldr	r3, [pc, #304]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d9c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015d9e:	683b      	ldr	r3, [r7, #0]
 8015da0:	7f1b      	ldrb	r3, [r3, #28]
 8015da2:	061b      	lsls	r3, r3, #24
 8015da4:	461a      	mov	r2, r3
 8015da6:	69bb      	ldr	r3, [r7, #24]
 8015da8:	4313      	orrs	r3, r2
 8015daa:	4a48      	ldr	r2, [pc, #288]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015db0:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015db2:	4a46      	ldr	r2, [pc, #280]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015db4:	697b      	ldr	r3, [r7, #20]
 8015db6:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015db8:	683b      	ldr	r3, [r7, #0]
 8015dba:	691a      	ldr	r2, [r3, #16]
 8015dbc:	4b43      	ldr	r3, [pc, #268]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015dbe:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	881b      	ldrh	r3, [r3, #0]
 8015dc4:	b2db      	uxtb	r3, r3
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d002      	beq.n	8015dd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>
 8015dca:	2b01      	cmp	r3, #1
 8015dcc:	d00f      	beq.n	8015dee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8015dce:	e024      	b.n	8015e1a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8015dd0:	4b3e      	ldr	r3, [pc, #248]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015dd2:	69db      	ldr	r3, [r3, #28]
 8015dd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015dd8:	f023 0310 	bic.w	r3, r3, #16
 8015ddc:	68fa      	ldr	r2, [r7, #12]
 8015dde:	8852      	ldrh	r2, [r2, #2]
 8015de0:	3a01      	subs	r2, #1
 8015de2:	0212      	lsls	r2, r2, #8
 8015de4:	4611      	mov	r1, r2
 8015de6:	4a39      	ldr	r2, [pc, #228]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015de8:	430b      	orrs	r3, r1
 8015dea:	61d3      	str	r3, [r2, #28]
                break;
 8015dec:	e01c      	b.n	8015e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8015dee:	683b      	ldr	r3, [r7, #0]
 8015df0:	7f1b      	ldrb	r3, [r3, #28]
 8015df2:	2bff      	cmp	r3, #255	; 0xff
 8015df4:	d101      	bne.n	8015dfa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d6>
                {
                  blend = false;
 8015df6:	2300      	movs	r3, #0
 8015df8:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8015dfa:	4b34      	ldr	r3, [pc, #208]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015dfc:	69db      	ldr	r3, [r3, #28]
 8015dfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015e02:	f023 0310 	bic.w	r3, r3, #16
 8015e06:	68fa      	ldr	r2, [r7, #12]
 8015e08:	8852      	ldrh	r2, [r2, #2]
 8015e0a:	3a01      	subs	r2, #1
 8015e0c:	0212      	lsls	r2, r2, #8
 8015e0e:	4313      	orrs	r3, r2
 8015e10:	4a2e      	ldr	r2, [pc, #184]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e12:	f043 0310 	orr.w	r3, r3, #16
 8015e16:	61d3      	str	r3, [r2, #28]
                break;
 8015e18:	e006      	b.n	8015e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8015e1a:	4b2e      	ldr	r3, [pc, #184]	; (8015ed4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8015e1c:	4a2e      	ldr	r2, [pc, #184]	; (8015ed8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8015e1e:	f240 1111 	movw	r1, #273	; 0x111
 8015e22:	482e      	ldr	r0, [pc, #184]	; (8015edc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8015e24:	f018 f84c 	bl	802dec0 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8015e28:	4b28      	ldr	r3, [pc, #160]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e2a:	69db      	ldr	r3, [r3, #28]
 8015e2c:	4a27      	ldr	r2, [pc, #156]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e2e:	f043 0320 	orr.w	r3, r3, #32
 8015e32:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8015e34:	4b25      	ldr	r3, [pc, #148]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e36:	69db      	ldr	r3, [r3, #28]
 8015e38:	f003 0320 	and.w	r3, r3, #32
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	bf14      	ite	ne
 8015e40:	2301      	movne	r3, #1
 8015e42:	2300      	moveq	r3, #0
 8015e44:	b2db      	uxtb	r3, r3
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d000      	beq.n	8015e4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
 8015e4a:	e7f3      	b.n	8015e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8015e4c:	4b1f      	ldr	r3, [pc, #124]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e4e:	2210      	movs	r2, #16
 8015e50:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8015e52:	7ffb      	ldrb	r3, [r7, #31]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d003      	beq.n	8015e60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015e58:	4b1c      	ldr	r3, [pc, #112]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e5a:	4a1d      	ldr	r2, [pc, #116]	; (8015ed0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015e5c:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
      break;
 8015e5e:	e031      	b.n	8015ec4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8015e60:	4b1a      	ldr	r3, [pc, #104]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e62:	4a1f      	ldr	r2, [pc, #124]	; (8015ee0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8015e64:	601a      	str	r2, [r3, #0]
      break;
 8015e66:	e02d      	b.n	8015ec4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	7f1b      	ldrb	r3, [r3, #28]
 8015e6c:	061b      	lsls	r3, r3, #24
 8015e6e:	461a      	mov	r2, r3
 8015e70:	69bb      	ldr	r3, [r7, #24]
 8015e72:	4313      	orrs	r3, r2
 8015e74:	4a15      	ldr	r2, [pc, #84]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015e7a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015e7c:	4a13      	ldr	r2, [pc, #76]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e7e:	697b      	ldr	r3, [r7, #20]
 8015e80:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015e82:	683b      	ldr	r3, [r7, #0]
 8015e84:	691a      	ldr	r2, [r3, #16]
 8015e86:	4b11      	ldr	r3, [pc, #68]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e88:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015e8a:	4b10      	ldr	r3, [pc, #64]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e8c:	4a10      	ldr	r2, [pc, #64]	; (8015ed0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015e8e:	601a      	str	r2, [r3, #0]
        break;
 8015e90:	e018      	b.n	8015ec4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	7f1b      	ldrb	r3, [r3, #28]
 8015e96:	061b      	lsls	r3, r3, #24
 8015e98:	461a      	mov	r2, r3
 8015e9a:	69bb      	ldr	r3, [r7, #24]
 8015e9c:	4313      	orrs	r3, r2
 8015e9e:	4a0b      	ldr	r2, [pc, #44]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015ea4:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8015ea6:	683b      	ldr	r3, [r7, #0]
 8015ea8:	7f5a      	ldrb	r2, [r3, #29]
 8015eaa:	683b      	ldr	r3, [r7, #0]
 8015eac:	7f9b      	ldrb	r3, [r3, #30]
 8015eae:	429a      	cmp	r2, r3
 8015eb0:	d003      	beq.n	8015eba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8015eb2:	4b06      	ldr	r3, [pc, #24]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015eb4:	4a0a      	ldr	r2, [pc, #40]	; (8015ee0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8015eb6:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8015eb8:	e003      	b.n	8015ec2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8015eba:	4b04      	ldr	r3, [pc, #16]	; (8015ecc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015ebc:	f240 2201 	movw	r2, #513	; 0x201
 8015ec0:	601a      	str	r2, [r3, #0]
        break;
 8015ec2:	bf00      	nop
    }
}
 8015ec4:	bf00      	nop
 8015ec6:	3724      	adds	r7, #36	; 0x24
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	bd90      	pop	{r4, r7, pc}
 8015ecc:	4002b000 	.word	0x4002b000
 8015ed0:	00020201 	.word	0x00020201
 8015ed4:	0802fbf0 	.word	0x0802fbf0
 8015ed8:	0802fc0c 	.word	0x0802fc0c
 8015edc:	0802fb78 	.word	0x0802fb78
 8015ee0:	00010201 	.word	0x00010201

08015ee4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8015ee4:	b590      	push	{r4, r7, lr}
 8015ee6:	b085      	sub	sp, #20
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
 8015eec:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8015eee:	683b      	ldr	r3, [r7, #0]
 8015ef0:	7f9b      	ldrb	r3, [r3, #30]
 8015ef2:	4619      	mov	r1, r3
 8015ef4:	6878      	ldr	r0, [r7, #4]
 8015ef6:	f7ff fe4b 	bl	8015b90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015efa:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8015efc:	4a3b      	ldr	r2, [pc, #236]	; (8015fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8015f02:	683b      	ldr	r3, [r7, #0]
 8015f04:	8adb      	ldrh	r3, [r3, #22]
 8015f06:	461a      	mov	r2, r3
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	8a9b      	ldrh	r3, [r3, #20]
 8015f0c:	041b      	lsls	r3, r3, #16
 8015f0e:	431a      	orrs	r2, r3
 8015f10:	4b36      	ldr	r3, [pc, #216]	; (8015fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015f14:	683b      	ldr	r3, [r7, #0]
 8015f16:	691a      	ldr	r2, [r3, #16]
 8015f18:	4b34      	ldr	r3, [pc, #208]	; (8015fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015f1c:	683b      	ldr	r3, [r7, #0]
 8015f1e:	8b5b      	ldrh	r3, [r3, #26]
 8015f20:	461a      	mov	r2, r3
 8015f22:	683b      	ldr	r3, [r7, #0]
 8015f24:	8a9b      	ldrh	r3, [r3, #20]
 8015f26:	1ad2      	subs	r2, r2, r3
 8015f28:	4b30      	ldr	r3, [pc, #192]	; (8015fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f2a:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8015f2c:	683b      	ldr	r3, [r7, #0]
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	2b08      	cmp	r3, #8
 8015f32:	d12f      	bne.n	8015f94 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015f34:	683b      	ldr	r3, [r7, #0]
 8015f36:	8b5b      	ldrh	r3, [r3, #26]
 8015f38:	461a      	mov	r2, r3
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	8a9b      	ldrh	r3, [r3, #20]
 8015f3e:	1ad2      	subs	r2, r2, r3
 8015f40:	4b2a      	ldr	r3, [pc, #168]	; (8015fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f42:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015f44:	683b      	ldr	r3, [r7, #0]
 8015f46:	8b5b      	ldrh	r3, [r3, #26]
 8015f48:	461a      	mov	r2, r3
 8015f4a:	683b      	ldr	r3, [r7, #0]
 8015f4c:	8a9b      	ldrh	r3, [r3, #20]
 8015f4e:	1ad2      	subs	r2, r2, r3
 8015f50:	4b26      	ldr	r3, [pc, #152]	; (8015fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f52:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015f54:	4a25      	ldr	r2, [pc, #148]	; (8015fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8015f5a:	683b      	ldr	r3, [r7, #0]
 8015f5c:	7f1b      	ldrb	r3, [r3, #28]
 8015f5e:	061b      	lsls	r3, r3, #24
 8015f60:	4a22      	ldr	r2, [pc, #136]	; (8015fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015f66:	f043 0309 	orr.w	r3, r3, #9
 8015f6a:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8015f6c:	683b      	ldr	r3, [r7, #0]
 8015f6e:	330c      	adds	r3, #12
 8015f70:	4c1e      	ldr	r4, [pc, #120]	; (8015fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f72:	4618      	mov	r0, r3
 8015f74:	f7ff fc88 	bl	8015888 <_ZNK8touchgfx9colortypecvmEv>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015f7c:	683b      	ldr	r3, [r7, #0]
 8015f7e:	691a      	ldr	r2, [r3, #16]
 8015f80:	4b1a      	ldr	r3, [pc, #104]	; (8015fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f82:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015f84:	683b      	ldr	r3, [r7, #0]
 8015f86:	691a      	ldr	r2, [r3, #16]
 8015f88:	4b18      	ldr	r3, [pc, #96]	; (8015fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f8a:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8015f8c:	4b17      	ldr	r3, [pc, #92]	; (8015fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f8e:	4a18      	ldr	r2, [pc, #96]	; (8015ff0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8015f90:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8015f92:	e027      	b.n	8015fe4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015f94:	4a15      	ldr	r2, [pc, #84]	; (8015fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8015f9a:	4b14      	ldr	r3, [pc, #80]	; (8015fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f9c:	2200      	movs	r2, #0
 8015f9e:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8015fa0:	683b      	ldr	r3, [r7, #0]
 8015fa2:	330c      	adds	r3, #12
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	f7ff fc6f 	bl	8015888 <_ZNK8touchgfx9colortypecvmEv>
 8015faa:	4603      	mov	r3, r0
 8015fac:	0a1b      	lsrs	r3, r3, #8
 8015fae:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8015fb2:	683b      	ldr	r3, [r7, #0]
 8015fb4:	330c      	adds	r3, #12
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	f7ff fc66 	bl	8015888 <_ZNK8touchgfx9colortypecvmEv>
 8015fbc:	4603      	mov	r3, r0
 8015fbe:	095b      	lsrs	r3, r3, #5
 8015fc0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8015fc4:	431c      	orrs	r4, r3
 8015fc6:	683b      	ldr	r3, [r7, #0]
 8015fc8:	330c      	adds	r3, #12
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f7ff fc5c 	bl	8015888 <_ZNK8touchgfx9colortypecvmEv>
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	08db      	lsrs	r3, r3, #3
 8015fd4:	f003 031f 	and.w	r3, r3, #31
 8015fd8:	4a04      	ldr	r2, [pc, #16]	; (8015fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015fda:	4323      	orrs	r3, r4
 8015fdc:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8015fde:	4b03      	ldr	r3, [pc, #12]	; (8015fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015fe0:	4a04      	ldr	r2, [pc, #16]	; (8015ff4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8015fe2:	601a      	str	r2, [r3, #0]
}
 8015fe4:	bf00      	nop
 8015fe6:	3714      	adds	r7, #20
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	bd90      	pop	{r4, r7, pc}
 8015fec:	4002b000 	.word	0x4002b000
 8015ff0:	00020201 	.word	0x00020201
 8015ff4:	00030201 	.word	0x00030201

08015ff8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b082      	sub	sp, #8
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
 8016000:	4a05      	ldr	r2, [pc, #20]	; (8016018 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	601a      	str	r2, [r3, #0]
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	4618      	mov	r0, r3
 801600a:	f7ff fc49 	bl	80158a0 <_ZN8touchgfx9DMA_QueueD1Ev>
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	4618      	mov	r0, r3
 8016012:	3708      	adds	r7, #8
 8016014:	46bd      	mov	sp, r7
 8016016:	bd80      	pop	{r7, pc}
 8016018:	0803136c 	.word	0x0803136c

0801601c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801601c:	b580      	push	{r7, lr}
 801601e:	b082      	sub	sp, #8
 8016020:	af00      	add	r7, sp, #0
 8016022:	6078      	str	r0, [r7, #4]
 8016024:	6878      	ldr	r0, [r7, #4]
 8016026:	f7ff ffe7 	bl	8015ff8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801602a:	2114      	movs	r1, #20
 801602c:	6878      	ldr	r0, [r7, #4]
 801602e:	f017 f928 	bl	802d282 <_ZdlPvj>
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	4618      	mov	r0, r3
 8016036:	3708      	adds	r7, #8
 8016038:	46bd      	mov	sp, r7
 801603a:	bd80      	pop	{r7, pc}

0801603c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 801603c:	b480      	push	{r7}
 801603e:	b083      	sub	sp, #12
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
        texts = t;
 8016044:	4a04      	ldr	r2, [pc, #16]	; (8016058 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	6013      	str	r3, [r2, #0]
    }
 801604a:	bf00      	nop
 801604c:	370c      	adds	r7, #12
 801604e:	46bd      	mov	sp, r7
 8016050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016054:	4770      	bx	lr
 8016056:	bf00      	nop
 8016058:	200097d8 	.word	0x200097d8

0801605c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 801605c:	b480      	push	{r7}
 801605e:	b085      	sub	sp, #20
 8016060:	af00      	add	r7, sp, #0
 8016062:	60f8      	str	r0, [r7, #12]
 8016064:	60b9      	str	r1, [r7, #8]
 8016066:	607a      	str	r2, [r7, #4]
 8016068:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 801606a:	4a0b      	ldr	r2, [pc, #44]	; (8016098 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	601a      	str	r2, [r3, #0]
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	68ba      	ldr	r2, [r7, #8]
 8016074:	605a      	str	r2, [r3, #4]
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	687a      	ldr	r2, [r7, #4]
 801607a:	609a      	str	r2, [r3, #8]
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	683a      	ldr	r2, [r7, #0]
 8016080:	60da      	str	r2, [r3, #12]
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	69ba      	ldr	r2, [r7, #24]
 8016086:	611a      	str	r2, [r3, #16]
    {
    }
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	4618      	mov	r0, r3
 801608c:	3714      	adds	r7, #20
 801608e:	46bd      	mov	sp, r7
 8016090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016094:	4770      	bx	lr
 8016096:	bf00      	nop
 8016098:	0803055c 	.word	0x0803055c

0801609c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 801609c:	b480      	push	{r7}
 801609e:	b083      	sub	sp, #12
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	6078      	str	r0, [r7, #4]
    {
 80160a4:	4a04      	ldr	r2, [pc, #16]	; (80160b8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	601a      	str	r2, [r3, #0]
    }
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	4618      	mov	r0, r3
 80160ae:	370c      	adds	r7, #12
 80160b0:	46bd      	mov	sp, r7
 80160b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b6:	4770      	bx	lr
 80160b8:	0803055c 	.word	0x0803055c

080160bc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80160bc:	b580      	push	{r7, lr}
 80160be:	b082      	sub	sp, #8
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
    }
 80160c4:	6878      	ldr	r0, [r7, #4]
 80160c6:	f7ff ffe9 	bl	801609c <_ZN8touchgfx7MVPHeapD1Ev>
 80160ca:	2114      	movs	r1, #20
 80160cc:	6878      	ldr	r0, [r7, #4]
 80160ce:	f017 f8d8 	bl	802d282 <_ZdlPvj>
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	4618      	mov	r0, r3
 80160d6:	3708      	adds	r7, #8
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}

080160dc <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80160dc:	b480      	push	{r7}
 80160de:	b083      	sub	sp, #12
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	6078      	str	r0, [r7, #4]
    {
 80160e4:	4a04      	ldr	r2, [pc, #16]	; (80160f8 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	601a      	str	r2, [r3, #0]
    }
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	4618      	mov	r0, r3
 80160ee:	370c      	adds	r7, #12
 80160f0:	46bd      	mov	sp, r7
 80160f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f6:	4770      	bx	lr
 80160f8:	08031bf0 	.word	0x08031bf0

080160fc <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80160fc:	b580      	push	{r7, lr}
 80160fe:	b082      	sub	sp, #8
 8016100:	af00      	add	r7, sp, #0
 8016102:	6078      	str	r0, [r7, #4]
    }
 8016104:	6878      	ldr	r0, [r7, #4]
 8016106:	f7ff ffe9 	bl	80160dc <_ZN8touchgfx3LCDD1Ev>
 801610a:	2108      	movs	r1, #8
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	f017 f8b8 	bl	802d282 <_ZdlPvj>
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	4618      	mov	r0, r3
 8016116:	3708      	adds	r7, #8
 8016118:	46bd      	mov	sp, r7
 801611a:	bd80      	pop	{r7, pc}

0801611c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 801611c:	b480      	push	{r7}
 801611e:	b083      	sub	sp, #12
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	2200      	movs	r2, #0
 8016128:	801a      	strh	r2, [r3, #0]
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	2200      	movs	r2, #0
 801612e:	805a      	strh	r2, [r3, #2]
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	2200      	movs	r2, #0
 8016134:	809a      	strh	r2, [r3, #4]
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	2200      	movs	r2, #0
 801613a:	80da      	strh	r2, [r3, #6]
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	2200      	movs	r2, #0
 8016140:	811a      	strh	r2, [r3, #8]
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	2200      	movs	r2, #0
 8016146:	815a      	strh	r2, [r3, #10]
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	2200      	movs	r2, #0
 801614c:	819a      	strh	r2, [r3, #12]
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	2200      	movs	r2, #0
 8016152:	739a      	strb	r2, [r3, #14]
        {
        }
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	4618      	mov	r0, r3
 8016158:	370c      	adds	r7, #12
 801615a:	46bd      	mov	sp, r7
 801615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016160:	4770      	bx	lr

08016162 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8016162:	b580      	push	{r7, lr}
 8016164:	b082      	sub	sp, #8
 8016166:	af00      	add	r7, sp, #0
 8016168:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	4618      	mov	r0, r3
 801616e:	f7ff ffd5 	bl	801611c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	2200      	movs	r2, #0
 8016176:	611a      	str	r2, [r3, #16]
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	2200      	movs	r2, #0
 801617c:	829a      	strh	r2, [r3, #20]
    {
    }
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	4618      	mov	r0, r3
 8016182:	3708      	adds	r7, #8
 8016184:	46bd      	mov	sp, r7
 8016186:	bd80      	pop	{r7, pc}

08016188 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8016188:	b580      	push	{r7, lr}
 801618a:	b084      	sub	sp, #16
 801618c:	af00      	add	r7, sp, #0
 801618e:	60f8      	str	r0, [r7, #12]
 8016190:	60b9      	str	r1, [r7, #8]
 8016192:	607a      	str	r2, [r7, #4]
 8016194:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8016196:	4a55      	ldr	r2, [pc, #340]	; (80162ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	601a      	str	r2, [r3, #0]
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	68ba      	ldr	r2, [r7, #8]
 80161a0:	605a      	str	r2, [r3, #4]
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	687a      	ldr	r2, [r7, #4]
 80161a6:	609a      	str	r2, [r3, #8]
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	683a      	ldr	r2, [r7, #0]
 80161ac:	60da      	str	r2, [r3, #12]
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	2200      	movs	r2, #0
 80161b2:	611a      	str	r2, [r3, #16]
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	2200      	movs	r2, #0
 80161b8:	615a      	str	r2, [r3, #20]
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	2200      	movs	r2, #0
 80161be:	619a      	str	r2, [r3, #24]
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	331c      	adds	r3, #28
 80161c4:	4618      	mov	r0, r3
 80161c6:	f7ff ffcc 	bl	8016162 <_ZN8touchgfx8GesturesC1Ev>
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	2200      	movs	r2, #0
 80161ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	2200      	movs	r2, #0
 80161d6:	639a      	str	r2, [r3, #56]	; 0x38
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	2200      	movs	r2, #0
 80161dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	2200      	movs	r2, #0
 80161e2:	641a      	str	r2, [r3, #64]	; 0x40
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	2200      	movs	r2, #0
 80161e8:	645a      	str	r2, [r3, #68]	; 0x44
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	2200      	movs	r2, #0
 80161ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	2201      	movs	r2, #1
 80161f6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	2200      	movs	r2, #0
 80161fe:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	2200      	movs	r2, #0
 8016206:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	2200      	movs	r2, #0
 801620e:	64da      	str	r2, [r3, #76]	; 0x4c
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	3350      	adds	r3, #80	; 0x50
 8016214:	4618      	mov	r0, r3
 8016216:	f7fa fb72 	bl	80108fe <_ZN8touchgfx4RectC1Ev>
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	2200      	movs	r2, #0
 801621e:	659a      	str	r2, [r3, #88]	; 0x58
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	2200      	movs	r2, #0
 8016224:	65da      	str	r2, [r3, #92]	; 0x5c
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	2200      	movs	r2, #0
 801622a:	661a      	str	r2, [r3, #96]	; 0x60
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	2201      	movs	r2, #1
 8016230:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	2200      	movs	r2, #0
 8016238:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	2200      	movs	r2, #0
 8016240:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	2201      	movs	r2, #1
 8016248:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	2200      	movs	r2, #0
 8016250:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	2200      	movs	r2, #0
 8016258:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	2200      	movs	r2, #0
 8016260:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	2200      	movs	r2, #0
 8016268:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	2200      	movs	r2, #0
 8016270:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	2200      	movs	r2, #0
 8016278:	671a      	str	r2, [r3, #112]	; 0x70
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	2200      	movs	r2, #0
 801627e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	2200      	movs	r2, #0
 8016286:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	2200      	movs	r2, #0
 801628e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	2201      	movs	r2, #1
 8016296:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	2201      	movs	r2, #1
 801629e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80162a2:	4a13      	ldr	r2, [pc, #76]	; (80162f0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80162a8:	4a12      	ldr	r2, [pc, #72]	; (80162f4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80162aa:	8b3b      	ldrh	r3, [r7, #24]
 80162ac:	8013      	strh	r3, [r2, #0]
 80162ae:	4b11      	ldr	r3, [pc, #68]	; (80162f4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80162b0:	881a      	ldrh	r2, [r3, #0]
 80162b2:	4b11      	ldr	r3, [pc, #68]	; (80162f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80162b4:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80162b6:	4a11      	ldr	r2, [pc, #68]	; (80162fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80162b8:	8bbb      	ldrh	r3, [r7, #28]
 80162ba:	8013      	strh	r3, [r2, #0]
 80162bc:	4b0f      	ldr	r3, [pc, #60]	; (80162fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80162be:	881a      	ldrh	r2, [r3, #0]
 80162c0:	4b0f      	ldr	r3, [pc, #60]	; (8016300 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80162c2:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 80162c4:	4b0f      	ldr	r3, [pc, #60]	; (8016304 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 80162c6:	2200      	movs	r2, #0
 80162c8:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80162ca:	8b3a      	ldrh	r2, [r7, #24]
 80162cc:	8bbb      	ldrh	r3, [r7, #28]
 80162ce:	429a      	cmp	r2, r3
 80162d0:	bf34      	ite	cc
 80162d2:	2301      	movcc	r3, #1
 80162d4:	2300      	movcs	r3, #0
 80162d6:	b2db      	uxtb	r3, r3
 80162d8:	461a      	mov	r2, r3
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	4618      	mov	r0, r3
 80162e4:	3710      	adds	r7, #16
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}
 80162ea:	bf00      	nop
 80162ec:	08030dc4 	.word	0x08030dc4
 80162f0:	2000977c 	.word	0x2000977c
 80162f4:	20009770 	.word	0x20009770
 80162f8:	20009776 	.word	0x20009776
 80162fc:	20009772 	.word	0x20009772
 8016300:	20009778 	.word	0x20009778
 8016304:	20009774 	.word	0x20009774

08016308 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8016308:	b580      	push	{r7, lr}
 801630a:	b082      	sub	sp, #8
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
 8016310:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8016312:	683b      	ldr	r3, [r7, #0]
 8016314:	4618      	mov	r0, r3
 8016316:	f7fa f853 	bl	80103c0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 801631a:	bf00      	nop
 801631c:	3708      	adds	r7, #8
 801631e:	46bd      	mov	sp, r7
 8016320:	bd80      	pop	{r7, pc}
	...

08016324 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8016324:	b580      	push	{r7, lr}
 8016326:	b086      	sub	sp, #24
 8016328:	af02      	add	r7, sp, #8
 801632a:	60f8      	str	r0, [r7, #12]
 801632c:	60b9      	str	r1, [r7, #8]
 801632e:	607a      	str	r2, [r7, #4]
 8016330:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8016332:	68f8      	ldr	r0, [r7, #12]
 8016334:	69bb      	ldr	r3, [r7, #24]
 8016336:	9300      	str	r3, [sp, #0]
 8016338:	683b      	ldr	r3, [r7, #0]
 801633a:	687a      	ldr	r2, [r7, #4]
 801633c:	68b9      	ldr	r1, [r7, #8]
 801633e:	f7ff fe8d 	bl	801605c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8016342:	4a04      	ldr	r2, [pc, #16]	; (8016354 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	601a      	str	r2, [r3, #0]
    {

    }
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	4618      	mov	r0, r3
 801634c:	3710      	adds	r7, #16
 801634e:	46bd      	mov	sp, r7
 8016350:	bd80      	pop	{r7, pc}
 8016352:	bf00      	nop
 8016354:	08030548 	.word	0x08030548

08016358 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8016358:	b580      	push	{r7, lr}
 801635a:	af00      	add	r7, sp, #0
 801635c:	4801      	ldr	r0, [pc, #4]	; (8016364 <__tcf_0+0xc>)
 801635e:	f000 f95f 	bl	8016620 <_ZN12FrontendHeapD1Ev>
 8016362:	bd80      	pop	{r7, pc}
 8016364:	20007b48 	.word	0x20007b48

08016368 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8016368:	b580      	push	{r7, lr}
 801636a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 801636c:	4b12      	ldr	r3, [pc, #72]	; (80163b8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801636e:	781b      	ldrb	r3, [r3, #0]
 8016370:	f3bf 8f5b 	dmb	ish
 8016374:	b2db      	uxtb	r3, r3
 8016376:	f003 0301 	and.w	r3, r3, #1
 801637a:	2b00      	cmp	r3, #0
 801637c:	bf0c      	ite	eq
 801637e:	2301      	moveq	r3, #1
 8016380:	2300      	movne	r3, #0
 8016382:	b2db      	uxtb	r3, r3
 8016384:	2b00      	cmp	r3, #0
 8016386:	d013      	beq.n	80163b0 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8016388:	480b      	ldr	r0, [pc, #44]	; (80163b8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801638a:	f016 ff7c 	bl	802d286 <__cxa_guard_acquire>
 801638e:	4603      	mov	r3, r0
 8016390:	2b00      	cmp	r3, #0
 8016392:	bf14      	ite	ne
 8016394:	2301      	movne	r3, #1
 8016396:	2300      	moveq	r3, #0
 8016398:	b2db      	uxtb	r3, r3
 801639a:	2b00      	cmp	r3, #0
 801639c:	d008      	beq.n	80163b0 <_ZN12FrontendHeap11getInstanceEv+0x48>
 801639e:	4807      	ldr	r0, [pc, #28]	; (80163bc <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80163a0:	f000 f868 	bl	8016474 <_ZN12FrontendHeapC1Ev>
 80163a4:	4804      	ldr	r0, [pc, #16]	; (80163b8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80163a6:	f016 ff7a 	bl	802d29e <__cxa_guard_release>
 80163aa:	4805      	ldr	r0, [pc, #20]	; (80163c0 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 80163ac:	f017 fda6 	bl	802defc <atexit>
        return instance;
 80163b0:	4b02      	ldr	r3, [pc, #8]	; (80163bc <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 80163b2:	4618      	mov	r0, r3
 80163b4:	bd80      	pop	{r7, pc}
 80163b6:	bf00      	nop
 80163b8:	20008a4c 	.word	0x20008a4c
 80163bc:	20007b48 	.word	0x20007b48
 80163c0:	08016359 	.word	0x08016359

080163c4 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b082      	sub	sp, #8
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	4a05      	ldr	r2, [pc, #20]	; (80163e4 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	601a      	str	r2, [r3, #0]
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	4618      	mov	r0, r3
 80163d6:	f7ff fe61 	bl	801609c <_ZN8touchgfx7MVPHeapD1Ev>
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	4618      	mov	r0, r3
 80163de:	3708      	adds	r7, #8
 80163e0:	46bd      	mov	sp, r7
 80163e2:	bd80      	pop	{r7, pc}
 80163e4:	08030548 	.word	0x08030548

080163e8 <_ZN16FrontendHeapBaseD0Ev>:
 80163e8:	b580      	push	{r7, lr}
 80163ea:	b082      	sub	sp, #8
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	6078      	str	r0, [r7, #4]
 80163f0:	6878      	ldr	r0, [r7, #4]
 80163f2:	f7ff ffe7 	bl	80163c4 <_ZN16FrontendHeapBaseD1Ev>
 80163f6:	2114      	movs	r1, #20
 80163f8:	6878      	ldr	r0, [r7, #4]
 80163fa:	f016 ff42 	bl	802d282 <_ZdlPvj>
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	4618      	mov	r0, r3
 8016402:	3708      	adds	r7, #8
 8016404:	46bd      	mov	sp, r7
 8016406:	bd80      	pop	{r7, pc}

08016408 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8016408:	b580      	push	{r7, lr}
 801640a:	b082      	sub	sp, #8
 801640c:	af00      	add	r7, sp, #0
 801640e:	6078      	str	r0, [r7, #4]
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	4618      	mov	r0, r3
 8016414:	f000 fd04 	bl	8016e20 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016418:	4a03      	ldr	r2, [pc, #12]	; (8016428 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	601a      	str	r2, [r3, #0]
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	4618      	mov	r0, r3
 8016422:	3708      	adds	r7, #8
 8016424:	46bd      	mov	sp, r7
 8016426:	bd80      	pop	{r7, pc}
 8016428:	08030514 	.word	0x08030514

0801642c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 801642c:	b580      	push	{r7, lr}
 801642e:	b082      	sub	sp, #8
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	4618      	mov	r0, r3
 8016438:	f000 fcf2 	bl	8016e20 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801643c:	4a03      	ldr	r2, [pc, #12]	; (801644c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	601a      	str	r2, [r3, #0]
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	4618      	mov	r0, r3
 8016446:	3708      	adds	r7, #8
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}
 801644c:	080304e0 	.word	0x080304e0

08016450 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8016450:	b580      	push	{r7, lr}
 8016452:	b082      	sub	sp, #8
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	4618      	mov	r0, r3
 801645c:	f000 fce0 	bl	8016e20 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016460:	4a03      	ldr	r2, [pc, #12]	; (8016470 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	601a      	str	r2, [r3, #0]
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	4618      	mov	r0, r3
 801646a:	3708      	adds	r7, #8
 801646c:	46bd      	mov	sp, r7
 801646e:	bd80      	pop	{r7, pc}
 8016470:	080304ac 	.word	0x080304ac

08016474 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8016474:	b590      	push	{r4, r7, lr}
 8016476:	b085      	sub	sp, #20
 8016478:	af02      	add	r7, sp, #8
 801647a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 801647c:	6878      	ldr	r0, [r7, #4]
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	f103 0114 	add.w	r1, r3, #20
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	f603 5494 	addw	r4, r3, #3476	; 0xd94
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	f603 53a8 	addw	r3, r3, #3496	; 0xda8
                     app(model, *this)
 8016496:	9300      	str	r3, [sp, #0]
 8016498:	4623      	mov	r3, r4
 801649a:	f7ff ff43 	bl	8016324 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801649e:	4a18      	ldr	r2, [pc, #96]	; (8016500 <_ZN12FrontendHeapC1Ev+0x8c>)
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	601a      	str	r2, [r3, #0]
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	3314      	adds	r3, #20
 80164a8:	4618      	mov	r0, r3
 80164aa:	f7ff ffad 	bl	8016408 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	332c      	adds	r3, #44	; 0x2c
 80164b2:	4618      	mov	r0, r3
 80164b4:	f7ff ffba 	bl	801642c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 80164be:	4618      	mov	r0, r3
 80164c0:	f7ff ffc6 	bl	8016450 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	f603 50a8 	addw	r0, r3, #3496	; 0xda8
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 80164d0:	687a      	ldr	r2, [r7, #4]
 80164d2:	4619      	mov	r1, r3
 80164d4:	f7fe f8ac 	bl	8014630 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 80164de:	4618      	mov	r0, r3
 80164e0:	f7fe f8bc 	bl	801465c <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 80164e4:	687a      	ldr	r2, [r7, #4]
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	f603 53a8 	addw	r3, r3, #3496	; 0xda8
 80164ec:	4619      	mov	r1, r3
 80164ee:	4610      	mov	r0, r2
 80164f0:	f7ff ff0a 	bl	8016308 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	4618      	mov	r0, r3
 80164f8:	370c      	adds	r7, #12
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd90      	pop	{r4, r7, pc}
 80164fe:	bf00      	nop
 8016500:	08030498 	.word	0x08030498

08016504 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8016504:	b580      	push	{r7, lr}
 8016506:	b086      	sub	sp, #24
 8016508:	af02      	add	r7, sp, #8
 801650a:	60f8      	str	r0, [r7, #12]
 801650c:	60b9      	str	r1, [r7, #8]
 801650e:	607a      	str	r2, [r7, #4]
 8016510:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8016512:	68f8      	ldr	r0, [r7, #12]
 8016514:	8bbb      	ldrh	r3, [r7, #28]
 8016516:	9301      	str	r3, [sp, #4]
 8016518:	8b3b      	ldrh	r3, [r7, #24]
 801651a:	9300      	str	r3, [sp, #0]
 801651c:	683b      	ldr	r3, [r7, #0]
 801651e:	687a      	ldr	r2, [r7, #4]
 8016520:	68b9      	ldr	r1, [r7, #8]
 8016522:	f7ff fe31 	bl	8016188 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8016526:	4a04      	ldr	r2, [pc, #16]	; (8016538 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	601a      	str	r2, [r3, #0]
    }
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	4618      	mov	r0, r3
 8016530:	3710      	adds	r7, #16
 8016532:	46bd      	mov	sp, r7
 8016534:	bd80      	pop	{r7, pc}
 8016536:	bf00      	nop
 8016538:	0803056c 	.word	0x0803056c

0801653c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 801653c:	b580      	push	{r7, lr}
 801653e:	b086      	sub	sp, #24
 8016540:	af02      	add	r7, sp, #8
 8016542:	60f8      	str	r0, [r7, #12]
 8016544:	60b9      	str	r1, [r7, #8]
 8016546:	607a      	str	r2, [r7, #4]
 8016548:	603b      	str	r3, [r7, #0]
 801654a:	68f8      	ldr	r0, [r7, #12]
 801654c:	8bbb      	ldrh	r3, [r7, #28]
 801654e:	9301      	str	r3, [sp, #4]
 8016550:	8b3b      	ldrh	r3, [r7, #24]
 8016552:	9300      	str	r3, [sp, #0]
 8016554:	683b      	ldr	r3, [r7, #0]
 8016556:	687a      	ldr	r2, [r7, #4]
 8016558:	68b9      	ldr	r1, [r7, #8]
 801655a:	f7ff ffd3 	bl	8016504 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801655e:	4a04      	ldr	r2, [pc, #16]	; (8016570 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	601a      	str	r2, [r3, #0]
    }
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	4618      	mov	r0, r3
 8016568:	3710      	adds	r7, #16
 801656a:	46bd      	mov	sp, r7
 801656c:	bd80      	pop	{r7, pc}
 801656e:	bf00      	nop
 8016570:	08030354 	.word	0x08030354

08016574 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8016574:	b480      	push	{r7}
 8016576:	b083      	sub	sp, #12
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
 801657c:	4a04      	ldr	r2, [pc, #16]	; (8016590 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	601a      	str	r2, [r3, #0]
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	4618      	mov	r0, r3
 8016586:	370c      	adds	r7, #12
 8016588:	46bd      	mov	sp, r7
 801658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801658e:	4770      	bx	lr
 8016590:	0803033c 	.word	0x0803033c

08016594 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8016594:	b580      	push	{r7, lr}
 8016596:	b082      	sub	sp, #8
 8016598:	af00      	add	r7, sp, #0
 801659a:	6078      	str	r0, [r7, #4]
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	4618      	mov	r0, r3
 80165a0:	f7ff ffe8 	bl	8016574 <_ZN8touchgfx15TouchControllerC1Ev>
 80165a4:	4a03      	ldr	r2, [pc, #12]	; (80165b4 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	601a      	str	r2, [r3, #0]
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	4618      	mov	r0, r3
 80165ae:	3708      	adds	r7, #8
 80165b0:	46bd      	mov	sp, r7
 80165b2:	bd80      	pop	{r7, pc}
 80165b4:	08030324 	.word	0x08030324

080165b8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 1024, 600);

void touchgfx_init()
{
 80165b8:	b590      	push	{r4, r7, lr}
 80165ba:	b085      	sub	sp, #20
 80165bc:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80165be:	f7fd fe0b 	bl	80141d8 <_ZN14BitmapDatabase11getInstanceEv>
 80165c2:	4604      	mov	r4, r0
 80165c4:	f7fd fe12 	bl	80141ec <_ZN14BitmapDatabase15getInstanceSizeEv>
 80165c8:	4603      	mov	r3, r0
 80165ca:	4619      	mov	r1, r3
 80165cc:	2300      	movs	r3, #0
 80165ce:	9300      	str	r3, [sp, #0]
 80165d0:	2300      	movs	r3, #0
 80165d2:	2200      	movs	r2, #0
 80165d4:	4620      	mov	r0, r4
 80165d6:	f009 f947 	bl	801f868 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80165da:	4809      	ldr	r0, [pc, #36]	; (8016600 <touchgfx_init+0x48>)
 80165dc:	f7ff fd2e 	bl	801603c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80165e0:	2000      	movs	r0, #0
 80165e2:	f7fd ff47 	bl	8014474 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80165e6:	4807      	ldr	r0, [pc, #28]	; (8016604 <touchgfx_init+0x4c>)
 80165e8:	f009 f880 	bl	801f6ec <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80165ec:	f7ff febc 	bl	8016368 <_ZN12FrontendHeap11getInstanceEv>
 80165f0:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80165f2:	4805      	ldr	r0, [pc, #20]	; (8016608 <touchgfx_init+0x50>)
 80165f4:	f7fe ffd0 	bl	8015598 <_ZN11TouchGFXHAL10initializeEv>
}
 80165f8:	bf00      	nop
 80165fa:	370c      	adds	r7, #12
 80165fc:	46bd      	mov	sp, r7
 80165fe:	bd90      	pop	{r4, r7, pc}
 8016600:	200096ec 	.word	0x200096ec
 8016604:	2000001c 	.word	0x2000001c
 8016608:	200096f0 	.word	0x200096f0

0801660c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 801660c:	b580      	push	{r7, lr}
 801660e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8016610:	4802      	ldr	r0, [pc, #8]	; (801661c <touchgfx_taskEntry+0x10>)
 8016612:	f001 f8e0 	bl	80177d6 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8016616:	bf00      	nop
 8016618:	bd80      	pop	{r7, pc}
 801661a:	bf00      	nop
 801661c:	200096f0 	.word	0x200096f0

08016620 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8016620:	b580      	push	{r7, lr}
 8016622:	b082      	sub	sp, #8
 8016624:	af00      	add	r7, sp, #0
 8016626:	6078      	str	r0, [r7, #4]
 8016628:	4a10      	ldr	r2, [pc, #64]	; (801666c <_ZN12FrontendHeapD1Ev+0x4c>)
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	601a      	str	r2, [r3, #0]
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	f603 53a8 	addw	r3, r3, #3496	; 0xda8
 8016634:	4618      	mov	r0, r3
 8016636:	f7fd ffc5 	bl	80145c4 <_ZN19FrontendApplicationD1Ev>
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 8016640:	4618      	mov	r0, r3
 8016642:	f000 f827 	bl	8016694 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	332c      	adds	r3, #44	; 0x2c
 801664a:	4618      	mov	r0, r3
 801664c:	f000 f844 	bl	80166d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	3314      	adds	r3, #20
 8016654:	4618      	mov	r0, r3
 8016656:	f000 f863 	bl	8016720 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	4618      	mov	r0, r3
 801665e:	f7ff feb1 	bl	80163c4 <_ZN16FrontendHeapBaseD1Ev>
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	4618      	mov	r0, r3
 8016666:	3708      	adds	r7, #8
 8016668:	46bd      	mov	sp, r7
 801666a:	bd80      	pop	{r7, pc}
 801666c:	08030498 	.word	0x08030498

08016670 <_ZN12FrontendHeapD0Ev>:
 8016670:	b580      	push	{r7, lr}
 8016672:	b082      	sub	sp, #8
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
 8016678:	6878      	ldr	r0, [r7, #4]
 801667a:	f7ff ffd1 	bl	8016620 <_ZN12FrontendHeapD1Ev>
 801667e:	f640 7104 	movw	r1, #3844	; 0xf04
 8016682:	6878      	ldr	r0, [r7, #4]
 8016684:	f016 fdfd 	bl	802d282 <_ZdlPvj>
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	4618      	mov	r0, r3
 801668c:	3708      	adds	r7, #8
 801668e:	46bd      	mov	sp, r7
 8016690:	bd80      	pop	{r7, pc}
	...

08016694 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8016694:	b580      	push	{r7, lr}
 8016696:	b082      	sub	sp, #8
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
 801669c:	4a05      	ldr	r2, [pc, #20]	; (80166b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	601a      	str	r2, [r3, #0]
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	4618      	mov	r0, r3
 80166a6:	f000 fbb9 	bl	8016e1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	4618      	mov	r0, r3
 80166ae:	3708      	adds	r7, #8
 80166b0:	46bd      	mov	sp, r7
 80166b2:	bd80      	pop	{r7, pc}
 80166b4:	080304ac 	.word	0x080304ac

080166b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b082      	sub	sp, #8
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
 80166c0:	6878      	ldr	r0, [r7, #4]
 80166c2:	f7ff ffe7 	bl	8016694 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80166c6:	2114      	movs	r1, #20
 80166c8:	6878      	ldr	r0, [r7, #4]
 80166ca:	f016 fdda 	bl	802d282 <_ZdlPvj>
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	4618      	mov	r0, r3
 80166d2:	3708      	adds	r7, #8
 80166d4:	46bd      	mov	sp, r7
 80166d6:	bd80      	pop	{r7, pc}

080166d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80166d8:	b580      	push	{r7, lr}
 80166da:	b082      	sub	sp, #8
 80166dc:	af00      	add	r7, sp, #0
 80166de:	6078      	str	r0, [r7, #4]
 80166e0:	4a05      	ldr	r2, [pc, #20]	; (80166f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	601a      	str	r2, [r3, #0]
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	4618      	mov	r0, r3
 80166ea:	f000 fb97 	bl	8016e1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	4618      	mov	r0, r3
 80166f2:	3708      	adds	r7, #8
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd80      	pop	{r7, pc}
 80166f8:	080304e0 	.word	0x080304e0

080166fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b082      	sub	sp, #8
 8016700:	af00      	add	r7, sp, #0
 8016702:	6078      	str	r0, [r7, #4]
 8016704:	6878      	ldr	r0, [r7, #4]
 8016706:	f7ff ffe7 	bl	80166d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801670a:	f640 5168 	movw	r1, #3432	; 0xd68
 801670e:	6878      	ldr	r0, [r7, #4]
 8016710:	f016 fdb7 	bl	802d282 <_ZdlPvj>
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	4618      	mov	r0, r3
 8016718:	3708      	adds	r7, #8
 801671a:	46bd      	mov	sp, r7
 801671c:	bd80      	pop	{r7, pc}
	...

08016720 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8016720:	b580      	push	{r7, lr}
 8016722:	b082      	sub	sp, #8
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
 8016728:	4a05      	ldr	r2, [pc, #20]	; (8016740 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	601a      	str	r2, [r3, #0]
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	4618      	mov	r0, r3
 8016732:	f000 fb73 	bl	8016e1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	4618      	mov	r0, r3
 801673a:	3708      	adds	r7, #8
 801673c:	46bd      	mov	sp, r7
 801673e:	bd80      	pop	{r7, pc}
 8016740:	08030514 	.word	0x08030514

08016744 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8016744:	b580      	push	{r7, lr}
 8016746:	b082      	sub	sp, #8
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
 801674c:	6878      	ldr	r0, [r7, #4]
 801674e:	f7ff ffe7 	bl	8016720 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016752:	2118      	movs	r1, #24
 8016754:	6878      	ldr	r0, [r7, #4]
 8016756:	f016 fd94 	bl	802d282 <_ZdlPvj>
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	4618      	mov	r0, r3
 801675e:	3708      	adds	r7, #8
 8016760:	46bd      	mov	sp, r7
 8016762:	bd80      	pop	{r7, pc}

08016764 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8016764:	b580      	push	{r7, lr}
 8016766:	b082      	sub	sp, #8
 8016768:	af00      	add	r7, sp, #0
 801676a:	6078      	str	r0, [r7, #4]
 801676c:	4a05      	ldr	r2, [pc, #20]	; (8016784 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	601a      	str	r2, [r3, #0]
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	4618      	mov	r0, r3
 8016776:	f7ff fcb1 	bl	80160dc <_ZN8touchgfx3LCDD1Ev>
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	4618      	mov	r0, r3
 801677e:	3708      	adds	r7, #8
 8016780:	46bd      	mov	sp, r7
 8016782:	bd80      	pop	{r7, pc}
 8016784:	08032ed0 	.word	0x08032ed0

08016788 <_ZN8touchgfx8LCD16bppD0Ev>:
 8016788:	b580      	push	{r7, lr}
 801678a:	b082      	sub	sp, #8
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
 8016790:	6878      	ldr	r0, [r7, #4]
 8016792:	f7ff ffe7 	bl	8016764 <_ZN8touchgfx8LCD16bppD1Ev>
 8016796:	2178      	movs	r1, #120	; 0x78
 8016798:	6878      	ldr	r0, [r7, #4]
 801679a:	f016 fd72 	bl	802d282 <_ZdlPvj>
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	4618      	mov	r0, r3
 80167a2:	3708      	adds	r7, #8
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd80      	pop	{r7, pc}

080167a8 <_Z41__static_initialization_and_destruction_0ii>:
 80167a8:	b580      	push	{r7, lr}
 80167aa:	b084      	sub	sp, #16
 80167ac:	af02      	add	r7, sp, #8
 80167ae:	6078      	str	r0, [r7, #4]
 80167b0:	6039      	str	r1, [r7, #0]
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	2b01      	cmp	r3, #1
 80167b6:	d119      	bne.n	80167ec <_Z41__static_initialization_and_destruction_0ii+0x44>
 80167b8:	683b      	ldr	r3, [r7, #0]
 80167ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167be:	4293      	cmp	r3, r2
 80167c0:	d114      	bne.n	80167ec <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80167c2:	4818      	ldr	r0, [pc, #96]	; (8016824 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80167c4:	f7ff fee6 	bl	8016594 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80167c8:	4817      	ldr	r0, [pc, #92]	; (8016828 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80167ca:	f7ff f919 	bl	8015a00 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 80167ce:	4817      	ldr	r0, [pc, #92]	; (801682c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80167d0:	f00c f910 	bl	80229f4 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 1024, 600);
 80167d4:	f44f 7316 	mov.w	r3, #600	; 0x258
 80167d8:	9301      	str	r3, [sp, #4]
 80167da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80167de:	9300      	str	r3, [sp, #0]
 80167e0:	4b10      	ldr	r3, [pc, #64]	; (8016824 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80167e2:	4a12      	ldr	r2, [pc, #72]	; (801682c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80167e4:	4910      	ldr	r1, [pc, #64]	; (8016828 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80167e6:	4812      	ldr	r0, [pc, #72]	; (8016830 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80167e8:	f7ff fea8 	bl	801653c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d113      	bne.n	801681a <_Z41__static_initialization_and_destruction_0ii+0x72>
 80167f2:	683b      	ldr	r3, [r7, #0]
 80167f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167f8:	4293      	cmp	r3, r2
 80167fa:	d10e      	bne.n	801681a <_Z41__static_initialization_and_destruction_0ii+0x72>
 80167fc:	480c      	ldr	r0, [pc, #48]	; (8016830 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80167fe:	f7fe ff43 	bl	8015688 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8016802:	480c      	ldr	r0, [pc, #48]	; (8016834 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8016804:	f7f9 f8ce 	bl	800f9a4 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8016808:	4808      	ldr	r0, [pc, #32]	; (801682c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801680a:	f7ff ffab 	bl	8016764 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 801680e:	4806      	ldr	r0, [pc, #24]	; (8016828 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8016810:	f7ff f920 	bl	8015a54 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8016814:	4803      	ldr	r0, [pc, #12]	; (8016824 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8016816:	f7fe fce3 	bl	80151e0 <_ZN20STM32TouchControllerD1Ev>
}
 801681a:	bf00      	nop
 801681c:	3708      	adds	r7, #8
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}
 8016822:	bf00      	nop
 8016824:	20008a50 	.word	0x20008a50
 8016828:	20008a54 	.word	0x20008a54
 801682c:	20009674 	.word	0x20009674
 8016830:	200096f0 	.word	0x200096f0
 8016834:	2000001c 	.word	0x2000001c

08016838 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8016838:	b480      	push	{r7}
 801683a:	b083      	sub	sp, #12
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8016840:	2301      	movs	r3, #1
    }
 8016842:	4618      	mov	r0, r3
 8016844:	370c      	adds	r7, #12
 8016846:	46bd      	mov	sp, r7
 8016848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801684c:	4770      	bx	lr

0801684e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 801684e:	b480      	push	{r7}
 8016850:	b083      	sub	sp, #12
 8016852:	af00      	add	r7, sp, #0
 8016854:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8016856:	230c      	movs	r3, #12
    }
 8016858:	4618      	mov	r0, r3
 801685a:	370c      	adds	r7, #12
 801685c:	46bd      	mov	sp, r7
 801685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016862:	4770      	bx	lr

08016864 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8016864:	b480      	push	{r7}
 8016866:	b083      	sub	sp, #12
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
 801686c:	460b      	mov	r3, r1
 801686e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8016870:	887a      	ldrh	r2, [r7, #2]
 8016872:	4613      	mov	r3, r2
 8016874:	005b      	lsls	r3, r3, #1
 8016876:	4413      	add	r3, r2
 8016878:	009b      	lsls	r3, r3, #2
 801687a:	3308      	adds	r3, #8
 801687c:	687a      	ldr	r2, [r7, #4]
 801687e:	4413      	add	r3, r2
    }
 8016880:	4618      	mov	r0, r3
 8016882:	370c      	adds	r7, #12
 8016884:	46bd      	mov	sp, r7
 8016886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801688a:	4770      	bx	lr

0801688c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 801688c:	b480      	push	{r7}
 801688e:	b083      	sub	sp, #12
 8016890:	af00      	add	r7, sp, #0
 8016892:	6078      	str	r0, [r7, #4]
 8016894:	460b      	mov	r3, r1
 8016896:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8016898:	887a      	ldrh	r2, [r7, #2]
 801689a:	4613      	mov	r3, r2
 801689c:	005b      	lsls	r3, r3, #1
 801689e:	4413      	add	r3, r2
 80168a0:	009b      	lsls	r3, r3, #2
 80168a2:	3308      	adds	r3, #8
 80168a4:	687a      	ldr	r2, [r7, #4]
 80168a6:	4413      	add	r3, r2
    }
 80168a8:	4618      	mov	r0, r3
 80168aa:	370c      	adds	r7, #12
 80168ac:	46bd      	mov	sp, r7
 80168ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b2:	4770      	bx	lr

080168b4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80168b4:	b480      	push	{r7}
 80168b6:	b083      	sub	sp, #12
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80168bc:	2301      	movs	r3, #1
    }
 80168be:	4618      	mov	r0, r3
 80168c0:	370c      	adds	r7, #12
 80168c2:	46bd      	mov	sp, r7
 80168c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c8:	4770      	bx	lr

080168ca <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80168ca:	b480      	push	{r7}
 80168cc:	b083      	sub	sp, #12
 80168ce:	af00      	add	r7, sp, #0
 80168d0:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80168d2:	f44f 6356 	mov.w	r3, #3424	; 0xd60
    }
 80168d6:	4618      	mov	r0, r3
 80168d8:	370c      	adds	r7, #12
 80168da:	46bd      	mov	sp, r7
 80168dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e0:	4770      	bx	lr

080168e2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80168e2:	b480      	push	{r7}
 80168e4:	b083      	sub	sp, #12
 80168e6:	af00      	add	r7, sp, #0
 80168e8:	6078      	str	r0, [r7, #4]
 80168ea:	460b      	mov	r3, r1
 80168ec:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80168ee:	887b      	ldrh	r3, [r7, #2]
 80168f0:	f44f 6256 	mov.w	r2, #3424	; 0xd60
 80168f4:	fb02 f303 	mul.w	r3, r2, r3
 80168f8:	3308      	adds	r3, #8
 80168fa:	687a      	ldr	r2, [r7, #4]
 80168fc:	4413      	add	r3, r2
    }
 80168fe:	4618      	mov	r0, r3
 8016900:	370c      	adds	r7, #12
 8016902:	46bd      	mov	sp, r7
 8016904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016908:	4770      	bx	lr

0801690a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801690a:	b480      	push	{r7}
 801690c:	b083      	sub	sp, #12
 801690e:	af00      	add	r7, sp, #0
 8016910:	6078      	str	r0, [r7, #4]
 8016912:	460b      	mov	r3, r1
 8016914:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8016916:	887b      	ldrh	r3, [r7, #2]
 8016918:	f44f 6256 	mov.w	r2, #3424	; 0xd60
 801691c:	fb02 f303 	mul.w	r3, r2, r3
 8016920:	3308      	adds	r3, #8
 8016922:	687a      	ldr	r2, [r7, #4]
 8016924:	4413      	add	r3, r2
    }
 8016926:	4618      	mov	r0, r3
 8016928:	370c      	adds	r7, #12
 801692a:	46bd      	mov	sp, r7
 801692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016930:	4770      	bx	lr

08016932 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8016932:	b480      	push	{r7}
 8016934:	b083      	sub	sp, #12
 8016936:	af00      	add	r7, sp, #0
 8016938:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801693a:	2301      	movs	r3, #1
    }
 801693c:	4618      	mov	r0, r3
 801693e:	370c      	adds	r7, #12
 8016940:	46bd      	mov	sp, r7
 8016942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016946:	4770      	bx	lr

08016948 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8016948:	b480      	push	{r7}
 801694a:	b083      	sub	sp, #12
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8016950:	2310      	movs	r3, #16
    }
 8016952:	4618      	mov	r0, r3
 8016954:	370c      	adds	r7, #12
 8016956:	46bd      	mov	sp, r7
 8016958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695c:	4770      	bx	lr

0801695e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801695e:	b480      	push	{r7}
 8016960:	b083      	sub	sp, #12
 8016962:	af00      	add	r7, sp, #0
 8016964:	6078      	str	r0, [r7, #4]
 8016966:	460b      	mov	r3, r1
 8016968:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801696a:	887b      	ldrh	r3, [r7, #2]
 801696c:	011b      	lsls	r3, r3, #4
 801696e:	3308      	adds	r3, #8
 8016970:	687a      	ldr	r2, [r7, #4]
 8016972:	4413      	add	r3, r2
    }
 8016974:	4618      	mov	r0, r3
 8016976:	370c      	adds	r7, #12
 8016978:	46bd      	mov	sp, r7
 801697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801697e:	4770      	bx	lr

08016980 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8016980:	b480      	push	{r7}
 8016982:	b083      	sub	sp, #12
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
 8016988:	460b      	mov	r3, r1
 801698a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801698c:	887b      	ldrh	r3, [r7, #2]
 801698e:	011b      	lsls	r3, r3, #4
 8016990:	3308      	adds	r3, #8
 8016992:	687a      	ldr	r2, [r7, #4]
 8016994:	4413      	add	r3, r2
    }
 8016996:	4618      	mov	r0, r3
 8016998:	370c      	adds	r7, #12
 801699a:	46bd      	mov	sp, r7
 801699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a0:	4770      	bx	lr

080169a2 <_GLOBAL__sub_I_touchgfx_init>:
 80169a2:	b580      	push	{r7, lr}
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80169aa:	2001      	movs	r0, #1
 80169ac:	f7ff fefc 	bl	80167a8 <_Z41__static_initialization_and_destruction_0ii>
 80169b0:	bd80      	pop	{r7, pc}

080169b2 <_GLOBAL__sub_D_touchgfx_init>:
 80169b2:	b580      	push	{r7, lr}
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80169ba:	2000      	movs	r0, #0
 80169bc:	f7ff fef4 	bl	80167a8 <_Z41__static_initialization_and_destruction_0ii>
 80169c0:	bd80      	pop	{r7, pc}

080169c2 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80169c2:	b580      	push	{r7, lr}
 80169c4:	b082      	sub	sp, #8
 80169c6:	af00      	add	r7, sp, #0
 80169c8:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	3320      	adds	r3, #32
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	6878      	ldr	r0, [r7, #4]
 80169d4:	4798      	blx	r3
    }
 80169d6:	bf00      	nop
 80169d8:	3708      	adds	r7, #8
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}

080169de <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80169de:	b480      	push	{r7}
 80169e0:	b083      	sub	sp, #12
 80169e2:	af00      	add	r7, sp, #0
 80169e4:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80169ec:	3301      	adds	r3, #1
 80169ee:	b2da      	uxtb	r2, r3
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80169f6:	bf00      	nop
 80169f8:	370c      	adds	r7, #12
 80169fa:	46bd      	mov	sp, r7
 80169fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a00:	4770      	bx	lr
	...

08016a04 <__NVIC_EnableIRQ>:
{
 8016a04:	b480      	push	{r7}
 8016a06:	b083      	sub	sp, #12
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	db0b      	blt.n	8016a2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016a16:	79fb      	ldrb	r3, [r7, #7]
 8016a18:	f003 021f 	and.w	r2, r3, #31
 8016a1c:	4907      	ldr	r1, [pc, #28]	; (8016a3c <__NVIC_EnableIRQ+0x38>)
 8016a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a22:	095b      	lsrs	r3, r3, #5
 8016a24:	2001      	movs	r0, #1
 8016a26:	fa00 f202 	lsl.w	r2, r0, r2
 8016a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016a2e:	bf00      	nop
 8016a30:	370c      	adds	r7, #12
 8016a32:	46bd      	mov	sp, r7
 8016a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a38:	4770      	bx	lr
 8016a3a:	bf00      	nop
 8016a3c:	e000e100 	.word	0xe000e100

08016a40 <__NVIC_DisableIRQ>:
{
 8016a40:	b480      	push	{r7}
 8016a42:	b083      	sub	sp, #12
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	4603      	mov	r3, r0
 8016a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	db12      	blt.n	8016a78 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016a52:	79fb      	ldrb	r3, [r7, #7]
 8016a54:	f003 021f 	and.w	r2, r3, #31
 8016a58:	490a      	ldr	r1, [pc, #40]	; (8016a84 <__NVIC_DisableIRQ+0x44>)
 8016a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a5e:	095b      	lsrs	r3, r3, #5
 8016a60:	2001      	movs	r0, #1
 8016a62:	fa00 f202 	lsl.w	r2, r0, r2
 8016a66:	3320      	adds	r3, #32
 8016a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016a6c:	f3bf 8f4f 	dsb	sy
}
 8016a70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016a72:	f3bf 8f6f 	isb	sy
}
 8016a76:	bf00      	nop
}
 8016a78:	bf00      	nop
 8016a7a:	370c      	adds	r7, #12
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a82:	4770      	bx	lr
 8016a84:	e000e100 	.word	0xe000e100

08016a88 <__NVIC_SetPriority>:
{
 8016a88:	b480      	push	{r7}
 8016a8a:	b083      	sub	sp, #12
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	4603      	mov	r3, r0
 8016a90:	6039      	str	r1, [r7, #0]
 8016a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	db0a      	blt.n	8016ab2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016a9c:	683b      	ldr	r3, [r7, #0]
 8016a9e:	b2da      	uxtb	r2, r3
 8016aa0:	490c      	ldr	r1, [pc, #48]	; (8016ad4 <__NVIC_SetPriority+0x4c>)
 8016aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016aa6:	0112      	lsls	r2, r2, #4
 8016aa8:	b2d2      	uxtb	r2, r2
 8016aaa:	440b      	add	r3, r1
 8016aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016ab0:	e00a      	b.n	8016ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016ab2:	683b      	ldr	r3, [r7, #0]
 8016ab4:	b2da      	uxtb	r2, r3
 8016ab6:	4908      	ldr	r1, [pc, #32]	; (8016ad8 <__NVIC_SetPriority+0x50>)
 8016ab8:	79fb      	ldrb	r3, [r7, #7]
 8016aba:	f003 030f 	and.w	r3, r3, #15
 8016abe:	3b04      	subs	r3, #4
 8016ac0:	0112      	lsls	r2, r2, #4
 8016ac2:	b2d2      	uxtb	r2, r2
 8016ac4:	440b      	add	r3, r1
 8016ac6:	761a      	strb	r2, [r3, #24]
}
 8016ac8:	bf00      	nop
 8016aca:	370c      	adds	r7, #12
 8016acc:	46bd      	mov	sp, r7
 8016ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad2:	4770      	bx	lr
 8016ad4:	e000e100 	.word	0xe000e100
 8016ad8:	e000ed00 	.word	0xe000ed00

08016adc <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8016adc:	b5b0      	push	{r4, r5, r7, lr}
 8016ade:	b082      	sub	sp, #8
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	f000 fe63 	bl	80177b2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8016aec:	687d      	ldr	r5, [r7, #4]
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	3360      	adds	r3, #96	; 0x60
 8016af4:	681c      	ldr	r4, [r3, #0]
 8016af6:	f005 fac5 	bl	801c084 <_ZN8touchgfx11Application11getInstanceEv>
 8016afa:	4603      	mov	r3, r0
 8016afc:	4619      	mov	r1, r3
 8016afe:	4628      	mov	r0, r5
 8016b00:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD012C000, (void*)0);
 8016b02:	6878      	ldr	r0, [r7, #4]
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	3384      	adds	r3, #132	; 0x84
 8016b0a:	681c      	ldr	r4, [r3, #0]
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	4a04      	ldr	r2, [pc, #16]	; (8016b20 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8016b10:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8016b14:	47a0      	blx	r4
}
 8016b16:	bf00      	nop
 8016b18:	3708      	adds	r7, #8
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8016b1e:	bf00      	nop
 8016b20:	d012c000 	.word	0xd012c000

08016b24 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8016b24:	b580      	push	{r7, lr}
 8016b26:	b082      	sub	sp, #8
 8016b28:	af00      	add	r7, sp, #0
 8016b2a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8016b2c:	2109      	movs	r1, #9
 8016b2e:	205a      	movs	r0, #90	; 0x5a
 8016b30:	f7ff ffaa 	bl	8016a88 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8016b34:	2109      	movs	r1, #9
 8016b36:	2058      	movs	r0, #88	; 0x58
 8016b38:	f7ff ffa6 	bl	8016a88 <__NVIC_SetPriority>
}
 8016b3c:	bf00      	nop
 8016b3e:	3708      	adds	r7, #8
 8016b40:	46bd      	mov	sp, r7
 8016b42:	bd80      	pop	{r7, pc}

08016b44 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8016b44:	b580      	push	{r7, lr}
 8016b46:	b082      	sub	sp, #8
 8016b48:	af00      	add	r7, sp, #0
 8016b4a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8016b4c:	205a      	movs	r0, #90	; 0x5a
 8016b4e:	f7ff ff59 	bl	8016a04 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8016b52:	2058      	movs	r0, #88	; 0x58
 8016b54:	f7ff ff56 	bl	8016a04 <__NVIC_EnableIRQ>
}
 8016b58:	bf00      	nop
 8016b5a:	3708      	adds	r7, #8
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	bd80      	pop	{r7, pc}

08016b60 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b082      	sub	sp, #8
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016b68:	205a      	movs	r0, #90	; 0x5a
 8016b6a:	f7ff ff69 	bl	8016a40 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8016b6e:	2058      	movs	r0, #88	; 0x58
 8016b70:	f7ff ff66 	bl	8016a40 <__NVIC_DisableIRQ>
}
 8016b74:	bf00      	nop
 8016b76:	3708      	adds	r7, #8
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bd80      	pop	{r7, pc}

08016b7c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8016b7c:	b480      	push	{r7}
 8016b7e:	b083      	sub	sp, #12
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8016b84:	4b11      	ldr	r3, [pc, #68]	; (8016bcc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016b86:	68db      	ldr	r3, [r3, #12]
 8016b88:	b29b      	uxth	r3, r3
 8016b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016b8e:	b29b      	uxth	r3, r3
 8016b90:	3b01      	subs	r3, #1
 8016b92:	b29a      	uxth	r2, r3
 8016b94:	4b0e      	ldr	r3, [pc, #56]	; (8016bd0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8016b96:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8016b98:	4b0c      	ldr	r3, [pc, #48]	; (8016bcc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016b9a:	691b      	ldr	r3, [r3, #16]
 8016b9c:	b29b      	uxth	r3, r3
 8016b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016ba2:	b29b      	uxth	r3, r3
 8016ba4:	3b01      	subs	r3, #1
 8016ba6:	b29a      	uxth	r2, r3
 8016ba8:	4b0a      	ldr	r3, [pc, #40]	; (8016bd4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8016baa:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8016bac:	4b08      	ldr	r3, [pc, #32]	; (8016bd0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8016bae:	881a      	ldrh	r2, [r3, #0]
 8016bb0:	4b06      	ldr	r3, [pc, #24]	; (8016bcc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016bb2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8016bb4:	4b05      	ldr	r3, [pc, #20]	; (8016bcc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016bb8:	4a04      	ldr	r2, [pc, #16]	; (8016bcc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016bba:	f043 0301 	orr.w	r3, r3, #1
 8016bbe:	6353      	str	r3, [r2, #52]	; 0x34
}
 8016bc0:	bf00      	nop
 8016bc2:	370c      	adds	r7, #12
 8016bc4:	46bd      	mov	sp, r7
 8016bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bca:	4770      	bx	lr
 8016bcc:	40016800 	.word	0x40016800
 8016bd0:	2000976c 	.word	0x2000976c
 8016bd4:	2000976e 	.word	0x2000976e

08016bd8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b082      	sub	sp, #8
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	4618      	mov	r0, r3
 8016be4:	f000 fdcc 	bl	8017780 <_ZN8touchgfx3HAL10beginFrameEv>
 8016be8:	4603      	mov	r3, r0
}
 8016bea:	4618      	mov	r0, r3
 8016bec:	3708      	adds	r7, #8
 8016bee:	46bd      	mov	sp, r7
 8016bf0:	bd80      	pop	{r7, pc}

08016bf2 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8016bf2:	b580      	push	{r7, lr}
 8016bf4:	b082      	sub	sp, #8
 8016bf6:	af00      	add	r7, sp, #0
 8016bf8:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	f000 fdcb 	bl	8017798 <_ZN8touchgfx3HAL8endFrameEv>

}
 8016c02:	bf00      	nop
 8016c04:	3708      	adds	r7, #8
 8016c06:	46bd      	mov	sp, r7
 8016c08:	bd80      	pop	{r7, pc}
	...

08016c0c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8016c0c:	b480      	push	{r7}
 8016c0e:	b083      	sub	sp, #12
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8016c14:	4b03      	ldr	r3, [pc, #12]	; (8016c24 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8016c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8016c18:	4618      	mov	r0, r3
 8016c1a:	370c      	adds	r7, #12
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c22:	4770      	bx	lr
 8016c24:	40016884 	.word	0x40016884

08016c28 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8016c28:	b480      	push	{r7}
 8016c2a:	b083      	sub	sp, #12
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
 8016c30:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8016c32:	4a06      	ldr	r2, [pc, #24]	; (8016c4c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8016c34:	683b      	ldr	r3, [r7, #0]
 8016c36:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8016c38:	4b05      	ldr	r3, [pc, #20]	; (8016c50 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8016c3a:	2201      	movs	r2, #1
 8016c3c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016c3e:	bf00      	nop
 8016c40:	370c      	adds	r7, #12
 8016c42:	46bd      	mov	sp, r7
 8016c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c48:	4770      	bx	lr
 8016c4a:	bf00      	nop
 8016c4c:	40016884 	.word	0x40016884
 8016c50:	40016800 	.word	0x40016800

08016c54 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b082      	sub	sp, #8
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
 8016c5c:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	6839      	ldr	r1, [r7, #0]
 8016c62:	4618      	mov	r0, r3
 8016c64:	f000 fd56 	bl	8017714 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8016c68:	bf00      	nop
 8016c6a:	3708      	adds	r7, #8
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd80      	pop	{r7, pc}

08016c70 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b084      	sub	sp, #16
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	60f8      	str	r0, [r7, #12]
 8016c78:	60b9      	str	r1, [r7, #8]
 8016c7a:	607a      	str	r2, [r7, #4]
 8016c7c:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8016c7e:	68f8      	ldr	r0, [r7, #12]
 8016c80:	683b      	ldr	r3, [r7, #0]
 8016c82:	687a      	ldr	r2, [r7, #4]
 8016c84:	68b9      	ldr	r1, [r7, #8]
 8016c86:	f000 feb0 	bl	80179ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8016c8a:	4603      	mov	r3, r0
}
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	3710      	adds	r7, #16
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bd80      	pop	{r7, pc}

08016c94 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b082      	sub	sp, #8
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8016c9c:	4b1a      	ldr	r3, [pc, #104]	; (8016d08 <HAL_LTDC_LineEventCallback+0x74>)
 8016c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ca0:	4a1a      	ldr	r2, [pc, #104]	; (8016d0c <HAL_LTDC_LineEventCallback+0x78>)
 8016ca2:	8812      	ldrh	r2, [r2, #0]
 8016ca4:	4293      	cmp	r3, r2
 8016ca6:	bf0c      	ite	eq
 8016ca8:	2301      	moveq	r3, #1
 8016caa:	2300      	movne	r3, #0
 8016cac:	b2db      	uxtb	r3, r3
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d017      	beq.n	8016ce2 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8016cb2:	4b17      	ldr	r3, [pc, #92]	; (8016d10 <HAL_LTDC_LineEventCallback+0x7c>)
 8016cb4:	881b      	ldrh	r3, [r3, #0]
 8016cb6:	4619      	mov	r1, r3
 8016cb8:	6878      	ldr	r0, [r7, #4]
 8016cba:	f7f0 fb95 	bl	80073e8 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8016cbe:	f7f9 f995 	bl	800ffec <_ZN8touchgfx3HAL11getInstanceEv>
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	f7ff fe8a 	bl	80169de <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8016cca:	f7fe fd65 	bl	8015798 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8016cce:	f7f9 f98d 	bl	800ffec <_ZN8touchgfx3HAL11getInstanceEv>
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	f001 fb7b 	bl	80183d0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8016cda:	2000      	movs	r0, #0
 8016cdc:	f7fe faa2 	bl	8015224 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8016ce0:	e00e      	b.n	8016d00 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8016ce2:	4b0a      	ldr	r3, [pc, #40]	; (8016d0c <HAL_LTDC_LineEventCallback+0x78>)
 8016ce4:	881b      	ldrh	r3, [r3, #0]
 8016ce6:	4619      	mov	r1, r3
 8016ce8:	6878      	ldr	r0, [r7, #4]
 8016cea:	f7f0 fb7d 	bl	80073e8 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8016cee:	2000      	movs	r0, #0
 8016cf0:	f7fe faa3 	bl	801523a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8016cf4:	f7f9 f97a 	bl	800ffec <_ZN8touchgfx3HAL11getInstanceEv>
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	f7ff fe61 	bl	80169c2 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8016d00:	bf00      	nop
 8016d02:	3708      	adds	r7, #8
 8016d04:	46bd      	mov	sp, r7
 8016d06:	bd80      	pop	{r7, pc}
 8016d08:	40016800 	.word	0x40016800
 8016d0c:	2000976c 	.word	0x2000976c
 8016d10:	2000976e 	.word	0x2000976e

08016d14 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8016d14:	8880      	ldrh	r0, [r0, #4]
 8016d16:	4770      	bx	lr

08016d18 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8016d18:	2300      	movs	r3, #0
 8016d1a:	8083      	strh	r3, [r0, #4]
 8016d1c:	4770      	bx	lr
	...

08016d20 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8016d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d22:	6803      	ldr	r3, [r0, #0]
 8016d24:	4605      	mov	r5, r0
 8016d26:	460e      	mov	r6, r1
 8016d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d2a:	2100      	movs	r1, #0
 8016d2c:	4798      	blx	r3
 8016d2e:	682b      	ldr	r3, [r5, #0]
 8016d30:	4604      	mov	r4, r0
 8016d32:	6a1b      	ldr	r3, [r3, #32]
 8016d34:	4628      	mov	r0, r5
 8016d36:	4798      	blx	r3
 8016d38:	88ab      	ldrh	r3, [r5, #4]
 8016d3a:	1b34      	subs	r4, r6, r4
 8016d3c:	b2a4      	uxth	r4, r4
 8016d3e:	fbb4 f4f0 	udiv	r4, r4, r0
 8016d42:	42a3      	cmp	r3, r4
 8016d44:	d805      	bhi.n	8016d52 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8016d46:	4b0e      	ldr	r3, [pc, #56]	; (8016d80 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8016d48:	4a0e      	ldr	r2, [pc, #56]	; (8016d84 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016d4a:	211e      	movs	r1, #30
 8016d4c:	480e      	ldr	r0, [pc, #56]	; (8016d88 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8016d4e:	f017 f8b7 	bl	802dec0 <__assert_func>
 8016d52:	682b      	ldr	r3, [r5, #0]
 8016d54:	2100      	movs	r1, #0
 8016d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d58:	4628      	mov	r0, r5
 8016d5a:	4798      	blx	r3
 8016d5c:	682b      	ldr	r3, [r5, #0]
 8016d5e:	4607      	mov	r7, r0
 8016d60:	6a1b      	ldr	r3, [r3, #32]
 8016d62:	4628      	mov	r0, r5
 8016d64:	4798      	blx	r3
 8016d66:	1bf3      	subs	r3, r6, r7
 8016d68:	b29b      	uxth	r3, r3
 8016d6a:	fbb3 f2f0 	udiv	r2, r3, r0
 8016d6e:	fb02 3010 	mls	r0, r2, r0, r3
 8016d72:	b118      	cbz	r0, 8016d7c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8016d74:	4b05      	ldr	r3, [pc, #20]	; (8016d8c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8016d76:	4a03      	ldr	r2, [pc, #12]	; (8016d84 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016d78:	211f      	movs	r1, #31
 8016d7a:	e7e7      	b.n	8016d4c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8016d7c:	4620      	mov	r0, r4
 8016d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d80:	08030634 	.word	0x08030634
 8016d84:	080307a2 	.word	0x080307a2
 8016d88:	08030649 	.word	0x08030649
 8016d8c:	08030677 	.word	0x08030677

08016d90 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016d90:	b538      	push	{r3, r4, r5, lr}
 8016d92:	6803      	ldr	r3, [r0, #0]
 8016d94:	6a1b      	ldr	r3, [r3, #32]
 8016d96:	460d      	mov	r5, r1
 8016d98:	4604      	mov	r4, r0
 8016d9a:	4798      	blx	r3
 8016d9c:	4285      	cmp	r5, r0
 8016d9e:	d905      	bls.n	8016dac <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8016da0:	4b0c      	ldr	r3, [pc, #48]	; (8016dd4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8016da2:	4a0d      	ldr	r2, [pc, #52]	; (8016dd8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016da4:	2130      	movs	r1, #48	; 0x30
 8016da6:	480d      	ldr	r0, [pc, #52]	; (8016ddc <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8016da8:	f017 f88a 	bl	802dec0 <__assert_func>
 8016dac:	6823      	ldr	r3, [r4, #0]
 8016dae:	88a5      	ldrh	r5, [r4, #4]
 8016db0:	69db      	ldr	r3, [r3, #28]
 8016db2:	4620      	mov	r0, r4
 8016db4:	4798      	blx	r3
 8016db6:	4285      	cmp	r5, r0
 8016db8:	d303      	bcc.n	8016dc2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8016dba:	4b09      	ldr	r3, [pc, #36]	; (8016de0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8016dbc:	4a06      	ldr	r2, [pc, #24]	; (8016dd8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016dbe:	2131      	movs	r1, #49	; 0x31
 8016dc0:	e7f1      	b.n	8016da6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8016dc2:	6823      	ldr	r3, [r4, #0]
 8016dc4:	88a1      	ldrh	r1, [r4, #4]
 8016dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dc8:	4620      	mov	r0, r4
 8016dca:	4798      	blx	r3
 8016dcc:	88a3      	ldrh	r3, [r4, #4]
 8016dce:	3301      	adds	r3, #1
 8016dd0:	80a3      	strh	r3, [r4, #4]
 8016dd2:	bd38      	pop	{r3, r4, r5, pc}
 8016dd4:	080306f1 	.word	0x080306f1
 8016dd8:	080307e5 	.word	0x080307e5
 8016ddc:	08030649 	.word	0x08030649
 8016de0:	08030708 	.word	0x08030708

08016de4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8016de4:	b570      	push	{r4, r5, r6, lr}
 8016de6:	6803      	ldr	r3, [r0, #0]
 8016de8:	6a1b      	ldr	r3, [r3, #32]
 8016dea:	4616      	mov	r6, r2
 8016dec:	4604      	mov	r4, r0
 8016dee:	460d      	mov	r5, r1
 8016df0:	4798      	blx	r3
 8016df2:	4286      	cmp	r6, r0
 8016df4:	d905      	bls.n	8016e02 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8016df6:	4b06      	ldr	r3, [pc, #24]	; (8016e10 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8016df8:	4a06      	ldr	r2, [pc, #24]	; (8016e14 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8016dfa:	4807      	ldr	r0, [pc, #28]	; (8016e18 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8016dfc:	213a      	movs	r1, #58	; 0x3a
 8016dfe:	f017 f85f 	bl	802dec0 <__assert_func>
 8016e02:	6823      	ldr	r3, [r4, #0]
 8016e04:	4629      	mov	r1, r5
 8016e06:	4620      	mov	r0, r4
 8016e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e0e:	4718      	bx	r3
 8016e10:	080306f1 	.word	0x080306f1
 8016e14:	08030758 	.word	0x08030758
 8016e18:	08030649 	.word	0x08030649

08016e1c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8016e1c:	4770      	bx	lr
	...

08016e20 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8016e20:	4a02      	ldr	r2, [pc, #8]	; (8016e2c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8016e22:	6002      	str	r2, [r0, #0]
 8016e24:	2200      	movs	r2, #0
 8016e26:	8082      	strh	r2, [r0, #4]
 8016e28:	4770      	bx	lr
 8016e2a:	bf00      	nop
 8016e2c:	0803072c 	.word	0x0803072c

08016e30 <_ZN8touchgfx9Container13getFirstChildEv>:
 8016e30:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016e32:	4770      	bx	lr

08016e34 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8016e34:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8016e38:	4770      	bx	lr

08016e3a <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8016e3a:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8016e3e:	4770      	bx	lr

08016e40 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8016e40:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8016e44:	4770      	bx	lr

08016e46 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8016e46:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8016e4a:	4770      	bx	lr

08016e4c <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8016e4c:	b510      	push	{r4, lr}
 8016e4e:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8016e52:	600c      	str	r4, [r1, #0]
 8016e54:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016e58:	6011      	str	r1, [r2, #0]
 8016e5a:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016e5e:	801a      	strh	r2, [r3, #0]
 8016e60:	9b02      	ldr	r3, [sp, #8]
 8016e62:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 8016e66:	801a      	strh	r2, [r3, #0]
 8016e68:	bd10      	pop	{r4, pc}

08016e6a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 8016e6a:	b510      	push	{r4, lr}
 8016e6c:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8016e70:	600c      	str	r4, [r1, #0]
 8016e72:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016e76:	6011      	str	r1, [r2, #0]
 8016e78:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016e7c:	801a      	strh	r2, [r3, #0]
 8016e7e:	bd10      	pop	{r4, pc}

08016e80 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8016e80:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016e84:	600b      	str	r3, [r1, #0]
 8016e86:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8016e8a:	6013      	str	r3, [r2, #0]
 8016e8c:	4770      	bx	lr

08016e8e <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8016e8e:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8016e92:	4770      	bx	lr

08016e94 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8016e94:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8016e98:	4770      	bx	lr

08016e9a <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 8016e9a:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8016e9e:	4770      	bx	lr

08016ea0 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8016ea0:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 8016ea4:	4770      	bx	lr

08016ea6 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8016ea6:	b570      	push	{r4, r5, r6, lr}
 8016ea8:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8016eac:	428d      	cmp	r5, r1
 8016eae:	bfb8      	it	lt
 8016eb0:	460d      	movlt	r5, r1
 8016eb2:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016eb6:	428d      	cmp	r5, r1
 8016eb8:	4604      	mov	r4, r0
 8016eba:	bfa8      	it	ge
 8016ebc:	460d      	movge	r5, r1
 8016ebe:	4616      	mov	r6, r2
 8016ec0:	b99a      	cbnz	r2, 8016eea <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8016ec2:	6803      	ldr	r3, [r0, #0]
 8016ec4:	4629      	mov	r1, r5
 8016ec6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016eca:	4798      	blx	r3
 8016ecc:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016ed0:	b358      	cbz	r0, 8016f2a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8016ed2:	6803      	ldr	r3, [r0, #0]
 8016ed4:	68db      	ldr	r3, [r3, #12]
 8016ed6:	4798      	blx	r3
 8016ed8:	b338      	cbz	r0, 8016f2a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8016eda:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016ede:	6803      	ldr	r3, [r0, #0]
 8016ee0:	4621      	mov	r1, r4
 8016ee2:	689b      	ldr	r3, [r3, #8]
 8016ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ee8:	4718      	bx	r3
 8016eea:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	dd07      	ble.n	8016f02 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5c>
 8016ef2:	f005 f8c7 	bl	801c084 <_ZN8touchgfx11Application11getInstanceEv>
 8016ef6:	4621      	mov	r1, r4
 8016ef8:	f005 f8fc 	bl	801c0f4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8016efc:	2300      	movs	r3, #0
 8016efe:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8016f02:	6823      	ldr	r3, [r4, #0]
 8016f04:	4620      	mov	r0, r4
 8016f06:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016f0a:	4798      	blx	r3
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8016f12:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 8016f16:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 8016f1a:	f005 f8b3 	bl	801c084 <_ZN8touchgfx11Application11getInstanceEv>
 8016f1e:	4621      	mov	r1, r4
 8016f20:	f005 f8b6 	bl	801c090 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8016f24:	2301      	movs	r3, #1
 8016f26:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8016f2a:	bd70      	pop	{r4, r5, r6, pc}

08016f2c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8016f2c:	b510      	push	{r4, lr}
 8016f2e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016f32:	4299      	cmp	r1, r3
 8016f34:	bfb8      	it	lt
 8016f36:	4619      	movlt	r1, r3
 8016f38:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8016f3c:	4299      	cmp	r1, r3
 8016f3e:	bfa8      	it	ge
 8016f40:	4619      	movge	r1, r3
 8016f42:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8016f46:	428b      	cmp	r3, r1
 8016f48:	4604      	mov	r4, r0
 8016f4a:	d010      	beq.n	8016f6e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016f4c:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8016f50:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8016f54:	b158      	cbz	r0, 8016f6e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016f56:	6803      	ldr	r3, [r0, #0]
 8016f58:	68db      	ldr	r3, [r3, #12]
 8016f5a:	4798      	blx	r3
 8016f5c:	b138      	cbz	r0, 8016f6e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016f5e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8016f62:	6803      	ldr	r3, [r0, #0]
 8016f64:	4621      	mov	r1, r4
 8016f66:	689b      	ldr	r3, [r3, #8]
 8016f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f6c:	4718      	bx	r3
 8016f6e:	bd10      	pop	{r4, pc}

08016f70 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8016f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f74:	4291      	cmp	r1, r2
 8016f76:	4604      	mov	r4, r0
 8016f78:	460e      	mov	r6, r1
 8016f7a:	4615      	mov	r5, r2
 8016f7c:	4698      	mov	r8, r3
 8016f7e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8016f82:	db05      	blt.n	8016f90 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 8016f84:	4b11      	ldr	r3, [pc, #68]	; (8016fcc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 8016f86:	4a12      	ldr	r2, [pc, #72]	; (8016fd0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8016f88:	214b      	movs	r1, #75	; 0x4b
 8016f8a:	4812      	ldr	r0, [pc, #72]	; (8016fd4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 8016f8c:	f016 ff98 	bl	802dec0 <__assert_func>
 8016f90:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 8016f94:	6803      	ldr	r3, [r0, #0]
 8016f96:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8016f9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016f9e:	4798      	blx	r3
 8016fa0:	f1b8 0f00 	cmp.w	r8, #0
 8016fa4:	d10c      	bne.n	8016fc0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 8016fa6:	1bad      	subs	r5, r5, r6
 8016fa8:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 8016fac:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 8016fb0:	f8a4 7092 	strh.w	r7, [r4, #146]	; 0x92
 8016fb4:	42bb      	cmp	r3, r7
 8016fb6:	d806      	bhi.n	8016fc6 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 8016fb8:	4b07      	ldr	r3, [pc, #28]	; (8016fd8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 8016fba:	4a05      	ldr	r2, [pc, #20]	; (8016fd0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8016fbc:	2158      	movs	r1, #88	; 0x58
 8016fbe:	e7e4      	b.n	8016f8a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 8016fc0:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
 8016fc4:	e7f2      	b.n	8016fac <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 8016fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fca:	bf00      	nop
 8016fcc:	08030823 	.word	0x08030823
 8016fd0:	08030970 	.word	0x08030970
 8016fd4:	0803082d 	.word	0x0803082d
 8016fd8:	08030884 	.word	0x08030884

08016fdc <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8016fdc:	b570      	push	{r4, r5, r6, lr}
 8016fde:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8016fe2:	4604      	mov	r4, r0
 8016fe4:	b3a3      	cbz	r3, 8017050 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8016fe6:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 8016fea:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8016fee:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 8016ff2:	3001      	adds	r0, #1
 8016ff4:	1ad2      	subs	r2, r2, r3
 8016ff6:	b212      	sxth	r2, r2
 8016ff8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 8016ffc:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8017000:	2100      	movs	r1, #0
 8017002:	b280      	uxth	r0, r0
 8017004:	47a8      	blx	r5
 8017006:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 801700a:	6823      	ldr	r3, [r4, #0]
 801700c:	4401      	add	r1, r0
 801700e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017012:	4620      	mov	r0, r4
 8017014:	4798      	blx	r3
 8017016:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 801701a:	429a      	cmp	r2, r3
 801701c:	db18      	blt.n	8017050 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 801701e:	2500      	movs	r5, #0
 8017020:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8017024:	f005 f82e 	bl	801c084 <_ZN8touchgfx11Application11getInstanceEv>
 8017028:	4621      	mov	r1, r4
 801702a:	f005 f863 	bl	801c0f4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801702e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017032:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8017036:	b158      	cbz	r0, 8017050 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017038:	6803      	ldr	r3, [r0, #0]
 801703a:	68db      	ldr	r3, [r3, #12]
 801703c:	4798      	blx	r3
 801703e:	b138      	cbz	r0, 8017050 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017040:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017044:	6803      	ldr	r3, [r0, #0]
 8017046:	4621      	mov	r1, r4
 8017048:	689b      	ldr	r3, [r3, #8]
 801704a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801704e:	4718      	bx	r3
 8017050:	bd70      	pop	{r4, r5, r6, pc}

08017052 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8017052:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017054:	4604      	mov	r4, r0
 8017056:	460d      	mov	r5, r1
 8017058:	b1a9      	cbz	r1, 8017086 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 801705a:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 801705e:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 8017062:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8017066:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 801706a:	ab01      	add	r3, sp, #4
 801706c:	1a12      	subs	r2, r2, r0
 801706e:	1b89      	subs	r1, r1, r6
 8017070:	1a38      	subs	r0, r7, r0
 8017072:	f006 f999 	bl	801d3a8 <_ZN8touchgfx6muldivElllRl>
 8017076:	4629      	mov	r1, r5
 8017078:	ab01      	add	r3, sp, #4
 801707a:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 801707e:	4430      	add	r0, r6
 8017080:	f006 f992 	bl	801d3a8 <_ZN8touchgfx6muldivElllRl>
 8017084:	b285      	uxth	r5, r0
 8017086:	4628      	mov	r0, r5
 8017088:	b003      	add	sp, #12
 801708a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801708c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 801708c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017090:	4604      	mov	r4, r0
 8017092:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8017096:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 801709a:	460e      	mov	r6, r1
 801709c:	4615      	mov	r5, r2
 801709e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80170a2:	4619      	mov	r1, r3
 80170a4:	463a      	mov	r2, r7
 80170a6:	3058      	adds	r0, #88	; 0x58
 80170a8:	4698      	mov	r8, r3
 80170aa:	f7f9 fd45 	bl	8010b38 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80170ae:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80170b2:	4446      	add	r6, r8
 80170b4:	42b3      	cmp	r3, r6
 80170b6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80170ba:	bfb8      	it	lt
 80170bc:	8126      	strhlt	r6, [r4, #8]
 80170be:	443d      	add	r5, r7
 80170c0:	42ab      	cmp	r3, r5
 80170c2:	bfb8      	it	lt
 80170c4:	8165      	strhlt	r5, [r4, #10]
 80170c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080170ca <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 80170ca:	b510      	push	{r4, lr}
 80170cc:	4604      	mov	r4, r0
 80170ce:	302c      	adds	r0, #44	; 0x2c
 80170d0:	f003 fad0 	bl	801a674 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80170d4:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 80170d8:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 80170dc:	4620      	mov	r0, r4
 80170de:	f7f9 fd2b 	bl	8010b38 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80170e2:	bd10      	pop	{r4, pc}

080170e4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 80170e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80170e6:	4604      	mov	r4, r0
 80170e8:	4626      	mov	r6, r4
 80170ea:	2500      	movs	r5, #0
 80170ec:	f7f9 fc2e 	bl	801094c <_ZN8touchgfx8DrawableC1Ev>
 80170f0:	4b23      	ldr	r3, [pc, #140]	; (8017180 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 80170f2:	62a5      	str	r5, [r4, #40]	; 0x28
 80170f4:	f846 3b2c 	str.w	r3, [r6], #44
 80170f8:	2226      	movs	r2, #38	; 0x26
 80170fa:	4629      	mov	r1, r5
 80170fc:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8017100:	4630      	mov	r0, r6
 8017102:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017106:	f017 f869 	bl	802e1dc <memset>
 801710a:	4630      	mov	r0, r6
 801710c:	f7f9 fc1e 	bl	801094c <_ZN8touchgfx8DrawableC1Ev>
 8017110:	a902      	add	r1, sp, #8
 8017112:	4b1c      	ldr	r3, [pc, #112]	; (8017184 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8017114:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017116:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 801711a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801711e:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 8017122:	4630      	mov	r0, r6
 8017124:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8017128:	f003 faa4 	bl	801a674 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801712c:	4638      	mov	r0, r7
 801712e:	f7f9 fc0d 	bl	801094c <_ZN8touchgfx8DrawableC1Ev>
 8017132:	4b15      	ldr	r3, [pc, #84]	; (8017188 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8017134:	65a3      	str	r3, [r4, #88]	; 0x58
 8017136:	2364      	movs	r3, #100	; 0x64
 8017138:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 801713c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8017140:	4b12      	ldr	r3, [pc, #72]	; (801718c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8017142:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8017146:	4629      	mov	r1, r5
 8017148:	4630      	mov	r0, r6
 801714a:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 801714e:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8017152:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8017156:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 801715a:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 801715e:	f7f9 fc71 	bl	8010a44 <_ZN8touchgfx8Drawable4setXEs>
 8017162:	4629      	mov	r1, r5
 8017164:	4630      	mov	r0, r6
 8017166:	f7f9 fc7c 	bl	8010a62 <_ZN8touchgfx8Drawable4setYEs>
 801716a:	4631      	mov	r1, r6
 801716c:	4620      	mov	r0, r4
 801716e:	f000 f877 	bl	8017260 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017172:	4620      	mov	r0, r4
 8017174:	4639      	mov	r1, r7
 8017176:	f000 f873 	bl	8017260 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801717a:	4620      	mov	r0, r4
 801717c:	b003      	add	sp, #12
 801717e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017180:	080308a8 	.word	0x080308a8
 8017184:	08031b88 	.word	0x08031b88
 8017188:	08030a9c 	.word	0x08030a9c
 801718c:	0801da0d 	.word	0x0801da0d

08017190 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8017190:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017192:	2000      	movs	r0, #0
 8017194:	b12b      	cbz	r3, 80171a2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017196:	b920      	cbnz	r0, 80171a2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017198:	1a5a      	subs	r2, r3, r1
 801719a:	4250      	negs	r0, r2
 801719c:	4150      	adcs	r0, r2
 801719e:	699b      	ldr	r3, [r3, #24]
 80171a0:	e7f8      	b.n	8017194 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80171a2:	4770      	bx	lr

080171a4 <_ZN8touchgfx9Container9removeAllEv>:
 80171a4:	2200      	movs	r2, #0
 80171a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80171a8:	b123      	cbz	r3, 80171b4 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80171aa:	6999      	ldr	r1, [r3, #24]
 80171ac:	6281      	str	r1, [r0, #40]	; 0x28
 80171ae:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80171b2:	e7f8      	b.n	80171a6 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80171b4:	4770      	bx	lr

080171b6 <_ZN8touchgfx9Container6unlinkEv>:
 80171b6:	2300      	movs	r3, #0
 80171b8:	6283      	str	r3, [r0, #40]	; 0x28
 80171ba:	4770      	bx	lr

080171bc <_ZNK8touchgfx9Container12getSolidRectEv>:
 80171bc:	2200      	movs	r2, #0
 80171be:	8002      	strh	r2, [r0, #0]
 80171c0:	8042      	strh	r2, [r0, #2]
 80171c2:	8082      	strh	r2, [r0, #4]
 80171c4:	80c2      	strh	r2, [r0, #6]
 80171c6:	4770      	bx	lr

080171c8 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80171c8:	b570      	push	{r4, r5, r6, lr}
 80171ca:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80171cc:	460d      	mov	r5, r1
 80171ce:	4616      	mov	r6, r2
 80171d0:	b13c      	cbz	r4, 80171e2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80171d2:	6823      	ldr	r3, [r4, #0]
 80171d4:	4620      	mov	r0, r4
 80171d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171d8:	4632      	mov	r2, r6
 80171da:	4629      	mov	r1, r5
 80171dc:	4798      	blx	r3
 80171de:	69a4      	ldr	r4, [r4, #24]
 80171e0:	e7f6      	b.n	80171d0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80171e2:	bd70      	pop	{r4, r5, r6, pc}

080171e4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80171e4:	b538      	push	{r3, r4, r5, lr}
 80171e6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80171e8:	460d      	mov	r5, r1
 80171ea:	b134      	cbz	r4, 80171fa <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80171ec:	682b      	ldr	r3, [r5, #0]
 80171ee:	4621      	mov	r1, r4
 80171f0:	689b      	ldr	r3, [r3, #8]
 80171f2:	4628      	mov	r0, r5
 80171f4:	4798      	blx	r3
 80171f6:	69a4      	ldr	r4, [r4, #24]
 80171f8:	e7f7      	b.n	80171ea <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80171fa:	bd38      	pop	{r3, r4, r5, pc}

080171fc <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80171fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80171fe:	b19b      	cbz	r3, 8017228 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017200:	428b      	cmp	r3, r1
 8017202:	d109      	bne.n	8017218 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017204:	699a      	ldr	r2, [r3, #24]
 8017206:	2100      	movs	r1, #0
 8017208:	6159      	str	r1, [r3, #20]
 801720a:	6282      	str	r2, [r0, #40]	; 0x28
 801720c:	b902      	cbnz	r2, 8017210 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801720e:	4770      	bx	lr
 8017210:	6199      	str	r1, [r3, #24]
 8017212:	4770      	bx	lr
 8017214:	4613      	mov	r3, r2
 8017216:	b13a      	cbz	r2, 8017228 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017218:	699a      	ldr	r2, [r3, #24]
 801721a:	428a      	cmp	r2, r1
 801721c:	d1fa      	bne.n	8017214 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801721e:	698a      	ldr	r2, [r1, #24]
 8017220:	619a      	str	r2, [r3, #24]
 8017222:	2300      	movs	r3, #0
 8017224:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8017228:	4770      	bx	lr

0801722a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801722a:	b410      	push	{r4}
 801722c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801722e:	4604      	mov	r4, r0
 8017230:	b92b      	cbnz	r3, 801723e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8017232:	6803      	ldr	r3, [r0, #0]
 8017234:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801723a:	4611      	mov	r1, r2
 801723c:	4718      	bx	r3
 801723e:	b941      	cbnz	r1, 8017252 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017240:	6193      	str	r3, [r2, #24]
 8017242:	6282      	str	r2, [r0, #40]	; 0x28
 8017244:	6154      	str	r4, [r2, #20]
 8017246:	f85d 4b04 	ldr.w	r4, [sp], #4
 801724a:	4770      	bx	lr
 801724c:	4603      	mov	r3, r0
 801724e:	2800      	cmp	r0, #0
 8017250:	d0f9      	beq.n	8017246 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8017252:	4299      	cmp	r1, r3
 8017254:	6998      	ldr	r0, [r3, #24]
 8017256:	d1f9      	bne.n	801724c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8017258:	6190      	str	r0, [r2, #24]
 801725a:	618a      	str	r2, [r1, #24]
 801725c:	e7f2      	b.n	8017244 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08017260 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8017260:	4288      	cmp	r0, r1
 8017262:	b508      	push	{r3, lr}
 8017264:	d105      	bne.n	8017272 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8017266:	4b11      	ldr	r3, [pc, #68]	; (80172ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8017268:	4a11      	ldr	r2, [pc, #68]	; (80172b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801726a:	2123      	movs	r1, #35	; 0x23
 801726c:	4811      	ldr	r0, [pc, #68]	; (80172b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801726e:	f016 fe27 	bl	802dec0 <__assert_func>
 8017272:	694b      	ldr	r3, [r1, #20]
 8017274:	b11b      	cbz	r3, 801727e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8017276:	4b10      	ldr	r3, [pc, #64]	; (80172b8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8017278:	4a0d      	ldr	r2, [pc, #52]	; (80172b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801727a:	2124      	movs	r1, #36	; 0x24
 801727c:	e7f6      	b.n	801726c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801727e:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8017282:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017284:	b913      	cbnz	r3, 801728c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8017286:	6281      	str	r1, [r0, #40]	; 0x28
 8017288:	bd08      	pop	{r3, pc}
 801728a:	4613      	mov	r3, r2
 801728c:	699a      	ldr	r2, [r3, #24]
 801728e:	b12a      	cbz	r2, 801729c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8017290:	428b      	cmp	r3, r1
 8017292:	d1fa      	bne.n	801728a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8017294:	4b09      	ldr	r3, [pc, #36]	; (80172bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8017296:	4a06      	ldr	r2, [pc, #24]	; (80172b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017298:	2135      	movs	r1, #53	; 0x35
 801729a:	e7e7      	b.n	801726c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801729c:	428b      	cmp	r3, r1
 801729e:	d103      	bne.n	80172a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 80172a0:	4b06      	ldr	r3, [pc, #24]	; (80172bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80172a2:	4a03      	ldr	r2, [pc, #12]	; (80172b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80172a4:	2138      	movs	r1, #56	; 0x38
 80172a6:	e7e1      	b.n	801726c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80172a8:	6199      	str	r1, [r3, #24]
 80172aa:	e7ed      	b.n	8017288 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 80172ac:	080309c9 	.word	0x080309c9
 80172b0:	08030b20 	.word	0x08030b20
 80172b4:	080309f5 	.word	0x080309f5
 80172b8:	08030a28 	.word	0x08030a28
 80172bc:	08030a5e 	.word	0x08030a5e

080172c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80172c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172c4:	461f      	mov	r7, r3
 80172c6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80172ca:	460d      	mov	r5, r1
 80172cc:	4616      	mov	r6, r2
 80172ce:	b103      	cbz	r3, 80172d2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80172d0:	6038      	str	r0, [r7, #0]
 80172d2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80172d4:	b314      	cbz	r4, 801731c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80172d6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80172da:	b1eb      	cbz	r3, 8017318 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80172dc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80172e0:	428d      	cmp	r5, r1
 80172e2:	db19      	blt.n	8017318 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80172e4:	8923      	ldrh	r3, [r4, #8]
 80172e6:	b289      	uxth	r1, r1
 80172e8:	440b      	add	r3, r1
 80172ea:	b21b      	sxth	r3, r3
 80172ec:	429d      	cmp	r5, r3
 80172ee:	da13      	bge.n	8017318 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80172f0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80172f4:	4296      	cmp	r6, r2
 80172f6:	db0f      	blt.n	8017318 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80172f8:	8963      	ldrh	r3, [r4, #10]
 80172fa:	b292      	uxth	r2, r2
 80172fc:	4413      	add	r3, r2
 80172fe:	b21b      	sxth	r3, r3
 8017300:	429e      	cmp	r6, r3
 8017302:	da09      	bge.n	8017318 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017304:	6823      	ldr	r3, [r4, #0]
 8017306:	1ab2      	subs	r2, r6, r2
 8017308:	1a69      	subs	r1, r5, r1
 801730a:	f8d3 8020 	ldr.w	r8, [r3, #32]
 801730e:	b212      	sxth	r2, r2
 8017310:	463b      	mov	r3, r7
 8017312:	b209      	sxth	r1, r1
 8017314:	4620      	mov	r0, r4
 8017316:	47c0      	blx	r8
 8017318:	69a4      	ldr	r4, [r4, #24]
 801731a:	e7db      	b.n	80172d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801731c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017320 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8017320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017324:	4c6e      	ldr	r4, [pc, #440]	; (80174e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8017326:	b0a1      	sub	sp, #132	; 0x84
 8017328:	6824      	ldr	r4, [r4, #0]
 801732a:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801732c:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8017330:	9303      	str	r3, [sp, #12]
 8017332:	2400      	movs	r4, #0
 8017334:	802c      	strh	r4, [r5, #0]
 8017336:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8017338:	802c      	strh	r4, [r5, #0]
 801733a:	601c      	str	r4, [r3, #0]
 801733c:	4606      	mov	r6, r0
 801733e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8017342:	f7ff ffbd 	bl	80172c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017346:	f1b9 0f03 	cmp.w	r9, #3
 801734a:	f340 80c2 	ble.w	80174d2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 801734e:	4631      	mov	r1, r6
 8017350:	a80c      	add	r0, sp, #48	; 0x30
 8017352:	f005 fef9 	bl	801d148 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017356:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801735a:	9306      	str	r3, [sp, #24]
 801735c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017360:	9307      	str	r3, [sp, #28]
 8017362:	9b03      	ldr	r3, [sp, #12]
 8017364:	f8d3 a000 	ldr.w	sl, [r3]
 8017368:	f1ba 0f00 	cmp.w	sl, #0
 801736c:	f000 80b4 	beq.w	80174d8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 8017370:	4651      	mov	r1, sl
 8017372:	a810      	add	r0, sp, #64	; 0x40
 8017374:	f005 fee8 	bl	801d148 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017378:	9b01      	ldr	r3, [sp, #4]
 801737a:	9a06      	ldr	r2, [sp, #24]
 801737c:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8017380:	189d      	adds	r5, r3, r2
 8017382:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8017386:	9a07      	ldr	r2, [sp, #28]
 8017388:	2002      	movs	r0, #2
 801738a:	fb91 f1f0 	sdiv	r1, r1, r0
 801738e:	4419      	add	r1, r3
 8017390:	1a6d      	subs	r5, r5, r1
 8017392:	9b02      	ldr	r3, [sp, #8]
 8017394:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8017398:	4413      	add	r3, r2
 801739a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 801739e:	fb92 f2f0 	sdiv	r2, r2, r0
 80173a2:	440a      	add	r2, r1
 80173a4:	1a9b      	subs	r3, r3, r2
 80173a6:	435b      	muls	r3, r3
 80173a8:	fb05 3505 	mla	r5, r5, r5, r3
 80173ac:	4f4d      	ldr	r7, [pc, #308]	; (80174e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 80173ae:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80173b0:	ac10      	add	r4, sp, #64	; 0x40
 80173b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80173b4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80173b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80173b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80173ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80173bc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80173c0:	f1b9 0f0c 	cmp.w	r9, #12
 80173c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80173c8:	f04f 0303 	mov.w	r3, #3
 80173cc:	bfc8      	it	gt
 80173ce:	4698      	movgt	r8, r3
 80173d0:	f8cd 9000 	str.w	r9, [sp]
 80173d4:	f04f 0400 	mov.w	r4, #0
 80173d8:	bfdc      	itt	le
 80173da:	f109 32ff 	addle.w	r2, r9, #4294967295
 80173de:	fb92 f8f3 	sdivle	r8, r2, r3
 80173e2:	1c63      	adds	r3, r4, #1
 80173e4:	aa10      	add	r2, sp, #64	; 0x40
 80173e6:	f004 0401 	and.w	r4, r4, #1
 80173ea:	9308      	str	r3, [sp, #32]
 80173ec:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80173f0:	9b00      	ldr	r3, [sp, #0]
 80173f2:	fb93 f3f8 	sdiv	r3, r3, r8
 80173f6:	b29b      	uxth	r3, r3
 80173f8:	3404      	adds	r4, #4
 80173fa:	f04f 0b00 	mov.w	fp, #0
 80173fe:	9304      	str	r3, [sp, #16]
 8017400:	9a04      	ldr	r2, [sp, #16]
 8017402:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017406:	fb13 f302 	smulbb	r3, r3, r2
 801740a:	9a01      	ldr	r2, [sp, #4]
 801740c:	b29b      	uxth	r3, r3
 801740e:	1899      	adds	r1, r3, r2
 8017410:	9305      	str	r3, [sp, #20]
 8017412:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017416:	b209      	sxth	r1, r1
 8017418:	4299      	cmp	r1, r3
 801741a:	db4d      	blt.n	80174b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801741c:	8932      	ldrh	r2, [r6, #8]
 801741e:	4413      	add	r3, r2
 8017420:	b21b      	sxth	r3, r3
 8017422:	4299      	cmp	r1, r3
 8017424:	da48      	bge.n	80174b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017426:	9b04      	ldr	r3, [sp, #16]
 8017428:	6827      	ldr	r7, [r4, #0]
 801742a:	fb17 f703 	smulbb	r7, r7, r3
 801742e:	9b02      	ldr	r3, [sp, #8]
 8017430:	b2bf      	uxth	r7, r7
 8017432:	18fa      	adds	r2, r7, r3
 8017434:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017438:	b212      	sxth	r2, r2
 801743a:	429a      	cmp	r2, r3
 801743c:	db3c      	blt.n	80174b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801743e:	8970      	ldrh	r0, [r6, #10]
 8017440:	4403      	add	r3, r0
 8017442:	b21b      	sxth	r3, r3
 8017444:	429a      	cmp	r2, r3
 8017446:	da37      	bge.n	80174b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017448:	2300      	movs	r3, #0
 801744a:	930b      	str	r3, [sp, #44]	; 0x2c
 801744c:	4630      	mov	r0, r6
 801744e:	ab0b      	add	r3, sp, #44	; 0x2c
 8017450:	f7ff ff36 	bl	80172c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017454:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017456:	b37a      	cbz	r2, 80174b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017458:	4552      	cmp	r2, sl
 801745a:	d02d      	beq.n	80174b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801745c:	4611      	mov	r1, r2
 801745e:	a80e      	add	r0, sp, #56	; 0x38
 8017460:	9209      	str	r2, [sp, #36]	; 0x24
 8017462:	f005 fe71 	bl	801d148 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017466:	9a06      	ldr	r2, [sp, #24]
 8017468:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 801746c:	9b01      	ldr	r3, [sp, #4]
 801746e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8017472:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8017476:	4413      	add	r3, r2
 8017478:	f04f 0e02 	mov.w	lr, #2
 801747c:	fb91 f1fe 	sdiv	r1, r1, lr
 8017480:	4401      	add	r1, r0
 8017482:	1a58      	subs	r0, r3, r1
 8017484:	9a07      	ldr	r2, [sp, #28]
 8017486:	9b02      	ldr	r3, [sp, #8]
 8017488:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801748c:	fb9c fcfe 	sdiv	ip, ip, lr
 8017490:	4413      	add	r3, r2
 8017492:	448c      	add	ip, r1
 8017494:	eba3 030c 	sub.w	r3, r3, ip
 8017498:	435b      	muls	r3, r3
 801749a:	fb00 3300 	mla	r3, r0, r0, r3
 801749e:	42ab      	cmp	r3, r5
 80174a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80174a2:	d208      	bcs.n	80174b6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80174a4:	9803      	ldr	r0, [sp, #12]
 80174a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80174a8:	6001      	str	r1, [r0, #0]
 80174aa:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80174ac:	9805      	ldr	r0, [sp, #20]
 80174ae:	8008      	strh	r0, [r1, #0]
 80174b0:	992b      	ldr	r1, [sp, #172]	; 0xac
 80174b2:	461d      	mov	r5, r3
 80174b4:	800f      	strh	r7, [r1, #0]
 80174b6:	4692      	mov	sl, r2
 80174b8:	f10b 0b01 	add.w	fp, fp, #1
 80174bc:	f1bb 0f04 	cmp.w	fp, #4
 80174c0:	f104 0408 	add.w	r4, r4, #8
 80174c4:	d19c      	bne.n	8017400 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80174c6:	9b00      	ldr	r3, [sp, #0]
 80174c8:	9c08      	ldr	r4, [sp, #32]
 80174ca:	444b      	add	r3, r9
 80174cc:	4544      	cmp	r4, r8
 80174ce:	9300      	str	r3, [sp, #0]
 80174d0:	d187      	bne.n	80173e2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80174d2:	b021      	add	sp, #132	; 0x84
 80174d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174d8:	f04f 35ff 	mov.w	r5, #4294967295
 80174dc:	e766      	b.n	80173ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80174de:	bf00      	nop
 80174e0:	2000977c 	.word	0x2000977c
 80174e4:	0802fc4c 	.word	0x0802fc4c

080174e8 <_ZN8touchgfx4RectaNERKS0_>:
 80174e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80174ec:	f9b1 7000 	ldrsh.w	r7, [r1]
 80174f0:	888c      	ldrh	r4, [r1, #4]
 80174f2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80174f6:	443c      	add	r4, r7
 80174f8:	b2a4      	uxth	r4, r4
 80174fa:	fa0f f884 	sxth.w	r8, r4
 80174fe:	45c1      	cmp	r9, r8
 8017500:	da2f      	bge.n	8017562 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017502:	8882      	ldrh	r2, [r0, #4]
 8017504:	444a      	add	r2, r9
 8017506:	b292      	uxth	r2, r2
 8017508:	fa0f fe82 	sxth.w	lr, r2
 801750c:	4577      	cmp	r7, lr
 801750e:	da28      	bge.n	8017562 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017510:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017514:	88cb      	ldrh	r3, [r1, #6]
 8017516:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801751a:	442b      	add	r3, r5
 801751c:	b21b      	sxth	r3, r3
 801751e:	429e      	cmp	r6, r3
 8017520:	da1f      	bge.n	8017562 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017522:	88c3      	ldrh	r3, [r0, #6]
 8017524:	4433      	add	r3, r6
 8017526:	b29b      	uxth	r3, r3
 8017528:	fa0f fc83 	sxth.w	ip, r3
 801752c:	4565      	cmp	r5, ip
 801752e:	da18      	bge.n	8017562 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017530:	454f      	cmp	r7, r9
 8017532:	bfb8      	it	lt
 8017534:	464f      	movlt	r7, r9
 8017536:	42b5      	cmp	r5, r6
 8017538:	bfb8      	it	lt
 801753a:	4635      	movlt	r5, r6
 801753c:	45f0      	cmp	r8, lr
 801753e:	bfd8      	it	le
 8017540:	4622      	movle	r2, r4
 8017542:	1bd2      	subs	r2, r2, r7
 8017544:	8082      	strh	r2, [r0, #4]
 8017546:	884a      	ldrh	r2, [r1, #2]
 8017548:	88c9      	ldrh	r1, [r1, #6]
 801754a:	8007      	strh	r7, [r0, #0]
 801754c:	440a      	add	r2, r1
 801754e:	b292      	uxth	r2, r2
 8017550:	b211      	sxth	r1, r2
 8017552:	458c      	cmp	ip, r1
 8017554:	bfa8      	it	ge
 8017556:	4613      	movge	r3, r2
 8017558:	1b5b      	subs	r3, r3, r5
 801755a:	80c3      	strh	r3, [r0, #6]
 801755c:	8045      	strh	r5, [r0, #2]
 801755e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017562:	2300      	movs	r3, #0
 8017564:	8003      	strh	r3, [r0, #0]
 8017566:	8043      	strh	r3, [r0, #2]
 8017568:	8083      	strh	r3, [r0, #4]
 801756a:	80c3      	strh	r3, [r0, #6]
 801756c:	e7f7      	b.n	801755e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801756e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801756e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017572:	2b00      	cmp	r3, #0
 8017574:	dd06      	ble.n	8017584 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8017576:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801757a:	2800      	cmp	r0, #0
 801757c:	bfcc      	ite	gt
 801757e:	2000      	movgt	r0, #0
 8017580:	2001      	movle	r0, #1
 8017582:	4770      	bx	lr
 8017584:	2001      	movs	r0, #1
 8017586:	4770      	bx	lr

08017588 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8017588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801758c:	2300      	movs	r3, #0
 801758e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017590:	8003      	strh	r3, [r0, #0]
 8017592:	4604      	mov	r4, r0
 8017594:	8043      	strh	r3, [r0, #2]
 8017596:	8083      	strh	r3, [r0, #4]
 8017598:	80c3      	strh	r3, [r0, #6]
 801759a:	2d00      	cmp	r5, #0
 801759c:	d040      	beq.n	8017620 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801759e:	1d28      	adds	r0, r5, #4
 80175a0:	f7ff ffe5 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 80175a4:	b988      	cbnz	r0, 80175ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80175a6:	4620      	mov	r0, r4
 80175a8:	f7ff ffe1 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 80175ac:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80175b0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80175b4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80175b8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80175bc:	b138      	cbz	r0, 80175ce <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80175be:	8022      	strh	r2, [r4, #0]
 80175c0:	8063      	strh	r3, [r4, #2]
 80175c2:	f8a4 e004 	strh.w	lr, [r4, #4]
 80175c6:	f8a4 c006 	strh.w	ip, [r4, #6]
 80175ca:	69ad      	ldr	r5, [r5, #24]
 80175cc:	e7e5      	b.n	801759a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80175ce:	f9b4 0000 	ldrsh.w	r0, [r4]
 80175d2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80175d6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80175da:	4290      	cmp	r0, r2
 80175dc:	4607      	mov	r7, r0
 80175de:	bfa8      	it	ge
 80175e0:	4617      	movge	r7, r2
 80175e2:	4472      	add	r2, lr
 80175e4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80175e8:	8027      	strh	r7, [r4, #0]
 80175ea:	4299      	cmp	r1, r3
 80175ec:	460e      	mov	r6, r1
 80175ee:	4440      	add	r0, r8
 80175f0:	bfa8      	it	ge
 80175f2:	461e      	movge	r6, r3
 80175f4:	4471      	add	r1, lr
 80175f6:	4463      	add	r3, ip
 80175f8:	b200      	sxth	r0, r0
 80175fa:	b212      	sxth	r2, r2
 80175fc:	b209      	sxth	r1, r1
 80175fe:	b21b      	sxth	r3, r3
 8017600:	4290      	cmp	r0, r2
 8017602:	bfac      	ite	ge
 8017604:	ebc7 0200 	rsbge	r2, r7, r0
 8017608:	ebc7 0202 	rsblt	r2, r7, r2
 801760c:	4299      	cmp	r1, r3
 801760e:	bfac      	ite	ge
 8017610:	ebc6 0301 	rsbge	r3, r6, r1
 8017614:	ebc6 0303 	rsblt	r3, r6, r3
 8017618:	8066      	strh	r6, [r4, #2]
 801761a:	80a2      	strh	r2, [r4, #4]
 801761c:	80e3      	strh	r3, [r4, #6]
 801761e:	e7d4      	b.n	80175ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017620:	4620      	mov	r0, r4
 8017622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017626 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8017626:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801762a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801762e:	b383      	cbz	r3, 8017692 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017630:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017632:	b374      	cbz	r4, 8017692 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017634:	f9b1 5000 	ldrsh.w	r5, [r1]
 8017638:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801763c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8017640:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8017644:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017648:	b303      	cbz	r3, 801768c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801764a:	4668      	mov	r0, sp
 801764c:	1d21      	adds	r1, r4, #4
 801764e:	f8ad 5000 	strh.w	r5, [sp]
 8017652:	f8ad 6002 	strh.w	r6, [sp, #2]
 8017656:	f8ad 7004 	strh.w	r7, [sp, #4]
 801765a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801765e:	f7ff ff43 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 8017662:	4668      	mov	r0, sp
 8017664:	f7ff ff83 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017668:	b980      	cbnz	r0, 801768c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801766a:	f8bd 3000 	ldrh.w	r3, [sp]
 801766e:	88a2      	ldrh	r2, [r4, #4]
 8017670:	1a9b      	subs	r3, r3, r2
 8017672:	f8ad 3000 	strh.w	r3, [sp]
 8017676:	88e2      	ldrh	r2, [r4, #6]
 8017678:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801767c:	1a9b      	subs	r3, r3, r2
 801767e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017682:	6823      	ldr	r3, [r4, #0]
 8017684:	4669      	mov	r1, sp
 8017686:	689b      	ldr	r3, [r3, #8]
 8017688:	4620      	mov	r0, r4
 801768a:	4798      	blx	r3
 801768c:	69a4      	ldr	r4, [r4, #24]
 801768e:	2c00      	cmp	r4, #0
 8017690:	d1d8      	bne.n	8017644 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8017692:	b002      	add	sp, #8
 8017694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017698 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8017698:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801769a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801769e:	460d      	mov	r5, r1
 80176a0:	4616      	mov	r6, r2
 80176a2:	b323      	cbz	r3, 80176ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80176a4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80176a6:	b314      	cbz	r4, 80176ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80176a8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80176ac:	b1eb      	cbz	r3, 80176ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80176ae:	6828      	ldr	r0, [r5, #0]
 80176b0:	6869      	ldr	r1, [r5, #4]
 80176b2:	466b      	mov	r3, sp
 80176b4:	c303      	stmia	r3!, {r0, r1}
 80176b6:	4668      	mov	r0, sp
 80176b8:	1d21      	adds	r1, r4, #4
 80176ba:	f7ff ff15 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 80176be:	4668      	mov	r0, sp
 80176c0:	f7ff ff55 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 80176c4:	b988      	cbnz	r0, 80176ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80176c6:	f8bd 3000 	ldrh.w	r3, [sp]
 80176ca:	88a2      	ldrh	r2, [r4, #4]
 80176cc:	1a9b      	subs	r3, r3, r2
 80176ce:	f8ad 3000 	strh.w	r3, [sp]
 80176d2:	88e2      	ldrh	r2, [r4, #6]
 80176d4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80176d8:	1a9b      	subs	r3, r3, r2
 80176da:	f8ad 3002 	strh.w	r3, [sp, #2]
 80176de:	6823      	ldr	r3, [r4, #0]
 80176e0:	4632      	mov	r2, r6
 80176e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80176e4:	4669      	mov	r1, sp
 80176e6:	4620      	mov	r0, r4
 80176e8:	4798      	blx	r3
 80176ea:	69a4      	ldr	r4, [r4, #24]
 80176ec:	e7db      	b.n	80176a6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80176ee:	b002      	add	sp, #8
 80176f0:	bd70      	pop	{r4, r5, r6, pc}

080176f2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80176f2:	b513      	push	{r0, r1, r4, lr}
 80176f4:	6803      	ldr	r3, [r0, #0]
 80176f6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 80176fa:	2300      	movs	r3, #0
 80176fc:	e9cd 3300 	strd	r3, r3, [sp]
 8017700:	466b      	mov	r3, sp
 8017702:	47a0      	blx	r4
 8017704:	b002      	add	sp, #8
 8017706:	bd10      	pop	{r4, pc}

08017708 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8017708:	2301      	movs	r3, #1
 801770a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801770e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017712:	4770      	bx	lr

08017714 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8017714:	2301      	movs	r3, #1
 8017716:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801771a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801771e:	4770      	bx	lr

08017720 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8017720:	6843      	ldr	r3, [r0, #4]
 8017722:	2201      	movs	r2, #1
 8017724:	725a      	strb	r2, [r3, #9]
 8017726:	6840      	ldr	r0, [r0, #4]
 8017728:	6803      	ldr	r3, [r0, #0]
 801772a:	691b      	ldr	r3, [r3, #16]
 801772c:	4718      	bx	r3

0801772e <_ZN8touchgfx3HAL8flushDMAEv>:
 801772e:	6840      	ldr	r0, [r0, #4]
 8017730:	6803      	ldr	r3, [r0, #0]
 8017732:	689b      	ldr	r3, [r3, #8]
 8017734:	4718      	bx	r3

08017736 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8017736:	b530      	push	{r4, r5, lr}
 8017738:	b08b      	sub	sp, #44	; 0x2c
 801773a:	6804      	ldr	r4, [r0, #0]
 801773c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8017740:	9509      	str	r5, [sp, #36]	; 0x24
 8017742:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8017746:	9508      	str	r5, [sp, #32]
 8017748:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801774c:	9507      	str	r5, [sp, #28]
 801774e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8017752:	9506      	str	r5, [sp, #24]
 8017754:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8017758:	9505      	str	r5, [sp, #20]
 801775a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801775e:	9504      	str	r5, [sp, #16]
 8017760:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8017764:	9503      	str	r5, [sp, #12]
 8017766:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801776a:	9502      	str	r5, [sp, #8]
 801776c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8017770:	e9cd 3500 	strd	r3, r5, [sp]
 8017774:	4613      	mov	r3, r2
 8017776:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8017778:	2200      	movs	r2, #0
 801777a:	47a0      	blx	r4
 801777c:	b00b      	add	sp, #44	; 0x2c
 801777e:	bd30      	pop	{r4, r5, pc}

08017780 <_ZN8touchgfx3HAL10beginFrameEv>:
 8017780:	4b04      	ldr	r3, [pc, #16]	; (8017794 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8017782:	781b      	ldrb	r3, [r3, #0]
 8017784:	b123      	cbz	r3, 8017790 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8017786:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801778a:	f080 0001 	eor.w	r0, r0, #1
 801778e:	4770      	bx	lr
 8017790:	2001      	movs	r0, #1
 8017792:	4770      	bx	lr
 8017794:	2000977a 	.word	0x2000977a

08017798 <_ZN8touchgfx3HAL8endFrameEv>:
 8017798:	b510      	push	{r4, lr}
 801779a:	4604      	mov	r4, r0
 801779c:	6840      	ldr	r0, [r0, #4]
 801779e:	6803      	ldr	r3, [r0, #0]
 80177a0:	689b      	ldr	r3, [r3, #8]
 80177a2:	4798      	blx	r3
 80177a4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80177a8:	b113      	cbz	r3, 80177b0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80177aa:	2301      	movs	r3, #1
 80177ac:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80177b0:	bd10      	pop	{r4, pc}

080177b2 <_ZN8touchgfx3HAL10initializeEv>:
 80177b2:	b510      	push	{r4, lr}
 80177b4:	4604      	mov	r4, r0
 80177b6:	f7fd ff89 	bl	80156cc <_ZN8touchgfx10OSWrappers10initializeEv>
 80177ba:	6860      	ldr	r0, [r4, #4]
 80177bc:	6803      	ldr	r3, [r0, #0]
 80177be:	68db      	ldr	r3, [r3, #12]
 80177c0:	4798      	blx	r3
 80177c2:	68e0      	ldr	r0, [r4, #12]
 80177c4:	6803      	ldr	r3, [r0, #0]
 80177c6:	689b      	ldr	r3, [r3, #8]
 80177c8:	4798      	blx	r3
 80177ca:	6823      	ldr	r3, [r4, #0]
 80177cc:	4620      	mov	r0, r4
 80177ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177d4:	4718      	bx	r3

080177d6 <_ZN8touchgfx3HAL9taskEntryEv>:
 80177d6:	b508      	push	{r3, lr}
 80177d8:	6803      	ldr	r3, [r0, #0]
 80177da:	4604      	mov	r4, r0
 80177dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80177de:	4798      	blx	r3
 80177e0:	6823      	ldr	r3, [r4, #0]
 80177e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80177e4:	4620      	mov	r0, r4
 80177e6:	4798      	blx	r3
 80177e8:	f7fd ffe6 	bl	80157b8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80177ec:	6823      	ldr	r3, [r4, #0]
 80177ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80177f0:	e7f8      	b.n	80177e4 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080177f4 <_ZN8touchgfx3HAL4tickEv>:
 80177f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80177f6:	6803      	ldr	r3, [r0, #0]
 80177f8:	4d5c      	ldr	r5, [pc, #368]	; (801796c <_ZN8touchgfx3HAL4tickEv+0x178>)
 80177fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80177fe:	4604      	mov	r4, r0
 8017800:	4798      	blx	r3
 8017802:	2800      	cmp	r0, #0
 8017804:	f000 8097 	beq.w	8017936 <_ZN8touchgfx3HAL4tickEv+0x142>
 8017808:	2001      	movs	r0, #1
 801780a:	f7fd fd0b 	bl	8015224 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801780e:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8017812:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017816:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801781a:	2600      	movs	r6, #0
 801781c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8017820:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017824:	b133      	cbz	r3, 8017834 <_ZN8touchgfx3HAL4tickEv+0x40>
 8017826:	6823      	ldr	r3, [r4, #0]
 8017828:	4620      	mov	r0, r4
 801782a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801782e:	4798      	blx	r3
 8017830:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8017834:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017838:	6862      	ldr	r2, [r4, #4]
 801783a:	f083 0301 	eor.w	r3, r3, #1
 801783e:	7253      	strb	r3, [r2, #9]
 8017840:	2601      	movs	r6, #1
 8017842:	702e      	strb	r6, [r5, #0]
 8017844:	f004 fc1e 	bl	801c084 <_ZN8touchgfx11Application11getInstanceEv>
 8017848:	6803      	ldr	r3, [r0, #0]
 801784a:	4631      	mov	r1, r6
 801784c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801784e:	4798      	blx	r3
 8017850:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017854:	b90b      	cbnz	r3, 801785a <_ZN8touchgfx3HAL4tickEv+0x66>
 8017856:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801785a:	f004 fc13 	bl	801c084 <_ZN8touchgfx11Application11getInstanceEv>
 801785e:	6803      	ldr	r3, [r0, #0]
 8017860:	695b      	ldr	r3, [r3, #20]
 8017862:	4798      	blx	r3
 8017864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017866:	6803      	ldr	r3, [r0, #0]
 8017868:	691b      	ldr	r3, [r3, #16]
 801786a:	4798      	blx	r3
 801786c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017870:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8017874:	3b01      	subs	r3, #1
 8017876:	b2db      	uxtb	r3, r3
 8017878:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801787c:	b10a      	cbz	r2, 8017882 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801787e:	2b00      	cmp	r3, #0
 8017880:	d1eb      	bne.n	801785a <_ZN8touchgfx3HAL4tickEv+0x66>
 8017882:	4a3b      	ldr	r2, [pc, #236]	; (8017970 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8017884:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8017888:	7813      	ldrb	r3, [r2, #0]
 801788a:	3301      	adds	r3, #1
 801788c:	b25b      	sxtb	r3, r3
 801788e:	4299      	cmp	r1, r3
 8017890:	7013      	strb	r3, [r2, #0]
 8017892:	dc10      	bgt.n	80178b6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017894:	68e0      	ldr	r0, [r4, #12]
 8017896:	2300      	movs	r3, #0
 8017898:	7013      	strb	r3, [r2, #0]
 801789a:	6803      	ldr	r3, [r0, #0]
 801789c:	aa03      	add	r2, sp, #12
 801789e:	68db      	ldr	r3, [r3, #12]
 80178a0:	a902      	add	r1, sp, #8
 80178a2:	4798      	blx	r3
 80178a4:	6823      	ldr	r3, [r4, #0]
 80178a6:	2800      	cmp	r0, #0
 80178a8:	d051      	beq.n	801794e <_ZN8touchgfx3HAL4tickEv+0x15a>
 80178aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80178ae:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80178b2:	4620      	mov	r0, r4
 80178b4:	4798      	blx	r3
 80178b6:	6960      	ldr	r0, [r4, #20]
 80178b8:	2300      	movs	r3, #0
 80178ba:	f88d 3007 	strb.w	r3, [sp, #7]
 80178be:	b158      	cbz	r0, 80178d8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80178c0:	6803      	ldr	r3, [r0, #0]
 80178c2:	f10d 0107 	add.w	r1, sp, #7
 80178c6:	68db      	ldr	r3, [r3, #12]
 80178c8:	4798      	blx	r3
 80178ca:	b128      	cbz	r0, 80178d8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80178cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80178ce:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80178d2:	6803      	ldr	r3, [r0, #0]
 80178d4:	68db      	ldr	r3, [r3, #12]
 80178d6:	4798      	blx	r3
 80178d8:	f104 001c 	add.w	r0, r4, #28
 80178dc:	f013 ff52 	bl	802b784 <_ZN8touchgfx8Gestures4tickEv>
 80178e0:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80178e4:	b30b      	cbz	r3, 801792a <_ZN8touchgfx3HAL4tickEv+0x136>
 80178e6:	6920      	ldr	r0, [r4, #16]
 80178e8:	6803      	ldr	r3, [r0, #0]
 80178ea:	691b      	ldr	r3, [r3, #16]
 80178ec:	4798      	blx	r3
 80178ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80178f0:	4606      	mov	r6, r0
 80178f2:	b903      	cbnz	r3, 80178f6 <_ZN8touchgfx3HAL4tickEv+0x102>
 80178f4:	6720      	str	r0, [r4, #112]	; 0x70
 80178f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80178f8:	4a1e      	ldr	r2, [pc, #120]	; (8017974 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80178fa:	1af3      	subs	r3, r6, r3
 80178fc:	4293      	cmp	r3, r2
 80178fe:	d914      	bls.n	801792a <_ZN8touchgfx3HAL4tickEv+0x136>
 8017900:	6920      	ldr	r0, [r4, #16]
 8017902:	6803      	ldr	r3, [r0, #0]
 8017904:	699b      	ldr	r3, [r3, #24]
 8017906:	4798      	blx	r3
 8017908:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801790a:	2264      	movs	r2, #100	; 0x64
 801790c:	1af3      	subs	r3, r6, r3
 801790e:	fbb3 f3f2 	udiv	r3, r3, r2
 8017912:	fbb0 f0f3 	udiv	r0, r0, r3
 8017916:	2800      	cmp	r0, #0
 8017918:	dc1e      	bgt.n	8017958 <_ZN8touchgfx3HAL4tickEv+0x164>
 801791a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801791e:	6920      	ldr	r0, [r4, #16]
 8017920:	6803      	ldr	r3, [r0, #0]
 8017922:	2100      	movs	r1, #0
 8017924:	69db      	ldr	r3, [r3, #28]
 8017926:	4798      	blx	r3
 8017928:	6726      	str	r6, [r4, #112]	; 0x70
 801792a:	f004 fbab 	bl	801c084 <_ZN8touchgfx11Application11getInstanceEv>
 801792e:	6803      	ldr	r3, [r0, #0]
 8017930:	2100      	movs	r1, #0
 8017932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017934:	4798      	blx	r3
 8017936:	6823      	ldr	r3, [r4, #0]
 8017938:	4620      	mov	r0, r4
 801793a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801793e:	4798      	blx	r3
 8017940:	2001      	movs	r0, #1
 8017942:	f7fd fc7a 	bl	801523a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017946:	2300      	movs	r3, #0
 8017948:	702b      	strb	r3, [r5, #0]
 801794a:	b004      	add	sp, #16
 801794c:	bd70      	pop	{r4, r5, r6, pc}
 801794e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017952:	4620      	mov	r0, r4
 8017954:	4798      	blx	r3
 8017956:	e7ae      	b.n	80178b6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017958:	2863      	cmp	r0, #99	; 0x63
 801795a:	bfcb      	itete	gt
 801795c:	2300      	movgt	r3, #0
 801795e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8017962:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8017966:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801796a:	e7d8      	b.n	801791e <_ZN8touchgfx3HAL4tickEv+0x12a>
 801796c:	20009780 	.word	0x20009780
 8017970:	20009781 	.word	0x20009781
 8017974:	05f5e100 	.word	0x05f5e100

08017978 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8017978:	f7fd beea 	b.w	8015750 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801797c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801797c:	6581      	str	r1, [r0, #88]	; 0x58
 801797e:	301c      	adds	r0, #28
 8017980:	f013 befe 	b.w	802b780 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08017984 <_ZN8touchgfx3HAL5touchEll>:
 8017984:	b530      	push	{r4, r5, lr}
 8017986:	b087      	sub	sp, #28
 8017988:	4604      	mov	r4, r0
 801798a:	a804      	add	r0, sp, #16
 801798c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8017990:	f004 f93e 	bl	801bc10 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8017994:	9b04      	ldr	r3, [sp, #16]
 8017996:	f8ad 300c 	strh.w	r3, [sp, #12]
 801799a:	a906      	add	r1, sp, #24
 801799c:	9b05      	ldr	r3, [sp, #20]
 801799e:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80179a2:	a803      	add	r0, sp, #12
 80179a4:	f004 f986 	bl	801bcb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80179a8:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80179ac:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80179b0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80179b4:	f104 001c 	add.w	r0, r4, #28
 80179b8:	b189      	cbz	r1, 80179de <_ZN8touchgfx3HAL5touchEll+0x5a>
 80179ba:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80179be:	9300      	str	r3, [sp, #0]
 80179c0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80179c4:	4613      	mov	r3, r2
 80179c6:	462a      	mov	r2, r5
 80179c8:	f013 feea 	bl	802b7a0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80179cc:	b128      	cbz	r0, 80179da <_ZN8touchgfx3HAL5touchEll+0x56>
 80179ce:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80179d2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80179d4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80179d8:	6623      	str	r3, [r4, #96]	; 0x60
 80179da:	b007      	add	sp, #28
 80179dc:	bd30      	pop	{r4, r5, pc}
 80179de:	f013 ff23 	bl	802b828 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80179e2:	2301      	movs	r3, #1
 80179e4:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80179e8:	e7f1      	b.n	80179ce <_ZN8touchgfx3HAL5touchEll+0x4a>

080179ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80179ea:	b510      	push	{r4, lr}
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d046      	beq.n	8017a7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80179f0:	ea81 0002 	eor.w	r0, r1, r2
 80179f4:	07c4      	lsls	r4, r0, #31
 80179f6:	d508      	bpl.n	8017a0a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80179f8:	440b      	add	r3, r1
 80179fa:	3a01      	subs	r2, #1
 80179fc:	428b      	cmp	r3, r1
 80179fe:	d93e      	bls.n	8017a7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017a00:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017a04:	f801 0b01 	strb.w	r0, [r1], #1
 8017a08:	e7f8      	b.n	80179fc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8017a0a:	07d0      	lsls	r0, r2, #31
 8017a0c:	bf42      	ittt	mi
 8017a0e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8017a12:	f801 0b01 	strbmi.w	r0, [r1], #1
 8017a16:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8017a1a:	2b01      	cmp	r3, #1
 8017a1c:	d911      	bls.n	8017a42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017a1e:	ea81 0402 	eor.w	r4, r1, r2
 8017a22:	07a4      	lsls	r4, r4, #30
 8017a24:	4610      	mov	r0, r2
 8017a26:	d022      	beq.n	8017a6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8017a28:	f023 0401 	bic.w	r4, r3, #1
 8017a2c:	440c      	add	r4, r1
 8017a2e:	428c      	cmp	r4, r1
 8017a30:	4602      	mov	r2, r0
 8017a32:	d904      	bls.n	8017a3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8017a34:	8812      	ldrh	r2, [r2, #0]
 8017a36:	f821 2b02 	strh.w	r2, [r1], #2
 8017a3a:	3002      	adds	r0, #2
 8017a3c:	e7f7      	b.n	8017a2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8017a3e:	f003 0301 	and.w	r3, r3, #1
 8017a42:	f023 0003 	bic.w	r0, r3, #3
 8017a46:	4408      	add	r0, r1
 8017a48:	4288      	cmp	r0, r1
 8017a4a:	4614      	mov	r4, r2
 8017a4c:	d904      	bls.n	8017a58 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8017a4e:	6824      	ldr	r4, [r4, #0]
 8017a50:	f841 4b04 	str.w	r4, [r1], #4
 8017a54:	3204      	adds	r2, #4
 8017a56:	e7f7      	b.n	8017a48 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8017a58:	f003 0303 	and.w	r3, r3, #3
 8017a5c:	440b      	add	r3, r1
 8017a5e:	3a01      	subs	r2, #1
 8017a60:	428b      	cmp	r3, r1
 8017a62:	d90c      	bls.n	8017a7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017a64:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017a68:	f801 0b01 	strb.w	r0, [r1], #1
 8017a6c:	e7f8      	b.n	8017a60 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8017a6e:	0790      	lsls	r0, r2, #30
 8017a70:	d0e7      	beq.n	8017a42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017a72:	f832 0b02 	ldrh.w	r0, [r2], #2
 8017a76:	f821 0b02 	strh.w	r0, [r1], #2
 8017a7a:	3b02      	subs	r3, #2
 8017a7c:	e7e1      	b.n	8017a42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017a7e:	2001      	movs	r0, #1
 8017a80:	bd10      	pop	{r4, pc}

08017a82 <_ZN8touchgfx3HAL7noTouchEv>:
 8017a82:	b510      	push	{r4, lr}
 8017a84:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8017a88:	4604      	mov	r4, r0
 8017a8a:	b153      	cbz	r3, 8017aa2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8017a8c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8017a90:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8017a94:	2101      	movs	r1, #1
 8017a96:	301c      	adds	r0, #28
 8017a98:	f013 fec6 	bl	802b828 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017aa2:	bd10      	pop	{r4, pc}

08017aa4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8017aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017aa8:	4604      	mov	r4, r0
 8017aaa:	6980      	ldr	r0, [r0, #24]
 8017aac:	b085      	sub	sp, #20
 8017aae:	460f      	mov	r7, r1
 8017ab0:	4690      	mov	r8, r2
 8017ab2:	4699      	mov	r9, r3
 8017ab4:	b930      	cbnz	r0, 8017ac4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8017ab6:	4b1c      	ldr	r3, [pc, #112]	; (8017b28 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8017ab8:	4a1c      	ldr	r2, [pc, #112]	; (8017b2c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8017aba:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8017abe:	481c      	ldr	r0, [pc, #112]	; (8017b30 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8017ac0:	f016 f9fe 	bl	802dec0 <__assert_func>
 8017ac4:	ad04      	add	r5, sp, #16
 8017ac6:	2600      	movs	r6, #0
 8017ac8:	f845 6d04 	str.w	r6, [r5, #-4]!
 8017acc:	6806      	ldr	r6, [r0, #0]
 8017ace:	9501      	str	r5, [sp, #4]
 8017ad0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8017ad4:	9500      	str	r5, [sp, #0]
 8017ad6:	6835      	ldr	r5, [r6, #0]
 8017ad8:	47a8      	blx	r5
 8017ada:	4d16      	ldr	r5, [pc, #88]	; (8017b34 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8017adc:	4606      	mov	r6, r0
 8017ade:	f8a5 9000 	strh.w	r9, [r5]
 8017ae2:	f7f8 fa8f 	bl	8010004 <_ZN8touchgfx3HAL3lcdEv>
 8017ae6:	6803      	ldr	r3, [r0, #0]
 8017ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017aea:	4798      	blx	r3
 8017aec:	2801      	cmp	r0, #1
 8017aee:	d012      	beq.n	8017b16 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8017af0:	d306      	bcc.n	8017b00 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8017af2:	280d      	cmp	r0, #13
 8017af4:	d80b      	bhi.n	8017b0e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017af6:	4b10      	ldr	r3, [pc, #64]	; (8017b38 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8017af8:	4a0c      	ldr	r2, [pc, #48]	; (8017b2c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8017afa:	f240 1167 	movw	r1, #359	; 0x167
 8017afe:	e7de      	b.n	8017abe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8017b00:	882b      	ldrh	r3, [r5, #0]
 8017b02:	fb08 7203 	mla	r2, r8, r3, r7
 8017b06:	9b03      	ldr	r3, [sp, #12]
 8017b08:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8017b0c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8017b0e:	4630      	mov	r0, r6
 8017b10:	b005      	add	sp, #20
 8017b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b16:	882a      	ldrh	r2, [r5, #0]
 8017b18:	9b03      	ldr	r3, [sp, #12]
 8017b1a:	fb08 7202 	mla	r2, r8, r2, r7
 8017b1e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017b22:	1a9a      	subs	r2, r3, r2
 8017b24:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017b26:	e7f2      	b.n	8017b0e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017b28:	08030cc8 	.word	0x08030cc8
 8017b2c:	08031057 	.word	0x08031057
 8017b30:	08030d0d 	.word	0x08030d0d
 8017b34:	20009776 	.word	0x20009776
 8017b38:	08030d33 	.word	0x08030d33

08017b3c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8017b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b3e:	b08b      	sub	sp, #44	; 0x2c
 8017b40:	4617      	mov	r7, r2
 8017b42:	4604      	mov	r4, r0
 8017b44:	460e      	mov	r6, r1
 8017b46:	461d      	mov	r5, r3
 8017b48:	f7f8 fa5c 	bl	8010004 <_ZN8touchgfx3HAL3lcdEv>
 8017b4c:	6803      	ldr	r3, [r0, #0]
 8017b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b50:	4798      	blx	r3
 8017b52:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017b56:	9007      	str	r0, [sp, #28]
 8017b58:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017b5c:	4b0d      	ldr	r3, [pc, #52]	; (8017b94 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8017b5e:	6822      	ldr	r2, [r4, #0]
 8017b60:	881b      	ldrh	r3, [r3, #0]
 8017b62:	9306      	str	r3, [sp, #24]
 8017b64:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017b68:	9305      	str	r3, [sp, #20]
 8017b6a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017b6e:	9304      	str	r3, [sp, #16]
 8017b70:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017b74:	9303      	str	r3, [sp, #12]
 8017b76:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017b7a:	9302      	str	r3, [sp, #8]
 8017b7c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017b80:	e9cd 5300 	strd	r5, r3, [sp]
 8017b84:	4631      	mov	r1, r6
 8017b86:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8017b88:	463b      	mov	r3, r7
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	4620      	mov	r0, r4
 8017b8e:	47a8      	blx	r5
 8017b90:	b00b      	add	sp, #44	; 0x2c
 8017b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b94:	20009776 	.word	0x20009776

08017b98 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8017b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b9c:	4698      	mov	r8, r3
 8017b9e:	6803      	ldr	r3, [r0, #0]
 8017ba0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8017ba2:	4b15      	ldr	r3, [pc, #84]	; (8017bf8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8017ba4:	b08b      	sub	sp, #44	; 0x2c
 8017ba6:	4617      	mov	r7, r2
 8017ba8:	f8b3 9000 	ldrh.w	r9, [r3]
 8017bac:	460e      	mov	r6, r1
 8017bae:	4604      	mov	r4, r0
 8017bb0:	f7f8 fa28 	bl	8010004 <_ZN8touchgfx3HAL3lcdEv>
 8017bb4:	6803      	ldr	r3, [r0, #0]
 8017bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bb8:	4798      	blx	r3
 8017bba:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017bbe:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017bc2:	2302      	movs	r3, #2
 8017bc4:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8017bc8:	2301      	movs	r3, #1
 8017bca:	9305      	str	r3, [sp, #20]
 8017bcc:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017bd0:	9304      	str	r3, [sp, #16]
 8017bd2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017bd6:	9303      	str	r3, [sp, #12]
 8017bd8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017bdc:	9302      	str	r3, [sp, #8]
 8017bde:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017be2:	2200      	movs	r2, #0
 8017be4:	e9cd 8300 	strd	r8, r3, [sp]
 8017be8:	4631      	mov	r1, r6
 8017bea:	463b      	mov	r3, r7
 8017bec:	4620      	mov	r0, r4
 8017bee:	47a8      	blx	r5
 8017bf0:	b00b      	add	sp, #44	; 0x2c
 8017bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017bf6:	bf00      	nop
 8017bf8:	20009776 	.word	0x20009776

08017bfc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8017bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c00:	4698      	mov	r8, r3
 8017c02:	6803      	ldr	r3, [r0, #0]
 8017c04:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8017c06:	4b11      	ldr	r3, [pc, #68]	; (8017c4c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8017c08:	b087      	sub	sp, #28
 8017c0a:	f8b3 9000 	ldrh.w	r9, [r3]
 8017c0e:	460e      	mov	r6, r1
 8017c10:	4617      	mov	r7, r2
 8017c12:	4604      	mov	r4, r0
 8017c14:	f7f8 f9f6 	bl	8010004 <_ZN8touchgfx3HAL3lcdEv>
 8017c18:	6803      	ldr	r3, [r0, #0]
 8017c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c1c:	4798      	blx	r3
 8017c1e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8017c22:	f8cd 900c 	str.w	r9, [sp, #12]
 8017c26:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8017c2a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017c2e:	9302      	str	r3, [sp, #8]
 8017c30:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8017c34:	9301      	str	r3, [sp, #4]
 8017c36:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017c3a:	9300      	str	r3, [sp, #0]
 8017c3c:	463a      	mov	r2, r7
 8017c3e:	4643      	mov	r3, r8
 8017c40:	4631      	mov	r1, r6
 8017c42:	4620      	mov	r0, r4
 8017c44:	47a8      	blx	r5
 8017c46:	b007      	add	sp, #28
 8017c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c4c:	20009776 	.word	0x20009776

08017c50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c54:	4604      	mov	r4, r0
 8017c56:	b08f      	sub	sp, #60	; 0x3c
 8017c58:	4610      	mov	r0, r2
 8017c5a:	460d      	mov	r5, r1
 8017c5c:	4691      	mov	r9, r2
 8017c5e:	461e      	mov	r6, r3
 8017c60:	f007 fd5c 	bl	801f71c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017c64:	2800      	cmp	r0, #0
 8017c66:	f000 809c 	beq.w	8017da2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 8017c6a:	6823      	ldr	r3, [r4, #0]
 8017c6c:	f8df b194 	ldr.w	fp, [pc, #404]	; 8017e04 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8017c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c72:	f8df a194 	ldr.w	sl, [pc, #404]	; 8017e08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8017c76:	4f60      	ldr	r7, [pc, #384]	; (8017df8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8017c78:	4620      	mov	r0, r4
 8017c7a:	4798      	blx	r3
 8017c7c:	6823      	ldr	r3, [r4, #0]
 8017c7e:	4620      	mov	r0, r4
 8017c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c82:	4798      	blx	r3
 8017c84:	f8bb 3000 	ldrh.w	r3, [fp]
 8017c88:	9301      	str	r3, [sp, #4]
 8017c8a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8017c8e:	f8ba 3000 	ldrh.w	r3, [sl]
 8017c92:	9302      	str	r3, [sp, #8]
 8017c94:	883b      	ldrh	r3, [r7, #0]
 8017c96:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8017c9a:	9303      	str	r3, [sp, #12]
 8017c9c:	4b57      	ldr	r3, [pc, #348]	; (8017dfc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017c9e:	9305      	str	r3, [sp, #20]
 8017ca0:	881a      	ldrh	r2, [r3, #0]
 8017ca2:	9204      	str	r2, [sp, #16]
 8017ca4:	4640      	mov	r0, r8
 8017ca6:	f007 fdf3 	bl	801f890 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017caa:	8038      	strh	r0, [r7, #0]
 8017cac:	4640      	mov	r0, r8
 8017cae:	f007 fe29 	bl	801f904 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017cb2:	9b05      	ldr	r3, [sp, #20]
 8017cb4:	8018      	strh	r0, [r3, #0]
 8017cb6:	4b52      	ldr	r3, [pc, #328]	; (8017e00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017cb8:	781b      	ldrb	r3, [r3, #0]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d174      	bne.n	8017da8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8017cbe:	883b      	ldrh	r3, [r7, #0]
 8017cc0:	f8ab 3000 	strh.w	r3, [fp]
 8017cc4:	f8aa 0000 	strh.w	r0, [sl]
 8017cc8:	4648      	mov	r0, r9
 8017cca:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8017cce:	f007 fd25 	bl	801f71c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017cd2:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	4611      	mov	r1, r2
 8017cda:	4628      	mov	r0, r5
 8017cdc:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8017ce0:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8017ce4:	f7f8 fecc 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
 8017ce8:	2301      	movs	r3, #1
 8017cea:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8017cee:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8017cf2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	dd5c      	ble.n	8017db4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8017cfa:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	dd58      	ble.n	8017db4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8017d02:	462a      	mov	r2, r5
 8017d04:	ab0a      	add	r3, sp, #40	; 0x28
 8017d06:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017d0a:	6851      	ldr	r1, [r2, #4]
 8017d0c:	c303      	stmia	r3!, {r0, r1}
 8017d0e:	4631      	mov	r1, r6
 8017d10:	a80a      	add	r0, sp, #40	; 0x28
 8017d12:	f7ff fbe9 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 8017d16:	4b38      	ldr	r3, [pc, #224]	; (8017df8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8017d18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017d1c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017d20:	2100      	movs	r1, #0
 8017d22:	aa0a      	add	r2, sp, #40	; 0x28
 8017d24:	4b35      	ldr	r3, [pc, #212]	; (8017dfc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017d26:	910c      	str	r1, [sp, #48]	; 0x30
 8017d28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d30:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017d34:	ab08      	add	r3, sp, #32
 8017d36:	e883 0003 	stmia.w	r3, {r0, r1}
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	a90c      	add	r1, sp, #48	; 0x30
 8017d3e:	f7ff fbd3 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 8017d42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d13c      	bne.n	8017dc2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8017d48:	2000      	movs	r0, #0
 8017d4a:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8017d4e:	2600      	movs	r6, #0
 8017d50:	682a      	ldr	r2, [r5, #0]
 8017d52:	696b      	ldr	r3, [r5, #20]
 8017d54:	616e      	str	r6, [r5, #20]
 8017d56:	9305      	str	r3, [sp, #20]
 8017d58:	6892      	ldr	r2, [r2, #8]
 8017d5a:	a908      	add	r1, sp, #32
 8017d5c:	4628      	mov	r0, r5
 8017d5e:	4790      	blx	r2
 8017d60:	9b05      	ldr	r3, [sp, #20]
 8017d62:	616b      	str	r3, [r5, #20]
 8017d64:	4652      	mov	r2, sl
 8017d66:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8017d6a:	4649      	mov	r1, r9
 8017d6c:	4628      	mov	r0, r5
 8017d6e:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8017d72:	f7f8 fe85 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
 8017d76:	4b23      	ldr	r3, [pc, #140]	; (8017e04 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8017d78:	9a01      	ldr	r2, [sp, #4]
 8017d7a:	801a      	strh	r2, [r3, #0]
 8017d7c:	4b22      	ldr	r3, [pc, #136]	; (8017e08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8017d7e:	9a02      	ldr	r2, [sp, #8]
 8017d80:	801a      	strh	r2, [r3, #0]
 8017d82:	4b1d      	ldr	r3, [pc, #116]	; (8017df8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8017d84:	9a03      	ldr	r2, [sp, #12]
 8017d86:	801a      	strh	r2, [r3, #0]
 8017d88:	4b1c      	ldr	r3, [pc, #112]	; (8017dfc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017d8a:	9a04      	ldr	r2, [sp, #16]
 8017d8c:	801a      	strh	r2, [r3, #0]
 8017d8e:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8017d92:	6823      	ldr	r3, [r4, #0]
 8017d94:	4620      	mov	r0, r4
 8017d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d98:	4798      	blx	r3
 8017d9a:	6823      	ldr	r3, [r4, #0]
 8017d9c:	4620      	mov	r0, r4
 8017d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017da0:	4798      	blx	r3
 8017da2:	b00f      	add	sp, #60	; 0x3c
 8017da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017da8:	883b      	ldrh	r3, [r7, #0]
 8017daa:	f8ab 0000 	strh.w	r0, [fp]
 8017dae:	f8aa 3000 	strh.w	r3, [sl]
 8017db2:	e789      	b.n	8017cc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 8017db4:	462a      	mov	r2, r5
 8017db6:	ab0a      	add	r3, sp, #40	; 0x28
 8017db8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017dbc:	6851      	ldr	r1, [r2, #4]
 8017dbe:	c303      	stmia	r3!, {r0, r1}
 8017dc0:	e7a9      	b.n	8017d16 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 8017dc2:	a807      	add	r0, sp, #28
 8017dc4:	f007 fef6 	bl	801fbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017dc8:	4606      	mov	r6, r0
 8017dca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017dcc:	6803      	ldr	r3, [r0, #0]
 8017dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dd0:	4798      	blx	r3
 8017dd2:	4286      	cmp	r6, r0
 8017dd4:	d1b8      	bne.n	8017d48 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 8017dd6:	f7f8 f915 	bl	8010004 <_ZN8touchgfx3HAL3lcdEv>
 8017dda:	6803      	ldr	r3, [r0, #0]
 8017ddc:	4606      	mov	r6, r0
 8017dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017de0:	9305      	str	r3, [sp, #20]
 8017de2:	a807      	add	r0, sp, #28
 8017de4:	f007 fee6 	bl	801fbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017de8:	9b05      	ldr	r3, [sp, #20]
 8017dea:	4601      	mov	r1, r0
 8017dec:	4630      	mov	r0, r6
 8017dee:	4798      	blx	r3
 8017df0:	f080 0001 	eor.w	r0, r0, #1
 8017df4:	b2c0      	uxtb	r0, r0
 8017df6:	e7a8      	b.n	8017d4a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8017df8:	20009770 	.word	0x20009770
 8017dfc:	20009772 	.word	0x20009772
 8017e00:	20009774 	.word	0x20009774
 8017e04:	20009776 	.word	0x20009776
 8017e08:	20009778 	.word	0x20009778

08017e0c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017e0c:	b510      	push	{r4, lr}
 8017e0e:	4b07      	ldr	r3, [pc, #28]	; (8017e2c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8017e10:	781b      	ldrb	r3, [r3, #0]
 8017e12:	4604      	mov	r4, r0
 8017e14:	b13b      	cbz	r3, 8017e26 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017e16:	6803      	ldr	r3, [r0, #0]
 8017e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e1a:	4798      	blx	r3
 8017e1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017e1e:	4283      	cmp	r3, r0
 8017e20:	d101      	bne.n	8017e26 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017e22:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017e24:	bd10      	pop	{r4, pc}
 8017e26:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8017e28:	e7fc      	b.n	8017e24 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8017e2a:	bf00      	nop
 8017e2c:	2000977a 	.word	0x2000977a

08017e30 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8017e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e34:	b088      	sub	sp, #32
 8017e36:	461d      	mov	r5, r3
 8017e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e3c:	2400      	movs	r4, #0
 8017e3e:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8017e42:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8017e46:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8017e4a:	9403      	str	r4, [sp, #12]
 8017e4c:	e9cd 3100 	strd	r3, r1, [sp]
 8017e50:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017e54:	f8ad 8014 	strh.w	r8, [sp, #20]
 8017e58:	4692      	mov	sl, r2
 8017e5a:	4606      	mov	r6, r0
 8017e5c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8017e60:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017e64:	f88d 401c 	strb.w	r4, [sp, #28]
 8017e68:	f7ff ffd0 	bl	8017e0c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017e6c:	fb09 a505 	mla	r5, r9, r5, sl
 8017e70:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017e74:	9504      	str	r5, [sp, #16]
 8017e76:	f8ad 901a 	strh.w	r9, [sp, #26]
 8017e7a:	f88d 401e 	strb.w	r4, [sp, #30]
 8017e7e:	f88d 401d 	strb.w	r4, [sp, #29]
 8017e82:	f88d 401f 	strb.w	r4, [sp, #31]
 8017e86:	f1b8 0f00 	cmp.w	r8, #0
 8017e8a:	d000      	beq.n	8017e8e <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 8017e8c:	b937      	cbnz	r7, 8017e9c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 8017e8e:	4b0d      	ldr	r3, [pc, #52]	; (8017ec4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8017e90:	4a0d      	ldr	r2, [pc, #52]	; (8017ec8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8017e92:	f240 210b 	movw	r1, #523	; 0x20b
 8017e96:	480d      	ldr	r0, [pc, #52]	; (8017ecc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8017e98:	f016 f812 	bl	802dec0 <__assert_func>
 8017e9c:	6833      	ldr	r3, [r6, #0]
 8017e9e:	9c00      	ldr	r4, [sp, #0]
 8017ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ea2:	4630      	mov	r0, r6
 8017ea4:	4798      	blx	r3
 8017ea6:	4220      	tst	r0, r4
 8017ea8:	d104      	bne.n	8017eb4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 8017eaa:	4b09      	ldr	r3, [pc, #36]	; (8017ed0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8017eac:	4a06      	ldr	r2, [pc, #24]	; (8017ec8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8017eae:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8017eb2:	e7f0      	b.n	8017e96 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 8017eb4:	6870      	ldr	r0, [r6, #4]
 8017eb6:	6803      	ldr	r3, [r0, #0]
 8017eb8:	4669      	mov	r1, sp
 8017eba:	685b      	ldr	r3, [r3, #4]
 8017ebc:	4798      	blx	r3
 8017ebe:	b008      	add	sp, #32
 8017ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ec4:	08030b5b 	.word	0x08030b5b
 8017ec8:	08030e8c 	.word	0x08030e8c
 8017ecc:	08030d0d 	.word	0x08030d0d
 8017ed0:	08030b93 	.word	0x08030b93

08017ed4 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8017ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ed8:	b089      	sub	sp, #36	; 0x24
 8017eda:	2400      	movs	r4, #0
 8017edc:	461d      	mov	r5, r3
 8017ede:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017ee2:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8017ee6:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8017eea:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8017eee:	9403      	str	r4, [sp, #12]
 8017ef0:	468a      	mov	sl, r1
 8017ef2:	4693      	mov	fp, r2
 8017ef4:	4606      	mov	r6, r0
 8017ef6:	e9cd 3400 	strd	r3, r4, [sp]
 8017efa:	f7ff ff87 	bl	8017e0c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017efe:	fb09 b505 	mla	r5, r9, r5, fp
 8017f02:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017f06:	9504      	str	r5, [sp, #16]
 8017f08:	f8ad 8014 	strh.w	r8, [sp, #20]
 8017f0c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8017f10:	f8ad 4018 	strh.w	r4, [sp, #24]
 8017f14:	f8ad 901a 	strh.w	r9, [sp, #26]
 8017f18:	f8cd a00c 	str.w	sl, [sp, #12]
 8017f1c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8017f20:	f88d 401e 	strb.w	r4, [sp, #30]
 8017f24:	f88d 401f 	strb.w	r4, [sp, #31]
 8017f28:	f1b8 0f00 	cmp.w	r8, #0
 8017f2c:	d000      	beq.n	8017f30 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 8017f2e:	b937      	cbnz	r7, 8017f3e <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 8017f30:	4b0d      	ldr	r3, [pc, #52]	; (8017f68 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8017f32:	4a0e      	ldr	r2, [pc, #56]	; (8017f6c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8017f34:	f240 2121 	movw	r1, #545	; 0x221
 8017f38:	480d      	ldr	r0, [pc, #52]	; (8017f70 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8017f3a:	f015 ffc1 	bl	802dec0 <__assert_func>
 8017f3e:	6833      	ldr	r3, [r6, #0]
 8017f40:	9c00      	ldr	r4, [sp, #0]
 8017f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f44:	4630      	mov	r0, r6
 8017f46:	4798      	blx	r3
 8017f48:	4220      	tst	r0, r4
 8017f4a:	d104      	bne.n	8017f56 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8017f4c:	4b09      	ldr	r3, [pc, #36]	; (8017f74 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8017f4e:	4a07      	ldr	r2, [pc, #28]	; (8017f6c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8017f50:	f240 2122 	movw	r1, #546	; 0x222
 8017f54:	e7f0      	b.n	8017f38 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 8017f56:	6870      	ldr	r0, [r6, #4]
 8017f58:	6803      	ldr	r3, [r0, #0]
 8017f5a:	4669      	mov	r1, sp
 8017f5c:	685b      	ldr	r3, [r3, #4]
 8017f5e:	4798      	blx	r3
 8017f60:	b009      	add	sp, #36	; 0x24
 8017f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f66:	bf00      	nop
 8017f68:	08030bd8 	.word	0x08030bd8
 8017f6c:	08030f02 	.word	0x08030f02
 8017f70:	08030d0d 	.word	0x08030d0d
 8017f74:	08030c10 	.word	0x08030c10

08017f78 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8017f78:	b510      	push	{r4, lr}
 8017f7a:	4b0b      	ldr	r3, [pc, #44]	; (8017fa8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8017f7c:	781b      	ldrb	r3, [r3, #0]
 8017f7e:	4604      	mov	r4, r0
 8017f80:	b95b      	cbnz	r3, 8017f9a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017f82:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8017f86:	2b02      	cmp	r3, #2
 8017f88:	d007      	beq.n	8017f9a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017f8a:	6840      	ldr	r0, [r0, #4]
 8017f8c:	f000 fb5e 	bl	801864c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8017f90:	b118      	cbz	r0, 8017f9a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017f92:	6862      	ldr	r2, [r4, #4]
 8017f94:	7a53      	ldrb	r3, [r2, #9]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d0fc      	beq.n	8017f94 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8017f9a:	f7fd fbcb 	bl	8015734 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017f9e:	4620      	mov	r0, r4
 8017fa0:	f7ff ff34 	bl	8017e0c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017fa4:	bd10      	pop	{r4, pc}
 8017fa6:	bf00      	nop
 8017fa8:	2000977a 	.word	0x2000977a

08017fac <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8017fac:	b508      	push	{r3, lr}
 8017fae:	290d      	cmp	r1, #13
 8017fb0:	d817      	bhi.n	8017fe2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8017fb2:	e8df f001 	tbb	[pc, r1]
 8017fb6:	090b      	.short	0x090b
 8017fb8:	0d0d0d07 	.word	0x0d0d0d07
 8017fbc:	1414140d 	.word	0x1414140d
 8017fc0:	0d0d1414 	.word	0x0d0d1414
 8017fc4:	2020      	movs	r0, #32
 8017fc6:	bd08      	pop	{r3, pc}
 8017fc8:	2018      	movs	r0, #24
 8017fca:	e7fc      	b.n	8017fc6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017fcc:	2010      	movs	r0, #16
 8017fce:	e7fa      	b.n	8017fc6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017fd0:	4b05      	ldr	r3, [pc, #20]	; (8017fe8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8017fd2:	4a06      	ldr	r2, [pc, #24]	; (8017fec <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8017fd4:	4806      	ldr	r0, [pc, #24]	; (8017ff0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8017fd6:	f240 2182 	movw	r1, #642	; 0x282
 8017fda:	f015 ff71 	bl	802dec0 <__assert_func>
 8017fde:	2008      	movs	r0, #8
 8017fe0:	e7f1      	b.n	8017fc6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017fe2:	2000      	movs	r0, #0
 8017fe4:	e7ef      	b.n	8017fc6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017fe6:	bf00      	nop
 8017fe8:	08030d89 	.word	0x08030d89
 8017fec:	0803122d 	.word	0x0803122d
 8017ff0:	08030d0d 	.word	0x08030d0d

08017ff4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8017ff4:	b570      	push	{r4, r5, r6, lr}
 8017ff6:	460d      	mov	r5, r1
 8017ff8:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8017ffc:	4616      	mov	r6, r2
 8017ffe:	461c      	mov	r4, r3
 8018000:	f7ff ffd4 	bl	8017fac <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8018004:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8018008:	10c0      	asrs	r0, r0, #3
 801800a:	fb06 5101 	mla	r1, r6, r1, r5
 801800e:	fb00 4001 	mla	r0, r0, r1, r4
 8018012:	bd70      	pop	{r4, r5, r6, pc}

08018014 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8018014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018018:	b08a      	sub	sp, #40	; 0x28
 801801a:	f04f 0c00 	mov.w	ip, #0
 801801e:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8018022:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8018026:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801802a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801802e:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8018032:	f8cd c014 	str.w	ip, [sp, #20]
 8018036:	2d0b      	cmp	r5, #11
 8018038:	4604      	mov	r4, r0
 801803a:	469a      	mov	sl, r3
 801803c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8018040:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018044:	d12d      	bne.n	80180a2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 8018046:	2080      	movs	r0, #128	; 0x80
 8018048:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801804c:	9204      	str	r2, [sp, #16]
 801804e:	4620      	mov	r0, r4
 8018050:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8018054:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018058:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801805c:	f8ad 701c 	strh.w	r7, [sp, #28]
 8018060:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018064:	f7ff fed2 	bl	8017e0c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018068:	e9cd 9800 	strd	r9, r8, [sp]
 801806c:	4603      	mov	r3, r0
 801806e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8018072:	4651      	mov	r1, sl
 8018074:	4620      	mov	r0, r4
 8018076:	f7ff ffbd 	bl	8017ff4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801807a:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 801807e:	9006      	str	r0, [sp, #24]
 8018080:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8018084:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8018088:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 801808c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8018090:	b107      	cbz	r7, 8018094 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 8018092:	b9d6      	cbnz	r6, 80180ca <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 8018094:	4b17      	ldr	r3, [pc, #92]	; (80180f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 8018096:	4a18      	ldr	r2, [pc, #96]	; (80180f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018098:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 801809c:	4817      	ldr	r0, [pc, #92]	; (80180fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 801809e:	f015 ff0f 	bl	802dec0 <__assert_func>
 80180a2:	2d02      	cmp	r5, #2
 80180a4:	d108      	bne.n	80180b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 80180a6:	2bff      	cmp	r3, #255	; 0xff
 80180a8:	d104      	bne.n	80180b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 80180aa:	2800      	cmp	r0, #0
 80180ac:	bf14      	ite	ne
 80180ae:	2040      	movne	r0, #64	; 0x40
 80180b0:	2020      	moveq	r0, #32
 80180b2:	e7c9      	b.n	8018048 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80180b4:	2040      	movs	r0, #64	; 0x40
 80180b6:	e7c7      	b.n	8018048 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80180b8:	2bff      	cmp	r3, #255	; 0xff
 80180ba:	d104      	bne.n	80180c6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 80180bc:	2800      	cmp	r0, #0
 80180be:	bf14      	ite	ne
 80180c0:	2004      	movne	r0, #4
 80180c2:	2001      	moveq	r0, #1
 80180c4:	e7c0      	b.n	8018048 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80180c6:	2004      	movs	r0, #4
 80180c8:	e7be      	b.n	8018048 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80180ca:	6823      	ldr	r3, [r4, #0]
 80180cc:	9d02      	ldr	r5, [sp, #8]
 80180ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80180d0:	4620      	mov	r0, r4
 80180d2:	4798      	blx	r3
 80180d4:	4228      	tst	r0, r5
 80180d6:	d104      	bne.n	80180e2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 80180d8:	4b09      	ldr	r3, [pc, #36]	; (8018100 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 80180da:	4a07      	ldr	r2, [pc, #28]	; (80180f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 80180dc:	f240 11d5 	movw	r1, #469	; 0x1d5
 80180e0:	e7dc      	b.n	801809c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 80180e2:	6860      	ldr	r0, [r4, #4]
 80180e4:	6803      	ldr	r3, [r0, #0]
 80180e6:	a902      	add	r1, sp, #8
 80180e8:	685b      	ldr	r3, [r3, #4]
 80180ea:	4798      	blx	r3
 80180ec:	b00a      	add	sp, #40	; 0x28
 80180ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180f2:	bf00      	nop
 80180f4:	08030b5b 	.word	0x08030b5b
 80180f8:	080310bb 	.word	0x080310bb
 80180fc:	08030d0d 	.word	0x08030d0d
 8018100:	08030b93 	.word	0x08030b93

08018104 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8018104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018108:	b08b      	sub	sp, #44	; 0x2c
 801810a:	469b      	mov	fp, r3
 801810c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8018110:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8018114:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8018118:	2fff      	cmp	r7, #255	; 0xff
 801811a:	bf14      	ite	ne
 801811c:	2308      	movne	r3, #8
 801811e:	2302      	moveq	r3, #2
 8018120:	2600      	movs	r6, #0
 8018122:	4604      	mov	r4, r0
 8018124:	4689      	mov	r9, r1
 8018126:	4692      	mov	sl, r2
 8018128:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801812c:	9605      	str	r6, [sp, #20]
 801812e:	f7ff fe6d 	bl	8017e0c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018132:	e9cd 8500 	strd	r8, r5, [sp]
 8018136:	4603      	mov	r3, r0
 8018138:	465a      	mov	r2, fp
 801813a:	4651      	mov	r1, sl
 801813c:	4620      	mov	r0, r4
 801813e:	f7ff ff59 	bl	8017ff4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018142:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018146:	f8ad 301c 	strh.w	r3, [sp, #28]
 801814a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801814e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018152:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8018156:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 801815a:	6823      	ldr	r3, [r4, #0]
 801815c:	9006      	str	r0, [sp, #24]
 801815e:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8018162:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8018166:	f8ad 6020 	strh.w	r6, [sp, #32]
 801816a:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 801816e:	f8cd 9014 	str.w	r9, [sp, #20]
 8018172:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8018176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018178:	9d02      	ldr	r5, [sp, #8]
 801817a:	4620      	mov	r0, r4
 801817c:	4798      	blx	r3
 801817e:	4228      	tst	r0, r5
 8018180:	d106      	bne.n	8018190 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 8018182:	4b07      	ldr	r3, [pc, #28]	; (80181a0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 8018184:	4a07      	ldr	r2, [pc, #28]	; (80181a4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 8018186:	4808      	ldr	r0, [pc, #32]	; (80181a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 8018188:	f240 2137 	movw	r1, #567	; 0x237
 801818c:	f015 fe98 	bl	802dec0 <__assert_func>
 8018190:	6860      	ldr	r0, [r4, #4]
 8018192:	6803      	ldr	r3, [r0, #0]
 8018194:	a902      	add	r1, sp, #8
 8018196:	685b      	ldr	r3, [r3, #4]
 8018198:	4798      	blx	r3
 801819a:	b00b      	add	sp, #44	; 0x2c
 801819c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181a0:	08030b93 	.word	0x08030b93
 80181a4:	08031192 	.word	0x08031192
 80181a8:	08030d0d 	.word	0x08030d0d

080181ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80181ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80181b0:	461f      	mov	r7, r3
 80181b2:	4b0b      	ldr	r3, [pc, #44]	; (80181e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80181b4:	460d      	mov	r5, r1
 80181b6:	f8b3 8000 	ldrh.w	r8, [r3]
 80181ba:	4616      	mov	r6, r2
 80181bc:	4604      	mov	r4, r0
 80181be:	f7f7 ff21 	bl	8010004 <_ZN8touchgfx3HAL3lcdEv>
 80181c2:	6803      	ldr	r3, [r0, #0]
 80181c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181c6:	4798      	blx	r3
 80181c8:	463b      	mov	r3, r7
 80181ca:	e9cd 8000 	strd	r8, r0, [sp]
 80181ce:	4632      	mov	r2, r6
 80181d0:	4629      	mov	r1, r5
 80181d2:	4620      	mov	r0, r4
 80181d4:	f7ff ff0e 	bl	8017ff4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80181d8:	b002      	add	sp, #8
 80181da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181de:	bf00      	nop
 80181e0:	20009776 	.word	0x20009776

080181e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80181e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181e8:	b088      	sub	sp, #32
 80181ea:	4698      	mov	r8, r3
 80181ec:	2300      	movs	r3, #0
 80181ee:	9303      	str	r3, [sp, #12]
 80181f0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80181f4:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80181f8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80181fc:	f8ad 6014 	strh.w	r6, [sp, #20]
 8018200:	e9cd 3100 	strd	r3, r1, [sp]
 8018204:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018208:	f8ad 3018 	strh.w	r3, [sp, #24]
 801820c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018210:	f88d 301c 	strb.w	r3, [sp, #28]
 8018214:	4617      	mov	r7, r2
 8018216:	4604      	mov	r4, r0
 8018218:	f8ad 5016 	strh.w	r5, [sp, #22]
 801821c:	f7ff fdf6 	bl	8017e0c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018220:	4642      	mov	r2, r8
 8018222:	4603      	mov	r3, r0
 8018224:	4639      	mov	r1, r7
 8018226:	4620      	mov	r0, r4
 8018228:	f7ff ffc0 	bl	80181ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801822c:	4b18      	ldr	r3, [pc, #96]	; (8018290 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 801822e:	9004      	str	r0, [sp, #16]
 8018230:	881b      	ldrh	r3, [r3, #0]
 8018232:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018236:	f7f7 fee5 	bl	8010004 <_ZN8touchgfx3HAL3lcdEv>
 801823a:	6803      	ldr	r3, [r0, #0]
 801823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801823e:	4798      	blx	r3
 8018240:	f88d 001e 	strb.w	r0, [sp, #30]
 8018244:	f88d 001d 	strb.w	r0, [sp, #29]
 8018248:	b106      	cbz	r6, 801824c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 801824a:	b935      	cbnz	r5, 801825a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 801824c:	4b11      	ldr	r3, [pc, #68]	; (8018294 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 801824e:	4a12      	ldr	r2, [pc, #72]	; (8018298 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8018250:	f240 11f1 	movw	r1, #497	; 0x1f1
 8018254:	4811      	ldr	r0, [pc, #68]	; (801829c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 8018256:	f015 fe33 	bl	802dec0 <__assert_func>
 801825a:	6823      	ldr	r3, [r4, #0]
 801825c:	9d00      	ldr	r5, [sp, #0]
 801825e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018260:	4620      	mov	r0, r4
 8018262:	4798      	blx	r3
 8018264:	4228      	tst	r0, r5
 8018266:	d104      	bne.n	8018272 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 8018268:	4b0d      	ldr	r3, [pc, #52]	; (80182a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 801826a:	4a0b      	ldr	r2, [pc, #44]	; (8018298 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 801826c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8018270:	e7f0      	b.n	8018254 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8018272:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018274:	9303      	str	r3, [sp, #12]
 8018276:	6860      	ldr	r0, [r4, #4]
 8018278:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801827c:	f88d 301f 	strb.w	r3, [sp, #31]
 8018280:	6803      	ldr	r3, [r0, #0]
 8018282:	4669      	mov	r1, sp
 8018284:	685b      	ldr	r3, [r3, #4]
 8018286:	4798      	blx	r3
 8018288:	b008      	add	sp, #32
 801828a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801828e:	bf00      	nop
 8018290:	20009776 	.word	0x20009776
 8018294:	08030b5b 	.word	0x08030b5b
 8018298:	08030f67 	.word	0x08030f67
 801829c:	08030d0d 	.word	0x08030d0d
 80182a0:	08030b93 	.word	0x08030b93

080182a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80182a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182a6:	b08b      	sub	sp, #44	; 0x2c
 80182a8:	466b      	mov	r3, sp
 80182aa:	e883 0006 	stmia.w	r3, {r1, r2}
 80182ae:	4b21      	ldr	r3, [pc, #132]	; (8018334 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80182b0:	781b      	ldrb	r3, [r3, #0]
 80182b2:	4604      	mov	r4, r0
 80182b4:	b933      	cbnz	r3, 80182c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 80182b6:	4b20      	ldr	r3, [pc, #128]	; (8018338 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80182b8:	4a20      	ldr	r2, [pc, #128]	; (801833c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80182ba:	4821      	ldr	r0, [pc, #132]	; (8018340 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80182bc:	f44f 7112 	mov.w	r1, #584	; 0x248
 80182c0:	f015 fdfe 	bl	802dec0 <__assert_func>
 80182c4:	2301      	movs	r3, #1
 80182c6:	9302      	str	r3, [sp, #8]
 80182c8:	6803      	ldr	r3, [r0, #0]
 80182ca:	f8bd 6000 	ldrh.w	r6, [sp]
 80182ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182d0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80182d4:	2500      	movs	r5, #0
 80182d6:	9505      	str	r5, [sp, #20]
 80182d8:	4798      	blx	r3
 80182da:	463a      	mov	r2, r7
 80182dc:	4631      	mov	r1, r6
 80182de:	4603      	mov	r3, r0
 80182e0:	4620      	mov	r0, r4
 80182e2:	f7ff ff63 	bl	80181ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80182e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80182e8:	9306      	str	r3, [sp, #24]
 80182ea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80182ee:	f8ad 301c 	strh.w	r3, [sp, #28]
 80182f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80182f6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80182fa:	4b12      	ldr	r3, [pc, #72]	; (8018344 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 80182fc:	9003      	str	r0, [sp, #12]
 80182fe:	881b      	ldrh	r3, [r3, #0]
 8018300:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018304:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018308:	f7f7 fe7c 	bl	8010004 <_ZN8touchgfx3HAL3lcdEv>
 801830c:	6803      	ldr	r3, [r0, #0]
 801830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018310:	4798      	blx	r3
 8018312:	23ff      	movs	r3, #255	; 0xff
 8018314:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8018318:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801831c:	6860      	ldr	r0, [r4, #4]
 801831e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018322:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 8018326:	6803      	ldr	r3, [r0, #0]
 8018328:	a902      	add	r1, sp, #8
 801832a:	685b      	ldr	r3, [r3, #4]
 801832c:	4798      	blx	r3
 801832e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8018330:	b00b      	add	sp, #44	; 0x2c
 8018332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018334:	2000977b 	.word	0x2000977b
 8018338:	08030c5a 	.word	0x08030c5a
 801833c:	08031011 	.word	0x08031011
 8018340:	08030d0d 	.word	0x08030d0d
 8018344:	20009776 	.word	0x20009776

08018348 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8018348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801834c:	b08a      	sub	sp, #40	; 0x28
 801834e:	466d      	mov	r5, sp
 8018350:	e885 0006 	stmia.w	r5, {r1, r2}
 8018354:	461d      	mov	r5, r3
 8018356:	2301      	movs	r3, #1
 8018358:	9302      	str	r3, [sp, #8]
 801835a:	6803      	ldr	r3, [r0, #0]
 801835c:	f8bd 7000 	ldrh.w	r7, [sp]
 8018360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018362:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8018366:	2600      	movs	r6, #0
 8018368:	9605      	str	r6, [sp, #20]
 801836a:	4604      	mov	r4, r0
 801836c:	4798      	blx	r3
 801836e:	4642      	mov	r2, r8
 8018370:	4639      	mov	r1, r7
 8018372:	4603      	mov	r3, r0
 8018374:	4620      	mov	r0, r4
 8018376:	f7ff ff19 	bl	80181ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801837a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801837e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018382:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018386:	f8ad 301e 	strh.w	r3, [sp, #30]
 801838a:	4b10      	ldr	r3, [pc, #64]	; (80183cc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 801838c:	9003      	str	r0, [sp, #12]
 801838e:	881b      	ldrh	r3, [r3, #0]
 8018390:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018396:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801839a:	9506      	str	r5, [sp, #24]
 801839c:	f7f7 fe32 	bl	8010004 <_ZN8touchgfx3HAL3lcdEv>
 80183a0:	6803      	ldr	r3, [r0, #0]
 80183a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183a4:	4798      	blx	r3
 80183a6:	23ff      	movs	r3, #255	; 0xff
 80183a8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80183ac:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80183b0:	6860      	ldr	r0, [r4, #4]
 80183b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80183b6:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 80183ba:	6803      	ldr	r3, [r0, #0]
 80183bc:	a902      	add	r1, sp, #8
 80183be:	685b      	ldr	r3, [r3, #4]
 80183c0:	4798      	blx	r3
 80183c2:	4628      	mov	r0, r5
 80183c4:	b00a      	add	sp, #40	; 0x28
 80183c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183ca:	bf00      	nop
 80183cc:	20009776 	.word	0x20009776

080183d0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80183d0:	b570      	push	{r4, r5, r6, lr}
 80183d2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80183d6:	4604      	mov	r4, r0
 80183d8:	b19b      	cbz	r3, 8018402 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80183da:	2002      	movs	r0, #2
 80183dc:	f7fc ff38 	bl	8015250 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80183e0:	2300      	movs	r3, #0
 80183e2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80183e6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80183ea:	6823      	ldr	r3, [r4, #0]
 80183ec:	4620      	mov	r0, r4
 80183ee:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 80183f2:	f7ff fd0b 	bl	8017e0c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80183f6:	462b      	mov	r3, r5
 80183f8:	4601      	mov	r1, r0
 80183fa:	4620      	mov	r0, r4
 80183fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018400:	4718      	bx	r3
 8018402:	bd70      	pop	{r4, r5, r6, pc}

08018404 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8018404:	4770      	bx	lr

08018406 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8018406:	4770      	bx	lr

08018408 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8018408:	2000      	movs	r0, #0
 801840a:	4770      	bx	lr

0801840c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801840c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8018410:	1a13      	subs	r3, r2, r0
 8018412:	4258      	negs	r0, r3
 8018414:	4158      	adcs	r0, r3
 8018416:	4770      	bx	lr

08018418 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8018418:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801841c:	1a9b      	subs	r3, r3, r2
 801841e:	2b00      	cmp	r3, #0
 8018420:	bfdc      	itt	le
 8018422:	6882      	ldrle	r2, [r0, #8]
 8018424:	189b      	addle	r3, r3, r2
 8018426:	2b01      	cmp	r3, #1
 8018428:	bfcc      	ite	gt
 801842a:	2000      	movgt	r0, #0
 801842c:	2001      	movle	r0, #1
 801842e:	4770      	bx	lr

08018430 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8018430:	6902      	ldr	r2, [r0, #16]
 8018432:	6840      	ldr	r0, [r0, #4]
 8018434:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8018438:	4770      	bx	lr

0801843a <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801843a:	6803      	ldr	r3, [r0, #0]
 801843c:	691b      	ldr	r3, [r3, #16]
 801843e:	4718      	bx	r3

08018440 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8018440:	4770      	bx	lr

08018442 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8018442:	4770      	bx	lr

08018444 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8018444:	b570      	push	{r4, r5, r6, lr}
 8018446:	2301      	movs	r3, #1
 8018448:	7203      	strb	r3, [r0, #8]
 801844a:	4604      	mov	r4, r0
 801844c:	6840      	ldr	r0, [r0, #4]
 801844e:	6803      	ldr	r3, [r0, #0]
 8018450:	699b      	ldr	r3, [r3, #24]
 8018452:	4798      	blx	r3
 8018454:	6803      	ldr	r3, [r0, #0]
 8018456:	2b40      	cmp	r3, #64	; 0x40
 8018458:	4605      	mov	r5, r0
 801845a:	d039      	beq.n	80184d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801845c:	d815      	bhi.n	801848a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801845e:	2b04      	cmp	r3, #4
 8018460:	d022      	beq.n	80184a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8018462:	d808      	bhi.n	8018476 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018464:	2b01      	cmp	r3, #1
 8018466:	d033      	beq.n	80184d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8018468:	2b02      	cmp	r3, #2
 801846a:	d108      	bne.n	801847e <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 801846c:	6823      	ldr	r3, [r4, #0]
 801846e:	4620      	mov	r0, r4
 8018470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018472:	4798      	blx	r3
 8018474:	e025      	b.n	80184c2 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8018476:	2b08      	cmp	r3, #8
 8018478:	d01e      	beq.n	80184b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 801847a:	2b20      	cmp	r3, #32
 801847c:	d028      	beq.n	80184d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801847e:	4b17      	ldr	r3, [pc, #92]	; (80184dc <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8018480:	4a17      	ldr	r2, [pc, #92]	; (80184e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8018482:	4818      	ldr	r0, [pc, #96]	; (80184e4 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8018484:	218b      	movs	r1, #139	; 0x8b
 8018486:	f015 fd1b 	bl	802dec0 <__assert_func>
 801848a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801848e:	d01f      	beq.n	80184d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8018490:	d804      	bhi.n	801849c <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 8018492:	2b80      	cmp	r3, #128	; 0x80
 8018494:	d01c      	beq.n	80184d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8018496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801849a:	e7ef      	b.n	801847c <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 801849c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80184a0:	d016      	beq.n	80184d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80184a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80184a6:	e7e0      	b.n	801846a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80184a8:	6823      	ldr	r3, [r4, #0]
 80184aa:	7f01      	ldrb	r1, [r0, #28]
 80184ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80184ae:	4620      	mov	r0, r4
 80184b0:	4798      	blx	r3
 80184b2:	6823      	ldr	r3, [r4, #0]
 80184b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80184b6:	e006      	b.n	80184c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80184b8:	6823      	ldr	r3, [r4, #0]
 80184ba:	7f01      	ldrb	r1, [r0, #28]
 80184bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80184be:	4620      	mov	r0, r4
 80184c0:	4798      	blx	r3
 80184c2:	6823      	ldr	r3, [r4, #0]
 80184c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80184c6:	4629      	mov	r1, r5
 80184c8:	4620      	mov	r0, r4
 80184ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80184ce:	4718      	bx	r3
 80184d0:	6823      	ldr	r3, [r4, #0]
 80184d2:	4620      	mov	r0, r4
 80184d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184d6:	4798      	blx	r3
 80184d8:	e7eb      	b.n	80184b2 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80184da:	bf00      	nop
 80184dc:	08031276 	.word	0x08031276
 80184e0:	08031388 	.word	0x08031388
 80184e4:	0803129b 	.word	0x0803129b

080184e8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80184e8:	b570      	push	{r4, r5, r6, lr}
 80184ea:	4604      	mov	r4, r0
 80184ec:	460e      	mov	r6, r1
 80184ee:	6860      	ldr	r0, [r4, #4]
 80184f0:	6803      	ldr	r3, [r0, #0]
 80184f2:	685b      	ldr	r3, [r3, #4]
 80184f4:	4798      	blx	r3
 80184f6:	2800      	cmp	r0, #0
 80184f8:	d1f9      	bne.n	80184ee <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80184fa:	4d0d      	ldr	r5, [pc, #52]	; (8018530 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80184fc:	6828      	ldr	r0, [r5, #0]
 80184fe:	6803      	ldr	r3, [r0, #0]
 8018500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018502:	4798      	blx	r3
 8018504:	f7fd f930 	bl	8015768 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8018508:	6828      	ldr	r0, [r5, #0]
 801850a:	2101      	movs	r1, #1
 801850c:	f7ff ff7a 	bl	8018404 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018510:	6860      	ldr	r0, [r4, #4]
 8018512:	6803      	ldr	r3, [r0, #0]
 8018514:	4631      	mov	r1, r6
 8018516:	689b      	ldr	r3, [r3, #8]
 8018518:	4798      	blx	r3
 801851a:	6823      	ldr	r3, [r4, #0]
 801851c:	4620      	mov	r0, r4
 801851e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018520:	4798      	blx	r3
 8018522:	6828      	ldr	r0, [r5, #0]
 8018524:	6803      	ldr	r3, [r0, #0]
 8018526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801852a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801852c:	4718      	bx	r3
 801852e:	bf00      	nop
 8018530:	2000977c 	.word	0x2000977c

08018534 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8018534:	b508      	push	{r3, lr}
 8018536:	f7fd f8fd 	bl	8015734 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801853a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801853e:	f7fd b907 	b.w	8015750 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018542 <_ZN8touchgfx13DMA_Interface5startEv>:
 8018542:	b510      	push	{r4, lr}
 8018544:	4604      	mov	r4, r0
 8018546:	6840      	ldr	r0, [r0, #4]
 8018548:	6803      	ldr	r3, [r0, #0]
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	4798      	blx	r3
 801854e:	b948      	cbnz	r0, 8018564 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018550:	7a63      	ldrb	r3, [r4, #9]
 8018552:	b13b      	cbz	r3, 8018564 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018554:	7a23      	ldrb	r3, [r4, #8]
 8018556:	b92b      	cbnz	r3, 8018564 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018558:	6823      	ldr	r3, [r4, #0]
 801855a:	4620      	mov	r0, r4
 801855c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801855e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018562:	4718      	bx	r3
 8018564:	bd10      	pop	{r4, pc}
	...

08018568 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8018568:	b570      	push	{r4, r5, r6, lr}
 801856a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801856e:	1a9b      	subs	r3, r3, r2
 8018570:	2b00      	cmp	r3, #0
 8018572:	4606      	mov	r6, r0
 8018574:	bfdc      	itt	le
 8018576:	6880      	ldrle	r0, [r0, #8]
 8018578:	181b      	addle	r3, r3, r0
 801857a:	2b01      	cmp	r3, #1
 801857c:	dd13      	ble.n	80185a6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 801857e:	6874      	ldr	r4, [r6, #4]
 8018580:	460d      	mov	r5, r1
 8018582:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 8018586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801858a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801858e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018592:	68f3      	ldr	r3, [r6, #12]
 8018594:	68b2      	ldr	r2, [r6, #8]
 8018596:	f3bf 8f5b 	dmb	ish
 801859a:	3301      	adds	r3, #1
 801859c:	429a      	cmp	r2, r3
 801859e:	bfd8      	it	le
 80185a0:	1a9b      	suble	r3, r3, r2
 80185a2:	60f3      	str	r3, [r6, #12]
 80185a4:	bd70      	pop	{r4, r5, r6, pc}
 80185a6:	4b03      	ldr	r3, [pc, #12]	; (80185b4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 80185a8:	4a03      	ldr	r2, [pc, #12]	; (80185b8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 80185aa:	4804      	ldr	r0, [pc, #16]	; (80185bc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80185ac:	2139      	movs	r1, #57	; 0x39
 80185ae:	f015 fc87 	bl	802dec0 <__assert_func>
 80185b2:	bf00      	nop
 80185b4:	080312c1 	.word	0x080312c1
 80185b8:	080313b8 	.word	0x080313b8
 80185bc:	0803129b 	.word	0x0803129b

080185c0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80185c0:	b510      	push	{r4, lr}
 80185c2:	6803      	ldr	r3, [r0, #0]
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	4604      	mov	r4, r0
 80185c8:	4798      	blx	r3
 80185ca:	b128      	cbz	r0, 80185d8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80185cc:	4b07      	ldr	r3, [pc, #28]	; (80185ec <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80185ce:	4a08      	ldr	r2, [pc, #32]	; (80185f0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80185d0:	4808      	ldr	r0, [pc, #32]	; (80185f4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80185d2:	213f      	movs	r1, #63	; 0x3f
 80185d4:	f015 fc74 	bl	802dec0 <__assert_func>
 80185d8:	6923      	ldr	r3, [r4, #16]
 80185da:	68a2      	ldr	r2, [r4, #8]
 80185dc:	f3bf 8f5b 	dmb	ish
 80185e0:	3301      	adds	r3, #1
 80185e2:	429a      	cmp	r2, r3
 80185e4:	bfd8      	it	le
 80185e6:	1a9b      	suble	r3, r3, r2
 80185e8:	6123      	str	r3, [r4, #16]
 80185ea:	bd10      	pop	{r4, pc}
 80185ec:	080312e4 	.word	0x080312e4
 80185f0:	08031406 	.word	0x08031406
 80185f4:	0803129b 	.word	0x0803129b

080185f8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80185f8:	b570      	push	{r4, r5, r6, lr}
 80185fa:	4604      	mov	r4, r0
 80185fc:	6840      	ldr	r0, [r0, #4]
 80185fe:	6803      	ldr	r3, [r0, #0]
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	4798      	blx	r3
 8018604:	4605      	mov	r5, r0
 8018606:	b930      	cbnz	r0, 8018616 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018608:	7a23      	ldrb	r3, [r4, #8]
 801860a:	b123      	cbz	r3, 8018616 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801860c:	6860      	ldr	r0, [r4, #4]
 801860e:	6803      	ldr	r3, [r0, #0]
 8018610:	695b      	ldr	r3, [r3, #20]
 8018612:	4798      	blx	r3
 8018614:	7225      	strb	r5, [r4, #8]
 8018616:	6860      	ldr	r0, [r4, #4]
 8018618:	6803      	ldr	r3, [r0, #0]
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	4798      	blx	r3
 801861e:	b928      	cbnz	r0, 801862c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8018620:	6823      	ldr	r3, [r4, #0]
 8018622:	4620      	mov	r0, r4
 8018624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801862a:	4718      	bx	r3
 801862c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018630:	f7fd b8a6 	b.w	8015780 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08018634 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8018634:	b510      	push	{r4, lr}
 8018636:	4c04      	ldr	r4, [pc, #16]	; (8018648 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8018638:	6082      	str	r2, [r0, #8]
 801863a:	2200      	movs	r2, #0
 801863c:	e9c0 4100 	strd	r4, r1, [r0]
 8018640:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8018644:	bd10      	pop	{r4, pc}
 8018646:	bf00      	nop
 8018648:	0803136c 	.word	0x0803136c

0801864c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801864c:	6840      	ldr	r0, [r0, #4]
 801864e:	6803      	ldr	r3, [r0, #0]
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	4718      	bx	r3

08018654 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8018654:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8018658:	4770      	bx	lr

0801865a <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 801865a:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801865e:	4770      	bx	lr

08018660 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8018660:	b507      	push	{r0, r1, r2, lr}
 8018662:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8018666:	ab01      	add	r3, sp, #4
 8018668:	6809      	ldr	r1, [r1, #0]
 801866a:	6800      	ldr	r0, [r0, #0]
 801866c:	f004 fe9c 	bl	801d3a8 <_ZN8touchgfx6muldivElllRl>
 8018670:	b003      	add	sp, #12
 8018672:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08018678 <_ZN8touchgfx7CWRUtil4sineEi>:
 8018678:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801867c:	fb90 f3f2 	sdiv	r3, r0, r2
 8018680:	fb03 0312 	mls	r3, r3, r2, r0
 8018684:	4413      	add	r3, r2
 8018686:	fb93 f0f2 	sdiv	r0, r3, r2
 801868a:	fb02 3010 	mls	r0, r2, r0, r3
 801868e:	285a      	cmp	r0, #90	; 0x5a
 8018690:	4b09      	ldr	r3, [pc, #36]	; (80186b8 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8018692:	dc02      	bgt.n	801869a <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8018694:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8018698:	4770      	bx	lr
 801869a:	28b4      	cmp	r0, #180	; 0xb4
 801869c:	dc02      	bgt.n	80186a4 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 801869e:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 80186a2:	e7f7      	b.n	8018694 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 80186a4:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 80186a8:	bfd4      	ite	le
 80186aa:	38b4      	suble	r0, #180	; 0xb4
 80186ac:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 80186b0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80186b4:	4240      	negs	r0, r0
 80186b6:	4770      	bx	lr
 80186b8:	08031436 	.word	0x08031436

080186bc <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 80186bc:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 80186c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80186c2:	fb90 f3f2 	sdiv	r3, r0, r2
 80186c6:	fb03 0012 	mls	r0, r3, r2, r0
 80186ca:	4410      	add	r0, r2
 80186cc:	fb90 f4f2 	sdiv	r4, r0, r2
 80186d0:	fb02 0414 	mls	r4, r2, r4, r0
 80186d4:	f004 061f 	and.w	r6, r4, #31
 80186d8:	1164      	asrs	r4, r4, #5
 80186da:	4620      	mov	r0, r4
 80186dc:	f7ff ffcc 	bl	8018678 <_ZN8touchgfx7CWRUtil4sineEi>
 80186e0:	4605      	mov	r5, r0
 80186e2:	b90e      	cbnz	r6, 80186e8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 80186e4:	b002      	add	sp, #8
 80186e6:	bd70      	pop	{r4, r5, r6, pc}
 80186e8:	1c60      	adds	r0, r4, #1
 80186ea:	f7ff ffc5 	bl	8018678 <_ZN8touchgfx7CWRUtil4sineEi>
 80186ee:	ab01      	add	r3, sp, #4
 80186f0:	2220      	movs	r2, #32
 80186f2:	4631      	mov	r1, r6
 80186f4:	1b40      	subs	r0, r0, r5
 80186f6:	f004 fe57 	bl	801d3a8 <_ZN8touchgfx6muldivElllRl>
 80186fa:	4428      	add	r0, r5
 80186fc:	e7f2      	b.n	80186e4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

080186fe <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 80186fe:	b508      	push	{r3, lr}
 8018700:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8018704:	f7ff ffda 	bl	80186bc <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018708:	bd08      	pop	{r3, pc}
	...

0801870c <_ZN8touchgfx6CircleC1Ev>:
 801870c:	b510      	push	{r4, lr}
 801870e:	4604      	mov	r4, r0
 8018710:	f000 fcde 	bl	80190d0 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8018714:	4b08      	ldr	r3, [pc, #32]	; (8018738 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8018716:	6023      	str	r3, [r4, #0]
 8018718:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 801871c:	2300      	movs	r3, #0
 801871e:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8018722:	f24b 4205 	movw	r2, #46085	; 0xb405
 8018726:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801872a:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801872e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8018732:	60a3      	str	r3, [r4, #8]
 8018734:	4620      	mov	r0, r4
 8018736:	bd10      	pop	{r4, pc}
 8018738:	080314f4 	.word	0x080314f4

0801873c <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 801873c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018740:	4606      	mov	r6, r0
 8018742:	6810      	ldr	r0, [r2, #0]
 8018744:	4698      	mov	r8, r3
 8018746:	4691      	mov	r9, r2
 8018748:	460f      	mov	r7, r1
 801874a:	f7ff ffb7 	bl	80186bc <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801874e:	a902      	add	r1, sp, #8
 8018750:	2402      	movs	r4, #2
 8018752:	f841 0d08 	str.w	r0, [r1, #-8]!
 8018756:	4640      	mov	r0, r8
 8018758:	f7ff ff82 	bl	8018660 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801875c:	6b35      	ldr	r5, [r6, #48]	; 0x30
 801875e:	fb90 f0f4 	sdiv	r0, r0, r4
 8018762:	4405      	add	r5, r0
 8018764:	f8d9 0000 	ldr.w	r0, [r9]
 8018768:	f7ff ffc9 	bl	80186fe <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801876c:	a902      	add	r1, sp, #8
 801876e:	f841 0d04 	str.w	r0, [r1, #-4]!
 8018772:	4640      	mov	r0, r8
 8018774:	f7ff ff74 	bl	8018660 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018778:	6b72      	ldr	r2, [r6, #52]	; 0x34
 801877a:	fb90 f0f4 	sdiv	r0, r0, r4
 801877e:	4629      	mov	r1, r5
 8018780:	1a12      	subs	r2, r2, r0
 8018782:	4638      	mov	r0, r7
 8018784:	f013 facd 	bl	802bd22 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8018788:	b003      	add	sp, #12
 801878a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801878e <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 801878e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018792:	9e08      	ldr	r6, [sp, #32]
 8018794:	6830      	ldr	r0, [r6, #0]
 8018796:	4698      	mov	r8, r3
 8018798:	4615      	mov	r5, r2
 801879a:	460f      	mov	r7, r1
 801879c:	f7ff ff8e 	bl	80186bc <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80187a0:	a902      	add	r1, sp, #8
 80187a2:	2402      	movs	r4, #2
 80187a4:	f841 0d08 	str.w	r0, [r1, #-8]!
 80187a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80187aa:	f7ff ff59 	bl	8018660 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80187ae:	682d      	ldr	r5, [r5, #0]
 80187b0:	fb90 f0f4 	sdiv	r0, r0, r4
 80187b4:	4405      	add	r5, r0
 80187b6:	6830      	ldr	r0, [r6, #0]
 80187b8:	f7ff ffa1 	bl	80186fe <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80187bc:	a902      	add	r1, sp, #8
 80187be:	f841 0d04 	str.w	r0, [r1, #-4]!
 80187c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80187c4:	f7ff ff4c 	bl	8018660 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80187c8:	f8d8 2000 	ldr.w	r2, [r8]
 80187cc:	fb90 f0f4 	sdiv	r0, r0, r4
 80187d0:	4629      	mov	r1, r5
 80187d2:	1a12      	subs	r2, r2, r0
 80187d4:	4638      	mov	r0, r7
 80187d6:	f013 fa33 	bl	802bc40 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80187da:	b002      	add	sp, #8
 80187dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080187e0 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 80187e0:	b513      	push	{r0, r1, r4, lr}
 80187e2:	e9cd 2300 	strd	r2, r3, [sp]
 80187e6:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80187ea:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80187ee:	f7ff ffce 	bl	801878e <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 80187f2:	b002      	add	sp, #8
 80187f4:	bd10      	pop	{r4, pc}

080187f6 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 80187f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187f8:	680e      	ldr	r6, [r1, #0]
 80187fa:	681f      	ldr	r7, [r3, #0]
 80187fc:	9807      	ldr	r0, [sp, #28]
 80187fe:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8018802:	42be      	cmp	r6, r7
 8018804:	bfb8      	it	lt
 8018806:	601e      	strlt	r6, [r3, #0]
 8018808:	680b      	ldr	r3, [r1, #0]
 801880a:	6829      	ldr	r1, [r5, #0]
 801880c:	428b      	cmp	r3, r1
 801880e:	bfc8      	it	gt
 8018810:	602b      	strgt	r3, [r5, #0]
 8018812:	6813      	ldr	r3, [r2, #0]
 8018814:	6821      	ldr	r1, [r4, #0]
 8018816:	428b      	cmp	r3, r1
 8018818:	bfb8      	it	lt
 801881a:	6023      	strlt	r3, [r4, #0]
 801881c:	6813      	ldr	r3, [r2, #0]
 801881e:	6802      	ldr	r2, [r0, #0]
 8018820:	4293      	cmp	r3, r2
 8018822:	bfc8      	it	gt
 8018824:	6003      	strgt	r3, [r0, #0]
 8018826:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018828 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8018828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801882c:	4606      	mov	r6, r0
 801882e:	b089      	sub	sp, #36	; 0x24
 8018830:	6808      	ldr	r0, [r1, #0]
 8018832:	4690      	mov	r8, r2
 8018834:	461f      	mov	r7, r3
 8018836:	4689      	mov	r9, r1
 8018838:	f7ff ff40 	bl	80186bc <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801883c:	ad08      	add	r5, sp, #32
 801883e:	2402      	movs	r4, #2
 8018840:	f845 0d04 	str.w	r0, [r5, #-4]!
 8018844:	4640      	mov	r0, r8
 8018846:	4629      	mov	r1, r5
 8018848:	f7ff ff0a 	bl	8018660 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801884c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 801884e:	fb90 f0f4 	sdiv	r0, r0, r4
 8018852:	4418      	add	r0, r3
 8018854:	9005      	str	r0, [sp, #20]
 8018856:	f8d9 0000 	ldr.w	r0, [r9]
 801885a:	f7ff ff50 	bl	80186fe <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801885e:	4629      	mov	r1, r5
 8018860:	9007      	str	r0, [sp, #28]
 8018862:	4640      	mov	r0, r8
 8018864:	f7ff fefc 	bl	8018660 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018868:	fb90 f0f4 	sdiv	r0, r0, r4
 801886c:	6b74      	ldr	r4, [r6, #52]	; 0x34
 801886e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018870:	aa08      	add	r2, sp, #32
 8018872:	1a24      	subs	r4, r4, r0
 8018874:	f842 4d08 	str.w	r4, [r2, #-8]!
 8018878:	9302      	str	r3, [sp, #8]
 801887a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801887c:	9301      	str	r3, [sp, #4]
 801887e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018880:	9300      	str	r3, [sp, #0]
 8018882:	a905      	add	r1, sp, #20
 8018884:	463b      	mov	r3, r7
 8018886:	4630      	mov	r0, r6
 8018888:	f7ff ffb5 	bl	80187f6 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801888c:	b009      	add	sp, #36	; 0x24
 801888e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08018892 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 8018892:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018896:	4291      	cmp	r1, r2
 8018898:	b08d      	sub	sp, #52	; 0x34
 801889a:	e9cd 2106 	strd	r2, r1, [sp, #24]
 801889e:	bfc8      	it	gt
 80188a0:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 80188a4:	461e      	mov	r6, r3
 80188a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80188aa:	1a9b      	subs	r3, r3, r2
 80188ac:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80188b0:	bfa2      	ittt	ge
 80188b2:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 80188b6:	2200      	movge	r2, #0
 80188b8:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 80188bc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80188be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80188c0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80188c4:	ad0c      	add	r5, sp, #48	; 0x30
 80188c6:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 80188ca:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80188ce:	f845 3d04 	str.w	r3, [r5, #-4]!
 80188d2:	a907      	add	r1, sp, #28
 80188d4:	4633      	mov	r3, r6
 80188d6:	462a      	mov	r2, r5
 80188d8:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80188dc:	9700      	str	r7, [sp, #0]
 80188de:	4604      	mov	r4, r0
 80188e0:	f7ff ffa2 	bl	8018828 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80188e4:	9b07      	ldr	r3, [sp, #28]
 80188e6:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 80188ea:	f103 0120 	add.w	r1, r3, #32
 80188ee:	fb91 f3f0 	sdiv	r3, r1, r0
 80188f2:	fb00 1313 	mls	r3, r0, r3, r1
 80188f6:	1ac3      	subs	r3, r0, r3
 80188f8:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 80188fc:	fb93 f2f0 	sdiv	r2, r3, r0
 8018900:	fb00 3312 	mls	r3, r0, r2, r3
 8018904:	440b      	add	r3, r1
 8018906:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 801890a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801890c:	9906      	ldr	r1, [sp, #24]
 801890e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018910:	4291      	cmp	r1, r2
 8018912:	db11      	blt.n	8018938 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 8018914:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018916:	9700      	str	r7, [sp, #0]
 8018918:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801891c:	930b      	str	r3, [sp, #44]	; 0x2c
 801891e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018922:	4633      	mov	r3, r6
 8018924:	462a      	mov	r2, r5
 8018926:	4651      	mov	r1, sl
 8018928:	4620      	mov	r0, r4
 801892a:	f7ff ff7d 	bl	8018828 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801892e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018930:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8018934:	9309      	str	r3, [sp, #36]	; 0x24
 8018936:	e7e8      	b.n	801890a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8018938:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 801893c:	4291      	cmp	r1, r2
 801893e:	dd0c      	ble.n	801895a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 8018940:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018942:	9700      	str	r7, [sp, #0]
 8018944:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018948:	930b      	str	r3, [sp, #44]	; 0x2c
 801894a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801894e:	4633      	mov	r3, r6
 8018950:	462a      	mov	r2, r5
 8018952:	a906      	add	r1, sp, #24
 8018954:	4620      	mov	r0, r4
 8018956:	f7ff ff67 	bl	8018828 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801895a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801895c:	2b00      	cmp	r3, #0
 801895e:	f040 8097 	bne.w	8018a90 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 8018962:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8018966:	1a52      	subs	r2, r2, r1
 8018968:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 801896c:	da0a      	bge.n	8018984 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 801896e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018972:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8018976:	9700      	str	r7, [sp, #0]
 8018978:	4633      	mov	r3, r6
 801897a:	462a      	mov	r2, r5
 801897c:	a90a      	add	r1, sp, #40	; 0x28
 801897e:	4620      	mov	r0, r4
 8018980:	f7ff ff52 	bl	8018828 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018984:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8018988:	2bb3      	cmp	r3, #179	; 0xb3
 801898a:	d87e      	bhi.n	8018a8a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 801898c:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 8018990:	1a1b      	subs	r3, r3, r0
 8018992:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018996:	da78      	bge.n	8018a8a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8018998:	f7ff fe90 	bl	80186bc <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801899c:	ad0c      	add	r5, sp, #48	; 0x30
 801899e:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 80189a2:	f845 0d04 	str.w	r0, [r5, #-4]!
 80189a6:	4658      	mov	r0, fp
 80189a8:	4629      	mov	r1, r5
 80189aa:	f7ff fe59 	bl	8018660 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80189ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80189b0:	18c3      	adds	r3, r0, r3
 80189b2:	9807      	ldr	r0, [sp, #28]
 80189b4:	9305      	str	r3, [sp, #20]
 80189b6:	f7ff fea2 	bl	80186fe <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80189ba:	4629      	mov	r1, r5
 80189bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80189be:	4658      	mov	r0, fp
 80189c0:	f7ff fe4e 	bl	8018660 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80189c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80189c6:	9a05      	ldr	r2, [sp, #20]
 80189c8:	9700      	str	r7, [sp, #0]
 80189ca:	1a1b      	subs	r3, r3, r0
 80189cc:	f04f 0a02 	mov.w	sl, #2
 80189d0:	9304      	str	r3, [sp, #16]
 80189d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80189d4:	fb93 f3fa 	sdiv	r3, r3, sl
 80189d8:	1ad2      	subs	r2, r2, r3
 80189da:	920a      	str	r2, [sp, #40]	; 0x28
 80189dc:	9a04      	ldr	r2, [sp, #16]
 80189de:	1ad3      	subs	r3, r2, r3
 80189e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80189e2:	462a      	mov	r2, r5
 80189e4:	4633      	mov	r3, r6
 80189e6:	a90a      	add	r1, sp, #40	; 0x28
 80189e8:	4620      	mov	r0, r4
 80189ea:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80189ee:	f7ff ff02 	bl	80187f6 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80189f2:	9a05      	ldr	r2, [sp, #20]
 80189f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80189f6:	fb93 f3fa 	sdiv	r3, r3, sl
 80189fa:	189a      	adds	r2, r3, r2
 80189fc:	920a      	str	r2, [sp, #40]	; 0x28
 80189fe:	9a04      	ldr	r2, [sp, #16]
 8018a00:	9700      	str	r7, [sp, #0]
 8018a02:	4413      	add	r3, r2
 8018a04:	a90a      	add	r1, sp, #40	; 0x28
 8018a06:	462a      	mov	r2, r5
 8018a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8018a0a:	4620      	mov	r0, r4
 8018a0c:	4633      	mov	r3, r6
 8018a0e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018a12:	f7ff fef0 	bl	80187f6 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018a16:	9806      	ldr	r0, [sp, #24]
 8018a18:	f7ff fe50 	bl	80186bc <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018a1c:	4629      	mov	r1, r5
 8018a1e:	900b      	str	r0, [sp, #44]	; 0x2c
 8018a20:	4658      	mov	r0, fp
 8018a22:	f7ff fe1d 	bl	8018660 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018a26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018a28:	18c3      	adds	r3, r0, r3
 8018a2a:	9806      	ldr	r0, [sp, #24]
 8018a2c:	9304      	str	r3, [sp, #16]
 8018a2e:	f7ff fe66 	bl	80186fe <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018a32:	4629      	mov	r1, r5
 8018a34:	900b      	str	r0, [sp, #44]	; 0x2c
 8018a36:	4658      	mov	r0, fp
 8018a38:	f7ff fe12 	bl	8018660 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018a3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018a3e:	9a04      	ldr	r2, [sp, #16]
 8018a40:	9700      	str	r7, [sp, #0]
 8018a42:	eba3 0b00 	sub.w	fp, r3, r0
 8018a46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018a48:	fb93 f3fa 	sdiv	r3, r3, sl
 8018a4c:	1ad2      	subs	r2, r2, r3
 8018a4e:	ebab 0303 	sub.w	r3, fp, r3
 8018a52:	920a      	str	r2, [sp, #40]	; 0x28
 8018a54:	930b      	str	r3, [sp, #44]	; 0x2c
 8018a56:	462a      	mov	r2, r5
 8018a58:	4633      	mov	r3, r6
 8018a5a:	a90a      	add	r1, sp, #40	; 0x28
 8018a5c:	4620      	mov	r0, r4
 8018a5e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018a62:	f7ff fec8 	bl	80187f6 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018a66:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018a68:	fb93 fafa 	sdiv	sl, r3, sl
 8018a6c:	9b04      	ldr	r3, [sp, #16]
 8018a6e:	9700      	str	r7, [sp, #0]
 8018a70:	4453      	add	r3, sl
 8018a72:	930a      	str	r3, [sp, #40]	; 0x28
 8018a74:	eb0a 030b 	add.w	r3, sl, fp
 8018a78:	930b      	str	r3, [sp, #44]	; 0x2c
 8018a7a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018a7e:	4633      	mov	r3, r6
 8018a80:	462a      	mov	r2, r5
 8018a82:	a90a      	add	r1, sp, #40	; 0x28
 8018a84:	4620      	mov	r0, r4
 8018a86:	f7ff feb6 	bl	80187f6 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018a8a:	b00d      	add	sp, #52	; 0x34
 8018a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018a92:	9700      	str	r7, [sp, #0]
 8018a94:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018a98:	930b      	str	r3, [sp, #44]	; 0x2c
 8018a9a:	462a      	mov	r2, r5
 8018a9c:	4633      	mov	r3, r6
 8018a9e:	a907      	add	r1, sp, #28
 8018aa0:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018aa4:	4620      	mov	r0, r4
 8018aa6:	f7ff febf 	bl	8018828 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018aaa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018aac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018aae:	9700      	str	r7, [sp, #0]
 8018ab0:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018ab4:	930b      	str	r3, [sp, #44]	; 0x2c
 8018ab6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018aba:	4633      	mov	r3, r6
 8018abc:	462a      	mov	r2, r5
 8018abe:	a906      	add	r1, sp, #24
 8018ac0:	e75d      	b.n	801897e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

08018ac2 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8018ac2:	b530      	push	{r4, r5, lr}
 8018ac4:	4604      	mov	r4, r0
 8018ac6:	4608      	mov	r0, r1
 8018ac8:	4611      	mov	r1, r2
 8018aca:	461a      	mov	r2, r3
 8018acc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8018ad0:	b089      	sub	sp, #36	; 0x24
 8018ad2:	015b      	lsls	r3, r3, #5
 8018ad4:	9304      	str	r3, [sp, #16]
 8018ad6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018ada:	2500      	movs	r5, #0
 8018adc:	015b      	lsls	r3, r3, #5
 8018ade:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8018ae2:	ab07      	add	r3, sp, #28
 8018ae4:	9302      	str	r3, [sp, #8]
 8018ae6:	ab06      	add	r3, sp, #24
 8018ae8:	9301      	str	r3, [sp, #4]
 8018aea:	ab05      	add	r3, sp, #20
 8018aec:	9300      	str	r3, [sp, #0]
 8018aee:	ab04      	add	r3, sp, #16
 8018af0:	9505      	str	r5, [sp, #20]
 8018af2:	f7ff fece 	bl	8018892 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8018af6:	2520      	movs	r5, #32
 8018af8:	9a04      	ldr	r2, [sp, #16]
 8018afa:	9805      	ldr	r0, [sp, #20]
 8018afc:	fb92 f2f5 	sdiv	r2, r2, r5
 8018b00:	fb90 f0f5 	sdiv	r0, r0, r5
 8018b04:	b292      	uxth	r2, r2
 8018b06:	3002      	adds	r0, #2
 8018b08:	1a80      	subs	r0, r0, r2
 8018b0a:	9b06      	ldr	r3, [sp, #24]
 8018b0c:	9907      	ldr	r1, [sp, #28]
 8018b0e:	fb93 f3f5 	sdiv	r3, r3, r5
 8018b12:	fb91 f1f5 	sdiv	r1, r1, r5
 8018b16:	b29b      	uxth	r3, r3
 8018b18:	3102      	adds	r1, #2
 8018b1a:	1ac9      	subs	r1, r1, r3
 8018b1c:	3a01      	subs	r2, #1
 8018b1e:	3b01      	subs	r3, #1
 8018b20:	80a0      	strh	r0, [r4, #4]
 8018b22:	4620      	mov	r0, r4
 8018b24:	8022      	strh	r2, [r4, #0]
 8018b26:	8063      	strh	r3, [r4, #2]
 8018b28:	80e1      	strh	r1, [r4, #6]
 8018b2a:	b009      	add	sp, #36	; 0x24
 8018b2c:	bd30      	pop	{r4, r5, pc}

08018b2e <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8018b2e:	b510      	push	{r4, lr}
 8018b30:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8018b34:	4604      	mov	r4, r0
 8018b36:	f7ff ffc4 	bl	8018ac2 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8018b3a:	4620      	mov	r0, r4
 8018b3c:	bd10      	pop	{r4, pc}

08018b3e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 8018b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b40:	e9d1 540f 	ldrd	r5, r4, [r1, #60]	; 0x3c
 8018b44:	4606      	mov	r6, r0
 8018b46:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
 8018b4a:	6813      	ldr	r3, [r2, #0]
 8018b4c:	42a5      	cmp	r5, r4
 8018b4e:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8018b52:	da2b      	bge.n	8018bac <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 8018b54:	42a3      	cmp	r3, r4
 8018b56:	dd14      	ble.n	8018b82 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 8018b58:	b168      	cbz	r0, 8018b76 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018b5a:	4267      	negs	r7, r4
 8018b5c:	fb97 f2f0 	sdiv	r2, r7, r0
 8018b60:	fb00 7212 	mls	r2, r0, r2, r7
 8018b64:	1a82      	subs	r2, r0, r2
 8018b66:	fb92 f7f0 	sdiv	r7, r2, r0
 8018b6a:	fb00 2017 	mls	r0, r0, r7, r2
 8018b6e:	1a24      	subs	r4, r4, r0
 8018b70:	42ac      	cmp	r4, r5
 8018b72:	bfb8      	it	lt
 8018b74:	462c      	movlt	r4, r5
 8018b76:	4630      	mov	r0, r6
 8018b78:	4622      	mov	r2, r4
 8018b7a:	f7ff ffa2 	bl	8018ac2 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8018b7e:	4630      	mov	r0, r6
 8018b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b82:	42ab      	cmp	r3, r5
 8018b84:	dd0e      	ble.n	8018ba4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8018b86:	b168      	cbz	r0, 8018ba4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8018b88:	425f      	negs	r7, r3
 8018b8a:	fb97 f2f0 	sdiv	r2, r7, r0
 8018b8e:	fb00 7212 	mls	r2, r0, r2, r7
 8018b92:	1a82      	subs	r2, r0, r2
 8018b94:	fb92 f7f0 	sdiv	r7, r2, r0
 8018b98:	fb00 2017 	mls	r0, r0, r7, r2
 8018b9c:	1a1b      	subs	r3, r3, r0
 8018b9e:	42ab      	cmp	r3, r5
 8018ba0:	bfb8      	it	lt
 8018ba2:	462b      	movlt	r3, r5
 8018ba4:	4622      	mov	r2, r4
 8018ba6:	461c      	mov	r4, r3
 8018ba8:	4613      	mov	r3, r2
 8018baa:	e7e4      	b.n	8018b76 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018bac:	42a3      	cmp	r3, r4
 8018bae:	da10      	bge.n	8018bd2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 8018bb0:	b148      	cbz	r0, 8018bc6 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 8018bb2:	fb94 f2f0 	sdiv	r2, r4, r0
 8018bb6:	fb00 4212 	mls	r2, r0, r2, r4
 8018bba:	1a82      	subs	r2, r0, r2
 8018bbc:	fb92 f7f0 	sdiv	r7, r2, r0
 8018bc0:	fb00 2017 	mls	r0, r0, r7, r2
 8018bc4:	4404      	add	r4, r0
 8018bc6:	42a5      	cmp	r5, r4
 8018bc8:	bfa8      	it	ge
 8018bca:	4625      	movge	r5, r4
 8018bcc:	461c      	mov	r4, r3
 8018bce:	462b      	mov	r3, r5
 8018bd0:	e7d1      	b.n	8018b76 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018bd2:	42ab      	cmp	r3, r5
 8018bd4:	dacf      	bge.n	8018b76 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018bd6:	2800      	cmp	r0, #0
 8018bd8:	d0cd      	beq.n	8018b76 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018bda:	fb93 f2f0 	sdiv	r2, r3, r0
 8018bde:	fb00 3212 	mls	r2, r0, r2, r3
 8018be2:	1a82      	subs	r2, r0, r2
 8018be4:	fb92 f7f0 	sdiv	r7, r2, r0
 8018be8:	fb00 2017 	mls	r0, r0, r7, r2
 8018bec:	4403      	add	r3, r0
 8018bee:	42ab      	cmp	r3, r5
 8018bf0:	bfa8      	it	ge
 8018bf2:	462b      	movge	r3, r5
 8018bf4:	e7bf      	b.n	8018b76 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

08018bf6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8018bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bfa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8018bfc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8018bfe:	b0ba      	sub	sp, #232	; 0xe8
 8018c00:	429a      	cmp	r2, r3
 8018c02:	9303      	str	r3, [sp, #12]
 8018c04:	9204      	str	r2, [sp, #16]
 8018c06:	bfb8      	it	lt
 8018c08:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 8018c0c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8018c10:	1a9b      	subs	r3, r3, r2
 8018c12:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018c16:	bfa2      	ittt	ge
 8018c18:	2200      	movge	r2, #0
 8018c1a:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8018c1e:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 8018c22:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018c24:	4604      	mov	r4, r0
 8018c26:	460f      	mov	r7, r1
 8018c28:	ae0a      	add	r6, sp, #40	; 0x28
 8018c2a:	2a00      	cmp	r2, #0
 8018c2c:	d131      	bne.n	8018c92 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 8018c2e:	463a      	mov	r2, r7
 8018c30:	4621      	mov	r1, r4
 8018c32:	a80b      	add	r0, sp, #44	; 0x2c
 8018c34:	f012 feaa 	bl	802b98c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8018c38:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018c3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018c3c:	9205      	str	r2, [sp, #20]
 8018c3e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8018c42:	9306      	str	r3, [sp, #24]
 8018c44:	dc6d      	bgt.n	8018d22 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x12c>
 8018c46:	9b03      	ldr	r3, [sp, #12]
 8018c48:	9307      	str	r3, [sp, #28]
 8018c4a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8018c4e:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8018c52:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018c56:	930a      	str	r3, [sp, #40]	; 0x28
 8018c58:	aa07      	add	r2, sp, #28
 8018c5a:	4633      	mov	r3, r6
 8018c5c:	a90b      	add	r1, sp, #44	; 0x2c
 8018c5e:	4620      	mov	r0, r4
 8018c60:	016d      	lsls	r5, r5, #5
 8018c62:	f7ff fd6b 	bl	801873c <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018c66:	9f07      	ldr	r7, [sp, #28]
 8018c68:	2d00      	cmp	r5, #0
 8018c6a:	d163      	bne.n	8018d34 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x13e>
 8018c6c:	3720      	adds	r7, #32
 8018c6e:	9a04      	ldr	r2, [sp, #16]
 8018c70:	9b06      	ldr	r3, [sp, #24]
 8018c72:	4639      	mov	r1, r7
 8018c74:	4291      	cmp	r1, r2
 8018c76:	442f      	add	r7, r5
 8018c78:	dc69      	bgt.n	8018d4e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x158>
 8018c7a:	9a05      	ldr	r2, [sp, #20]
 8018c7c:	9107      	str	r1, [sp, #28]
 8018c7e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018c82:	930a      	str	r3, [sp, #40]	; 0x28
 8018c84:	aa07      	add	r2, sp, #28
 8018c86:	4633      	mov	r3, r6
 8018c88:	a90b      	add	r1, sp, #44	; 0x2c
 8018c8a:	4620      	mov	r0, r4
 8018c8c:	f7ff fda8 	bl	80187e0 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018c90:	e7ed      	b.n	8018c6e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8018c92:	f9b1 c000 	ldrsh.w	ip, [r1]
 8018c96:	88bd      	ldrh	r5, [r7, #4]
 8018c98:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8018c9c:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8018ca0:	4465      	add	r5, ip
 8018ca2:	b22d      	sxth	r5, r5
 8018ca4:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 8018ca8:	2d00      	cmp	r5, #0
 8018caa:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 8018cae:	bfb8      	it	lt
 8018cb0:	426d      	neglt	r5, r5
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	bfb8      	it	lt
 8018cb6:	425b      	neglt	r3, r3
 8018cb8:	429d      	cmp	r5, r3
 8018cba:	bfb8      	it	lt
 8018cbc:	461d      	movlt	r5, r3
 8018cbe:	88fb      	ldrh	r3, [r7, #6]
 8018cc0:	4403      	add	r3, r0
 8018cc2:	b21b      	sxth	r3, r3
 8018cc4:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 8018cce:	bfb8      	it	lt
 8018cd0:	425b      	neglt	r3, r3
 8018cd2:	2900      	cmp	r1, #0
 8018cd4:	bfb8      	it	lt
 8018cd6:	4249      	neglt	r1, r1
 8018cd8:	428b      	cmp	r3, r1
 8018cda:	bfb8      	it	lt
 8018cdc:	460b      	movlt	r3, r1
 8018cde:	115b      	asrs	r3, r3, #5
 8018ce0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8018ce4:	116d      	asrs	r5, r5, #5
 8018ce6:	3301      	adds	r3, #1
 8018ce8:	435b      	muls	r3, r3
 8018cea:	3501      	adds	r5, #1
 8018cec:	fb05 3505 	mla	r5, r5, r5, r3
 8018cf0:	3001      	adds	r0, #1
 8018cf2:	2302      	movs	r3, #2
 8018cf4:	fb92 f2f3 	sdiv	r2, r2, r3
 8018cf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018cfa:	1040      	asrs	r0, r0, #1
 8018cfc:	1a9a      	subs	r2, r3, r2
 8018cfe:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8018d02:	920a      	str	r2, [sp, #40]	; 0x28
 8018d04:	f7ff fcb8 	bl	8018678 <_ZN8touchgfx7CWRUtil4sineEi>
 8018d08:	a90b      	add	r1, sp, #44	; 0x2c
 8018d0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8018d0c:	4630      	mov	r0, r6
 8018d0e:	f7ff fca7 	bl	8018660 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018d12:	2320      	movs	r3, #32
 8018d14:	fb90 f0f3 	sdiv	r0, r0, r3
 8018d18:	4340      	muls	r0, r0
 8018d1a:	42a8      	cmp	r0, r5
 8018d1c:	dd87      	ble.n	8018c2e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 8018d1e:	2401      	movs	r4, #1
 8018d20:	e037      	b.n	8018d92 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19c>
 8018d22:	2102      	movs	r1, #2
 8018d24:	fb93 f3f1 	sdiv	r3, r3, r1
 8018d28:	4413      	add	r3, r2
 8018d2a:	9306      	str	r3, [sp, #24]
 8018d2c:	fb93 f3f1 	sdiv	r3, r3, r1
 8018d30:	9305      	str	r3, [sp, #20]
 8018d32:	e788      	b.n	8018c46 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 8018d34:	f107 0320 	add.w	r3, r7, #32
 8018d38:	fb93 f7f5 	sdiv	r7, r3, r5
 8018d3c:	fb05 3717 	mls	r7, r5, r7, r3
 8018d40:	1bea      	subs	r2, r5, r7
 8018d42:	fb92 f7f5 	sdiv	r7, r2, r5
 8018d46:	fb05 2717 	mls	r7, r5, r7, r2
 8018d4a:	441f      	add	r7, r3
 8018d4c:	e78f      	b.n	8018c6e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8018d4e:	9907      	ldr	r1, [sp, #28]
 8018d50:	428a      	cmp	r2, r1
 8018d52:	dd09      	ble.n	8018d68 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x172>
 8018d54:	9a05      	ldr	r2, [sp, #20]
 8018d56:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8018d5c:	aa04      	add	r2, sp, #16
 8018d5e:	4633      	mov	r3, r6
 8018d60:	a90b      	add	r1, sp, #44	; 0x2c
 8018d62:	4620      	mov	r0, r4
 8018d64:	f7ff fd3c 	bl	80187e0 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018d68:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8018d6c:	9a06      	ldr	r2, [sp, #24]
 8018d6e:	1ac3      	subs	r3, r0, r3
 8018d70:	b99a      	cbnz	r2, 8018d9a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a4>
 8018d72:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018d76:	da04      	bge.n	8018d82 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 8018d78:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8018d7c:	a80b      	add	r0, sp, #44	; 0x2c
 8018d7e:	f012 ff5f 	bl	802bc40 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018d82:	21ff      	movs	r1, #255	; 0xff
 8018d84:	a80b      	add	r0, sp, #44	; 0x2c
 8018d86:	f013 f8d0 	bl	802bf2a <_ZN8touchgfx6Canvas6renderEh>
 8018d8a:	4604      	mov	r4, r0
 8018d8c:	a80b      	add	r0, sp, #44	; 0x2c
 8018d8e:	f013 f90b 	bl	802bfa8 <_ZN8touchgfx6CanvasD1Ev>
 8018d92:	4620      	mov	r0, r4
 8018d94:	b03a      	add	sp, #232	; 0xe8
 8018d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d9a:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8018d9e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018da2:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8018da6:	da2b      	bge.n	8018e00 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20a>
 8018da8:	f7ff fc88 	bl	80186bc <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018dac:	4631      	mov	r1, r6
 8018dae:	900a      	str	r0, [sp, #40]	; 0x28
 8018db0:	a805      	add	r0, sp, #20
 8018db2:	f7ff fc55 	bl	8018660 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018db6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018db8:	4418      	add	r0, r3
 8018dba:	9008      	str	r0, [sp, #32]
 8018dbc:	9804      	ldr	r0, [sp, #16]
 8018dbe:	f7ff fc9e 	bl	80186fe <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018dc2:	4631      	mov	r1, r6
 8018dc4:	900a      	str	r0, [sp, #40]	; 0x28
 8018dc6:	a805      	add	r0, sp, #20
 8018dc8:	f7ff fc4a 	bl	8018660 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018dcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018dce:	1a18      	subs	r0, r3, r0
 8018dd0:	9b04      	ldr	r3, [sp, #16]
 8018dd2:	9009      	str	r0, [sp, #36]	; 0x24
 8018dd4:	443b      	add	r3, r7
 8018dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8018dd8:	f10d 0818 	add.w	r8, sp, #24
 8018ddc:	9b04      	ldr	r3, [sp, #16]
 8018dde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018de0:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8018de4:	4293      	cmp	r3, r2
 8018de6:	dd0b      	ble.n	8018e00 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20a>
 8018de8:	ab09      	add	r3, sp, #36	; 0x24
 8018dea:	e9cd 6800 	strd	r6, r8, [sp]
 8018dee:	aa08      	add	r2, sp, #32
 8018df0:	a90b      	add	r1, sp, #44	; 0x2c
 8018df2:	4620      	mov	r0, r4
 8018df4:	f7ff fccb 	bl	801878e <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8018df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018dfa:	443b      	add	r3, r7
 8018dfc:	930a      	str	r3, [sp, #40]	; 0x28
 8018dfe:	e7ed      	b.n	8018ddc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e6>
 8018e00:	9a04      	ldr	r2, [sp, #16]
 8018e02:	9b07      	ldr	r3, [sp, #28]
 8018e04:	429a      	cmp	r2, r3
 8018e06:	dd0a      	ble.n	8018e1e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x228>
 8018e08:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8018e0c:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018e10:	930a      	str	r3, [sp, #40]	; 0x28
 8018e12:	aa04      	add	r2, sp, #16
 8018e14:	4633      	mov	r3, r6
 8018e16:	a90b      	add	r1, sp, #44	; 0x2c
 8018e18:	4620      	mov	r0, r4
 8018e1a:	f7ff fce1 	bl	80187e0 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018e1e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018e22:	9b03      	ldr	r3, [sp, #12]
 8018e24:	4642      	mov	r2, r8
 8018e26:	429a      	cmp	r2, r3
 8018e28:	eba8 0805 	sub.w	r8, r8, r5
 8018e2c:	db0c      	blt.n	8018e48 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x252>
 8018e2e:	9207      	str	r2, [sp, #28]
 8018e30:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8018e34:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018e38:	930a      	str	r3, [sp, #40]	; 0x28
 8018e3a:	aa07      	add	r2, sp, #28
 8018e3c:	4633      	mov	r3, r6
 8018e3e:	a90b      	add	r1, sp, #44	; 0x2c
 8018e40:	4620      	mov	r0, r4
 8018e42:	f7ff fccd 	bl	80187e0 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018e46:	e7ec      	b.n	8018e22 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22c>
 8018e48:	9a07      	ldr	r2, [sp, #28]
 8018e4a:	4293      	cmp	r3, r2
 8018e4c:	da0a      	bge.n	8018e64 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x26e>
 8018e4e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8018e52:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018e56:	930a      	str	r3, [sp, #40]	; 0x28
 8018e58:	aa03      	add	r2, sp, #12
 8018e5a:	4633      	mov	r3, r6
 8018e5c:	a90b      	add	r1, sp, #44	; 0x2c
 8018e5e:	4620      	mov	r0, r4
 8018e60:	f7ff fcbe 	bl	80187e0 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018e64:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 8018e68:	1a1b      	subs	r3, r3, r0
 8018e6a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018e6e:	da88      	bge.n	8018d82 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 8018e70:	f7ff fc24 	bl	80186bc <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018e74:	4631      	mov	r1, r6
 8018e76:	900a      	str	r0, [sp, #40]	; 0x28
 8018e78:	a805      	add	r0, sp, #20
 8018e7a:	f7ff fbf1 	bl	8018660 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018e7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018e80:	4418      	add	r0, r3
 8018e82:	9008      	str	r0, [sp, #32]
 8018e84:	9803      	ldr	r0, [sp, #12]
 8018e86:	f7ff fc3a 	bl	80186fe <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018e8a:	4631      	mov	r1, r6
 8018e8c:	900a      	str	r0, [sp, #40]	; 0x28
 8018e8e:	a805      	add	r0, sp, #20
 8018e90:	f7ff fbe6 	bl	8018660 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018e94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018e96:	1a18      	subs	r0, r3, r0
 8018e98:	9b03      	ldr	r3, [sp, #12]
 8018e9a:	9009      	str	r0, [sp, #36]	; 0x24
 8018e9c:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 8018ea0:	443b      	add	r3, r7
 8018ea2:	930a      	str	r3, [sp, #40]	; 0x28
 8018ea4:	ad06      	add	r5, sp, #24
 8018ea6:	9a03      	ldr	r2, [sp, #12]
 8018ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018eaa:	429a      	cmp	r2, r3
 8018eac:	f77f af69 	ble.w	8018d82 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 8018eb0:	ab09      	add	r3, sp, #36	; 0x24
 8018eb2:	e9cd 6500 	strd	r6, r5, [sp]
 8018eb6:	aa08      	add	r2, sp, #32
 8018eb8:	a90b      	add	r1, sp, #44	; 0x2c
 8018eba:	4620      	mov	r0, r4
 8018ebc:	f7ff fc67 	bl	801878e <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8018ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018ec2:	443b      	add	r3, r7
 8018ec4:	930a      	str	r3, [sp, #40]	; 0x28
 8018ec6:	e7ee      	b.n	8018ea6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b0>

08018ec8 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8018ec8:	6281      	str	r1, [r0, #40]	; 0x28
 8018eca:	4770      	bx	lr

08018ecc <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8018ecc:	b510      	push	{r4, lr}
 8018ece:	2200      	movs	r2, #0
 8018ed0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8018ed4:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8018ed8:	8002      	strh	r2, [r0, #0]
 8018eda:	8042      	strh	r2, [r0, #2]
 8018edc:	8084      	strh	r4, [r0, #4]
 8018ede:	80c1      	strh	r1, [r0, #6]
 8018ee0:	bd10      	pop	{r4, pc}

08018ee2 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8018ee2:	2200      	movs	r2, #0
 8018ee4:	8002      	strh	r2, [r0, #0]
 8018ee6:	8042      	strh	r2, [r0, #2]
 8018ee8:	8082      	strh	r2, [r0, #4]
 8018eea:	80c2      	strh	r2, [r0, #6]
 8018eec:	4770      	bx	lr
	...

08018ef0 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8018ef0:	b508      	push	{r3, lr}
 8018ef2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018ef4:	b928      	cbnz	r0, 8018f02 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8018ef6:	4b03      	ldr	r3, [pc, #12]	; (8018f04 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8018ef8:	4a03      	ldr	r2, [pc, #12]	; (8018f08 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8018efa:	4804      	ldr	r0, [pc, #16]	; (8018f0c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8018efc:	2126      	movs	r1, #38	; 0x26
 8018efe:	f014 ffdf 	bl	802dec0 <__assert_func>
 8018f02:	bd08      	pop	{r3, pc}
 8018f04:	08031568 	.word	0x08031568
 8018f08:	08031648 	.word	0x08031648
 8018f0c:	0803158f 	.word	0x0803158f

08018f10 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018f10:	b510      	push	{r4, lr}
 8018f12:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018f16:	888a      	ldrh	r2, [r1, #4]
 8018f18:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018f1c:	4422      	add	r2, r4
 8018f1e:	b212      	sxth	r2, r2
 8018f20:	4293      	cmp	r3, r2
 8018f22:	da15      	bge.n	8018f50 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018f24:	8882      	ldrh	r2, [r0, #4]
 8018f26:	4413      	add	r3, r2
 8018f28:	b21b      	sxth	r3, r3
 8018f2a:	429c      	cmp	r4, r3
 8018f2c:	da10      	bge.n	8018f50 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018f2e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018f32:	88c9      	ldrh	r1, [r1, #6]
 8018f34:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018f38:	4419      	add	r1, r3
 8018f3a:	b209      	sxth	r1, r1
 8018f3c:	428a      	cmp	r2, r1
 8018f3e:	da07      	bge.n	8018f50 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018f40:	88c0      	ldrh	r0, [r0, #6]
 8018f42:	4410      	add	r0, r2
 8018f44:	b200      	sxth	r0, r0
 8018f46:	4283      	cmp	r3, r0
 8018f48:	bfac      	ite	ge
 8018f4a:	2000      	movge	r0, #0
 8018f4c:	2001      	movlt	r0, #1
 8018f4e:	bd10      	pop	{r4, pc}
 8018f50:	2000      	movs	r0, #0
 8018f52:	e7fc      	b.n	8018f4e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018f54 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8018f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f58:	4604      	mov	r4, r0
 8018f5a:	b08b      	sub	sp, #44	; 0x2c
 8018f5c:	6808      	ldr	r0, [r1, #0]
 8018f5e:	6849      	ldr	r1, [r1, #4]
 8018f60:	ab04      	add	r3, sp, #16
 8018f62:	c303      	stmia	r3!, {r0, r1}
 8018f64:	4b37      	ldr	r3, [pc, #220]	; (8019044 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 8018f66:	781b      	ldrb	r3, [r3, #0]
 8018f68:	2b01      	cmp	r3, #1
 8018f6a:	6823      	ldr	r3, [r4, #0]
 8018f6c:	4621      	mov	r1, r4
 8018f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f70:	a806      	add	r0, sp, #24
 8018f72:	bf1f      	itttt	ne
 8018f74:	f10d 090e 	addne.w	r9, sp, #14
 8018f78:	ae05      	addne	r6, sp, #20
 8018f7a:	f10d 0516 	addne.w	r5, sp, #22
 8018f7e:	f10d 0812 	addne.w	r8, sp, #18
 8018f82:	bf01      	itttt	eq
 8018f84:	f10d 0916 	addeq.w	r9, sp, #22
 8018f88:	f10d 060e 	addeq.w	r6, sp, #14
 8018f8c:	ad05      	addeq	r5, sp, #20
 8018f8e:	f10d 0810 	addeq.w	r8, sp, #16
 8018f92:	4798      	blx	r3
 8018f94:	f04f 0a00 	mov.w	sl, #0
 8018f98:	f647 7bff 	movw	fp, #32767	; 0x7fff
 8018f9c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8018fa0:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d042      	beq.n	801902e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 8018fa8:	4293      	cmp	r3, r2
 8018faa:	bfa8      	it	ge
 8018fac:	4613      	movge	r3, r2
 8018fae:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018fb2:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8018fb6:	2f00      	cmp	r7, #0
 8018fb8:	dd21      	ble.n	8018ffe <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 8018fba:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8018fbe:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8018fc2:	f9b6 2000 	ldrsh.w	r2, [r6]
 8018fc6:	f9b9 3000 	ldrsh.w	r3, [r9]
 8018fca:	f8ad 0020 	strh.w	r0, [sp, #32]
 8018fce:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8018fd2:	a808      	add	r0, sp, #32
 8018fd4:	a906      	add	r1, sp, #24
 8018fd6:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8018fda:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8018fde:	f7ff ff97 	bl	8018f10 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018fe2:	9001      	str	r0, [sp, #4]
 8018fe4:	b1d0      	cbz	r0, 801901c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8018fe6:	6822      	ldr	r2, [r4, #0]
 8018fe8:	a908      	add	r1, sp, #32
 8018fea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8018fec:	4620      	mov	r0, r4
 8018fee:	4790      	blx	r2
 8018ff0:	b9a0      	cbnz	r0, 801901c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8018ff2:	9b01      	ldr	r3, [sp, #4]
 8018ff4:	107f      	asrs	r7, r7, #1
 8018ff6:	f8ad 700e 	strh.w	r7, [sp, #14]
 8018ffa:	469a      	mov	sl, r3
 8018ffc:	e7d9      	b.n	8018fb2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8018ffe:	d10d      	bne.n	801901c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8019000:	2301      	movs	r3, #1
 8019002:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019006:	f8b8 2000 	ldrh.w	r2, [r8]
 801900a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 801900e:	440a      	add	r2, r1
 8019010:	f8a8 2000 	strh.w	r2, [r8]
 8019014:	882b      	ldrh	r3, [r5, #0]
 8019016:	1a5b      	subs	r3, r3, r1
 8019018:	802b      	strh	r3, [r5, #0]
 801901a:	e7bf      	b.n	8018f9c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801901c:	f1ba 0f00 	cmp.w	sl, #0
 8019020:	d0f1      	beq.n	8019006 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8019022:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8019026:	455b      	cmp	r3, fp
 8019028:	bf08      	it	eq
 801902a:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 801902c:	e7eb      	b.n	8019006 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 801902e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019032:	429a      	cmp	r2, r3
 8019034:	bf04      	itt	eq
 8019036:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801903a:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 801903c:	b00b      	add	sp, #44	; 0x2c
 801903e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019042:	bf00      	nop
 8019044:	20009774 	.word	0x20009774

08019048 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8019048:	b5f0      	push	{r4, r5, r6, r7, lr}
 801904a:	6803      	ldr	r3, [r0, #0]
 801904c:	b085      	sub	sp, #20
 801904e:	4604      	mov	r4, r0
 8019050:	4601      	mov	r1, r0
 8019052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019054:	4668      	mov	r0, sp
 8019056:	4798      	blx	r3
 8019058:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 801905c:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8019060:	f8ad 600c 	strh.w	r6, [sp, #12]
 8019064:	2300      	movs	r3, #0
 8019066:	a902      	add	r1, sp, #8
 8019068:	4668      	mov	r0, sp
 801906a:	9302      	str	r3, [sp, #8]
 801906c:	f8ad 500e 	strh.w	r5, [sp, #14]
 8019070:	f7ff ff4e 	bl	8018f10 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019074:	b340      	cbz	r0, 80190c8 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 8019076:	f9bd 2000 	ldrsh.w	r2, [sp]
 801907a:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 801907e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8019082:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8019086:	443a      	add	r2, r7
 8019088:	b292      	uxth	r2, r2
 801908a:	b217      	sxth	r7, r2
 801908c:	42be      	cmp	r6, r7
 801908e:	bfd8      	it	le
 8019090:	b2b2      	uxthle	r2, r6
 8019092:	1a12      	subs	r2, r2, r0
 8019094:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019098:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801909c:	f8ad 0000 	strh.w	r0, [sp]
 80190a0:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 80190a4:	4413      	add	r3, r2
 80190a6:	b29b      	uxth	r3, r3
 80190a8:	b21a      	sxth	r2, r3
 80190aa:	4295      	cmp	r5, r2
 80190ac:	bfd8      	it	le
 80190ae:	b2ab      	uxthle	r3, r5
 80190b0:	1a5b      	subs	r3, r3, r1
 80190b2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80190b6:	f8ad 1002 	strh.w	r1, [sp, #2]
 80190ba:	6823      	ldr	r3, [r4, #0]
 80190bc:	4669      	mov	r1, sp
 80190be:	691b      	ldr	r3, [r3, #16]
 80190c0:	4620      	mov	r0, r4
 80190c2:	4798      	blx	r3
 80190c4:	b005      	add	sp, #20
 80190c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190c8:	e9cd 0000 	strd	r0, r0, [sp]
 80190cc:	e7f5      	b.n	80190ba <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

080190d0 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80190d0:	2200      	movs	r2, #0
 80190d2:	8082      	strh	r2, [r0, #4]
 80190d4:	80c2      	strh	r2, [r0, #6]
 80190d6:	8102      	strh	r2, [r0, #8]
 80190d8:	8142      	strh	r2, [r0, #10]
 80190da:	8182      	strh	r2, [r0, #12]
 80190dc:	81c2      	strh	r2, [r0, #14]
 80190de:	8202      	strh	r2, [r0, #16]
 80190e0:	8242      	strh	r2, [r0, #18]
 80190e2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80190e6:	61c2      	str	r2, [r0, #28]
 80190e8:	8402      	strh	r2, [r0, #32]
 80190ea:	8442      	strh	r2, [r0, #34]	; 0x22
 80190ec:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80190f0:	2101      	movs	r1, #1
 80190f2:	6282      	str	r2, [r0, #40]	; 0x28
 80190f4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80190f8:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80190fc:	8582      	strh	r2, [r0, #44]	; 0x2c
 80190fe:	4903      	ldr	r1, [pc, #12]	; (801910c <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 8019100:	6001      	str	r1, [r0, #0]
 8019102:	22ff      	movs	r2, #255	; 0xff
 8019104:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8019108:	4770      	bx	lr
 801910a:	bf00      	nop
 801910c:	080315d4 	.word	0x080315d4

08019110 <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 8019110:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8019114:	4770      	bx	lr

08019116 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 8019116:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 801911a:	4770      	bx	lr

0801911c <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 801911c:	6802      	ldr	r2, [r0, #0]
 801911e:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8019122:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8019124:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8019128:	4710      	bx	r2

0801912a <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 801912a:	6802      	ldr	r2, [r0, #0]
 801912c:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8019130:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8019132:	eef0 0a40 	vmov.f32	s1, s0
 8019136:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801913a:	4710      	bx	r2

0801913c <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 801913c:	6802      	ldr	r2, [r0, #0]
 801913e:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8019142:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8019144:	eeb0 1a40 	vmov.f32	s2, s0
 8019148:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801914c:	4710      	bx	r2

0801914e <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 801914e:	6802      	ldr	r2, [r0, #0]
 8019150:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8019154:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8019156:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 801915a:	4710      	bx	r2

0801915c <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 801915c:	6802      	ldr	r2, [r0, #0]
 801915e:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8019162:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8019164:	eef0 0a40 	vmov.f32	s1, s0
 8019168:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801916c:	4710      	bx	r2

0801916e <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 801916e:	6802      	ldr	r2, [r0, #0]
 8019170:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8019174:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8019176:	eeb0 1a40 	vmov.f32	s2, s0
 801917a:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801917e:	4710      	bx	r2

08019180 <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 8019180:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8019184:	4770      	bx	lr

08019186 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 8019186:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 801918a:	4770      	bx	lr

0801918c <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 801918c:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 8019190:	4770      	bx	lr

08019192 <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 8019192:	ed90 0a10 	vldr	s0, [r0, #64]	; 0x40
 8019196:	4770      	bx	lr

08019198 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 8019198:	ed90 0a11 	vldr	s0, [r0, #68]	; 0x44
 801919c:	4770      	bx	lr

0801919e <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 801919e:	ed90 0a12 	vldr	s0, [r0, #72]	; 0x48
 80191a2:	4770      	bx	lr

080191a4 <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 80191a4:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 80191a8:	4770      	bx	lr

080191aa <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 80191aa:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
 80191ae:	4770      	bx	lr

080191b0 <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 80191b0:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 80191b4:	4770      	bx	lr

080191b6 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 80191b6:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
 80191ba:	4770      	bx	lr

080191bc <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 80191bc:	ee07 2a90 	vmov	s15, r2
 80191c0:	6803      	ldr	r3, [r0, #0]
 80191c2:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80191c6:	ee07 1a90 	vmov	s15, r1
 80191ca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80191ce:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80191d2:	4718      	bx	r3

080191d4 <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 80191d4:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 80191d8:	4770      	bx	lr

080191da <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 80191da:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 80191de:	4770      	bx	lr

080191e0 <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 80191e0:	ed90 0a17 	vldr	s0, [r0, #92]	; 0x5c
 80191e4:	4770      	bx	lr

080191e6 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 80191e6:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 80191ea:	4770      	bx	lr

080191ec <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 80191ec:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
 80191f0:	4770      	bx	lr

080191f2 <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 80191f2:	ed90 0a20 	vldr	s0, [r0, #128]	; 0x80
 80191f6:	4770      	bx	lr

080191f8 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 80191f8:	ed90 0a18 	vldr	s0, [r0, #96]	; 0x60
 80191fc:	4770      	bx	lr

080191fe <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 80191fe:	ed90 0a1b 	vldr	s0, [r0, #108]	; 0x6c
 8019202:	4770      	bx	lr

08019204 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 8019204:	ed90 0a1e 	vldr	s0, [r0, #120]	; 0x78
 8019208:	4770      	bx	lr

0801920a <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 801920a:	ed90 0a21 	vldr	s0, [r0, #132]	; 0x84
 801920e:	4770      	bx	lr

08019210 <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 8019210:	ed90 0a19 	vldr	s0, [r0, #100]	; 0x64
 8019214:	4770      	bx	lr

08019216 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 8019216:	ed90 0a1c 	vldr	s0, [r0, #112]	; 0x70
 801921a:	4770      	bx	lr

0801921c <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 801921c:	ed90 0a1f 	vldr	s0, [r0, #124]	; 0x7c
 8019220:	4770      	bx	lr

08019222 <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 8019222:	ed90 0a22 	vldr	s0, [r0, #136]	; 0x88
 8019226:	4770      	bx	lr

08019228 <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 8019228:	2200      	movs	r2, #0
 801922a:	8002      	strh	r2, [r0, #0]
 801922c:	8042      	strh	r2, [r0, #2]
 801922e:	8082      	strh	r2, [r0, #4]
 8019230:	80c2      	strh	r2, [r0, #6]
 8019232:	4770      	bx	lr

08019234 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 8019234:	b538      	push	{r3, r4, r5, lr}
 8019236:	2500      	movs	r5, #0
 8019238:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801923c:	2301      	movs	r3, #1
 801923e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 8019242:	4b1f      	ldr	r3, [pc, #124]	; (80192c0 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 8019244:	8085      	strh	r5, [r0, #4]
 8019246:	80c5      	strh	r5, [r0, #6]
 8019248:	8105      	strh	r5, [r0, #8]
 801924a:	8145      	strh	r5, [r0, #10]
 801924c:	8185      	strh	r5, [r0, #12]
 801924e:	81c5      	strh	r5, [r0, #14]
 8019250:	8205      	strh	r5, [r0, #16]
 8019252:	8245      	strh	r5, [r0, #18]
 8019254:	61c5      	str	r5, [r0, #28]
 8019256:	8405      	strh	r5, [r0, #32]
 8019258:	8445      	strh	r5, [r0, #34]	; 0x22
 801925a:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 801925e:	6003      	str	r3, [r0, #0]
 8019260:	880b      	ldrh	r3, [r1, #0]
 8019262:	84c3      	strh	r3, [r0, #38]	; 0x26
 8019264:	23ff      	movs	r3, #255	; 0xff
 8019266:	4604      	mov	r4, r0
 8019268:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801926c:	f001 fa02 	bl	801a674 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8019270:	4b14      	ldr	r3, [pc, #80]	; (80192c4 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 8019272:	6023      	str	r3, [r4, #0]
 8019274:	2300      	movs	r3, #0
 8019276:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801927a:	4913      	ldr	r1, [pc, #76]	; (80192c8 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 801927c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801927e:	6323      	str	r3, [r4, #48]	; 0x30
 8019280:	6363      	str	r3, [r4, #52]	; 0x34
 8019282:	63a3      	str	r3, [r4, #56]	; 0x38
 8019284:	63e3      	str	r3, [r4, #60]	; 0x3c
 8019286:	6463      	str	r3, [r4, #68]	; 0x44
 8019288:	64a3      	str	r3, [r4, #72]	; 0x48
 801928a:	6523      	str	r3, [r4, #80]	; 0x50
 801928c:	6563      	str	r3, [r4, #84]	; 0x54
 801928e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8019290:	6623      	str	r3, [r4, #96]	; 0x60
 8019292:	66a3      	str	r3, [r4, #104]	; 0x68
 8019294:	66e3      	str	r3, [r4, #108]	; 0x6c
 8019296:	6763      	str	r3, [r4, #116]	; 0x74
 8019298:	67a3      	str	r3, [r4, #120]	; 0x78
 801929a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 801929e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80192a2:	230c      	movs	r3, #12
 80192a4:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 80192a8:	6422      	str	r2, [r4, #64]	; 0x40
 80192aa:	64e1      	str	r1, [r4, #76]	; 0x4c
 80192ac:	65a1      	str	r1, [r4, #88]	; 0x58
 80192ae:	6662      	str	r2, [r4, #100]	; 0x64
 80192b0:	6722      	str	r2, [r4, #112]	; 0x70
 80192b2:	67e2      	str	r2, [r4, #124]	; 0x7c
 80192b4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 80192b8:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 80192bc:	4620      	mov	r0, r4
 80192be:	bd38      	pop	{r3, r4, r5, pc}
 80192c0:	08031b88 	.word	0x08031b88
 80192c4:	080316a0 	.word	0x080316a0
 80192c8:	447a0000 	.word	0x447a0000

080192cc <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 80192cc:	b570      	push	{r4, r5, r6, lr}
 80192ce:	ed2d 8b04 	vpush	{d8-d9}
 80192d2:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 80192d6:	add0      	add	r5, sp, #832	; 0x340
 80192d8:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80192da:	f825 3d40 	strh.w	r3, [r5, #-64]!
 80192de:	4604      	mov	r4, r0
 80192e0:	4628      	mov	r0, r5
 80192e2:	f006 fad5 	bl	801f890 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80192e6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80192e8:	f8ad 3300 	strh.w	r3, [sp, #768]	; 0x300
 80192ec:	4606      	mov	r6, r0
 80192ee:	4628      	mov	r0, r5
 80192f0:	f006 fb08 	bl	801f904 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80192f4:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80192f8:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 80192fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80192fe:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 8019302:	9312      	str	r3, [sp, #72]	; 0x48
 8019304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019308:	1c72      	adds	r2, r6, #1
 801930a:	3001      	adds	r0, #1
 801930c:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8019310:	ee07 2a90 	vmov	s15, r2
 8019314:	ee06 0a90 	vmov	s13, r0
 8019318:	ee36 6a47 	vsub.f32	s12, s12, s14
 801931c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019320:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019324:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019328:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801932c:	9316      	str	r3, [sp, #88]	; 0x58
 801932e:	931a      	str	r3, [sp, #104]	; 0x68
 8019330:	931e      	str	r3, [sp, #120]	; 0x78
 8019332:	2300      	movs	r3, #0
 8019334:	9320      	str	r3, [sp, #128]	; 0x80
 8019336:	9321      	str	r3, [sp, #132]	; 0x84
 8019338:	9322      	str	r3, [sp, #136]	; 0x88
 801933a:	9324      	str	r3, [sp, #144]	; 0x90
 801933c:	9325      	str	r3, [sp, #148]	; 0x94
 801933e:	9326      	str	r3, [sp, #152]	; 0x98
 8019340:	9328      	str	r3, [sp, #160]	; 0xa0
 8019342:	9329      	str	r3, [sp, #164]	; 0xa4
 8019344:	932a      	str	r3, [sp, #168]	; 0xa8
 8019346:	932c      	str	r3, [sp, #176]	; 0xb0
 8019348:	932d      	str	r3, [sp, #180]	; 0xb4
 801934a:	932e      	str	r3, [sp, #184]	; 0xb8
 801934c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019350:	edcd 5a11 	vstr	s11, [sp, #68]	; 0x44
 8019354:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 8019358:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 801935c:	edcd 5a15 	vstr	s11, [sp, #84]	; 0x54
 8019360:	ed8d 7a17 	vstr	s14, [sp, #92]	; 0x5c
 8019364:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 8019368:	edcd 6a19 	vstr	s13, [sp, #100]	; 0x64
 801936c:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 8019370:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 8019374:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8019378:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
 801937c:	a830      	add	r0, sp, #192	; 0xc0
 801937e:	edd4 8a12 	vldr	s17, [r4, #72]	; 0x48
 8019382:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 8019386:	f005 f935 	bl	801e5f4 <_ZN8touchgfx9Matrix4x4C1Ev>
 801938a:	eeb1 0a49 	vneg.f32	s0, s18
 801938e:	a830      	add	r0, sp, #192	; 0xc0
 8019390:	f005 fa04 	bl	801e79c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8019394:	eeb1 0a68 	vneg.f32	s0, s17
 8019398:	f005 fa0e 	bl	801e7b8 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801939c:	eeb1 0a48 	vneg.f32	s0, s16
 80193a0:	f005 fa19 	bl	801e7d6 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 80193a4:	a840      	add	r0, sp, #256	; 0x100
 80193a6:	f005 f925 	bl	801e5f4 <_ZN8touchgfx9Matrix4x4C1Ev>
 80193aa:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 80193ae:	a840      	add	r0, sp, #256	; 0x100
 80193b0:	f005 f978 	bl	801e6a4 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 80193b4:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 80193b8:	f005 f99e 	bl	801e6f8 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 80193bc:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 80193c0:	f005 f9c3 	bl	801e74a <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 80193c4:	a850      	add	r0, sp, #320	; 0x140
 80193c6:	f005 f915 	bl	801e5f4 <_ZN8touchgfx9Matrix4x4C1Ev>
 80193ca:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 80193ce:	a850      	add	r0, sp, #320	; 0x140
 80193d0:	f005 fa10 	bl	801e7f4 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 80193d4:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 80193d8:	f005 fa18 	bl	801e80c <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 80193dc:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 80193e0:	f005 fa21 	bl	801e826 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 80193e4:	a860      	add	r0, sp, #384	; 0x180
 80193e6:	f005 f905 	bl	801e5f4 <_ZN8touchgfx9Matrix4x4C1Ev>
 80193ea:	eeb0 0a49 	vmov.f32	s0, s18
 80193ee:	a860      	add	r0, sp, #384	; 0x180
 80193f0:	f005 f9d4 	bl	801e79c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80193f4:	eeb0 0a68 	vmov.f32	s0, s17
 80193f8:	f005 f9de 	bl	801e7b8 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80193fc:	eeb0 0a48 	vmov.f32	s0, s16
 8019400:	f005 f9e9 	bl	801e7d6 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8019404:	aa50      	add	r2, sp, #320	; 0x140
 8019406:	a960      	add	r1, sp, #384	; 0x180
 8019408:	a8b0      	add	r0, sp, #704	; 0x2c0
 801940a:	f005 f90d 	bl	801e628 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801940e:	4628      	mov	r0, r5
 8019410:	aa40      	add	r2, sp, #256	; 0x100
 8019412:	a9b0      	add	r1, sp, #704	; 0x2c0
 8019414:	f005 f908 	bl	801e628 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8019418:	4629      	mov	r1, r5
 801941a:	aa30      	add	r2, sp, #192	; 0xc0
 801941c:	a870      	add	r0, sp, #448	; 0x1c0
 801941e:	f005 f903 	bl	801e628 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8019422:	a880      	add	r0, sp, #512	; 0x200
 8019424:	f005 f8e6 	bl	801e5f4 <_ZN8touchgfx9Matrix4x4C1Ev>
 8019428:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 801942c:	a880      	add	r0, sp, #512	; 0x200
 801942e:	eeb1 0a40 	vneg.f32	s0, s0
 8019432:	f005 f9b3 	bl	801e79c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8019436:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 801943a:	a880      	add	r0, sp, #512	; 0x200
 801943c:	eeb1 0a40 	vneg.f32	s0, s0
 8019440:	f005 f9ba 	bl	801e7b8 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8019444:	a890      	add	r0, sp, #576	; 0x240
 8019446:	f005 f8d5 	bl	801e5f4 <_ZN8touchgfx9Matrix4x4C1Ev>
 801944a:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
 801944e:	a890      	add	r0, sp, #576	; 0x240
 8019450:	f005 f918 	bl	801e684 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 8019454:	a8a0      	add	r0, sp, #640	; 0x280
 8019456:	f005 f8cd 	bl	801e5f4 <_ZN8touchgfx9Matrix4x4C1Ev>
 801945a:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 801945e:	a8a0      	add	r0, sp, #640	; 0x280
 8019460:	f005 f99c 	bl	801e79c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8019464:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8019468:	f005 f9a6 	bl	801e7b8 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801946c:	aa90      	add	r2, sp, #576	; 0x240
 801946e:	a9a0      	add	r1, sp, #640	; 0x280
 8019470:	a8b0      	add	r0, sp, #704	; 0x2c0
 8019472:	f005 f8d9 	bl	801e628 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8019476:	4628      	mov	r0, r5
 8019478:	aa80      	add	r2, sp, #512	; 0x200
 801947a:	a9b0      	add	r1, sp, #704	; 0x2c0
 801947c:	f005 f8d4 	bl	801e628 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8019480:	4629      	mov	r1, r5
 8019482:	aa70      	add	r2, sp, #448	; 0x1c0
 8019484:	4668      	mov	r0, sp
 8019486:	466d      	mov	r5, sp
 8019488:	f005 f8ce 	bl	801e628 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801948c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801948e:	ae70      	add	r6, sp, #448	; 0x1c0
 8019490:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019494:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019498:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801949a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801949e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80194a2:	2500      	movs	r5, #0
 80194a4:	0129      	lsls	r1, r5, #4
 80194a6:	ab20      	add	r3, sp, #128	; 0x80
 80194a8:	185e      	adds	r6, r3, r1
 80194aa:	ab10      	add	r3, sp, #64	; 0x40
 80194ac:	4419      	add	r1, r3
 80194ae:	a870      	add	r0, sp, #448	; 0x1c0
 80194b0:	f005 f870 	bl	801e594 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 80194b4:	3501      	adds	r5, #1
 80194b6:	2d04      	cmp	r5, #4
 80194b8:	ed86 0a00 	vstr	s0, [r6]
 80194bc:	edc6 0a01 	vstr	s1, [r6, #4]
 80194c0:	ed86 1a02 	vstr	s2, [r6, #8]
 80194c4:	edc6 1a03 	vstr	s3, [r6, #12]
 80194c8:	d1ec      	bne.n	80194a4 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 80194ca:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 80194ce:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 80194d2:	ed9d 7a22 	vldr	s14, [sp, #136]	; 0x88
 80194d6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80194da:	ed84 7a19 	vstr	s14, [r4, #100]	; 0x64
 80194de:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80194e2:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 80194e6:	ed84 6a17 	vstr	s12, [r4, #92]	; 0x5c
 80194ea:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80194ee:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80194f2:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
 80194f6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80194fa:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 80194fe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8019502:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 8019506:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801950a:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 801950e:	ed84 6a1a 	vstr	s12, [r4, #104]	; 0x68
 8019512:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8019516:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801951a:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 801951e:	ed9d 7a2a 	vldr	s14, [sp, #168]	; 0xa8
 8019522:	ed84 6a1b 	vstr	s12, [r4, #108]	; 0x6c
 8019526:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801952a:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 801952e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8019532:	eddd 6a29 	vldr	s13, [sp, #164]	; 0xa4
 8019536:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
 801953a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801953e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8019542:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 8019546:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 801954a:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
 801954e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8019552:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
 8019556:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801955a:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 801955e:	ed84 6a20 	vstr	s12, [r4, #128]	; 0x80
 8019562:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019566:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801956a:	edc4 6a21 	vstr	s13, [r4, #132]	; 0x84
 801956e:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
 8019572:	ecbd 8b04 	vpop	{d8-d9}
 8019576:	bd70      	pop	{r4, r5, r6, pc}

08019578 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 8019578:	b510      	push	{r4, lr}
 801957a:	4604      	mov	r4, r0
 801957c:	f001 f87a 	bl	801a674 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8019580:	4620      	mov	r0, r4
 8019582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019586:	f7ff bea1 	b.w	80192cc <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801958a <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 801958a:	ed80 0a0d 	vstr	s0, [r0, #52]	; 0x34
 801958e:	edc0 0a0e 	vstr	s1, [r0, #56]	; 0x38
 8019592:	ed80 1a0f 	vstr	s2, [r0, #60]	; 0x3c
 8019596:	f7ff be99 	b.w	80192cc <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801959a <_ZN8touchgfx13TextureMapper8setScaleEf>:
 801959a:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
 801959e:	f7ff be95 	b.w	80192cc <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080195a2 <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 80195a2:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
 80195a6:	edc0 0a0c 	vstr	s1, [r0, #48]	; 0x30
 80195aa:	f7ff be8f 	b.w	80192cc <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080195ae <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 80195ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80195b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80195b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195ba:	bfd8      	it	le
 80195bc:	eeb0 0a67 	vmovle.f32	s0, s15
 80195c0:	ed80 0a16 	vstr	s0, [r0, #88]	; 0x58
 80195c4:	f7ff be82 	b.w	80192cc <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080195c8 <_ZN8touchgfx13TextureMapper9setCameraEff>:
 80195c8:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
 80195cc:	edc0 0a15 	vstr	s1, [r0, #84]	; 0x54
 80195d0:	f7ff be7c 	b.w	80192cc <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080195d4 <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 80195d4:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 80195d8:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 80195dc:	f7ff be76 	b.w	80192cc <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080195e0 <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 80195e0:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 80195e4:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 80195e8:	ed80 1a13 	vstr	s2, [r0, #76]	; 0x4c
 80195ec:	f7ff be6e 	b.w	80192cc <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080195f0 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 80195f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195f4:	ed2d 8b04 	vpush	{d8-d9}
 80195f8:	edd1 9a1a 	vldr	s19, [r1, #104]	; 0x68
 80195fc:	ed91 8a17 	vldr	s16, [r1, #92]	; 0x5c
 8019600:	ed91 9a1d 	vldr	s18, [r1, #116]	; 0x74
 8019604:	edd1 8a20 	vldr	s17, [r1, #128]	; 0x80
 8019608:	eeb4 8ae9 	vcmpe.f32	s16, s19
 801960c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019610:	bf54      	ite	pl
 8019612:	eeb0 0a69 	vmovpl.f32	s0, s19
 8019616:	eeb0 0a48 	vmovmi.f32	s0, s16
 801961a:	eeb4 9ac0 	vcmpe.f32	s18, s0
 801961e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019622:	bfd8      	it	le
 8019624:	eeb0 0a49 	vmovle.f32	s0, s18
 8019628:	eef4 8ac0 	vcmpe.f32	s17, s0
 801962c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019630:	bfd8      	it	le
 8019632:	eeb0 0a68 	vmovle.f32	s0, s17
 8019636:	460c      	mov	r4, r1
 8019638:	4607      	mov	r7, r0
 801963a:	f013 fecd 	bl	802d3d8 <floorf>
 801963e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019646:	bf58      	it	pl
 8019648:	eebd 0ac0 	vcvtpl.s32.f32	s0, s0
 801964c:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8019650:	bf56      	itet	pl
 8019652:	ee10 3a10 	vmovpl	r3, s0
 8019656:	2600      	movmi	r6, #0
 8019658:	b21e      	sxthpl	r6, r3
 801965a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801965e:	bfd8      	it	le
 8019660:	eeb0 8a69 	vmovle.f32	s16, s19
 8019664:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8019668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801966c:	bf58      	it	pl
 801966e:	eeb0 8a49 	vmovpl.f32	s16, s18
 8019672:	eef4 8ac8 	vcmpe.f32	s17, s16
 8019676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801967a:	bf54      	ite	pl
 801967c:	eeb0 0a68 	vmovpl.f32	s0, s17
 8019680:	eeb0 0a48 	vmovmi.f32	s0, s16
 8019684:	f013 fe26 	bl	802d2d4 <ceilf>
 8019688:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 801968c:	edd4 9a1b 	vldr	s19, [r4, #108]	; 0x6c
 8019690:	ed94 8a18 	vldr	s16, [r4, #96]	; 0x60
 8019694:	ed94 9a1e 	vldr	s18, [r4, #120]	; 0x78
 8019698:	edd4 8a21 	vldr	s17, [r4, #132]	; 0x84
 801969c:	ee07 8a90 	vmov	s15, r8
 80196a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80196a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80196a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196ac:	bfd8      	it	le
 80196ae:	eebd 0ac0 	vcvtle.s32.f32	s0, s0
 80196b2:	eeb4 8ae9 	vcmpe.f32	s16, s19
 80196b6:	bfdc      	itt	le
 80196b8:	ee10 3a10 	vmovle	r3, s0
 80196bc:	fa0f f883 	sxthle.w	r8, r3
 80196c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196c4:	bf54      	ite	pl
 80196c6:	eeb0 0a69 	vmovpl.f32	s0, s19
 80196ca:	eeb0 0a48 	vmovmi.f32	s0, s16
 80196ce:	eeb4 9ac0 	vcmpe.f32	s18, s0
 80196d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196d6:	bfd8      	it	le
 80196d8:	eeb0 0a49 	vmovle.f32	s0, s18
 80196dc:	eef4 8ac0 	vcmpe.f32	s17, s0
 80196e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196e4:	bfd8      	it	le
 80196e6:	eeb0 0a68 	vmovle.f32	s0, s17
 80196ea:	f013 fe75 	bl	802d3d8 <floorf>
 80196ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80196f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196f6:	bf58      	it	pl
 80196f8:	eebd 0ac0 	vcvtpl.s32.f32	s0, s0
 80196fc:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8019700:	bf56      	itet	pl
 8019702:	ee10 3a10 	vmovpl	r3, s0
 8019706:	2500      	movmi	r5, #0
 8019708:	b21d      	sxthpl	r5, r3
 801970a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801970e:	bfd8      	it	le
 8019710:	eeb0 8a69 	vmovle.f32	s16, s19
 8019714:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8019718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801971c:	bf58      	it	pl
 801971e:	eeb0 8a49 	vmovpl.f32	s16, s18
 8019722:	eef4 8ac8 	vcmpe.f32	s17, s16
 8019726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801972a:	bf54      	ite	pl
 801972c:	eeb0 0a68 	vmovpl.f32	s0, s17
 8019730:	eeb0 0a48 	vmovmi.f32	s0, s16
 8019734:	f013 fdce 	bl	802d2d4 <ceilf>
 8019738:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801973c:	803e      	strh	r6, [r7, #0]
 801973e:	ee07 3a90 	vmov	s15, r3
 8019742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019746:	807d      	strh	r5, [r7, #2]
 8019748:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801974c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019750:	bfd8      	it	le
 8019752:	eebd 0ac0 	vcvtle.s32.f32	s0, s0
 8019756:	eba8 0606 	sub.w	r6, r8, r6
 801975a:	bfdc      	itt	le
 801975c:	ee10 3a10 	vmovle	r3, s0
 8019760:	b21b      	sxthle	r3, r3
 8019762:	1b5d      	subs	r5, r3, r5
 8019764:	80be      	strh	r6, [r7, #4]
 8019766:	80fd      	strh	r5, [r7, #6]
 8019768:	ecbd 8b04 	vpop	{d8-d9}
 801976c:	4638      	mov	r0, r7
 801976e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019772 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 8019772:	b510      	push	{r4, lr}
 8019774:	ed2d 8b04 	vpush	{d8-d9}
 8019778:	4604      	mov	r4, r0
 801977a:	b084      	sub	sp, #16
 801977c:	4601      	mov	r1, r0
 801977e:	4668      	mov	r0, sp
 8019780:	eeb0 8a40 	vmov.f32	s16, s0
 8019784:	eef0 8a60 	vmov.f32	s17, s1
 8019788:	eeb0 9a41 	vmov.f32	s18, s2
 801978c:	f7ff ff30 	bl	80195f0 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 8019790:	6823      	ldr	r3, [r4, #0]
 8019792:	4669      	mov	r1, sp
 8019794:	4620      	mov	r0, r4
 8019796:	691b      	ldr	r3, [r3, #16]
 8019798:	4798      	blx	r3
 801979a:	6823      	ldr	r3, [r4, #0]
 801979c:	eeb0 1a49 	vmov.f32	s2, s18
 80197a0:	eef0 0a68 	vmov.f32	s1, s17
 80197a4:	eeb0 0a48 	vmov.f32	s0, s16
 80197a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80197aa:	4620      	mov	r0, r4
 80197ac:	4798      	blx	r3
 80197ae:	4621      	mov	r1, r4
 80197b0:	a802      	add	r0, sp, #8
 80197b2:	f7ff ff1d 	bl	80195f0 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 80197b6:	6823      	ldr	r3, [r4, #0]
 80197b8:	a902      	add	r1, sp, #8
 80197ba:	691b      	ldr	r3, [r3, #16]
 80197bc:	4620      	mov	r0, r4
 80197be:	4798      	blx	r3
 80197c0:	b004      	add	sp, #16
 80197c2:	ecbd 8b04 	vpop	{d8-d9}
 80197c6:	bd10      	pop	{r4, pc}

080197c8 <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 80197c8:	b510      	push	{r4, lr}
 80197ca:	ed2d 8b02 	vpush	{d8}
 80197ce:	4604      	mov	r4, r0
 80197d0:	b084      	sub	sp, #16
 80197d2:	4601      	mov	r1, r0
 80197d4:	4668      	mov	r0, sp
 80197d6:	eeb0 8a40 	vmov.f32	s16, s0
 80197da:	f7ff ff09 	bl	80195f0 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 80197de:	6823      	ldr	r3, [r4, #0]
 80197e0:	4669      	mov	r1, sp
 80197e2:	4620      	mov	r0, r4
 80197e4:	691b      	ldr	r3, [r3, #16]
 80197e6:	4798      	blx	r3
 80197e8:	6823      	ldr	r3, [r4, #0]
 80197ea:	eeb0 0a48 	vmov.f32	s0, s16
 80197ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80197f2:	4620      	mov	r0, r4
 80197f4:	4798      	blx	r3
 80197f6:	4621      	mov	r1, r4
 80197f8:	a802      	add	r0, sp, #8
 80197fa:	f7ff fef9 	bl	80195f0 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 80197fe:	6823      	ldr	r3, [r4, #0]
 8019800:	a902      	add	r1, sp, #8
 8019802:	691b      	ldr	r3, [r3, #16]
 8019804:	4620      	mov	r0, r4
 8019806:	4798      	blx	r3
 8019808:	b004      	add	sp, #16
 801980a:	ecbd 8b02 	vpop	{d8}
 801980e:	bd10      	pop	{r4, pc}

08019810 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 8019810:	4603      	mov	r3, r0
 8019812:	3026      	adds	r0, #38	; 0x26
 8019814:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019818:	b90b      	cbnz	r3, 801981e <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 801981a:	f003 bd3a 	b.w	801d292 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 801981e:	f003 bd48 	b.w	801d2b2 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08019824 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8019824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019828:	ed2d 8b04 	vpush	{d8-d9}
 801982c:	4604      	mov	r4, r0
 801982e:	469b      	mov	fp, r3
 8019830:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8019834:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019838:	f9b1 6000 	ldrsh.w	r6, [r1]
 801983c:	8888      	ldrh	r0, [r1, #4]
 801983e:	b0b3      	sub	sp, #204	; 0xcc
 8019840:	4430      	add	r0, r6
 8019842:	b280      	uxth	r0, r0
 8019844:	9206      	str	r2, [sp, #24]
 8019846:	fa0f fe80 	sxth.w	lr, r0
 801984a:	2200      	movs	r2, #0
 801984c:	4596      	cmp	lr, r2
 801984e:	f8dd a100 	ldr.w	sl, [sp, #256]	; 0x100
 8019852:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 8019856:	f8dd 8108 	ldr.w	r8, [sp, #264]	; 0x108
 801985a:	9f43      	ldr	r7, [sp, #268]	; 0x10c
 801985c:	9211      	str	r2, [sp, #68]	; 0x44
 801985e:	f340 8129 	ble.w	8019ab4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8019862:	45b4      	cmp	ip, r6
 8019864:	f340 8126 	ble.w	8019ab4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8019868:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801986c:	88ca      	ldrh	r2, [r1, #6]
 801986e:	442a      	add	r2, r5
 8019870:	b292      	uxth	r2, r2
 8019872:	b211      	sxth	r1, r2
 8019874:	2900      	cmp	r1, #0
 8019876:	f340 811d 	ble.w	8019ab4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801987a:	42ab      	cmp	r3, r5
 801987c:	f340 811a 	ble.w	8019ab4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8019880:	45f4      	cmp	ip, lr
 8019882:	bfb8      	it	lt
 8019884:	fa1f f08c 	uxthlt.w	r0, ip
 8019888:	428b      	cmp	r3, r1
 801988a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801988e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8019892:	bfb8      	it	lt
 8019894:	b29a      	uxthlt	r2, r3
 8019896:	1b80      	subs	r0, r0, r6
 8019898:	1b52      	subs	r2, r2, r5
 801989a:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 801989e:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 80198a2:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 80198a6:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 80198aa:	ab11      	add	r3, sp, #68	; 0x44
 80198ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80198b0:	6822      	ldr	r2, [r4, #0]
 80198b2:	9307      	str	r3, [sp, #28]
 80198b4:	ad13      	add	r5, sp, #76	; 0x4c
 80198b6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80198b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80198bc:	4629      	mov	r1, r5
 80198be:	4620      	mov	r0, r4
 80198c0:	4790      	blx	r2
 80198c2:	4621      	mov	r1, r4
 80198c4:	a815      	add	r0, sp, #84	; 0x54
 80198c6:	f003 fc3f 	bl	801d148 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80198ca:	a815      	add	r0, sp, #84	; 0x54
 80198cc:	f002 fa20 	bl	801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80198d0:	9b07      	ldr	r3, [sp, #28]
 80198d2:	1d26      	adds	r6, r4, #4
 80198d4:	4618      	mov	r0, r3
 80198d6:	4631      	mov	r1, r6
 80198d8:	f002 fa5e 	bl	801bd98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80198dc:	4628      	mov	r0, r5
 80198de:	f104 0526 	add.w	r5, r4, #38	; 0x26
 80198e2:	f002 fa15 	bl	801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80198e6:	4628      	mov	r0, r5
 80198e8:	f006 f8da 	bl	801faa0 <_ZNK8touchgfx6Bitmap7getDataEv>
 80198ec:	9007      	str	r0, [sp, #28]
 80198ee:	2800      	cmp	r0, #0
 80198f0:	f000 80db 	beq.w	8019aaa <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 80198f4:	f8db 2000 	ldr.w	r2, [fp]
 80198f8:	9209      	str	r2, [sp, #36]	; 0x24
 80198fa:	f8db 2004 	ldr.w	r2, [fp, #4]
 80198fe:	920a      	str	r2, [sp, #40]	; 0x28
 8019900:	f8db 2008 	ldr.w	r2, [fp, #8]
 8019904:	920b      	str	r2, [sp, #44]	; 0x2c
 8019906:	f8db 200c 	ldr.w	r2, [fp, #12]
 801990a:	920c      	str	r2, [sp, #48]	; 0x30
 801990c:	f8da 2000 	ldr.w	r2, [sl]
 8019910:	920d      	str	r2, [sp, #52]	; 0x34
 8019912:	f8da 2004 	ldr.w	r2, [sl, #4]
 8019916:	920e      	str	r2, [sp, #56]	; 0x38
 8019918:	f8da 2008 	ldr.w	r2, [sl, #8]
 801991c:	920f      	str	r2, [sp, #60]	; 0x3c
 801991e:	f8da 200c 	ldr.w	r2, [sl, #12]
 8019922:	9210      	str	r2, [sp, #64]	; 0x40
 8019924:	a90d      	add	r1, sp, #52	; 0x34
 8019926:	4632      	mov	r2, r6
 8019928:	a809      	add	r0, sp, #36	; 0x24
 801992a:	f002 fa19 	bl	801bd60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801992e:	4632      	mov	r2, r6
 8019930:	a90e      	add	r1, sp, #56	; 0x38
 8019932:	a80a      	add	r0, sp, #40	; 0x28
 8019934:	f002 fa14 	bl	801bd60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8019938:	4632      	mov	r2, r6
 801993a:	a90f      	add	r1, sp, #60	; 0x3c
 801993c:	a80b      	add	r0, sp, #44	; 0x2c
 801993e:	f002 fa0f 	bl	801bd60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8019942:	4632      	mov	r2, r6
 8019944:	a910      	add	r1, sp, #64	; 0x40
 8019946:	a80c      	add	r0, sp, #48	; 0x30
 8019948:	f002 fa0a 	bl	801bd60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801994c:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8019950:	edd7 4a00 	vldr	s9, [r7]
 8019954:	edd7 5a01 	vldr	s11, [r7, #4]
 8019958:	ed98 4a00 	vldr	s8, [r8]
 801995c:	ed98 5a01 	vldr	s10, [r8, #4]
 8019960:	ed99 9a00 	vldr	s18, [r9]
 8019964:	ed99 8a01 	vldr	s16, [r9, #4]
 8019968:	edd9 8a02 	vldr	s17, [r9, #8]
 801996c:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8019970:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8019974:	ed8d 4a21 	vstr	s8, [sp, #132]	; 0x84
 8019978:	eef0 6a67 	vmov.f32	s13, s15
 801997c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8019980:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 8019984:	eeb0 7a67 	vmov.f32	s14, s15
 8019988:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801998c:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 8019990:	eeb0 6a67 	vmov.f32	s12, s15
 8019994:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8019998:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 801999c:	edcd 5a27 	vstr	s11, [sp, #156]	; 0x9c
 80199a0:	ee16 6a10 	vmov	r6, s12
 80199a4:	eeb0 6a67 	vmov.f32	s12, s15
 80199a8:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80199ac:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80199b0:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80199b4:	f8d8 b008 	ldr.w	fp, [r8, #8]
 80199b8:	68ff      	ldr	r7, [r7, #12]
 80199ba:	9624      	str	r6, [sp, #144]	; 0x90
 80199bc:	ee16 0a10 	vmov	r0, s12
 80199c0:	eeb0 6a67 	vmov.f32	s12, s15
 80199c4:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80199c8:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 80199cc:	ed8d 9a20 	vstr	s18, [sp, #128]	; 0x80
 80199d0:	ee16 1a10 	vmov	r1, s12
 80199d4:	eeb0 6a67 	vmov.f32	s12, s15
 80199d8:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80199dc:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 80199e0:	ee16 2a10 	vmov	r2, s12
 80199e4:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 80199e8:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 80199ec:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 80199f0:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 80199f4:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80199f8:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 80199fc:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 8019a00:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8019a04:	ed8d 8a25 	vstr	s16, [sp, #148]	; 0x94
 8019a08:	edcd 8a2a 	vstr	s17, [sp, #168]	; 0xa8
 8019a0c:	922d      	str	r2, [sp, #180]	; 0xb4
 8019a0e:	4a2b      	ldr	r2, [pc, #172]	; (8019abc <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 8019a10:	9b06      	ldr	r3, [sp, #24]
 8019a12:	8812      	ldrh	r2, [r2, #0]
 8019a14:	9317      	str	r3, [sp, #92]	; 0x5c
 8019a16:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8019a1a:	9b07      	ldr	r3, [sp, #28]
 8019a1c:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 8019a20:	4628      	mov	r0, r5
 8019a22:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 8019a26:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 8019a2a:	9218      	str	r2, [sp, #96]	; 0x60
 8019a2c:	9319      	str	r3, [sp, #100]	; 0x64
 8019a2e:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 8019a32:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8019a36:	9731      	str	r7, [sp, #196]	; 0xc4
 8019a38:	f006 f864 	bl	801fb04 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8019a3c:	901a      	str	r0, [sp, #104]	; 0x68
 8019a3e:	4628      	mov	r0, r5
 8019a40:	f005 ff26 	bl	801f890 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019a44:	901b      	str	r0, [sp, #108]	; 0x6c
 8019a46:	4628      	mov	r0, r5
 8019a48:	f005 ff5c 	bl	801f904 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019a4c:	901c      	str	r0, [sp, #112]	; 0x70
 8019a4e:	4628      	mov	r0, r5
 8019a50:	f005 ff1e 	bl	801f890 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019a54:	eeb4 9a48 	vcmp.f32	s18, s16
 8019a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a5c:	901d      	str	r0, [sp, #116]	; 0x74
 8019a5e:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 8019a62:	d107      	bne.n	8019a74 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 8019a64:	eeb4 8a68 	vcmp.f32	s16, s17
 8019a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019a70:	bf08      	it	eq
 8019a72:	461e      	moveq	r6, r3
 8019a74:	4b12      	ldr	r3, [pc, #72]	; (8019ac0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019a7c:	b10a      	cbz	r2, 8019a82 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 8019a7e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8019a80:	b905      	cbnz	r5, 8019a84 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 8019a82:	689d      	ldr	r5, [r3, #8]
 8019a84:	682b      	ldr	r3, [r5, #0]
 8019a86:	4620      	mov	r0, r4
 8019a88:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8019a8a:	f7ff fec1 	bl	8019810 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 8019a8e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8019a92:	9604      	str	r6, [sp, #16]
 8019a94:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8019a98:	ab13      	add	r3, sp, #76	; 0x4c
 8019a9a:	9301      	str	r3, [sp, #4]
 8019a9c:	ab15      	add	r3, sp, #84	; 0x54
 8019a9e:	9300      	str	r3, [sp, #0]
 8019aa0:	aa1e      	add	r2, sp, #120	; 0x78
 8019aa2:	ab19      	add	r3, sp, #100	; 0x64
 8019aa4:	a917      	add	r1, sp, #92	; 0x5c
 8019aa6:	4628      	mov	r0, r5
 8019aa8:	47b8      	blx	r7
 8019aaa:	b033      	add	sp, #204	; 0xcc
 8019aac:	ecbd 8b04 	vpop	{d8-d9}
 8019ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ab4:	2300      	movs	r3, #0
 8019ab6:	9312      	str	r3, [sp, #72]	; 0x48
 8019ab8:	e6f7      	b.n	80198aa <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 8019aba:	bf00      	nop
 8019abc:	20009776 	.word	0x20009776
 8019ac0:	2000977c 	.word	0x2000977c

08019ac4 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 8019ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ac8:	ed2d 8b02 	vpush	{d8}
 8019acc:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8019ad0:	b098      	sub	sp, #96	; 0x60
 8019ad2:	4604      	mov	r4, r0
 8019ad4:	4688      	mov	r8, r1
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	d077      	beq.n	8019bca <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 8019ada:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8019ade:	4628      	mov	r0, r5
 8019ae0:	f005 fed6 	bl	801f890 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019ae4:	ee07 0a90 	vmov	s15, r0
 8019ae8:	4628      	mov	r0, r5
 8019aea:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8019aee:	f005 ff09 	bl	801f904 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019af2:	4b4e      	ldr	r3, [pc, #312]	; (8019c2c <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 8019af4:	781b      	ldrb	r3, [r3, #0]
 8019af6:	ee07 0a90 	vmov	s15, r0
 8019afa:	2b01      	cmp	r3, #1
 8019afc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8019b00:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8019b04:	d066      	beq.n	8019bd4 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 8019b06:	eeb0 6a47 	vmov.f32	s12, s14
 8019b0a:	ee17 3a10 	vmov	r3, s14
 8019b0e:	eeb0 4a48 	vmov.f32	s8, s16
 8019b12:	eeb0 7a48 	vmov.f32	s14, s16
 8019b16:	eef0 4a67 	vmov.f32	s9, s15
 8019b1a:	eeb0 8a67 	vmov.f32	s16, s15
 8019b1e:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 8019b22:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 8019b26:	ed94 3a1b 	vldr	s6, [r4, #108]	; 0x6c
 8019b2a:	edd4 2a1d 	vldr	s5, [r4, #116]	; 0x74
 8019b2e:	ed94 2a1a 	vldr	s4, [r4, #104]	; 0x68
 8019b32:	edd4 3a1e 	vldr	s7, [r4, #120]	; 0x78
 8019b36:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8019b38:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8019b3a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8019b3c:	f8d4 c080 	ldr.w	ip, [r4, #128]	; 0x80
 8019b40:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 8019b44:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8019b48:	ee73 1a65 	vsub.f32	s3, s6, s11
 8019b4c:	ee72 6ac5 	vsub.f32	s13, s5, s10
 8019b50:	ee32 1a45 	vsub.f32	s2, s4, s10
 8019b54:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 8019b58:	ee73 1ae5 	vsub.f32	s3, s7, s11
 8019b5c:	eee1 6a21 	vfma.f32	s13, s2, s3
 8019b60:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8019b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b68:	dd3d      	ble.n	8019be6 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 8019b6a:	ed8d 5a04 	vstr	s10, [sp, #16]
 8019b6e:	ed8d 2a05 	vstr	s4, [sp, #20]
 8019b72:	edcd 2a06 	vstr	s5, [sp, #24]
 8019b76:	f8cd c01c 	str.w	ip, [sp, #28]
 8019b7a:	edcd 5a08 	vstr	s11, [sp, #32]
 8019b7e:	ed8d 3a09 	vstr	s6, [sp, #36]	; 0x24
 8019b82:	edcd 3a0a 	vstr	s7, [sp, #40]	; 0x28
 8019b86:	970b      	str	r7, [sp, #44]	; 0x2c
 8019b88:	960c      	str	r6, [sp, #48]	; 0x30
 8019b8a:	950d      	str	r5, [sp, #52]	; 0x34
 8019b8c:	920e      	str	r2, [sp, #56]	; 0x38
 8019b8e:	900f      	str	r0, [sp, #60]	; 0x3c
 8019b90:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 8019b94:	ed8d 4a11 	vstr	s8, [sp, #68]	; 0x44
 8019b98:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 8019b9c:	edcd 4a13 	vstr	s9, [sp, #76]	; 0x4c
 8019ba0:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
 8019ba4:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 8019ba8:	9316      	str	r3, [sp, #88]	; 0x58
 8019baa:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c
 8019bae:	ab14      	add	r3, sp, #80	; 0x50
 8019bb0:	9303      	str	r3, [sp, #12]
 8019bb2:	ab10      	add	r3, sp, #64	; 0x40
 8019bb4:	9302      	str	r3, [sp, #8]
 8019bb6:	ab0c      	add	r3, sp, #48	; 0x30
 8019bb8:	9301      	str	r3, [sp, #4]
 8019bba:	ab08      	add	r3, sp, #32
 8019bbc:	9300      	str	r3, [sp, #0]
 8019bbe:	2200      	movs	r2, #0
 8019bc0:	ab04      	add	r3, sp, #16
 8019bc2:	4641      	mov	r1, r8
 8019bc4:	4620      	mov	r0, r4
 8019bc6:	f7ff fe2d 	bl	8019824 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8019bca:	b018      	add	sp, #96	; 0x60
 8019bcc:	ecbd 8b02 	vpop	{d8}
 8019bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bd4:	eeb0 6a48 	vmov.f32	s12, s16
 8019bd8:	eef0 4a47 	vmov.f32	s9, s14
 8019bdc:	ee17 3a90 	vmov	r3, s15
 8019be0:	eeb0 4a67 	vmov.f32	s8, s15
 8019be4:	e79b      	b.n	8019b1e <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 8019be6:	ed8d 5a05 	vstr	s10, [sp, #20]
 8019bea:	ed8d 2a04 	vstr	s4, [sp, #16]
 8019bee:	f8cd c018 	str.w	ip, [sp, #24]
 8019bf2:	edcd 2a07 	vstr	s5, [sp, #28]
 8019bf6:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8019bfa:	ed8d 3a08 	vstr	s6, [sp, #32]
 8019bfe:	970a      	str	r7, [sp, #40]	; 0x28
 8019c00:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
 8019c04:	960d      	str	r6, [sp, #52]	; 0x34
 8019c06:	950c      	str	r5, [sp, #48]	; 0x30
 8019c08:	900e      	str	r0, [sp, #56]	; 0x38
 8019c0a:	920f      	str	r2, [sp, #60]	; 0x3c
 8019c0c:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 8019c10:	ed8d 4a10 	vstr	s8, [sp, #64]	; 0x40
 8019c14:	edcd 4a12 	vstr	s9, [sp, #72]	; 0x48
 8019c18:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 8019c1c:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 8019c20:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8019c24:	ed8d 6a16 	vstr	s12, [sp, #88]	; 0x58
 8019c28:	9317      	str	r3, [sp, #92]	; 0x5c
 8019c2a:	e7c0      	b.n	8019bae <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 8019c2c:	20009774 	.word	0x20009774

08019c30 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8019c30:	2200      	movs	r2, #0
 8019c32:	8002      	strh	r2, [r0, #0]
 8019c34:	8042      	strh	r2, [r0, #2]
 8019c36:	8082      	strh	r2, [r0, #4]
 8019c38:	80c2      	strh	r2, [r0, #6]
 8019c3a:	4770      	bx	lr

08019c3c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8019c3c:	b570      	push	{r4, r5, r6, lr}
 8019c3e:	6803      	ldr	r3, [r0, #0]
 8019c40:	4604      	mov	r4, r0
 8019c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c44:	4615      	mov	r5, r2
 8019c46:	4798      	blx	r3
 8019c48:	6823      	ldr	r3, [r4, #0]
 8019c4a:	4629      	mov	r1, r5
 8019c4c:	4620      	mov	r0, r4
 8019c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c54:	4718      	bx	r3
	...

08019c58 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8019c58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019c5a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019c60:	4299      	cmp	r1, r3
 8019c62:	d029      	beq.n	8019cb8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8019c64:	4b15      	ldr	r3, [pc, #84]	; (8019cbc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8019c66:	681b      	ldr	r3, [r3, #0]
 8019c68:	b92b      	cbnz	r3, 8019c76 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8019c6a:	4b15      	ldr	r3, [pc, #84]	; (8019cc0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8019c6c:	4a15      	ldr	r2, [pc, #84]	; (8019cc4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8019c6e:	21ae      	movs	r1, #174	; 0xae
 8019c70:	4815      	ldr	r0, [pc, #84]	; (8019cc8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8019c72:	f014 f925 	bl	802dec0 <__assert_func>
 8019c76:	4a15      	ldr	r2, [pc, #84]	; (8019ccc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8019c78:	8812      	ldrh	r2, [r2, #0]
 8019c7a:	428a      	cmp	r2, r1
 8019c7c:	d803      	bhi.n	8019c86 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8019c7e:	4b14      	ldr	r3, [pc, #80]	; (8019cd0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8019c80:	4a10      	ldr	r2, [pc, #64]	; (8019cc4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8019c82:	21af      	movs	r1, #175	; 0xaf
 8019c84:	e7f4      	b.n	8019c70 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8019c86:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8019c8a:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8019c8e:	4b11      	ldr	r3, [pc, #68]	; (8019cd4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8019c90:	7854      	ldrb	r4, [r2, #1]
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8019c98:	682b      	ldr	r3, [r5, #0]
 8019c9a:	69de      	ldr	r6, [r3, #28]
 8019c9c:	4b0e      	ldr	r3, [pc, #56]	; (8019cd8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8019c9e:	6818      	ldr	r0, [r3, #0]
 8019ca0:	f7fa fc3e 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8019ca4:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8019ca8:	2300      	movs	r3, #0
 8019caa:	4602      	mov	r2, r0
 8019cac:	9300      	str	r3, [sp, #0]
 8019cae:	4621      	mov	r1, r4
 8019cb0:	4628      	mov	r0, r5
 8019cb2:	47b0      	blx	r6
 8019cb4:	b002      	add	sp, #8
 8019cb6:	bd70      	pop	{r4, r5, r6, pc}
 8019cb8:	2000      	movs	r0, #0
 8019cba:	e7fb      	b.n	8019cb4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8019cbc:	200097cc 	.word	0x200097cc
 8019cc0:	080317a8 	.word	0x080317a8
 8019cc4:	080318e0 	.word	0x080318e0
 8019cc8:	080317ea 	.word	0x080317ea
 8019ccc:	200097d0 	.word	0x200097d0
 8019cd0:	08031813 	.word	0x08031813
 8019cd4:	200097d4 	.word	0x200097d4
 8019cd8:	200097d8 	.word	0x200097d8

08019cdc <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8019cdc:	b570      	push	{r4, r5, r6, lr}
 8019cde:	6803      	ldr	r3, [r0, #0]
 8019ce0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019ce2:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8019ce4:	4b11      	ldr	r3, [pc, #68]	; (8019d2c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	4604      	mov	r4, r0
 8019cea:	b28d      	uxth	r5, r1
 8019cec:	b92b      	cbnz	r3, 8019cfa <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8019cee:	4b10      	ldr	r3, [pc, #64]	; (8019d30 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8019cf0:	4a10      	ldr	r2, [pc, #64]	; (8019d34 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019cf2:	21ae      	movs	r1, #174	; 0xae
 8019cf4:	4810      	ldr	r0, [pc, #64]	; (8019d38 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8019cf6:	f014 f8e3 	bl	802dec0 <__assert_func>
 8019cfa:	4910      	ldr	r1, [pc, #64]	; (8019d3c <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8019cfc:	8809      	ldrh	r1, [r1, #0]
 8019cfe:	4291      	cmp	r1, r2
 8019d00:	d803      	bhi.n	8019d0a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8019d02:	4b0f      	ldr	r3, [pc, #60]	; (8019d40 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8019d04:	4a0b      	ldr	r2, [pc, #44]	; (8019d34 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019d06:	21af      	movs	r1, #175	; 0xaf
 8019d08:	e7f4      	b.n	8019cf4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8019d0a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8019d0e:	4b0d      	ldr	r3, [pc, #52]	; (8019d44 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019d16:	6803      	ldr	r3, [r0, #0]
 8019d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d1a:	4798      	blx	r3
 8019d1c:	1a29      	subs	r1, r5, r0
 8019d1e:	4633      	mov	r3, r6
 8019d20:	4620      	mov	r0, r4
 8019d22:	b209      	sxth	r1, r1
 8019d24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d28:	4718      	bx	r3
 8019d2a:	bf00      	nop
 8019d2c:	200097cc 	.word	0x200097cc
 8019d30:	080317a8 	.word	0x080317a8
 8019d34:	080318e0 	.word	0x080318e0
 8019d38:	080317ea 	.word	0x080317ea
 8019d3c:	200097d0 	.word	0x200097d0
 8019d40:	08031813 	.word	0x08031813
 8019d44:	200097d4 	.word	0x200097d4

08019d48 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8019d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d4c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8019d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019d52:	4293      	cmp	r3, r2
 8019d54:	b08c      	sub	sp, #48	; 0x30
 8019d56:	4604      	mov	r4, r0
 8019d58:	4688      	mov	r8, r1
 8019d5a:	d05f      	beq.n	8019e1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8019d5c:	4e31      	ldr	r6, [pc, #196]	; (8019e24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8019d5e:	6832      	ldr	r2, [r6, #0]
 8019d60:	b92a      	cbnz	r2, 8019d6e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8019d62:	4b31      	ldr	r3, [pc, #196]	; (8019e28 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8019d64:	4a31      	ldr	r2, [pc, #196]	; (8019e2c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8019d66:	21ae      	movs	r1, #174	; 0xae
 8019d68:	4831      	ldr	r0, [pc, #196]	; (8019e30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8019d6a:	f014 f8a9 	bl	802dec0 <__assert_func>
 8019d6e:	4d31      	ldr	r5, [pc, #196]	; (8019e34 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8019d70:	8829      	ldrh	r1, [r5, #0]
 8019d72:	4299      	cmp	r1, r3
 8019d74:	d803      	bhi.n	8019d7e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8019d76:	4b30      	ldr	r3, [pc, #192]	; (8019e38 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8019d78:	4a2c      	ldr	r2, [pc, #176]	; (8019e2c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8019d7a:	21af      	movs	r1, #175	; 0xaf
 8019d7c:	e7f4      	b.n	8019d68 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8019d7e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019d82:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019d86:	4b2d      	ldr	r3, [pc, #180]	; (8019e3c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019d8e:	2a00      	cmp	r2, #0
 8019d90:	d044      	beq.n	8019e1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8019d92:	784b      	ldrb	r3, [r1, #1]
 8019d94:	9207      	str	r2, [sp, #28]
 8019d96:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8019d9a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019d9e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8019da2:	4b27      	ldr	r3, [pc, #156]	; (8019e40 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8019da4:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8019dae:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019db2:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8019db6:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8019dba:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8019dbe:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019dc0:	f88d a020 	strb.w	sl, [sp, #32]
 8019dc4:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8019dc8:	9009      	str	r0, [sp, #36]	; 0x24
 8019dca:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8019dce:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8019dd2:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8019dd6:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8019dda:	b10a      	cbz	r2, 8019de0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8019ddc:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8019dde:	b907      	cbnz	r7, 8019de2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8019de0:	689f      	ldr	r7, [r3, #8]
 8019de2:	f10d 0914 	add.w	r9, sp, #20
 8019de6:	4621      	mov	r1, r4
 8019de8:	4648      	mov	r0, r9
 8019dea:	f003 f9ad 	bl	801d148 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019dee:	6833      	ldr	r3, [r6, #0]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d0b6      	beq.n	8019d62 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8019df4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019df6:	882b      	ldrh	r3, [r5, #0]
 8019df8:	428b      	cmp	r3, r1
 8019dfa:	d9bc      	bls.n	8019d76 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8019dfc:	4b11      	ldr	r3, [pc, #68]	; (8019e44 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8019dfe:	6818      	ldr	r0, [r3, #0]
 8019e00:	f7fa fb8e 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8019e04:	2300      	movs	r3, #0
 8019e06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8019e0a:	ab07      	add	r3, sp, #28
 8019e0c:	9001      	str	r0, [sp, #4]
 8019e0e:	9300      	str	r3, [sp, #0]
 8019e10:	e899 0006 	ldmia.w	r9, {r1, r2}
 8019e14:	4643      	mov	r3, r8
 8019e16:	4638      	mov	r0, r7
 8019e18:	f7fa fb13 	bl	8014442 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019e1c:	b00c      	add	sp, #48	; 0x30
 8019e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e22:	bf00      	nop
 8019e24:	200097cc 	.word	0x200097cc
 8019e28:	080317a8 	.word	0x080317a8
 8019e2c:	080318e0 	.word	0x080318e0
 8019e30:	080317ea 	.word	0x080317ea
 8019e34:	200097d0 	.word	0x200097d0
 8019e38:	08031813 	.word	0x08031813
 8019e3c:	200097d4 	.word	0x200097d4
 8019e40:	2000977c 	.word	0x2000977c
 8019e44:	200097d8 	.word	0x200097d8

08019e48 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8019e48:	b40e      	push	{r1, r2, r3}
 8019e4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e4e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8019e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019e54:	4293      	cmp	r3, r2
 8019e56:	b09c      	sub	sp, #112	; 0x70
 8019e58:	4604      	mov	r4, r0
 8019e5a:	d06b      	beq.n	8019f34 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8019e5c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8019f48 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 8019e60:	aa26      	add	r2, sp, #152	; 0x98
 8019e62:	9202      	str	r2, [sp, #8]
 8019e64:	f8da 2000 	ldr.w	r2, [sl]
 8019e68:	b92a      	cbnz	r2, 8019e76 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8019e6a:	4b33      	ldr	r3, [pc, #204]	; (8019f38 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 8019e6c:	4a33      	ldr	r2, [pc, #204]	; (8019f3c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8019e6e:	21ae      	movs	r1, #174	; 0xae
 8019e70:	4833      	ldr	r0, [pc, #204]	; (8019f40 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 8019e72:	f014 f825 	bl	802dec0 <__assert_func>
 8019e76:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8019f4c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 8019e7a:	f8b8 1000 	ldrh.w	r1, [r8]
 8019e7e:	4299      	cmp	r1, r3
 8019e80:	d803      	bhi.n	8019e8a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8019e82:	4b30      	ldr	r3, [pc, #192]	; (8019f44 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 8019e84:	4a2d      	ldr	r2, [pc, #180]	; (8019f3c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8019e86:	21af      	movs	r1, #175	; 0xaf
 8019e88:	e7f2      	b.n	8019e70 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8019e8a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8019f50 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 8019e8e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019e92:	f8d9 3000 	ldr.w	r3, [r9]
 8019e96:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019e9a:	682b      	ldr	r3, [r5, #0]
 8019e9c:	4628      	mov	r0, r5
 8019e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ea0:	4798      	blx	r3
 8019ea2:	4606      	mov	r6, r0
 8019ea4:	b207      	sxth	r7, r0
 8019ea6:	a803      	add	r0, sp, #12
 8019ea8:	f003 fddd 	bl	801da66 <_ZN8touchgfx12TextProviderC1Ev>
 8019eac:	682b      	ldr	r3, [r5, #0]
 8019eae:	4628      	mov	r0, r5
 8019eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019eb2:	4798      	blx	r3
 8019eb4:	682b      	ldr	r3, [r5, #0]
 8019eb6:	4683      	mov	fp, r0
 8019eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019eba:	4628      	mov	r0, r5
 8019ebc:	4798      	blx	r3
 8019ebe:	465b      	mov	r3, fp
 8019ec0:	9000      	str	r0, [sp, #0]
 8019ec2:	9925      	ldr	r1, [sp, #148]	; 0x94
 8019ec4:	9a02      	ldr	r2, [sp, #8]
 8019ec6:	a803      	add	r0, sp, #12
 8019ec8:	f003 fe20 	bl	801db0c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019ecc:	f8da 3000 	ldr.w	r3, [sl]
 8019ed0:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d0c8      	beq.n	8019e6a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8019ed8:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019eda:	f8b8 0000 	ldrh.w	r0, [r8]
 8019ede:	4290      	cmp	r0, r2
 8019ee0:	d9cf      	bls.n	8019e82 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8019ee2:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 8019ee6:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8019eea:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8019eee:	786a      	ldrb	r2, [r5, #1]
 8019ef0:	8925      	ldrh	r5, [r4, #8]
 8019ef2:	f8d9 3000 	ldr.w	r3, [r9]
 8019ef6:	eba5 050c 	sub.w	r5, r5, ip
 8019efa:	b22d      	sxth	r5, r5
 8019efc:	9500      	str	r5, [sp, #0]
 8019efe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8019f02:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8019f06:	a803      	add	r0, sp, #12
 8019f08:	f001 fc1e 	bl	801b748 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8019f0c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8019f10:	18b9      	adds	r1, r7, r2
 8019f12:	2900      	cmp	r1, #0
 8019f14:	b203      	sxth	r3, r0
 8019f16:	dd0b      	ble.n	8019f30 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 8019f18:	3b01      	subs	r3, #1
 8019f1a:	fb13 f302 	smulbb	r3, r3, r2
 8019f1e:	fb16 3300 	smlabb	r3, r6, r0, r3
 8019f22:	b21f      	sxth	r7, r3
 8019f24:	4638      	mov	r0, r7
 8019f26:	b01c      	add	sp, #112	; 0x70
 8019f28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f2c:	b003      	add	sp, #12
 8019f2e:	4770      	bx	lr
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	dcf7      	bgt.n	8019f24 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8019f34:	2700      	movs	r7, #0
 8019f36:	e7f5      	b.n	8019f24 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8019f38:	080317a8 	.word	0x080317a8
 8019f3c:	080318e0 	.word	0x080318e0
 8019f40:	080317ea 	.word	0x080317ea
 8019f44:	08031813 	.word	0x08031813
 8019f48:	200097cc 	.word	0x200097cc
 8019f4c:	200097d0 	.word	0x200097d0
 8019f50:	200097d4 	.word	0x200097d4

08019f54 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8019f54:	b570      	push	{r4, r5, r6, lr}
 8019f56:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019f5c:	4299      	cmp	r1, r3
 8019f5e:	4604      	mov	r4, r0
 8019f60:	d01e      	beq.n	8019fa0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8019f62:	6803      	ldr	r3, [r0, #0]
 8019f64:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8019f66:	4b0f      	ldr	r3, [pc, #60]	; (8019fa4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	b92b      	cbnz	r3, 8019f78 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8019f6c:	4b0e      	ldr	r3, [pc, #56]	; (8019fa8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8019f6e:	4a0f      	ldr	r2, [pc, #60]	; (8019fac <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8019f70:	21ae      	movs	r1, #174	; 0xae
 8019f72:	480f      	ldr	r0, [pc, #60]	; (8019fb0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8019f74:	f013 ffa4 	bl	802dec0 <__assert_func>
 8019f78:	4b0e      	ldr	r3, [pc, #56]	; (8019fb4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8019f7a:	881b      	ldrh	r3, [r3, #0]
 8019f7c:	428b      	cmp	r3, r1
 8019f7e:	d803      	bhi.n	8019f88 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8019f80:	4b0d      	ldr	r3, [pc, #52]	; (8019fb8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8019f82:	4a0a      	ldr	r2, [pc, #40]	; (8019fac <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8019f84:	21af      	movs	r1, #175	; 0xaf
 8019f86:	e7f4      	b.n	8019f72 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8019f88:	4b0c      	ldr	r3, [pc, #48]	; (8019fbc <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8019f8a:	6818      	ldr	r0, [r3, #0]
 8019f8c:	f7fa fac8 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 8019f90:	2300      	movs	r3, #0
 8019f92:	4601      	mov	r1, r0
 8019f94:	46ac      	mov	ip, r5
 8019f96:	4620      	mov	r0, r4
 8019f98:	461a      	mov	r2, r3
 8019f9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f9e:	4760      	bx	ip
 8019fa0:	2000      	movs	r0, #0
 8019fa2:	bd70      	pop	{r4, r5, r6, pc}
 8019fa4:	200097cc 	.word	0x200097cc
 8019fa8:	080317a8 	.word	0x080317a8
 8019fac:	080318e0 	.word	0x080318e0
 8019fb0:	080317ea 	.word	0x080317ea
 8019fb4:	200097d0 	.word	0x200097d0
 8019fb8:	08031813 	.word	0x08031813
 8019fbc:	200097d8 	.word	0x200097d8

08019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8019fc0:	b538      	push	{r3, r4, r5, lr}
 8019fc2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019fc8:	429a      	cmp	r2, r3
 8019fca:	4604      	mov	r4, r0
 8019fcc:	d014      	beq.n	8019ff8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8019fce:	6803      	ldr	r3, [r0, #0]
 8019fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019fd2:	4798      	blx	r3
 8019fd4:	6823      	ldr	r3, [r4, #0]
 8019fd6:	4605      	mov	r5, r0
 8019fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019fda:	4620      	mov	r0, r4
 8019fdc:	4798      	blx	r3
 8019fde:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019fe2:	b22d      	sxth	r5, r5
 8019fe4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8019fe8:	4601      	mov	r1, r0
 8019fea:	bf06      	itte	eq
 8019fec:	4602      	moveq	r2, r0
 8019fee:	4629      	moveq	r1, r5
 8019ff0:	462a      	movne	r2, r5
 8019ff2:	4620      	mov	r0, r4
 8019ff4:	f7f6 fda0 	bl	8010b38 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8019ff8:	bd38      	pop	{r3, r4, r5, pc}

08019ffa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8019ffa:	888a      	ldrh	r2, [r1, #4]
 8019ffc:	8582      	strh	r2, [r0, #44]	; 0x2c
 8019ffe:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801a002:	b922      	cbnz	r2, 801a00e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801a004:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a008:	b90b      	cbnz	r3, 801a00e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801a00a:	f7ff bfd9 	b.w	8019fc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801a00e:	4770      	bx	lr

0801a010 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>:
 801a010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a014:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801a016:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a01a:	429a      	cmp	r2, r3
 801a01c:	4604      	mov	r4, r0
 801a01e:	d054      	beq.n	801a0ca <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xba>
 801a020:	4b42      	ldr	r3, [pc, #264]	; (801a12c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x11c>)
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	b92b      	cbnz	r3, 801a032 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x22>
 801a026:	4b42      	ldr	r3, [pc, #264]	; (801a130 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x120>)
 801a028:	4a42      	ldr	r2, [pc, #264]	; (801a134 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x124>)
 801a02a:	21ae      	movs	r1, #174	; 0xae
 801a02c:	4842      	ldr	r0, [pc, #264]	; (801a138 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x128>)
 801a02e:	f013 ff47 	bl	802dec0 <__assert_func>
 801a032:	4942      	ldr	r1, [pc, #264]	; (801a13c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x12c>)
 801a034:	8809      	ldrh	r1, [r1, #0]
 801a036:	4291      	cmp	r1, r2
 801a038:	d803      	bhi.n	801a042 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x32>
 801a03a:	4b41      	ldr	r3, [pc, #260]	; (801a140 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x130>)
 801a03c:	4a3d      	ldr	r2, [pc, #244]	; (801a134 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x124>)
 801a03e:	21af      	movs	r1, #175	; 0xaf
 801a040:	e7f4      	b.n	801a02c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x1c>
 801a042:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801a046:	f893 9001 	ldrb.w	r9, [r3, #1]
 801a04a:	6803      	ldr	r3, [r0, #0]
 801a04c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a04e:	4798      	blx	r3
 801a050:	6823      	ldr	r3, [r4, #0]
 801a052:	4680      	mov	r8, r0
 801a054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a056:	4620      	mov	r0, r4
 801a058:	4798      	blx	r3
 801a05a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a05e:	f009 0903 	and.w	r9, r9, #3
 801a062:	4605      	mov	r5, r0
 801a064:	b287      	uxth	r7, r0
 801a066:	fa0f f688 	sxth.w	r6, r8
 801a06a:	b1cb      	cbz	r3, 801a0a0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x90>
 801a06c:	2b02      	cmp	r3, #2
 801a06e:	d12e      	bne.n	801a0ce <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xbe>
 801a070:	f1b9 0f02 	cmp.w	r9, #2
 801a074:	d017      	beq.n	801a0a6 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x96>
 801a076:	8920      	ldrh	r0, [r4, #8]
 801a078:	88a1      	ldrh	r1, [r4, #4]
 801a07a:	6822      	ldr	r2, [r4, #0]
 801a07c:	f1b9 0f01 	cmp.w	r9, #1
 801a080:	bf13      	iteet	ne
 801a082:	1840      	addne	r0, r0, r1
 801a084:	2302      	moveq	r3, #2
 801a086:	eba0 0008 	subeq.w	r0, r0, r8
 801a08a:	eba0 0108 	subne.w	r1, r0, r8
 801a08e:	bf04      	itt	eq
 801a090:	fb90 f3f3 	sdiveq	r3, r0, r3
 801a094:	18c9      	addeq	r1, r1, r3
 801a096:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801a098:	b209      	sxth	r1, r1
 801a09a:	4620      	mov	r0, r4
 801a09c:	4790      	blx	r2
 801a09e:	e002      	b.n	801a0a6 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x96>
 801a0a0:	f1b9 0f00 	cmp.w	r9, #0
 801a0a4:	d1e7      	bne.n	801a076 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x66>
 801a0a6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a0aa:	2b02      	cmp	r3, #2
 801a0ac:	d108      	bne.n	801a0c0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xb0>
 801a0ae:	88e3      	ldrh	r3, [r4, #6]
 801a0b0:	8961      	ldrh	r1, [r4, #10]
 801a0b2:	4419      	add	r1, r3
 801a0b4:	6823      	ldr	r3, [r4, #0]
 801a0b6:	1bc9      	subs	r1, r1, r7
 801a0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a0ba:	b209      	sxth	r1, r1
 801a0bc:	4620      	mov	r0, r4
 801a0be:	4798      	blx	r3
 801a0c0:	462a      	mov	r2, r5
 801a0c2:	4631      	mov	r1, r6
 801a0c4:	4620      	mov	r0, r4
 801a0c6:	f7f6 fd37 	bl	8010b38 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801a0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0ce:	2b01      	cmp	r3, #1
 801a0d0:	d112      	bne.n	801a0f8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xe8>
 801a0d2:	f1b9 0f00 	cmp.w	r9, #0
 801a0d6:	d114      	bne.n	801a102 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xf2>
 801a0d8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a0dc:	2b01      	cmp	r3, #1
 801a0de:	d108      	bne.n	801a0f2 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xe2>
 801a0e0:	88a3      	ldrh	r3, [r4, #4]
 801a0e2:	8921      	ldrh	r1, [r4, #8]
 801a0e4:	4419      	add	r1, r3
 801a0e6:	6823      	ldr	r3, [r4, #0]
 801a0e8:	1bc9      	subs	r1, r1, r7
 801a0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a0ec:	b209      	sxth	r1, r1
 801a0ee:	4620      	mov	r0, r4
 801a0f0:	4798      	blx	r3
 801a0f2:	4632      	mov	r2, r6
 801a0f4:	4629      	mov	r1, r5
 801a0f6:	e7e5      	b.n	801a0c4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xb4>
 801a0f8:	2b03      	cmp	r3, #3
 801a0fa:	d102      	bne.n	801a102 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xf2>
 801a0fc:	f1b9 0f02 	cmp.w	r9, #2
 801a100:	d0ea      	beq.n	801a0d8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xc8>
 801a102:	8963      	ldrh	r3, [r4, #10]
 801a104:	88e1      	ldrh	r1, [r4, #6]
 801a106:	6822      	ldr	r2, [r4, #0]
 801a108:	f1b9 0f01 	cmp.w	r9, #1
 801a10c:	bf0b      	itete	eq
 801a10e:	2002      	moveq	r0, #2
 801a110:	185b      	addne	r3, r3, r1
 801a112:	eba3 0308 	subeq.w	r3, r3, r8
 801a116:	eba3 0108 	subne.w	r1, r3, r8
 801a11a:	bf04      	itt	eq
 801a11c:	fb93 f0f0 	sdiveq	r0, r3, r0
 801a120:	1809      	addeq	r1, r1, r0
 801a122:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801a124:	b209      	sxth	r1, r1
 801a126:	4620      	mov	r0, r4
 801a128:	4790      	blx	r2
 801a12a:	e7d5      	b.n	801a0d8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xc8>
 801a12c:	200097cc 	.word	0x200097cc
 801a130:	080317a8 	.word	0x080317a8
 801a134:	080318e0 	.word	0x080318e0
 801a138:	080317ea 	.word	0x080317ea
 801a13c:	200097d0 	.word	0x200097d0
 801a140:	08031813 	.word	0x08031813

0801a144 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801a144:	2300      	movs	r3, #0
 801a146:	8083      	strh	r3, [r0, #4]
 801a148:	80c3      	strh	r3, [r0, #6]
 801a14a:	8003      	strh	r3, [r0, #0]
 801a14c:	8043      	strh	r3, [r0, #2]
 801a14e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801a152:	2bff      	cmp	r3, #255	; 0xff
 801a154:	bf01      	itttt	eq
 801a156:	890b      	ldrheq	r3, [r1, #8]
 801a158:	8083      	strheq	r3, [r0, #4]
 801a15a:	894b      	ldrheq	r3, [r1, #10]
 801a15c:	80c3      	strheq	r3, [r0, #6]
 801a15e:	4770      	bx	lr

0801a160 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801a160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a162:	4604      	mov	r4, r0
 801a164:	6808      	ldr	r0, [r1, #0]
 801a166:	6849      	ldr	r1, [r1, #4]
 801a168:	466b      	mov	r3, sp
 801a16a:	c303      	stmia	r3!, {r0, r1}
 801a16c:	6823      	ldr	r3, [r4, #0]
 801a16e:	4669      	mov	r1, sp
 801a170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a172:	4620      	mov	r0, r4
 801a174:	4798      	blx	r3
 801a176:	4b08      	ldr	r3, [pc, #32]	; (801a198 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a17e:	b10a      	cbz	r2, 801a184 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801a180:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a182:	b900      	cbnz	r0, 801a186 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801a184:	6898      	ldr	r0, [r3, #8]
 801a186:	6803      	ldr	r3, [r0, #0]
 801a188:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801a18a:	699d      	ldr	r5, [r3, #24]
 801a18c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801a190:	4669      	mov	r1, sp
 801a192:	47a8      	blx	r5
 801a194:	b003      	add	sp, #12
 801a196:	bd30      	pop	{r4, r5, pc}
 801a198:	2000977c 	.word	0x2000977c

0801a19c <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
 801a19c:	f9b0 3150 	ldrsh.w	r3, [r0, #336]	; 0x150
 801a1a0:	600b      	str	r3, [r1, #0]
 801a1a2:	f9b0 3152 	ldrsh.w	r3, [r0, #338]	; 0x152
 801a1a6:	6013      	str	r3, [r2, #0]
 801a1a8:	4770      	bx	lr

0801a1aa <_ZN8touchgfx5Gauge8setWidthEs>:
 801a1aa:	8101      	strh	r1, [r0, #8]
 801a1ac:	f8a0 10bc 	strh.w	r1, [r0, #188]	; 0xbc
 801a1b0:	f8a0 1160 	strh.w	r1, [r0, #352]	; 0x160
 801a1b4:	4770      	bx	lr

0801a1b6 <_ZN8touchgfx5Gauge9setHeightEs>:
 801a1b6:	8141      	strh	r1, [r0, #10]
 801a1b8:	f8a0 10be 	strh.w	r1, [r0, #190]	; 0xbe
 801a1bc:	f8a0 1162 	strh.w	r1, [r0, #354]	; 0x162
 801a1c0:	4770      	bx	lr

0801a1c2 <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 801a1c2:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 801a1c6:	4770      	bx	lr

0801a1c8 <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 801a1c8:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801a1cc:	4770      	bx	lr

0801a1ce <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 801a1ce:	4770      	bx	lr

0801a1d0 <_ZN8touchgfx5Gauge8setAlphaEh>:
 801a1d0:	b538      	push	{r3, r4, r5, lr}
 801a1d2:	4604      	mov	r4, r0
 801a1d4:	460d      	mov	r5, r1
 801a1d6:	f7fc fe60 	bl	8016e9a <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 801a1da:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 801a1de:	f884 5186 	strb.w	r5, [r4, #390]	; 0x186
 801a1e2:	bd38      	pop	{r3, r4, r5, pc}

0801a1e4 <_ZN8touchgfx5GaugeC1Ev>:
 801a1e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a1e6:	4604      	mov	r4, r0
 801a1e8:	4626      	mov	r6, r4
 801a1ea:	f7fc ff7b 	bl	80170e4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 801a1ee:	4b18      	ldr	r3, [pc, #96]	; (801a250 <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 801a1f0:	f846 3bb4 	str.w	r3, [r6], #180
 801a1f4:	a902      	add	r1, sp, #8
 801a1f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a1fa:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801a1fe:	4630      	mov	r0, r6
 801a200:	f7ff f818 	bl	8019234 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 801a204:	2500      	movs	r5, #0
 801a206:	2301      	movs	r3, #1
 801a208:	f504 77ac 	add.w	r7, r4, #344	; 0x158
 801a20c:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
 801a210:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
 801a214:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 801a218:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 801a21c:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
 801a220:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 801a224:	4638      	mov	r0, r7
 801a226:	f7fe fa71 	bl	801870c <_ZN8touchgfx6CircleC1Ev>
 801a22a:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801a22e:	4620      	mov	r0, r4
 801a230:	f7fc ffe4 	bl	80171fc <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 801a234:	4639      	mov	r1, r7
 801a236:	4620      	mov	r0, r4
 801a238:	f7fd f812 	bl	8017260 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a23c:	4620      	mov	r0, r4
 801a23e:	4631      	mov	r1, r6
 801a240:	f7fd f80e 	bl	8017260 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a244:	4620      	mov	r0, r4
 801a246:	f884 517d 	strb.w	r5, [r4, #381]	; 0x17d
 801a24a:	b003      	add	sp, #12
 801a24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a24e:	bf00      	nop
 801a250:	080319c0 	.word	0x080319c0

0801a254 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801a254:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
 801a258:	4770      	bx	lr

0801a25a <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801a25a:	f880 1145 	strb.w	r1, [r0, #325]	; 0x145
 801a25e:	4770      	bx	lr

0801a260 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 801a260:	b538      	push	{r3, r4, r5, lr}
 801a262:	8902      	ldrh	r2, [r0, #8]
 801a264:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a268:	f8a0 20bc 	strh.w	r2, [r0, #188]	; 0xbc
 801a26c:	4604      	mov	r4, r0
 801a26e:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
 801a272:	2200      	movs	r2, #0
 801a274:	4611      	mov	r1, r2
 801a276:	f8a0 30be 	strh.w	r3, [r0, #190]	; 0xbe
 801a27a:	4628      	mov	r0, r5
 801a27c:	f7f6 fc00 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
 801a280:	f9b4 2156 	ldrsh.w	r2, [r4, #342]	; 0x156
 801a284:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 801a288:	1a9b      	subs	r3, r3, r2
 801a28a:	ee07 3a90 	vmov	s15, r3
 801a28e:	f9b4 2154 	ldrsh.w	r2, [r4, #340]	; 0x154
 801a292:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	; 0x150
 801a296:	1a9b      	subs	r3, r3, r2
 801a298:	ee07 3a10 	vmov	s14, r3
 801a29c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a2a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a2a4:	edc4 7a39 	vstr	s15, [r4, #228]	; 0xe4
 801a2a8:	ed84 7a38 	vstr	s14, [r4, #224]	; 0xe0
 801a2ac:	4628      	mov	r0, r5
 801a2ae:	f7ff f80d 	bl	80192cc <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801a2b2:	4b16      	ldr	r3, [pc, #88]	; (801a30c <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 801a2b4:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 801a2b8:	4628      	mov	r0, r5
 801a2ba:	f7ff f807 	bl	80192cc <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801a2be:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 801a2c2:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	; 0x150
 801a2c6:	ee07 3a90 	vmov	s15, r3
 801a2ca:	ee07 2a10 	vmov	s14, r2
 801a2ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a2d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a2d6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 801a2da:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 801a2de:	edc4 7a3f 	vstr	s15, [r4, #252]	; 0xfc
 801a2e2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 801a2e6:	4628      	mov	r0, r5
 801a2e8:	f7fe fff0 	bl	80192cc <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801a2ec:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 801a2f0:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 801a2f4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 801a2f8:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
 801a2fc:	4628      	mov	r0, r5
 801a2fe:	f7fe ffe5 	bl	80192cc <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801a302:	2301      	movs	r3, #1
 801a304:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801a308:	bd38      	pop	{r3, r4, r5, pc}
 801a30a:	bf00      	nop
 801a30c:	43960000 	.word	0x43960000

0801a310 <_ZN8touchgfx5Gauge9setNeedleEtss>:
 801a310:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a312:	4604      	mov	r4, r0
 801a314:	a802      	add	r0, sp, #8
 801a316:	4616      	mov	r6, r2
 801a318:	f820 1d04 	strh.w	r1, [r0, #-4]!
 801a31c:	461d      	mov	r5, r3
 801a31e:	4601      	mov	r1, r0
 801a320:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801a324:	f7ff f928 	bl	8019578 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 801a328:	f8a4 6154 	strh.w	r6, [r4, #340]	; 0x154
 801a32c:	f8a4 5156 	strh.w	r5, [r4, #342]	; 0x156
 801a330:	4620      	mov	r0, r4
 801a332:	f7ff ff95 	bl	801a260 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801a336:	b002      	add	sp, #8
 801a338:	bd70      	pop	{r4, r5, r6, pc}

0801a33a <_ZN8touchgfx5Gauge9setCenterEii>:
 801a33a:	b570      	push	{r4, r5, r6, lr}
 801a33c:	4606      	mov	r6, r0
 801a33e:	460d      	mov	r5, r1
 801a340:	f8a6 1150 	strh.w	r1, [r6, #336]	; 0x150
 801a344:	f8a6 2152 	strh.w	r2, [r6, #338]	; 0x152
 801a348:	4614      	mov	r4, r2
 801a34a:	f7ff ff89 	bl	801a260 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801a34e:	f9b6 215e 	ldrsh.w	r2, [r6, #350]	; 0x15e
 801a352:	f9b6 115c 	ldrsh.w	r1, [r6, #348]	; 0x15c
 801a356:	1aa4      	subs	r4, r4, r2
 801a358:	1a6d      	subs	r5, r5, r1
 801a35a:	0164      	lsls	r4, r4, #5
 801a35c:	016d      	lsls	r5, r5, #5
 801a35e:	3410      	adds	r4, #16
 801a360:	3510      	adds	r5, #16
 801a362:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
 801a366:	f8c6 418c 	str.w	r4, [r6, #396]	; 0x18c
 801a36a:	bd70      	pop	{r4, r5, r6, pc}

0801a36c <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 801a36c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a36e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801a370:	0149      	lsls	r1, r1, #5
 801a372:	4299      	cmp	r1, r3
 801a374:	4604      	mov	r4, r0
 801a376:	9101      	str	r1, [sp, #4]
 801a378:	d00b      	beq.n	801a392 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 801a37a:	4601      	mov	r1, r0
 801a37c:	aa01      	add	r2, sp, #4
 801a37e:	a802      	add	r0, sp, #8
 801a380:	f7fe fbdd 	bl	8018b3e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 801a384:	9b01      	ldr	r3, [sp, #4]
 801a386:	6423      	str	r3, [r4, #64]	; 0x40
 801a388:	6823      	ldr	r3, [r4, #0]
 801a38a:	a902      	add	r1, sp, #8
 801a38c:	691b      	ldr	r3, [r3, #16]
 801a38e:	4620      	mov	r0, r4
 801a390:	4798      	blx	r3
 801a392:	b004      	add	sp, #16
 801a394:	bd10      	pop	{r4, pc}
	...

0801a398 <_ZN8touchgfx5Gauge8setValueEi>:
 801a398:	b570      	push	{r4, r5, r6, lr}
 801a39a:	4604      	mov	r4, r0
 801a39c:	f7fc fdc6 	bl	8016f2c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801a3a0:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 801a3a4:	429a      	cmp	r2, r3
 801a3a6:	bfac      	ite	ge
 801a3a8:	f894 3145 	ldrbge.w	r3, [r4, #325]	; 0x145
 801a3ac:	f894 3144 	ldrblt.w	r3, [r4, #324]	; 0x144
 801a3b0:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801a3b4:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 801a3b8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801a3bc:	1ac9      	subs	r1, r1, r3
 801a3be:	2900      	cmp	r1, #0
 801a3c0:	bfb8      	it	lt
 801a3c2:	4249      	neglt	r1, r1
 801a3c4:	b289      	uxth	r1, r1
 801a3c6:	4620      	mov	r0, r4
 801a3c8:	f7fc fe43 	bl	8017052 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801a3cc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801a3d0:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 801a3d4:	eddf 6a19 	vldr	s13, [pc, #100]	; 801a43c <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 801a3d8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801a440 <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 801a3dc:	429a      	cmp	r2, r3
 801a3de:	4605      	mov	r5, r0
 801a3e0:	f504 76ac 	add.w	r6, r4, #344	; 0x158
 801a3e4:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801a3e8:	da15      	bge.n	801a416 <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 801a3ea:	1b5b      	subs	r3, r3, r5
 801a3ec:	ee07 3a90 	vmov	s15, r3
 801a3f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a3f4:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 801a3f8:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 801a3fc:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 801a400:	ee21 1a07 	vmul.f32	s2, s2, s14
 801a404:	f7ff f9b5 	bl	8019772 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 801a408:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 801a40c:	1b49      	subs	r1, r1, r5
 801a40e:	4630      	mov	r0, r6
 801a410:	f7ff ffac 	bl	801a36c <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 801a414:	bd70      	pop	{r4, r5, r6, pc}
 801a416:	442b      	add	r3, r5
 801a418:	ee07 3a90 	vmov	s15, r3
 801a41c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a420:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 801a424:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 801a428:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 801a42c:	ee21 1a07 	vmul.f32	s2, s2, s14
 801a430:	f7ff f99f 	bl	8019772 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 801a434:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 801a438:	4429      	add	r1, r5
 801a43a:	e7e8      	b.n	801a40e <_ZN8touchgfx5Gauge8setValueEi+0x76>
 801a43c:	43340000 	.word	0x43340000
 801a440:	40490fdb 	.word	0x40490fdb

0801a444 <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 801a444:	4291      	cmp	r1, r2
 801a446:	b510      	push	{r4, lr}
 801a448:	4604      	mov	r4, r0
 801a44a:	d105      	bne.n	801a458 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x14>
 801a44c:	4b0b      	ldr	r3, [pc, #44]	; (801a47c <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x38>)
 801a44e:	4a0c      	ldr	r2, [pc, #48]	; (801a480 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x3c>)
 801a450:	480c      	ldr	r0, [pc, #48]	; (801a484 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x40>)
 801a452:	215e      	movs	r1, #94	; 0x5e
 801a454:	f013 fd34 	bl	802dec0 <__assert_func>
 801a458:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
 801a45c:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
 801a460:	0149      	lsls	r1, r1, #5
 801a462:	0152      	lsls	r2, r2, #5
 801a464:	f8c0 1194 	str.w	r1, [r0, #404]	; 0x194
 801a468:	f8c0 2198 	str.w	r2, [r0, #408]	; 0x198
 801a46c:	f7fc fd12 	bl	8016e94 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 801a470:	4601      	mov	r1, r0
 801a472:	4620      	mov	r0, r4
 801a474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a478:	f7ff bf8e 	b.w	801a398 <_ZN8touchgfx5Gauge8setValueEi>
 801a47c:	08031974 	.word	0x08031974
 801a480:	08031a9c 	.word	0x08031a9c
 801a484:	0803198b 	.word	0x0803198b

0801a488 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 801a488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a48a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801a48c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a490:	4299      	cmp	r1, r3
 801a492:	4606      	mov	r6, r0
 801a494:	d02a      	beq.n	801a4ec <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 801a496:	4b16      	ldr	r3, [pc, #88]	; (801a4f0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	b92b      	cbnz	r3, 801a4a8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 801a49c:	4b15      	ldr	r3, [pc, #84]	; (801a4f4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 801a49e:	4a16      	ldr	r2, [pc, #88]	; (801a4f8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801a4a0:	21ae      	movs	r1, #174	; 0xae
 801a4a2:	4816      	ldr	r0, [pc, #88]	; (801a4fc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 801a4a4:	f013 fd0c 	bl	802dec0 <__assert_func>
 801a4a8:	4a15      	ldr	r2, [pc, #84]	; (801a500 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 801a4aa:	8812      	ldrh	r2, [r2, #0]
 801a4ac:	428a      	cmp	r2, r1
 801a4ae:	d803      	bhi.n	801a4b8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 801a4b0:	4b14      	ldr	r3, [pc, #80]	; (801a504 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 801a4b2:	4a11      	ldr	r2, [pc, #68]	; (801a4f8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801a4b4:	21af      	movs	r1, #175	; 0xaf
 801a4b6:	e7f4      	b.n	801a4a2 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 801a4b8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801a4bc:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801a4c0:	4b11      	ldr	r3, [pc, #68]	; (801a508 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 801a4c2:	7854      	ldrb	r4, [r2, #1]
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801a4ca:	682b      	ldr	r3, [r5, #0]
 801a4cc:	69df      	ldr	r7, [r3, #28]
 801a4ce:	4b0f      	ldr	r3, [pc, #60]	; (801a50c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 801a4d0:	6818      	ldr	r0, [r3, #0]
 801a4d2:	f7fa f825 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 801a4d6:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801a4da:	2300      	movs	r3, #0
 801a4dc:	9300      	str	r3, [sp, #0]
 801a4de:	4602      	mov	r2, r0
 801a4e0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 801a4e2:	4621      	mov	r1, r4
 801a4e4:	4628      	mov	r0, r5
 801a4e6:	47b8      	blx	r7
 801a4e8:	b003      	add	sp, #12
 801a4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4ec:	2000      	movs	r0, #0
 801a4ee:	e7fb      	b.n	801a4e8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 801a4f0:	200097cc 	.word	0x200097cc
 801a4f4:	080317a8 	.word	0x080317a8
 801a4f8:	08031b50 	.word	0x08031b50
 801a4fc:	080317ea 	.word	0x080317ea
 801a500:	200097d0 	.word	0x200097d0
 801a504:	08031813 	.word	0x08031813
 801a508:	200097d4 	.word	0x200097d4
 801a50c:	200097d8 	.word	0x200097d8

0801a510 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801a510:	b570      	push	{r4, r5, r6, lr}
 801a512:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801a514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a518:	4299      	cmp	r1, r3
 801a51a:	4604      	mov	r4, r0
 801a51c:	d01e      	beq.n	801a55c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801a51e:	6803      	ldr	r3, [r0, #0]
 801a520:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801a522:	4b0f      	ldr	r3, [pc, #60]	; (801a560 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	b92b      	cbnz	r3, 801a534 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 801a528:	4b0e      	ldr	r3, [pc, #56]	; (801a564 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801a52a:	4a0f      	ldr	r2, [pc, #60]	; (801a568 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801a52c:	21ae      	movs	r1, #174	; 0xae
 801a52e:	480f      	ldr	r0, [pc, #60]	; (801a56c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 801a530:	f013 fcc6 	bl	802dec0 <__assert_func>
 801a534:	4b0e      	ldr	r3, [pc, #56]	; (801a570 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 801a536:	881b      	ldrh	r3, [r3, #0]
 801a538:	428b      	cmp	r3, r1
 801a53a:	d803      	bhi.n	801a544 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 801a53c:	4b0d      	ldr	r3, [pc, #52]	; (801a574 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801a53e:	4a0a      	ldr	r2, [pc, #40]	; (801a568 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801a540:	21af      	movs	r1, #175	; 0xaf
 801a542:	e7f4      	b.n	801a52e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 801a544:	4b0c      	ldr	r3, [pc, #48]	; (801a578 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 801a546:	6818      	ldr	r0, [r3, #0]
 801a548:	f7f9 ffea 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 801a54c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801a54e:	4601      	mov	r1, r0
 801a550:	46ac      	mov	ip, r5
 801a552:	4620      	mov	r0, r4
 801a554:	2300      	movs	r3, #0
 801a556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a55a:	4760      	bx	ip
 801a55c:	2000      	movs	r0, #0
 801a55e:	bd70      	pop	{r4, r5, r6, pc}
 801a560:	200097cc 	.word	0x200097cc
 801a564:	080317a8 	.word	0x080317a8
 801a568:	08031b50 	.word	0x08031b50
 801a56c:	080317ea 	.word	0x080317ea
 801a570:	200097d0 	.word	0x200097d0
 801a574:	08031813 	.word	0x08031813
 801a578:	200097d8 	.word	0x200097d8

0801a57c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801a57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a580:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801a582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a586:	4293      	cmp	r3, r2
 801a588:	b08c      	sub	sp, #48	; 0x30
 801a58a:	4604      	mov	r4, r0
 801a58c:	460e      	mov	r6, r1
 801a58e:	d05d      	beq.n	801a64c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801a590:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 801a670 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 801a594:	f8d8 2000 	ldr.w	r2, [r8]
 801a598:	b92a      	cbnz	r2, 801a5a6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801a59a:	4b2e      	ldr	r3, [pc, #184]	; (801a654 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801a59c:	4a2e      	ldr	r2, [pc, #184]	; (801a658 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801a59e:	21ae      	movs	r1, #174	; 0xae
 801a5a0:	482e      	ldr	r0, [pc, #184]	; (801a65c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 801a5a2:	f013 fc8d 	bl	802dec0 <__assert_func>
 801a5a6:	4f2e      	ldr	r7, [pc, #184]	; (801a660 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 801a5a8:	8839      	ldrh	r1, [r7, #0]
 801a5aa:	4299      	cmp	r1, r3
 801a5ac:	d803      	bhi.n	801a5b6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801a5ae:	4b2d      	ldr	r3, [pc, #180]	; (801a664 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 801a5b0:	4a29      	ldr	r2, [pc, #164]	; (801a658 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801a5b2:	21af      	movs	r1, #175	; 0xaf
 801a5b4:	e7f4      	b.n	801a5a0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 801a5b6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a5ba:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801a5be:	4b2a      	ldr	r3, [pc, #168]	; (801a668 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 801a5c0:	681b      	ldr	r3, [r3, #0]
 801a5c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a5c6:	2a00      	cmp	r2, #0
 801a5c8:	d040      	beq.n	801a64c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801a5ca:	784b      	ldrb	r3, [r1, #1]
 801a5cc:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 801a5d0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801a5d4:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 801a5d8:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 801a5dc:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 801a5e0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a5e2:	9207      	str	r2, [sp, #28]
 801a5e4:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 801a5e8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801a5ec:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801a5f0:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801a5f4:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801a5f8:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801a5fc:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801a600:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801a604:	f88d a020 	strb.w	sl, [sp, #32]
 801a608:	9009      	str	r0, [sp, #36]	; 0x24
 801a60a:	f7f5 fcfb 	bl	8010004 <_ZN8touchgfx3HAL3lcdEv>
 801a60e:	ad05      	add	r5, sp, #20
 801a610:	4681      	mov	r9, r0
 801a612:	4621      	mov	r1, r4
 801a614:	4628      	mov	r0, r5
 801a616:	f002 fd97 	bl	801d148 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a61a:	f8d8 3000 	ldr.w	r3, [r8]
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d0bb      	beq.n	801a59a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801a622:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801a624:	883b      	ldrh	r3, [r7, #0]
 801a626:	428b      	cmp	r3, r1
 801a628:	d9c1      	bls.n	801a5ae <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 801a62a:	4b10      	ldr	r3, [pc, #64]	; (801a66c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 801a62c:	6818      	ldr	r0, [r3, #0]
 801a62e:	f7f9 ff77 	bl	8014520 <_ZNK8touchgfx5Texts7getTextEt>
 801a632:	2300      	movs	r3, #0
 801a634:	9303      	str	r3, [sp, #12]
 801a636:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a638:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801a63c:	ab07      	add	r3, sp, #28
 801a63e:	9300      	str	r3, [sp, #0]
 801a640:	e895 0006 	ldmia.w	r5, {r1, r2}
 801a644:	4633      	mov	r3, r6
 801a646:	4648      	mov	r0, r9
 801a648:	f7f9 fefb 	bl	8014442 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801a64c:	b00c      	add	sp, #48	; 0x30
 801a64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a652:	bf00      	nop
 801a654:	080317a8 	.word	0x080317a8
 801a658:	08031b50 	.word	0x08031b50
 801a65c:	080317ea 	.word	0x080317ea
 801a660:	200097d0 	.word	0x200097d0
 801a664:	08031813 	.word	0x08031813
 801a668:	200097d4 	.word	0x200097d4
 801a66c:	200097d8 	.word	0x200097d8
 801a670:	200097cc 	.word	0x200097cc

0801a674 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801a674:	b570      	push	{r4, r5, r6, lr}
 801a676:	880b      	ldrh	r3, [r1, #0]
 801a678:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a67a:	4604      	mov	r4, r0
 801a67c:	4608      	mov	r0, r1
 801a67e:	460d      	mov	r5, r1
 801a680:	f005 f906 	bl	801f890 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a684:	4606      	mov	r6, r0
 801a686:	4628      	mov	r0, r5
 801a688:	f005 f93c 	bl	801f904 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a68c:	6823      	ldr	r3, [r4, #0]
 801a68e:	4605      	mov	r5, r0
 801a690:	b231      	sxth	r1, r6
 801a692:	4620      	mov	r0, r4
 801a694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a696:	4798      	blx	r3
 801a698:	6823      	ldr	r3, [r4, #0]
 801a69a:	b229      	sxth	r1, r5
 801a69c:	4620      	mov	r0, r4
 801a69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a6a4:	4718      	bx	r3

0801a6a6 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801a6a6:	b510      	push	{r4, lr}
 801a6a8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801a6ac:	2bff      	cmp	r3, #255	; 0xff
 801a6ae:	4604      	mov	r4, r0
 801a6b0:	d006      	beq.n	801a6c0 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	8003      	strh	r3, [r0, #0]
 801a6b6:	8043      	strh	r3, [r0, #2]
 801a6b8:	8083      	strh	r3, [r0, #4]
 801a6ba:	80c3      	strh	r3, [r0, #6]
 801a6bc:	4620      	mov	r0, r4
 801a6be:	bd10      	pop	{r4, pc}
 801a6c0:	3126      	adds	r1, #38	; 0x26
 801a6c2:	f005 f959 	bl	801f978 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a6c6:	e7f9      	b.n	801a6bc <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801a6c8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801a6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6cc:	4604      	mov	r4, r0
 801a6ce:	b088      	sub	sp, #32
 801a6d0:	f854 3b26 	ldr.w	r3, [r4], #38
 801a6d4:	2500      	movs	r5, #0
 801a6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a6d8:	460f      	mov	r7, r1
 801a6da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a6de:	a904      	add	r1, sp, #16
 801a6e0:	4606      	mov	r6, r0
 801a6e2:	4798      	blx	r3
 801a6e4:	4620      	mov	r0, r4
 801a6e6:	f005 f8d3 	bl	801f890 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a6ea:	4680      	mov	r8, r0
 801a6ec:	4620      	mov	r0, r4
 801a6ee:	f005 f909 	bl	801f904 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a6f2:	9506      	str	r5, [sp, #24]
 801a6f4:	ad06      	add	r5, sp, #24
 801a6f6:	f8ad 001e 	strh.w	r0, [sp, #30]
 801a6fa:	4639      	mov	r1, r7
 801a6fc:	4628      	mov	r0, r5
 801a6fe:	f8ad 801c 	strh.w	r8, [sp, #28]
 801a702:	f7fc fef1 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 801a706:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	dd19      	ble.n	801a742 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a70e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801a712:	2b00      	cmp	r3, #0
 801a714:	dd15      	ble.n	801a742 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a716:	4b0c      	ldr	r3, [pc, #48]	; (801a748 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a71e:	b10a      	cbz	r2, 801a724 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801a720:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a722:	b900      	cbnz	r0, 801a726 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801a724:	6898      	ldr	r0, [r3, #8]
 801a726:	6801      	ldr	r1, [r0, #0]
 801a728:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a72c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a730:	2701      	movs	r7, #1
 801a732:	9702      	str	r7, [sp, #8]
 801a734:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801a738:	e9cd 5600 	strd	r5, r6, [sp]
 801a73c:	688d      	ldr	r5, [r1, #8]
 801a73e:	4621      	mov	r1, r4
 801a740:	47a8      	blx	r5
 801a742:	b008      	add	sp, #32
 801a744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a748:	2000977c 	.word	0x2000977c

0801a74c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801a74c:	b510      	push	{r4, lr}
 801a74e:	6803      	ldr	r3, [r0, #0]
 801a750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a752:	460c      	mov	r4, r1
 801a754:	4798      	blx	r3
 801a756:	1b03      	subs	r3, r0, r4
 801a758:	4258      	negs	r0, r3
 801a75a:	4158      	adcs	r0, r3
 801a75c:	bd10      	pop	{r4, pc}
	...

0801a760 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801a760:	4b01      	ldr	r3, [pc, #4]	; (801a768 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801a762:	6019      	str	r1, [r3, #0]
 801a764:	4770      	bx	lr
 801a766:	bf00      	nop
 801a768:	20009784 	.word	0x20009784

0801a76c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a770:	4696      	mov	lr, r2
 801a772:	4605      	mov	r5, r0
 801a774:	4614      	mov	r4, r2
 801a776:	460e      	mov	r6, r1
 801a778:	461f      	mov	r7, r3
 801a77a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a77e:	b097      	sub	sp, #92	; 0x5c
 801a780:	f10d 0c1c 	add.w	ip, sp, #28
 801a784:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a788:	f8de 3000 	ldr.w	r3, [lr]
 801a78c:	f8cc 3000 	str.w	r3, [ip]
 801a790:	f104 0e14 	add.w	lr, r4, #20
 801a794:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a798:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a79c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a7a0:	f8de 3000 	ldr.w	r3, [lr]
 801a7a4:	f8cc 3000 	str.w	r3, [ip]
 801a7a8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a7ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a7b0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a7b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a7b8:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801a7bc:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801a7c0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801a7c4:	f8de 3000 	ldr.w	r3, [lr]
 801a7c8:	f8cc 3000 	str.w	r3, [ip]
 801a7cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a7ce:	682b      	ldr	r3, [r5, #0]
 801a7d0:	9201      	str	r2, [sp, #4]
 801a7d2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a7d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a7d8:	9200      	str	r2, [sp, #0]
 801a7da:	f8cd 8008 	str.w	r8, [sp, #8]
 801a7de:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 801a7e2:	aa07      	add	r2, sp, #28
 801a7e4:	463b      	mov	r3, r7
 801a7e6:	4631      	mov	r1, r6
 801a7e8:	4628      	mov	r0, r5
 801a7ea:	47d8      	blx	fp
 801a7ec:	46a6      	mov	lr, r4
 801a7ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a7f2:	f10d 0c1c 	add.w	ip, sp, #28
 801a7f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a7fa:	f8de 3000 	ldr.w	r3, [lr]
 801a7fe:	f8cc 3000 	str.w	r3, [ip]
 801a802:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a806:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a80a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a80e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a812:	343c      	adds	r4, #60	; 0x3c
 801a814:	f8de 3000 	ldr.w	r3, [lr]
 801a818:	f8cc 3000 	str.w	r3, [ip]
 801a81c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a81e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a822:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a826:	6823      	ldr	r3, [r4, #0]
 801a828:	f8cc 3000 	str.w	r3, [ip]
 801a82c:	682b      	ldr	r3, [r5, #0]
 801a82e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a832:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a834:	9201      	str	r2, [sp, #4]
 801a836:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a838:	9200      	str	r2, [sp, #0]
 801a83a:	f8cd 8008 	str.w	r8, [sp, #8]
 801a83e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 801a840:	aa07      	add	r2, sp, #28
 801a842:	463b      	mov	r3, r7
 801a844:	4631      	mov	r1, r6
 801a846:	4628      	mov	r0, r5
 801a848:	47a0      	blx	r4
 801a84a:	b017      	add	sp, #92	; 0x5c
 801a84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a850 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a850:	2000      	movs	r0, #0
 801a852:	4770      	bx	lr

0801a854 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801a854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a858:	b08d      	sub	sp, #52	; 0x34
 801a85a:	4688      	mov	r8, r1
 801a85c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a85e:	f8d3 c000 	ldr.w	ip, [r3]
 801a862:	680f      	ldr	r7, [r1, #0]
 801a864:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801a868:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801a86c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801a870:	edd3 6a07 	vldr	s13, [r3, #28]
 801a874:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a876:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801a87a:	f9b1 9000 	ldrsh.w	r9, [r1]
 801a87e:	f9ba 1000 	ldrsh.w	r1, [sl]
 801a882:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801a886:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801a88a:	eba7 070c 	sub.w	r7, r7, ip
 801a88e:	42bc      	cmp	r4, r7
 801a890:	bfa8      	it	ge
 801a892:	463c      	movge	r4, r7
 801a894:	ee07 4a90 	vmov	s15, r4
 801a898:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801a89c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801a8a0:	ee25 4a04 	vmul.f32	s8, s10, s8
 801a8a4:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a8a8:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a8ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a8b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a8b4:	eb09 0e0c 	add.w	lr, r9, ip
 801a8b8:	4571      	cmp	r1, lr
 801a8ba:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801a8be:	ee32 1a05 	vadd.f32	s2, s4, s10
 801a8c2:	ee36 0a84 	vadd.f32	s0, s13, s8
 801a8c6:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a8ca:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a8ce:	f340 808d 	ble.w	801a9ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 801a8d2:	eba1 060e 	sub.w	r6, r1, lr
 801a8d6:	fb96 f5f4 	sdiv	r5, r6, r4
 801a8da:	ee07 5a10 	vmov	s14, r5
 801a8de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a8e2:	2d00      	cmp	r5, #0
 801a8e4:	fb04 6615 	mls	r6, r4, r5, r6
 801a8e8:	eea7 0a04 	vfma.f32	s0, s14, s8
 801a8ec:	eee7 0a24 	vfma.f32	s1, s14, s9
 801a8f0:	eea7 1a05 	vfma.f32	s2, s14, s10
 801a8f4:	dd13      	ble.n	801a91e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 801a8f6:	ee70 6a44 	vsub.f32	s13, s0, s8
 801a8fa:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801a8fe:	eef5 6a40 	vcmp.f32	s13, #0.0
 801a902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a906:	bf18      	it	ne
 801a908:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801a90c:	ee31 2a45 	vsub.f32	s4, s2, s10
 801a910:	bf08      	it	eq
 801a912:	eeb0 7a67 	vmoveq.f32	s14, s15
 801a916:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a91a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a91e:	fb05 f204 	mul.w	r2, r5, r4
 801a922:	1abf      	subs	r7, r7, r2
 801a924:	4494      	add	ip, r2
 801a926:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801a92a:	4411      	add	r1, r2
 801a92c:	eb09 020c 	add.w	r2, r9, ip
 801a930:	443a      	add	r2, r7
 801a932:	b209      	sxth	r1, r1
 801a934:	428a      	cmp	r2, r1
 801a936:	bfc4      	itt	gt
 801a938:	eba1 0209 	subgt.w	r2, r1, r9
 801a93c:	eba2 070c 	subgt.w	r7, r2, ip
 801a940:	2f00      	cmp	r7, #0
 801a942:	dd50      	ble.n	801a9e6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 801a944:	fb97 f1f4 	sdiv	r1, r7, r4
 801a948:	fb04 7211 	mls	r2, r4, r1, r7
 801a94c:	b90a      	cbnz	r2, 801a952 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 801a94e:	3901      	subs	r1, #1
 801a950:	4622      	mov	r2, r4
 801a952:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801a956:	6840      	ldr	r0, [r0, #4]
 801a958:	900b      	str	r0, [sp, #44]	; 0x2c
 801a95a:	f8d0 a000 	ldr.w	sl, [r0]
 801a95e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a960:	9008      	str	r0, [sp, #32]
 801a962:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801a966:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a968:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801a96c:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801a970:	695b      	ldr	r3, [r3, #20]
 801a972:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a974:	445b      	add	r3, fp
 801a976:	eef0 6a42 	vmov.f32	s13, s4
 801a97a:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801a97e:	ee21 3a23 	vmul.f32	s6, s2, s7
 801a982:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801a986:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a98a:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a98e:	9307      	str	r3, [sp, #28]
 801a990:	ee17 7a90 	vmov	r7, s15
 801a994:	ee73 7a42 	vsub.f32	s15, s6, s4
 801a998:	eeb0 7a61 	vmov.f32	s14, s3
 801a99c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a9a0:	ee16 3a90 	vmov	r3, s13
 801a9a4:	fb97 f7f4 	sdiv	r7, r7, r4
 801a9a8:	ee17 ca90 	vmov	ip, s15
 801a9ac:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801a9b0:	fb9c fcf4 	sdiv	ip, ip, r4
 801a9b4:	fb0c 3306 	mla	r3, ip, r6, r3
 801a9b8:	9302      	str	r3, [sp, #8]
 801a9ba:	ee17 3a10 	vmov	r3, s14
 801a9be:	44b6      	add	lr, r6
 801a9c0:	fb04 e505 	mla	r5, r4, r5, lr
 801a9c4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801a9c8:	fb07 3706 	mla	r7, r7, r6, r3
 801a9cc:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801a9d0:	e9cd 4700 	strd	r4, r7, [sp]
 801a9d4:	2900      	cmp	r1, #0
 801a9d6:	bfcc      	ite	gt
 801a9d8:	46a1      	movgt	r9, r4
 801a9da:	4691      	movle	r9, r2
 801a9dc:	eba9 0306 	sub.w	r3, r9, r6
 801a9e0:	f8da 4008 	ldr.w	r4, [sl, #8]
 801a9e4:	47a0      	blx	r4
 801a9e6:	b00d      	add	sp, #52	; 0x34
 801a9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9ec:	2500      	movs	r5, #0
 801a9ee:	462e      	mov	r6, r5
 801a9f0:	e799      	b.n	801a926 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0801a9f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9f8:	b0db      	sub	sp, #364	; 0x16c
 801a9fa:	461d      	mov	r5, r3
 801a9fc:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801aa00:	930a      	str	r3, [sp, #40]	; 0x28
 801aa02:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801aa06:	930b      	str	r3, [sp, #44]	; 0x2c
 801aa08:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801aa0c:	9310      	str	r3, [sp, #64]	; 0x40
 801aa0e:	6803      	ldr	r3, [r0, #0]
 801aa10:	910f      	str	r1, [sp, #60]	; 0x3c
 801aa12:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 801aa14:	9009      	str	r0, [sp, #36]	; 0x24
 801aa16:	4614      	mov	r4, r2
 801aa18:	4629      	mov	r1, r5
 801aa1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801aa1e:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801aa22:	47b8      	blx	r7
 801aa24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa26:	6058      	str	r0, [r3, #4]
 801aa28:	2800      	cmp	r0, #0
 801aa2a:	f000 83a1 	beq.w	801b170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa2e:	682b      	ldr	r3, [r5, #0]
 801aa30:	9314      	str	r3, [sp, #80]	; 0x50
 801aa32:	686b      	ldr	r3, [r5, #4]
 801aa34:	9315      	str	r3, [sp, #84]	; 0x54
 801aa36:	4bc4      	ldr	r3, [pc, #784]	; (801ad48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801aa38:	ed94 7a02 	vldr	s14, [r4, #8]
 801aa3c:	7819      	ldrb	r1, [r3, #0]
 801aa3e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801aa42:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801aa46:	2900      	cmp	r1, #0
 801aa48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aa4c:	bf16      	itet	ne
 801aa4e:	4619      	movne	r1, r3
 801aa50:	4611      	moveq	r1, r2
 801aa52:	4613      	movne	r3, r2
 801aa54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa58:	9116      	str	r1, [sp, #88]	; 0x58
 801aa5a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801aa5e:	f240 8387 	bls.w	801b170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa62:	ed94 7a07 	vldr	s14, [r4, #28]
 801aa66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aa6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa6e:	f240 837f 	bls.w	801b170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa72:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801aa76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aa7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa7e:	f240 8377 	bls.w	801b170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa82:	6822      	ldr	r2, [r4, #0]
 801aa84:	4bb1      	ldr	r3, [pc, #708]	; (801ad4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801aa86:	429a      	cmp	r2, r3
 801aa88:	f2c0 8372 	blt.w	801b170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa8c:	49b0      	ldr	r1, [pc, #704]	; (801ad50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801aa8e:	6963      	ldr	r3, [r4, #20]
 801aa90:	428a      	cmp	r2, r1
 801aa92:	f300 836d 	bgt.w	801b170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa96:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801aa9a:	48ae      	ldr	r0, [pc, #696]	; (801ad54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801aa9c:	33ff      	adds	r3, #255	; 0xff
 801aa9e:	4283      	cmp	r3, r0
 801aaa0:	f200 8366 	bhi.w	801b170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aaa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801aaa6:	4dac      	ldr	r5, [pc, #688]	; (801ad58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801aaa8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801aaac:	33ff      	adds	r3, #255	; 0xff
 801aaae:	42ab      	cmp	r3, r5
 801aab0:	f200 835e 	bhi.w	801b170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aab4:	6862      	ldr	r2, [r4, #4]
 801aab6:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801aaba:	33ff      	adds	r3, #255	; 0xff
 801aabc:	4283      	cmp	r3, r0
 801aabe:	f200 8357 	bhi.w	801b170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aac2:	69a1      	ldr	r1, [r4, #24]
 801aac4:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801aac8:	33ff      	adds	r3, #255	; 0xff
 801aaca:	4283      	cmp	r3, r0
 801aacc:	f200 8350 	bhi.w	801b170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aad0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801aad2:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801aad6:	30ff      	adds	r0, #255	; 0xff
 801aad8:	42a8      	cmp	r0, r5
 801aada:	f200 8349 	bhi.w	801b170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aade:	428a      	cmp	r2, r1
 801aae0:	f280 8110 	bge.w	801ad04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801aae4:	429a      	cmp	r2, r3
 801aae6:	f300 8119 	bgt.w	801ad1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801aaea:	4299      	cmp	r1, r3
 801aaec:	f280 811d 	bge.w	801ad2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801aaf0:	2502      	movs	r5, #2
 801aaf2:	2701      	movs	r7, #1
 801aaf4:	46a9      	mov	r9, r5
 801aaf6:	46b8      	mov	r8, r7
 801aaf8:	f04f 0a00 	mov.w	sl, #0
 801aafc:	4621      	mov	r1, r4
 801aafe:	a849      	add	r0, sp, #292	; 0x124
 801ab00:	f003 fed6 	bl	801e8b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801ab04:	4622      	mov	r2, r4
 801ab06:	4653      	mov	r3, sl
 801ab08:	a949      	add	r1, sp, #292	; 0x124
 801ab0a:	f8cd 9000 	str.w	r9, [sp]
 801ab0e:	a819      	add	r0, sp, #100	; 0x64
 801ab10:	f003 fffe 	bl	801eb10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801ab14:	4622      	mov	r2, r4
 801ab16:	4653      	mov	r3, sl
 801ab18:	a949      	add	r1, sp, #292	; 0x124
 801ab1a:	f8cd 8000 	str.w	r8, [sp]
 801ab1e:	a829      	add	r0, sp, #164	; 0xa4
 801ab20:	f003 fff6 	bl	801eb10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801ab24:	4643      	mov	r3, r8
 801ab26:	4622      	mov	r2, r4
 801ab28:	a949      	add	r1, sp, #292	; 0x124
 801ab2a:	f8cd 9000 	str.w	r9, [sp]
 801ab2e:	a839      	add	r0, sp, #228	; 0xe4
 801ab30:	f003 ffee 	bl	801eb10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801ab34:	42af      	cmp	r7, r5
 801ab36:	bfb5      	itete	lt
 801ab38:	2300      	movlt	r3, #0
 801ab3a:	2301      	movge	r3, #1
 801ab3c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801ab3e:	930e      	strge	r3, [sp, #56]	; 0x38
 801ab40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ab42:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ab46:	af12      	add	r7, sp, #72	; 0x48
 801ab48:	bfb9      	ittee	lt
 801ab4a:	ad29      	addlt	r5, sp, #164	; 0xa4
 801ab4c:	ac19      	addlt	r4, sp, #100	; 0x64
 801ab4e:	ad19      	addge	r5, sp, #100	; 0x64
 801ab50:	ac29      	addge	r4, sp, #164	; 0xa4
 801ab52:	e887 0003 	stmia.w	r7, {r0, r1}
 801ab56:	b928      	cbnz	r0, 801ab64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801ab58:	4b80      	ldr	r3, [pc, #512]	; (801ad5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801ab5a:	6818      	ldr	r0, [r3, #0]
 801ab5c:	6803      	ldr	r3, [r0, #0]
 801ab5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab60:	4798      	blx	r3
 801ab62:	6038      	str	r0, [r7, #0]
 801ab64:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801ab66:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801ab6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ab6e:	930c      	str	r3, [sp, #48]	; 0x30
 801ab70:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ab72:	6963      	ldr	r3, [r4, #20]
 801ab74:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801ab76:	440b      	add	r3, r1
 801ab78:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801ab7c:	4408      	add	r0, r1
 801ab7e:	b200      	sxth	r0, r0
 801ab80:	4283      	cmp	r3, r0
 801ab82:	900d      	str	r0, [sp, #52]	; 0x34
 801ab84:	f280 80dd 	bge.w	801ad42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801ab88:	428b      	cmp	r3, r1
 801ab8a:	da08      	bge.n	801ab9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801ab8c:	2a00      	cmp	r2, #0
 801ab8e:	dd06      	ble.n	801ab9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801ab90:	1acb      	subs	r3, r1, r3
 801ab92:	429a      	cmp	r2, r3
 801ab94:	f2c0 80e4 	blt.w	801ad60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	f300 80e2 	bgt.w	801ad62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801ab9e:	6967      	ldr	r7, [r4, #20]
 801aba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aba2:	443b      	add	r3, r7
 801aba4:	461f      	mov	r7, r3
 801aba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aba8:	1bdf      	subs	r7, r3, r7
 801abaa:	4297      	cmp	r7, r2
 801abac:	bfa8      	it	ge
 801abae:	4617      	movge	r7, r2
 801abb0:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801abb4:	2f00      	cmp	r7, #0
 801abb6:	f340 8166 	ble.w	801ae86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801abba:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801abbc:	6829      	ldr	r1, [r5, #0]
 801abbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 801abc2:	f9bb 3000 	ldrsh.w	r3, [fp]
 801abc6:	6820      	ldr	r0, [r4, #0]
 801abc8:	4411      	add	r1, r2
 801abca:	4299      	cmp	r1, r3
 801abcc:	dd1a      	ble.n	801ac04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801abce:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801abd2:	440b      	add	r3, r1
 801abd4:	4402      	add	r2, r0
 801abd6:	b21b      	sxth	r3, r3
 801abd8:	429a      	cmp	r2, r3
 801abda:	dc13      	bgt.n	801ac04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801abdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	9206      	str	r2, [sp, #24]
 801abe4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801abe6:	9205      	str	r2, [sp, #20]
 801abe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801abea:	9500      	str	r5, [sp, #0]
 801abec:	e9cd b203 	strd	fp, r2, [sp, #12]
 801abf0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801abf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801abf4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801abf8:	a912      	add	r1, sp, #72	; 0x48
 801abfa:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801abfe:	aa49      	add	r2, sp, #292	; 0x124
 801ac00:	4623      	mov	r3, r4
 801ac02:	47c8      	blx	r9
 801ac04:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ac08:	441a      	add	r2, r3
 801ac0a:	6963      	ldr	r3, [r4, #20]
 801ac0c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801ac10:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801ac14:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801ac18:	68a1      	ldr	r1, [r4, #8]
 801ac1a:	ed94 6a08 	vldr	s12, [r4, #32]
 801ac1e:	6022      	str	r2, [r4, #0]
 801ac20:	3301      	adds	r3, #1
 801ac22:	6163      	str	r3, [r4, #20]
 801ac24:	69a3      	ldr	r3, [r4, #24]
 801ac26:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ac2a:	3b01      	subs	r3, #1
 801ac2c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801ac30:	61a3      	str	r3, [r4, #24]
 801ac32:	6923      	ldr	r3, [r4, #16]
 801ac34:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801ac38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ac3c:	edd4 6a07 	vldr	s13, [r4, #28]
 801ac40:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801ac44:	440b      	add	r3, r1
 801ac46:	68e1      	ldr	r1, [r4, #12]
 801ac48:	6123      	str	r3, [r4, #16]
 801ac4a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801ac4e:	428b      	cmp	r3, r1
 801ac50:	edc4 6a07 	vstr	s13, [r4, #28]
 801ac54:	db15      	blt.n	801ac82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801ac56:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801ac5a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801ac5e:	3201      	adds	r2, #1
 801ac60:	edc4 6a07 	vstr	s13, [r4, #28]
 801ac64:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801ac68:	6022      	str	r2, [r4, #0]
 801ac6a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ac6e:	1a5b      	subs	r3, r3, r1
 801ac70:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801ac74:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801ac78:	6123      	str	r3, [r4, #16]
 801ac7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ac7e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801ac82:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ac86:	441a      	add	r2, r3
 801ac88:	696b      	ldr	r3, [r5, #20]
 801ac8a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801ac8e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801ac92:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801ac96:	68a9      	ldr	r1, [r5, #8]
 801ac98:	ed95 6a08 	vldr	s12, [r5, #32]
 801ac9c:	602a      	str	r2, [r5, #0]
 801ac9e:	3301      	adds	r3, #1
 801aca0:	616b      	str	r3, [r5, #20]
 801aca2:	69ab      	ldr	r3, [r5, #24]
 801aca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aca8:	3b01      	subs	r3, #1
 801acaa:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801acae:	61ab      	str	r3, [r5, #24]
 801acb0:	692b      	ldr	r3, [r5, #16]
 801acb2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801acb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801acba:	edd5 6a07 	vldr	s13, [r5, #28]
 801acbe:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801acc2:	440b      	add	r3, r1
 801acc4:	68e9      	ldr	r1, [r5, #12]
 801acc6:	612b      	str	r3, [r5, #16]
 801acc8:	ee76 6a86 	vadd.f32	s13, s13, s12
 801accc:	428b      	cmp	r3, r1
 801acce:	edc5 6a07 	vstr	s13, [r5, #28]
 801acd2:	db15      	blt.n	801ad00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801acd4:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801acd8:	ee76 6a26 	vadd.f32	s13, s12, s13
 801acdc:	3201      	adds	r2, #1
 801acde:	edc5 6a07 	vstr	s13, [r5, #28]
 801ace2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801ace6:	602a      	str	r2, [r5, #0]
 801ace8:	ee36 7a87 	vadd.f32	s14, s13, s14
 801acec:	1a5b      	subs	r3, r3, r1
 801acee:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801acf2:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801acf6:	612b      	str	r3, [r5, #16]
 801acf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801acfc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801ad00:	3f01      	subs	r7, #1
 801ad02:	e757      	b.n	801abb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801ad04:	4299      	cmp	r1, r3
 801ad06:	dc13      	bgt.n	801ad30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801ad08:	429a      	cmp	r2, r3
 801ad0a:	da14      	bge.n	801ad36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801ad0c:	2502      	movs	r5, #2
 801ad0e:	2703      	movs	r7, #3
 801ad10:	46a9      	mov	r9, r5
 801ad12:	f04f 0800 	mov.w	r8, #0
 801ad16:	f04f 0a01 	mov.w	sl, #1
 801ad1a:	e6ef      	b.n	801aafc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801ad1c:	2501      	movs	r5, #1
 801ad1e:	2700      	movs	r7, #0
 801ad20:	46a9      	mov	r9, r5
 801ad22:	46b8      	mov	r8, r7
 801ad24:	f04f 0a02 	mov.w	sl, #2
 801ad28:	e6e8      	b.n	801aafc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801ad2a:	2501      	movs	r5, #1
 801ad2c:	2702      	movs	r7, #2
 801ad2e:	e6e1      	b.n	801aaf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801ad30:	2500      	movs	r5, #0
 801ad32:	2701      	movs	r7, #1
 801ad34:	e7f4      	b.n	801ad20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801ad36:	2702      	movs	r7, #2
 801ad38:	2503      	movs	r5, #3
 801ad3a:	f04f 0900 	mov.w	r9, #0
 801ad3e:	46b8      	mov	r8, r7
 801ad40:	e7e9      	b.n	801ad16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801ad42:	4613      	mov	r3, r2
 801ad44:	e728      	b.n	801ab98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801ad46:	bf00      	nop
 801ad48:	20009774 	.word	0x20009774
 801ad4c:	fffd8f01 	.word	0xfffd8f01
 801ad50:	00027100 	.word	0x00027100
 801ad54:	0004e1ff 	.word	0x0004e1ff
 801ad58:	0004e1fe 	.word	0x0004e1fe
 801ad5c:	2000977c 	.word	0x2000977c
 801ad60:	4613      	mov	r3, r2
 801ad62:	992b      	ldr	r1, [sp, #172]	; 0xac
 801ad64:	9111      	str	r1, [sp, #68]	; 0x44
 801ad66:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801ad6a:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801ad6e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801ad70:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801ad74:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801ad78:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801ad7c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801ad80:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801ad84:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801ad88:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801ad8c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801ad90:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801ad94:	469e      	mov	lr, r3
 801ad96:	469c      	mov	ip, r3
 801ad98:	f04f 0900 	mov.w	r9, #0
 801ad9c:	f1bc 0f00 	cmp.w	ip, #0
 801ada0:	d147      	bne.n	801ae32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801ada2:	eb03 0c07 	add.w	ip, r3, r7
 801ada6:	1ad7      	subs	r7, r2, r3
 801ada8:	f1b9 0f00 	cmp.w	r9, #0
 801adac:	d009      	beq.n	801adc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801adae:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801adb2:	9029      	str	r0, [sp, #164]	; 0xa4
 801adb4:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801adb8:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801adbc:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801adc0:	912d      	str	r1, [sp, #180]	; 0xb4
 801adc2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801adc4:	9111      	str	r1, [sp, #68]	; 0x44
 801adc6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801adca:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801adce:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801add2:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801add6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801adda:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801adde:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801ade2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801ade6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801adea:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801adee:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801adf2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801adf6:	f04f 0800 	mov.w	r8, #0
 801adfa:	f1be 0f00 	cmp.w	lr, #0
 801adfe:	d031      	beq.n	801ae64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801ae00:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ae02:	4431      	add	r1, r6
 801ae04:	4549      	cmp	r1, r9
 801ae06:	4450      	add	r0, sl
 801ae08:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801ae0c:	ee37 7a04 	vadd.f32	s14, s14, s8
 801ae10:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801ae14:	db08      	blt.n	801ae28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801ae16:	ee77 7a85 	vadd.f32	s15, s15, s10
 801ae1a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801ae1e:	ee37 7a06 	vadd.f32	s14, s14, s12
 801ae22:	3001      	adds	r0, #1
 801ae24:	eba1 0109 	sub.w	r1, r1, r9
 801ae28:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ae2c:	f04f 0801 	mov.w	r8, #1
 801ae30:	e7e3      	b.n	801adfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801ae32:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ae34:	4431      	add	r1, r6
 801ae36:	4541      	cmp	r1, r8
 801ae38:	4450      	add	r0, sl
 801ae3a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801ae3e:	ee77 7a84 	vadd.f32	s15, s15, s8
 801ae42:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801ae46:	db08      	blt.n	801ae5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801ae48:	ee76 6a85 	vadd.f32	s13, s13, s10
 801ae4c:	ee37 7a25 	vadd.f32	s14, s14, s11
 801ae50:	ee77 7a86 	vadd.f32	s15, s15, s12
 801ae54:	3001      	adds	r0, #1
 801ae56:	eba1 0108 	sub.w	r1, r1, r8
 801ae5a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ae5e:	f04f 0901 	mov.w	r9, #1
 801ae62:	e79b      	b.n	801ad9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801ae64:	449c      	add	ip, r3
 801ae66:	1aff      	subs	r7, r7, r3
 801ae68:	f1b8 0f00 	cmp.w	r8, #0
 801ae6c:	d009      	beq.n	801ae82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801ae6e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801ae72:	9019      	str	r0, [sp, #100]	; 0x64
 801ae74:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801ae78:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801ae7c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801ae80:	911d      	str	r1, [sp, #116]	; 0x74
 801ae82:	1ad2      	subs	r2, r2, r3
 801ae84:	e68b      	b.n	801ab9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801ae86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae88:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	f000 80d1 	beq.w	801b032 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801ae90:	ad19      	add	r5, sp, #100	; 0x64
 801ae92:	ac39      	add	r4, sp, #228	; 0xe4
 801ae94:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801ae96:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801ae9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ae9e:	930c      	str	r3, [sp, #48]	; 0x30
 801aea0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801aea2:	6963      	ldr	r3, [r4, #20]
 801aea4:	440b      	add	r3, r1
 801aea6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801aeaa:	4408      	add	r0, r1
 801aeac:	b200      	sxth	r0, r0
 801aeae:	4283      	cmp	r3, r0
 801aeb0:	900d      	str	r0, [sp, #52]	; 0x34
 801aeb2:	f280 80c1 	bge.w	801b038 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801aeb6:	428b      	cmp	r3, r1
 801aeb8:	da08      	bge.n	801aecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801aeba:	2a00      	cmp	r2, #0
 801aebc:	dd06      	ble.n	801aecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801aebe:	1acb      	subs	r3, r1, r3
 801aec0:	429a      	cmp	r2, r3
 801aec2:	f2c0 80bb 	blt.w	801b03c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	f300 80b9 	bgt.w	801b03e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801aecc:	6967      	ldr	r7, [r4, #20]
 801aece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aed0:	443b      	add	r3, r7
 801aed2:	461f      	mov	r7, r3
 801aed4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aed6:	1bdf      	subs	r7, r3, r7
 801aed8:	4297      	cmp	r7, r2
 801aeda:	bfa8      	it	ge
 801aedc:	4617      	movge	r7, r2
 801aede:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801aee2:	2f00      	cmp	r7, #0
 801aee4:	f340 813c 	ble.w	801b160 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801aee8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801aeea:	6829      	ldr	r1, [r5, #0]
 801aeec:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aef0:	f9bb 3000 	ldrsh.w	r3, [fp]
 801aef4:	6820      	ldr	r0, [r4, #0]
 801aef6:	4411      	add	r1, r2
 801aef8:	4299      	cmp	r1, r3
 801aefa:	dd1a      	ble.n	801af32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801aefc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801af00:	440b      	add	r3, r1
 801af02:	4402      	add	r2, r0
 801af04:	b21b      	sxth	r3, r3
 801af06:	429a      	cmp	r2, r3
 801af08:	dc13      	bgt.n	801af32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801af0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	9206      	str	r2, [sp, #24]
 801af12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801af14:	9205      	str	r2, [sp, #20]
 801af16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801af18:	9500      	str	r5, [sp, #0]
 801af1a:	e9cd b203 	strd	fp, r2, [sp, #12]
 801af1e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801af20:	9809      	ldr	r0, [sp, #36]	; 0x24
 801af22:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801af26:	a912      	add	r1, sp, #72	; 0x48
 801af28:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801af2c:	aa49      	add	r2, sp, #292	; 0x124
 801af2e:	4623      	mov	r3, r4
 801af30:	47c8      	blx	r9
 801af32:	e9d4 2300 	ldrd	r2, r3, [r4]
 801af36:	441a      	add	r2, r3
 801af38:	6963      	ldr	r3, [r4, #20]
 801af3a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801af3e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801af42:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801af46:	68a1      	ldr	r1, [r4, #8]
 801af48:	ed94 6a08 	vldr	s12, [r4, #32]
 801af4c:	6022      	str	r2, [r4, #0]
 801af4e:	3301      	adds	r3, #1
 801af50:	6163      	str	r3, [r4, #20]
 801af52:	69a3      	ldr	r3, [r4, #24]
 801af54:	ee37 7a27 	vadd.f32	s14, s14, s15
 801af58:	3b01      	subs	r3, #1
 801af5a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801af5e:	61a3      	str	r3, [r4, #24]
 801af60:	6923      	ldr	r3, [r4, #16]
 801af62:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801af66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801af6a:	edd4 6a07 	vldr	s13, [r4, #28]
 801af6e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801af72:	440b      	add	r3, r1
 801af74:	68e1      	ldr	r1, [r4, #12]
 801af76:	6123      	str	r3, [r4, #16]
 801af78:	ee76 6a86 	vadd.f32	s13, s13, s12
 801af7c:	428b      	cmp	r3, r1
 801af7e:	edc4 6a07 	vstr	s13, [r4, #28]
 801af82:	db15      	blt.n	801afb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801af84:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801af88:	ee76 6a26 	vadd.f32	s13, s12, s13
 801af8c:	3201      	adds	r2, #1
 801af8e:	edc4 6a07 	vstr	s13, [r4, #28]
 801af92:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801af96:	6022      	str	r2, [r4, #0]
 801af98:	ee36 7a87 	vadd.f32	s14, s13, s14
 801af9c:	1a5b      	subs	r3, r3, r1
 801af9e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801afa2:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801afa6:	6123      	str	r3, [r4, #16]
 801afa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801afac:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801afb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801afb4:	441a      	add	r2, r3
 801afb6:	696b      	ldr	r3, [r5, #20]
 801afb8:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801afbc:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801afc0:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801afc4:	68a9      	ldr	r1, [r5, #8]
 801afc6:	ed95 6a08 	vldr	s12, [r5, #32]
 801afca:	602a      	str	r2, [r5, #0]
 801afcc:	3301      	adds	r3, #1
 801afce:	616b      	str	r3, [r5, #20]
 801afd0:	69ab      	ldr	r3, [r5, #24]
 801afd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801afd6:	3b01      	subs	r3, #1
 801afd8:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801afdc:	61ab      	str	r3, [r5, #24]
 801afde:	692b      	ldr	r3, [r5, #16]
 801afe0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801afe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801afe8:	edd5 6a07 	vldr	s13, [r5, #28]
 801afec:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801aff0:	440b      	add	r3, r1
 801aff2:	68e9      	ldr	r1, [r5, #12]
 801aff4:	612b      	str	r3, [r5, #16]
 801aff6:	ee76 6a86 	vadd.f32	s13, s13, s12
 801affa:	428b      	cmp	r3, r1
 801affc:	edc5 6a07 	vstr	s13, [r5, #28]
 801b000:	db15      	blt.n	801b02e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801b002:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801b006:	ee76 6a26 	vadd.f32	s13, s12, s13
 801b00a:	3201      	adds	r2, #1
 801b00c:	edc5 6a07 	vstr	s13, [r5, #28]
 801b010:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801b014:	602a      	str	r2, [r5, #0]
 801b016:	ee36 7a87 	vadd.f32	s14, s13, s14
 801b01a:	1a5b      	subs	r3, r3, r1
 801b01c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801b020:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801b024:	612b      	str	r3, [r5, #16]
 801b026:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b02a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801b02e:	3f01      	subs	r7, #1
 801b030:	e757      	b.n	801aee2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801b032:	ad39      	add	r5, sp, #228	; 0xe4
 801b034:	ac19      	add	r4, sp, #100	; 0x64
 801b036:	e72d      	b.n	801ae94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801b038:	4613      	mov	r3, r2
 801b03a:	e744      	b.n	801aec6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801b03c:	4613      	mov	r3, r2
 801b03e:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801b042:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801b044:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801b048:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801b04c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801b050:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801b054:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801b058:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801b05c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801b060:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801b062:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801b066:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801b06a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801b06e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801b072:	960e      	str	r6, [sp, #56]	; 0x38
 801b074:	469e      	mov	lr, r3
 801b076:	461f      	mov	r7, r3
 801b078:	f04f 0900 	mov.w	r9, #0
 801b07c:	2f00      	cmp	r7, #0
 801b07e:	d146      	bne.n	801b10e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801b080:	449c      	add	ip, r3
 801b082:	1ad7      	subs	r7, r2, r3
 801b084:	f1b9 0f00 	cmp.w	r9, #0
 801b088:	d009      	beq.n	801b09e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801b08a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801b08e:	9039      	str	r0, [sp, #228]	; 0xe4
 801b090:	913d      	str	r1, [sp, #244]	; 0xf4
 801b092:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801b096:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801b09a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801b09e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801b0a0:	910e      	str	r1, [sp, #56]	; 0x38
 801b0a2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801b0a6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801b0aa:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801b0ae:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801b0b2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801b0b6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801b0ba:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801b0be:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801b0c2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801b0c6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801b0ca:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801b0ce:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801b0d2:	f04f 0800 	mov.w	r8, #0
 801b0d6:	f1be 0f00 	cmp.w	lr, #0
 801b0da:	d030      	beq.n	801b13e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801b0dc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801b0de:	4431      	add	r1, r6
 801b0e0:	4549      	cmp	r1, r9
 801b0e2:	4450      	add	r0, sl
 801b0e4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801b0e8:	ee37 7a04 	vadd.f32	s14, s14, s8
 801b0ec:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b0f0:	db08      	blt.n	801b104 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801b0f2:	ee77 7a85 	vadd.f32	s15, s15, s10
 801b0f6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801b0fa:	ee37 7a06 	vadd.f32	s14, s14, s12
 801b0fe:	3001      	adds	r0, #1
 801b100:	eba1 0109 	sub.w	r1, r1, r9
 801b104:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b108:	f04f 0801 	mov.w	r8, #1
 801b10c:	e7e3      	b.n	801b0d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801b10e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801b110:	4431      	add	r1, r6
 801b112:	4541      	cmp	r1, r8
 801b114:	4450      	add	r0, sl
 801b116:	ee37 7a24 	vadd.f32	s14, s14, s9
 801b11a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b11e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801b122:	db08      	blt.n	801b136 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801b124:	ee76 6a85 	vadd.f32	s13, s13, s10
 801b128:	ee37 7a25 	vadd.f32	s14, s14, s11
 801b12c:	ee77 7a86 	vadd.f32	s15, s15, s12
 801b130:	3001      	adds	r0, #1
 801b132:	eba1 0108 	sub.w	r1, r1, r8
 801b136:	3f01      	subs	r7, #1
 801b138:	f04f 0901 	mov.w	r9, #1
 801b13c:	e79e      	b.n	801b07c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801b13e:	449c      	add	ip, r3
 801b140:	1aff      	subs	r7, r7, r3
 801b142:	f1b8 0f00 	cmp.w	r8, #0
 801b146:	d009      	beq.n	801b15c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801b148:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801b14c:	9019      	str	r0, [sp, #100]	; 0x64
 801b14e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801b152:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801b156:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801b15a:	911d      	str	r1, [sp, #116]	; 0x74
 801b15c:	1ad2      	subs	r2, r2, r3
 801b15e:	e6b5      	b.n	801aecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801b160:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	b923      	cbnz	r3, 801b170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b166:	4b04      	ldr	r3, [pc, #16]	; (801b178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801b168:	6818      	ldr	r0, [r3, #0]
 801b16a:	6803      	ldr	r3, [r0, #0]
 801b16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b16e:	4798      	blx	r3
 801b170:	b05b      	add	sp, #364	; 0x16c
 801b172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b176:	bf00      	nop
 801b178:	2000977c 	.word	0x2000977c

0801b17c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801b17c:	b570      	push	{r4, r5, r6, lr}
 801b17e:	4604      	mov	r4, r0
 801b180:	2500      	movs	r5, #0
 801b182:	7223      	strb	r3, [r4, #8]
 801b184:	9804      	ldr	r0, [sp, #16]
 801b186:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b18a:	8025      	strh	r5, [r4, #0]
 801b18c:	6061      	str	r1, [r4, #4]
 801b18e:	7263      	strb	r3, [r4, #9]
 801b190:	60e0      	str	r0, [r4, #12]
 801b192:	8222      	strh	r2, [r4, #16]
 801b194:	8265      	strh	r5, [r4, #18]
 801b196:	82a5      	strh	r5, [r4, #20]
 801b198:	82e5      	strh	r5, [r4, #22]
 801b19a:	8325      	strh	r5, [r4, #24]
 801b19c:	8365      	strh	r5, [r4, #26]
 801b19e:	83a5      	strh	r5, [r4, #28]
 801b1a0:	77a5      	strb	r5, [r4, #30]
 801b1a2:	6803      	ldr	r3, [r0, #0]
 801b1a4:	695b      	ldr	r3, [r3, #20]
 801b1a6:	4798      	blx	r3
 801b1a8:	4606      	mov	r6, r0
 801b1aa:	b1f8      	cbz	r0, 801b1ec <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b1ac:	68e0      	ldr	r0, [r4, #12]
 801b1ae:	6803      	ldr	r3, [r0, #0]
 801b1b0:	4631      	mov	r1, r6
 801b1b2:	68db      	ldr	r3, [r3, #12]
 801b1b4:	4798      	blx	r3
 801b1b6:	7b43      	ldrb	r3, [r0, #13]
 801b1b8:	7a82      	ldrb	r2, [r0, #10]
 801b1ba:	005b      	lsls	r3, r3, #1
 801b1bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b1c0:	4313      	orrs	r3, r2
 801b1c2:	83a3      	strh	r3, [r4, #28]
 801b1c4:	7a63      	ldrb	r3, [r4, #9]
 801b1c6:	2b04      	cmp	r3, #4
 801b1c8:	4605      	mov	r5, r0
 801b1ca:	d10f      	bne.n	801b1ec <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b1cc:	68e0      	ldr	r0, [r4, #12]
 801b1ce:	6803      	ldr	r3, [r0, #0]
 801b1d0:	462a      	mov	r2, r5
 801b1d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b1d4:	4631      	mov	r1, r6
 801b1d6:	4798      	blx	r3
 801b1d8:	7b6b      	ldrb	r3, [r5, #13]
 801b1da:	005b      	lsls	r3, r3, #1
 801b1dc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b1e0:	7aab      	ldrb	r3, [r5, #10]
 801b1e2:	4313      	orrs	r3, r2
 801b1e4:	4418      	add	r0, r3
 801b1e6:	8ba3      	ldrh	r3, [r4, #28]
 801b1e8:	4418      	add	r0, r3
 801b1ea:	83a0      	strh	r0, [r4, #28]
 801b1ec:	4620      	mov	r0, r4
 801b1ee:	bd70      	pop	{r4, r5, r6, pc}

0801b1f0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801b1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1f4:	2400      	movs	r4, #0
 801b1f6:	b085      	sub	sp, #20
 801b1f8:	4681      	mov	r9, r0
 801b1fa:	4688      	mov	r8, r1
 801b1fc:	4692      	mov	sl, r2
 801b1fe:	469b      	mov	fp, r3
 801b200:	4627      	mov	r7, r4
 801b202:	4625      	mov	r5, r4
 801b204:	4626      	mov	r6, r4
 801b206:	4554      	cmp	r4, sl
 801b208:	da2a      	bge.n	801b260 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b20a:	2300      	movs	r3, #0
 801b20c:	9303      	str	r3, [sp, #12]
 801b20e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b212:	429d      	cmp	r5, r3
 801b214:	d004      	beq.n	801b220 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801b216:	f242 030b 	movw	r3, #8203	; 0x200b
 801b21a:	429d      	cmp	r5, r3
 801b21c:	bf18      	it	ne
 801b21e:	462f      	movne	r7, r5
 801b220:	ab03      	add	r3, sp, #12
 801b222:	4642      	mov	r2, r8
 801b224:	4659      	mov	r1, fp
 801b226:	4648      	mov	r0, r9
 801b228:	f002 ff70 	bl	801e10c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b22c:	4605      	mov	r5, r0
 801b22e:	b1b8      	cbz	r0, 801b260 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b230:	280a      	cmp	r0, #10
 801b232:	d015      	beq.n	801b260 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b234:	9a03      	ldr	r2, [sp, #12]
 801b236:	b18a      	cbz	r2, 801b25c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801b238:	7b50      	ldrb	r0, [r2, #13]
 801b23a:	7a93      	ldrb	r3, [r2, #10]
 801b23c:	8895      	ldrh	r5, [r2, #4]
 801b23e:	0040      	lsls	r0, r0, #1
 801b240:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b244:	4303      	orrs	r3, r0
 801b246:	9301      	str	r3, [sp, #4]
 801b248:	f8d8 3000 	ldr.w	r3, [r8]
 801b24c:	4639      	mov	r1, r7
 801b24e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b250:	4640      	mov	r0, r8
 801b252:	4798      	blx	r3
 801b254:	9b01      	ldr	r3, [sp, #4]
 801b256:	4418      	add	r0, r3
 801b258:	4406      	add	r6, r0
 801b25a:	b2b6      	uxth	r6, r6
 801b25c:	3401      	adds	r4, #1
 801b25e:	e7d2      	b.n	801b206 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801b260:	4630      	mov	r0, r6
 801b262:	b005      	add	sp, #20
 801b264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b268 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801b268:	2a02      	cmp	r2, #2
 801b26a:	b530      	push	{r4, r5, lr}
 801b26c:	d011      	beq.n	801b292 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801b26e:	2a03      	cmp	r2, #3
 801b270:	d01c      	beq.n	801b2ac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801b272:	2a01      	cmp	r2, #1
 801b274:	d10c      	bne.n	801b290 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b276:	888b      	ldrh	r3, [r1, #4]
 801b278:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801b27c:	8801      	ldrh	r1, [r0, #0]
 801b27e:	8844      	ldrh	r4, [r0, #2]
 801b280:	8004      	strh	r4, [r0, #0]
 801b282:	1a9b      	subs	r3, r3, r2
 801b284:	1a5b      	subs	r3, r3, r1
 801b286:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b28a:	8043      	strh	r3, [r0, #2]
 801b28c:	8081      	strh	r1, [r0, #4]
 801b28e:	80c2      	strh	r2, [r0, #6]
 801b290:	bd30      	pop	{r4, r5, pc}
 801b292:	88cb      	ldrh	r3, [r1, #6]
 801b294:	88c2      	ldrh	r2, [r0, #6]
 801b296:	1a9b      	subs	r3, r3, r2
 801b298:	8842      	ldrh	r2, [r0, #2]
 801b29a:	1a9b      	subs	r3, r3, r2
 801b29c:	888a      	ldrh	r2, [r1, #4]
 801b29e:	8881      	ldrh	r1, [r0, #4]
 801b2a0:	8043      	strh	r3, [r0, #2]
 801b2a2:	1a52      	subs	r2, r2, r1
 801b2a4:	8801      	ldrh	r1, [r0, #0]
 801b2a6:	1a52      	subs	r2, r2, r1
 801b2a8:	8002      	strh	r2, [r0, #0]
 801b2aa:	e7f1      	b.n	801b290 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b2ac:	88cb      	ldrh	r3, [r1, #6]
 801b2ae:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801b2b2:	8841      	ldrh	r1, [r0, #2]
 801b2b4:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b2b8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801b2bc:	8045      	strh	r5, [r0, #2]
 801b2be:	1a9b      	subs	r3, r3, r2
 801b2c0:	1a5b      	subs	r3, r3, r1
 801b2c2:	8003      	strh	r3, [r0, #0]
 801b2c4:	8082      	strh	r2, [r0, #4]
 801b2c6:	80c4      	strh	r4, [r0, #6]
 801b2c8:	e7e2      	b.n	801b290 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801b2ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801b2ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2ce:	b09f      	sub	sp, #124	; 0x7c
 801b2d0:	9116      	str	r1, [sp, #88]	; 0x58
 801b2d2:	9317      	str	r3, [sp, #92]	; 0x5c
 801b2d4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b2d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b2d8:	8809      	ldrh	r1, [r1, #0]
 801b2da:	889b      	ldrh	r3, [r3, #4]
 801b2dc:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801b2e0:	9212      	str	r2, [sp, #72]	; 0x48
 801b2e2:	440b      	add	r3, r1
 801b2e4:	b21b      	sxth	r3, r3
 801b2e6:	9310      	str	r3, [sp, #64]	; 0x40
 801b2e8:	f8d8 3000 	ldr.w	r3, [r8]
 801b2ec:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801b2f0:	7a59      	ldrb	r1, [r3, #9]
 801b2f2:	7a1b      	ldrb	r3, [r3, #8]
 801b2f4:	9315      	str	r3, [sp, #84]	; 0x54
 801b2f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b2f8:	9011      	str	r0, [sp, #68]	; 0x44
 801b2fa:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801b2fe:	9114      	str	r1, [sp, #80]	; 0x50
 801b300:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b304:	2a00      	cmp	r2, #0
 801b306:	d067      	beq.n	801b3d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801b308:	f898 3010 	ldrb.w	r3, [r8, #16]
 801b30c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801b30e:	2b04      	cmp	r3, #4
 801b310:	bf14      	ite	ne
 801b312:	2301      	movne	r3, #1
 801b314:	2302      	moveq	r3, #2
 801b316:	4413      	add	r3, r2
 801b318:	f04f 0900 	mov.w	r9, #0
 801b31c:	930f      	str	r3, [sp, #60]	; 0x3c
 801b31e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801b322:	464c      	mov	r4, r9
 801b324:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801b328:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801b32c:	4293      	cmp	r3, r2
 801b32e:	f280 808c 	bge.w	801b44a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801b332:	2300      	movs	r3, #0
 801b334:	931c      	str	r3, [sp, #112]	; 0x70
 801b336:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b33a:	429c      	cmp	r4, r3
 801b33c:	d006      	beq.n	801b34c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801b33e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b340:	f242 020b 	movw	r2, #8203	; 0x200b
 801b344:	4294      	cmp	r4, r2
 801b346:	bf18      	it	ne
 801b348:	4623      	movne	r3, r4
 801b34a:	930d      	str	r3, [sp, #52]	; 0x34
 801b34c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b34e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801b350:	f8d8 2000 	ldr.w	r2, [r8]
 801b354:	428b      	cmp	r3, r1
 801b356:	db41      	blt.n	801b3dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801b358:	6813      	ldr	r3, [r2, #0]
 801b35a:	4610      	mov	r0, r2
 801b35c:	695b      	ldr	r3, [r3, #20]
 801b35e:	4798      	blx	r3
 801b360:	4604      	mov	r4, r0
 801b362:	f8d8 0000 	ldr.w	r0, [r8]
 801b366:	6803      	ldr	r3, [r0, #0]
 801b368:	aa1d      	add	r2, sp, #116	; 0x74
 801b36a:	689e      	ldr	r6, [r3, #8]
 801b36c:	4621      	mov	r1, r4
 801b36e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801b372:	47b0      	blx	r6
 801b374:	901c      	str	r0, [sp, #112]	; 0x70
 801b376:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b37a:	429c      	cmp	r4, r3
 801b37c:	f000 80e9 	beq.w	801b552 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b380:	f242 030b 	movw	r3, #8203	; 0x200b
 801b384:	429c      	cmp	r4, r3
 801b386:	f000 80e4 	beq.w	801b552 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b38a:	2c00      	cmp	r4, #0
 801b38c:	f000 80f6 	beq.w	801b57c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801b390:	2c0a      	cmp	r4, #10
 801b392:	d060      	beq.n	801b456 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801b394:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b396:	b36a      	cbz	r2, 801b3f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801b398:	8894      	ldrh	r4, [r2, #4]
 801b39a:	f1bb 0f00 	cmp.w	fp, #0
 801b39e:	d03b      	beq.n	801b418 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801b3a0:	f892 900d 	ldrb.w	r9, [r2, #13]
 801b3a4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801b3a8:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801b3ac:	f892 900a 	ldrb.w	r9, [r2, #10]
 801b3b0:	f1bb 0f01 	cmp.w	fp, #1
 801b3b4:	ea49 0903 	orr.w	r9, r9, r3
 801b3b8:	d134      	bne.n	801b424 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801b3ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b3bc:	eba5 0509 	sub.w	r5, r5, r9
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	d14f      	bne.n	801b464 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801b3c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b3c6:	eb09 0305 	add.w	r3, r9, r5
 801b3ca:	4413      	add	r3, r2
 801b3cc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b3ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b3d2:	4293      	cmp	r3, r2
 801b3d4:	da51      	bge.n	801b47a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801b3d6:	e038      	b.n	801b44a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801b3d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b3da:	e79d      	b.n	801b318 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801b3dc:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801b3e0:	9301      	str	r3, [sp, #4]
 801b3e2:	ab1d      	add	r3, sp, #116	; 0x74
 801b3e4:	9300      	str	r3, [sp, #0]
 801b3e6:	4659      	mov	r1, fp
 801b3e8:	ab1c      	add	r3, sp, #112	; 0x70
 801b3ea:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b3ec:	f002 fee6 	bl	801e1bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801b3f0:	4604      	mov	r4, r0
 801b3f2:	e7c0      	b.n	801b376 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801b3f4:	f8d8 0000 	ldr.w	r0, [r8]
 801b3f8:	6803      	ldr	r3, [r0, #0]
 801b3fa:	691b      	ldr	r3, [r3, #16]
 801b3fc:	4798      	blx	r3
 801b3fe:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b402:	4298      	cmp	r0, r3
 801b404:	f000 80a5 	beq.w	801b552 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b408:	f242 030b 	movw	r3, #8203	; 0x200b
 801b40c:	4298      	cmp	r0, r3
 801b40e:	f000 80a0 	beq.w	801b552 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b412:	f1bb 0f00 	cmp.w	fp, #0
 801b416:	d100      	bne.n	801b41a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801b418:	444d      	add	r5, r9
 801b41a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b41c:	2a00      	cmp	r2, #0
 801b41e:	d1bf      	bne.n	801b3a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801b420:	4691      	mov	r9, r2
 801b422:	e096      	b.n	801b552 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b426:	2b00      	cmp	r3, #0
 801b428:	f000 80aa 	beq.w	801b580 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801b42c:	f1bb 0f00 	cmp.w	fp, #0
 801b430:	d118      	bne.n	801b464 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801b432:	f8d8 0000 	ldr.w	r0, [r8]
 801b436:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b438:	6803      	ldr	r3, [r0, #0]
 801b43a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b43c:	4798      	blx	r3
 801b43e:	4405      	add	r5, r0
 801b440:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b442:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b444:	1aeb      	subs	r3, r5, r3
 801b446:	4293      	cmp	r3, r2
 801b448:	dd17      	ble.n	801b47a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801b44a:	2c00      	cmp	r4, #0
 801b44c:	f000 8096 	beq.w	801b57c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801b450:	2c0a      	cmp	r4, #10
 801b452:	f040 8084 	bne.w	801b55e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 801b456:	240a      	movs	r4, #10
 801b458:	fab4 f084 	clz	r0, r4
 801b45c:	0940      	lsrs	r0, r0, #5
 801b45e:	b01f      	add	sp, #124	; 0x7c
 801b460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b464:	f8d8 0000 	ldr.w	r0, [r8]
 801b468:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b46a:	6803      	ldr	r3, [r0, #0]
 801b46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b46e:	4798      	blx	r3
 801b470:	f1bb 0f01 	cmp.w	fp, #1
 801b474:	eba5 0500 	sub.w	r5, r5, r0
 801b478:	d0a4      	beq.n	801b3c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801b47a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b47c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b47e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801b482:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b486:	7b43      	ldrb	r3, [r0, #13]
 801b488:	015b      	lsls	r3, r3, #5
 801b48a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b48e:	7983      	ldrb	r3, [r0, #6]
 801b490:	4429      	add	r1, r5
 801b492:	4313      	orrs	r3, r2
 801b494:	440b      	add	r3, r1
 801b496:	42b3      	cmp	r3, r6
 801b498:	db5b      	blt.n	801b552 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b49a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b49c:	4299      	cmp	r1, r3
 801b49e:	da58      	bge.n	801b552 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b4a0:	f8d8 0000 	ldr.w	r0, [r8]
 801b4a4:	6803      	ldr	r3, [r0, #0]
 801b4a6:	42ae      	cmp	r6, r5
 801b4a8:	bfc8      	it	gt
 801b4aa:	1b76      	subgt	r6, r6, r5
 801b4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4ae:	bfcc      	ite	gt
 801b4b0:	b2b6      	uxthgt	r6, r6
 801b4b2:	2600      	movle	r6, #0
 801b4b4:	4798      	blx	r3
 801b4b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b4b8:	7b5a      	ldrb	r2, [r3, #13]
 801b4ba:	00d1      	lsls	r1, r2, #3
 801b4bc:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801b4c0:	7a19      	ldrb	r1, [r3, #8]
 801b4c2:	4339      	orrs	r1, r7
 801b4c4:	0657      	lsls	r7, r2, #25
 801b4c6:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801b4c8:	bf44      	itt	mi
 801b4ca:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801b4ce:	b209      	sxthmi	r1, r1
 801b4d0:	19c7      	adds	r7, r0, r7
 801b4d2:	1a7f      	subs	r7, r7, r1
 801b4d4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b4d6:	b2bf      	uxth	r7, r7
 801b4d8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801b4dc:	fa0f fa87 	sxth.w	sl, r7
 801b4e0:	4551      	cmp	r1, sl
 801b4e2:	dd3a      	ble.n	801b55a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801b4e4:	0112      	lsls	r2, r2, #4
 801b4e6:	79d8      	ldrb	r0, [r3, #7]
 801b4e8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b4ec:	4302      	orrs	r2, r0
 801b4ee:	4492      	add	sl, r2
 801b4f0:	4551      	cmp	r1, sl
 801b4f2:	dc2e      	bgt.n	801b552 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b4f4:	1bcf      	subs	r7, r1, r7
 801b4f6:	b2bf      	uxth	r7, r7
 801b4f8:	468a      	mov	sl, r1
 801b4fa:	9319      	str	r3, [sp, #100]	; 0x64
 801b4fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b4fe:	f8d8 0000 	ldr.w	r0, [r8]
 801b502:	681a      	ldr	r2, [r3, #0]
 801b504:	6801      	ldr	r1, [r0, #0]
 801b506:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801b508:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b50a:	9313      	str	r3, [sp, #76]	; 0x4c
 801b50c:	9218      	str	r2, [sp, #96]	; 0x60
 801b50e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801b510:	4788      	blx	r1
 801b512:	f898 1006 	ldrb.w	r1, [r8, #6]
 801b516:	910b      	str	r1, [sp, #44]	; 0x2c
 801b518:	f898 100e 	ldrb.w	r1, [r8, #14]
 801b51c:	910a      	str	r1, [sp, #40]	; 0x28
 801b51e:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801b522:	9109      	str	r1, [sp, #36]	; 0x24
 801b524:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b526:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801b52a:	9305      	str	r3, [sp, #20]
 801b52c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b52e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b530:	9206      	str	r2, [sp, #24]
 801b532:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801b536:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801b53a:	e9cd a601 	strd	sl, r6, [sp, #4]
 801b53e:	442e      	add	r6, r5
 801b540:	b236      	sxth	r6, r6
 801b542:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b544:	9600      	str	r6, [sp, #0]
 801b546:	681a      	ldr	r2, [r3, #0]
 801b548:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b54a:	685b      	ldr	r3, [r3, #4]
 801b54c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b54e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b550:	47b0      	blx	r6
 801b552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b554:	3301      	adds	r3, #1
 801b556:	930e      	str	r3, [sp, #56]	; 0x38
 801b558:	e6e6      	b.n	801b328 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801b55a:	2700      	movs	r7, #0
 801b55c:	e7cd      	b.n	801b4fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 801b55e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b560:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b562:	3501      	adds	r5, #1
 801b564:	429d      	cmp	r5, r3
 801b566:	f6bf af77 	bge.w	801b458 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801b56a:	4659      	mov	r1, fp
 801b56c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b56e:	f7f8 feb7 	bl	80142e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b572:	4604      	mov	r4, r0
 801b574:	b110      	cbz	r0, 801b57c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801b576:	280a      	cmp	r0, #10
 801b578:	d1f2      	bne.n	801b560 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801b57a:	e76c      	b.n	801b456 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801b57c:	2400      	movs	r4, #0
 801b57e:	e76b      	b.n	801b458 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801b580:	f1bb 0f00 	cmp.w	fp, #0
 801b584:	f43f af5c 	beq.w	801b440 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801b588:	e777      	b.n	801b47a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801b58a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801b58a:	b530      	push	{r4, r5, lr}
 801b58c:	8a44      	ldrh	r4, [r0, #18]
 801b58e:	8ac5      	ldrh	r5, [r0, #22]
 801b590:	82c3      	strh	r3, [r0, #22]
 801b592:	442c      	add	r4, r5
 801b594:	1ae4      	subs	r4, r4, r3
 801b596:	8244      	strh	r4, [r0, #18]
 801b598:	8b03      	ldrh	r3, [r0, #24]
 801b59a:	8a84      	ldrh	r4, [r0, #20]
 801b59c:	4422      	add	r2, r4
 801b59e:	440c      	add	r4, r1
 801b5a0:	1a59      	subs	r1, r3, r1
 801b5a2:	8342      	strh	r2, [r0, #26]
 801b5a4:	8284      	strh	r4, [r0, #20]
 801b5a6:	8301      	strh	r1, [r0, #24]
 801b5a8:	bd30      	pop	{r4, r5, pc}

0801b5aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801b5aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5ae:	7a43      	ldrb	r3, [r0, #9]
 801b5b0:	1eda      	subs	r2, r3, #3
 801b5b2:	b087      	sub	sp, #28
 801b5b4:	4604      	mov	r4, r0
 801b5b6:	b2d2      	uxtb	r2, r2
 801b5b8:	460f      	mov	r7, r1
 801b5ba:	2900      	cmp	r1, #0
 801b5bc:	d036      	beq.n	801b62c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801b5be:	2a01      	cmp	r2, #1
 801b5c0:	d932      	bls.n	801b628 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801b5c2:	1e58      	subs	r0, r3, #1
 801b5c4:	f1d0 0b00 	rsbs	fp, r0, #0
 801b5c8:	eb4b 0b00 	adc.w	fp, fp, r0
 801b5cc:	1e99      	subs	r1, r3, #2
 801b5ce:	424b      	negs	r3, r1
 801b5d0:	414b      	adcs	r3, r1
 801b5d2:	9303      	str	r3, [sp, #12]
 801b5d4:	2300      	movs	r3, #0
 801b5d6:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801b5da:	2500      	movs	r5, #0
 801b5dc:	8265      	strh	r5, [r4, #18]
 801b5de:	82a5      	strh	r5, [r4, #20]
 801b5e0:	46a9      	mov	r9, r5
 801b5e2:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	9305      	str	r3, [sp, #20]
 801b5ea:	8823      	ldrh	r3, [r4, #0]
 801b5ec:	2b20      	cmp	r3, #32
 801b5ee:	d02b      	beq.n	801b648 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801b5f0:	eba3 020a 	sub.w	r2, r3, sl
 801b5f4:	4256      	negs	r6, r2
 801b5f6:	4156      	adcs	r6, r2
 801b5f8:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b5fc:	4293      	cmp	r3, r2
 801b5fe:	d004      	beq.n	801b60a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b600:	4553      	cmp	r3, sl
 801b602:	bf16      	itet	ne
 801b604:	4699      	movne	r9, r3
 801b606:	2601      	moveq	r6, #1
 801b608:	2600      	movne	r6, #0
 801b60a:	ab05      	add	r3, sp, #20
 801b60c:	68e2      	ldr	r2, [r4, #12]
 801b60e:	7a21      	ldrb	r1, [r4, #8]
 801b610:	6860      	ldr	r0, [r4, #4]
 801b612:	f002 fd7b 	bl	801e10c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b616:	8020      	strh	r0, [r4, #0]
 801b618:	b9c8      	cbnz	r0, 801b64e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801b61a:	8b22      	ldrh	r2, [r4, #24]
 801b61c:	2300      	movs	r3, #0
 801b61e:	4611      	mov	r1, r2
 801b620:	4620      	mov	r0, r4
 801b622:	f7ff ffb2 	bl	801b58a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b626:	e066      	b.n	801b6f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b628:	468b      	mov	fp, r1
 801b62a:	e7cf      	b.n	801b5cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801b62c:	3b01      	subs	r3, #1
 801b62e:	2a01      	cmp	r2, #1
 801b630:	bf8c      	ite	hi
 801b632:	2200      	movhi	r2, #0
 801b634:	2201      	movls	r2, #1
 801b636:	2b01      	cmp	r3, #1
 801b638:	bf8c      	ite	hi
 801b63a:	2300      	movhi	r3, #0
 801b63c:	2301      	movls	r3, #1
 801b63e:	9202      	str	r2, [sp, #8]
 801b640:	9301      	str	r3, [sp, #4]
 801b642:	9103      	str	r1, [sp, #12]
 801b644:	468b      	mov	fp, r1
 801b646:	e7c8      	b.n	801b5da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801b648:	4699      	mov	r9, r3
 801b64a:	2601      	movs	r6, #1
 801b64c:	e7dd      	b.n	801b60a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b64e:	8ae3      	ldrh	r3, [r4, #22]
 801b650:	280a      	cmp	r0, #10
 801b652:	f103 0301 	add.w	r3, r3, #1
 801b656:	82e3      	strh	r3, [r4, #22]
 801b658:	d0df      	beq.n	801b61a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801b65a:	9a05      	ldr	r2, [sp, #20]
 801b65c:	bb42      	cbnz	r2, 801b6b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801b65e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b662:	4298      	cmp	r0, r3
 801b664:	d001      	beq.n	801b66a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801b666:	4550      	cmp	r0, sl
 801b668:	d1bd      	bne.n	801b5e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b66a:	8823      	ldrh	r3, [r4, #0]
 801b66c:	8b21      	ldrh	r1, [r4, #24]
 801b66e:	2b20      	cmp	r3, #32
 801b670:	d001      	beq.n	801b676 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801b672:	4553      	cmp	r3, sl
 801b674:	d131      	bne.n	801b6da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801b676:	2e00      	cmp	r6, #0
 801b678:	bf0a      	itet	eq
 801b67a:	460d      	moveq	r5, r1
 801b67c:	4630      	movne	r0, r6
 801b67e:	2001      	moveq	r0, #1
 801b680:	440a      	add	r2, r1
 801b682:	8aa3      	ldrh	r3, [r4, #20]
 801b684:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801b688:	b292      	uxth	r2, r2
 801b68a:	8322      	strh	r2, [r4, #24]
 801b68c:	4413      	add	r3, r2
 801b68e:	2f00      	cmp	r7, #0
 801b690:	d03a      	beq.n	801b708 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801b692:	f1bb 0f00 	cmp.w	fp, #0
 801b696:	d102      	bne.n	801b69e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801b698:	9903      	ldr	r1, [sp, #12]
 801b69a:	b301      	cbz	r1, 801b6de <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b69c:	b1f8      	cbz	r0, 801b6de <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b69e:	8ba1      	ldrh	r1, [r4, #28]
 801b6a0:	4419      	add	r1, r3
 801b6a2:	458c      	cmp	ip, r1
 801b6a4:	da2a      	bge.n	801b6fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b6a6:	8a61      	ldrh	r1, [r4, #18]
 801b6a8:	b341      	cbz	r1, 801b6fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b6aa:	4563      	cmp	r3, ip
 801b6ac:	dd9b      	ble.n	801b5e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b6ae:	e01c      	b.n	801b6ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801b6b0:	8893      	ldrh	r3, [r2, #4]
 801b6b2:	8023      	strh	r3, [r4, #0]
 801b6b4:	f892 800d 	ldrb.w	r8, [r2, #13]
 801b6b8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801b6bc:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801b6c0:	f892 800a 	ldrb.w	r8, [r2, #10]
 801b6c4:	ea48 0800 	orr.w	r8, r8, r0
 801b6c8:	68e0      	ldr	r0, [r4, #12]
 801b6ca:	6803      	ldr	r3, [r0, #0]
 801b6cc:	4649      	mov	r1, r9
 801b6ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b6d0:	4798      	blx	r3
 801b6d2:	eb08 0200 	add.w	r2, r8, r0
 801b6d6:	b292      	uxth	r2, r2
 801b6d8:	e7c7      	b.n	801b66a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801b6da:	2000      	movs	r0, #0
 801b6dc:	e7d0      	b.n	801b680 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801b6de:	4563      	cmp	r3, ip
 801b6e0:	dd81      	ble.n	801b5e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b6e2:	8a63      	ldrh	r3, [r4, #18]
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	f43f af7e 	beq.w	801b5e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b6ea:	2301      	movs	r3, #1
 801b6ec:	77a3      	strb	r3, [r4, #30]
 801b6ee:	8ba2      	ldrh	r2, [r4, #28]
 801b6f0:	8b63      	ldrh	r3, [r4, #26]
 801b6f2:	4413      	add	r3, r2
 801b6f4:	8363      	strh	r3, [r4, #26]
 801b6f6:	b007      	add	sp, #28
 801b6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6fc:	2300      	movs	r3, #0
 801b6fe:	4611      	mov	r1, r2
 801b700:	4620      	mov	r0, r4
 801b702:	f7ff ff42 	bl	801b58a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b706:	e76e      	b.n	801b5e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b708:	4563      	cmp	r3, ip
 801b70a:	dd14      	ble.n	801b736 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801b70c:	9b02      	ldr	r3, [sp, #8]
 801b70e:	b113      	cbz	r3, 801b716 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801b710:	2301      	movs	r3, #1
 801b712:	460a      	mov	r2, r1
 801b714:	e783      	b.n	801b61e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801b716:	9b01      	ldr	r3, [sp, #4]
 801b718:	2b00      	cmp	r3, #0
 801b71a:	f43f af64 	beq.w	801b5e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b71e:	2800      	cmp	r0, #0
 801b720:	f47f af61 	bne.w	801b5e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b724:	b116      	cbz	r6, 801b72c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801b726:	2301      	movs	r3, #1
 801b728:	462a      	mov	r2, r5
 801b72a:	e779      	b.n	801b620 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801b72c:	8a63      	ldrh	r3, [r4, #18]
 801b72e:	2b00      	cmp	r3, #0
 801b730:	f43f af59 	beq.w	801b5e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b734:	e7df      	b.n	801b6f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b736:	2800      	cmp	r0, #0
 801b738:	f47f af55 	bne.w	801b5e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b73c:	2e00      	cmp	r6, #0
 801b73e:	f43f af52 	beq.w	801b5e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b742:	2301      	movs	r3, #1
 801b744:	462a      	mov	r2, r5
 801b746:	e7db      	b.n	801b700 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801b748 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801b748:	b530      	push	{r4, r5, lr}
 801b74a:	4605      	mov	r5, r0
 801b74c:	b08b      	sub	sp, #44	; 0x2c
 801b74e:	b191      	cbz	r1, 801b776 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801b750:	e9cd 3100 	strd	r3, r1, [sp]
 801b754:	4613      	mov	r3, r2
 801b756:	4601      	mov	r1, r0
 801b758:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801b75c:	a802      	add	r0, sp, #8
 801b75e:	f7ff fd0d 	bl	801b17c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b762:	2401      	movs	r4, #1
 801b764:	2100      	movs	r1, #0
 801b766:	a802      	add	r0, sp, #8
 801b768:	f7ff ff1f 	bl	801b5aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b76c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b770:	b163      	cbz	r3, 801b78c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801b772:	3401      	adds	r4, #1
 801b774:	e7f6      	b.n	801b764 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801b776:	f002 fdc3 	bl	801e300 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b77a:	2401      	movs	r4, #1
 801b77c:	280a      	cmp	r0, #10
 801b77e:	4628      	mov	r0, r5
 801b780:	bf08      	it	eq
 801b782:	3401      	addeq	r4, #1
 801b784:	f002 fdbc 	bl	801e300 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b788:	2800      	cmp	r0, #0
 801b78a:	d1f7      	bne.n	801b77c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801b78c:	b2a0      	uxth	r0, r4
 801b78e:	b00b      	add	sp, #44	; 0x2c
 801b790:	bd30      	pop	{r4, r5, pc}

0801b792 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801b792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b796:	b0e5      	sub	sp, #404	; 0x194
 801b798:	4689      	mov	r9, r1
 801b79a:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801b79e:	900a      	str	r0, [sp, #40]	; 0x28
 801b7a0:	461c      	mov	r4, r3
 801b7a2:	f1ba 0f00 	cmp.w	sl, #0
 801b7a6:	f000 80b4 	beq.w	801b912 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	f000 80b0 	beq.w	801b912 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b7b2:	7ba3      	ldrb	r3, [r4, #14]
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	f000 80ac 	beq.w	801b912 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b7ba:	6810      	ldr	r0, [r2, #0]
 801b7bc:	6851      	ldr	r1, [r2, #4]
 801b7be:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801b7c2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801b7c6:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801b7ca:	4643      	mov	r3, r8
 801b7cc:	c303      	stmia	r3!, {r0, r1}
 801b7ce:	2500      	movs	r5, #0
 801b7d0:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801b7d4:	79a2      	ldrb	r2, [r4, #6]
 801b7d6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b7da:	a90f      	add	r1, sp, #60	; 0x3c
 801b7dc:	4640      	mov	r0, r8
 801b7de:	950f      	str	r5, [sp, #60]	; 0x3c
 801b7e0:	f7ff fd42 	bl	801b268 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b7e4:	a90f      	add	r1, sp, #60	; 0x3c
 801b7e6:	4608      	mov	r0, r1
 801b7e8:	79a2      	ldrb	r2, [r4, #6]
 801b7ea:	af19      	add	r7, sp, #100	; 0x64
 801b7ec:	f7ff fd3c 	bl	801b268 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b7f0:	4638      	mov	r0, r7
 801b7f2:	f002 f938 	bl	801da66 <_ZN8touchgfx12TextProviderC1Ev>
 801b7f6:	6820      	ldr	r0, [r4, #0]
 801b7f8:	6803      	ldr	r3, [r0, #0]
 801b7fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b7fc:	4798      	blx	r3
 801b7fe:	4606      	mov	r6, r0
 801b800:	6820      	ldr	r0, [r4, #0]
 801b802:	6803      	ldr	r3, [r0, #0]
 801b804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b806:	4798      	blx	r3
 801b808:	4633      	mov	r3, r6
 801b80a:	9000      	str	r0, [sp, #0]
 801b80c:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801b80e:	4651      	mov	r1, sl
 801b810:	4638      	mov	r0, r7
 801b812:	f002 f97b 	bl	801db0c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b816:	6820      	ldr	r0, [r4, #0]
 801b818:	7923      	ldrb	r3, [r4, #4]
 801b81a:	9308      	str	r3, [sp, #32]
 801b81c:	6803      	ldr	r3, [r0, #0]
 801b81e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b820:	4798      	blx	r3
 801b822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b826:	181e      	adds	r6, r3, r0
 801b828:	42ae      	cmp	r6, r5
 801b82a:	dd06      	ble.n	801b83a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801b82c:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801b830:	4282      	cmp	r2, r0
 801b832:	bfa4      	itt	ge
 801b834:	189d      	addge	r5, r3, r2
 801b836:	fb95 f5f6 	sdivge	r5, r5, r6
 801b83a:	a832      	add	r0, sp, #200	; 0xc8
 801b83c:	f002 f913 	bl	801da66 <_ZN8touchgfx12TextProviderC1Ev>
 801b840:	7c23      	ldrb	r3, [r4, #16]
 801b842:	b17b      	cbz	r3, 801b864 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801b844:	6820      	ldr	r0, [r4, #0]
 801b846:	6803      	ldr	r3, [r0, #0]
 801b848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b84a:	4798      	blx	r3
 801b84c:	4683      	mov	fp, r0
 801b84e:	6820      	ldr	r0, [r4, #0]
 801b850:	6803      	ldr	r3, [r0, #0]
 801b852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b854:	4798      	blx	r3
 801b856:	465b      	mov	r3, fp
 801b858:	9000      	str	r0, [sp, #0]
 801b85a:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801b85c:	4651      	mov	r1, sl
 801b85e:	a832      	add	r0, sp, #200	; 0xc8
 801b860:	f002 f954 	bl	801db0c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b864:	7be1      	ldrb	r1, [r4, #15]
 801b866:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801b86a:	7963      	ldrb	r3, [r4, #5]
 801b86c:	1a52      	subs	r2, r2, r1
 801b86e:	7c21      	ldrb	r1, [r4, #16]
 801b870:	9101      	str	r1, [sp, #4]
 801b872:	6821      	ldr	r1, [r4, #0]
 801b874:	9100      	str	r1, [sp, #0]
 801b876:	b292      	uxth	r2, r2
 801b878:	a932      	add	r1, sp, #200	; 0xc8
 801b87a:	a811      	add	r0, sp, #68	; 0x44
 801b87c:	f7ff fc7e 	bl	801b17c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b880:	7c23      	ldrb	r3, [r4, #16]
 801b882:	b9bb      	cbnz	r3, 801b8b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801b884:	fa1f fa86 	uxth.w	sl, r6
 801b888:	2d00      	cmp	r5, #0
 801b88a:	dd45      	ble.n	801b918 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801b88c:	4638      	mov	r0, r7
 801b88e:	f002 fd37 	bl	801e300 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b892:	2800      	cmp	r0, #0
 801b894:	d03d      	beq.n	801b912 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b896:	280a      	cmp	r0, #10
 801b898:	d1f6      	bne.n	801b888 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801b89a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b89e:	4453      	add	r3, sl
 801b8a0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b8a4:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801b8a8:	eba3 030a 	sub.w	r3, r3, sl
 801b8ac:	3d01      	subs	r5, #1
 801b8ae:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b8b2:	e7e9      	b.n	801b888 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801b8b4:	0073      	lsls	r3, r6, #1
 801b8b6:	9309      	str	r3, [sp, #36]	; 0x24
 801b8b8:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801b8bc:	fa1f fa86 	uxth.w	sl, r6
 801b8c0:	2d00      	cmp	r5, #0
 801b8c2:	dd29      	ble.n	801b918 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801b8c4:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801b8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8ca:	428b      	cmp	r3, r1
 801b8cc:	bfd4      	ite	le
 801b8ce:	2100      	movle	r1, #0
 801b8d0:	2101      	movgt	r1, #1
 801b8d2:	a811      	add	r0, sp, #68	; 0x44
 801b8d4:	f7ff fe69 	bl	801b5aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b8d8:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801b8dc:	3b01      	subs	r3, #1
 801b8de:	b29b      	uxth	r3, r3
 801b8e0:	455b      	cmp	r3, fp
 801b8e2:	930b      	str	r3, [sp, #44]	; 0x2c
 801b8e4:	d005      	beq.n	801b8f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801b8e6:	7961      	ldrb	r1, [r4, #5]
 801b8e8:	4638      	mov	r0, r7
 801b8ea:	f7f8 fcf9 	bl	80142e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b8ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b8f0:	e7f4      	b.n	801b8dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801b8f2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b8f6:	4453      	add	r3, sl
 801b8f8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b8fc:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801b900:	eba3 030a 	sub.w	r3, r3, sl
 801b904:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b908:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b90c:	3d01      	subs	r5, #1
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d1d6      	bne.n	801b8c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801b912:	b065      	add	sp, #404	; 0x194
 801b914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b918:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801b91c:	ad4b      	add	r5, sp, #300	; 0x12c
 801b91e:	f04f 0b00 	mov.w	fp, #0
 801b922:	7c23      	ldrb	r3, [r4, #16]
 801b924:	2b00      	cmp	r3, #0
 801b926:	d067      	beq.n	801b9f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801b928:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801b92c:	458a      	cmp	sl, r1
 801b92e:	bfd4      	ite	le
 801b930:	2100      	movle	r1, #0
 801b932:	2101      	movgt	r1, #1
 801b934:	a811      	add	r0, sp, #68	; 0x44
 801b936:	f7ff fe38 	bl	801b5aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b93a:	9b08      	ldr	r3, [sp, #32]
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	d056      	beq.n	801b9ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801b940:	7c23      	ldrb	r3, [r4, #16]
 801b942:	9309      	str	r3, [sp, #36]	; 0x24
 801b944:	2264      	movs	r2, #100	; 0x64
 801b946:	4639      	mov	r1, r7
 801b948:	4628      	mov	r0, r5
 801b94a:	f012 fc39 	bl	802e1c0 <memcpy>
 801b94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b950:	2b00      	cmp	r3, #0
 801b952:	d059      	beq.n	801ba08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 801b954:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801b958:	7922      	ldrb	r2, [r4, #4]
 801b95a:	2a01      	cmp	r2, #1
 801b95c:	d13d      	bne.n	801b9da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801b95e:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801b962:	1ac0      	subs	r0, r0, r3
 801b964:	2302      	movs	r3, #2
 801b966:	fb90 f0f3 	sdiv	r0, r0, r3
 801b96a:	b200      	sxth	r0, r0
 801b96c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801b970:	4418      	add	r0, r3
 801b972:	7c23      	ldrb	r3, [r4, #16]
 801b974:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 801b978:	2b00      	cmp	r3, #0
 801b97a:	d03a      	beq.n	801b9f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801b97c:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801b980:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801b984:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801b988:	9500      	str	r5, [sp, #0]
 801b98a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801b98e:	e9cd b703 	strd	fp, r7, [sp, #12]
 801b992:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801b996:	464a      	mov	r2, r9
 801b998:	2100      	movs	r1, #0
 801b99a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b99c:	f7ff fc95 	bl	801b2ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801b9a0:	2800      	cmp	r0, #0
 801b9a2:	d1b6      	bne.n	801b912 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b9a4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b9a8:	b2b2      	uxth	r2, r6
 801b9aa:	4611      	mov	r1, r2
 801b9ac:	4413      	add	r3, r2
 801b9ae:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801b9b2:	1a52      	subs	r2, r2, r1
 801b9b4:	7c21      	ldrb	r1, [r4, #16]
 801b9b6:	b21b      	sxth	r3, r3
 801b9b8:	b212      	sxth	r2, r2
 801b9ba:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b9be:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801b9c2:	b109      	cbz	r1, 801b9c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801b9c4:	42b2      	cmp	r2, r6
 801b9c6:	dba4      	blt.n	801b912 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b9c8:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801b9cc:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801b9d0:	440a      	add	r2, r1
 801b9d2:	b212      	sxth	r2, r2
 801b9d4:	4293      	cmp	r3, r2
 801b9d6:	dda4      	ble.n	801b922 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 801b9d8:	e79b      	b.n	801b912 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b9da:	2a02      	cmp	r2, #2
 801b9dc:	d105      	bne.n	801b9ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801b9de:	7be2      	ldrb	r2, [r4, #15]
 801b9e0:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801b9e4:	1a80      	subs	r0, r0, r2
 801b9e6:	1ac0      	subs	r0, r0, r3
 801b9e8:	e7bf      	b.n	801b96a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 801b9ea:	2000      	movs	r0, #0
 801b9ec:	e7be      	b.n	801b96c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801b9ee:	7be0      	ldrb	r0, [r4, #15]
 801b9f0:	e7bc      	b.n	801b96c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801b9f2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b9f6:	e7c3      	b.n	801b980 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801b9f8:	9b08      	ldr	r3, [sp, #32]
 801b9fa:	2b00      	cmp	r3, #0
 801b9fc:	d0f7      	beq.n	801b9ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801b9fe:	2264      	movs	r2, #100	; 0x64
 801ba00:	4639      	mov	r1, r7
 801ba02:	4628      	mov	r0, r5
 801ba04:	f012 fbdc 	bl	802e1c0 <memcpy>
 801ba08:	2300      	movs	r3, #0
 801ba0a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ba0e:	6821      	ldr	r1, [r4, #0]
 801ba10:	4628      	mov	r0, r5
 801ba12:	f7ff fbed 	bl	801b1f0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801ba16:	b203      	sxth	r3, r0
 801ba18:	e79e      	b.n	801b958 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0801ba1a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801ba1a:	b510      	push	{r4, lr}
 801ba1c:	2b02      	cmp	r3, #2
 801ba1e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ba22:	d00b      	beq.n	801ba3c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801ba24:	2b03      	cmp	r3, #3
 801ba26:	d00e      	beq.n	801ba46 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801ba28:	2b01      	cmp	r3, #1
 801ba2a:	d001      	beq.n	801ba30 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801ba2c:	1860      	adds	r0, r4, r1
 801ba2e:	bd10      	pop	{r4, pc}
 801ba30:	8880      	ldrh	r0, [r0, #4]
 801ba32:	4420      	add	r0, r4
 801ba34:	b200      	sxth	r0, r0
 801ba36:	1a80      	subs	r0, r0, r2
 801ba38:	3801      	subs	r0, #1
 801ba3a:	e7f8      	b.n	801ba2e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801ba3c:	8880      	ldrh	r0, [r0, #4]
 801ba3e:	4420      	add	r0, r4
 801ba40:	b200      	sxth	r0, r0
 801ba42:	1a40      	subs	r0, r0, r1
 801ba44:	e7f8      	b.n	801ba38 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801ba46:	18a0      	adds	r0, r4, r2
 801ba48:	e7f1      	b.n	801ba2e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801ba4a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801ba4a:	b510      	push	{r4, lr}
 801ba4c:	2b02      	cmp	r3, #2
 801ba4e:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801ba52:	d006      	beq.n	801ba62 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801ba54:	2b03      	cmp	r3, #3
 801ba56:	d00a      	beq.n	801ba6e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801ba58:	2b01      	cmp	r3, #1
 801ba5a:	bf14      	ite	ne
 801ba5c:	18a0      	addne	r0, r4, r2
 801ba5e:	1860      	addeq	r0, r4, r1
 801ba60:	bd10      	pop	{r4, pc}
 801ba62:	88c0      	ldrh	r0, [r0, #6]
 801ba64:	4420      	add	r0, r4
 801ba66:	b200      	sxth	r0, r0
 801ba68:	1a80      	subs	r0, r0, r2
 801ba6a:	3801      	subs	r0, #1
 801ba6c:	e7f8      	b.n	801ba60 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801ba6e:	88c0      	ldrh	r0, [r0, #6]
 801ba70:	4420      	add	r0, r4
 801ba72:	b200      	sxth	r0, r0
 801ba74:	1a40      	subs	r0, r0, r1
 801ba76:	e7f8      	b.n	801ba6a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0801ba78 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801ba78:	4b01      	ldr	r3, [pc, #4]	; (801ba80 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801ba7a:	2200      	movs	r2, #0
 801ba7c:	601a      	str	r2, [r3, #0]
 801ba7e:	4770      	bx	lr
 801ba80:	20009784 	.word	0x20009784

0801ba84 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801ba84:	4603      	mov	r3, r0
 801ba86:	b1c8      	cbz	r0, 801babc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801ba88:	0c02      	lsrs	r2, r0, #16
 801ba8a:	0412      	lsls	r2, r2, #16
 801ba8c:	b9a2      	cbnz	r2, 801bab8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801ba8e:	0403      	lsls	r3, r0, #16
 801ba90:	2010      	movs	r0, #16
 801ba92:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801ba96:	bf04      	itt	eq
 801ba98:	021b      	lsleq	r3, r3, #8
 801ba9a:	3008      	addeq	r0, #8
 801ba9c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801baa0:	bf04      	itt	eq
 801baa2:	011b      	lsleq	r3, r3, #4
 801baa4:	3004      	addeq	r0, #4
 801baa6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801baaa:	bf04      	itt	eq
 801baac:	009b      	lsleq	r3, r3, #2
 801baae:	3002      	addeq	r0, #2
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	db04      	blt.n	801babe <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801bab4:	3001      	adds	r0, #1
 801bab6:	4770      	bx	lr
 801bab8:	2000      	movs	r0, #0
 801baba:	e7ea      	b.n	801ba92 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801babc:	2020      	movs	r0, #32
 801babe:	4770      	bx	lr

0801bac0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801bac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bac4:	b087      	sub	sp, #28
 801bac6:	4681      	mov	r9, r0
 801bac8:	4698      	mov	r8, r3
 801baca:	4610      	mov	r0, r2
 801bacc:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801bad0:	460d      	mov	r5, r1
 801bad2:	b981      	cbnz	r1, 801baf6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801bad4:	b14b      	cbz	r3, 801baea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801bad6:	460b      	mov	r3, r1
 801bad8:	e9cd 4700 	strd	r4, r7, [sp]
 801badc:	464a      	mov	r2, r9
 801bade:	4641      	mov	r1, r8
 801bae0:	f7ff ffee 	bl	801bac0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801bae4:	b007      	add	sp, #28
 801bae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801baea:	f04f 33ff 	mov.w	r3, #4294967295
 801baee:	603b      	str	r3, [r7, #0]
 801baf0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801baf4:	e7f6      	b.n	801bae4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801baf6:	fa32 fa01 	lsrs.w	sl, r2, r1
 801bafa:	d107      	bne.n	801bb0c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801bafc:	fb09 f602 	mul.w	r6, r9, r2
 801bb00:	fbb6 f0f4 	udiv	r0, r6, r4
 801bb04:	fb04 6610 	mls	r6, r4, r0, r6
 801bb08:	603e      	str	r6, [r7, #0]
 801bb0a:	e7eb      	b.n	801bae4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801bb0c:	2601      	movs	r6, #1
 801bb0e:	408e      	lsls	r6, r1
 801bb10:	3e01      	subs	r6, #1
 801bb12:	4016      	ands	r6, r2
 801bb14:	fa09 fb01 	lsl.w	fp, r9, r1
 801bb18:	4630      	mov	r0, r6
 801bb1a:	fbbb f3f4 	udiv	r3, fp, r4
 801bb1e:	9302      	str	r3, [sp, #8]
 801bb20:	fb0a f303 	mul.w	r3, sl, r3
 801bb24:	9303      	str	r3, [sp, #12]
 801bb26:	f7ff ffad 	bl	801ba84 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801bb2a:	464a      	mov	r2, r9
 801bb2c:	460b      	mov	r3, r1
 801bb2e:	e9cd 4700 	strd	r4, r7, [sp]
 801bb32:	4601      	mov	r1, r0
 801bb34:	4630      	mov	r0, r6
 801bb36:	f7ff ffc3 	bl	801bac0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801bb3a:	9b02      	ldr	r3, [sp, #8]
 801bb3c:	fb04 bb13 	mls	fp, r4, r3, fp
 801bb40:	4606      	mov	r6, r0
 801bb42:	4658      	mov	r0, fp
 801bb44:	eb05 0108 	add.w	r1, r5, r8
 801bb48:	f7ff ff9c 	bl	801ba84 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801bb4c:	ab05      	add	r3, sp, #20
 801bb4e:	e9cd 4300 	strd	r4, r3, [sp]
 801bb52:	465a      	mov	r2, fp
 801bb54:	4603      	mov	r3, r0
 801bb56:	4650      	mov	r0, sl
 801bb58:	f7ff ffb2 	bl	801bac0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801bb5c:	6839      	ldr	r1, [r7, #0]
 801bb5e:	9a05      	ldr	r2, [sp, #20]
 801bb60:	9b03      	ldr	r3, [sp, #12]
 801bb62:	4411      	add	r1, r2
 801bb64:	fbb1 f2f4 	udiv	r2, r1, r4
 801bb68:	18d3      	adds	r3, r2, r3
 801bb6a:	441e      	add	r6, r3
 801bb6c:	fb04 1412 	mls	r4, r4, r2, r1
 801bb70:	4430      	add	r0, r6
 801bb72:	603c      	str	r4, [r7, #0]
 801bb74:	e7b6      	b.n	801bae4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801bb76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801bb76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bb7a:	b085      	sub	sp, #20
 801bb7c:	f1b0 0900 	subs.w	r9, r0, #0
 801bb80:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bb82:	461d      	mov	r5, r3
 801bb84:	bfbf      	itttt	lt
 801bb86:	6823      	ldrlt	r3, [r4, #0]
 801bb88:	425b      	neglt	r3, r3
 801bb8a:	f1c9 0900 	rsblt	r9, r9, #0
 801bb8e:	6023      	strlt	r3, [r4, #0]
 801bb90:	bfb4      	ite	lt
 801bb92:	f04f 36ff 	movlt.w	r6, #4294967295
 801bb96:	2601      	movge	r6, #1
 801bb98:	2a00      	cmp	r2, #0
 801bb9a:	4617      	mov	r7, r2
 801bb9c:	da04      	bge.n	801bba8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801bb9e:	6823      	ldr	r3, [r4, #0]
 801bba0:	425b      	negs	r3, r3
 801bba2:	4257      	negs	r7, r2
 801bba4:	4276      	negs	r6, r6
 801bba6:	6023      	str	r3, [r4, #0]
 801bba8:	2d00      	cmp	r5, #0
 801bbaa:	4638      	mov	r0, r7
 801bbac:	bfba      	itte	lt
 801bbae:	426d      	neglt	r5, r5
 801bbb0:	f04f 38ff 	movlt.w	r8, #4294967295
 801bbb4:	f04f 0801 	movge.w	r8, #1
 801bbb8:	f7ff ff64 	bl	801ba84 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801bbbc:	ab03      	add	r3, sp, #12
 801bbbe:	e9cd 5300 	strd	r5, r3, [sp]
 801bbc2:	463a      	mov	r2, r7
 801bbc4:	4603      	mov	r3, r0
 801bbc6:	4648      	mov	r0, r9
 801bbc8:	f7ff ff7a 	bl	801bac0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801bbcc:	6823      	ldr	r3, [r4, #0]
 801bbce:	9a03      	ldr	r2, [sp, #12]
 801bbd0:	4546      	cmp	r6, r8
 801bbd2:	441a      	add	r2, r3
 801bbd4:	fb92 f3f5 	sdiv	r3, r2, r5
 801bbd8:	4418      	add	r0, r3
 801bbda:	bf18      	it	ne
 801bbdc:	4240      	negne	r0, r0
 801bbde:	fb05 2313 	mls	r3, r5, r3, r2
 801bbe2:	1c72      	adds	r2, r6, #1
 801bbe4:	6023      	str	r3, [r4, #0]
 801bbe6:	d105      	bne.n	801bbf4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801bbe8:	2b00      	cmp	r3, #0
 801bbea:	f1c3 0200 	rsb	r2, r3, #0
 801bbee:	db0b      	blt.n	801bc08 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801bbf0:	6022      	str	r2, [r4, #0]
 801bbf2:	e006      	b.n	801bc02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801bbf4:	2e01      	cmp	r6, #1
 801bbf6:	d104      	bne.n	801bc02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	da02      	bge.n	801bc02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801bbfc:	442b      	add	r3, r5
 801bbfe:	3801      	subs	r0, #1
 801bc00:	6023      	str	r3, [r4, #0]
 801bc02:	b005      	add	sp, #20
 801bc04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc08:	3801      	subs	r0, #1
 801bc0a:	1b52      	subs	r2, r2, r5
 801bc0c:	e7f0      	b.n	801bbf0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801bc10 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801bc10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801bc14:	4c1c      	ldr	r4, [pc, #112]	; (801bc88 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801bc16:	6807      	ldr	r7, [r0, #0]
 801bc18:	69a3      	ldr	r3, [r4, #24]
 801bc1a:	4605      	mov	r5, r0
 801bc1c:	b92b      	cbnz	r3, 801bc2a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801bc1e:	6840      	ldr	r0, [r0, #4]
 801bc20:	e9c5 7000 	strd	r7, r0, [r5]
 801bc24:	b004      	add	sp, #16
 801bc26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc2a:	68a2      	ldr	r2, [r4, #8]
 801bc2c:	6820      	ldr	r0, [r4, #0]
 801bc2e:	ae04      	add	r6, sp, #16
 801bc30:	f04f 0802 	mov.w	r8, #2
 801bc34:	fb93 f1f8 	sdiv	r1, r3, r8
 801bc38:	440a      	add	r2, r1
 801bc3a:	f846 2d04 	str.w	r2, [r6, #-4]!
 801bc3e:	69e1      	ldr	r1, [r4, #28]
 801bc40:	9600      	str	r6, [sp, #0]
 801bc42:	463a      	mov	r2, r7
 801bc44:	f7ff ff97 	bl	801bb76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bc48:	69a3      	ldr	r3, [r4, #24]
 801bc4a:	686a      	ldr	r2, [r5, #4]
 801bc4c:	6a21      	ldr	r1, [r4, #32]
 801bc4e:	9600      	str	r6, [sp, #0]
 801bc50:	4607      	mov	r7, r0
 801bc52:	6860      	ldr	r0, [r4, #4]
 801bc54:	f7ff ff8f 	bl	801bb76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bc58:	6962      	ldr	r2, [r4, #20]
 801bc5a:	69a3      	ldr	r3, [r4, #24]
 801bc5c:	fb93 f8f8 	sdiv	r8, r3, r8
 801bc60:	4442      	add	r2, r8
 801bc62:	9203      	str	r2, [sp, #12]
 801bc64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bc66:	682a      	ldr	r2, [r5, #0]
 801bc68:	9600      	str	r6, [sp, #0]
 801bc6a:	4407      	add	r7, r0
 801bc6c:	68e0      	ldr	r0, [r4, #12]
 801bc6e:	f7ff ff82 	bl	801bb76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bc72:	9600      	str	r6, [sp, #0]
 801bc74:	4680      	mov	r8, r0
 801bc76:	69a3      	ldr	r3, [r4, #24]
 801bc78:	686a      	ldr	r2, [r5, #4]
 801bc7a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801bc7c:	6920      	ldr	r0, [r4, #16]
 801bc7e:	f7ff ff7a 	bl	801bb76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bc82:	4440      	add	r0, r8
 801bc84:	e7cc      	b.n	801bc20 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801bc86:	bf00      	nop
 801bc88:	20009788 	.word	0x20009788

0801bc8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801bc8c:	4b07      	ldr	r3, [pc, #28]	; (801bcac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801bc8e:	781b      	ldrb	r3, [r3, #0]
 801bc90:	2b01      	cmp	r3, #1
 801bc92:	d109      	bne.n	801bca8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801bc94:	f9b1 3000 	ldrsh.w	r3, [r1]
 801bc98:	f9b0 2000 	ldrsh.w	r2, [r0]
 801bc9c:	8003      	strh	r3, [r0, #0]
 801bc9e:	4b04      	ldr	r3, [pc, #16]	; (801bcb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801bca0:	881b      	ldrh	r3, [r3, #0]
 801bca2:	3b01      	subs	r3, #1
 801bca4:	1a9b      	subs	r3, r3, r2
 801bca6:	800b      	strh	r3, [r1, #0]
 801bca8:	4770      	bx	lr
 801bcaa:	bf00      	nop
 801bcac:	20009774 	.word	0x20009774
 801bcb0:	20009778 	.word	0x20009778

0801bcb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801bcb4:	b510      	push	{r4, lr}
 801bcb6:	4b07      	ldr	r3, [pc, #28]	; (801bcd4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801bcb8:	781b      	ldrb	r3, [r3, #0]
 801bcba:	2b01      	cmp	r3, #1
 801bcbc:	d108      	bne.n	801bcd0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801bcbe:	4b06      	ldr	r3, [pc, #24]	; (801bcd8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801bcc0:	880c      	ldrh	r4, [r1, #0]
 801bcc2:	881b      	ldrh	r3, [r3, #0]
 801bcc4:	f9b0 2000 	ldrsh.w	r2, [r0]
 801bcc8:	3b01      	subs	r3, #1
 801bcca:	1b1b      	subs	r3, r3, r4
 801bccc:	8003      	strh	r3, [r0, #0]
 801bcce:	800a      	strh	r2, [r1, #0]
 801bcd0:	bd10      	pop	{r4, pc}
 801bcd2:	bf00      	nop
 801bcd4:	20009774 	.word	0x20009774
 801bcd8:	20009778 	.word	0x20009778

0801bcdc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801bcdc:	b510      	push	{r4, lr}
 801bcde:	4b0a      	ldr	r3, [pc, #40]	; (801bd08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801bce0:	781b      	ldrb	r3, [r3, #0]
 801bce2:	2b01      	cmp	r3, #1
 801bce4:	d10e      	bne.n	801bd04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801bce6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801bcea:	8843      	ldrh	r3, [r0, #2]
 801bcec:	f9b0 4000 	ldrsh.w	r4, [r0]
 801bcf0:	8044      	strh	r4, [r0, #2]
 801bcf2:	18ca      	adds	r2, r1, r3
 801bcf4:	4b05      	ldr	r3, [pc, #20]	; (801bd0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801bcf6:	881b      	ldrh	r3, [r3, #0]
 801bcf8:	1a9b      	subs	r3, r3, r2
 801bcfa:	8003      	strh	r3, [r0, #0]
 801bcfc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801bd00:	80c3      	strh	r3, [r0, #6]
 801bd02:	8081      	strh	r1, [r0, #4]
 801bd04:	bd10      	pop	{r4, pc}
 801bd06:	bf00      	nop
 801bd08:	20009774 	.word	0x20009774
 801bd0c:	20009778 	.word	0x20009778

0801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801bd10:	4b08      	ldr	r3, [pc, #32]	; (801bd34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801bd12:	781b      	ldrb	r3, [r3, #0]
 801bd14:	2b01      	cmp	r3, #1
 801bd16:	d10c      	bne.n	801bd32 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801bd18:	8803      	ldrh	r3, [r0, #0]
 801bd1a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801bd1e:	8842      	ldrh	r2, [r0, #2]
 801bd20:	8002      	strh	r2, [r0, #0]
 801bd22:	185a      	adds	r2, r3, r1
 801bd24:	4b04      	ldr	r3, [pc, #16]	; (801bd38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801bd26:	881b      	ldrh	r3, [r3, #0]
 801bd28:	1a9b      	subs	r3, r3, r2
 801bd2a:	8043      	strh	r3, [r0, #2]
 801bd2c:	88c3      	ldrh	r3, [r0, #6]
 801bd2e:	8083      	strh	r3, [r0, #4]
 801bd30:	80c1      	strh	r1, [r0, #6]
 801bd32:	4770      	bx	lr
 801bd34:	20009774 	.word	0x20009774
 801bd38:	20009778 	.word	0x20009778

0801bd3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801bd3c:	b510      	push	{r4, lr}
 801bd3e:	4b07      	ldr	r3, [pc, #28]	; (801bd5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801bd40:	781b      	ldrb	r3, [r3, #0]
 801bd42:	2b01      	cmp	r3, #1
 801bd44:	d108      	bne.n	801bd58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801bd46:	f9b1 3000 	ldrsh.w	r3, [r1]
 801bd4a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801bd4e:	8003      	strh	r3, [r0, #0]
 801bd50:	8893      	ldrh	r3, [r2, #4]
 801bd52:	3b01      	subs	r3, #1
 801bd54:	1b1b      	subs	r3, r3, r4
 801bd56:	800b      	strh	r3, [r1, #0]
 801bd58:	bd10      	pop	{r4, pc}
 801bd5a:	bf00      	nop
 801bd5c:	20009774 	.word	0x20009774

0801bd60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801bd60:	4b0b      	ldr	r3, [pc, #44]	; (801bd90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801bd62:	781b      	ldrb	r3, [r3, #0]
 801bd64:	2b01      	cmp	r3, #1
 801bd66:	d111      	bne.n	801bd8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801bd68:	680b      	ldr	r3, [r1, #0]
 801bd6a:	ed90 7a00 	vldr	s14, [r0]
 801bd6e:	6003      	str	r3, [r0, #0]
 801bd70:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801bd74:	eddf 6a07 	vldr	s13, [pc, #28]	; 801bd94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801bd78:	ee07 3a90 	vmov	s15, r3
 801bd7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bd80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bd84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bd88:	edc1 7a00 	vstr	s15, [r1]
 801bd8c:	4770      	bx	lr
 801bd8e:	bf00      	nop
 801bd90:	20009774 	.word	0x20009774
 801bd94:	38d1b717 	.word	0x38d1b717

0801bd98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801bd98:	b510      	push	{r4, lr}
 801bd9a:	4b0a      	ldr	r3, [pc, #40]	; (801bdc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801bd9c:	781b      	ldrb	r3, [r3, #0]
 801bd9e:	2b01      	cmp	r3, #1
 801bda0:	460a      	mov	r2, r1
 801bda2:	d10d      	bne.n	801bdc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801bda4:	8881      	ldrh	r1, [r0, #4]
 801bda6:	8803      	ldrh	r3, [r0, #0]
 801bda8:	440b      	add	r3, r1
 801bdaa:	4601      	mov	r1, r0
 801bdac:	3b01      	subs	r3, #1
 801bdae:	f821 3b02 	strh.w	r3, [r1], #2
 801bdb2:	f7ff ffc3 	bl	801bd3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801bdb6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801bdba:	88c2      	ldrh	r2, [r0, #6]
 801bdbc:	8082      	strh	r2, [r0, #4]
 801bdbe:	80c3      	strh	r3, [r0, #6]
 801bdc0:	bd10      	pop	{r4, pc}
 801bdc2:	bf00      	nop
 801bdc4:	20009774 	.word	0x20009774

0801bdc8 <_ZN8touchgfx11Application13requestRedrawEv>:
 801bdc8:	4b06      	ldr	r3, [pc, #24]	; (801bde4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801bdca:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bdce:	4b06      	ldr	r3, [pc, #24]	; (801bde8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801bdd0:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801bdd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bdd8:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801bddc:	2100      	movs	r1, #0
 801bdde:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801bde2:	4770      	bx	lr
 801bde4:	20009770 	.word	0x20009770
 801bde8:	20009772 	.word	0x20009772

0801bdec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801bdec:	4b03      	ldr	r3, [pc, #12]	; (801bdfc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801bdee:	6818      	ldr	r0, [r3, #0]
 801bdf0:	b110      	cbz	r0, 801bdf8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801bdf2:	6803      	ldr	r3, [r0, #0]
 801bdf4:	699b      	ldr	r3, [r3, #24]
 801bdf6:	4718      	bx	r3
 801bdf8:	4770      	bx	lr
 801bdfa:	bf00      	nop
 801bdfc:	200097b8 	.word	0x200097b8

0801be00 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801be00:	4770      	bx	lr
	...

0801be04 <_ZN8touchgfx11Application4drawEv>:
 801be04:	b507      	push	{r0, r1, r2, lr}
 801be06:	4b09      	ldr	r3, [pc, #36]	; (801be2c <_ZN8touchgfx11Application4drawEv+0x28>)
 801be08:	f9b3 2000 	ldrsh.w	r2, [r3]
 801be0c:	4b08      	ldr	r3, [pc, #32]	; (801be30 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801be0e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801be12:	f9b3 3000 	ldrsh.w	r3, [r3]
 801be16:	f8ad 3006 	strh.w	r3, [sp, #6]
 801be1a:	6803      	ldr	r3, [r0, #0]
 801be1c:	2100      	movs	r1, #0
 801be1e:	9100      	str	r1, [sp, #0]
 801be20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801be22:	4669      	mov	r1, sp
 801be24:	4798      	blx	r3
 801be26:	b003      	add	sp, #12
 801be28:	f85d fb04 	ldr.w	pc, [sp], #4
 801be2c:	20009770 	.word	0x20009770
 801be30:	20009772 	.word	0x20009772

0801be34 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801be34:	4b03      	ldr	r3, [pc, #12]	; (801be44 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801be36:	6818      	ldr	r0, [r3, #0]
 801be38:	b110      	cbz	r0, 801be40 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801be3a:	6803      	ldr	r3, [r0, #0]
 801be3c:	69db      	ldr	r3, [r3, #28]
 801be3e:	4718      	bx	r3
 801be40:	4770      	bx	lr
 801be42:	bf00      	nop
 801be44:	200097b8 	.word	0x200097b8

0801be48 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801be48:	4b03      	ldr	r3, [pc, #12]	; (801be58 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801be4a:	6818      	ldr	r0, [r3, #0]
 801be4c:	b110      	cbz	r0, 801be54 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801be4e:	6803      	ldr	r3, [r0, #0]
 801be50:	6a1b      	ldr	r3, [r3, #32]
 801be52:	4718      	bx	r3
 801be54:	4770      	bx	lr
 801be56:	bf00      	nop
 801be58:	200097b8 	.word	0x200097b8

0801be5c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801be5c:	4b03      	ldr	r3, [pc, #12]	; (801be6c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801be5e:	6818      	ldr	r0, [r3, #0]
 801be60:	b110      	cbz	r0, 801be68 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801be62:	6803      	ldr	r3, [r0, #0]
 801be64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be66:	4718      	bx	r3
 801be68:	4770      	bx	lr
 801be6a:	bf00      	nop
 801be6c:	200097b8 	.word	0x200097b8

0801be70 <_ZN8touchgfx11Application15handleTickEventEv>:
 801be70:	b570      	push	{r4, r5, r6, lr}
 801be72:	4d38      	ldr	r5, [pc, #224]	; (801bf54 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 801be74:	4604      	mov	r4, r0
 801be76:	6828      	ldr	r0, [r5, #0]
 801be78:	b140      	cbz	r0, 801be8c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801be7a:	7a03      	ldrb	r3, [r0, #8]
 801be7c:	b933      	cbnz	r3, 801be8c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801be7e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801be82:	6803      	ldr	r3, [r0, #0]
 801be84:	689b      	ldr	r3, [r3, #8]
 801be86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801be8a:	4718      	bx	r3
 801be8c:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801be90:	b97b      	cbnz	r3, 801beb2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801be92:	b170      	cbz	r0, 801beb2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801be94:	7a03      	ldrb	r3, [r0, #8]
 801be96:	b163      	cbz	r3, 801beb2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801be98:	4b2f      	ldr	r3, [pc, #188]	; (801bf58 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801be9a:	6818      	ldr	r0, [r3, #0]
 801be9c:	b110      	cbz	r0, 801bea4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801be9e:	6803      	ldr	r3, [r0, #0]
 801bea0:	691b      	ldr	r3, [r3, #16]
 801bea2:	4798      	blx	r3
 801bea4:	6828      	ldr	r0, [r5, #0]
 801bea6:	6803      	ldr	r3, [r0, #0]
 801bea8:	68db      	ldr	r3, [r3, #12]
 801beaa:	4798      	blx	r3
 801beac:	2301      	movs	r3, #1
 801beae:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801beb2:	2500      	movs	r5, #0
 801beb4:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801beb8:	42a8      	cmp	r0, r5
 801beba:	dd0c      	ble.n	801bed6 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801bebc:	1963      	adds	r3, r4, r5
 801bebe:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801bec2:	b132      	cbz	r2, 801bed2 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801bec4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801bec8:	4413      	add	r3, r2
 801beca:	6858      	ldr	r0, [r3, #4]
 801becc:	6803      	ldr	r3, [r0, #0]
 801bece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bed0:	4798      	blx	r3
 801bed2:	3501      	adds	r5, #1
 801bed4:	e7ee      	b.n	801beb4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801bed6:	2300      	movs	r3, #0
 801bed8:	461a      	mov	r2, r3
 801beda:	4298      	cmp	r0, r3
 801bedc:	d10f      	bne.n	801befe <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801bede:	1d25      	adds	r5, r4, #4
 801bee0:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801bee4:	4291      	cmp	r1, r2
 801bee6:	dd2d      	ble.n	801bf44 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801bee8:	1e48      	subs	r0, r1, #1
 801beea:	b280      	uxth	r0, r0
 801beec:	4288      	cmp	r0, r1
 801beee:	d31a      	bcc.n	801bf26 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801bef0:	4b1a      	ldr	r3, [pc, #104]	; (801bf5c <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 801bef2:	4a1b      	ldr	r2, [pc, #108]	; (801bf60 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801bef4:	481b      	ldr	r0, [pc, #108]	; (801bf64 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801bef6:	f240 11a9 	movw	r1, #425	; 0x1a9
 801befa:	f011 ffe1 	bl	802dec0 <__assert_func>
 801befe:	18e1      	adds	r1, r4, r3
 801bf00:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801bf04:	b16d      	cbz	r5, 801bf22 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801bf06:	429a      	cmp	r2, r3
 801bf08:	d00a      	beq.n	801bf20 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801bf0a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801bf0e:	4431      	add	r1, r6
 801bf10:	684e      	ldr	r6, [r1, #4]
 801bf12:	b291      	uxth	r1, r2
 801bf14:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801bf18:	604e      	str	r6, [r1, #4]
 801bf1a:	18a1      	adds	r1, r4, r2
 801bf1c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801bf20:	3201      	adds	r2, #1
 801bf22:	3301      	adds	r3, #1
 801bf24:	e7d9      	b.n	801beda <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801bf26:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801bf2a:	3304      	adds	r3, #4
 801bf2c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801bf30:	428b      	cmp	r3, r1
 801bf32:	d004      	beq.n	801bf3e <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801bf34:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801bf38:	f843 6c04 	str.w	r6, [r3, #-4]
 801bf3c:	e7f8      	b.n	801bf30 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801bf3e:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801bf42:	e7cd      	b.n	801bee0 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801bf44:	4b04      	ldr	r3, [pc, #16]	; (801bf58 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801bf46:	6818      	ldr	r0, [r3, #0]
 801bf48:	b110      	cbz	r0, 801bf50 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801bf4a:	6803      	ldr	r3, [r0, #0]
 801bf4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf4e:	e79a      	b.n	801be86 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801bf50:	bd70      	pop	{r4, r5, r6, pc}
 801bf52:	bf00      	nop
 801bf54:	200097bc 	.word	0x200097bc
 801bf58:	200097b8 	.word	0x200097b8
 801bf5c:	08031c6c 	.word	0x08031c6c
 801bf60:	08031ec5 	.word	0x08031ec5
 801bf64:	08031c7a 	.word	0x08031c7a

0801bf68 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801bf68:	b570      	push	{r4, r5, r6, lr}
 801bf6a:	4606      	mov	r6, r0
 801bf6c:	460c      	mov	r4, r1
 801bf6e:	b929      	cbnz	r1, 801bf7c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801bf70:	4b0c      	ldr	r3, [pc, #48]	; (801bfa4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801bf72:	4a0d      	ldr	r2, [pc, #52]	; (801bfa8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801bf74:	480d      	ldr	r0, [pc, #52]	; (801bfac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801bf76:	2167      	movs	r1, #103	; 0x67
 801bf78:	f011 ffa2 	bl	802dec0 <__assert_func>
 801bf7c:	4d0c      	ldr	r5, [pc, #48]	; (801bfb0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801bf7e:	2300      	movs	r3, #0
 801bf80:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801bf84:	6828      	ldr	r0, [r5, #0]
 801bf86:	b110      	cbz	r0, 801bf8e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801bf88:	6803      	ldr	r3, [r0, #0]
 801bf8a:	695b      	ldr	r3, [r3, #20]
 801bf8c:	4798      	blx	r3
 801bf8e:	602c      	str	r4, [r5, #0]
 801bf90:	6823      	ldr	r3, [r4, #0]
 801bf92:	4620      	mov	r0, r4
 801bf94:	68db      	ldr	r3, [r3, #12]
 801bf96:	4798      	blx	r3
 801bf98:	6833      	ldr	r3, [r6, #0]
 801bf9a:	4630      	mov	r0, r6
 801bf9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bfa2:	4718      	bx	r3
 801bfa4:	08031c38 	.word	0x08031c38
 801bfa8:	08031d40 	.word	0x08031d40
 801bfac:	08031c42 	.word	0x08031c42
 801bfb0:	200097b8 	.word	0x200097b8

0801bfb4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801bfb4:	b570      	push	{r4, r5, r6, lr}
 801bfb6:	f9b1 4000 	ldrsh.w	r4, [r1]
 801bfba:	f9b0 5000 	ldrsh.w	r5, [r0]
 801bfbe:	42ac      	cmp	r4, r5
 801bfc0:	db18      	blt.n	801bff4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bfc2:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801bfc6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801bfca:	429a      	cmp	r2, r3
 801bfcc:	db12      	blt.n	801bff4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bfce:	8886      	ldrh	r6, [r0, #4]
 801bfd0:	4435      	add	r5, r6
 801bfd2:	888e      	ldrh	r6, [r1, #4]
 801bfd4:	4434      	add	r4, r6
 801bfd6:	b22d      	sxth	r5, r5
 801bfd8:	b224      	sxth	r4, r4
 801bfda:	42a5      	cmp	r5, r4
 801bfdc:	db0a      	blt.n	801bff4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bfde:	88c0      	ldrh	r0, [r0, #6]
 801bfe0:	4418      	add	r0, r3
 801bfe2:	88cb      	ldrh	r3, [r1, #6]
 801bfe4:	441a      	add	r2, r3
 801bfe6:	b200      	sxth	r0, r0
 801bfe8:	b212      	sxth	r2, r2
 801bfea:	4290      	cmp	r0, r2
 801bfec:	bfb4      	ite	lt
 801bfee:	2000      	movlt	r0, #0
 801bff0:	2001      	movge	r0, #1
 801bff2:	bd70      	pop	{r4, r5, r6, pc}
 801bff4:	2000      	movs	r0, #0
 801bff6:	e7fc      	b.n	801bff2 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801bff8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801bff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bffa:	4604      	mov	r4, r0
 801bffc:	4608      	mov	r0, r1
 801bffe:	460d      	mov	r5, r1
 801c000:	f7fb fab5 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c004:	b978      	cbnz	r0, 801c026 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801c006:	4620      	mov	r0, r4
 801c008:	f7fb fab1 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c00c:	f9b5 6000 	ldrsh.w	r6, [r5]
 801c010:	b150      	cbz	r0, 801c028 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801c012:	8026      	strh	r6, [r4, #0]
 801c014:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801c018:	8063      	strh	r3, [r4, #2]
 801c01a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801c01e:	80a3      	strh	r3, [r4, #4]
 801c020:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801c024:	80e3      	strh	r3, [r4, #6]
 801c026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c028:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c02c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801c030:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801c034:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801c038:	88ed      	ldrh	r5, [r5, #6]
 801c03a:	42b1      	cmp	r1, r6
 801c03c:	460f      	mov	r7, r1
 801c03e:	bfa8      	it	ge
 801c040:	4637      	movge	r7, r6
 801c042:	4293      	cmp	r3, r2
 801c044:	4618      	mov	r0, r3
 801c046:	4466      	add	r6, ip
 801c048:	bfa8      	it	ge
 801c04a:	4610      	movge	r0, r2
 801c04c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801c050:	8027      	strh	r7, [r4, #0]
 801c052:	442a      	add	r2, r5
 801c054:	88e5      	ldrh	r5, [r4, #6]
 801c056:	8060      	strh	r0, [r4, #2]
 801c058:	4461      	add	r1, ip
 801c05a:	442b      	add	r3, r5
 801c05c:	b236      	sxth	r6, r6
 801c05e:	b209      	sxth	r1, r1
 801c060:	b212      	sxth	r2, r2
 801c062:	b21b      	sxth	r3, r3
 801c064:	428e      	cmp	r6, r1
 801c066:	bfac      	ite	ge
 801c068:	ebc7 0106 	rsbge	r1, r7, r6
 801c06c:	ebc7 0101 	rsblt	r1, r7, r1
 801c070:	429a      	cmp	r2, r3
 801c072:	bfac      	ite	ge
 801c074:	ebc0 0202 	rsbge	r2, r0, r2
 801c078:	ebc0 0203 	rsblt	r2, r0, r3
 801c07c:	80a1      	strh	r1, [r4, #4]
 801c07e:	80e2      	strh	r2, [r4, #6]
 801c080:	e7d1      	b.n	801c026 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801c084 <_ZN8touchgfx11Application11getInstanceEv>:
 801c084:	4b01      	ldr	r3, [pc, #4]	; (801c08c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801c086:	6818      	ldr	r0, [r3, #0]
 801c088:	4770      	bx	lr
 801c08a:	bf00      	nop
 801c08c:	200097c8 	.word	0x200097c8

0801c090 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801c090:	b570      	push	{r4, r5, r6, lr}
 801c092:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801c096:	1d04      	adds	r4, r0, #4
 801c098:	2200      	movs	r2, #0
 801c09a:	b295      	uxth	r5, r2
 801c09c:	42ab      	cmp	r3, r5
 801c09e:	d90f      	bls.n	801c0c0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x30>
 801c0a0:	f854 6b04 	ldr.w	r6, [r4], #4
 801c0a4:	428e      	cmp	r6, r1
 801c0a6:	4615      	mov	r5, r2
 801c0a8:	f102 0201 	add.w	r2, r2, #1
 801c0ac:	d1f5      	bne.n	801c09a <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801c0ae:	4428      	add	r0, r5
 801c0b0:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801c0b4:	2bff      	cmp	r3, #255	; 0xff
 801c0b6:	d002      	beq.n	801c0be <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801c0b8:	3301      	adds	r3, #1
 801c0ba:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801c0be:	bd70      	pop	{r4, r5, r6, pc}
 801c0c0:	2b20      	cmp	r3, #32
 801c0c2:	d106      	bne.n	801c0d2 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x42>
 801c0c4:	4b08      	ldr	r3, [pc, #32]	; (801c0e8 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801c0c6:	4a09      	ldr	r2, [pc, #36]	; (801c0ec <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801c0c8:	4809      	ldr	r0, [pc, #36]	; (801c0f0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801c0ca:	f240 215f 	movw	r1, #607	; 0x25f
 801c0ce:	f011 fef7 	bl	802dec0 <__assert_func>
 801c0d2:	18c2      	adds	r2, r0, r3
 801c0d4:	2401      	movs	r4, #1
 801c0d6:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801c0da:	191a      	adds	r2, r3, r4
 801c0dc:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801c0e0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801c0e4:	6041      	str	r1, [r0, #4]
 801c0e6:	e7ea      	b.n	801c0be <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801c0e8:	08031ca3 	.word	0x08031ca3
 801c0ec:	08031d84 	.word	0x08031d84
 801c0f0:	08031c42 	.word	0x08031c42

0801c0f4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801c0f4:	b570      	push	{r4, r5, r6, lr}
 801c0f6:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801c0fa:	1d04      	adds	r4, r0, #4
 801c0fc:	2300      	movs	r3, #0
 801c0fe:	b29a      	uxth	r2, r3
 801c100:	4296      	cmp	r6, r2
 801c102:	d90a      	bls.n	801c11a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801c104:	f854 2b04 	ldr.w	r2, [r4], #4
 801c108:	428a      	cmp	r2, r1
 801c10a:	d107      	bne.n	801c11c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801c10c:	18c5      	adds	r5, r0, r3
 801c10e:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801c112:	b11a      	cbz	r2, 801c11c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801c114:	3a01      	subs	r2, #1
 801c116:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801c11a:	bd70      	pop	{r4, r5, r6, pc}
 801c11c:	3301      	adds	r3, #1
 801c11e:	e7ee      	b.n	801c0fe <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801c120 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801c120:	2300      	movs	r3, #0
 801c122:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801c126:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801c12a:	30a8      	adds	r0, #168	; 0xa8
 801c12c:	f802 3b01 	strb.w	r3, [r2], #1
 801c130:	4282      	cmp	r2, r0
 801c132:	d1fb      	bne.n	801c12c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801c134:	4770      	bx	lr

0801c136 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801c136:	4603      	mov	r3, r0
 801c138:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801c13c:	2200      	movs	r2, #0
 801c13e:	801a      	strh	r2, [r3, #0]
 801c140:	805a      	strh	r2, [r3, #2]
 801c142:	809a      	strh	r2, [r3, #4]
 801c144:	80da      	strh	r2, [r3, #6]
 801c146:	3308      	adds	r3, #8
 801c148:	428b      	cmp	r3, r1
 801c14a:	d1f8      	bne.n	801c13e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801c14c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801c150:	4770      	bx	lr
	...

0801c154 <_ZN8touchgfx11ApplicationC1Ev>:
 801c154:	b570      	push	{r4, r5, r6, lr}
 801c156:	4b1a      	ldr	r3, [pc, #104]	; (801c1c0 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801c158:	6003      	str	r3, [r0, #0]
 801c15a:	2500      	movs	r5, #0
 801c15c:	4604      	mov	r4, r0
 801c15e:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 801c162:	30a8      	adds	r0, #168	; 0xa8
 801c164:	f7ff ffe7 	bl	801c136 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c168:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801c16c:	f7ff ffe3 	bl	801c136 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c170:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801c174:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801c178:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801c17c:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801c180:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801c184:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801c188:	490e      	ldr	r1, [pc, #56]	; (801c1c4 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801c18a:	480f      	ldr	r0, [pc, #60]	; (801c1c8 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801c18c:	4e0f      	ldr	r6, [pc, #60]	; (801c1cc <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801c18e:	f00f faa5 	bl	802b6dc <CRC_Lock>
 801c192:	4b0f      	ldr	r3, [pc, #60]	; (801c1d0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801c194:	b158      	cbz	r0, 801c1ae <_ZN8touchgfx11ApplicationC1Ev+0x5a>
 801c196:	801d      	strh	r5, [r3, #0]
 801c198:	4a0e      	ldr	r2, [pc, #56]	; (801c1d4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801c19a:	2300      	movs	r3, #0
 801c19c:	6013      	str	r3, [r2, #0]
 801c19e:	4a0e      	ldr	r2, [pc, #56]	; (801c1d8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801c1a0:	6033      	str	r3, [r6, #0]
 801c1a2:	4620      	mov	r0, r4
 801c1a4:	6013      	str	r3, [r2, #0]
 801c1a6:	f7ff ffbb 	bl	801c120 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801c1aa:	4620      	mov	r0, r4
 801c1ac:	bd70      	pop	{r4, r5, r6, pc}
 801c1ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c1b2:	2002      	movs	r0, #2
 801c1b4:	801a      	strh	r2, [r3, #0]
 801c1b6:	6030      	str	r0, [r6, #0]
 801c1b8:	f001 faae 	bl	801d718 <_ZN8touchgfx6Screen4drawEv>
 801c1bc:	e7ec      	b.n	801c198 <_ZN8touchgfx11ApplicationC1Ev+0x44>
 801c1be:	bf00      	nop
 801c1c0:	08031d04 	.word	0x08031d04
 801c1c4:	b5e8b5cd 	.word	0xb5e8b5cd
 801c1c8:	f407a5c2 	.word	0xf407a5c2
 801c1cc:	200097b8 	.word	0x200097b8
 801c1d0:	20000020 	.word	0x20000020
 801c1d4:	200097c8 	.word	0x200097c8
 801c1d8:	200097bc 	.word	0x200097bc

0801c1dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801c1dc:	b510      	push	{r4, lr}
 801c1de:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801c1e2:	428b      	cmp	r3, r1
 801c1e4:	d806      	bhi.n	801c1f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801c1e6:	4b0b      	ldr	r3, [pc, #44]	; (801c214 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 801c1e8:	4a0b      	ldr	r2, [pc, #44]	; (801c218 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801c1ea:	480c      	ldr	r0, [pc, #48]	; (801c21c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801c1ec:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 801c1f0:	f011 fe66 	bl	802dec0 <__assert_func>
 801c1f4:	3b01      	subs	r3, #1
 801c1f6:	b29b      	uxth	r3, r3
 801c1f8:	428b      	cmp	r3, r1
 801c1fa:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801c1fe:	d908      	bls.n	801c212 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801c200:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801c204:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801c208:	681a      	ldr	r2, [r3, #0]
 801c20a:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801c20e:	685a      	ldr	r2, [r3, #4]
 801c210:	6062      	str	r2, [r4, #4]
 801c212:	bd10      	pop	{r4, pc}
 801c214:	08031c6c 	.word	0x08031c6c
 801c218:	08031dc9 	.word	0x08031dc9
 801c21c:	08031c7a 	.word	0x08031c7a

0801c220 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801c220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c222:	466b      	mov	r3, sp
 801c224:	e883 0006 	stmia.w	r3, {r1, r2}
 801c228:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801c22c:	2a07      	cmp	r2, #7
 801c22e:	4604      	mov	r4, r0
 801c230:	d906      	bls.n	801c240 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801c232:	4b09      	ldr	r3, [pc, #36]	; (801c258 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801c234:	4a09      	ldr	r2, [pc, #36]	; (801c25c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801c236:	480a      	ldr	r0, [pc, #40]	; (801c260 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801c238:	f44f 71c1 	mov.w	r1, #386	; 0x182
 801c23c:	f011 fe40 	bl	802dec0 <__assert_func>
 801c240:	1c51      	adds	r1, r2, #1
 801c242:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801c246:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801c24a:	cb03      	ldmia	r3!, {r0, r1}
 801c24c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801c250:	6069      	str	r1, [r5, #4]
 801c252:	b003      	add	sp, #12
 801c254:	bd30      	pop	{r4, r5, pc}
 801c256:	bf00      	nop
 801c258:	08031ccb 	.word	0x08031ccb
 801c25c:	08031e5f 	.word	0x08031e5f
 801c260:	08031c7a 	.word	0x08031c7a

0801c264 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801c264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c268:	b08d      	sub	sp, #52	; 0x34
 801c26a:	ac08      	add	r4, sp, #32
 801c26c:	4683      	mov	fp, r0
 801c26e:	4620      	mov	r0, r4
 801c270:	e884 0006 	stmia.w	r4, {r1, r2}
 801c274:	f7fb f97b 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c278:	2800      	cmp	r0, #0
 801c27a:	d16a      	bne.n	801c352 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c27c:	9402      	str	r4, [sp, #8]
 801c27e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801c282:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801c286:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801c28a:	2400      	movs	r4, #0
 801c28c:	9301      	str	r3, [sp, #4]
 801c28e:	36a0      	adds	r6, #160	; 0xa0
 801c290:	42a5      	cmp	r5, r4
 801c292:	d00d      	beq.n	801c2b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801c294:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801c298:	9802      	ldr	r0, [sp, #8]
 801c29a:	f7ff fe8b 	bl	801bfb4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c29e:	b128      	cbz	r0, 801c2ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801c2a0:	1e69      	subs	r1, r5, #1
 801c2a2:	1b09      	subs	r1, r1, r4
 801c2a4:	b289      	uxth	r1, r1
 801c2a6:	9801      	ldr	r0, [sp, #4]
 801c2a8:	f7ff ff98 	bl	801c1dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c2ac:	3401      	adds	r4, #1
 801c2ae:	e7ef      	b.n	801c290 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c2b0:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801c2b4:	9703      	str	r7, [sp, #12]
 801c2b6:	1e7b      	subs	r3, r7, #1
 801c2b8:	9300      	str	r3, [sp, #0]
 801c2ba:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801c2be:	2400      	movs	r4, #0
 801c2c0:	4655      	mov	r5, sl
 801c2c2:	9704      	str	r7, [sp, #16]
 801c2c4:	4626      	mov	r6, r4
 801c2c6:	9b04      	ldr	r3, [sp, #16]
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d078      	beq.n	801c3be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801c2cc:	9902      	ldr	r1, [sp, #8]
 801c2ce:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801c2d2:	f7fc fe1d 	bl	8018f10 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c2d6:	b360      	cbz	r0, 801c332 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801c2d8:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801c2dc:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801c2e0:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801c2e4:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801c2e8:	45e6      	cmp	lr, ip
 801c2ea:	db35      	blt.n	801c358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801c2ec:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801c2f0:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801c2f4:	4472      	add	r2, lr
 801c2f6:	4463      	add	r3, ip
 801c2f8:	b212      	sxth	r2, r2
 801c2fa:	b21b      	sxth	r3, r3
 801c2fc:	429a      	cmp	r2, r3
 801c2fe:	dc2b      	bgt.n	801c358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801c300:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801c304:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c308:	fa1f f288 	uxth.w	r2, r8
 801c30c:	4413      	add	r3, r2
 801c30e:	b29b      	uxth	r3, r3
 801c310:	45c1      	cmp	r9, r8
 801c312:	fa0f fe83 	sxth.w	lr, r3
 801c316:	fa1f fc89 	uxth.w	ip, r9
 801c31a:	db0f      	blt.n	801c33c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801c31c:	eba3 030c 	sub.w	r3, r3, ip
 801c320:	1ac9      	subs	r1, r1, r3
 801c322:	b209      	sxth	r1, r1
 801c324:	2900      	cmp	r1, #0
 801c326:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801c32a:	dd12      	ble.n	801c352 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c32c:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801c330:	4604      	mov	r4, r0
 801c332:	9b04      	ldr	r3, [sp, #16]
 801c334:	3b01      	subs	r3, #1
 801c336:	9304      	str	r3, [sp, #16]
 801c338:	3d08      	subs	r5, #8
 801c33a:	e7c4      	b.n	801c2c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801c33c:	4461      	add	r1, ip
 801c33e:	b209      	sxth	r1, r1
 801c340:	4571      	cmp	r1, lr
 801c342:	dc3a      	bgt.n	801c3ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801c344:	eba2 020c 	sub.w	r2, r2, ip
 801c348:	b212      	sxth	r2, r2
 801c34a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801c34e:	2a00      	cmp	r2, #0
 801c350:	dcee      	bgt.n	801c330 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801c352:	b00d      	add	sp, #52	; 0x34
 801c354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c358:	45c1      	cmp	r9, r8
 801c35a:	db2e      	blt.n	801c3ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801c35c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801c360:	4499      	add	r9, r3
 801c362:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801c366:	4498      	add	r8, r3
 801c368:	fa0f f989 	sxth.w	r9, r9
 801c36c:	fa0f f888 	sxth.w	r8, r8
 801c370:	45c1      	cmp	r9, r8
 801c372:	dc22      	bgt.n	801c3ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801c374:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801c378:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801c37c:	fa1f f28c 	uxth.w	r2, ip
 801c380:	4413      	add	r3, r2
 801c382:	b29b      	uxth	r3, r3
 801c384:	45e6      	cmp	lr, ip
 801c386:	fa1f f88e 	uxth.w	r8, lr
 801c38a:	fa0f f983 	sxth.w	r9, r3
 801c38e:	db0a      	blt.n	801c3a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801c390:	eba3 0308 	sub.w	r3, r3, r8
 801c394:	1ac9      	subs	r1, r1, r3
 801c396:	b209      	sxth	r1, r1
 801c398:	2900      	cmp	r1, #0
 801c39a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801c39e:	ddd8      	ble.n	801c352 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c3a0:	f8ad 9020 	strh.w	r9, [sp, #32]
 801c3a4:	e7c4      	b.n	801c330 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801c3a6:	4441      	add	r1, r8
 801c3a8:	b209      	sxth	r1, r1
 801c3aa:	4549      	cmp	r1, r9
 801c3ac:	dc05      	bgt.n	801c3ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801c3ae:	eba2 0208 	sub.w	r2, r2, r8
 801c3b2:	b212      	sxth	r2, r2
 801c3b4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801c3b8:	e7c9      	b.n	801c34e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801c3ba:	4606      	mov	r6, r0
 801c3bc:	e7b9      	b.n	801c332 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801c3be:	2c00      	cmp	r4, #0
 801c3c0:	f47f af7d 	bne.w	801c2be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801c3c4:	2e00      	cmp	r6, #0
 801c3c6:	f000 81dd 	beq.w	801c784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801c3ca:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801c3ce:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801c3d2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801c3d6:	b2b9      	uxth	r1, r7
 801c3d8:	9104      	str	r1, [sp, #16]
 801c3da:	9804      	ldr	r0, [sp, #16]
 801c3dc:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c3e0:	4401      	add	r1, r0
 801c3e2:	b2b3      	uxth	r3, r6
 801c3e4:	b289      	uxth	r1, r1
 801c3e6:	441a      	add	r2, r3
 801c3e8:	9105      	str	r1, [sp, #20]
 801c3ea:	b292      	uxth	r2, r2
 801c3ec:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801c3f0:	fa0f f882 	sxth.w	r8, r2
 801c3f4:	4655      	mov	r5, sl
 801c3f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801c3fa:	9b03      	ldr	r3, [sp, #12]
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d054      	beq.n	801c4aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801c400:	9902      	ldr	r1, [sp, #8]
 801c402:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801c406:	f7fc fd83 	bl	8018f10 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c40a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c40e:	b1d8      	cbz	r0, 801c448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c410:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801c414:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801c418:	4576      	cmp	r6, lr
 801c41a:	dc26      	bgt.n	801c46a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c41c:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801c420:	44f4      	add	ip, lr
 801c422:	fa0f fc8c 	sxth.w	ip, ip
 801c426:	45e0      	cmp	r8, ip
 801c428:	db1f      	blt.n	801c46a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c42a:	428f      	cmp	r7, r1
 801c42c:	fa1f fc81 	uxth.w	ip, r1
 801c430:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801c434:	dc0f      	bgt.n	801c456 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801c436:	9805      	ldr	r0, [sp, #20]
 801c438:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801c43c:	eba0 0c0c 	sub.w	ip, r0, ip
 801c440:	eba1 010c 	sub.w	r1, r1, ip
 801c444:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801c448:	4620      	mov	r0, r4
 801c44a:	9903      	ldr	r1, [sp, #12]
 801c44c:	3901      	subs	r1, #1
 801c44e:	9103      	str	r1, [sp, #12]
 801c450:	3d08      	subs	r5, #8
 801c452:	4604      	mov	r4, r0
 801c454:	e7cf      	b.n	801c3f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801c456:	4461      	add	r1, ip
 801c458:	b209      	sxth	r1, r1
 801c45a:	4549      	cmp	r1, r9
 801c45c:	dcf5      	bgt.n	801c44a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c45e:	9904      	ldr	r1, [sp, #16]
 801c460:	eba1 0c0c 	sub.w	ip, r1, ip
 801c464:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801c468:	e7ee      	b.n	801c448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c46a:	428f      	cmp	r7, r1
 801c46c:	dced      	bgt.n	801c44a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c46e:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801c472:	4461      	add	r1, ip
 801c474:	b209      	sxth	r1, r1
 801c476:	4589      	cmp	r9, r1
 801c478:	dbe7      	blt.n	801c44a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c47a:	4576      	cmp	r6, lr
 801c47c:	fa1f fc8e 	uxth.w	ip, lr
 801c480:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801c484:	dc08      	bgt.n	801c498 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801c486:	eba2 0c0c 	sub.w	ip, r2, ip
 801c48a:	eba1 010c 	sub.w	r1, r1, ip
 801c48e:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801c492:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801c496:	e7d7      	b.n	801c448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c498:	4461      	add	r1, ip
 801c49a:	b209      	sxth	r1, r1
 801c49c:	4588      	cmp	r8, r1
 801c49e:	dbd4      	blt.n	801c44a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c4a0:	eba3 0c0c 	sub.w	ip, r3, ip
 801c4a4:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801c4a8:	e7ce      	b.n	801c448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c4aa:	2c00      	cmp	r4, #0
 801c4ac:	f000 816a 	beq.w	801c784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801c4b0:	9b00      	ldr	r3, [sp, #0]
 801c4b2:	3301      	adds	r3, #1
 801c4b4:	f000 8166 	beq.w	801c784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801c4b8:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801c4bc:	4621      	mov	r1, r4
 801c4be:	9802      	ldr	r0, [sp, #8]
 801c4c0:	f7ff fd78 	bl	801bfb4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c4c4:	b120      	cbz	r0, 801c4d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801c4c6:	f8bd 1000 	ldrh.w	r1, [sp]
 801c4ca:	9801      	ldr	r0, [sp, #4]
 801c4cc:	f7ff fe86 	bl	801c1dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c4d0:	9902      	ldr	r1, [sp, #8]
 801c4d2:	4620      	mov	r0, r4
 801c4d4:	f7fc fd1c 	bl	8018f10 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c4d8:	2800      	cmp	r0, #0
 801c4da:	f000 809b 	beq.w	801c614 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801c4de:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801c4e2:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801c4e6:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801c4ea:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801c4ee:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801c4f2:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801c4f6:	fa1f f288 	uxth.w	r2, r8
 801c4fa:	19d5      	adds	r5, r2, r7
 801c4fc:	fa1f f985 	uxth.w	r9, r5
 801c500:	fa0f f589 	sxth.w	r5, r9
 801c504:	b2a1      	uxth	r1, r4
 801c506:	440b      	add	r3, r1
 801c508:	9503      	str	r5, [sp, #12]
 801c50a:	45a0      	cmp	r8, r4
 801c50c:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801c510:	9507      	str	r5, [sp, #28]
 801c512:	b29b      	uxth	r3, r3
 801c514:	f340 809d 	ble.w	801c652 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801c518:	1a52      	subs	r2, r2, r1
 801c51a:	b292      	uxth	r2, r2
 801c51c:	4584      	cmp	ip, r0
 801c51e:	fa0f fe83 	sxth.w	lr, r3
 801c522:	b215      	sxth	r5, r2
 801c524:	dd2f      	ble.n	801c586 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801c526:	9e00      	ldr	r6, [sp, #0]
 801c528:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c52c:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801c530:	9e03      	ldr	r6, [sp, #12]
 801c532:	eba6 060e 	sub.w	r6, r6, lr
 801c536:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801c53a:	fa1f fc8c 	uxth.w	ip, ip
 801c53e:	b280      	uxth	r0, r0
 801c540:	ebac 0300 	sub.w	r3, ip, r0
 801c544:	448c      	add	ip, r1
 801c546:	4470      	add	r0, lr
 801c548:	b29b      	uxth	r3, r3
 801c54a:	fa0f fc8c 	sxth.w	ip, ip
 801c54e:	b200      	sxth	r0, r0
 801c550:	b21c      	sxth	r4, r3
 801c552:	ebac 0000 	sub.w	r0, ip, r0
 801c556:	4366      	muls	r6, r4
 801c558:	4368      	muls	r0, r5
 801c55a:	4286      	cmp	r6, r0
 801c55c:	db09      	blt.n	801c572 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801c55e:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801c562:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801c566:	4417      	add	r7, r2
 801c568:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c56c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801c570:	e685      	b.n	801c27e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c572:	440b      	add	r3, r1
 801c574:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801c578:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801c57c:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801c580:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c584:	e67b      	b.n	801c27e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c586:	9e03      	ldr	r6, [sp, #12]
 801c588:	45b6      	cmp	lr, r6
 801c58a:	da28      	bge.n	801c5de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801c58c:	9b00      	ldr	r3, [sp, #0]
 801c58e:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801c592:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801c596:	eb04 030c 	add.w	r3, r4, ip
 801c59a:	fa1f f883 	uxth.w	r8, r3
 801c59e:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801c5a2:	4403      	add	r3, r0
 801c5a4:	eba3 0308 	sub.w	r3, r3, r8
 801c5a8:	b29b      	uxth	r3, r3
 801c5aa:	fa0f f988 	sxth.w	r9, r8
 801c5ae:	eba0 000c 	sub.w	r0, r0, ip
 801c5b2:	fa0f f883 	sxth.w	r8, r3
 801c5b6:	eba6 060e 	sub.w	r6, r6, lr
 801c5ba:	4368      	muls	r0, r5
 801c5bc:	fb08 f606 	mul.w	r6, r8, r6
 801c5c0:	42b0      	cmp	r0, r6
 801c5c2:	dc06      	bgt.n	801c5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801c5c4:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801c5c8:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801c5cc:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801c5d0:	e7c9      	b.n	801c566 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801c5d2:	4423      	add	r3, r4
 801c5d4:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801c5d8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801c5dc:	e64f      	b.n	801c27e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c5de:	9807      	ldr	r0, [sp, #28]
 801c5e0:	eba3 0309 	sub.w	r3, r3, r9
 801c5e4:	b29b      	uxth	r3, r3
 801c5e6:	2806      	cmp	r0, #6
 801c5e8:	fa0f fc83 	sxth.w	ip, r3
 801c5ec:	d818      	bhi.n	801c620 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801c5ee:	4652      	mov	r2, sl
 801c5f0:	ab0a      	add	r3, sp, #40	; 0x28
 801c5f2:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801c5f6:	6851      	ldr	r1, [r2, #4]
 801c5f8:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801c5fc:	c303      	stmia	r3!, {r0, r1}
 801c5fe:	9b03      	ldr	r3, [sp, #12]
 801c600:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801c604:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801c608:	ab0a      	add	r3, sp, #40	; 0x28
 801c60a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c60e:	9801      	ldr	r0, [sp, #4]
 801c610:	f7ff fe06 	bl	801c220 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c614:	9b00      	ldr	r3, [sp, #0]
 801c616:	3b01      	subs	r3, #1
 801c618:	9300      	str	r3, [sp, #0]
 801c61a:	f1aa 0a08 	sub.w	sl, sl, #8
 801c61e:	e747      	b.n	801c4b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801c620:	9800      	ldr	r0, [sp, #0]
 801c622:	45ac      	cmp	ip, r5
 801c624:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801c628:	db0c      	blt.n	801c644 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801c62a:	4417      	add	r7, r2
 801c62c:	b2bf      	uxth	r7, r7
 801c62e:	4458      	add	r0, fp
 801c630:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801c634:	440f      	add	r7, r1
 801c636:	f8ad 4020 	strh.w	r4, [sp, #32]
 801c63a:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801c63e:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801c642:	e61c      	b.n	801c27e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c644:	4458      	add	r0, fp
 801c646:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801c64a:	443b      	add	r3, r7
 801c64c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801c650:	e615      	b.n	801c27e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c652:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801c656:	fa1f f18c 	uxth.w	r1, ip
 801c65a:	eb01 0e05 	add.w	lr, r1, r5
 801c65e:	b282      	uxth	r2, r0
 801c660:	fa1f fe8e 	uxth.w	lr, lr
 801c664:	9204      	str	r2, [sp, #16]
 801c666:	fa0f f28e 	sxth.w	r2, lr
 801c66a:	9205      	str	r2, [sp, #20]
 801c66c:	9e04      	ldr	r6, [sp, #16]
 801c66e:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801c672:	4432      	add	r2, r6
 801c674:	b292      	uxth	r2, r2
 801c676:	4584      	cmp	ip, r0
 801c678:	9206      	str	r2, [sp, #24]
 801c67a:	da26      	bge.n	801c6ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801c67c:	eba3 0309 	sub.w	r3, r3, r9
 801c680:	eba2 020e 	sub.w	r2, r2, lr
 801c684:	b29b      	uxth	r3, r3
 801c686:	b292      	uxth	r2, r2
 801c688:	fa0f fa83 	sxth.w	sl, r3
 801c68c:	b211      	sxth	r1, r2
 801c68e:	eba0 000c 	sub.w	r0, r0, ip
 801c692:	eba4 0408 	sub.w	r4, r4, r8
 801c696:	fb0a f000 	mul.w	r0, sl, r0
 801c69a:	434c      	muls	r4, r1
 801c69c:	42a0      	cmp	r0, r4
 801c69e:	9800      	ldr	r0, [sp, #0]
 801c6a0:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801c6a4:	dc06      	bgt.n	801c6b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801c6a6:	4458      	add	r0, fp
 801c6a8:	9a05      	ldr	r2, [sp, #20]
 801c6aa:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801c6ae:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801c6b2:	e7ca      	b.n	801c64a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801c6b4:	eb0b 0300 	add.w	r3, fp, r0
 801c6b8:	9903      	ldr	r1, [sp, #12]
 801c6ba:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801c6be:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801c6c2:	442a      	add	r2, r5
 801c6c4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801c6c8:	e5d9      	b.n	801c27e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c6ca:	9e04      	ldr	r6, [sp, #16]
 801c6cc:	9a03      	ldr	r2, [sp, #12]
 801c6ce:	1b89      	subs	r1, r1, r6
 801c6d0:	b21e      	sxth	r6, r3
 801c6d2:	b289      	uxth	r1, r1
 801c6d4:	4296      	cmp	r6, r2
 801c6d6:	fa0f fc81 	sxth.w	ip, r1
 801c6da:	dd26      	ble.n	801c72a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c6>
 801c6dc:	eba3 0309 	sub.w	r3, r3, r9
 801c6e0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801c6e4:	9e05      	ldr	r6, [sp, #20]
 801c6e6:	b29b      	uxth	r3, r3
 801c6e8:	eba6 0902 	sub.w	r9, r6, r2
 801c6ec:	b218      	sxth	r0, r3
 801c6ee:	eba4 0408 	sub.w	r4, r4, r8
 801c6f2:	fb0c f404 	mul.w	r4, ip, r4
 801c6f6:	fb00 f909 	mul.w	r9, r0, r9
 801c6fa:	9a00      	ldr	r2, [sp, #0]
 801c6fc:	454c      	cmp	r4, r9
 801c6fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801c702:	db03      	blt.n	801c70c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a8>
 801c704:	445a      	add	r2, fp
 801c706:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801c70a:	e79e      	b.n	801c64a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801c70c:	eb0b 0302 	add.w	r3, fp, r2
 801c710:	9a03      	ldr	r2, [sp, #12]
 801c712:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801c716:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801c71a:	4429      	add	r1, r5
 801c71c:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801c720:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c724:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801c728:	e5a9      	b.n	801c27e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c72a:	9b06      	ldr	r3, [sp, #24]
 801c72c:	9c07      	ldr	r4, [sp, #28]
 801c72e:	eba3 020e 	sub.w	r2, r3, lr
 801c732:	b292      	uxth	r2, r2
 801c734:	2c06      	cmp	r4, #6
 801c736:	b213      	sxth	r3, r2
 801c738:	d80d      	bhi.n	801c756 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f2>
 801c73a:	4651      	mov	r1, sl
 801c73c:	aa0a      	add	r2, sp, #40	; 0x28
 801c73e:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801c742:	6849      	ldr	r1, [r1, #4]
 801c744:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801c748:	9b05      	ldr	r3, [sp, #20]
 801c74a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801c74e:	c203      	stmia	r2!, {r0, r1}
 801c750:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801c754:	e758      	b.n	801c608 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801c756:	9c00      	ldr	r4, [sp, #0]
 801c758:	4563      	cmp	r3, ip
 801c75a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801c75e:	db0d      	blt.n	801c77c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x518>
 801c760:	4429      	add	r1, r5
 801c762:	9a04      	ldr	r2, [sp, #16]
 801c764:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c768:	b289      	uxth	r1, r1
 801c76a:	445c      	add	r4, fp
 801c76c:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801c770:	4411      	add	r1, r2
 801c772:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801c776:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801c77a:	e580      	b.n	801c27e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c77c:	445c      	add	r4, fp
 801c77e:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801c782:	e79e      	b.n	801c6c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801c784:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801c788:	2f07      	cmp	r7, #7
 801c78a:	d806      	bhi.n	801c79a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x536>
 801c78c:	ab08      	add	r3, sp, #32
 801c78e:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c792:	9801      	ldr	r0, [sp, #4]
 801c794:	f7ff fd44 	bl	801c220 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c798:	e5db      	b.n	801c352 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c79a:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801c79e:	f107 39ff 	add.w	r9, r7, #4294967295
 801c7a2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801c7a6:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801c7aa:	f04f 35ff 	mov.w	r5, #4294967295
 801c7ae:	2400      	movs	r4, #0
 801c7b0:	9304      	str	r3, [sp, #16]
 801c7b2:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801c7b6:	9300      	str	r3, [sp, #0]
 801c7b8:	f109 32ff 	add.w	r2, r9, #4294967295
 801c7bc:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801c7c0:	9303      	str	r3, [sp, #12]
 801c7c2:	4690      	mov	r8, r2
 801c7c4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c7c8:	f1b8 3fff 	cmp.w	r8, #4294967295
 801c7cc:	bf14      	ite	ne
 801c7ce:	9904      	ldrne	r1, [sp, #16]
 801c7d0:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801c7d4:	6818      	ldr	r0, [r3, #0]
 801c7d6:	9206      	str	r2, [sp, #24]
 801c7d8:	bf18      	it	ne
 801c7da:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801c7de:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801c7e2:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801c7e6:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801c7ea:	9305      	str	r3, [sp, #20]
 801c7ec:	fb16 f601 	smulbb	r6, r6, r1
 801c7f0:	6859      	ldr	r1, [r3, #4]
 801c7f2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c7f6:	4671      	mov	r1, lr
 801c7f8:	a80a      	add	r0, sp, #40	; 0x28
 801c7fa:	f7ff fbfd 	bl	801bff8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c7fe:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801c802:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801c806:	9b03      	ldr	r3, [sp, #12]
 801c808:	9a00      	ldr	r2, [sp, #0]
 801c80a:	fb11 f100 	smulbb	r1, r1, r0
 801c80e:	fb02 6603 	mla	r6, r2, r3, r6
 801c812:	1b8e      	subs	r6, r1, r6
 801c814:	2008      	movs	r0, #8
 801c816:	fb91 f1f0 	sdiv	r1, r1, r0
 801c81a:	42b1      	cmp	r1, r6
 801c81c:	dc21      	bgt.n	801c862 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801c81e:	4556      	cmp	r6, sl
 801c820:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801c824:	da03      	bge.n	801c82e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801c826:	b1e6      	cbz	r6, 801c862 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801c828:	46b2      	mov	sl, r6
 801c82a:	4645      	mov	r5, r8
 801c82c:	464c      	mov	r4, r9
 801c82e:	f108 38ff 	add.w	r8, r8, #4294967295
 801c832:	f118 0f02 	cmn.w	r8, #2
 801c836:	d1c7      	bne.n	801c7c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x564>
 801c838:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c83c:	f1a7 0708 	sub.w	r7, r7, #8
 801c840:	4691      	mov	r9, r2
 801c842:	d1b6      	bne.n	801c7b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 801c844:	9b01      	ldr	r3, [sp, #4]
 801c846:	b2a6      	uxth	r6, r4
 801c848:	00e4      	lsls	r4, r4, #3
 801c84a:	1918      	adds	r0, r3, r4
 801c84c:	1c6b      	adds	r3, r5, #1
 801c84e:	d10b      	bne.n	801c868 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 801c850:	4601      	mov	r1, r0
 801c852:	9802      	ldr	r0, [sp, #8]
 801c854:	f7ff fbd0 	bl	801bff8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c858:	4631      	mov	r1, r6
 801c85a:	9801      	ldr	r0, [sp, #4]
 801c85c:	f7ff fcbe 	bl	801c1dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c860:	e50d      	b.n	801c27e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c862:	4645      	mov	r5, r8
 801c864:	464c      	mov	r4, r9
 801c866:	e7ed      	b.n	801c844 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e0>
 801c868:	9b01      	ldr	r3, [sp, #4]
 801c86a:	00ed      	lsls	r5, r5, #3
 801c86c:	1959      	adds	r1, r3, r5
 801c86e:	f7ff fbc3 	bl	801bff8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c872:	9b02      	ldr	r3, [sp, #8]
 801c874:	cb03      	ldmia	r3!, {r0, r1}
 801c876:	445d      	add	r5, fp
 801c878:	445c      	add	r4, fp
 801c87a:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801c87e:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801c882:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801c886:	9b02      	ldr	r3, [sp, #8]
 801c888:	6861      	ldr	r1, [r4, #4]
 801c88a:	c303      	stmia	r3!, {r0, r1}
 801c88c:	e7e4      	b.n	801c858 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f4>
	...

0801c890 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801c890:	b530      	push	{r4, r5, lr}
 801c892:	4b1d      	ldr	r3, [pc, #116]	; (801c908 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801c894:	b085      	sub	sp, #20
 801c896:	460c      	mov	r4, r1
 801c898:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c89c:	4b1b      	ldr	r3, [pc, #108]	; (801c90c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801c89e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c8a2:	2100      	movs	r1, #0
 801c8a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c8a8:	9100      	str	r1, [sp, #0]
 801c8aa:	4605      	mov	r5, r0
 801c8ac:	6861      	ldr	r1, [r4, #4]
 801c8ae:	6820      	ldr	r0, [r4, #0]
 801c8b0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c8b4:	ab02      	add	r3, sp, #8
 801c8b6:	c303      	stmia	r3!, {r0, r1}
 801c8b8:	4669      	mov	r1, sp
 801c8ba:	a802      	add	r0, sp, #8
 801c8bc:	f7fa fe14 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 801c8c0:	ab02      	add	r3, sp, #8
 801c8c2:	cb03      	ldmia	r3!, {r0, r1}
 801c8c4:	4b12      	ldr	r3, [pc, #72]	; (801c910 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801c8c6:	6020      	str	r0, [r4, #0]
 801c8c8:	6818      	ldr	r0, [r3, #0]
 801c8ca:	6061      	str	r1, [r4, #4]
 801c8cc:	b138      	cbz	r0, 801c8de <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c8ce:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801c8d2:	b133      	cbz	r3, 801c8e2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801c8d4:	6821      	ldr	r1, [r4, #0]
 801c8d6:	6862      	ldr	r2, [r4, #4]
 801c8d8:	4628      	mov	r0, r5
 801c8da:	f7ff fcc3 	bl	801c264 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c8de:	b005      	add	sp, #20
 801c8e0:	bd30      	pop	{r4, r5, pc}
 801c8e2:	6803      	ldr	r3, [r0, #0]
 801c8e4:	4621      	mov	r1, r4
 801c8e6:	689b      	ldr	r3, [r3, #8]
 801c8e8:	4798      	blx	r3
 801c8ea:	4b0a      	ldr	r3, [pc, #40]	; (801c914 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801c8ec:	6818      	ldr	r0, [r3, #0]
 801c8ee:	b118      	cbz	r0, 801c8f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801c8f0:	6803      	ldr	r3, [r0, #0]
 801c8f2:	4621      	mov	r1, r4
 801c8f4:	689b      	ldr	r3, [r3, #8]
 801c8f6:	4798      	blx	r3
 801c8f8:	4b07      	ldr	r3, [pc, #28]	; (801c918 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801c8fa:	6818      	ldr	r0, [r3, #0]
 801c8fc:	6803      	ldr	r3, [r0, #0]
 801c8fe:	4621      	mov	r1, r4
 801c900:	69db      	ldr	r3, [r3, #28]
 801c902:	4798      	blx	r3
 801c904:	e7eb      	b.n	801c8de <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c906:	bf00      	nop
 801c908:	20009770 	.word	0x20009770
 801c90c:	20009772 	.word	0x20009772
 801c910:	200097b8 	.word	0x200097b8
 801c914:	200097b4 	.word	0x200097b4
 801c918:	2000977c 	.word	0x2000977c

0801c91c <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801c91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c920:	4604      	mov	r4, r0
 801c922:	b09b      	sub	sp, #108	; 0x6c
 801c924:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801c928:	b129      	cbz	r1, 801c936 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801c92a:	2300      	movs	r3, #0
 801c92c:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801c930:	b01b      	add	sp, #108	; 0x6c
 801c932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c936:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801c93a:	4630      	mov	r0, r6
 801c93c:	f7fa fe17 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c940:	4605      	mov	r5, r0
 801c942:	b940      	cbnz	r0, 801c956 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801c944:	e896 0006 	ldmia.w	r6, {r1, r2}
 801c948:	4620      	mov	r0, r4
 801c94a:	f7ff fc8b 	bl	801c264 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c94e:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801c952:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801c956:	4ba7      	ldr	r3, [pc, #668]	; (801cbf4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801c958:	681b      	ldr	r3, [r3, #0]
 801c95a:	b33b      	cbz	r3, 801c9ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801c95c:	4da6      	ldr	r5, [pc, #664]	; (801cbf8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801c95e:	4628      	mov	r0, r5
 801c960:	f7fa fe05 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c964:	4606      	mov	r6, r0
 801c966:	bb08      	cbnz	r0, 801c9ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801c968:	4628      	mov	r0, r5
 801c96a:	f7ff f9b7 	bl	801bcdc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c96e:	6829      	ldr	r1, [r5, #0]
 801c970:	686a      	ldr	r2, [r5, #4]
 801c972:	4620      	mov	r0, r4
 801c974:	f7ff fc76 	bl	801c264 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c978:	802e      	strh	r6, [r5, #0]
 801c97a:	806e      	strh	r6, [r5, #2]
 801c97c:	80ae      	strh	r6, [r5, #4]
 801c97e:	80ee      	strh	r6, [r5, #6]
 801c980:	4f9e      	ldr	r7, [pc, #632]	; (801cbfc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801c982:	a809      	add	r0, sp, #36	; 0x24
 801c984:	f7ff fbd7 	bl	801c136 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c988:	883d      	ldrh	r5, [r7, #0]
 801c98a:	462e      	mov	r6, r5
 801c98c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c990:	42b3      	cmp	r3, r6
 801c992:	d910      	bls.n	801c9b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801c994:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c998:	a809      	add	r0, sp, #36	; 0x24
 801c99a:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801c99e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801c9a2:	3601      	adds	r6, #1
 801c9a4:	f7ff fc3c 	bl	801c220 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c9a8:	b2b6      	uxth	r6, r6
 801c9aa:	e7ef      	b.n	801c98c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801c9ac:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d1e5      	bne.n	801c980 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801c9b4:	e7bc      	b.n	801c930 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c9b6:	462e      	mov	r6, r5
 801c9b8:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801c9bc:	42b3      	cmp	r3, r6
 801c9be:	d90b      	bls.n	801c9d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801c9c0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c9c4:	4620      	mov	r0, r4
 801c9c6:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801c9ca:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801c9ce:	3601      	adds	r6, #1
 801c9d0:	f7ff fc48 	bl	801c264 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c9d4:	b2b6      	uxth	r6, r6
 801c9d6:	e7ef      	b.n	801c9b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801c9d8:	4a89      	ldr	r2, [pc, #548]	; (801cc00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801c9da:	6813      	ldr	r3, [r2, #0]
 801c9dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801c9e0:	2b01      	cmp	r3, #1
 801c9e2:	4690      	mov	r8, r2
 801c9e4:	f040 8094 	bne.w	801cb10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801c9e8:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801c9ec:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801c9f0:	33aa      	adds	r3, #170	; 0xaa
 801c9f2:	f04f 0900 	mov.w	r9, #0
 801c9f6:	42a8      	cmp	r0, r5
 801c9f8:	f103 0308 	add.w	r3, r3, #8
 801c9fc:	dd0a      	ble.n	801ca14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801c9fe:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801ca02:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801ca06:	440a      	add	r2, r1
 801ca08:	b212      	sxth	r2, r2
 801ca0a:	4591      	cmp	r9, r2
 801ca0c:	bfb8      	it	lt
 801ca0e:	4691      	movlt	r9, r2
 801ca10:	3501      	adds	r5, #1
 801ca12:	e7f0      	b.n	801c9f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801ca14:	4b7b      	ldr	r3, [pc, #492]	; (801cc04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801ca16:	4e7c      	ldr	r6, [pc, #496]	; (801cc08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801ca18:	881d      	ldrh	r5, [r3, #0]
 801ca1a:	2300      	movs	r3, #0
 801ca1c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801ca20:	2d0f      	cmp	r5, #15
 801ca22:	bf8c      	ite	hi
 801ca24:	08ed      	lsrhi	r5, r5, #3
 801ca26:	2501      	movls	r5, #1
 801ca28:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801ca2c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801ca30:	f8d8 0000 	ldr.w	r0, [r8]
 801ca34:	440b      	add	r3, r1
 801ca36:	b21b      	sxth	r3, r3
 801ca38:	4599      	cmp	r9, r3
 801ca3a:	6802      	ldr	r2, [r0, #0]
 801ca3c:	dd4b      	ble.n	801cad6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801ca3e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801ca42:	4798      	blx	r3
 801ca44:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ca48:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801ca4c:	4413      	add	r3, r2
 801ca4e:	b21b      	sxth	r3, r3
 801ca50:	195a      	adds	r2, r3, r5
 801ca52:	4290      	cmp	r0, r2
 801ca54:	da07      	bge.n	801ca66 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801ca56:	4581      	cmp	r9, r0
 801ca58:	dd05      	ble.n	801ca66 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801ca5a:	4298      	cmp	r0, r3
 801ca5c:	da33      	bge.n	801cac6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	dd31      	ble.n	801cac6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801ca62:	4648      	mov	r0, r9
 801ca64:	e004      	b.n	801ca70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801ca66:	4298      	cmp	r0, r3
 801ca68:	dbfb      	blt.n	801ca62 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801ca6a:	4548      	cmp	r0, r9
 801ca6c:	bfa8      	it	ge
 801ca6e:	4648      	movge	r0, r9
 801ca70:	f9b6 2000 	ldrsh.w	r2, [r6]
 801ca74:	f8b7 a000 	ldrh.w	sl, [r7]
 801ca78:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ca7c:	2100      	movs	r1, #0
 801ca7e:	1ac0      	subs	r0, r0, r3
 801ca80:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ca84:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ca88:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ca8c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ca90:	4553      	cmp	r3, sl
 801ca92:	d9c9      	bls.n	801ca28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801ca94:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801ca98:	ab07      	add	r3, sp, #28
 801ca9a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ca9e:	6851      	ldr	r1, [r2, #4]
 801caa0:	c303      	stmia	r3!, {r0, r1}
 801caa2:	a807      	add	r0, sp, #28
 801caa4:	a905      	add	r1, sp, #20
 801caa6:	f7fa fd1f 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 801caaa:	a807      	add	r0, sp, #28
 801caac:	f7fa fd5f 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801cab0:	b920      	cbnz	r0, 801cabc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801cab2:	6823      	ldr	r3, [r4, #0]
 801cab4:	a907      	add	r1, sp, #28
 801cab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cab8:	4620      	mov	r0, r4
 801caba:	4798      	blx	r3
 801cabc:	f10a 0a01 	add.w	sl, sl, #1
 801cac0:	fa1f fa8a 	uxth.w	sl, sl
 801cac4:	e7e2      	b.n	801ca8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801cac6:	f8d8 0000 	ldr.w	r0, [r8]
 801caca:	6803      	ldr	r3, [r0, #0]
 801cacc:	2101      	movs	r1, #1
 801cace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cad2:	4798      	blx	r3
 801cad4:	e7a8      	b.n	801ca28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801cad6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801cad8:	4798      	blx	r3
 801cada:	4b4c      	ldr	r3, [pc, #304]	; (801cc0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801cadc:	781b      	ldrb	r3, [r3, #0]
 801cade:	2b00      	cmp	r3, #0
 801cae0:	f43f af26 	beq.w	801c930 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801cae4:	2300      	movs	r3, #0
 801cae6:	883d      	ldrh	r5, [r7, #0]
 801cae8:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801caec:	34ea      	adds	r4, #234	; 0xea
 801caee:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801caf2:	42ab      	cmp	r3, r5
 801caf4:	f67f af1c 	bls.w	801c930 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801caf8:	ab1a      	add	r3, sp, #104	; 0x68
 801cafa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801cafe:	3b44      	subs	r3, #68	; 0x44
 801cb00:	e893 0006 	ldmia.w	r3, {r1, r2}
 801cb04:	4620      	mov	r0, r4
 801cb06:	3501      	adds	r5, #1
 801cb08:	f7ff fb8a 	bl	801c220 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801cb0c:	b2ad      	uxth	r5, r5
 801cb0e:	e7ee      	b.n	801caee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801cb10:	2b02      	cmp	r3, #2
 801cb12:	f040 813e 	bne.w	801cd92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x476>
 801cb16:	4b3e      	ldr	r3, [pc, #248]	; (801cc10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>)
 801cb18:	781b      	ldrb	r3, [r3, #0]
 801cb1a:	2b01      	cmp	r3, #1
 801cb1c:	d02c      	beq.n	801cb78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801cb1e:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801cb22:	883a      	ldrh	r2, [r7, #0]
 801cb24:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801cb28:	3201      	adds	r2, #1
 801cb2a:	b292      	uxth	r2, r2
 801cb2c:	2900      	cmp	r1, #0
 801cb2e:	d0d4      	beq.n	801cada <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801cb30:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801cb34:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801cb38:	441d      	add	r5, r3
 801cb3a:	b22d      	sxth	r5, r5
 801cb3c:	4610      	mov	r0, r2
 801cb3e:	f04f 0a00 	mov.w	sl, #0
 801cb42:	b283      	uxth	r3, r0
 801cb44:	4299      	cmp	r1, r3
 801cb46:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801cb4a:	f240 80c5 	bls.w	801ccd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3bc>
 801cb4e:	4426      	add	r6, r4
 801cb50:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801cb54:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801cb58:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801cb5c:	4573      	cmp	r3, lr
 801cb5e:	4684      	mov	ip, r0
 801cb60:	f340 80a7 	ble.w	801ccb2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x396>
 801cb64:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801cb68:	4475      	add	r5, lr
 801cb6a:	b22d      	sxth	r5, r5
 801cb6c:	429d      	cmp	r5, r3
 801cb6e:	bfa8      	it	ge
 801cb70:	461d      	movge	r5, r3
 801cb72:	3001      	adds	r0, #1
 801cb74:	46e2      	mov	sl, ip
 801cb76:	e7e4      	b.n	801cb42 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801cb78:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801cb7c:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801cb80:	f1bb 0f00 	cmp.w	fp, #0
 801cb84:	d0a9      	beq.n	801cada <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801cb86:	883b      	ldrh	r3, [r7, #0]
 801cb88:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801cb8c:	3301      	adds	r3, #1
 801cb8e:	b29b      	uxth	r3, r3
 801cb90:	2600      	movs	r6, #0
 801cb92:	b299      	uxth	r1, r3
 801cb94:	458b      	cmp	fp, r1
 801cb96:	ea4f 05c6 	mov.w	r5, r6, lsl #3
 801cb9a:	d93b      	bls.n	801cc14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f8>
 801cb9c:	4425      	add	r5, r4
 801cb9e:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801cba2:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801cba6:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801cbaa:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801cbae:	4408      	add	r0, r1
 801cbb0:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801cbb4:	4471      	add	r1, lr
 801cbb6:	b200      	sxth	r0, r0
 801cbb8:	b209      	sxth	r1, r1
 801cbba:	4288      	cmp	r0, r1
 801cbbc:	469c      	mov	ip, r3
 801cbbe:	da06      	bge.n	801cbce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b2>
 801cbc0:	4586      	cmp	lr, r0
 801cbc2:	4672      	mov	r2, lr
 801cbc4:	bfb8      	it	lt
 801cbc6:	4602      	movlt	r2, r0
 801cbc8:	3301      	adds	r3, #1
 801cbca:	4666      	mov	r6, ip
 801cbcc:	e7e1      	b.n	801cb92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801cbce:	d10b      	bne.n	801cbe8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2cc>
 801cbd0:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801cbd4:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801cbd8:	458c      	cmp	ip, r1
 801cbda:	bfb4      	ite	lt
 801cbdc:	469c      	movlt	ip, r3
 801cbde:	46b4      	movge	ip, r6
 801cbe0:	4572      	cmp	r2, lr
 801cbe2:	bfb8      	it	lt
 801cbe4:	4672      	movlt	r2, lr
 801cbe6:	e7ef      	b.n	801cbc8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ac>
 801cbe8:	428a      	cmp	r2, r1
 801cbea:	bfb8      	it	lt
 801cbec:	460a      	movlt	r2, r1
 801cbee:	46b4      	mov	ip, r6
 801cbf0:	e7ea      	b.n	801cbc8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ac>
 801cbf2:	bf00      	nop
 801cbf4:	200097b4 	.word	0x200097b4
 801cbf8:	200097c0 	.word	0x200097c0
 801cbfc:	20000020 	.word	0x20000020
 801cc00:	2000977c 	.word	0x2000977c
 801cc04:	20009772 	.word	0x20009772
 801cc08:	20009770 	.word	0x20009770
 801cc0c:	2000977a 	.word	0x2000977a
 801cc10:	20009774 	.word	0x20009774
 801cc14:	1961      	adds	r1, r4, r5
 801cc16:	ab07      	add	r3, sp, #28
 801cc18:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801cc1c:	6849      	ldr	r1, [r1, #4]
 801cc1e:	c303      	stmia	r3!, {r0, r1}
 801cc20:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801cc24:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801cc28:	2b13      	cmp	r3, #19
 801cc2a:	bfd8      	it	le
 801cc2c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801cc30:	f8ad 201c 	strh.w	r2, [sp, #28]
 801cc34:	440b      	add	r3, r1
 801cc36:	1a9b      	subs	r3, r3, r2
 801cc38:	a807      	add	r0, sp, #28
 801cc3a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801cc3e:	f7ff f867 	bl	801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cc42:	a807      	add	r0, sp, #28
 801cc44:	f7fa fc93 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801cc48:	2800      	cmp	r0, #0
 801cc4a:	d197      	bne.n	801cb7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801cc4c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801cc50:	f8d8 0000 	ldr.w	r0, [r8]
 801cc54:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801cc58:	f8d0 e000 	ldr.w	lr, [r0]
 801cc5c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801cc60:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801cc64:	f1bc 0f14 	cmp.w	ip, #20
 801cc68:	bfa8      	it	ge
 801cc6a:	f04f 0c14 	movge.w	ip, #20
 801cc6e:	fa1f fc8c 	uxth.w	ip, ip
 801cc72:	f8cd c000 	str.w	ip, [sp]
 801cc76:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 801cc7a:	47d0      	blx	sl
 801cc7c:	4682      	mov	sl, r0
 801cc7e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801cc82:	a807      	add	r0, sp, #28
 801cc84:	f7ff f82a 	bl	801bcdc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801cc88:	6823      	ldr	r3, [r4, #0]
 801cc8a:	4425      	add	r5, r4
 801cc8c:	4620      	mov	r0, r4
 801cc8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cc90:	a907      	add	r1, sp, #28
 801cc92:	4798      	blx	r3
 801cc94:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801cc98:	eba0 000a 	sub.w	r0, r0, sl
 801cc9c:	b200      	sxth	r0, r0
 801cc9e:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801cca2:	2800      	cmp	r0, #0
 801cca4:	f47f af6a 	bne.w	801cb7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801cca8:	b2b1      	uxth	r1, r6
 801ccaa:	4648      	mov	r0, r9
 801ccac:	f7ff fa96 	bl	801c1dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ccb0:	e764      	b.n	801cb7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801ccb2:	d10c      	bne.n	801ccce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b2>
 801ccb4:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801ccb8:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801ccbc:	45b4      	cmp	ip, r6
 801ccbe:	bfb4      	ite	lt
 801ccc0:	4684      	movlt	ip, r0
 801ccc2:	46d4      	movge	ip, sl
 801ccc4:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801ccc8:	4433      	add	r3, r6
 801ccca:	b21b      	sxth	r3, r3
 801cccc:	e74e      	b.n	801cb6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801ccce:	4575      	cmp	r5, lr
 801ccd0:	bfa8      	it	ge
 801ccd2:	4675      	movge	r5, lr
 801ccd4:	46d4      	mov	ip, sl
 801ccd6:	e74c      	b.n	801cb72 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801ccd8:	eb0b 0006 	add.w	r0, fp, r6
 801ccdc:	4426      	add	r6, r4
 801ccde:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801cce2:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801cce6:	f1b9 0f13 	cmp.w	r9, #19
 801ccea:	bfde      	ittt	le
 801ccec:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801ccf0:	444d      	addle	r5, r9
 801ccf2:	b22d      	sxthle	r5, r5
 801ccf4:	f7fa fc3b 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801ccf8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801ccfc:	2800      	cmp	r0, #0
 801ccfe:	f47f af15 	bne.w	801cb2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801cd02:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801cd06:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801cd0a:	eba5 050c 	sub.w	r5, r5, ip
 801cd0e:	fa1f f28c 	uxth.w	r2, ip
 801cd12:	fa1f f989 	uxth.w	r9, r9
 801cd16:	eb02 0009 	add.w	r0, r2, r9
 801cd1a:	2d14      	cmp	r5, #20
 801cd1c:	bfa8      	it	ge
 801cd1e:	2514      	movge	r5, #20
 801cd20:	b200      	sxth	r0, r0
 801cd22:	fa1f fe85 	uxth.w	lr, r5
 801cd26:	eba0 000c 	sub.w	r0, r0, ip
 801cd2a:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801cd2e:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801cd32:	f8ad 101c 	strh.w	r1, [sp, #28]
 801cd36:	4586      	cmp	lr, r0
 801cd38:	f8d8 0000 	ldr.w	r0, [r8]
 801cd3c:	f8ad c01e 	strh.w	ip, [sp, #30]
 801cd40:	f8ad 3020 	strh.w	r3, [sp, #32]
 801cd44:	bfb8      	it	lt
 801cd46:	46f1      	movlt	r9, lr
 801cd48:	6805      	ldr	r5, [r0, #0]
 801cd4a:	f8cd 9000 	str.w	r9, [sp]
 801cd4e:	b29b      	uxth	r3, r3
 801cd50:	b289      	uxth	r1, r1
 801cd52:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 801cd56:	47a8      	blx	r5
 801cd58:	6823      	ldr	r3, [r4, #0]
 801cd5a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801cd5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cd60:	a907      	add	r1, sp, #28
 801cd62:	4620      	mov	r0, r4
 801cd64:	4798      	blx	r3
 801cd66:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801cd6a:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801cd6e:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801cd72:	1a5b      	subs	r3, r3, r1
 801cd74:	440a      	add	r2, r1
 801cd76:	b21b      	sxth	r3, r3
 801cd78:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801cd7c:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	f47f aece 	bne.w	801cb22 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801cd86:	fa1f f18a 	uxth.w	r1, sl
 801cd8a:	4658      	mov	r0, fp
 801cd8c:	f7ff fa26 	bl	801c1dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cd90:	e6c7      	b.n	801cb22 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801cd92:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801cd96:	42ab      	cmp	r3, r5
 801cd98:	f67f ae9f 	bls.w	801cada <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801cd9c:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801cda0:	ab07      	add	r3, sp, #28
 801cda2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801cda6:	6851      	ldr	r1, [r2, #4]
 801cda8:	c303      	stmia	r3!, {r0, r1}
 801cdaa:	a807      	add	r0, sp, #28
 801cdac:	f7fa fbdf 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801cdb0:	b920      	cbnz	r0, 801cdbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x4a0>
 801cdb2:	6823      	ldr	r3, [r4, #0]
 801cdb4:	a907      	add	r1, sp, #28
 801cdb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cdb8:	4620      	mov	r0, r4
 801cdba:	4798      	blx	r3
 801cdbc:	3501      	adds	r5, #1
 801cdbe:	b2ad      	uxth	r5, r5
 801cdc0:	e7e7      	b.n	801cd92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x476>
 801cdc2:	bf00      	nop

0801cdc4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801cdc4:	4b03      	ldr	r3, [pc, #12]	; (801cdd4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801cdc6:	2200      	movs	r2, #0
 801cdc8:	801a      	strh	r2, [r3, #0]
 801cdca:	805a      	strh	r2, [r3, #2]
 801cdcc:	809a      	strh	r2, [r3, #4]
 801cdce:	80da      	strh	r2, [r3, #6]
 801cdd0:	4770      	bx	lr
 801cdd2:	bf00      	nop
 801cdd4:	200097c0 	.word	0x200097c0

0801cdd8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cddc:	4606      	mov	r6, r0
 801cdde:	b09d      	sub	sp, #116	; 0x74
 801cde0:	a803      	add	r0, sp, #12
 801cde2:	4614      	mov	r4, r2
 801cde4:	468a      	mov	sl, r1
 801cde6:	461d      	mov	r5, r3
 801cde8:	f000 fe3d 	bl	801da66 <_ZN8touchgfx12TextProviderC1Ev>
 801cdec:	6833      	ldr	r3, [r6, #0]
 801cdee:	4630      	mov	r0, r6
 801cdf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cdf2:	4798      	blx	r3
 801cdf4:	6833      	ldr	r3, [r6, #0]
 801cdf6:	4607      	mov	r7, r0
 801cdf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cdfa:	4630      	mov	r0, r6
 801cdfc:	4798      	blx	r3
 801cdfe:	462a      	mov	r2, r5
 801ce00:	9000      	str	r0, [sp, #0]
 801ce02:	4621      	mov	r1, r4
 801ce04:	463b      	mov	r3, r7
 801ce06:	a803      	add	r0, sp, #12
 801ce08:	f000 fe80 	bl	801db0c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ce0c:	2500      	movs	r5, #0
 801ce0e:	462c      	mov	r4, r5
 801ce10:	46a9      	mov	r9, r5
 801ce12:	46a8      	mov	r8, r5
 801ce14:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801ce18:	2300      	movs	r3, #0
 801ce1a:	9302      	str	r3, [sp, #8]
 801ce1c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801ce20:	429c      	cmp	r4, r3
 801ce22:	d002      	beq.n	801ce2a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801ce24:	455c      	cmp	r4, fp
 801ce26:	bf18      	it	ne
 801ce28:	4625      	movne	r5, r4
 801ce2a:	ab02      	add	r3, sp, #8
 801ce2c:	4632      	mov	r2, r6
 801ce2e:	4651      	mov	r1, sl
 801ce30:	a803      	add	r0, sp, #12
 801ce32:	f001 f96b 	bl	801e10c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ce36:	4604      	mov	r4, r0
 801ce38:	b108      	cbz	r0, 801ce3e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801ce3a:	280a      	cmp	r0, #10
 801ce3c:	d10a      	bne.n	801ce54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801ce3e:	45c1      	cmp	r9, r8
 801ce40:	bf38      	it	cc
 801ce42:	46c1      	movcc	r9, r8
 801ce44:	f04f 0800 	mov.w	r8, #0
 801ce48:	2c00      	cmp	r4, #0
 801ce4a:	d1e5      	bne.n	801ce18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ce4c:	4648      	mov	r0, r9
 801ce4e:	b01d      	add	sp, #116	; 0x74
 801ce50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce54:	9a02      	ldr	r2, [sp, #8]
 801ce56:	2a00      	cmp	r2, #0
 801ce58:	d0de      	beq.n	801ce18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ce5a:	7b57      	ldrb	r7, [r2, #13]
 801ce5c:	6833      	ldr	r3, [r6, #0]
 801ce5e:	8894      	ldrh	r4, [r2, #4]
 801ce60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce62:	007f      	lsls	r7, r7, #1
 801ce64:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801ce68:	7a97      	ldrb	r7, [r2, #10]
 801ce6a:	4629      	mov	r1, r5
 801ce6c:	4307      	orrs	r7, r0
 801ce6e:	4630      	mov	r0, r6
 801ce70:	4798      	blx	r3
 801ce72:	4438      	add	r0, r7
 801ce74:	4480      	add	r8, r0
 801ce76:	fa1f f888 	uxth.w	r8, r8
 801ce7a:	e7e5      	b.n	801ce48 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801ce7c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801ce7c:	b508      	push	{r3, lr}
 801ce7e:	6803      	ldr	r3, [r0, #0]
 801ce80:	68db      	ldr	r3, [r3, #12]
 801ce82:	4798      	blx	r3
 801ce84:	b128      	cbz	r0, 801ce92 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801ce86:	7b43      	ldrb	r3, [r0, #13]
 801ce88:	7a80      	ldrb	r0, [r0, #10]
 801ce8a:	005b      	lsls	r3, r3, #1
 801ce8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ce90:	4318      	orrs	r0, r3
 801ce92:	bd08      	pop	{r3, pc}

0801ce94 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801ce94:	b40e      	push	{r1, r2, r3}
 801ce96:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce98:	b09e      	sub	sp, #120	; 0x78
 801ce9a:	ab23      	add	r3, sp, #140	; 0x8c
 801ce9c:	4605      	mov	r5, r0
 801ce9e:	f853 4b04 	ldr.w	r4, [r3], #4
 801cea2:	9303      	str	r3, [sp, #12]
 801cea4:	a805      	add	r0, sp, #20
 801cea6:	f000 fdde 	bl	801da66 <_ZN8touchgfx12TextProviderC1Ev>
 801ceaa:	682b      	ldr	r3, [r5, #0]
 801ceac:	4628      	mov	r0, r5
 801ceae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ceb0:	4798      	blx	r3
 801ceb2:	682b      	ldr	r3, [r5, #0]
 801ceb4:	4606      	mov	r6, r0
 801ceb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ceb8:	4628      	mov	r0, r5
 801ceba:	4798      	blx	r3
 801cebc:	4633      	mov	r3, r6
 801cebe:	ae1e      	add	r6, sp, #120	; 0x78
 801cec0:	4621      	mov	r1, r4
 801cec2:	9000      	str	r0, [sp, #0]
 801cec4:	9a03      	ldr	r2, [sp, #12]
 801cec6:	2400      	movs	r4, #0
 801cec8:	a805      	add	r0, sp, #20
 801ceca:	f000 fe1f 	bl	801db0c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cece:	f846 4d68 	str.w	r4, [r6, #-104]!
 801ced2:	462a      	mov	r2, r5
 801ced4:	4633      	mov	r3, r6
 801ced6:	4621      	mov	r1, r4
 801ced8:	a805      	add	r0, sp, #20
 801ceda:	f001 f917 	bl	801e10c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cede:	b1f0      	cbz	r0, 801cf1e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801cee0:	280a      	cmp	r0, #10
 801cee2:	d018      	beq.n	801cf16 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801cee4:	9f04      	ldr	r7, [sp, #16]
 801cee6:	b1b7      	cbz	r7, 801cf16 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801cee8:	7b78      	ldrb	r0, [r7, #13]
 801ceea:	7a3b      	ldrb	r3, [r7, #8]
 801ceec:	88aa      	ldrh	r2, [r5, #4]
 801ceee:	00c1      	lsls	r1, r0, #3
 801cef0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cef4:	4319      	orrs	r1, r3
 801cef6:	0643      	lsls	r3, r0, #25
 801cef8:	bf44      	itt	mi
 801cefa:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801cefe:	b219      	sxthmi	r1, r3
 801cf00:	0100      	lsls	r0, r0, #4
 801cf02:	79fb      	ldrb	r3, [r7, #7]
 801cf04:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801cf08:	4303      	orrs	r3, r0
 801cf0a:	4413      	add	r3, r2
 801cf0c:	1a5b      	subs	r3, r3, r1
 801cf0e:	b29b      	uxth	r3, r3
 801cf10:	42a3      	cmp	r3, r4
 801cf12:	bfc8      	it	gt
 801cf14:	b21c      	sxthgt	r4, r3
 801cf16:	4633      	mov	r3, r6
 801cf18:	462a      	mov	r2, r5
 801cf1a:	2100      	movs	r1, #0
 801cf1c:	e7dc      	b.n	801ced8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801cf1e:	b2a0      	uxth	r0, r4
 801cf20:	b01e      	add	sp, #120	; 0x78
 801cf22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cf26:	b003      	add	sp, #12
 801cf28:	4770      	bx	lr

0801cf2a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801cf2a:	b40e      	push	{r1, r2, r3}
 801cf2c:	b570      	push	{r4, r5, r6, lr}
 801cf2e:	b09d      	sub	sp, #116	; 0x74
 801cf30:	ab21      	add	r3, sp, #132	; 0x84
 801cf32:	4604      	mov	r4, r0
 801cf34:	f853 5b04 	ldr.w	r5, [r3], #4
 801cf38:	9302      	str	r3, [sp, #8]
 801cf3a:	a803      	add	r0, sp, #12
 801cf3c:	f000 fd93 	bl	801da66 <_ZN8touchgfx12TextProviderC1Ev>
 801cf40:	6823      	ldr	r3, [r4, #0]
 801cf42:	4620      	mov	r0, r4
 801cf44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cf46:	4798      	blx	r3
 801cf48:	6823      	ldr	r3, [r4, #0]
 801cf4a:	4606      	mov	r6, r0
 801cf4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf4e:	4620      	mov	r0, r4
 801cf50:	4798      	blx	r3
 801cf52:	4633      	mov	r3, r6
 801cf54:	9000      	str	r0, [sp, #0]
 801cf56:	9a02      	ldr	r2, [sp, #8]
 801cf58:	4629      	mov	r1, r5
 801cf5a:	a803      	add	r0, sp, #12
 801cf5c:	f000 fdd6 	bl	801db0c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cf60:	a803      	add	r0, sp, #12
 801cf62:	f001 f9cd 	bl	801e300 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cf66:	2401      	movs	r4, #1
 801cf68:	b2a3      	uxth	r3, r4
 801cf6a:	b140      	cbz	r0, 801cf7e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801cf6c:	280a      	cmp	r0, #10
 801cf6e:	bf08      	it	eq
 801cf70:	3301      	addeq	r3, #1
 801cf72:	a803      	add	r0, sp, #12
 801cf74:	bf08      	it	eq
 801cf76:	b21c      	sxtheq	r4, r3
 801cf78:	f001 f9c2 	bl	801e300 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cf7c:	e7f4      	b.n	801cf68 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801cf7e:	4618      	mov	r0, r3
 801cf80:	b01d      	add	sp, #116	; 0x74
 801cf82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cf86:	b003      	add	sp, #12
 801cf88:	4770      	bx	lr

0801cf8a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801cf8a:	b40e      	push	{r1, r2, r3}
 801cf8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf8e:	b09e      	sub	sp, #120	; 0x78
 801cf90:	ab23      	add	r3, sp, #140	; 0x8c
 801cf92:	4604      	mov	r4, r0
 801cf94:	f853 5b04 	ldr.w	r5, [r3], #4
 801cf98:	9303      	str	r3, [sp, #12]
 801cf9a:	a805      	add	r0, sp, #20
 801cf9c:	f000 fd63 	bl	801da66 <_ZN8touchgfx12TextProviderC1Ev>
 801cfa0:	6823      	ldr	r3, [r4, #0]
 801cfa2:	4620      	mov	r0, r4
 801cfa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cfa6:	4798      	blx	r3
 801cfa8:	6823      	ldr	r3, [r4, #0]
 801cfaa:	4606      	mov	r6, r0
 801cfac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cfae:	4620      	mov	r0, r4
 801cfb0:	4798      	blx	r3
 801cfb2:	4633      	mov	r3, r6
 801cfb4:	4629      	mov	r1, r5
 801cfb6:	9000      	str	r0, [sp, #0]
 801cfb8:	9a03      	ldr	r2, [sp, #12]
 801cfba:	a805      	add	r0, sp, #20
 801cfbc:	ad1e      	add	r5, sp, #120	; 0x78
 801cfbe:	f000 fda5 	bl	801db0c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cfc2:	2100      	movs	r1, #0
 801cfc4:	f845 1d68 	str.w	r1, [r5, #-104]!
 801cfc8:	4622      	mov	r2, r4
 801cfca:	462b      	mov	r3, r5
 801cfcc:	a805      	add	r0, sp, #20
 801cfce:	f001 f89d 	bl	801e10c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cfd2:	26ff      	movs	r6, #255	; 0xff
 801cfd4:	b1d8      	cbz	r0, 801d00e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801cfd6:	280a      	cmp	r0, #10
 801cfd8:	d012      	beq.n	801d000 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801cfda:	9804      	ldr	r0, [sp, #16]
 801cfdc:	b180      	cbz	r0, 801d000 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801cfde:	7b47      	ldrb	r7, [r0, #13]
 801cfe0:	7922      	ldrb	r2, [r4, #4]
 801cfe2:	00fb      	lsls	r3, r7, #3
 801cfe4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801cfe8:	7a03      	ldrb	r3, [r0, #8]
 801cfea:	430b      	orrs	r3, r1
 801cfec:	0679      	lsls	r1, r7, #25
 801cfee:	bf44      	itt	mi
 801cff0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cff4:	b21b      	sxthmi	r3, r3
 801cff6:	1ad3      	subs	r3, r2, r3
 801cff8:	b2db      	uxtb	r3, r3
 801cffa:	429e      	cmp	r6, r3
 801cffc:	bf28      	it	cs
 801cffe:	461e      	movcs	r6, r3
 801d000:	462b      	mov	r3, r5
 801d002:	4622      	mov	r2, r4
 801d004:	2100      	movs	r1, #0
 801d006:	a805      	add	r0, sp, #20
 801d008:	f001 f880 	bl	801e10c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d00c:	e7e2      	b.n	801cfd4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801d00e:	4630      	mov	r0, r6
 801d010:	b01e      	add	sp, #120	; 0x78
 801d012:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d016:	b003      	add	sp, #12
 801d018:	4770      	bx	lr

0801d01a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801d01a:	b513      	push	{r0, r1, r4, lr}
 801d01c:	6803      	ldr	r3, [r0, #0]
 801d01e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d022:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d026:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d02a:	2400      	movs	r4, #0
 801d02c:	9400      	str	r4, [sp, #0]
 801d02e:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d032:	691b      	ldr	r3, [r3, #16]
 801d034:	4669      	mov	r1, sp
 801d036:	4798      	blx	r3
 801d038:	b002      	add	sp, #8
 801d03a:	bd10      	pop	{r4, pc}

0801d03c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801d03c:	b538      	push	{r3, r4, r5, lr}
 801d03e:	680b      	ldr	r3, [r1, #0]
 801d040:	460c      	mov	r4, r1
 801d042:	68db      	ldr	r3, [r3, #12]
 801d044:	4605      	mov	r5, r0
 801d046:	4798      	blx	r3
 801d048:	6823      	ldr	r3, [r4, #0]
 801d04a:	4620      	mov	r0, r4
 801d04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d04e:	4629      	mov	r1, r5
 801d050:	4798      	blx	r3
 801d052:	4628      	mov	r0, r5
 801d054:	bd38      	pop	{r3, r4, r5, pc}

0801d056 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801d056:	b410      	push	{r4}
 801d058:	880a      	ldrh	r2, [r1, #0]
 801d05a:	8884      	ldrh	r4, [r0, #4]
 801d05c:	4422      	add	r2, r4
 801d05e:	800a      	strh	r2, [r1, #0]
 801d060:	88c4      	ldrh	r4, [r0, #6]
 801d062:	884a      	ldrh	r2, [r1, #2]
 801d064:	4422      	add	r2, r4
 801d066:	804a      	strh	r2, [r1, #2]
 801d068:	6940      	ldr	r0, [r0, #20]
 801d06a:	b120      	cbz	r0, 801d076 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801d06c:	6803      	ldr	r3, [r0, #0]
 801d06e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d074:	4718      	bx	r3
 801d076:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d07a:	4770      	bx	lr

0801d07c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801d07c:	b570      	push	{r4, r5, r6, lr}
 801d07e:	8882      	ldrh	r2, [r0, #4]
 801d080:	880b      	ldrh	r3, [r1, #0]
 801d082:	4413      	add	r3, r2
 801d084:	800b      	strh	r3, [r1, #0]
 801d086:	88c2      	ldrh	r2, [r0, #6]
 801d088:	884b      	ldrh	r3, [r1, #2]
 801d08a:	460c      	mov	r4, r1
 801d08c:	4413      	add	r3, r2
 801d08e:	804b      	strh	r3, [r1, #2]
 801d090:	4605      	mov	r5, r0
 801d092:	1d01      	adds	r1, r0, #4
 801d094:	4620      	mov	r0, r4
 801d096:	f7fa fa27 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 801d09a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	dd0b      	ble.n	801d0ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d0a2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	dd07      	ble.n	801d0ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d0aa:	6968      	ldr	r0, [r5, #20]
 801d0ac:	b128      	cbz	r0, 801d0ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d0ae:	6803      	ldr	r3, [r0, #0]
 801d0b0:	4621      	mov	r1, r4
 801d0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d0b8:	4718      	bx	r3
 801d0ba:	bd70      	pop	{r4, r5, r6, pc}

0801d0bc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801d0bc:	b570      	push	{r4, r5, r6, lr}
 801d0be:	8882      	ldrh	r2, [r0, #4]
 801d0c0:	880b      	ldrh	r3, [r1, #0]
 801d0c2:	4413      	add	r3, r2
 801d0c4:	800b      	strh	r3, [r1, #0]
 801d0c6:	88c2      	ldrh	r2, [r0, #6]
 801d0c8:	884b      	ldrh	r3, [r1, #2]
 801d0ca:	460c      	mov	r4, r1
 801d0cc:	4413      	add	r3, r2
 801d0ce:	804b      	strh	r3, [r1, #2]
 801d0d0:	4605      	mov	r5, r0
 801d0d2:	1d01      	adds	r1, r0, #4
 801d0d4:	4620      	mov	r0, r4
 801d0d6:	f7fa fa07 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 801d0da:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	dd15      	ble.n	801d10e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801d0e2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	dd11      	ble.n	801d10e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801d0ea:	6968      	ldr	r0, [r5, #20]
 801d0ec:	b128      	cbz	r0, 801d0fa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801d0ee:	6803      	ldr	r3, [r0, #0]
 801d0f0:	691b      	ldr	r3, [r3, #16]
 801d0f2:	4621      	mov	r1, r4
 801d0f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d0f8:	4718      	bx	r3
 801d0fa:	4b05      	ldr	r3, [pc, #20]	; (801d110 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 801d0fc:	681b      	ldr	r3, [r3, #0]
 801d0fe:	3304      	adds	r3, #4
 801d100:	429d      	cmp	r5, r3
 801d102:	d104      	bne.n	801d10e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801d104:	f7fe ffbe 	bl	801c084 <_ZN8touchgfx11Application11getInstanceEv>
 801d108:	6803      	ldr	r3, [r0, #0]
 801d10a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d10c:	e7f1      	b.n	801d0f2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 801d10e:	bd70      	pop	{r4, r5, r6, pc}
 801d110:	200097b8 	.word	0x200097b8

0801d114 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801d114:	b570      	push	{r4, r5, r6, lr}
 801d116:	4604      	mov	r4, r0
 801d118:	4616      	mov	r6, r2
 801d11a:	460d      	mov	r5, r1
 801d11c:	b901      	cbnz	r1, 801d120 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801d11e:	b192      	cbz	r2, 801d146 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801d120:	6823      	ldr	r3, [r4, #0]
 801d122:	4620      	mov	r0, r4
 801d124:	695b      	ldr	r3, [r3, #20]
 801d126:	4798      	blx	r3
 801d128:	88e2      	ldrh	r2, [r4, #6]
 801d12a:	88a1      	ldrh	r1, [r4, #4]
 801d12c:	4432      	add	r2, r6
 801d12e:	4429      	add	r1, r5
 801d130:	4620      	mov	r0, r4
 801d132:	b212      	sxth	r2, r2
 801d134:	b209      	sxth	r1, r1
 801d136:	f7f3 fca3 	bl	8010a80 <_ZN8touchgfx8Drawable5setXYEss>
 801d13a:	6823      	ldr	r3, [r4, #0]
 801d13c:	4620      	mov	r0, r4
 801d13e:	695b      	ldr	r3, [r3, #20]
 801d140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d144:	4718      	bx	r3
 801d146:	bd70      	pop	{r4, r5, r6, pc}

0801d148 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801d148:	b510      	push	{r4, lr}
 801d14a:	4604      	mov	r4, r0
 801d14c:	4608      	mov	r0, r1
 801d14e:	2300      	movs	r3, #0
 801d150:	8023      	strh	r3, [r4, #0]
 801d152:	8063      	strh	r3, [r4, #2]
 801d154:	6803      	ldr	r3, [r0, #0]
 801d156:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d15a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801d15e:	80a1      	strh	r1, [r4, #4]
 801d160:	80e2      	strh	r2, [r4, #6]
 801d162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d164:	4621      	mov	r1, r4
 801d166:	4798      	blx	r3
 801d168:	4620      	mov	r0, r4
 801d16a:	bd10      	pop	{r4, pc}

0801d16c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801d16c:	b530      	push	{r4, r5, lr}
 801d16e:	8083      	strh	r3, [r0, #4]
 801d170:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801d174:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801d178:	7183      	strb	r3, [r0, #6]
 801d17a:	79c3      	ldrb	r3, [r0, #7]
 801d17c:	6101      	str	r1, [r0, #16]
 801d17e:	f365 0306 	bfi	r3, r5, #0, #7
 801d182:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801d186:	8282      	strh	r2, [r0, #20]
 801d188:	f365 13c7 	bfi	r3, r5, #7, #1
 801d18c:	71c3      	strb	r3, [r0, #7]
 801d18e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801d192:	7203      	strb	r3, [r0, #8]
 801d194:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801d198:	7243      	strb	r3, [r0, #9]
 801d19a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d19e:	8143      	strh	r3, [r0, #10]
 801d1a0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801d1a4:	8183      	strh	r3, [r0, #12]
 801d1a6:	4b01      	ldr	r3, [pc, #4]	; (801d1ac <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801d1a8:	6003      	str	r3, [r0, #0]
 801d1aa:	bd30      	pop	{r4, r5, pc}
 801d1ac:	08031fc8 	.word	0x08031fc8

0801d1b0 <_ZNK8touchgfx9ConstFont4findEt>:
 801d1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d1b2:	6904      	ldr	r4, [r0, #16]
 801d1b4:	b3bc      	cbz	r4, 801d226 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d1b6:	88a3      	ldrh	r3, [r4, #4]
 801d1b8:	8a82      	ldrh	r2, [r0, #20]
 801d1ba:	1acb      	subs	r3, r1, r3
 801d1bc:	f102 32ff 	add.w	r2, r2, #4294967295
 801d1c0:	d431      	bmi.n	801d226 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d1c2:	4293      	cmp	r3, r2
 801d1c4:	dd0c      	ble.n	801d1e0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801d1c6:	230e      	movs	r3, #14
 801d1c8:	fb03 4302 	mla	r3, r3, r2, r4
 801d1cc:	889b      	ldrh	r3, [r3, #4]
 801d1ce:	1a5b      	subs	r3, r3, r1
 801d1d0:	1ad3      	subs	r3, r2, r3
 801d1d2:	429a      	cmp	r2, r3
 801d1d4:	db27      	blt.n	801d226 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d1d6:	2b00      	cmp	r3, #0
 801d1d8:	bfbc      	itt	lt
 801d1da:	2302      	movlt	r3, #2
 801d1dc:	fb92 f3f3 	sdivlt	r3, r2, r3
 801d1e0:	2500      	movs	r5, #0
 801d1e2:	260e      	movs	r6, #14
 801d1e4:	4295      	cmp	r5, r2
 801d1e6:	dc1e      	bgt.n	801d226 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d1e8:	fb06 4003 	mla	r0, r6, r3, r4
 801d1ec:	8887      	ldrh	r7, [r0, #4]
 801d1ee:	42b9      	cmp	r1, r7
 801d1f0:	d01a      	beq.n	801d228 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801d1f2:	d20d      	bcs.n	801d210 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801d1f4:	1e5a      	subs	r2, r3, #1
 801d1f6:	4295      	cmp	r5, r2
 801d1f8:	dc15      	bgt.n	801d226 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d1fa:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801d1fe:	1a5b      	subs	r3, r3, r1
 801d200:	1ad3      	subs	r3, r2, r3
 801d202:	429a      	cmp	r2, r3
 801d204:	db0f      	blt.n	801d226 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d206:	429d      	cmp	r5, r3
 801d208:	ddec      	ble.n	801d1e4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d20a:	1953      	adds	r3, r2, r5
 801d20c:	105b      	asrs	r3, r3, #1
 801d20e:	e7e9      	b.n	801d1e4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d210:	1c5d      	adds	r5, r3, #1
 801d212:	42aa      	cmp	r2, r5
 801d214:	db07      	blt.n	801d226 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d216:	8a43      	ldrh	r3, [r0, #18]
 801d218:	1acb      	subs	r3, r1, r3
 801d21a:	442b      	add	r3, r5
 801d21c:	429d      	cmp	r5, r3
 801d21e:	dc02      	bgt.n	801d226 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d220:	429a      	cmp	r2, r3
 801d222:	dadf      	bge.n	801d1e4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d224:	e7f1      	b.n	801d20a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801d226:	2000      	movs	r0, #0
 801d228:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d22a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801d22a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d22c:	4604      	mov	r4, r0
 801d22e:	4617      	mov	r7, r2
 801d230:	461e      	mov	r6, r3
 801d232:	b911      	cbnz	r1, 801d23a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801d234:	2500      	movs	r5, #0
 801d236:	4628      	mov	r0, r5
 801d238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d23a:	290a      	cmp	r1, #10
 801d23c:	d0fa      	beq.n	801d234 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d23e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801d242:	4291      	cmp	r1, r2
 801d244:	d0f6      	beq.n	801d234 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d246:	f242 020b 	movw	r2, #8203	; 0x200b
 801d24a:	4291      	cmp	r1, r2
 801d24c:	d0f2      	beq.n	801d234 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d24e:	f7ff ffaf 	bl	801d1b0 <_ZNK8touchgfx9ConstFont4findEt>
 801d252:	4605      	mov	r5, r0
 801d254:	b950      	cbnz	r0, 801d26c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801d256:	6823      	ldr	r3, [r4, #0]
 801d258:	4620      	mov	r0, r4
 801d25a:	691b      	ldr	r3, [r3, #16]
 801d25c:	4798      	blx	r3
 801d25e:	4601      	mov	r1, r0
 801d260:	4620      	mov	r0, r4
 801d262:	f7ff ffa5 	bl	801d1b0 <_ZNK8touchgfx9ConstFont4findEt>
 801d266:	4605      	mov	r5, r0
 801d268:	2800      	cmp	r0, #0
 801d26a:	d0e3      	beq.n	801d234 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d26c:	6823      	ldr	r3, [r4, #0]
 801d26e:	4629      	mov	r1, r5
 801d270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d272:	4620      	mov	r0, r4
 801d274:	4798      	blx	r3
 801d276:	6038      	str	r0, [r7, #0]
 801d278:	6823      	ldr	r3, [r4, #0]
 801d27a:	4620      	mov	r0, r4
 801d27c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d27e:	4798      	blx	r3
 801d280:	7030      	strb	r0, [r6, #0]
 801d282:	e7d8      	b.n	801d236 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801d284 <_ZN8touchgfx6memsetEPvhm>:
 801d284:	4402      	add	r2, r0
 801d286:	4290      	cmp	r0, r2
 801d288:	d002      	beq.n	801d290 <_ZN8touchgfx6memsetEPvhm+0xc>
 801d28a:	f800 1b01 	strb.w	r1, [r0], #1
 801d28e:	e7fa      	b.n	801d286 <_ZN8touchgfx6memsetEPvhm+0x2>
 801d290:	4770      	bx	lr

0801d292 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801d292:	b538      	push	{r3, r4, r5, lr}
 801d294:	4605      	mov	r5, r0
 801d296:	f002 fc8d 	bl	801fbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d29a:	4604      	mov	r4, r0
 801d29c:	4628      	mov	r0, r5
 801d29e:	f002 fbc5 	bl	801fa2c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d2a2:	2800      	cmp	r0, #0
 801d2a4:	bf14      	ite	ne
 801d2a6:	2002      	movne	r0, #2
 801d2a8:	2000      	moveq	r0, #0
 801d2aa:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801d2ae:	b280      	uxth	r0, r0
 801d2b0:	bd38      	pop	{r3, r4, r5, pc}

0801d2b2 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801d2b2:	b538      	push	{r3, r4, r5, lr}
 801d2b4:	4605      	mov	r5, r0
 801d2b6:	f002 fc7d 	bl	801fbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d2ba:	4604      	mov	r4, r0
 801d2bc:	4628      	mov	r0, r5
 801d2be:	f002 fbb5 	bl	801fa2c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d2c2:	2800      	cmp	r0, #0
 801d2c4:	bf14      	ite	ne
 801d2c6:	2002      	movne	r0, #2
 801d2c8:	2000      	moveq	r0, #0
 801d2ca:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801d2ce:	f040 0001 	orr.w	r0, r0, #1
 801d2d2:	b280      	uxth	r0, r0
 801d2d4:	bd38      	pop	{r3, r4, r5, pc}

0801d2d6 <_ZN8touchgfx4clzuEm>:
 801d2d6:	4603      	mov	r3, r0
 801d2d8:	b1c8      	cbz	r0, 801d30e <_ZN8touchgfx4clzuEm+0x38>
 801d2da:	0c02      	lsrs	r2, r0, #16
 801d2dc:	0412      	lsls	r2, r2, #16
 801d2de:	b9a2      	cbnz	r2, 801d30a <_ZN8touchgfx4clzuEm+0x34>
 801d2e0:	0403      	lsls	r3, r0, #16
 801d2e2:	2010      	movs	r0, #16
 801d2e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801d2e8:	bf04      	itt	eq
 801d2ea:	021b      	lsleq	r3, r3, #8
 801d2ec:	3008      	addeq	r0, #8
 801d2ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801d2f2:	bf04      	itt	eq
 801d2f4:	011b      	lsleq	r3, r3, #4
 801d2f6:	3004      	addeq	r0, #4
 801d2f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801d2fc:	bf04      	itt	eq
 801d2fe:	009b      	lsleq	r3, r3, #2
 801d300:	3002      	addeq	r0, #2
 801d302:	2b00      	cmp	r3, #0
 801d304:	db04      	blt.n	801d310 <_ZN8touchgfx4clzuEm+0x3a>
 801d306:	3001      	adds	r0, #1
 801d308:	4770      	bx	lr
 801d30a:	2000      	movs	r0, #0
 801d30c:	e7ea      	b.n	801d2e4 <_ZN8touchgfx4clzuEm+0xe>
 801d30e:	2020      	movs	r0, #32
 801d310:	4770      	bx	lr

0801d312 <_ZN8touchgfx7muldivuEmmmRm>:
 801d312:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d316:	4680      	mov	r8, r0
 801d318:	460f      	mov	r7, r1
 801d31a:	4615      	mov	r5, r2
 801d31c:	461e      	mov	r6, r3
 801d31e:	f7ff ffda 	bl	801d2d6 <_ZN8touchgfx4clzuEm>
 801d322:	b998      	cbnz	r0, 801d34c <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801d324:	4608      	mov	r0, r1
 801d326:	f7ff ffd6 	bl	801d2d6 <_ZN8touchgfx4clzuEm>
 801d32a:	2800      	cmp	r0, #0
 801d32c:	dd08      	ble.n	801d340 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801d32e:	4633      	mov	r3, r6
 801d330:	462a      	mov	r2, r5
 801d332:	4641      	mov	r1, r8
 801d334:	4638      	mov	r0, r7
 801d336:	f7ff ffec 	bl	801d312 <_ZN8touchgfx7muldivuEmmmRm>
 801d33a:	b003      	add	sp, #12
 801d33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d340:	f04f 33ff 	mov.w	r3, #4294967295
 801d344:	6033      	str	r3, [r6, #0]
 801d346:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801d34a:	e7f6      	b.n	801d33a <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801d34c:	fa31 f900 	lsrs.w	r9, r1, r0
 801d350:	fb01 f308 	mul.w	r3, r1, r8
 801d354:	d105      	bne.n	801d362 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801d356:	fbb3 f0f5 	udiv	r0, r3, r5
 801d35a:	fb05 3510 	mls	r5, r5, r0, r3
 801d35e:	6035      	str	r5, [r6, #0]
 801d360:	e7eb      	b.n	801d33a <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801d362:	2301      	movs	r3, #1
 801d364:	fa08 fb00 	lsl.w	fp, r8, r0
 801d368:	fa03 f000 	lsl.w	r0, r3, r0
 801d36c:	3801      	subs	r0, #1
 801d36e:	462a      	mov	r2, r5
 801d370:	4633      	mov	r3, r6
 801d372:	4641      	mov	r1, r8
 801d374:	4038      	ands	r0, r7
 801d376:	f7ff ffcc 	bl	801d312 <_ZN8touchgfx7muldivuEmmmRm>
 801d37a:	fbbb faf5 	udiv	sl, fp, r5
 801d37e:	462a      	mov	r2, r5
 801d380:	4607      	mov	r7, r0
 801d382:	ab01      	add	r3, sp, #4
 801d384:	fb05 b11a 	mls	r1, r5, sl, fp
 801d388:	4648      	mov	r0, r9
 801d38a:	f7ff ffc2 	bl	801d312 <_ZN8touchgfx7muldivuEmmmRm>
 801d38e:	9b01      	ldr	r3, [sp, #4]
 801d390:	6832      	ldr	r2, [r6, #0]
 801d392:	fb09 f40a 	mul.w	r4, r9, sl
 801d396:	441a      	add	r2, r3
 801d398:	fbb2 f3f5 	udiv	r3, r2, r5
 801d39c:	441c      	add	r4, r3
 801d39e:	443c      	add	r4, r7
 801d3a0:	4420      	add	r0, r4
 801d3a2:	fb05 2513 	mls	r5, r5, r3, r2
 801d3a6:	e7da      	b.n	801d35e <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801d3a8 <_ZN8touchgfx6muldivElllRl>:
 801d3a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d3aa:	2800      	cmp	r0, #0
 801d3ac:	bfba      	itte	lt
 801d3ae:	4240      	neglt	r0, r0
 801d3b0:	f04f 34ff 	movlt.w	r4, #4294967295
 801d3b4:	2401      	movge	r4, #1
 801d3b6:	2900      	cmp	r1, #0
 801d3b8:	bfbc      	itt	lt
 801d3ba:	4249      	neglt	r1, r1
 801d3bc:	4264      	neglt	r4, r4
 801d3be:	2a00      	cmp	r2, #0
 801d3c0:	bfb6      	itet	lt
 801d3c2:	4265      	neglt	r5, r4
 801d3c4:	4625      	movge	r5, r4
 801d3c6:	4252      	neglt	r2, r2
 801d3c8:	4288      	cmp	r0, r1
 801d3ca:	461e      	mov	r6, r3
 801d3cc:	bfc2      	ittt	gt
 801d3ce:	4603      	movgt	r3, r0
 801d3d0:	4608      	movgt	r0, r1
 801d3d2:	4619      	movgt	r1, r3
 801d3d4:	ab01      	add	r3, sp, #4
 801d3d6:	f7ff ff9c 	bl	801d312 <_ZN8touchgfx7muldivuEmmmRm>
 801d3da:	9b01      	ldr	r3, [sp, #4]
 801d3dc:	4368      	muls	r0, r5
 801d3de:	435c      	muls	r4, r3
 801d3e0:	6034      	str	r4, [r6, #0]
 801d3e2:	b002      	add	sp, #8
 801d3e4:	bd70      	pop	{r4, r5, r6, pc}

0801d3e6 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801d3e6:	2000      	movs	r0, #0
 801d3e8:	4770      	bx	lr

0801d3ea <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801d3ea:	2001      	movs	r0, #1
 801d3ec:	4770      	bx	lr

0801d3ee <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801d3ee:	2002      	movs	r0, #2
 801d3f0:	4770      	bx	lr

0801d3f2 <_ZN8touchgfx12GestureEventD1Ev>:
 801d3f2:	4770      	bx	lr

0801d3f4 <_ZN8touchgfx9DragEventD1Ev>:
 801d3f4:	4770      	bx	lr

0801d3f6 <_ZN8touchgfx10ClickEventD1Ev>:
 801d3f6:	4770      	bx	lr

0801d3f8 <_ZN8touchgfx10ClickEventD0Ev>:
 801d3f8:	b510      	push	{r4, lr}
 801d3fa:	210c      	movs	r1, #12
 801d3fc:	4604      	mov	r4, r0
 801d3fe:	f00f ff40 	bl	802d282 <_ZdlPvj>
 801d402:	4620      	mov	r0, r4
 801d404:	bd10      	pop	{r4, pc}

0801d406 <_ZN8touchgfx9DragEventD0Ev>:
 801d406:	b510      	push	{r4, lr}
 801d408:	2110      	movs	r1, #16
 801d40a:	4604      	mov	r4, r0
 801d40c:	f00f ff39 	bl	802d282 <_ZdlPvj>
 801d410:	4620      	mov	r0, r4
 801d412:	bd10      	pop	{r4, pc}

0801d414 <_ZN8touchgfx12GestureEventD0Ev>:
 801d414:	b510      	push	{r4, lr}
 801d416:	210c      	movs	r1, #12
 801d418:	4604      	mov	r4, r0
 801d41a:	f00f ff32 	bl	802d282 <_ZdlPvj>
 801d41e:	4620      	mov	r0, r4
 801d420:	bd10      	pop	{r4, pc}
	...

0801d424 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801d424:	b530      	push	{r4, r5, lr}
 801d426:	460d      	mov	r5, r1
 801d428:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d42a:	b087      	sub	sp, #28
 801d42c:	4604      	mov	r4, r0
 801d42e:	b301      	cbz	r1, 801d472 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801d430:	a801      	add	r0, sp, #4
 801d432:	f7ff fe89 	bl	801d148 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d436:	892a      	ldrh	r2, [r5, #8]
 801d438:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d43c:	7928      	ldrb	r0, [r5, #4]
 801d43e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801d442:	f88d 0010 	strb.w	r0, [sp, #16]
 801d446:	1ad2      	subs	r2, r2, r3
 801d448:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801d44a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d44c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801d450:	441a      	add	r2, r3
 801d452:	896b      	ldrh	r3, [r5, #10]
 801d454:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801d458:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d45c:	1b5b      	subs	r3, r3, r5
 801d45e:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801d460:	442b      	add	r3, r5
 801d462:	4d05      	ldr	r5, [pc, #20]	; (801d478 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801d464:	9503      	str	r5, [sp, #12]
 801d466:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d46a:	6803      	ldr	r3, [r0, #0]
 801d46c:	a903      	add	r1, sp, #12
 801d46e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d470:	4798      	blx	r3
 801d472:	b007      	add	sp, #28
 801d474:	bd30      	pop	{r4, r5, pc}
 801d476:	bf00      	nop
 801d478:	08032048 	.word	0x08032048

0801d47c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801d47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d480:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801d482:	b08a      	sub	sp, #40	; 0x28
 801d484:	4604      	mov	r4, r0
 801d486:	460d      	mov	r5, r1
 801d488:	b113      	cbz	r3, 801d490 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801d48a:	790b      	ldrb	r3, [r1, #4]
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	d044      	beq.n	801d51a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d490:	f104 0804 	add.w	r8, r4, #4
 801d494:	4641      	mov	r1, r8
 801d496:	a803      	add	r0, sp, #12
 801d498:	f7ff fe56 	bl	801d148 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d49c:	792b      	ldrb	r3, [r5, #4]
 801d49e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801d4a2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801d4a6:	b983      	cbnz	r3, 801d4ca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801d4a8:	892a      	ldrh	r2, [r5, #8]
 801d4aa:	88e9      	ldrh	r1, [r5, #6]
 801d4ac:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801d4b0:	1b92      	subs	r2, r2, r6
 801d4b2:	1bc9      	subs	r1, r1, r7
 801d4b4:	9301      	str	r3, [sp, #4]
 801d4b6:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801d4ba:	9300      	str	r3, [sp, #0]
 801d4bc:	b212      	sxth	r2, r2
 801d4be:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801d4c2:	b209      	sxth	r1, r1
 801d4c4:	4640      	mov	r0, r8
 801d4c6:	f7f9 ff2b 	bl	8017320 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801d4ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d4cc:	b329      	cbz	r1, 801d51a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d4ce:	a805      	add	r0, sp, #20
 801d4d0:	f7ff fe3a 	bl	801d148 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d4d4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801d4d8:	792b      	ldrb	r3, [r5, #4]
 801d4da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d4dc:	f88d 3020 	strb.w	r3, [sp, #32]
 801d4e0:	1abf      	subs	r7, r7, r2
 801d4e2:	88ea      	ldrh	r2, [r5, #6]
 801d4e4:	4417      	add	r7, r2
 801d4e6:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801d4e8:	4417      	add	r7, r2
 801d4ea:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801d4ee:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801d4f2:	1ab6      	subs	r6, r6, r2
 801d4f4:	892a      	ldrh	r2, [r5, #8]
 801d4f6:	4416      	add	r6, r2
 801d4f8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d4fa:	4416      	add	r6, r2
 801d4fc:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801d500:	4a07      	ldr	r2, [pc, #28]	; (801d520 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801d502:	9207      	str	r2, [sp, #28]
 801d504:	2600      	movs	r6, #0
 801d506:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801d50a:	6803      	ldr	r3, [r0, #0]
 801d50c:	a907      	add	r1, sp, #28
 801d50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d510:	4798      	blx	r3
 801d512:	792b      	ldrb	r3, [r5, #4]
 801d514:	b10b      	cbz	r3, 801d51a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d516:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801d51a:	b00a      	add	sp, #40	; 0x28
 801d51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d520:	08032020 	.word	0x08032020

0801d524 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801d524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d528:	460c      	mov	r4, r1
 801d52a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d52c:	b088      	sub	sp, #32
 801d52e:	4605      	mov	r5, r0
 801d530:	2900      	cmp	r1, #0
 801d532:	d06d      	beq.n	801d610 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801d534:	4668      	mov	r0, sp
 801d536:	f7ff fe07 	bl	801d148 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d53a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801d53c:	88e3      	ldrh	r3, [r4, #6]
 801d53e:	f9bd 8000 	ldrsh.w	r8, [sp]
 801d542:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801d546:	440b      	add	r3, r1
 801d548:	b21b      	sxth	r3, r3
 801d54a:	4543      	cmp	r3, r8
 801d54c:	db31      	blt.n	801d5b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d54e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801d552:	44c4      	add	ip, r8
 801d554:	fa0f fc8c 	sxth.w	ip, ip
 801d558:	4563      	cmp	r3, ip
 801d55a:	da2a      	bge.n	801d5b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d55c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801d55e:	8926      	ldrh	r6, [r4, #8]
 801d560:	4416      	add	r6, r2
 801d562:	b236      	sxth	r6, r6
 801d564:	42be      	cmp	r6, r7
 801d566:	db24      	blt.n	801d5b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d568:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801d56c:	4438      	add	r0, r7
 801d56e:	b200      	sxth	r0, r0
 801d570:	4286      	cmp	r6, r0
 801d572:	da1e      	bge.n	801d5b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d574:	8963      	ldrh	r3, [r4, #10]
 801d576:	4419      	add	r1, r3
 801d578:	b209      	sxth	r1, r1
 801d57a:	4541      	cmp	r1, r8
 801d57c:	db08      	blt.n	801d590 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d57e:	4561      	cmp	r1, ip
 801d580:	da06      	bge.n	801d590 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d582:	89a3      	ldrh	r3, [r4, #12]
 801d584:	441a      	add	r2, r3
 801d586:	b212      	sxth	r2, r2
 801d588:	42ba      	cmp	r2, r7
 801d58a:	db01      	blt.n	801d590 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d58c:	4282      	cmp	r2, r0
 801d58e:	db10      	blt.n	801d5b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d590:	4b21      	ldr	r3, [pc, #132]	; (801d618 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801d592:	9304      	str	r3, [sp, #16]
 801d594:	2302      	movs	r3, #2
 801d596:	f88d 3014 	strb.w	r3, [sp, #20]
 801d59a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d59c:	2300      	movs	r3, #0
 801d59e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d5a2:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d5a6:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d5aa:	6803      	ldr	r3, [r0, #0]
 801d5ac:	a904      	add	r1, sp, #16
 801d5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d5b0:	4798      	blx	r3
 801d5b2:	1d29      	adds	r1, r5, #4
 801d5b4:	a802      	add	r0, sp, #8
 801d5b6:	f7ff fdc7 	bl	801d148 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d5ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d5be:	88e0      	ldrh	r0, [r4, #6]
 801d5c0:	7921      	ldrb	r1, [r4, #4]
 801d5c2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801d5c6:	8922      	ldrh	r2, [r4, #8]
 801d5c8:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801d5ca:	f88d 1014 	strb.w	r1, [sp, #20]
 801d5ce:	eba3 0808 	sub.w	r8, r3, r8
 801d5d2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d5d6:	1bdf      	subs	r7, r3, r7
 801d5d8:	b2bb      	uxth	r3, r7
 801d5da:	fa1f f888 	uxth.w	r8, r8
 801d5de:	8967      	ldrh	r7, [r4, #10]
 801d5e0:	89a4      	ldrh	r4, [r4, #12]
 801d5e2:	4440      	add	r0, r8
 801d5e4:	4460      	add	r0, ip
 801d5e6:	441a      	add	r2, r3
 801d5e8:	44b8      	add	r8, r7
 801d5ea:	4423      	add	r3, r4
 801d5ec:	f8ad 0016 	strh.w	r0, [sp, #22]
 801d5f0:	4433      	add	r3, r6
 801d5f2:	4432      	add	r2, r6
 801d5f4:	44e0      	add	r8, ip
 801d5f6:	4c09      	ldr	r4, [pc, #36]	; (801d61c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801d5f8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d5fa:	9404      	str	r4, [sp, #16]
 801d5fc:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d600:	f8ad 801a 	strh.w	r8, [sp, #26]
 801d604:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d608:	6803      	ldr	r3, [r0, #0]
 801d60a:	a904      	add	r1, sp, #16
 801d60c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d60e:	4798      	blx	r3
 801d610:	b008      	add	sp, #32
 801d612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d616:	bf00      	nop
 801d618:	08032020 	.word	0x08032020
 801d61c:	08032034 	.word	0x08032034

0801d620 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801d620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d622:	4604      	mov	r4, r0
 801d624:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801d628:	3201      	adds	r2, #1
 801d62a:	d112      	bne.n	801d652 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801d62c:	6803      	ldr	r3, [r0, #0]
 801d62e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d632:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d636:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d63a:	2500      	movs	r5, #0
 801d63c:	9500      	str	r5, [sp, #0]
 801d63e:	466d      	mov	r5, sp
 801d640:	4629      	mov	r1, r5
 801d642:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d648:	4798      	blx	r3
 801d64a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d64e:	e884 0003 	stmia.w	r4, {r0, r1}
 801d652:	4620      	mov	r0, r4
 801d654:	b003      	add	sp, #12
 801d656:	bd30      	pop	{r4, r5, pc}

0801d658 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801d658:	b513      	push	{r0, r1, r4, lr}
 801d65a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801d65e:	3301      	adds	r3, #1
 801d660:	4604      	mov	r4, r0
 801d662:	d109      	bne.n	801d678 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801d664:	4601      	mov	r1, r0
 801d666:	4668      	mov	r0, sp
 801d668:	f7ff fd6e 	bl	801d148 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d66c:	f8bd 3000 	ldrh.w	r3, [sp]
 801d670:	8423      	strh	r3, [r4, #32]
 801d672:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d676:	8463      	strh	r3, [r4, #34]	; 0x22
 801d678:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801d67c:	b002      	add	sp, #8
 801d67e:	bd10      	pop	{r4, pc}

0801d680 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801d680:	b513      	push	{r0, r1, r4, lr}
 801d682:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801d686:	3301      	adds	r3, #1
 801d688:	4604      	mov	r4, r0
 801d68a:	d109      	bne.n	801d6a0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801d68c:	4601      	mov	r1, r0
 801d68e:	4668      	mov	r0, sp
 801d690:	f7ff fd5a 	bl	801d148 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d694:	f8bd 3000 	ldrh.w	r3, [sp]
 801d698:	8423      	strh	r3, [r4, #32]
 801d69a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d69e:	8463      	strh	r3, [r4, #34]	; 0x22
 801d6a0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801d6a4:	b002      	add	sp, #8
 801d6a6:	bd10      	pop	{r4, pc}

0801d6a8 <_ZN8touchgfx6ScreenC1Ev>:
 801d6a8:	b570      	push	{r4, r5, r6, lr}
 801d6aa:	4605      	mov	r5, r0
 801d6ac:	4b16      	ldr	r3, [pc, #88]	; (801d708 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801d6ae:	f845 3b04 	str.w	r3, [r5], #4
 801d6b2:	2300      	movs	r3, #0
 801d6b4:	8103      	strh	r3, [r0, #8]
 801d6b6:	8143      	strh	r3, [r0, #10]
 801d6b8:	8183      	strh	r3, [r0, #12]
 801d6ba:	81c3      	strh	r3, [r0, #14]
 801d6bc:	8203      	strh	r3, [r0, #16]
 801d6be:	8243      	strh	r3, [r0, #18]
 801d6c0:	8283      	strh	r3, [r0, #20]
 801d6c2:	82c3      	strh	r3, [r0, #22]
 801d6c4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801d6c8:	6203      	str	r3, [r0, #32]
 801d6ca:	8483      	strh	r3, [r0, #36]	; 0x24
 801d6cc:	84c3      	strh	r3, [r0, #38]	; 0x26
 801d6ce:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801d6d2:	4a0e      	ldr	r2, [pc, #56]	; (801d70c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801d6d4:	6343      	str	r3, [r0, #52]	; 0x34
 801d6d6:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801d6da:	4b0d      	ldr	r3, [pc, #52]	; (801d710 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801d6dc:	6042      	str	r2, [r0, #4]
 801d6de:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d6e2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801d6e4:	4a0b      	ldr	r2, [pc, #44]	; (801d714 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801d6e6:	4604      	mov	r4, r0
 801d6e8:	2101      	movs	r1, #1
 801d6ea:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801d6ee:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801d6f2:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d6f6:	4628      	mov	r0, r5
 801d6f8:	4798      	blx	r3
 801d6fa:	6863      	ldr	r3, [r4, #4]
 801d6fc:	4628      	mov	r0, r5
 801d6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d700:	4631      	mov	r1, r6
 801d702:	4798      	blx	r3
 801d704:	4620      	mov	r0, r4
 801d706:	bd70      	pop	{r4, r5, r6, pc}
 801d708:	0803205c 	.word	0x0803205c
 801d70c:	08030a9c 	.word	0x08030a9c
 801d710:	20009772 	.word	0x20009772
 801d714:	20009770 	.word	0x20009770

0801d718 <_ZN8touchgfx6Screen4drawEv>:
 801d718:	b507      	push	{r0, r1, r2, lr}
 801d71a:	4b09      	ldr	r3, [pc, #36]	; (801d740 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801d71c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d720:	4b08      	ldr	r3, [pc, #32]	; (801d744 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801d722:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d726:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d72a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d72e:	6803      	ldr	r3, [r0, #0]
 801d730:	2100      	movs	r1, #0
 801d732:	9100      	str	r1, [sp, #0]
 801d734:	689b      	ldr	r3, [r3, #8]
 801d736:	4669      	mov	r1, sp
 801d738:	4798      	blx	r3
 801d73a:	b003      	add	sp, #12
 801d73c:	f85d fb04 	ldr.w	pc, [sp], #4
 801d740:	20009770 	.word	0x20009770
 801d744:	20009772 	.word	0x20009772

0801d748 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801d748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d74c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d750:	2b00      	cmp	r3, #0
 801d752:	b089      	sub	sp, #36	; 0x24
 801d754:	4680      	mov	r8, r0
 801d756:	460c      	mov	r4, r1
 801d758:	4615      	mov	r5, r2
 801d75a:	dd0e      	ble.n	801d77a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d75c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d760:	2b00      	cmp	r3, #0
 801d762:	dd0a      	ble.n	801d77a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d764:	4628      	mov	r0, r5
 801d766:	f7ff ff5b 	bl	801d620 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d76a:	4621      	mov	r1, r4
 801d76c:	f7fb fbd0 	bl	8018f10 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d770:	69eb      	ldr	r3, [r5, #28]
 801d772:	b928      	cbnz	r0, 801d780 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801d774:	461d      	mov	r5, r3
 801d776:	2b00      	cmp	r3, #0
 801d778:	d1f4      	bne.n	801d764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801d77a:	b009      	add	sp, #36	; 0x24
 801d77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d780:	ae04      	add	r6, sp, #16
 801d782:	2b00      	cmp	r3, #0
 801d784:	f000 80b5 	beq.w	801d8f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d788:	682b      	ldr	r3, [r5, #0]
 801d78a:	4629      	mov	r1, r5
 801d78c:	68db      	ldr	r3, [r3, #12]
 801d78e:	a802      	add	r0, sp, #8
 801d790:	4798      	blx	r3
 801d792:	4628      	mov	r0, r5
 801d794:	f7ff ff60 	bl	801d658 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d798:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801d79c:	4407      	add	r7, r0
 801d79e:	4628      	mov	r0, r5
 801d7a0:	f7ff ff6e 	bl	801d680 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d7a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d7a8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d7ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d7b0:	4418      	add	r0, r3
 801d7b2:	4621      	mov	r1, r4
 801d7b4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d7b8:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d7bc:	b23f      	sxth	r7, r7
 801d7be:	4630      	mov	r0, r6
 801d7c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d7c4:	f8ad 7010 	strh.w	r7, [sp, #16]
 801d7c8:	f7f9 fe8e 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 801d7cc:	4628      	mov	r0, r5
 801d7ce:	f7ff ff27 	bl	801d620 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d7d2:	4602      	mov	r2, r0
 801d7d4:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d7d8:	ab06      	add	r3, sp, #24
 801d7da:	e883 0003 	stmia.w	r3, {r0, r1}
 801d7de:	4611      	mov	r1, r2
 801d7e0:	4618      	mov	r0, r3
 801d7e2:	f7f9 fe81 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 801d7e6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d7ea:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d7ee:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801d7f2:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801d7f6:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801d7fa:	4299      	cmp	r1, r3
 801d7fc:	d10b      	bne.n	801d816 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d7fe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d802:	4552      	cmp	r2, sl
 801d804:	d107      	bne.n	801d816 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d806:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d80a:	455a      	cmp	r2, fp
 801d80c:	d103      	bne.n	801d816 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d80e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d812:	454a      	cmp	r2, r9
 801d814:	d06d      	beq.n	801d8f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d816:	f1bb 0f00 	cmp.w	fp, #0
 801d81a:	dd65      	ble.n	801d8e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d81c:	f1b9 0f00 	cmp.w	r9, #0
 801d820:	dd62      	ble.n	801d8e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d822:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d826:	fa1f f08a 	uxth.w	r0, sl
 801d82a:	4552      	cmp	r2, sl
 801d82c:	9000      	str	r0, [sp, #0]
 801d82e:	da12      	bge.n	801d856 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801d830:	9301      	str	r3, [sp, #4]
 801d832:	9b00      	ldr	r3, [sp, #0]
 801d834:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d838:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d83c:	1a9a      	subs	r2, r3, r2
 801d83e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801d842:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d846:	f8ad 2016 	strh.w	r2, [sp, #22]
 801d84a:	69ea      	ldr	r2, [r5, #28]
 801d84c:	4631      	mov	r1, r6
 801d84e:	4640      	mov	r0, r8
 801d850:	f7ff ff7a 	bl	801d748 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d854:	9b01      	ldr	r3, [sp, #4]
 801d856:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d85a:	429a      	cmp	r2, r3
 801d85c:	b29f      	uxth	r7, r3
 801d85e:	da0d      	bge.n	801d87c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801d860:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d864:	1aba      	subs	r2, r7, r2
 801d866:	f8ad a012 	strh.w	sl, [sp, #18]
 801d86a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d86e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d872:	69ea      	ldr	r2, [r5, #28]
 801d874:	4631      	mov	r1, r6
 801d876:	4640      	mov	r0, r8
 801d878:	f7ff ff66 	bl	801d748 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d87c:	8822      	ldrh	r2, [r4, #0]
 801d87e:	88a3      	ldrh	r3, [r4, #4]
 801d880:	445f      	add	r7, fp
 801d882:	4413      	add	r3, r2
 801d884:	b29b      	uxth	r3, r3
 801d886:	b2bf      	uxth	r7, r7
 801d888:	b23a      	sxth	r2, r7
 801d88a:	b219      	sxth	r1, r3
 801d88c:	4291      	cmp	r1, r2
 801d88e:	dd0d      	ble.n	801d8ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801d890:	1bdb      	subs	r3, r3, r7
 801d892:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d896:	f8ad a012 	strh.w	sl, [sp, #18]
 801d89a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d89e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d8a2:	69ea      	ldr	r2, [r5, #28]
 801d8a4:	4631      	mov	r1, r6
 801d8a6:	4640      	mov	r0, r8
 801d8a8:	f7ff ff4e 	bl	801d748 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d8ac:	88e2      	ldrh	r2, [r4, #6]
 801d8ae:	8863      	ldrh	r3, [r4, #2]
 801d8b0:	4413      	add	r3, r2
 801d8b2:	9a00      	ldr	r2, [sp, #0]
 801d8b4:	444a      	add	r2, r9
 801d8b6:	b29b      	uxth	r3, r3
 801d8b8:	fa1f f982 	uxth.w	r9, r2
 801d8bc:	fa0f f289 	sxth.w	r2, r9
 801d8c0:	b219      	sxth	r1, r3
 801d8c2:	428a      	cmp	r2, r1
 801d8c4:	da15      	bge.n	801d8f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d8c6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d8ca:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d8ce:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d8d2:	eba3 0309 	sub.w	r3, r3, r9
 801d8d6:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d8da:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d8de:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d8e2:	69ea      	ldr	r2, [r5, #28]
 801d8e4:	4631      	mov	r1, r6
 801d8e6:	e001      	b.n	801d8ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801d8e8:	69ea      	ldr	r2, [r5, #28]
 801d8ea:	4621      	mov	r1, r4
 801d8ec:	4640      	mov	r0, r8
 801d8ee:	f7ff ff2b 	bl	801d748 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d8f2:	4628      	mov	r0, r5
 801d8f4:	f7ff fe94 	bl	801d620 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d8f8:	6861      	ldr	r1, [r4, #4]
 801d8fa:	4602      	mov	r2, r0
 801d8fc:	6820      	ldr	r0, [r4, #0]
 801d8fe:	4633      	mov	r3, r6
 801d900:	c303      	stmia	r3!, {r0, r1}
 801d902:	4611      	mov	r1, r2
 801d904:	4630      	mov	r0, r6
 801d906:	f7f9 fdef 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 801d90a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801d90e:	2b00      	cmp	r3, #0
 801d910:	f77f af33 	ble.w	801d77a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d914:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d918:	2b00      	cmp	r3, #0
 801d91a:	f77f af2e 	ble.w	801d77a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d91e:	4628      	mov	r0, r5
 801d920:	f7ff fe9a 	bl	801d658 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d924:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d928:	1a18      	subs	r0, r3, r0
 801d92a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d92e:	4628      	mov	r0, r5
 801d930:	f7ff fea6 	bl	801d680 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d934:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d938:	1a18      	subs	r0, r3, r0
 801d93a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d93e:	682b      	ldr	r3, [r5, #0]
 801d940:	4631      	mov	r1, r6
 801d942:	689b      	ldr	r3, [r3, #8]
 801d944:	4628      	mov	r0, r5
 801d946:	4798      	blx	r3
 801d948:	e717      	b.n	801d77a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801d94a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801d94a:	b570      	push	{r4, r5, r6, lr}
 801d94c:	460c      	mov	r4, r1
 801d94e:	b086      	sub	sp, #24
 801d950:	1d06      	adds	r6, r0, #4
 801d952:	2300      	movs	r3, #0
 801d954:	4631      	mov	r1, r6
 801d956:	4605      	mov	r5, r0
 801d958:	a802      	add	r0, sp, #8
 801d95a:	9301      	str	r3, [sp, #4]
 801d95c:	f7ff fbf4 	bl	801d148 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d960:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d964:	8822      	ldrh	r2, [r4, #0]
 801d966:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801d96a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d96e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d972:	1ad2      	subs	r2, r2, r3
 801d974:	8863      	ldrh	r3, [r4, #2]
 801d976:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d97a:	1a5b      	subs	r3, r3, r1
 801d97c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d980:	f8ad 1016 	strh.w	r1, [sp, #22]
 801d984:	aa01      	add	r2, sp, #4
 801d986:	a904      	add	r1, sp, #16
 801d988:	4630      	mov	r0, r6
 801d98a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d98e:	f7f9 fe83 	bl	8017698 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d992:	9a01      	ldr	r2, [sp, #4]
 801d994:	b11a      	cbz	r2, 801d99e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801d996:	4621      	mov	r1, r4
 801d998:	4628      	mov	r0, r5
 801d99a:	f7ff fed5 	bl	801d748 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d99e:	b006      	add	sp, #24
 801d9a0:	bd70      	pop	{r4, r5, r6, pc}

0801d9a2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801d9a2:	b530      	push	{r4, r5, lr}
 801d9a4:	4602      	mov	r2, r0
 801d9a6:	4604      	mov	r4, r0
 801d9a8:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801d9ac:	b085      	sub	sp, #20
 801d9ae:	460d      	mov	r5, r1
 801d9b0:	6851      	ldr	r1, [r2, #4]
 801d9b2:	466b      	mov	r3, sp
 801d9b4:	c303      	stmia	r3!, {r0, r1}
 801d9b6:	4629      	mov	r1, r5
 801d9b8:	4668      	mov	r0, sp
 801d9ba:	f7f9 fd95 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 801d9be:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801d9c2:	b12b      	cbz	r3, 801d9d0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801d9c4:	4669      	mov	r1, sp
 801d9c6:	4620      	mov	r0, r4
 801d9c8:	f7ff ffbf 	bl	801d94a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801d9cc:	b005      	add	sp, #20
 801d9ce:	bd30      	pop	{r4, r5, pc}
 801d9d0:	3404      	adds	r4, #4
 801d9d2:	4621      	mov	r1, r4
 801d9d4:	a802      	add	r0, sp, #8
 801d9d6:	f7ff fbb7 	bl	801d148 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d9da:	f8bd 3000 	ldrh.w	r3, [sp]
 801d9de:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d9e2:	1a9b      	subs	r3, r3, r2
 801d9e4:	f8ad 3000 	strh.w	r3, [sp]
 801d9e8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d9ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d9f0:	4669      	mov	r1, sp
 801d9f2:	1a9b      	subs	r3, r3, r2
 801d9f4:	4620      	mov	r0, r4
 801d9f6:	f8ad 3002 	strh.w	r3, [sp, #2]
 801d9fa:	f7f9 fe14 	bl	8017626 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d9fe:	e7e5      	b.n	801d9cc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801da00 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801da00:	680a      	ldr	r2, [r1, #0]
 801da02:	460b      	mov	r3, r1
 801da04:	6992      	ldr	r2, [r2, #24]
 801da06:	1d01      	adds	r1, r0, #4
 801da08:	4618      	mov	r0, r3
 801da0a:	4710      	bx	r2

0801da0c <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801da0c:	4298      	cmp	r0, r3
 801da0e:	d200      	bcs.n	801da12 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801da10:	b913      	cbnz	r3, 801da18 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801da12:	440a      	add	r2, r1
 801da14:	b210      	sxth	r0, r2
 801da16:	4770      	bx	lr
 801da18:	ee07 2a90 	vmov	s15, r2
 801da1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801da20:	ee07 0a90 	vmov	s15, r0
 801da24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801da28:	ee67 7a27 	vmul.f32	s15, s14, s15
 801da2c:	ee07 3a10 	vmov	s14, r3
 801da30:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801da34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801da38:	ee07 1a90 	vmov	s15, r1
 801da3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801da40:	ee77 7a27 	vadd.f32	s15, s14, s15
 801da44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801da48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801da4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da50:	bfcc      	ite	gt
 801da52:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801da56:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801da5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801da5e:	ee17 3a90 	vmov	r3, s15
 801da62:	b218      	sxth	r0, r3
 801da64:	4770      	bx	lr

0801da66 <_ZN8touchgfx12TextProviderC1Ev>:
 801da66:	b538      	push	{r3, r4, r5, lr}
 801da68:	2500      	movs	r5, #0
 801da6a:	2302      	movs	r3, #2
 801da6c:	4604      	mov	r4, r0
 801da6e:	e9c0 5500 	strd	r5, r5, [r0]
 801da72:	7403      	strb	r3, [r0, #16]
 801da74:	6145      	str	r5, [r0, #20]
 801da76:	7605      	strb	r5, [r0, #24]
 801da78:	83c5      	strh	r5, [r0, #30]
 801da7a:	8405      	strh	r5, [r0, #32]
 801da7c:	86c5      	strh	r5, [r0, #54]	; 0x36
 801da7e:	8705      	strh	r5, [r0, #56]	; 0x38
 801da80:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801da82:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801da86:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801da8a:	220e      	movs	r2, #14
 801da8c:	4629      	mov	r1, r5
 801da8e:	304c      	adds	r0, #76	; 0x4c
 801da90:	f010 fba4 	bl	802e1dc <memset>
 801da94:	2301      	movs	r3, #1
 801da96:	4620      	mov	r0, r4
 801da98:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801da9c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801daa0:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801daa4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801daa8:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801daac:	f7f6 fcbe 	bl	801442c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801dab0:	4620      	mov	r0, r4
 801dab2:	bd38      	pop	{r3, r4, r5, pc}

0801dab4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801dab4:	b530      	push	{r4, r5, lr}
 801dab6:	2500      	movs	r5, #0
 801dab8:	2401      	movs	r4, #1
 801daba:	6843      	ldr	r3, [r0, #4]
 801dabc:	b913      	cbnz	r3, 801dac4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801dabe:	6803      	ldr	r3, [r0, #0]
 801dac0:	b313      	cbz	r3, 801db08 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801dac2:	6043      	str	r3, [r0, #4]
 801dac4:	7e03      	ldrb	r3, [r0, #24]
 801dac6:	b143      	cbz	r3, 801dada <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801dac8:	6943      	ldr	r3, [r0, #20]
 801daca:	b12b      	cbz	r3, 801dad8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801dacc:	881a      	ldrh	r2, [r3, #0]
 801dace:	b11a      	cbz	r2, 801dad8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801dad0:	1c9a      	adds	r2, r3, #2
 801dad2:	6142      	str	r2, [r0, #20]
 801dad4:	8818      	ldrh	r0, [r3, #0]
 801dad6:	bd30      	pop	{r4, r5, pc}
 801dad8:	7605      	strb	r5, [r0, #24]
 801dada:	6843      	ldr	r3, [r0, #4]
 801dadc:	8819      	ldrh	r1, [r3, #0]
 801dade:	b199      	cbz	r1, 801db08 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801dae0:	1c9a      	adds	r2, r3, #2
 801dae2:	2902      	cmp	r1, #2
 801dae4:	6042      	str	r2, [r0, #4]
 801dae6:	d1f5      	bne.n	801dad4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801dae8:	7c03      	ldrb	r3, [r0, #16]
 801daea:	2b01      	cmp	r3, #1
 801daec:	d8e5      	bhi.n	801daba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801daee:	1c5a      	adds	r2, r3, #1
 801daf0:	3302      	adds	r3, #2
 801daf2:	7402      	strb	r2, [r0, #16]
 801daf4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801daf8:	6143      	str	r3, [r0, #20]
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	d0dd      	beq.n	801daba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801dafe:	881b      	ldrh	r3, [r3, #0]
 801db00:	2b00      	cmp	r3, #0
 801db02:	d0da      	beq.n	801daba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801db04:	7604      	strb	r4, [r0, #24]
 801db06:	e7d8      	b.n	801daba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801db08:	2000      	movs	r0, #0
 801db0a:	e7e4      	b.n	801dad6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801db0c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801db0c:	b430      	push	{r4, r5}
 801db0e:	6815      	ldr	r5, [r2, #0]
 801db10:	6085      	str	r5, [r0, #8]
 801db12:	6852      	ldr	r2, [r2, #4]
 801db14:	60c2      	str	r2, [r0, #12]
 801db16:	6443      	str	r3, [r0, #68]	; 0x44
 801db18:	2200      	movs	r2, #0
 801db1a:	9b02      	ldr	r3, [sp, #8]
 801db1c:	7402      	strb	r2, [r0, #16]
 801db1e:	6001      	str	r1, [r0, #0]
 801db20:	6483      	str	r3, [r0, #72]	; 0x48
 801db22:	6042      	str	r2, [r0, #4]
 801db24:	6142      	str	r2, [r0, #20]
 801db26:	7602      	strb	r2, [r0, #24]
 801db28:	8702      	strh	r2, [r0, #56]	; 0x38
 801db2a:	8402      	strh	r2, [r0, #32]
 801db2c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801db30:	bc30      	pop	{r4, r5}
 801db32:	f7f6 bc7b 	b.w	801442c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801db36 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801db36:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db38:	4605      	mov	r5, r0
 801db3a:	4608      	mov	r0, r1
 801db3c:	b1e9      	cbz	r1, 801db7a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801db3e:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801db42:	460b      	mov	r3, r1
 801db44:	f101 0708 	add.w	r7, r1, #8
 801db48:	4622      	mov	r2, r4
 801db4a:	6818      	ldr	r0, [r3, #0]
 801db4c:	6859      	ldr	r1, [r3, #4]
 801db4e:	4626      	mov	r6, r4
 801db50:	c603      	stmia	r6!, {r0, r1}
 801db52:	3308      	adds	r3, #8
 801db54:	42bb      	cmp	r3, r7
 801db56:	4634      	mov	r4, r6
 801db58:	d1f7      	bne.n	801db4a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801db5a:	6818      	ldr	r0, [r3, #0]
 801db5c:	6030      	str	r0, [r6, #0]
 801db5e:	889b      	ldrh	r3, [r3, #4]
 801db60:	80b3      	strh	r3, [r6, #4]
 801db62:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801db66:	015b      	lsls	r3, r3, #5
 801db68:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801db6c:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801db70:	430b      	orrs	r3, r1
 801db72:	425b      	negs	r3, r3
 801db74:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801db78:	4610      	mov	r0, r2
 801db7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801db7c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801db7c:	b538      	push	{r3, r4, r5, lr}
 801db7e:	460c      	mov	r4, r1
 801db80:	6811      	ldr	r1, [r2, #0]
 801db82:	4610      	mov	r0, r2
 801db84:	68cd      	ldr	r5, [r1, #12]
 801db86:	4619      	mov	r1, r3
 801db88:	47a8      	blx	r5
 801db8a:	2800      	cmp	r0, #0
 801db8c:	bf08      	it	eq
 801db8e:	4620      	moveq	r0, r4
 801db90:	bd38      	pop	{r3, r4, r5, pc}
	...

0801db94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801db94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db96:	4604      	mov	r4, r0
 801db98:	4615      	mov	r5, r2
 801db9a:	4608      	mov	r0, r1
 801db9c:	b93a      	cbnz	r2, 801dbae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801db9e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801dba2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801dba6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801dbaa:	4628      	mov	r0, r5
 801dbac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dbae:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801dbb2:	8893      	ldrh	r3, [r2, #4]
 801dbb4:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801dbb8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801dbbc:	79ee      	ldrb	r6, [r5, #7]
 801dbbe:	4316      	orrs	r6, r2
 801dbc0:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801dbc4:	189a      	adds	r2, r3, r2
 801dbc6:	b291      	uxth	r1, r2
 801dbc8:	291d      	cmp	r1, #29
 801dbca:	b2b7      	uxth	r7, r6
 801dbcc:	f200 8083 	bhi.w	801dcd6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801dbd0:	2201      	movs	r2, #1
 801dbd2:	408a      	lsls	r2, r1
 801dbd4:	4978      	ldr	r1, [pc, #480]	; (801ddb8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801dbd6:	420a      	tst	r2, r1
 801dbd8:	ea4f 06e6 	mov.w	r6, r6, asr #3
 801dbdc:	d12d      	bne.n	801dc3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801dbde:	f412 7f60 	tst.w	r2, #896	; 0x380
 801dbe2:	d078      	beq.n	801dcd6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801dbe4:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801dbe8:	462b      	mov	r3, r5
 801dbea:	f105 0e08 	add.w	lr, r5, #8
 801dbee:	4615      	mov	r5, r2
 801dbf0:	6818      	ldr	r0, [r3, #0]
 801dbf2:	6859      	ldr	r1, [r3, #4]
 801dbf4:	4694      	mov	ip, r2
 801dbf6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801dbfa:	3308      	adds	r3, #8
 801dbfc:	4573      	cmp	r3, lr
 801dbfe:	4662      	mov	r2, ip
 801dc00:	d1f6      	bne.n	801dbf0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5c>
 801dc02:	6818      	ldr	r0, [r3, #0]
 801dc04:	f8cc 0000 	str.w	r0, [ip]
 801dc08:	889b      	ldrh	r3, [r3, #4]
 801dc0a:	f8ac 3004 	strh.w	r3, [ip, #4]
 801dc0e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801dc12:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801dc16:	b2b3      	uxth	r3, r6
 801dc18:	1aca      	subs	r2, r1, r3
 801dc1a:	b292      	uxth	r2, r2
 801dc1c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801dc20:	10d2      	asrs	r2, r2, #3
 801dc22:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801dc26:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801dc2a:	4302      	orrs	r2, r0
 801dc2c:	1bcf      	subs	r7, r1, r7
 801dc2e:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801dc32:	1afb      	subs	r3, r7, r3
 801dc34:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801dc38:	e7b7      	b.n	801dbaa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801dc3a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801dc3c:	b92b      	cbnz	r3, 801dc4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801dc3e:	4b5f      	ldr	r3, [pc, #380]	; (801ddbc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801dc40:	4a5f      	ldr	r2, [pc, #380]	; (801ddc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801dc42:	4860      	ldr	r0, [pc, #384]	; (801ddc4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801dc44:	21c0      	movs	r1, #192	; 0xc0
 801dc46:	f010 f93b 	bl	802dec0 <__assert_func>
 801dc4a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801dc4c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dc50:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801dc52:	f640 6333 	movw	r3, #3635	; 0xe33
 801dc56:	4299      	cmp	r1, r3
 801dc58:	d110      	bne.n	801dc7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801dc5a:	6803      	ldr	r3, [r0, #0]
 801dc5c:	68db      	ldr	r3, [r3, #12]
 801dc5e:	4798      	blx	r3
 801dc60:	7b41      	ldrb	r1, [r0, #13]
 801dc62:	00cb      	lsls	r3, r1, #3
 801dc64:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dc68:	7a03      	ldrb	r3, [r0, #8]
 801dc6a:	0648      	lsls	r0, r1, #25
 801dc6c:	ea43 0302 	orr.w	r3, r3, r2
 801dc70:	bf44      	itt	mi
 801dc72:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dc76:	b21b      	sxthmi	r3, r3
 801dc78:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dc7c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801dc80:	443b      	add	r3, r7
 801dc82:	4433      	add	r3, r6
 801dc84:	b29b      	uxth	r3, r3
 801dc86:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801dc8a:	462a      	mov	r2, r5
 801dc8c:	f105 0c08 	add.w	ip, r5, #8
 801dc90:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dc94:	4635      	mov	r5, r6
 801dc96:	6810      	ldr	r0, [r2, #0]
 801dc98:	6851      	ldr	r1, [r2, #4]
 801dc9a:	4637      	mov	r7, r6
 801dc9c:	c703      	stmia	r7!, {r0, r1}
 801dc9e:	3208      	adds	r2, #8
 801dca0:	4562      	cmp	r2, ip
 801dca2:	463e      	mov	r6, r7
 801dca4:	d1f7      	bne.n	801dc96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801dca6:	6810      	ldr	r0, [r2, #0]
 801dca8:	6038      	str	r0, [r7, #0]
 801dcaa:	8892      	ldrh	r2, [r2, #4]
 801dcac:	80ba      	strh	r2, [r7, #4]
 801dcae:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801dcb2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801dcb6:	10db      	asrs	r3, r3, #3
 801dcb8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801dcbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801dcc0:	4313      	orrs	r3, r2
 801dcc2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801dcc6:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801dcca:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801dcce:	1a9b      	subs	r3, r3, r2
 801dcd0:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801dcd4:	e769      	b.n	801dbaa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801dcd6:	f023 0204 	bic.w	r2, r3, #4
 801dcda:	f640 611b 	movw	r1, #3611	; 0xe1b
 801dcde:	428a      	cmp	r2, r1
 801dce0:	d003      	beq.n	801dcea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801dce2:	f640 621d 	movw	r2, #3613	; 0xe1d
 801dce6:	4293      	cmp	r3, r2
 801dce8:	d120      	bne.n	801dd2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x198>
 801dcea:	3b01      	subs	r3, #1
 801dcec:	4602      	mov	r2, r0
 801dcee:	b29b      	uxth	r3, r3
 801dcf0:	4629      	mov	r1, r5
 801dcf2:	4620      	mov	r0, r4
 801dcf4:	f7ff ff42 	bl	801db7c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801dcf8:	7b41      	ldrb	r1, [r0, #13]
 801dcfa:	00cb      	lsls	r3, r1, #3
 801dcfc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dd00:	7a03      	ldrb	r3, [r0, #8]
 801dd02:	0649      	lsls	r1, r1, #25
 801dd04:	ea43 0302 	orr.w	r3, r3, r2
 801dd08:	bf44      	itt	mi
 801dd0a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dd0e:	b21b      	sxthmi	r3, r3
 801dd10:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dd14:	7b6b      	ldrb	r3, [r5, #13]
 801dd16:	7aaa      	ldrb	r2, [r5, #10]
 801dd18:	005b      	lsls	r3, r3, #1
 801dd1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dd1e:	4313      	orrs	r3, r2
 801dd20:	115a      	asrs	r2, r3, #5
 801dd22:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801dd26:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801dd2a:	e036      	b.n	801dd9a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801dd2c:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801dd30:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801dd34:	7a2a      	ldrb	r2, [r5, #8]
 801dd36:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801dd3a:	ea42 0201 	orr.w	r2, r2, r1
 801dd3e:	bf1c      	itt	ne
 801dd40:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801dd44:	b212      	sxthne	r2, r2
 801dd46:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801dd4a:	f640 6109 	movw	r1, #3593	; 0xe09
 801dd4e:	f023 0210 	bic.w	r2, r3, #16
 801dd52:	428a      	cmp	r2, r1
 801dd54:	d003      	beq.n	801dd5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ca>
 801dd56:	f640 6213 	movw	r2, #3603	; 0xe13
 801dd5a:	4293      	cmp	r3, r2
 801dd5c:	d12a      	bne.n	801ddb4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801dd5e:	7b6e      	ldrb	r6, [r5, #13]
 801dd60:	0076      	lsls	r6, r6, #1
 801dd62:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801dd66:	7aae      	ldrb	r6, [r5, #10]
 801dd68:	4316      	orrs	r6, r2
 801dd6a:	f640 6213 	movw	r2, #3603	; 0xe13
 801dd6e:	4293      	cmp	r3, r2
 801dd70:	bf18      	it	ne
 801dd72:	f103 33ff 	addne.w	r3, r3, #4294967295
 801dd76:	4602      	mov	r2, r0
 801dd78:	bf14      	ite	ne
 801dd7a:	b29b      	uxthne	r3, r3
 801dd7c:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801dd80:	4629      	mov	r1, r5
 801dd82:	4620      	mov	r0, r4
 801dd84:	f7ff fefa 	bl	801db7c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801dd88:	7b43      	ldrb	r3, [r0, #13]
 801dd8a:	7a82      	ldrb	r2, [r0, #10]
 801dd8c:	005b      	lsls	r3, r3, #1
 801dd8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dd92:	4313      	orrs	r3, r2
 801dd94:	1af6      	subs	r6, r6, r3
 801dd96:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801dd9a:	7b69      	ldrb	r1, [r5, #13]
 801dd9c:	00cb      	lsls	r3, r1, #3
 801dd9e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dda2:	7a2b      	ldrb	r3, [r5, #8]
 801dda4:	4313      	orrs	r3, r2
 801dda6:	064a      	lsls	r2, r1, #25
 801dda8:	bf44      	itt	mi
 801ddaa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ddae:	b21b      	sxthmi	r3, r3
 801ddb0:	1bdb      	subs	r3, r3, r7
 801ddb2:	e73f      	b.n	801dc34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801ddb4:	2300      	movs	r3, #0
 801ddb6:	e7b6      	b.n	801dd26 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x192>
 801ddb8:	3fc00079 	.word	0x3fc00079
 801ddbc:	08032088 	.word	0x08032088
 801ddc0:	080322fa 	.word	0x080322fa
 801ddc4:	08032091 	.word	0x08032091

0801ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801ddc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ddcc:	4604      	mov	r4, r0
 801ddce:	b942      	cbnz	r2, 801dde2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801ddd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ddd4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801ddd8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801dddc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801dde0:	e046      	b.n	801de70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801dde2:	7b51      	ldrb	r1, [r2, #13]
 801dde4:	8893      	ldrh	r3, [r2, #4]
 801dde6:	010f      	lsls	r7, r1, #4
 801dde8:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801ddec:	79d7      	ldrb	r7, [r2, #7]
 801ddee:	4307      	orrs	r7, r0
 801ddf0:	2f04      	cmp	r7, #4
 801ddf2:	b2bd      	uxth	r5, r7
 801ddf4:	bfcc      	ite	gt
 801ddf6:	08bf      	lsrgt	r7, r7, #2
 801ddf8:	2701      	movle	r7, #1
 801ddfa:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801ddfe:	f200 80ab 	bhi.w	801df58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801de02:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801de06:	4283      	cmp	r3, r0
 801de08:	d216      	bcs.n	801de38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801de0a:	f240 605b 	movw	r0, #1627	; 0x65b
 801de0e:	4283      	cmp	r3, r0
 801de10:	d859      	bhi.n	801dec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801de12:	f240 6057 	movw	r0, #1623	; 0x657
 801de16:	4283      	cmp	r3, r0
 801de18:	d20e      	bcs.n	801de38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801de1a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801de1e:	d24a      	bcs.n	801deb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801de20:	f240 604e 	movw	r0, #1614	; 0x64e
 801de24:	4283      	cmp	r3, r0
 801de26:	d207      	bcs.n	801de38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801de28:	f240 601a 	movw	r0, #1562	; 0x61a
 801de2c:	4283      	cmp	r3, r0
 801de2e:	d02a      	beq.n	801de86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801de30:	d821      	bhi.n	801de76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801de32:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801de36:	d35b      	bcc.n	801def0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801de38:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801de3c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801de40:	f040 80d0 	bne.w	801dfe4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801de44:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801de48:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801de4c:	f040 80ca 	bne.w	801dfe4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801de50:	00cb      	lsls	r3, r1, #3
 801de52:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801de56:	7a13      	ldrb	r3, [r2, #8]
 801de58:	0649      	lsls	r1, r1, #25
 801de5a:	ea43 0300 	orr.w	r3, r3, r0
 801de5e:	bf44      	itt	mi
 801de60:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801de64:	b21b      	sxthmi	r3, r3
 801de66:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801de6a:	1b5d      	subs	r5, r3, r5
 801de6c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801de70:	4610      	mov	r0, r2
 801de72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801de76:	f240 604b 	movw	r0, #1611	; 0x64b
 801de7a:	4283      	cmp	r3, r0
 801de7c:	d338      	bcc.n	801def0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801de7e:	f240 604c 	movw	r0, #1612	; 0x64c
 801de82:	4283      	cmp	r3, r0
 801de84:	d9d8      	bls.n	801de38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801de86:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801de8a:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801de8e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801de92:	f040 80f1 	bne.w	801e078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 801de96:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801de9a:	f040 80ed 	bne.w	801e078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 801de9e:	00cb      	lsls	r3, r1, #3
 801dea0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801dea4:	7a13      	ldrb	r3, [r2, #8]
 801dea6:	064e      	lsls	r6, r1, #25
 801dea8:	ea43 0300 	orr.w	r3, r3, r0
 801deac:	bf44      	itt	mi
 801deae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801deb2:	b21b      	sxthmi	r3, r3
 801deb4:	e7d9      	b.n	801de6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801deb6:	f240 6054 	movw	r0, #1620	; 0x654
 801deba:	4283      	cmp	r3, r0
 801debc:	d8e3      	bhi.n	801de86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801debe:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801dec2:	d9e0      	bls.n	801de86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801dec4:	e7b8      	b.n	801de38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801dec6:	f240 6074 	movw	r0, #1652	; 0x674
 801deca:	4283      	cmp	r3, r0
 801decc:	d0b4      	beq.n	801de38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801dece:	d82d      	bhi.n	801df2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801ded0:	f240 605e 	movw	r0, #1630	; 0x65e
 801ded4:	4283      	cmp	r3, r0
 801ded6:	d804      	bhi.n	801dee2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801ded8:	f240 605d 	movw	r0, #1629	; 0x65d
 801dedc:	4283      	cmp	r3, r0
 801dede:	d3d2      	bcc.n	801de86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801dee0:	e7aa      	b.n	801de38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801dee2:	f240 605f 	movw	r0, #1631	; 0x65f
 801dee6:	4283      	cmp	r3, r0
 801dee8:	d0cd      	beq.n	801de86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801deea:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801deee:	d0a3      	beq.n	801de38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801def0:	00cb      	lsls	r3, r1, #3
 801def2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801def6:	7a13      	ldrb	r3, [r2, #8]
 801def8:	0649      	lsls	r1, r1, #25
 801defa:	ea43 0300 	orr.w	r3, r3, r0
 801defe:	bf44      	itt	mi
 801df00:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801df04:	b21b      	sxthmi	r3, r3
 801df06:	1b5d      	subs	r5, r3, r5
 801df08:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801df0c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801df10:	7b53      	ldrb	r3, [r2, #13]
 801df12:	015b      	lsls	r3, r3, #5
 801df14:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801df18:	7993      	ldrb	r3, [r2, #6]
 801df1a:	430b      	orrs	r3, r1
 801df1c:	005b      	lsls	r3, r3, #1
 801df1e:	2105      	movs	r1, #5
 801df20:	fb93 f3f1 	sdiv	r3, r3, r1
 801df24:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801df28:	440b      	add	r3, r1
 801df2a:	e757      	b.n	801dddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801df2c:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801df30:	4283      	cmp	r3, r0
 801df32:	d809      	bhi.n	801df48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801df34:	f240 60df 	movw	r0, #1759	; 0x6df
 801df38:	4283      	cmp	r3, r0
 801df3a:	f4bf af7d 	bcs.w	801de38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801df3e:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801df42:	2b05      	cmp	r3, #5
 801df44:	d8d4      	bhi.n	801def0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801df46:	e777      	b.n	801de38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801df48:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801df4c:	4283      	cmp	r3, r0
 801df4e:	d09a      	beq.n	801de86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801df50:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801df54:	4283      	cmp	r3, r0
 801df56:	e7ca      	b.n	801deee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801df58:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801df5c:	d22b      	bcs.n	801dfb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801df5e:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801df62:	4283      	cmp	r3, r0
 801df64:	d28f      	bcs.n	801de86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801df66:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801df6a:	4283      	cmp	r3, r0
 801df6c:	d816      	bhi.n	801df9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801df6e:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801df72:	4283      	cmp	r3, r0
 801df74:	f4bf af60 	bcs.w	801de38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801df78:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801df7c:	4283      	cmp	r3, r0
 801df7e:	d80a      	bhi.n	801df96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801df80:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801df84:	4283      	cmp	r3, r0
 801df86:	f4bf af57 	bcs.w	801de38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801df8a:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801df8e:	4283      	cmp	r3, r0
 801df90:	f43f af79 	beq.w	801de86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801df94:	e7ac      	b.n	801def0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801df96:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801df9a:	e7f8      	b.n	801df8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801df9c:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801dfa0:	4283      	cmp	r3, r0
 801dfa2:	d802      	bhi.n	801dfaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801dfa4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801dfa8:	e798      	b.n	801dedc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801dfaa:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801dfae:	4283      	cmp	r3, r0
 801dfb0:	f47f af42 	bne.w	801de38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801dfb4:	e767      	b.n	801de86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801dfb6:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801dfba:	4283      	cmp	r3, r0
 801dfbc:	f43f af63 	beq.w	801de86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801dfc0:	d802      	bhi.n	801dfc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801dfc2:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801dfc6:	e7f2      	b.n	801dfae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801dfc8:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801dfcc:	4283      	cmp	r3, r0
 801dfce:	d805      	bhi.n	801dfdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801dfd0:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801dfd4:	4283      	cmp	r3, r0
 801dfd6:	f4ff af2f 	bcc.w	801de38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801dfda:	e754      	b.n	801de86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801dfdc:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801dfe0:	4283      	cmp	r3, r0
 801dfe2:	e7af      	b.n	801df44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801dfe4:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801dfe8:	4617      	mov	r7, r2
 801dfea:	f102 0808 	add.w	r8, r2, #8
 801dfee:	4666      	mov	r6, ip
 801dff0:	6838      	ldr	r0, [r7, #0]
 801dff2:	6879      	ldr	r1, [r7, #4]
 801dff4:	46e6      	mov	lr, ip
 801dff6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801dffa:	3708      	adds	r7, #8
 801dffc:	4547      	cmp	r7, r8
 801dffe:	46f4      	mov	ip, lr
 801e000:	d1f6      	bne.n	801dff0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801e002:	6838      	ldr	r0, [r7, #0]
 801e004:	f8ce 0000 	str.w	r0, [lr]
 801e008:	88b9      	ldrh	r1, [r7, #4]
 801e00a:	f8ae 1004 	strh.w	r1, [lr, #4]
 801e00e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801e012:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e016:	d009      	beq.n	801e02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x264>
 801e018:	7b51      	ldrb	r1, [r2, #13]
 801e01a:	7992      	ldrb	r2, [r2, #6]
 801e01c:	0149      	lsls	r1, r1, #5
 801e01e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801e022:	4311      	orrs	r1, r2
 801e024:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801e028:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801e02c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e030:	d00d      	beq.n	801e04e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x286>
 801e032:	442b      	add	r3, r5
 801e034:	b29b      	uxth	r3, r3
 801e036:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801e03a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e03e:	10db      	asrs	r3, r3, #3
 801e040:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801e044:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e048:	4313      	orrs	r3, r2
 801e04a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e04e:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801e052:	00cb      	lsls	r3, r1, #3
 801e054:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e058:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801e05c:	064f      	lsls	r7, r1, #25
 801e05e:	ea43 0302 	orr.w	r3, r3, r2
 801e062:	bf44      	itt	mi
 801e064:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e068:	b21b      	sxthmi	r3, r3
 801e06a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e06e:	1b5d      	subs	r5, r3, r5
 801e070:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e074:	4632      	mov	r2, r6
 801e076:	e6fb      	b.n	801de70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801e078:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801e07c:	4694      	mov	ip, r2
 801e07e:	f102 0908 	add.w	r9, r2, #8
 801e082:	4676      	mov	r6, lr
 801e084:	f8dc 0000 	ldr.w	r0, [ip]
 801e088:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801e08c:	46f0      	mov	r8, lr
 801e08e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801e092:	f10c 0c08 	add.w	ip, ip, #8
 801e096:	45cc      	cmp	ip, r9
 801e098:	46c6      	mov	lr, r8
 801e09a:	d1f3      	bne.n	801e084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2bc>
 801e09c:	f8dc 0000 	ldr.w	r0, [ip]
 801e0a0:	f8c8 0000 	str.w	r0, [r8]
 801e0a4:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801e0a8:	f8a8 1004 	strh.w	r1, [r8, #4]
 801e0ac:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801e0b0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e0b4:	d009      	beq.n	801e0ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x302>
 801e0b6:	7b51      	ldrb	r1, [r2, #13]
 801e0b8:	7992      	ldrb	r2, [r2, #6]
 801e0ba:	0149      	lsls	r1, r1, #5
 801e0bc:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801e0c0:	4311      	orrs	r1, r2
 801e0c2:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801e0c6:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801e0ca:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e0ce:	d00d      	beq.n	801e0ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801e0d0:	1bdb      	subs	r3, r3, r7
 801e0d2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801e0d6:	b29b      	uxth	r3, r3
 801e0d8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e0dc:	10db      	asrs	r3, r3, #3
 801e0de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e0e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801e0e6:	4313      	orrs	r3, r2
 801e0e8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e0ec:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801e0f0:	00cb      	lsls	r3, r1, #3
 801e0f2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e0f6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801e0fa:	0648      	lsls	r0, r1, #25
 801e0fc:	ea43 0302 	orr.w	r3, r3, r2
 801e100:	bf44      	itt	mi
 801e102:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e106:	b21b      	sxthmi	r3, r3
 801e108:	e7b1      	b.n	801e06e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a6>
	...

0801e10c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801e10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e110:	461e      	mov	r6, r3
 801e112:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801e114:	4604      	mov	r4, r0
 801e116:	4617      	mov	r7, r2
 801e118:	b92b      	cbnz	r3, 801e126 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801e11a:	4b25      	ldr	r3, [pc, #148]	; (801e1b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801e11c:	4a25      	ldr	r2, [pc, #148]	; (801e1b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801e11e:	4826      	ldr	r0, [pc, #152]	; (801e1b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801e120:	21c0      	movs	r1, #192	; 0xc0
 801e122:	f00f fecd 	bl	802dec0 <__assert_func>
 801e126:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e128:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e12c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e130:	f7f6 f8d6 	bl	80142e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e134:	4605      	mov	r5, r0
 801e136:	b918      	cbnz	r0, 801e140 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801e138:	6030      	str	r0, [r6, #0]
 801e13a:	4628      	mov	r0, r5
 801e13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e140:	683b      	ldr	r3, [r7, #0]
 801e142:	4601      	mov	r1, r0
 801e144:	68db      	ldr	r3, [r3, #12]
 801e146:	4638      	mov	r0, r7
 801e148:	4798      	blx	r3
 801e14a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801e14e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e152:	4602      	mov	r2, r0
 801e154:	6030      	str	r0, [r6, #0]
 801e156:	d213      	bcs.n	801e180 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801e158:	4643      	mov	r3, r8
 801e15a:	4639      	mov	r1, r7
 801e15c:	4620      	mov	r0, r4
 801e15e:	f7ff fe33 	bl	801ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801e162:	6030      	str	r0, [r6, #0]
 801e164:	6833      	ldr	r3, [r6, #0]
 801e166:	b143      	cbz	r3, 801e17a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801e168:	7b5a      	ldrb	r2, [r3, #13]
 801e16a:	7a9b      	ldrb	r3, [r3, #10]
 801e16c:	0052      	lsls	r2, r2, #1
 801e16e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e172:	4313      	orrs	r3, r2
 801e174:	bf0c      	ite	eq
 801e176:	2301      	moveq	r3, #1
 801e178:	2300      	movne	r3, #0
 801e17a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801e17e:	e7dc      	b.n	801e13a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801e180:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801e184:	b29b      	uxth	r3, r3
 801e186:	2b7f      	cmp	r3, #127	; 0x7f
 801e188:	d804      	bhi.n	801e194 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801e18a:	4639      	mov	r1, r7
 801e18c:	4620      	mov	r0, r4
 801e18e:	f7ff fd01 	bl	801db94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801e192:	e7e6      	b.n	801e162 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801e194:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801e198:	2b00      	cmp	r3, #0
 801e19a:	d0e3      	beq.n	801e164 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801e19c:	f640 1302 	movw	r3, #2306	; 0x902
 801e1a0:	429d      	cmp	r5, r3
 801e1a2:	d1df      	bne.n	801e164 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801e1a4:	4601      	mov	r1, r0
 801e1a6:	4620      	mov	r0, r4
 801e1a8:	f7ff fcc5 	bl	801db36 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801e1ac:	e7d9      	b.n	801e162 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801e1ae:	bf00      	nop
 801e1b0:	08032088 	.word	0x08032088
 801e1b4:	080322fa 	.word	0x080322fa
 801e1b8:	08032091 	.word	0x08032091

0801e1bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801e1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e1c0:	461e      	mov	r6, r3
 801e1c2:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801e1c4:	4604      	mov	r4, r0
 801e1c6:	4617      	mov	r7, r2
 801e1c8:	b92b      	cbnz	r3, 801e1d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801e1ca:	4b26      	ldr	r3, [pc, #152]	; (801e264 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801e1cc:	4a26      	ldr	r2, [pc, #152]	; (801e268 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801e1ce:	4827      	ldr	r0, [pc, #156]	; (801e26c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801e1d0:	21c0      	movs	r1, #192	; 0xc0
 801e1d2:	f00f fe75 	bl	802dec0 <__assert_func>
 801e1d6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e1d8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e1dc:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e1e0:	f7f6 f87e 	bl	80142e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e1e4:	4605      	mov	r5, r0
 801e1e6:	b918      	cbnz	r0, 801e1f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801e1e8:	6030      	str	r0, [r6, #0]
 801e1ea:	4628      	mov	r0, r5
 801e1ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e1f0:	683b      	ldr	r3, [r7, #0]
 801e1f2:	4601      	mov	r1, r0
 801e1f4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801e1f8:	4638      	mov	r0, r7
 801e1fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801e1fe:	47c8      	blx	r9
 801e200:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801e204:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e208:	4602      	mov	r2, r0
 801e20a:	6030      	str	r0, [r6, #0]
 801e20c:	d213      	bcs.n	801e236 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801e20e:	4643      	mov	r3, r8
 801e210:	4639      	mov	r1, r7
 801e212:	4620      	mov	r0, r4
 801e214:	f7ff fdd8 	bl	801ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801e218:	6030      	str	r0, [r6, #0]
 801e21a:	6833      	ldr	r3, [r6, #0]
 801e21c:	b143      	cbz	r3, 801e230 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801e21e:	7b5a      	ldrb	r2, [r3, #13]
 801e220:	7a9b      	ldrb	r3, [r3, #10]
 801e222:	0052      	lsls	r2, r2, #1
 801e224:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e228:	4313      	orrs	r3, r2
 801e22a:	bf0c      	ite	eq
 801e22c:	2301      	moveq	r3, #1
 801e22e:	2300      	movne	r3, #0
 801e230:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801e234:	e7d9      	b.n	801e1ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801e236:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801e23a:	b29b      	uxth	r3, r3
 801e23c:	2b7f      	cmp	r3, #127	; 0x7f
 801e23e:	d804      	bhi.n	801e24a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801e240:	4639      	mov	r1, r7
 801e242:	4620      	mov	r0, r4
 801e244:	f7ff fca6 	bl	801db94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801e248:	e7e6      	b.n	801e218 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801e24a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801e24e:	2b00      	cmp	r3, #0
 801e250:	d0e3      	beq.n	801e21a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801e252:	f640 1302 	movw	r3, #2306	; 0x902
 801e256:	429d      	cmp	r5, r3
 801e258:	d1df      	bne.n	801e21a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801e25a:	4601      	mov	r1, r0
 801e25c:	4620      	mov	r0, r4
 801e25e:	f7ff fc6a 	bl	801db36 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801e262:	e7d9      	b.n	801e218 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801e264:	08032088 	.word	0x08032088
 801e268:	080322fa 	.word	0x080322fa
 801e26c:	08032091 	.word	0x08032091

0801e270 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801e270:	b510      	push	{r4, lr}
 801e272:	4604      	mov	r4, r0
 801e274:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801e278:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e27a:	b9d9      	cbnz	r1, 801e2b4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801e27c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e27e:	2b0a      	cmp	r3, #10
 801e280:	d037      	beq.n	801e2f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801e282:	4620      	mov	r0, r4
 801e284:	f7ff fc16 	bl	801dab4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801e288:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e28a:	2b09      	cmp	r3, #9
 801e28c:	d906      	bls.n	801e29c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801e28e:	4b19      	ldr	r3, [pc, #100]	; (801e2f4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801e290:	4a19      	ldr	r2, [pc, #100]	; (801e2f8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801e292:	481a      	ldr	r0, [pc, #104]	; (801e2fc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801e294:	f44f 7182 	mov.w	r1, #260	; 0x104
 801e298:	f00f fe12 	bl	802dec0 <__assert_func>
 801e29c:	1c5a      	adds	r2, r3, #1
 801e29e:	8722      	strh	r2, [r4, #56]	; 0x38
 801e2a0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801e2a2:	4413      	add	r3, r2
 801e2a4:	b29b      	uxth	r3, r3
 801e2a6:	2b09      	cmp	r3, #9
 801e2a8:	bf88      	it	hi
 801e2aa:	3b0a      	subhi	r3, #10
 801e2ac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e2b0:	8458      	strh	r0, [r3, #34]	; 0x22
 801e2b2:	e7e3      	b.n	801e27c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801e2b4:	2b0a      	cmp	r3, #10
 801e2b6:	d01c      	beq.n	801e2f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801e2b8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801e2ba:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801e2be:	3901      	subs	r1, #1
 801e2c0:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801e2c2:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801e2c6:	1c51      	adds	r1, r2, #1
 801e2c8:	b289      	uxth	r1, r1
 801e2ca:	2901      	cmp	r1, #1
 801e2cc:	bf8a      	itet	hi
 801e2ce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801e2d2:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801e2d4:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801e2d6:	2b09      	cmp	r3, #9
 801e2d8:	d8d9      	bhi.n	801e28e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801e2da:	1c5a      	adds	r2, r3, #1
 801e2dc:	8722      	strh	r2, [r4, #56]	; 0x38
 801e2de:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801e2e0:	4413      	add	r3, r2
 801e2e2:	b29b      	uxth	r3, r3
 801e2e4:	2b09      	cmp	r3, #9
 801e2e6:	bf88      	it	hi
 801e2e8:	3b0a      	subhi	r3, #10
 801e2ea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e2ee:	8458      	strh	r0, [r3, #34]	; 0x22
 801e2f0:	e7c0      	b.n	801e274 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801e2f2:	bd10      	pop	{r4, pc}
 801e2f4:	080320bd 	.word	0x080320bd
 801e2f8:	08032450 	.word	0x08032450
 801e2fc:	08032091 	.word	0x08032091

0801e300 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801e300:	b538      	push	{r3, r4, r5, lr}
 801e302:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801e304:	4604      	mov	r4, r0
 801e306:	b92a      	cbnz	r2, 801e314 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801e308:	4b13      	ldr	r3, [pc, #76]	; (801e358 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801e30a:	4a14      	ldr	r2, [pc, #80]	; (801e35c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801e30c:	4814      	ldr	r0, [pc, #80]	; (801e360 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801e30e:	21d5      	movs	r1, #213	; 0xd5
 801e310:	f00f fdd6 	bl	802dec0 <__assert_func>
 801e314:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e316:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801e31a:	3a01      	subs	r2, #1
 801e31c:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801e31e:	8702      	strh	r2, [r0, #56]	; 0x38
 801e320:	1c5a      	adds	r2, r3, #1
 801e322:	b292      	uxth	r2, r2
 801e324:	2a09      	cmp	r2, #9
 801e326:	bf86      	itte	hi
 801e328:	3b09      	subhi	r3, #9
 801e32a:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801e32c:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801e32e:	f7ff ff9f 	bl	801e270 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801e332:	8c23      	ldrh	r3, [r4, #32]
 801e334:	2b01      	cmp	r3, #1
 801e336:	bf9c      	itt	ls
 801e338:	3301      	addls	r3, #1
 801e33a:	8423      	strhls	r3, [r4, #32]
 801e33c:	8be3      	ldrh	r3, [r4, #30]
 801e33e:	b90b      	cbnz	r3, 801e344 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801e340:	2302      	movs	r3, #2
 801e342:	83e3      	strh	r3, [r4, #30]
 801e344:	8be3      	ldrh	r3, [r4, #30]
 801e346:	3b01      	subs	r3, #1
 801e348:	b29b      	uxth	r3, r3
 801e34a:	83e3      	strh	r3, [r4, #30]
 801e34c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e350:	4628      	mov	r0, r5
 801e352:	8365      	strh	r5, [r4, #26]
 801e354:	bd38      	pop	{r3, r4, r5, pc}
 801e356:	bf00      	nop
 801e358:	08032088 	.word	0x08032088
 801e35c:	080323a5 	.word	0x080323a5
 801e360:	08032091 	.word	0x08032091

0801e364 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801e364:	b538      	push	{r3, r4, r5, lr}
 801e366:	428a      	cmp	r2, r1
 801e368:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801e36a:	d90c      	bls.n	801e386 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801e36c:	b92c      	cbnz	r4, 801e37a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801e36e:	4b1c      	ldr	r3, [pc, #112]	; (801e3e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801e370:	4a1c      	ldr	r2, [pc, #112]	; (801e3e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801e372:	21e1      	movs	r1, #225	; 0xe1
 801e374:	481c      	ldr	r0, [pc, #112]	; (801e3e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801e376:	f00f fda3 	bl	802dec0 <__assert_func>
 801e37a:	3c01      	subs	r4, #1
 801e37c:	8704      	strh	r4, [r0, #56]	; 0x38
 801e37e:	4b1b      	ldr	r3, [pc, #108]	; (801e3ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801e380:	4a1b      	ldr	r2, [pc, #108]	; (801e3f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801e382:	21c5      	movs	r1, #197	; 0xc5
 801e384:	e7f6      	b.n	801e374 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801e386:	428c      	cmp	r4, r1
 801e388:	d203      	bcs.n	801e392 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801e38a:	4b1a      	ldr	r3, [pc, #104]	; (801e3f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801e38c:	4a1a      	ldr	r2, [pc, #104]	; (801e3f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801e38e:	21cb      	movs	r1, #203	; 0xcb
 801e390:	e7f0      	b.n	801e374 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801e392:	1a64      	subs	r4, r4, r1
 801e394:	8704      	strh	r4, [r0, #56]	; 0x38
 801e396:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 801e398:	4421      	add	r1, r4
 801e39a:	b289      	uxth	r1, r1
 801e39c:	2909      	cmp	r1, #9
 801e39e:	bf88      	it	hi
 801e3a0:	390a      	subhi	r1, #10
 801e3a2:	86c1      	strh	r1, [r0, #54]	; 0x36
 801e3a4:	250a      	movs	r5, #10
 801e3a6:	b1ba      	cbz	r2, 801e3d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801e3a8:	3a01      	subs	r2, #1
 801e3aa:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801e3ac:	b292      	uxth	r2, r2
 801e3ae:	2909      	cmp	r1, #9
 801e3b0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801e3b4:	d903      	bls.n	801e3be <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801e3b6:	4b11      	ldr	r3, [pc, #68]	; (801e3fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801e3b8:	4a11      	ldr	r2, [pc, #68]	; (801e400 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801e3ba:	21e6      	movs	r1, #230	; 0xe6
 801e3bc:	e7da      	b.n	801e374 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801e3be:	3101      	adds	r1, #1
 801e3c0:	8701      	strh	r1, [r0, #56]	; 0x38
 801e3c2:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801e3c4:	b901      	cbnz	r1, 801e3c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801e3c6:	86c5      	strh	r5, [r0, #54]	; 0x36
 801e3c8:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801e3ca:	3901      	subs	r1, #1
 801e3cc:	b289      	uxth	r1, r1
 801e3ce:	86c1      	strh	r1, [r0, #54]	; 0x36
 801e3d0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801e3d4:	844c      	strh	r4, [r1, #34]	; 0x22
 801e3d6:	e7e6      	b.n	801e3a6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801e3d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e3dc:	f7ff bf48 	b.w	801e270 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801e3e0:	08032088 	.word	0x08032088
 801e3e4:	0803217e 	.word	0x0803217e
 801e3e8:	08032091 	.word	0x08032091
 801e3ec:	080320c9 	.word	0x080320c9
 801e3f0:	08032228 	.word	0x08032228
 801e3f4:	080320d7 	.word	0x080320d7
 801e3f8:	080324ff 	.word	0x080324ff
 801e3fc:	080320e3 	.word	0x080320e3
 801e400:	080320f6 	.word	0x080320f6

0801e404 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801e404:	3a01      	subs	r2, #1
 801e406:	b570      	push	{r4, r5, r6, lr}
 801e408:	b292      	uxth	r2, r2
 801e40a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801e40e:	42b2      	cmp	r2, r6
 801e410:	d019      	beq.n	801e446 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801e412:	8c04      	ldrh	r4, [r0, #32]
 801e414:	f831 5b02 	ldrh.w	r5, [r1], #2
 801e418:	4294      	cmp	r4, r2
 801e41a:	d805      	bhi.n	801e428 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801e41c:	4b19      	ldr	r3, [pc, #100]	; (801e484 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801e41e:	4a1a      	ldr	r2, [pc, #104]	; (801e488 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801e420:	481a      	ldr	r0, [pc, #104]	; (801e48c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801e422:	21c5      	movs	r1, #197	; 0xc5
 801e424:	f00f fd4c 	bl	802dec0 <__assert_func>
 801e428:	8bc4      	ldrh	r4, [r0, #30]
 801e42a:	4414      	add	r4, r2
 801e42c:	b2a4      	uxth	r4, r4
 801e42e:	2c01      	cmp	r4, #1
 801e430:	bf88      	it	hi
 801e432:	3c02      	subhi	r4, #2
 801e434:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e438:	3a01      	subs	r2, #1
 801e43a:	8b64      	ldrh	r4, [r4, #26]
 801e43c:	42ac      	cmp	r4, r5
 801e43e:	b292      	uxth	r2, r2
 801e440:	d0e5      	beq.n	801e40e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801e442:	2000      	movs	r0, #0
 801e444:	bd70      	pop	{r4, r5, r6, pc}
 801e446:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e44a:	2400      	movs	r4, #0
 801e44c:	4413      	add	r3, r2
 801e44e:	b2a2      	uxth	r2, r4
 801e450:	429a      	cmp	r2, r3
 801e452:	da14      	bge.n	801e47e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801e454:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801e456:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801e45a:	4296      	cmp	r6, r2
 801e45c:	d802      	bhi.n	801e464 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801e45e:	4b09      	ldr	r3, [pc, #36]	; (801e484 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801e460:	4a0b      	ldr	r2, [pc, #44]	; (801e490 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801e462:	e7dd      	b.n	801e420 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801e464:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801e466:	4432      	add	r2, r6
 801e468:	b292      	uxth	r2, r2
 801e46a:	2a09      	cmp	r2, #9
 801e46c:	bf88      	it	hi
 801e46e:	3a0a      	subhi	r2, #10
 801e470:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801e474:	3401      	adds	r4, #1
 801e476:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801e478:	42aa      	cmp	r2, r5
 801e47a:	d0e8      	beq.n	801e44e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801e47c:	e7e1      	b.n	801e442 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801e47e:	2001      	movs	r0, #1
 801e480:	e7e0      	b.n	801e444 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801e482:	bf00      	nop
 801e484:	080320c9 	.word	0x080320c9
 801e488:	08032583 	.word	0x08032583
 801e48c:	08032091 	.word	0x08032091
 801e490:	08032228 	.word	0x08032228

0801e494 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801e494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e498:	4605      	mov	r5, r0
 801e49a:	4616      	mov	r6, r2
 801e49c:	1c8c      	adds	r4, r1, #2
 801e49e:	8809      	ldrh	r1, [r1, #0]
 801e4a0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801e4a4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801e4a8:	42b3      	cmp	r3, r6
 801e4aa:	d124      	bne.n	801e4f6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801e4ac:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801e4b0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801e4b4:	f001 070f 	and.w	r7, r1, #15
 801e4b8:	f8cd 8000 	str.w	r8, [sp]
 801e4bc:	464b      	mov	r3, r9
 801e4be:	4652      	mov	r2, sl
 801e4c0:	4621      	mov	r1, r4
 801e4c2:	4628      	mov	r0, r5
 801e4c4:	f7ff ff9e 	bl	801e404 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801e4c8:	4683      	mov	fp, r0
 801e4ca:	b168      	cbz	r0, 801e4e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801e4cc:	eb0a 0109 	add.w	r1, sl, r9
 801e4d0:	4441      	add	r1, r8
 801e4d2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801e4d6:	463a      	mov	r2, r7
 801e4d8:	4649      	mov	r1, r9
 801e4da:	4628      	mov	r0, r5
 801e4dc:	f7ff ff42 	bl	801e364 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801e4e0:	4658      	mov	r0, fp
 801e4e2:	b003      	add	sp, #12
 801e4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4e8:	eb07 010a 	add.w	r1, r7, sl
 801e4ec:	4449      	add	r1, r9
 801e4ee:	4441      	add	r1, r8
 801e4f0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801e4f4:	e7d2      	b.n	801e49c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801e4f6:	f04f 0b00 	mov.w	fp, #0
 801e4fa:	e7f1      	b.n	801e4e0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801e4fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801e4fc:	b570      	push	{r4, r5, r6, lr}
 801e4fe:	8810      	ldrh	r0, [r2, #0]
 801e500:	4298      	cmp	r0, r3
 801e502:	d817      	bhi.n	801e534 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e504:	1e48      	subs	r0, r1, #1
 801e506:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801e50a:	4298      	cmp	r0, r3
 801e50c:	d312      	bcc.n	801e534 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e50e:	2400      	movs	r4, #0
 801e510:	428c      	cmp	r4, r1
 801e512:	d20f      	bcs.n	801e534 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e514:	1860      	adds	r0, r4, r1
 801e516:	1040      	asrs	r0, r0, #1
 801e518:	0085      	lsls	r5, r0, #2
 801e51a:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801e51e:	42b3      	cmp	r3, r6
 801e520:	d902      	bls.n	801e528 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801e522:	3001      	adds	r0, #1
 801e524:	b284      	uxth	r4, r0
 801e526:	e7f3      	b.n	801e510 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e528:	d201      	bcs.n	801e52e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801e52a:	b281      	uxth	r1, r0
 801e52c:	e7f0      	b.n	801e510 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e52e:	442a      	add	r2, r5
 801e530:	8850      	ldrh	r0, [r2, #2]
 801e532:	bd70      	pop	{r4, r5, r6, pc}
 801e534:	2000      	movs	r0, #0
 801e536:	e7fc      	b.n	801e532 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801e538 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801e538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e53c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801e53e:	886f      	ldrh	r7, [r5, #2]
 801e540:	4604      	mov	r4, r0
 801e542:	087f      	lsrs	r7, r7, #1
 801e544:	260b      	movs	r6, #11
 801e546:	3e01      	subs	r6, #1
 801e548:	d01b      	beq.n	801e582 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801e54a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e54c:	b92b      	cbnz	r3, 801e55a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801e54e:	4b0e      	ldr	r3, [pc, #56]	; (801e588 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801e550:	4a0e      	ldr	r2, [pc, #56]	; (801e58c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801e552:	480f      	ldr	r0, [pc, #60]	; (801e590 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801e554:	21c0      	movs	r1, #192	; 0xc0
 801e556:	f00f fcb3 	bl	802dec0 <__assert_func>
 801e55a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801e55c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e560:	462a      	mov	r2, r5
 801e562:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e566:	4639      	mov	r1, r7
 801e568:	4643      	mov	r3, r8
 801e56a:	4620      	mov	r0, r4
 801e56c:	f7ff ffc6 	bl	801e4fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801e570:	b138      	cbz	r0, 801e582 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801e572:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801e576:	4642      	mov	r2, r8
 801e578:	4620      	mov	r0, r4
 801e57a:	f7ff ff8b 	bl	801e494 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801e57e:	2800      	cmp	r0, #0
 801e580:	d1e1      	bne.n	801e546 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801e582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e586:	bf00      	nop
 801e588:	08032088 	.word	0x08032088
 801e58c:	080322fa 	.word	0x080322fa
 801e590:	08032091 	.word	0x08032091

0801e594 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 801e594:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e596:	b08d      	sub	sp, #52	; 0x34
 801e598:	2300      	movs	r3, #0
 801e59a:	9304      	str	r3, [sp, #16]
 801e59c:	9305      	str	r3, [sp, #20]
 801e59e:	9306      	str	r3, [sp, #24]
 801e5a0:	aa04      	add	r2, sp, #16
 801e5a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801e5a6:	9307      	str	r3, [sp, #28]
 801e5a8:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801e5ac:	4613      	mov	r3, r2
 801e5ae:	f101 0710 	add.w	r7, r1, #16
 801e5b2:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801e5f0 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 801e5b6:	460c      	mov	r4, r1
 801e5b8:	4605      	mov	r5, r0
 801e5ba:	ecb4 7a01 	vldmia	r4!, {s14}
 801e5be:	ecf5 6a01 	vldmia	r5!, {s13}
 801e5c2:	42bc      	cmp	r4, r7
 801e5c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e5c8:	d1f7      	bne.n	801e5ba <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 801e5ca:	3010      	adds	r0, #16
 801e5cc:	42b0      	cmp	r0, r6
 801e5ce:	ece2 7a01 	vstmia	r2!, {s15}
 801e5d2:	d1ee      	bne.n	801e5b2 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 801e5d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e5d6:	ac0c      	add	r4, sp, #48	; 0x30
 801e5d8:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e5dc:	ed9d 0a08 	vldr	s0, [sp, #32]
 801e5e0:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 801e5e4:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 801e5e8:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 801e5ec:	b00d      	add	sp, #52	; 0x34
 801e5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e5f0:	00000000 	.word	0x00000000

0801e5f4 <_ZN8touchgfx9Matrix4x4C1Ev>:
 801e5f4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 801e624 <_ZN8touchgfx9Matrix4x4C1Ev+0x30>
 801e5f8:	2300      	movs	r3, #0
 801e5fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e5fe:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 801e602:	2200      	movs	r2, #0
 801e604:	4293      	cmp	r3, r2
 801e606:	f102 0201 	add.w	r2, r2, #1
 801e60a:	bf14      	ite	ne
 801e60c:	eef0 6a47 	vmovne.f32	s13, s14
 801e610:	eef0 6a67 	vmoveq.f32	s13, s15
 801e614:	2a04      	cmp	r2, #4
 801e616:	ece1 6a01 	vstmia	r1!, {s13}
 801e61a:	d1f3      	bne.n	801e604 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 801e61c:	3301      	adds	r3, #1
 801e61e:	2b04      	cmp	r3, #4
 801e620:	d1ed      	bne.n	801e5fe <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 801e622:	4770      	bx	lr
 801e624:	00000000 	.word	0x00000000

0801e628 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 801e628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e62c:	460c      	mov	r4, r1
 801e62e:	4605      	mov	r5, r0
 801e630:	4690      	mov	r8, r2
 801e632:	f7ff ffdf 	bl	801e5f4 <_ZN8touchgfx9Matrix4x4C1Ev>
 801e636:	4628      	mov	r0, r5
 801e638:	4621      	mov	r1, r4
 801e63a:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801e63e:	2300      	movs	r3, #0
 801e640:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801e680 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x58>
 801e644:	eb08 0603 	add.w	r6, r8, r3
 801e648:	460f      	mov	r7, r1
 801e64a:	2400      	movs	r4, #0
 801e64c:	4632      	mov	r2, r6
 801e64e:	ecf7 6a01 	vldmia	r7!, {s13}
 801e652:	ed92 7a00 	vldr	s14, [r2]
 801e656:	3401      	adds	r4, #1
 801e658:	2c04      	cmp	r4, #4
 801e65a:	f106 0610 	add.w	r6, r6, #16
 801e65e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e662:	d1f3      	bne.n	801e64c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 801e664:	18c2      	adds	r2, r0, r3
 801e666:	3304      	adds	r3, #4
 801e668:	2b10      	cmp	r3, #16
 801e66a:	edc2 7a00 	vstr	s15, [r2]
 801e66e:	d1e7      	bne.n	801e640 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 801e670:	3110      	adds	r1, #16
 801e672:	4561      	cmp	r1, ip
 801e674:	f100 0010 	add.w	r0, r0, #16
 801e678:	d1e1      	bne.n	801e63e <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 801e67a:	4628      	mov	r0, r5
 801e67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e680:	00000000 	.word	0x00000000

0801e684 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 801e684:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e688:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801e68c:	f100 0320 	add.w	r3, r0, #32
 801e690:	3030      	adds	r0, #48	; 0x30
 801e692:	ecf3 7a01 	vldmia	r3!, {s15}
 801e696:	ee60 7a27 	vmul.f32	s15, s0, s15
 801e69a:	4283      	cmp	r3, r0
 801e69c:	edc3 7a03 	vstr	s15, [r3, #12]
 801e6a0:	d1f7      	bne.n	801e692 <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 801e6a2:	4770      	bx	lr

0801e6a4 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 801e6a4:	b510      	push	{r4, lr}
 801e6a6:	ed2d 8b02 	vpush	{d8}
 801e6aa:	4604      	mov	r4, r0
 801e6ac:	eef0 8a40 	vmov.f32	s17, s0
 801e6b0:	f00e fed4 	bl	802d45c <sinf>
 801e6b4:	eeb0 8a40 	vmov.f32	s16, s0
 801e6b8:	eeb0 0a68 	vmov.f32	s0, s17
 801e6bc:	f00e fe4c 	bl	802d358 <cosf>
 801e6c0:	f104 0310 	add.w	r3, r4, #16
 801e6c4:	f104 0220 	add.w	r2, r4, #32
 801e6c8:	eeb1 6a48 	vneg.f32	s12, s16
 801e6cc:	edd3 7a04 	vldr	s15, [r3, #16]
 801e6d0:	edd3 6a00 	vldr	s13, [r3]
 801e6d4:	ee26 7a27 	vmul.f32	s14, s12, s15
 801e6d8:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e6dc:	eea6 7a80 	vfma.f32	s14, s13, s0
 801e6e0:	eee6 7a88 	vfma.f32	s15, s13, s16
 801e6e4:	eca3 7a01 	vstmia	r3!, {s14}
 801e6e8:	429a      	cmp	r2, r3
 801e6ea:	edc3 7a03 	vstr	s15, [r3, #12]
 801e6ee:	d1ed      	bne.n	801e6cc <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 801e6f0:	ecbd 8b02 	vpop	{d8}
 801e6f4:	4620      	mov	r0, r4
 801e6f6:	bd10      	pop	{r4, pc}

0801e6f8 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 801e6f8:	b510      	push	{r4, lr}
 801e6fa:	ed2d 8b02 	vpush	{d8}
 801e6fe:	4604      	mov	r4, r0
 801e700:	eef0 8a40 	vmov.f32	s17, s0
 801e704:	f00e feaa 	bl	802d45c <sinf>
 801e708:	eeb0 8a40 	vmov.f32	s16, s0
 801e70c:	eeb0 0a68 	vmov.f32	s0, s17
 801e710:	f00e fe22 	bl	802d358 <cosf>
 801e714:	4623      	mov	r3, r4
 801e716:	f104 0210 	add.w	r2, r4, #16
 801e71a:	eeb1 6a48 	vneg.f32	s12, s16
 801e71e:	edd3 7a08 	vldr	s15, [r3, #32]
 801e722:	edd3 6a00 	vldr	s13, [r3]
 801e726:	ee27 7a88 	vmul.f32	s14, s15, s16
 801e72a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e72e:	eea6 7a80 	vfma.f32	s14, s13, s0
 801e732:	eee6 7a26 	vfma.f32	s15, s12, s13
 801e736:	eca3 7a01 	vstmia	r3!, {s14}
 801e73a:	429a      	cmp	r2, r3
 801e73c:	edc3 7a07 	vstr	s15, [r3, #28]
 801e740:	d1ed      	bne.n	801e71e <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 801e742:	ecbd 8b02 	vpop	{d8}
 801e746:	4620      	mov	r0, r4
 801e748:	bd10      	pop	{r4, pc}

0801e74a <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 801e74a:	b510      	push	{r4, lr}
 801e74c:	ed2d 8b02 	vpush	{d8}
 801e750:	4604      	mov	r4, r0
 801e752:	eef0 8a40 	vmov.f32	s17, s0
 801e756:	f00e fe81 	bl	802d45c <sinf>
 801e75a:	eeb0 8a40 	vmov.f32	s16, s0
 801e75e:	eeb0 0a68 	vmov.f32	s0, s17
 801e762:	f00e fdf9 	bl	802d358 <cosf>
 801e766:	4623      	mov	r3, r4
 801e768:	f104 0210 	add.w	r2, r4, #16
 801e76c:	eeb1 6a48 	vneg.f32	s12, s16
 801e770:	edd3 7a04 	vldr	s15, [r3, #16]
 801e774:	edd3 6a00 	vldr	s13, [r3]
 801e778:	ee26 7a27 	vmul.f32	s14, s12, s15
 801e77c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e780:	eea6 7a80 	vfma.f32	s14, s13, s0
 801e784:	eee6 7a88 	vfma.f32	s15, s13, s16
 801e788:	eca3 7a01 	vstmia	r3!, {s14}
 801e78c:	429a      	cmp	r2, r3
 801e78e:	edc3 7a03 	vstr	s15, [r3, #12]
 801e792:	d1ed      	bne.n	801e770 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 801e794:	ecbd 8b02 	vpop	{d8}
 801e798:	4620      	mov	r0, r4
 801e79a:	bd10      	pop	{r4, pc}

0801e79c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 801e79c:	4603      	mov	r3, r0
 801e79e:	f100 0210 	add.w	r2, r0, #16
 801e7a2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801e7a6:	edd3 7a00 	vldr	s15, [r3]
 801e7aa:	eee7 7a00 	vfma.f32	s15, s14, s0
 801e7ae:	ece3 7a01 	vstmia	r3!, {s15}
 801e7b2:	4293      	cmp	r3, r2
 801e7b4:	d1f5      	bne.n	801e7a2 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 801e7b6:	4770      	bx	lr

0801e7b8 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 801e7b8:	f100 0310 	add.w	r3, r0, #16
 801e7bc:	f100 0220 	add.w	r2, r0, #32
 801e7c0:	ed93 7a08 	vldr	s14, [r3, #32]
 801e7c4:	edd3 7a00 	vldr	s15, [r3]
 801e7c8:	eee7 7a00 	vfma.f32	s15, s14, s0
 801e7cc:	ece3 7a01 	vstmia	r3!, {s15}
 801e7d0:	4293      	cmp	r3, r2
 801e7d2:	d1f5      	bne.n	801e7c0 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 801e7d4:	4770      	bx	lr

0801e7d6 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 801e7d6:	f100 0320 	add.w	r3, r0, #32
 801e7da:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801e7de:	ed93 7a04 	vldr	s14, [r3, #16]
 801e7e2:	edd3 7a00 	vldr	s15, [r3]
 801e7e6:	eee7 7a00 	vfma.f32	s15, s14, s0
 801e7ea:	ece3 7a01 	vstmia	r3!, {s15}
 801e7ee:	4293      	cmp	r3, r2
 801e7f0:	d1f5      	bne.n	801e7de <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 801e7f2:	4770      	bx	lr

0801e7f4 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 801e7f4:	4603      	mov	r3, r0
 801e7f6:	f100 0210 	add.w	r2, r0, #16
 801e7fa:	edd3 7a00 	vldr	s15, [r3]
 801e7fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e802:	ece3 7a01 	vstmia	r3!, {s15}
 801e806:	4293      	cmp	r3, r2
 801e808:	d1f7      	bne.n	801e7fa <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 801e80a:	4770      	bx	lr

0801e80c <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 801e80c:	f100 0310 	add.w	r3, r0, #16
 801e810:	f100 0220 	add.w	r2, r0, #32
 801e814:	edd3 7a00 	vldr	s15, [r3]
 801e818:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e81c:	ece3 7a01 	vstmia	r3!, {s15}
 801e820:	4293      	cmp	r3, r2
 801e822:	d1f7      	bne.n	801e814 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 801e824:	4770      	bx	lr

0801e826 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 801e826:	f100 0320 	add.w	r3, r0, #32
 801e82a:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801e82e:	edd3 7a00 	vldr	s15, [r3]
 801e832:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e836:	ece3 7a01 	vstmia	r3!, {s15}
 801e83a:	4293      	cmp	r3, r2
 801e83c:	d1f7      	bne.n	801e82e <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 801e83e:	4770      	bx	lr

0801e840 <_ZN8touchgfx8ceil28_4El>:
 801e840:	f110 030f 	adds.w	r3, r0, #15
 801e844:	d401      	bmi.n	801e84a <_ZN8touchgfx8ceil28_4El+0xa>
 801e846:	1118      	asrs	r0, r3, #4
 801e848:	4770      	bx	lr
 801e84a:	f1c0 0001 	rsb	r0, r0, #1
 801e84e:	f010 000f 	ands.w	r0, r0, #15
 801e852:	bf18      	it	ne
 801e854:	2001      	movne	r0, #1
 801e856:	2210      	movs	r2, #16
 801e858:	fb93 f3f2 	sdiv	r3, r3, r2
 801e85c:	1a18      	subs	r0, r3, r0
 801e85e:	4770      	bx	lr

0801e860 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801e860:	2900      	cmp	r1, #0
 801e862:	b538      	push	{r3, r4, r5, lr}
 801e864:	dc05      	bgt.n	801e872 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801e866:	4b0f      	ldr	r3, [pc, #60]	; (801e8a4 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801e868:	4a0f      	ldr	r2, [pc, #60]	; (801e8a8 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801e86a:	4810      	ldr	r0, [pc, #64]	; (801e8ac <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801e86c:	21f7      	movs	r1, #247	; 0xf7
 801e86e:	f00f fb27 	bl	802dec0 <__assert_func>
 801e872:	2800      	cmp	r0, #0
 801e874:	db06      	blt.n	801e884 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801e876:	fb90 f4f1 	sdiv	r4, r0, r1
 801e87a:	6014      	str	r4, [r2, #0]
 801e87c:	fb01 0114 	mls	r1, r1, r4, r0
 801e880:	6019      	str	r1, [r3, #0]
 801e882:	bd38      	pop	{r3, r4, r5, pc}
 801e884:	4240      	negs	r0, r0
 801e886:	fb90 f4f1 	sdiv	r4, r0, r1
 801e88a:	4265      	negs	r5, r4
 801e88c:	fb01 0014 	mls	r0, r1, r4, r0
 801e890:	6015      	str	r5, [r2, #0]
 801e892:	6018      	str	r0, [r3, #0]
 801e894:	2800      	cmp	r0, #0
 801e896:	d0f4      	beq.n	801e882 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801e898:	6810      	ldr	r0, [r2, #0]
 801e89a:	3801      	subs	r0, #1
 801e89c:	6010      	str	r0, [r2, #0]
 801e89e:	6818      	ldr	r0, [r3, #0]
 801e8a0:	1a09      	subs	r1, r1, r0
 801e8a2:	e7ed      	b.n	801e880 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801e8a4:	08032654 	.word	0x08032654
 801e8a8:	08032693 	.word	0x08032693
 801e8ac:	08032664 	.word	0x08032664

0801e8b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801e8b0:	b570      	push	{r4, r5, r6, lr}
 801e8b2:	694a      	ldr	r2, [r1, #20]
 801e8b4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801e8b6:	684b      	ldr	r3, [r1, #4]
 801e8b8:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801e8ba:	1b54      	subs	r4, r2, r5
 801e8bc:	f000 8106 	beq.w	801eacc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801e8c0:	1b9b      	subs	r3, r3, r6
 801e8c2:	d003      	beq.n	801e8cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e8c4:	4363      	muls	r3, r4
 801e8c6:	2210      	movs	r2, #16
 801e8c8:	fb93 f3f2 	sdiv	r3, r3, r2
 801e8cc:	680c      	ldr	r4, [r1, #0]
 801e8ce:	698a      	ldr	r2, [r1, #24]
 801e8d0:	1b65      	subs	r5, r4, r5
 801e8d2:	f000 80fd 	beq.w	801ead0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801e8d6:	1b92      	subs	r2, r2, r6
 801e8d8:	d003      	beq.n	801e8e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e8da:	436a      	muls	r2, r5
 801e8dc:	2410      	movs	r4, #16
 801e8de:	fb92 f2f4 	sdiv	r2, r2, r4
 801e8e2:	1a9b      	subs	r3, r3, r2
 801e8e4:	ee07 3a90 	vmov	s15, r3
 801e8e8:	ed9f 4a88 	vldr	s8, [pc, #544]	; 801eb0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801e8ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e8f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e8f4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e8f8:	460a      	mov	r2, r1
 801e8fa:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801e8fe:	4603      	mov	r3, r0
 801e900:	f100 040c 	add.w	r4, r0, #12
 801e904:	eeb1 6a43 	vneg.f32	s12, s6
 801e908:	edd2 7a02 	vldr	s15, [r2, #8]
 801e90c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801e910:	3214      	adds	r2, #20
 801e912:	ece3 6a01 	vstmia	r3!, {s13}
 801e916:	ed52 7a02 	vldr	s15, [r2, #-8]
 801e91a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e91e:	429c      	cmp	r4, r3
 801e920:	edc3 7a02 	vstr	s15, [r3, #8]
 801e924:	ed52 7a01 	vldr	s15, [r2, #-4]
 801e928:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e92c:	edc3 7a05 	vstr	s15, [r3, #20]
 801e930:	d1ea      	bne.n	801e908 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801e932:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e934:	698b      	ldr	r3, [r1, #24]
 801e936:	edd0 4a02 	vldr	s9, [r0, #8]
 801e93a:	edd0 3a00 	vldr	s7, [r0]
 801e93e:	edd0 6a01 	vldr	s13, [r0, #4]
 801e942:	ed90 5a05 	vldr	s10, [r0, #20]
 801e946:	ed90 2a03 	vldr	s4, [r0, #12]
 801e94a:	edd0 5a04 	vldr	s11, [r0, #16]
 801e94e:	ed90 1a07 	vldr	s2, [r0, #28]
 801e952:	edd0 2a06 	vldr	s5, [r0, #24]
 801e956:	1a9b      	subs	r3, r3, r2
 801e958:	ee07 3a90 	vmov	s15, r3
 801e95c:	684b      	ldr	r3, [r1, #4]
 801e95e:	1a9b      	subs	r3, r3, r2
 801e960:	ee07 3a10 	vmov	s14, r3
 801e964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e968:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801e96c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e970:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801e974:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e978:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801e97c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e980:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801e984:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e988:	ee32 5a45 	vsub.f32	s10, s4, s10
 801e98c:	ee67 7a83 	vmul.f32	s15, s15, s6
 801e990:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801e994:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e996:	694a      	ldr	r2, [r1, #20]
 801e998:	1b13      	subs	r3, r2, r4
 801e99a:	ee07 3a10 	vmov	s14, r3
 801e99e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e9a2:	680b      	ldr	r3, [r1, #0]
 801e9a4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e9a8:	1b1b      	subs	r3, r3, r4
 801e9aa:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801e9ae:	ee07 3a10 	vmov	s14, r3
 801e9b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e9b6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e9ba:	eee6 4a87 	vfma.f32	s9, s13, s14
 801e9be:	ee64 4a86 	vmul.f32	s9, s9, s12
 801e9c2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801e9c6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e9c8:	698b      	ldr	r3, [r1, #24]
 801e9ca:	1a9b      	subs	r3, r3, r2
 801e9cc:	ee06 3a90 	vmov	s13, r3
 801e9d0:	684b      	ldr	r3, [r1, #4]
 801e9d2:	1a9b      	subs	r3, r3, r2
 801e9d4:	ee07 3a10 	vmov	s14, r3
 801e9d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e9dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e9e0:	ee66 6a84 	vmul.f32	s13, s13, s8
 801e9e4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e9e8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801e9ec:	eee5 6a87 	vfma.f32	s13, s11, s14
 801e9f0:	ee66 6a83 	vmul.f32	s13, s13, s6
 801e9f4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801e9f8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e9fa:	694a      	ldr	r2, [r1, #20]
 801e9fc:	1b13      	subs	r3, r2, r4
 801e9fe:	ee07 3a10 	vmov	s14, r3
 801ea02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ea06:	680b      	ldr	r3, [r1, #0]
 801ea08:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ea0c:	1b1b      	subs	r3, r3, r4
 801ea0e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801ea12:	ee07 3a10 	vmov	s14, r3
 801ea16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ea1a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ea1e:	eea5 5a87 	vfma.f32	s10, s11, s14
 801ea22:	edd0 5a08 	vldr	s11, [r0, #32]
 801ea26:	ee25 5a06 	vmul.f32	s10, s10, s12
 801ea2a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801ea2e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801ea32:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801ea34:	698b      	ldr	r3, [r1, #24]
 801ea36:	1a9b      	subs	r3, r3, r2
 801ea38:	ee07 3a10 	vmov	s14, r3
 801ea3c:	684b      	ldr	r3, [r1, #4]
 801ea3e:	1a9b      	subs	r3, r3, r2
 801ea40:	ee01 3a90 	vmov	s3, r3
 801ea44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ea48:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801ea4c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ea50:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801ea54:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801ea58:	ee61 1a84 	vmul.f32	s3, s3, s8
 801ea5c:	eea1 7a21 	vfma.f32	s14, s2, s3
 801ea60:	ee27 7a03 	vmul.f32	s14, s14, s6
 801ea64:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801ea68:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801ea6a:	694a      	ldr	r2, [r1, #20]
 801ea6c:	1b13      	subs	r3, r2, r4
 801ea6e:	ee03 3a10 	vmov	s6, r3
 801ea72:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801ea76:	680b      	ldr	r3, [r1, #0]
 801ea78:	ee23 3a04 	vmul.f32	s6, s6, s8
 801ea7c:	1b1b      	subs	r3, r3, r4
 801ea7e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801ea82:	ee03 3a10 	vmov	s6, r3
 801ea86:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801ea8a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801ea8e:	eee1 5a04 	vfma.f32	s11, s2, s8
 801ea92:	ee25 6a86 	vmul.f32	s12, s11, s12
 801ea96:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801ea9a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801ea9e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801eaa2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801eaa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eaaa:	dd13      	ble.n	801ead4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801eaac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801eab0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801eab4:	63c3      	str	r3, [r0, #60]	; 0x3c
 801eab6:	eee3 7a87 	vfma.f32	s15, s7, s14
 801eaba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801eabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eac2:	dd15      	ble.n	801eaf0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801eac4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801eac8:	6403      	str	r3, [r0, #64]	; 0x40
 801eaca:	bd70      	pop	{r4, r5, r6, pc}
 801eacc:	4623      	mov	r3, r4
 801eace:	e6fd      	b.n	801e8cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ead0:	462a      	mov	r2, r5
 801ead2:	e706      	b.n	801e8e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ead4:	d502      	bpl.n	801eadc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801ead6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801eada:	e7e9      	b.n	801eab0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801eadc:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801eae0:	eea3 2a85 	vfma.f32	s4, s7, s10
 801eae4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801eae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eaec:	dade      	bge.n	801eaac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801eaee:	e7f2      	b.n	801ead6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801eaf0:	d502      	bpl.n	801eaf8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801eaf2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801eaf6:	e7e7      	b.n	801eac8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801eaf8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801eafc:	eee3 4a86 	vfma.f32	s9, s7, s12
 801eb00:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801eb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb08:	dadc      	bge.n	801eac4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801eb0a:	e7f2      	b.n	801eaf2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801eb0c:	3d800000 	.word	0x3d800000

0801eb10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801eb10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb14:	f04f 0814 	mov.w	r8, #20
 801eb18:	fb08 f903 	mul.w	r9, r8, r3
 801eb1c:	eb02 0a09 	add.w	sl, r2, r9
 801eb20:	4604      	mov	r4, r0
 801eb22:	f8da 0004 	ldr.w	r0, [sl, #4]
 801eb26:	4617      	mov	r7, r2
 801eb28:	460d      	mov	r5, r1
 801eb2a:	461e      	mov	r6, r3
 801eb2c:	f7ff fe88 	bl	801e840 <_ZN8touchgfx8ceil28_4El>
 801eb30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eb32:	6160      	str	r0, [r4, #20]
 801eb34:	fb08 f803 	mul.w	r8, r8, r3
 801eb38:	eb07 0b08 	add.w	fp, r7, r8
 801eb3c:	9001      	str	r0, [sp, #4]
 801eb3e:	f8db 0004 	ldr.w	r0, [fp, #4]
 801eb42:	f7ff fe7d 	bl	801e840 <_ZN8touchgfx8ceil28_4El>
 801eb46:	9a01      	ldr	r2, [sp, #4]
 801eb48:	1a80      	subs	r0, r0, r2
 801eb4a:	61a0      	str	r0, [r4, #24]
 801eb4c:	2800      	cmp	r0, #0
 801eb4e:	f000 8088 	beq.w	801ec62 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801eb52:	f857 3009 	ldr.w	r3, [r7, r9]
 801eb56:	f857 c008 	ldr.w	ip, [r7, r8]
 801eb5a:	f8da 1004 	ldr.w	r1, [sl, #4]
 801eb5e:	f8db 0004 	ldr.w	r0, [fp, #4]
 801eb62:	ebac 0c03 	sub.w	ip, ip, r3
 801eb66:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801eb6a:	fb0b f202 	mul.w	r2, fp, r2
 801eb6e:	fb0c 2211 	mls	r2, ip, r1, r2
 801eb72:	1a40      	subs	r0, r0, r1
 801eb74:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801eb78:	fb00 2003 	mla	r0, r0, r3, r2
 801eb7c:	3801      	subs	r0, #1
 801eb7e:	f104 0310 	add.w	r3, r4, #16
 801eb82:	4622      	mov	r2, r4
 801eb84:	4641      	mov	r1, r8
 801eb86:	4440      	add	r0, r8
 801eb88:	f7ff fe6a 	bl	801e860 <_ZN8touchgfx11floorDivModEllRlS0_>
 801eb8c:	f104 0308 	add.w	r3, r4, #8
 801eb90:	1d22      	adds	r2, r4, #4
 801eb92:	4641      	mov	r1, r8
 801eb94:	4658      	mov	r0, fp
 801eb96:	f7ff fe63 	bl	801e860 <_ZN8touchgfx11floorDivModEllRlS0_>
 801eb9a:	f8c4 800c 	str.w	r8, [r4, #12]
 801eb9e:	f8da 3004 	ldr.w	r3, [sl, #4]
 801eba2:	6962      	ldr	r2, [r4, #20]
 801eba4:	eddf 6a31 	vldr	s13, [pc, #196]	; 801ec6c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801eba8:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801ebac:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801ebb0:	ee07 3a10 	vmov	s14, r3
 801ebb4:	6822      	ldr	r2, [r4, #0]
 801ebb6:	f857 3009 	ldr.w	r3, [r7, r9]
 801ebba:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801ebbe:	ee07 3a90 	vmov	s15, r3
 801ebc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ebc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ebca:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801ebce:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ebd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ebd6:	edd3 6a00 	vldr	s13, [r3]
 801ebda:	eee6 6a07 	vfma.f32	s13, s12, s14
 801ebde:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801ebe2:	eee6 6a27 	vfma.f32	s13, s12, s15
 801ebe6:	edc4 6a07 	vstr	s13, [r4, #28]
 801ebea:	edd4 6a01 	vldr	s13, [r4, #4]
 801ebee:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801ebf2:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801ebf6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ebfa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801ebfe:	ed84 6a08 	vstr	s12, [r4, #32]
 801ec02:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801ec04:	6262      	str	r2, [r4, #36]	; 0x24
 801ec06:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801ec0a:	ed93 6a03 	vldr	s12, [r3, #12]
 801ec0e:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ec12:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801ec16:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801ec1a:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801ec1e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801ec22:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801ec26:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801ec2a:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801ec2e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801ec30:	6322      	str	r2, [r4, #48]	; 0x30
 801ec32:	ed93 6a06 	vldr	s12, [r3, #24]
 801ec36:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801ec3a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ec3e:	eeb0 7a46 	vmov.f32	s14, s12
 801ec42:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801ec46:	eea6 7a27 	vfma.f32	s14, s12, s15
 801ec4a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801ec4e:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801ec52:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801ec56:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ec5a:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801ec5e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801ec60:	63e3      	str	r3, [r4, #60]	; 0x3c
 801ec62:	4620      	mov	r0, r4
 801ec64:	b003      	add	sp, #12
 801ec66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec6a:	bf00      	nop
 801ec6c:	3d800000 	.word	0x3d800000

0801ec70 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801ec70:	4602      	mov	r2, r0
 801ec72:	b148      	cbz	r0, 801ec88 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801ec74:	2300      	movs	r3, #0
 801ec76:	b298      	uxth	r0, r3
 801ec78:	3301      	adds	r3, #1
 801ec7a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801ec7e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801ec82:	2900      	cmp	r1, #0
 801ec84:	d1f7      	bne.n	801ec76 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801ec86:	4770      	bx	lr
 801ec88:	4770      	bx	lr

0801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801ec8a:	b530      	push	{r4, r5, lr}
 801ec8c:	4604      	mov	r4, r0
 801ec8e:	b159      	cbz	r1, 801eca8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801ec90:	b148      	cbz	r0, 801eca6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801ec92:	2300      	movs	r3, #0
 801ec94:	b298      	uxth	r0, r3
 801ec96:	4282      	cmp	r2, r0
 801ec98:	d905      	bls.n	801eca6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801ec9a:	5ccd      	ldrb	r5, [r1, r3]
 801ec9c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801eca0:	3301      	adds	r3, #1
 801eca2:	2d00      	cmp	r5, #0
 801eca4:	d1f6      	bne.n	801ec94 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801eca6:	bd30      	pop	{r4, r5, pc}
 801eca8:	4608      	mov	r0, r1
 801ecaa:	e7fc      	b.n	801eca6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801ecac <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801ecac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ecae:	b08b      	sub	sp, #44	; 0x2c
 801ecb0:	468c      	mov	ip, r1
 801ecb2:	2100      	movs	r1, #0
 801ecb4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801ecb8:	ae01      	add	r6, sp, #4
 801ecba:	211f      	movs	r1, #31
 801ecbc:	fbb0 f7f3 	udiv	r7, r0, r3
 801ecc0:	fb03 0517 	mls	r5, r3, r7, r0
 801ecc4:	b2ec      	uxtb	r4, r5
 801ecc6:	2d09      	cmp	r5, #9
 801ecc8:	bfd4      	ite	le
 801ecca:	3430      	addle	r4, #48	; 0x30
 801eccc:	3457      	addgt	r4, #87	; 0x57
 801ecce:	b2e4      	uxtb	r4, r4
 801ecd0:	558c      	strb	r4, [r1, r6]
 801ecd2:	4638      	mov	r0, r7
 801ecd4:	1e4c      	subs	r4, r1, #1
 801ecd6:	b92f      	cbnz	r7, 801ece4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801ecd8:	4431      	add	r1, r6
 801ecda:	4660      	mov	r0, ip
 801ecdc:	f7ff ffd5 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801ece0:	b00b      	add	sp, #44	; 0x2c
 801ece2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ece4:	4621      	mov	r1, r4
 801ece6:	e7e9      	b.n	801ecbc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801ece8 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801ece8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ecea:	4607      	mov	r7, r0
 801ecec:	b08b      	sub	sp, #44	; 0x2c
 801ecee:	4608      	mov	r0, r1
 801ecf0:	b341      	cbz	r1, 801ed44 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801ecf2:	1e99      	subs	r1, r3, #2
 801ecf4:	2922      	cmp	r1, #34	; 0x22
 801ecf6:	d825      	bhi.n	801ed44 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801ecf8:	2100      	movs	r1, #0
 801ecfa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801ecfe:	463c      	mov	r4, r7
 801ed00:	261f      	movs	r6, #31
 801ed02:	f10d 0c04 	add.w	ip, sp, #4
 801ed06:	fb94 fef3 	sdiv	lr, r4, r3
 801ed0a:	fb03 441e 	mls	r4, r3, lr, r4
 801ed0e:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801ed12:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801ed16:	b2ec      	uxtb	r4, r5
 801ed18:	2d09      	cmp	r5, #9
 801ed1a:	bfd4      	ite	le
 801ed1c:	3430      	addle	r4, #48	; 0x30
 801ed1e:	3457      	addgt	r4, #87	; 0x57
 801ed20:	b2e4      	uxtb	r4, r4
 801ed22:	f80c 4006 	strb.w	r4, [ip, r6]
 801ed26:	4674      	mov	r4, lr
 801ed28:	1e71      	subs	r1, r6, #1
 801ed2a:	b96c      	cbnz	r4, 801ed48 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801ed2c:	2f00      	cmp	r7, #0
 801ed2e:	da05      	bge.n	801ed3c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801ed30:	ab0a      	add	r3, sp, #40	; 0x28
 801ed32:	4419      	add	r1, r3
 801ed34:	232d      	movs	r3, #45	; 0x2d
 801ed36:	f801 3c24 	strb.w	r3, [r1, #-36]
 801ed3a:	1eb1      	subs	r1, r6, #2
 801ed3c:	3101      	adds	r1, #1
 801ed3e:	4461      	add	r1, ip
 801ed40:	f7ff ffa3 	bl	801ec8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801ed44:	b00b      	add	sp, #44	; 0x2c
 801ed46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ed48:	460e      	mov	r6, r1
 801ed4a:	e7dc      	b.n	801ed06 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801ed4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801ed4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed50:	4691      	mov	r9, r2
 801ed52:	b085      	sub	sp, #20
 801ed54:	6802      	ldr	r2, [r0, #0]
 801ed56:	9201      	str	r2, [sp, #4]
 801ed58:	4688      	mov	r8, r1
 801ed5a:	4683      	mov	fp, r0
 801ed5c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801ed60:	9103      	str	r1, [sp, #12]
 801ed62:	4610      	mov	r0, r2
 801ed64:	461c      	mov	r4, r3
 801ed66:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801ed6a:	9302      	str	r3, [sp, #8]
 801ed6c:	f7ff ff80 	bl	801ec70 <_ZN8touchgfx7Unicode6strlenEPKt>
 801ed70:	f1b8 0f00 	cmp.w	r8, #0
 801ed74:	bf0c      	ite	eq
 801ed76:	4684      	moveq	ip, r0
 801ed78:	f100 0c01 	addne.w	ip, r0, #1
 801ed7c:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801ed80:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801ed84:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ed86:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ed88:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801ed8c:	9903      	ldr	r1, [sp, #12]
 801ed8e:	fa1f fc8c 	uxth.w	ip, ip
 801ed92:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801ed96:	d041      	beq.n	801ee1c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801ed98:	d834      	bhi.n	801ee04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801ed9a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801ed9e:	d059      	beq.n	801ee54 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801eda0:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801eda4:	d03a      	beq.n	801ee1c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801eda6:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801edaa:	d034      	beq.n	801ee16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801edac:	2400      	movs	r4, #0
 801edae:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801edb2:	3a01      	subs	r2, #1
 801edb4:	b169      	cbz	r1, 801edd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801edb6:	9911      	ldr	r1, [sp, #68]	; 0x44
 801edb8:	458c      	cmp	ip, r1
 801edba:	da09      	bge.n	801edd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801edbc:	eba1 010c 	sub.w	r1, r1, ip
 801edc0:	b289      	uxth	r1, r1
 801edc2:	b933      	cbnz	r3, 801edd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801edc4:	2e00      	cmp	r6, #0
 801edc6:	d051      	beq.n	801ee6c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801edc8:	2800      	cmp	r0, #0
 801edca:	d04f      	beq.n	801ee6c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801edcc:	440c      	add	r4, r1
 801edce:	b2a4      	uxth	r4, r4
 801edd0:	2100      	movs	r1, #0
 801edd2:	682b      	ldr	r3, [r5, #0]
 801edd4:	4293      	cmp	r3, r2
 801edd6:	da07      	bge.n	801ede8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801edd8:	f1b8 0f00 	cmp.w	r8, #0
 801eddc:	d004      	beq.n	801ede8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801edde:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801ede2:	682b      	ldr	r3, [r5, #0]
 801ede4:	3301      	adds	r3, #1
 801ede6:	602b      	str	r3, [r5, #0]
 801ede8:	2730      	movs	r7, #48	; 0x30
 801edea:	2c00      	cmp	r4, #0
 801edec:	d04e      	beq.n	801ee8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801edee:	682e      	ldr	r6, [r5, #0]
 801edf0:	3c01      	subs	r4, #1
 801edf2:	42b2      	cmp	r2, r6
 801edf4:	b2a4      	uxth	r4, r4
 801edf6:	dd49      	ble.n	801ee8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801edf8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801edfc:	682b      	ldr	r3, [r5, #0]
 801edfe:	3301      	adds	r3, #1
 801ee00:	602b      	str	r3, [r5, #0]
 801ee02:	e7f2      	b.n	801edea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801ee04:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801ee08:	d01d      	beq.n	801ee46 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801ee0a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801ee0e:	d002      	beq.n	801ee16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801ee10:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801ee14:	e7c9      	b.n	801edaa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801ee16:	4684      	mov	ip, r0
 801ee18:	f04f 0800 	mov.w	r8, #0
 801ee1c:	2c00      	cmp	r4, #0
 801ee1e:	d0c6      	beq.n	801edae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ee20:	b947      	cbnz	r7, 801ee34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801ee22:	2801      	cmp	r0, #1
 801ee24:	d106      	bne.n	801ee34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801ee26:	8814      	ldrh	r4, [r2, #0]
 801ee28:	2c30      	cmp	r4, #48	; 0x30
 801ee2a:	bf02      	ittt	eq
 801ee2c:	3202      	addeq	r2, #2
 801ee2e:	f8cb 2000 	streq.w	r2, [fp]
 801ee32:	4638      	moveq	r0, r7
 801ee34:	45bc      	cmp	ip, r7
 801ee36:	da14      	bge.n	801ee62 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801ee38:	b2bf      	uxth	r7, r7
 801ee3a:	eba7 040c 	sub.w	r4, r7, ip
 801ee3e:	b2a4      	uxth	r4, r4
 801ee40:	46bc      	mov	ip, r7
 801ee42:	2600      	movs	r6, #0
 801ee44:	e7b3      	b.n	801edae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ee46:	4684      	mov	ip, r0
 801ee48:	b16c      	cbz	r4, 801ee66 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801ee4a:	42b8      	cmp	r0, r7
 801ee4c:	dd00      	ble.n	801ee50 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801ee4e:	b2b8      	uxth	r0, r7
 801ee50:	2400      	movs	r4, #0
 801ee52:	e003      	b.n	801ee5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801ee54:	f04f 0c01 	mov.w	ip, #1
 801ee58:	2400      	movs	r4, #0
 801ee5a:	4660      	mov	r0, ip
 801ee5c:	4626      	mov	r6, r4
 801ee5e:	46a0      	mov	r8, r4
 801ee60:	e7a5      	b.n	801edae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ee62:	2400      	movs	r4, #0
 801ee64:	e7ed      	b.n	801ee42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801ee66:	4626      	mov	r6, r4
 801ee68:	46a0      	mov	r8, r4
 801ee6a:	e7a0      	b.n	801edae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ee6c:	2900      	cmp	r1, #0
 801ee6e:	d0b0      	beq.n	801edd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ee70:	2720      	movs	r7, #32
 801ee72:	682e      	ldr	r6, [r5, #0]
 801ee74:	2900      	cmp	r1, #0
 801ee76:	d0ac      	beq.n	801edd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ee78:	3901      	subs	r1, #1
 801ee7a:	4296      	cmp	r6, r2
 801ee7c:	b289      	uxth	r1, r1
 801ee7e:	daa7      	bge.n	801edd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801ee80:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801ee84:	682b      	ldr	r3, [r5, #0]
 801ee86:	3301      	adds	r3, #1
 801ee88:	602b      	str	r3, [r5, #0]
 801ee8a:	e7f2      	b.n	801ee72 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801ee8c:	b188      	cbz	r0, 801eeb2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801ee8e:	682b      	ldr	r3, [r5, #0]
 801ee90:	3801      	subs	r0, #1
 801ee92:	429a      	cmp	r2, r3
 801ee94:	b280      	uxth	r0, r0
 801ee96:	dd0c      	ble.n	801eeb2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801ee98:	f8db 3000 	ldr.w	r3, [fp]
 801ee9c:	1c9c      	adds	r4, r3, #2
 801ee9e:	f8cb 4000 	str.w	r4, [fp]
 801eea2:	881c      	ldrh	r4, [r3, #0]
 801eea4:	682b      	ldr	r3, [r5, #0]
 801eea6:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801eeaa:	682b      	ldr	r3, [r5, #0]
 801eeac:	3301      	adds	r3, #1
 801eeae:	602b      	str	r3, [r5, #0]
 801eeb0:	e7ec      	b.n	801ee8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801eeb2:	2620      	movs	r6, #32
 801eeb4:	b151      	cbz	r1, 801eecc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801eeb6:	6828      	ldr	r0, [r5, #0]
 801eeb8:	3901      	subs	r1, #1
 801eeba:	4282      	cmp	r2, r0
 801eebc:	b289      	uxth	r1, r1
 801eebe:	dd05      	ble.n	801eecc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801eec0:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801eec4:	682b      	ldr	r3, [r5, #0]
 801eec6:	3301      	adds	r3, #1
 801eec8:	602b      	str	r3, [r5, #0]
 801eeca:	e7f3      	b.n	801eeb4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801eecc:	b005      	add	sp, #20
 801eece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eed2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801eed2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801eed6:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801eeda:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801eede:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801eee2:	2400      	movs	r4, #0
 801eee4:	8014      	strh	r4, [r2, #0]
 801eee6:	701c      	strb	r4, [r3, #0]
 801eee8:	f888 4000 	strb.w	r4, [r8]
 801eeec:	f88c 4000 	strb.w	r4, [ip]
 801eef0:	f88e 4000 	strb.w	r4, [lr]
 801eef4:	703c      	strb	r4, [r7, #0]
 801eef6:	6804      	ldr	r4, [r0, #0]
 801eef8:	b1a4      	cbz	r4, 801ef24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801eefa:	8824      	ldrh	r4, [r4, #0]
 801eefc:	f04f 0901 	mov.w	r9, #1
 801ef00:	b314      	cbz	r4, 801ef48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801ef02:	2c2b      	cmp	r4, #43	; 0x2b
 801ef04:	d001      	beq.n	801ef0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801ef06:	2c20      	cmp	r4, #32
 801ef08:	d110      	bne.n	801ef2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801ef0a:	8014      	strh	r4, [r2, #0]
 801ef0c:	6804      	ldr	r4, [r0, #0]
 801ef0e:	b10c      	cbz	r4, 801ef14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801ef10:	3402      	adds	r4, #2
 801ef12:	6004      	str	r4, [r0, #0]
 801ef14:	680c      	ldr	r4, [r1, #0]
 801ef16:	b10c      	cbz	r4, 801ef1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801ef18:	3401      	adds	r4, #1
 801ef1a:	600c      	str	r4, [r1, #0]
 801ef1c:	6804      	ldr	r4, [r0, #0]
 801ef1e:	b17c      	cbz	r4, 801ef40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801ef20:	8824      	ldrh	r4, [r4, #0]
 801ef22:	e7ed      	b.n	801ef00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801ef24:	680c      	ldr	r4, [r1, #0]
 801ef26:	b17c      	cbz	r4, 801ef48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801ef28:	7824      	ldrb	r4, [r4, #0]
 801ef2a:	e7e7      	b.n	801eefc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801ef2c:	2c2d      	cmp	r4, #45	; 0x2d
 801ef2e:	d102      	bne.n	801ef36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801ef30:	f883 9000 	strb.w	r9, [r3]
 801ef34:	e7ea      	b.n	801ef0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801ef36:	2c23      	cmp	r4, #35	; 0x23
 801ef38:	d107      	bne.n	801ef4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801ef3a:	f888 9000 	strb.w	r9, [r8]
 801ef3e:	e7e5      	b.n	801ef0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801ef40:	680c      	ldr	r4, [r1, #0]
 801ef42:	b10c      	cbz	r4, 801ef48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801ef44:	7824      	ldrb	r4, [r4, #0]
 801ef46:	e7db      	b.n	801ef00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801ef48:	2400      	movs	r4, #0
 801ef4a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801ef4e:	2b09      	cmp	r3, #9
 801ef50:	d901      	bls.n	801ef56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801ef52:	2c2a      	cmp	r4, #42	; 0x2a
 801ef54:	d122      	bne.n	801ef9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ef56:	2301      	movs	r3, #1
 801ef58:	2c30      	cmp	r4, #48	; 0x30
 801ef5a:	f88e 3000 	strb.w	r3, [lr]
 801ef5e:	d10d      	bne.n	801ef7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801ef60:	f88c 3000 	strb.w	r3, [ip]
 801ef64:	6803      	ldr	r3, [r0, #0]
 801ef66:	b10b      	cbz	r3, 801ef6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801ef68:	3302      	adds	r3, #2
 801ef6a:	6003      	str	r3, [r0, #0]
 801ef6c:	680b      	ldr	r3, [r1, #0]
 801ef6e:	b10b      	cbz	r3, 801ef74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801ef70:	3301      	adds	r3, #1
 801ef72:	600b      	str	r3, [r1, #0]
 801ef74:	6803      	ldr	r3, [r0, #0]
 801ef76:	2b00      	cmp	r3, #0
 801ef78:	d02f      	beq.n	801efda <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801ef7a:	881c      	ldrh	r4, [r3, #0]
 801ef7c:	2c2a      	cmp	r4, #42	; 0x2a
 801ef7e:	d135      	bne.n	801efec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801ef80:	f04f 33ff 	mov.w	r3, #4294967295
 801ef84:	6033      	str	r3, [r6, #0]
 801ef86:	6803      	ldr	r3, [r0, #0]
 801ef88:	b10b      	cbz	r3, 801ef8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801ef8a:	3302      	adds	r3, #2
 801ef8c:	6003      	str	r3, [r0, #0]
 801ef8e:	680b      	ldr	r3, [r1, #0]
 801ef90:	b10b      	cbz	r3, 801ef96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801ef92:	3301      	adds	r3, #1
 801ef94:	600b      	str	r3, [r1, #0]
 801ef96:	6803      	ldr	r3, [r0, #0]
 801ef98:	b31b      	cbz	r3, 801efe2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801ef9a:	881c      	ldrh	r4, [r3, #0]
 801ef9c:	2c2e      	cmp	r4, #46	; 0x2e
 801ef9e:	d11a      	bne.n	801efd6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801efa0:	2301      	movs	r3, #1
 801efa2:	703b      	strb	r3, [r7, #0]
 801efa4:	6803      	ldr	r3, [r0, #0]
 801efa6:	b10b      	cbz	r3, 801efac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801efa8:	3302      	adds	r3, #2
 801efaa:	6003      	str	r3, [r0, #0]
 801efac:	680b      	ldr	r3, [r1, #0]
 801efae:	b10b      	cbz	r3, 801efb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801efb0:	3301      	adds	r3, #1
 801efb2:	600b      	str	r3, [r1, #0]
 801efb4:	6803      	ldr	r3, [r0, #0]
 801efb6:	2b00      	cmp	r3, #0
 801efb8:	d036      	beq.n	801f028 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801efba:	881b      	ldrh	r3, [r3, #0]
 801efbc:	2b2a      	cmp	r3, #42	; 0x2a
 801efbe:	d137      	bne.n	801f030 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801efc0:	f04f 33ff 	mov.w	r3, #4294967295
 801efc4:	602b      	str	r3, [r5, #0]
 801efc6:	6803      	ldr	r3, [r0, #0]
 801efc8:	b10b      	cbz	r3, 801efce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801efca:	3302      	adds	r3, #2
 801efcc:	6003      	str	r3, [r0, #0]
 801efce:	680b      	ldr	r3, [r1, #0]
 801efd0:	b10b      	cbz	r3, 801efd6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801efd2:	3301      	adds	r3, #1
 801efd4:	600b      	str	r3, [r1, #0]
 801efd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801efda:	680c      	ldr	r4, [r1, #0]
 801efdc:	b134      	cbz	r4, 801efec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801efde:	7824      	ldrb	r4, [r4, #0]
 801efe0:	e7cc      	b.n	801ef7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801efe2:	680b      	ldr	r3, [r1, #0]
 801efe4:	2b00      	cmp	r3, #0
 801efe6:	d0f6      	beq.n	801efd6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801efe8:	781c      	ldrb	r4, [r3, #0]
 801efea:	e7d7      	b.n	801ef9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801efec:	2300      	movs	r3, #0
 801efee:	6033      	str	r3, [r6, #0]
 801eff0:	220a      	movs	r2, #10
 801eff2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801eff6:	fa1f f38c 	uxth.w	r3, ip
 801effa:	2b09      	cmp	r3, #9
 801effc:	d8ce      	bhi.n	801ef9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801effe:	6833      	ldr	r3, [r6, #0]
 801f000:	fb02 c303 	mla	r3, r2, r3, ip
 801f004:	6033      	str	r3, [r6, #0]
 801f006:	6803      	ldr	r3, [r0, #0]
 801f008:	b10b      	cbz	r3, 801f00e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801f00a:	3302      	adds	r3, #2
 801f00c:	6003      	str	r3, [r0, #0]
 801f00e:	680b      	ldr	r3, [r1, #0]
 801f010:	b10b      	cbz	r3, 801f016 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801f012:	3301      	adds	r3, #1
 801f014:	600b      	str	r3, [r1, #0]
 801f016:	6803      	ldr	r3, [r0, #0]
 801f018:	b10b      	cbz	r3, 801f01e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801f01a:	881c      	ldrh	r4, [r3, #0]
 801f01c:	e7e9      	b.n	801eff2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801f01e:	680c      	ldr	r4, [r1, #0]
 801f020:	2c00      	cmp	r4, #0
 801f022:	d0e6      	beq.n	801eff2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801f024:	7824      	ldrb	r4, [r4, #0]
 801f026:	e7e4      	b.n	801eff2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801f028:	680b      	ldr	r3, [r1, #0]
 801f02a:	b10b      	cbz	r3, 801f030 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801f02c:	781b      	ldrb	r3, [r3, #0]
 801f02e:	e7c5      	b.n	801efbc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801f030:	2200      	movs	r2, #0
 801f032:	602a      	str	r2, [r5, #0]
 801f034:	240a      	movs	r4, #10
 801f036:	3b30      	subs	r3, #48	; 0x30
 801f038:	b29e      	uxth	r6, r3
 801f03a:	2e09      	cmp	r6, #9
 801f03c:	682a      	ldr	r2, [r5, #0]
 801f03e:	d813      	bhi.n	801f068 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801f040:	fb04 3302 	mla	r3, r4, r2, r3
 801f044:	602b      	str	r3, [r5, #0]
 801f046:	6803      	ldr	r3, [r0, #0]
 801f048:	b10b      	cbz	r3, 801f04e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801f04a:	3302      	adds	r3, #2
 801f04c:	6003      	str	r3, [r0, #0]
 801f04e:	680b      	ldr	r3, [r1, #0]
 801f050:	b10b      	cbz	r3, 801f056 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801f052:	3301      	adds	r3, #1
 801f054:	600b      	str	r3, [r1, #0]
 801f056:	6803      	ldr	r3, [r0, #0]
 801f058:	b10b      	cbz	r3, 801f05e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801f05a:	881b      	ldrh	r3, [r3, #0]
 801f05c:	e7eb      	b.n	801f036 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801f05e:	680b      	ldr	r3, [r1, #0]
 801f060:	2b00      	cmp	r3, #0
 801f062:	d0e8      	beq.n	801f036 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801f064:	781b      	ldrb	r3, [r3, #0]
 801f066:	e7e6      	b.n	801f036 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801f068:	2a06      	cmp	r2, #6
 801f06a:	bfa8      	it	ge
 801f06c:	2206      	movge	r2, #6
 801f06e:	602a      	str	r2, [r5, #0]
 801f070:	e7b1      	b.n	801efd6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801f072 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801f072:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f076:	b0a3      	sub	sp, #140	; 0x8c
 801f078:	2600      	movs	r6, #0
 801f07a:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801f07e:	4607      	mov	r7, r0
 801f080:	4688      	mov	r8, r1
 801f082:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f086:	4631      	mov	r1, r6
 801f088:	2242      	movs	r2, #66	; 0x42
 801f08a:	4648      	mov	r0, r9
 801f08c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801f08e:	960d      	str	r6, [sp, #52]	; 0x34
 801f090:	f00f f8a4 	bl	802e1dc <memset>
 801f094:	b15f      	cbz	r7, 801f0ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801f096:	f108 3aff 	add.w	sl, r8, #4294967295
 801f09a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f09c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f09e:	b152      	cbz	r2, 801f0b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801f0a0:	8812      	ldrh	r2, [r2, #0]
 801f0a2:	b10a      	cbz	r2, 801f0a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801f0a4:	459a      	cmp	sl, r3
 801f0a6:	dc2e      	bgt.n	801f106 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801f0a8:	2200      	movs	r2, #0
 801f0aa:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f0ae:	4638      	mov	r0, r7
 801f0b0:	b023      	add	sp, #140	; 0x8c
 801f0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0b6:	9a08      	ldr	r2, [sp, #32]
 801f0b8:	2a00      	cmp	r2, #0
 801f0ba:	d0f5      	beq.n	801f0a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801f0bc:	7812      	ldrb	r2, [r2, #0]
 801f0be:	e7f0      	b.n	801f0a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801f0c0:	2d00      	cmp	r5, #0
 801f0c2:	d0ea      	beq.n	801f09a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f0c4:	782a      	ldrb	r2, [r5, #0]
 801f0c6:	b142      	cbz	r2, 801f0da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801f0c8:	2a25      	cmp	r2, #37	; 0x25
 801f0ca:	d001      	beq.n	801f0d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801f0cc:	459a      	cmp	sl, r3
 801f0ce:	dc08      	bgt.n	801f0e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801f0d0:	f1bb 0f00 	cmp.w	fp, #0
 801f0d4:	d121      	bne.n	801f11a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801f0d6:	2d00      	cmp	r5, #0
 801f0d8:	d0df      	beq.n	801f09a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f0da:	782a      	ldrb	r2, [r5, #0]
 801f0dc:	f04f 0b00 	mov.w	fp, #0
 801f0e0:	e01d      	b.n	801f11e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801f0e2:	f1bb 0f00 	cmp.w	fp, #0
 801f0e6:	d078      	beq.n	801f1da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 801f0e8:	f8bb 2000 	ldrh.w	r2, [fp]
 801f0ec:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f0f0:	f1bb 0f00 	cmp.w	fp, #0
 801f0f4:	d002      	beq.n	801f0fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801f0f6:	f10b 0202 	add.w	r2, fp, #2
 801f0fa:	9209      	str	r2, [sp, #36]	; 0x24
 801f0fc:	b10d      	cbz	r5, 801f102 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801f0fe:	3501      	adds	r5, #1
 801f100:	9508      	str	r5, [sp, #32]
 801f102:	3301      	adds	r3, #1
 801f104:	930d      	str	r3, [sp, #52]	; 0x34
 801f106:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801f10a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f10c:	f1bb 0f00 	cmp.w	fp, #0
 801f110:	d0d6      	beq.n	801f0c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801f112:	f8bb 2000 	ldrh.w	r2, [fp]
 801f116:	2a00      	cmp	r2, #0
 801f118:	d1d6      	bne.n	801f0c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801f11a:	f8bb 2000 	ldrh.w	r2, [fp]
 801f11e:	2a00      	cmp	r2, #0
 801f120:	d0bb      	beq.n	801f09a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f122:	459a      	cmp	sl, r3
 801f124:	ddb9      	ble.n	801f09a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f126:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801f12a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801f12e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801f132:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801f136:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801f13a:	960e      	str	r6, [sp, #56]	; 0x38
 801f13c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801f140:	960f      	str	r6, [sp, #60]	; 0x3c
 801f142:	f1bb 0f00 	cmp.w	fp, #0
 801f146:	d002      	beq.n	801f14e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801f148:	f10b 0302 	add.w	r3, fp, #2
 801f14c:	9309      	str	r3, [sp, #36]	; 0x24
 801f14e:	b10d      	cbz	r5, 801f154 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801f150:	1c6b      	adds	r3, r5, #1
 801f152:	9308      	str	r3, [sp, #32]
 801f154:	ab0f      	add	r3, sp, #60	; 0x3c
 801f156:	9305      	str	r3, [sp, #20]
 801f158:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801f15c:	9304      	str	r3, [sp, #16]
 801f15e:	ab0e      	add	r3, sp, #56	; 0x38
 801f160:	9303      	str	r3, [sp, #12]
 801f162:	ab0c      	add	r3, sp, #48	; 0x30
 801f164:	9302      	str	r3, [sp, #8]
 801f166:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801f16a:	9301      	str	r3, [sp, #4]
 801f16c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801f170:	9300      	str	r3, [sp, #0]
 801f172:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801f176:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801f17a:	a908      	add	r1, sp, #32
 801f17c:	a809      	add	r0, sp, #36	; 0x24
 801f17e:	f7ff fea8 	bl	801eed2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801f182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f184:	2b00      	cmp	r3, #0
 801f186:	bfbe      	ittt	lt
 801f188:	6823      	ldrlt	r3, [r4, #0]
 801f18a:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801f18e:	930e      	strlt	r3, [sp, #56]	; 0x38
 801f190:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f192:	bfb8      	it	lt
 801f194:	3404      	addlt	r4, #4
 801f196:	2b00      	cmp	r3, #0
 801f198:	bfb8      	it	lt
 801f19a:	6823      	ldrlt	r3, [r4, #0]
 801f19c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801f1a0:	bfbe      	ittt	lt
 801f1a2:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801f1a6:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801f1a8:	3404      	addlt	r4, #4
 801f1aa:	b1d9      	cbz	r1, 801f1e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 801f1ac:	880b      	ldrh	r3, [r1, #0]
 801f1ae:	2b69      	cmp	r3, #105	; 0x69
 801f1b0:	d01f      	beq.n	801f1f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f1b2:	d82f      	bhi.n	801f214 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 801f1b4:	2b58      	cmp	r3, #88	; 0x58
 801f1b6:	d01c      	beq.n	801f1f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f1b8:	d818      	bhi.n	801f1ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 801f1ba:	2b25      	cmp	r3, #37	; 0x25
 801f1bc:	d034      	beq.n	801f228 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 801f1be:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801f1c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f1c4:	f1bb 0f00 	cmp.w	fp, #0
 801f1c8:	f000 80b8 	beq.w	801f33c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 801f1cc:	f8bb 5000 	ldrh.w	r5, [fp]
 801f1d0:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801f1d4:	3301      	adds	r3, #1
 801f1d6:	930d      	str	r3, [sp, #52]	; 0x34
 801f1d8:	e029      	b.n	801f22e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801f1da:	b10d      	cbz	r5, 801f1e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 801f1dc:	782a      	ldrb	r2, [r5, #0]
 801f1de:	e785      	b.n	801f0ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801f1e0:	462a      	mov	r2, r5
 801f1e2:	e783      	b.n	801f0ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801f1e4:	2a00      	cmp	r2, #0
 801f1e6:	d0ea      	beq.n	801f1be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801f1e8:	7813      	ldrb	r3, [r2, #0]
 801f1ea:	e7e0      	b.n	801f1ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 801f1ec:	3b63      	subs	r3, #99	; 0x63
 801f1ee:	2b01      	cmp	r3, #1
 801f1f0:	d8e5      	bhi.n	801f1be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801f1f2:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801f1f6:	b329      	cbz	r1, 801f244 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 801f1f8:	880b      	ldrh	r3, [r1, #0]
 801f1fa:	2b69      	cmp	r3, #105	; 0x69
 801f1fc:	d063      	beq.n	801f2c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801f1fe:	d825      	bhi.n	801f24c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 801f200:	2b63      	cmp	r3, #99	; 0x63
 801f202:	d038      	beq.n	801f276 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 801f204:	2b64      	cmp	r3, #100	; 0x64
 801f206:	d05e      	beq.n	801f2c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801f208:	2b58      	cmp	r3, #88	; 0x58
 801f20a:	d07b      	beq.n	801f304 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 801f20c:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801f210:	4625      	mov	r5, r4
 801f212:	e036      	b.n	801f282 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f214:	2b73      	cmp	r3, #115	; 0x73
 801f216:	d0ec      	beq.n	801f1f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f218:	d802      	bhi.n	801f220 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 801f21a:	2b6f      	cmp	r3, #111	; 0x6f
 801f21c:	d1cf      	bne.n	801f1be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801f21e:	e7e8      	b.n	801f1f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f220:	2b75      	cmp	r3, #117	; 0x75
 801f222:	d0e6      	beq.n	801f1f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f224:	2b78      	cmp	r3, #120	; 0x78
 801f226:	e7f9      	b.n	801f21c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 801f228:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f22a:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801f22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f230:	b10b      	cbz	r3, 801f236 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 801f232:	3302      	adds	r3, #2
 801f234:	9309      	str	r3, [sp, #36]	; 0x24
 801f236:	9b08      	ldr	r3, [sp, #32]
 801f238:	2b00      	cmp	r3, #0
 801f23a:	f43f af2e 	beq.w	801f09a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f23e:	3301      	adds	r3, #1
 801f240:	9308      	str	r3, [sp, #32]
 801f242:	e72a      	b.n	801f09a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f244:	2a00      	cmp	r2, #0
 801f246:	d0e1      	beq.n	801f20c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801f248:	7813      	ldrb	r3, [r2, #0]
 801f24a:	e7d6      	b.n	801f1fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 801f24c:	2b73      	cmp	r3, #115	; 0x73
 801f24e:	d036      	beq.n	801f2be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 801f250:	d807      	bhi.n	801f262 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 801f252:	2b6f      	cmp	r3, #111	; 0x6f
 801f254:	d1da      	bne.n	801f20c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801f256:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f258:	1d25      	adds	r5, r4, #4
 801f25a:	eba8 0202 	sub.w	r2, r8, r2
 801f25e:	2308      	movs	r3, #8
 801f260:	e04a      	b.n	801f2f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801f262:	2b75      	cmp	r3, #117	; 0x75
 801f264:	d043      	beq.n	801f2ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 801f266:	2b78      	cmp	r3, #120	; 0x78
 801f268:	d1d0      	bne.n	801f20c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801f26a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f26c:	1d25      	adds	r5, r4, #4
 801f26e:	eba8 0202 	sub.w	r2, r8, r2
 801f272:	2310      	movs	r3, #16
 801f274:	e040      	b.n	801f2f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801f276:	7823      	ldrb	r3, [r4, #0]
 801f278:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801f27c:	1d25      	adds	r5, r4, #4
 801f27e:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801f282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f284:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801f288:	2b00      	cmp	r3, #0
 801f28a:	d052      	beq.n	801f332 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 801f28c:	881a      	ldrh	r2, [r3, #0]
 801f28e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801f292:	a80d      	add	r0, sp, #52	; 0x34
 801f294:	9005      	str	r0, [sp, #20]
 801f296:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801f29a:	9004      	str	r0, [sp, #16]
 801f29c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f29e:	9003      	str	r0, [sp, #12]
 801f2a0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801f2a4:	9002      	str	r0, [sp, #8]
 801f2a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f2a8:	9001      	str	r0, [sp, #4]
 801f2aa:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801f2ae:	9000      	str	r0, [sp, #0]
 801f2b0:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801f2b4:	a810      	add	r0, sp, #64	; 0x40
 801f2b6:	f7ff fd49 	bl	801ed4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801f2ba:	462c      	mov	r4, r5
 801f2bc:	e7b7      	b.n	801f22e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801f2be:	6823      	ldr	r3, [r4, #0]
 801f2c0:	1d25      	adds	r5, r4, #4
 801f2c2:	9310      	str	r3, [sp, #64]	; 0x40
 801f2c4:	e7dd      	b.n	801f282 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f2c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f2c8:	6820      	ldr	r0, [r4, #0]
 801f2ca:	eba8 0202 	sub.w	r2, r8, r2
 801f2ce:	230a      	movs	r3, #10
 801f2d0:	b292      	uxth	r2, r2
 801f2d2:	4649      	mov	r1, r9
 801f2d4:	f7ff fd08 	bl	801ece8 <_ZN8touchgfx7Unicode4itoaElPtti>
 801f2d8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801f2dc:	2b2d      	cmp	r3, #45	; 0x2d
 801f2de:	f104 0504 	add.w	r5, r4, #4
 801f2e2:	d1ce      	bne.n	801f282 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f2e4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801f2e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f2ea:	3302      	adds	r3, #2
 801f2ec:	e7e9      	b.n	801f2c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 801f2ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f2f0:	1d25      	adds	r5, r4, #4
 801f2f2:	eba8 0202 	sub.w	r2, r8, r2
 801f2f6:	230a      	movs	r3, #10
 801f2f8:	b292      	uxth	r2, r2
 801f2fa:	4649      	mov	r1, r9
 801f2fc:	6820      	ldr	r0, [r4, #0]
 801f2fe:	f7ff fcd5 	bl	801ecac <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801f302:	e7be      	b.n	801f282 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f304:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f306:	6820      	ldr	r0, [r4, #0]
 801f308:	eba8 0202 	sub.w	r2, r8, r2
 801f30c:	b292      	uxth	r2, r2
 801f30e:	2310      	movs	r3, #16
 801f310:	4649      	mov	r1, r9
 801f312:	f7ff fccb 	bl	801ecac <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801f316:	1d25      	adds	r5, r4, #4
 801f318:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801f31c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801f320:	2b00      	cmp	r3, #0
 801f322:	d0ae      	beq.n	801f282 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f324:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801f328:	2919      	cmp	r1, #25
 801f32a:	d8f7      	bhi.n	801f31c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801f32c:	3b20      	subs	r3, #32
 801f32e:	8013      	strh	r3, [r2, #0]
 801f330:	e7f4      	b.n	801f31c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801f332:	9a08      	ldr	r2, [sp, #32]
 801f334:	2a00      	cmp	r2, #0
 801f336:	d0aa      	beq.n	801f28e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801f338:	7812      	ldrb	r2, [r2, #0]
 801f33a:	e7a8      	b.n	801f28e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801f33c:	2d00      	cmp	r5, #0
 801f33e:	f43f af47 	beq.w	801f1d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 801f342:	782d      	ldrb	r5, [r5, #0]
 801f344:	e744      	b.n	801f1d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

0801f346 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801f346:	b507      	push	{r0, r1, r2, lr}
 801f348:	9300      	str	r3, [sp, #0]
 801f34a:	4613      	mov	r3, r2
 801f34c:	2200      	movs	r2, #0
 801f34e:	f7ff fe90 	bl	801f072 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801f352:	b003      	add	sp, #12
 801f354:	f85d fb04 	ldr.w	pc, [sp], #4

0801f358 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801f358:	b40c      	push	{r2, r3}
 801f35a:	b507      	push	{r0, r1, r2, lr}
 801f35c:	ab04      	add	r3, sp, #16
 801f35e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f362:	9301      	str	r3, [sp, #4]
 801f364:	f7ff ffef 	bl	801f346 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801f368:	b003      	add	sp, #12
 801f36a:	f85d eb04 	ldr.w	lr, [sp], #4
 801f36e:	b002      	add	sp, #8
 801f370:	4770      	bx	lr
	...

0801f374 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 801f374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f378:	b0c3      	sub	sp, #268	; 0x10c
 801f37a:	2600      	movs	r6, #0
 801f37c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 801f380:	4607      	mov	r7, r0
 801f382:	4689      	mov	r9, r1
 801f384:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f388:	4631      	mov	r1, r6
 801f38a:	22c8      	movs	r2, #200	; 0xc8
 801f38c:	4640      	mov	r0, r8
 801f38e:	f8dd a130 	ldr.w	sl, [sp, #304]	; 0x130
 801f392:	960c      	str	r6, [sp, #48]	; 0x30
 801f394:	f00e ff22 	bl	802e1dc <memset>
 801f398:	b16f      	cbz	r7, 801f3b6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x42>
 801f39a:	f04f 0b0a 	mov.w	fp, #10
 801f39e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f3a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f3a2:	b162      	cbz	r2, 801f3be <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x4a>
 801f3a4:	8812      	ldrh	r2, [r2, #0]
 801f3a6:	b11a      	cbz	r2, 801f3b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 801f3a8:	f109 31ff 	add.w	r1, r9, #4294967295
 801f3ac:	4299      	cmp	r1, r3
 801f3ae:	dc26      	bgt.n	801f3fe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8a>
 801f3b0:	2200      	movs	r2, #0
 801f3b2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f3b6:	4638      	mov	r0, r7
 801f3b8:	b043      	add	sp, #268	; 0x10c
 801f3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3be:	9a08      	ldr	r2, [sp, #32]
 801f3c0:	2a00      	cmp	r2, #0
 801f3c2:	d0f5      	beq.n	801f3b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 801f3c4:	7812      	ldrb	r2, [r2, #0]
 801f3c6:	e7ee      	b.n	801f3a6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32>
 801f3c8:	2c00      	cmp	r4, #0
 801f3ca:	d0e8      	beq.n	801f39e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f3cc:	7822      	ldrb	r2, [r4, #0]
 801f3ce:	b132      	cbz	r2, 801f3de <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6a>
 801f3d0:	2a25      	cmp	r2, #37	; 0x25
 801f3d2:	d001      	beq.n	801f3d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x64>
 801f3d4:	4299      	cmp	r1, r3
 801f3d6:	dc05      	bgt.n	801f3e4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x70>
 801f3d8:	b9cd      	cbnz	r5, 801f40e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9a>
 801f3da:	2c00      	cmp	r4, #0
 801f3dc:	d0df      	beq.n	801f39e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f3de:	7822      	ldrb	r2, [r4, #0]
 801f3e0:	2500      	movs	r5, #0
 801f3e2:	e015      	b.n	801f410 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9c>
 801f3e4:	2d00      	cmp	r5, #0
 801f3e6:	d073      	beq.n	801f4d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x15c>
 801f3e8:	882a      	ldrh	r2, [r5, #0]
 801f3ea:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f3ee:	b10d      	cbz	r5, 801f3f4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x80>
 801f3f0:	3502      	adds	r5, #2
 801f3f2:	9509      	str	r5, [sp, #36]	; 0x24
 801f3f4:	b10c      	cbz	r4, 801f3fa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x86>
 801f3f6:	3401      	adds	r4, #1
 801f3f8:	9408      	str	r4, [sp, #32]
 801f3fa:	3301      	adds	r3, #1
 801f3fc:	930c      	str	r3, [sp, #48]	; 0x30
 801f3fe:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 801f402:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f404:	2d00      	cmp	r5, #0
 801f406:	d0df      	beq.n	801f3c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x54>
 801f408:	882a      	ldrh	r2, [r5, #0]
 801f40a:	2a00      	cmp	r2, #0
 801f40c:	d1e0      	bne.n	801f3d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x5c>
 801f40e:	882a      	ldrh	r2, [r5, #0]
 801f410:	2a00      	cmp	r2, #0
 801f412:	d0c4      	beq.n	801f39e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f414:	4299      	cmp	r1, r3
 801f416:	ddc2      	ble.n	801f39e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f418:	2300      	movs	r3, #0
 801f41a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801f41e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f422:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f426:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801f42a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801f42e:	930d      	str	r3, [sp, #52]	; 0x34
 801f430:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801f434:	930e      	str	r3, [sp, #56]	; 0x38
 801f436:	b10d      	cbz	r5, 801f43c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xc8>
 801f438:	1cab      	adds	r3, r5, #2
 801f43a:	9309      	str	r3, [sp, #36]	; 0x24
 801f43c:	b10c      	cbz	r4, 801f442 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xce>
 801f43e:	1c63      	adds	r3, r4, #1
 801f440:	9308      	str	r3, [sp, #32]
 801f442:	ab0e      	add	r3, sp, #56	; 0x38
 801f444:	9305      	str	r3, [sp, #20]
 801f446:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801f44a:	9304      	str	r3, [sp, #16]
 801f44c:	ab0d      	add	r3, sp, #52	; 0x34
 801f44e:	9303      	str	r3, [sp, #12]
 801f450:	ab0b      	add	r3, sp, #44	; 0x2c
 801f452:	9302      	str	r3, [sp, #8]
 801f454:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801f458:	9301      	str	r3, [sp, #4]
 801f45a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801f45e:	9300      	str	r3, [sp, #0]
 801f460:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 801f464:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 801f468:	a908      	add	r1, sp, #32
 801f46a:	a809      	add	r0, sp, #36	; 0x24
 801f46c:	f7ff fd31 	bl	801eed2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801f470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f472:	2b00      	cmp	r3, #0
 801f474:	da0b      	bge.n	801f48e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x11a>
 801f476:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801f47a:	edd3 7a00 	vldr	s15, [r3]
 801f47e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f482:	3601      	adds	r6, #1
 801f484:	ee17 3a90 	vmov	r3, s15
 801f488:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f48c:	930d      	str	r3, [sp, #52]	; 0x34
 801f48e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f490:	2b00      	cmp	r3, #0
 801f492:	da0b      	bge.n	801f4ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x138>
 801f494:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801f498:	edd3 7a00 	vldr	s15, [r3]
 801f49c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f4a0:	3601      	adds	r6, #1
 801f4a2:	ee17 3a90 	vmov	r3, s15
 801f4a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f4aa:	930e      	str	r3, [sp, #56]	; 0x38
 801f4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f4ae:	b1a3      	cbz	r3, 801f4da <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x166>
 801f4b0:	881a      	ldrh	r2, [r3, #0]
 801f4b2:	2a25      	cmp	r2, #37	; 0x25
 801f4b4:	d016      	beq.n	801f4e4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x170>
 801f4b6:	2a66      	cmp	r2, #102	; 0x66
 801f4b8:	d01a      	beq.n	801f4f0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17c>
 801f4ba:	e9cd 4508 	strd	r4, r5, [sp, #32]
 801f4be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f4c0:	2d00      	cmp	r5, #0
 801f4c2:	f000 80fd 	beq.w	801f6c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x34c>
 801f4c6:	882c      	ldrh	r4, [r5, #0]
 801f4c8:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801f4cc:	3301      	adds	r3, #1
 801f4ce:	e00d      	b.n	801f4ec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x178>
 801f4d0:	b10c      	cbz	r4, 801f4d6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x162>
 801f4d2:	7822      	ldrb	r2, [r4, #0]
 801f4d4:	e789      	b.n	801f3ea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 801f4d6:	4622      	mov	r2, r4
 801f4d8:	e787      	b.n	801f3ea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 801f4da:	9b08      	ldr	r3, [sp, #32]
 801f4dc:	2b00      	cmp	r3, #0
 801f4de:	d0ec      	beq.n	801f4ba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x146>
 801f4e0:	781a      	ldrb	r2, [r3, #0]
 801f4e2:	e7e6      	b.n	801f4b2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x13e>
 801f4e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f4e6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f4ea:	3302      	adds	r3, #2
 801f4ec:	930c      	str	r3, [sp, #48]	; 0x30
 801f4ee:	e04b      	b.n	801f588 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x214>
 801f4f0:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801f4f4:	ed93 7a00 	vldr	s14, [r3]
 801f4f8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801f4fc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 801f500:	3601      	adds	r6, #1
 801f502:	b923      	cbnz	r3, 801f50e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19a>
 801f504:	2301      	movs	r3, #1
 801f506:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801f50a:	2306      	movs	r3, #6
 801f50c:	930e      	str	r3, [sp, #56]	; 0x38
 801f50e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801f512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f516:	bf48      	it	mi
 801f518:	eeb1 7a47 	vnegmi.f32	s14, s14
 801f51c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f520:	ee77 6a67 	vsub.f32	s13, s14, s15
 801f524:	bf48      	it	mi
 801f526:	232d      	movmi	r3, #45	; 0x2d
 801f528:	eef4 6a47 	vcmp.f32	s13, s14
 801f52c:	bf48      	it	mi
 801f52e:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801f532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f536:	d132      	bne.n	801f59e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x22a>
 801f538:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f53c:	eef4 7a47 	vcmp.f32	s15, s14
 801f540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f544:	d12b      	bne.n	801f59e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x22a>
 801f546:	4b61      	ldr	r3, [pc, #388]	; (801f6cc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x358>)
 801f548:	9310      	str	r3, [sp, #64]	; 0x40
 801f54a:	2366      	movs	r3, #102	; 0x66
 801f54c:	9311      	str	r3, [sp, #68]	; 0x44
 801f54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f550:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801f554:	2b00      	cmp	r3, #0
 801f556:	f000 80ad 	beq.w	801f6b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x340>
 801f55a:	881a      	ldrh	r2, [r3, #0]
 801f55c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801f560:	a80c      	add	r0, sp, #48	; 0x30
 801f562:	9005      	str	r0, [sp, #20]
 801f564:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 801f568:	9004      	str	r0, [sp, #16]
 801f56a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f56c:	9003      	str	r0, [sp, #12]
 801f56e:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 801f572:	9002      	str	r0, [sp, #8]
 801f574:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f576:	9001      	str	r0, [sp, #4]
 801f578:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 801f57c:	9000      	str	r0, [sp, #0]
 801f57e:	e9cd 9706 	strd	r9, r7, [sp, #24]
 801f582:	a80f      	add	r0, sp, #60	; 0x3c
 801f584:	f7ff fbe2 	bl	801ed4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801f588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f58a:	b10b      	cbz	r3, 801f590 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x21c>
 801f58c:	3302      	adds	r3, #2
 801f58e:	9309      	str	r3, [sp, #36]	; 0x24
 801f590:	9b08      	ldr	r3, [sp, #32]
 801f592:	2b00      	cmp	r3, #0
 801f594:	f43f af03 	beq.w	801f39e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f598:	3301      	adds	r3, #1
 801f59a:	9308      	str	r3, [sp, #32]
 801f59c:	e6ff      	b.n	801f39e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f59e:	eeb4 7a47 	vcmp.f32	s14, s14
 801f5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5a6:	d10b      	bne.n	801f5c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x24c>
 801f5a8:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f5aa:	eddf 7a49 	vldr	s15, [pc, #292]	; 801f6d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x35c>
 801f5ae:	2300      	movs	r3, #0
 801f5b0:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801f5b4:	4283      	cmp	r3, r0
 801f5b6:	da07      	bge.n	801f5c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x254>
 801f5b8:	eec7 7a86 	vdiv.f32	s15, s15, s12
 801f5bc:	3301      	adds	r3, #1
 801f5be:	e7f9      	b.n	801f5b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x240>
 801f5c0:	4b44      	ldr	r3, [pc, #272]	; (801f6d4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x360>)
 801f5c2:	9310      	str	r3, [sp, #64]	; 0x40
 801f5c4:	236e      	movs	r3, #110	; 0x6e
 801f5c6:	e7c1      	b.n	801f54c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d8>
 801f5c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f5cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f5d0:	eeb0 7a67 	vmov.f32	s14, s15
 801f5d4:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801f5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5dc:	da27      	bge.n	801f62e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2ba>
 801f5de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f5e0:	2100      	movs	r1, #0
 801f5e2:	eba9 0202 	sub.w	r2, r9, r2
 801f5e6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801f5ea:	eef4 6ae5 	vcmpe.f32	s13, s11
 801f5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5f2:	b28c      	uxth	r4, r1
 801f5f4:	db21      	blt.n	801f63a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 801f5f6:	1a53      	subs	r3, r2, r1
 801f5f8:	2b00      	cmp	r3, #0
 801f5fa:	dd1e      	ble.n	801f63a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 801f5fc:	2963      	cmp	r1, #99	; 0x63
 801f5fe:	d01b      	beq.n	801f638 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c4>
 801f600:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801f604:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801f608:	ee17 3a10 	vmov	r3, s14
 801f60c:	2b09      	cmp	r3, #9
 801f60e:	bfa8      	it	ge
 801f610:	2309      	movge	r3, #9
 801f612:	ee07 3a10 	vmov	s14, r3
 801f616:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f61a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801f61e:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
 801f622:	eee7 7a66 	vfms.f32	s15, s14, s13
 801f626:	3101      	adds	r1, #1
 801f628:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801f62c:	e7dd      	b.n	801f5ea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x276>
 801f62e:	ee66 6a86 	vmul.f32	s13, s13, s12
 801f632:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801f636:	e7cd      	b.n	801f5d4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x260>
 801f638:	460c      	mov	r4, r1
 801f63a:	2a63      	cmp	r2, #99	; 0x63
 801f63c:	bfd4      	ite	le
 801f63e:	ebc4 0202 	rsble	r2, r4, r2
 801f642:	f1c4 0263 	rsbgt	r2, r4, #99	; 0x63
 801f646:	2a00      	cmp	r2, #0
 801f648:	dd2f      	ble.n	801f6aa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x336>
 801f64a:	4603      	mov	r3, r0
 801f64c:	2501      	movs	r5, #1
 801f64e:	2b00      	cmp	r3, #0
 801f650:	dd0d      	ble.n	801f66e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2fa>
 801f652:	ee67 7a86 	vmul.f32	s15, s15, s12
 801f656:	3b01      	subs	r3, #1
 801f658:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f65c:	ee17 1a10 	vmov	r1, s14
 801f660:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f664:	fb0b 1505 	mla	r5, fp, r5, r1
 801f668:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f66c:	e7ef      	b.n	801f64e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2da>
 801f66e:	2800      	cmp	r0, #0
 801f670:	f100 33ff 	add.w	r3, r0, #4294967295
 801f674:	bfac      	ite	ge
 801f676:	1a18      	subge	r0, r3, r0
 801f678:	4618      	movlt	r0, r3
 801f67a:	0064      	lsls	r4, r4, #1
 801f67c:	900e      	str	r0, [sp, #56]	; 0x38
 801f67e:	230a      	movs	r3, #10
 801f680:	b292      	uxth	r2, r2
 801f682:	eb08 0104 	add.w	r1, r8, r4
 801f686:	4628      	mov	r0, r5
 801f688:	f7ff fb2e 	bl	801ece8 <_ZN8touchgfx7Unicode4itoaElPtti>
 801f68c:	2d01      	cmp	r5, #1
 801f68e:	dc0a      	bgt.n	801f6a6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x332>
 801f690:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801f694:	2b00      	cmp	r3, #0
 801f696:	bf0c      	ite	eq
 801f698:	2300      	moveq	r3, #0
 801f69a:	232e      	movne	r3, #46	; 0x2e
 801f69c:	aa42      	add	r2, sp, #264	; 0x108
 801f69e:	4414      	add	r4, r2
 801f6a0:	f824 3cc8 	strh.w	r3, [r4, #-200]
 801f6a4:	e753      	b.n	801f54e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1da>
 801f6a6:	232e      	movs	r3, #46	; 0x2e
 801f6a8:	e7f8      	b.n	801f69c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x328>
 801f6aa:	ab42      	add	r3, sp, #264	; 0x108
 801f6ac:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801f6b0:	2300      	movs	r3, #0
 801f6b2:	e7f5      	b.n	801f6a0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32c>
 801f6b4:	9a08      	ldr	r2, [sp, #32]
 801f6b6:	2a00      	cmp	r2, #0
 801f6b8:	f43f af50 	beq.w	801f55c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e8>
 801f6bc:	7812      	ldrb	r2, [r2, #0]
 801f6be:	e74d      	b.n	801f55c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e8>
 801f6c0:	2c00      	cmp	r4, #0
 801f6c2:	f43f af01 	beq.w	801f4c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 801f6c6:	7824      	ldrb	r4, [r4, #0]
 801f6c8:	e6fe      	b.n	801f4c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 801f6ca:	bf00      	nop
 801f6cc:	006e0069 	.word	0x006e0069
 801f6d0:	3f000002 	.word	0x3f000002
 801f6d4:	0061006e 	.word	0x0061006e

0801f6d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801f6d8:	b507      	push	{r0, r1, r2, lr}
 801f6da:	9300      	str	r3, [sp, #0]
 801f6dc:	4613      	mov	r3, r2
 801f6de:	2200      	movs	r2, #0
 801f6e0:	f7ff fe48 	bl	801f374 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 801f6e4:	b003      	add	sp, #12
 801f6e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801f6ec <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801f6ec:	4b01      	ldr	r3, [pc, #4]	; (801f6f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801f6ee:	6018      	str	r0, [r3, #0]
 801f6f0:	4770      	bx	lr
 801f6f2:	bf00      	nop
 801f6f4:	200097dc 	.word	0x200097dc

0801f6f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801f6f8:	4b06      	ldr	r3, [pc, #24]	; (801f714 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801f6fa:	881a      	ldrh	r2, [r3, #0]
 801f6fc:	4282      	cmp	r2, r0
 801f6fe:	d807      	bhi.n	801f710 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801f700:	4b05      	ldr	r3, [pc, #20]	; (801f718 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801f702:	881b      	ldrh	r3, [r3, #0]
 801f704:	4413      	add	r3, r2
 801f706:	4298      	cmp	r0, r3
 801f708:	bfac      	ite	ge
 801f70a:	2000      	movge	r0, #0
 801f70c:	2001      	movlt	r0, #1
 801f70e:	4770      	bx	lr
 801f710:	2000      	movs	r0, #0
 801f712:	4770      	bx	lr
 801f714:	200097fc 	.word	0x200097fc
 801f718:	20009800 	.word	0x20009800

0801f71c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801f71c:	b508      	push	{r3, lr}
 801f71e:	4601      	mov	r1, r0
 801f720:	f7ff ffea 	bl	801f6f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f724:	b118      	cbz	r0, 801f72e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801f726:	4b02      	ldr	r3, [pc, #8]	; (801f730 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801f728:	681b      	ldr	r3, [r3, #0]
 801f72a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801f72e:	bd08      	pop	{r3, pc}
 801f730:	200097e0 	.word	0x200097e0

0801f734 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801f734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f738:	4d28      	ldr	r5, [pc, #160]	; (801f7dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801f73a:	682b      	ldr	r3, [r5, #0]
 801f73c:	2b00      	cmp	r3, #0
 801f73e:	d04a      	beq.n	801f7d6 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801f740:	4a27      	ldr	r2, [pc, #156]	; (801f7e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801f742:	4e28      	ldr	r6, [pc, #160]	; (801f7e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801f744:	8810      	ldrh	r0, [r2, #0]
 801f746:	f8b6 8000 	ldrh.w	r8, [r6]
 801f74a:	4c27      	ldr	r4, [pc, #156]	; (801f7e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801f74c:	4f27      	ldr	r7, [pc, #156]	; (801f7ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801f74e:	4440      	add	r0, r8
 801f750:	1c41      	adds	r1, r0, #1
 801f752:	f021 0101 	bic.w	r1, r1, #1
 801f756:	0409      	lsls	r1, r1, #16
 801f758:	0c09      	lsrs	r1, r1, #16
 801f75a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801f75e:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801f762:	eb03 020e 	add.w	r2, r3, lr
 801f766:	eb0e 010c 	add.w	r1, lr, ip
 801f76a:	6022      	str	r2, [r4, #0]
 801f76c:	185a      	adds	r2, r3, r1
 801f76e:	603a      	str	r2, [r7, #0]
 801f770:	220e      	movs	r2, #14
 801f772:	fb02 f208 	mul.w	r2, r2, r8
 801f776:	3203      	adds	r2, #3
 801f778:	f022 0203 	bic.w	r2, r2, #3
 801f77c:	4411      	add	r1, r2
 801f77e:	440b      	add	r3, r1
 801f780:	491b      	ldr	r1, [pc, #108]	; (801f7f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801f782:	600b      	str	r3, [r1, #0]
 801f784:	491b      	ldr	r1, [pc, #108]	; (801f7f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801f786:	2300      	movs	r3, #0
 801f788:	800b      	strh	r3, [r1, #0]
 801f78a:	491b      	ldr	r1, [pc, #108]	; (801f7f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801f78c:	6809      	ldr	r1, [r1, #0]
 801f78e:	eba1 010e 	sub.w	r1, r1, lr
 801f792:	eba1 010c 	sub.w	r1, r1, ip
 801f796:	1a8a      	subs	r2, r1, r2
 801f798:	4918      	ldr	r1, [pc, #96]	; (801f7fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801f79a:	600a      	str	r2, [r1, #0]
 801f79c:	4a18      	ldr	r2, [pc, #96]	; (801f800 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801f79e:	469c      	mov	ip, r3
 801f7a0:	8013      	strh	r3, [r2, #0]
 801f7a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801f7a6:	4283      	cmp	r3, r0
 801f7a8:	d10d      	bne.n	801f7c6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801f7aa:	8835      	ldrh	r5, [r6, #0]
 801f7ac:	6838      	ldr	r0, [r7, #0]
 801f7ae:	2300      	movs	r3, #0
 801f7b0:	240e      	movs	r4, #14
 801f7b2:	429d      	cmp	r5, r3
 801f7b4:	d90f      	bls.n	801f7d6 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801f7b6:	fb04 0203 	mla	r2, r4, r3, r0
 801f7ba:	3301      	adds	r3, #1
 801f7bc:	7b11      	ldrb	r1, [r2, #12]
 801f7be:	f36f 1145 	bfc	r1, #5, #1
 801f7c2:	7311      	strb	r1, [r2, #12]
 801f7c4:	e7f5      	b.n	801f7b2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801f7c6:	682a      	ldr	r2, [r5, #0]
 801f7c8:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801f7cc:	6822      	ldr	r2, [r4, #0]
 801f7ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801f7d2:	3301      	adds	r3, #1
 801f7d4:	e7e7      	b.n	801f7a6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801f7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f7da:	bf00      	nop
 801f7dc:	200097e0 	.word	0x200097e0
 801f7e0:	200097fc 	.word	0x200097fc
 801f7e4:	20009800 	.word	0x20009800
 801f7e8:	200097f4 	.word	0x200097f4
 801f7ec:	200097e4 	.word	0x200097e4
 801f7f0:	200097ec 	.word	0x200097ec
 801f7f4:	200097fe 	.word	0x200097fe
 801f7f8:	200097e8 	.word	0x200097e8
 801f7fc:	200097f8 	.word	0x200097f8
 801f800:	200097f0 	.word	0x200097f0

0801f804 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801f804:	b510      	push	{r4, lr}
 801f806:	4b10      	ldr	r3, [pc, #64]	; (801f848 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801f808:	681b      	ldr	r3, [r3, #0]
 801f80a:	b9db      	cbnz	r3, 801f844 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801f80c:	b1d1      	cbz	r1, 801f844 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801f80e:	4b0f      	ldr	r3, [pc, #60]	; (801f84c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801f810:	801a      	strh	r2, [r3, #0]
 801f812:	4b0f      	ldr	r3, [pc, #60]	; (801f850 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801f814:	881b      	ldrh	r3, [r3, #0]
 801f816:	b292      	uxth	r2, r2
 801f818:	240e      	movs	r4, #14
 801f81a:	4413      	add	r3, r2
 801f81c:	4362      	muls	r2, r4
 801f81e:	2406      	movs	r4, #6
 801f820:	fb04 2203 	mla	r2, r4, r3, r2
 801f824:	428a      	cmp	r2, r1
 801f826:	d305      	bcc.n	801f834 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801f828:	4b0a      	ldr	r3, [pc, #40]	; (801f854 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801f82a:	4a0b      	ldr	r2, [pc, #44]	; (801f858 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801f82c:	480b      	ldr	r0, [pc, #44]	; (801f85c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801f82e:	2135      	movs	r1, #53	; 0x35
 801f830:	f00e fb46 	bl	802dec0 <__assert_func>
 801f834:	4b0a      	ldr	r3, [pc, #40]	; (801f860 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801f836:	6019      	str	r1, [r3, #0]
 801f838:	4b0a      	ldr	r3, [pc, #40]	; (801f864 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801f83a:	6018      	str	r0, [r3, #0]
 801f83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f840:	f7ff bf78 	b.w	801f734 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801f844:	bd10      	pop	{r4, pc}
 801f846:	bf00      	nop
 801f848:	200097ec 	.word	0x200097ec
 801f84c:	20009800 	.word	0x20009800
 801f850:	200097fc 	.word	0x200097fc
 801f854:	08032731 	.word	0x08032731
 801f858:	080327c6 	.word	0x080327c6
 801f85c:	0803270c 	.word	0x0803270c
 801f860:	200097e8 	.word	0x200097e8
 801f864:	200097e0 	.word	0x200097e0

0801f868 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801f868:	b470      	push	{r4, r5, r6}
 801f86a:	4c07      	ldr	r4, [pc, #28]	; (801f888 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801f86c:	6826      	ldr	r6, [r4, #0]
 801f86e:	4605      	mov	r5, r0
 801f870:	4610      	mov	r0, r2
 801f872:	9a03      	ldr	r2, [sp, #12]
 801f874:	b936      	cbnz	r6, 801f884 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801f876:	6025      	str	r5, [r4, #0]
 801f878:	4c04      	ldr	r4, [pc, #16]	; (801f88c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801f87a:	8021      	strh	r1, [r4, #0]
 801f87c:	bc70      	pop	{r4, r5, r6}
 801f87e:	4619      	mov	r1, r3
 801f880:	f7ff bfc0 	b.w	801f804 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801f884:	bc70      	pop	{r4, r5, r6}
 801f886:	4770      	bx	lr
 801f888:	20009804 	.word	0x20009804
 801f88c:	200097fc 	.word	0x200097fc

0801f890 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801f890:	b508      	push	{r3, lr}
 801f892:	4b14      	ldr	r3, [pc, #80]	; (801f8e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801f894:	6819      	ldr	r1, [r3, #0]
 801f896:	b931      	cbnz	r1, 801f8a6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801f898:	4b13      	ldr	r3, [pc, #76]	; (801f8e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801f89a:	4a14      	ldr	r2, [pc, #80]	; (801f8ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801f89c:	4814      	ldr	r0, [pc, #80]	; (801f8f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801f89e:	f240 4185 	movw	r1, #1157	; 0x485
 801f8a2:	f00e fb0d 	bl	802dec0 <__assert_func>
 801f8a6:	4a13      	ldr	r2, [pc, #76]	; (801f8f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801f8a8:	8803      	ldrh	r3, [r0, #0]
 801f8aa:	8812      	ldrh	r2, [r2, #0]
 801f8ac:	4293      	cmp	r3, r2
 801f8ae:	d204      	bcs.n	801f8ba <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801f8b0:	2214      	movs	r2, #20
 801f8b2:	fb02 1303 	mla	r3, r2, r3, r1
 801f8b6:	8918      	ldrh	r0, [r3, #8]
 801f8b8:	bd08      	pop	{r3, pc}
 801f8ba:	490f      	ldr	r1, [pc, #60]	; (801f8f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801f8bc:	8809      	ldrh	r1, [r1, #0]
 801f8be:	4411      	add	r1, r2
 801f8c0:	428b      	cmp	r3, r1
 801f8c2:	da06      	bge.n	801f8d2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801f8c4:	1a9b      	subs	r3, r3, r2
 801f8c6:	4a0d      	ldr	r2, [pc, #52]	; (801f8fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801f8c8:	6812      	ldr	r2, [r2, #0]
 801f8ca:	210e      	movs	r1, #14
 801f8cc:	fb01 2303 	mla	r3, r1, r3, r2
 801f8d0:	e7f1      	b.n	801f8b6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801f8d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f8d6:	4293      	cmp	r3, r2
 801f8d8:	bf0a      	itet	eq
 801f8da:	4b09      	ldreq	r3, [pc, #36]	; (801f900 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801f8dc:	2000      	movne	r0, #0
 801f8de:	8818      	ldrheq	r0, [r3, #0]
 801f8e0:	e7ea      	b.n	801f8b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801f8e2:	bf00      	nop
 801f8e4:	20009804 	.word	0x20009804
 801f8e8:	0803278a 	.word	0x0803278a
 801f8ec:	08032873 	.word	0x08032873
 801f8f0:	0803270c 	.word	0x0803270c
 801f8f4:	200097fc 	.word	0x200097fc
 801f8f8:	20009800 	.word	0x20009800
 801f8fc:	200097e4 	.word	0x200097e4
 801f900:	20009770 	.word	0x20009770

0801f904 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801f904:	b508      	push	{r3, lr}
 801f906:	4b14      	ldr	r3, [pc, #80]	; (801f958 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801f908:	6819      	ldr	r1, [r3, #0]
 801f90a:	b931      	cbnz	r1, 801f91a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801f90c:	4b13      	ldr	r3, [pc, #76]	; (801f95c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801f90e:	4a14      	ldr	r2, [pc, #80]	; (801f960 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801f910:	4814      	ldr	r0, [pc, #80]	; (801f964 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801f912:	f240 4199 	movw	r1, #1177	; 0x499
 801f916:	f00e fad3 	bl	802dec0 <__assert_func>
 801f91a:	4a13      	ldr	r2, [pc, #76]	; (801f968 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801f91c:	8803      	ldrh	r3, [r0, #0]
 801f91e:	8812      	ldrh	r2, [r2, #0]
 801f920:	4293      	cmp	r3, r2
 801f922:	d204      	bcs.n	801f92e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801f924:	2214      	movs	r2, #20
 801f926:	fb02 1303 	mla	r3, r2, r3, r1
 801f92a:	8958      	ldrh	r0, [r3, #10]
 801f92c:	bd08      	pop	{r3, pc}
 801f92e:	490f      	ldr	r1, [pc, #60]	; (801f96c <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801f930:	8809      	ldrh	r1, [r1, #0]
 801f932:	4411      	add	r1, r2
 801f934:	428b      	cmp	r3, r1
 801f936:	da06      	bge.n	801f946 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801f938:	1a9b      	subs	r3, r3, r2
 801f93a:	4a0d      	ldr	r2, [pc, #52]	; (801f970 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801f93c:	6812      	ldr	r2, [r2, #0]
 801f93e:	210e      	movs	r1, #14
 801f940:	fb01 2303 	mla	r3, r1, r3, r2
 801f944:	e7f1      	b.n	801f92a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801f946:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f94a:	4293      	cmp	r3, r2
 801f94c:	bf0a      	itet	eq
 801f94e:	4b09      	ldreq	r3, [pc, #36]	; (801f974 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801f950:	2000      	movne	r0, #0
 801f952:	8818      	ldrheq	r0, [r3, #0]
 801f954:	e7ea      	b.n	801f92c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801f956:	bf00      	nop
 801f958:	20009804 	.word	0x20009804
 801f95c:	0803278a 	.word	0x0803278a
 801f960:	0803289f 	.word	0x0803289f
 801f964:	0803270c 	.word	0x0803270c
 801f968:	200097fc 	.word	0x200097fc
 801f96c:	20009800 	.word	0x20009800
 801f970:	200097e4 	.word	0x200097e4
 801f974:	20009772 	.word	0x20009772

0801f978 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801f978:	b510      	push	{r4, lr}
 801f97a:	4b23      	ldr	r3, [pc, #140]	; (801fa08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801f97c:	681c      	ldr	r4, [r3, #0]
 801f97e:	b934      	cbnz	r4, 801f98e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801f980:	4b22      	ldr	r3, [pc, #136]	; (801fa0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801f982:	4a23      	ldr	r2, [pc, #140]	; (801fa10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801f984:	4823      	ldr	r0, [pc, #140]	; (801fa14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801f986:	f240 41ad 	movw	r1, #1197	; 0x4ad
 801f98a:	f00e fa99 	bl	802dec0 <__assert_func>
 801f98e:	4a22      	ldr	r2, [pc, #136]	; (801fa18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801f990:	880b      	ldrh	r3, [r1, #0]
 801f992:	8812      	ldrh	r2, [r2, #0]
 801f994:	4293      	cmp	r3, r2
 801f996:	d211      	bcs.n	801f9bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801f998:	2214      	movs	r2, #20
 801f99a:	fb02 4303 	mla	r3, r2, r3, r4
 801f99e:	8a1a      	ldrh	r2, [r3, #16]
 801f9a0:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801f9a4:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801f9a8:	8a5b      	ldrh	r3, [r3, #18]
 801f9aa:	8004      	strh	r4, [r0, #0]
 801f9ac:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801f9b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f9b4:	8041      	strh	r1, [r0, #2]
 801f9b6:	8082      	strh	r2, [r0, #4]
 801f9b8:	80c3      	strh	r3, [r0, #6]
 801f9ba:	e00e      	b.n	801f9da <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801f9bc:	4917      	ldr	r1, [pc, #92]	; (801fa1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801f9be:	8809      	ldrh	r1, [r1, #0]
 801f9c0:	4411      	add	r1, r2
 801f9c2:	428b      	cmp	r3, r1
 801f9c4:	da0a      	bge.n	801f9dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801f9c6:	1a9b      	subs	r3, r3, r2
 801f9c8:	4a15      	ldr	r2, [pc, #84]	; (801fa20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801f9ca:	6812      	ldr	r2, [r2, #0]
 801f9cc:	210e      	movs	r1, #14
 801f9ce:	fb01 2303 	mla	r3, r1, r3, r2
 801f9d2:	681a      	ldr	r2, [r3, #0]
 801f9d4:	6002      	str	r2, [r0, #0]
 801f9d6:	685a      	ldr	r2, [r3, #4]
 801f9d8:	6042      	str	r2, [r0, #4]
 801f9da:	bd10      	pop	{r4, pc}
 801f9dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f9e0:	4293      	cmp	r3, r2
 801f9e2:	d10b      	bne.n	801f9fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801f9e4:	4b0f      	ldr	r3, [pc, #60]	; (801fa24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801f9e6:	f9b3 1000 	ldrsh.w	r1, [r3]
 801f9ea:	4b0f      	ldr	r3, [pc, #60]	; (801fa28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801f9ec:	8081      	strh	r1, [r0, #4]
 801f9ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f9f2:	80c2      	strh	r2, [r0, #6]
 801f9f4:	2300      	movs	r3, #0
 801f9f6:	8003      	strh	r3, [r0, #0]
 801f9f8:	8043      	strh	r3, [r0, #2]
 801f9fa:	e7ee      	b.n	801f9da <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801f9fc:	2300      	movs	r3, #0
 801f9fe:	8003      	strh	r3, [r0, #0]
 801fa00:	8043      	strh	r3, [r0, #2]
 801fa02:	8083      	strh	r3, [r0, #4]
 801fa04:	e7d8      	b.n	801f9b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801fa06:	bf00      	nop
 801fa08:	20009804 	.word	0x20009804
 801fa0c:	0803278a 	.word	0x0803278a
 801fa10:	0803280c 	.word	0x0803280c
 801fa14:	0803270c 	.word	0x0803270c
 801fa18:	200097fc 	.word	0x200097fc
 801fa1c:	20009800 	.word	0x20009800
 801fa20:	200097e4 	.word	0x200097e4
 801fa24:	20009770 	.word	0x20009770
 801fa28:	20009772 	.word	0x20009772

0801fa2c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801fa2c:	4b18      	ldr	r3, [pc, #96]	; (801fa90 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801fa2e:	681b      	ldr	r3, [r3, #0]
 801fa30:	b34b      	cbz	r3, 801fa86 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801fa32:	4a18      	ldr	r2, [pc, #96]	; (801fa94 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801fa34:	8800      	ldrh	r0, [r0, #0]
 801fa36:	8812      	ldrh	r2, [r2, #0]
 801fa38:	4290      	cmp	r0, r2
 801fa3a:	d211      	bcs.n	801fa60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801fa3c:	2214      	movs	r2, #20
 801fa3e:	fb02 3300 	mla	r3, r2, r0, r3
 801fa42:	8a1a      	ldrh	r2, [r3, #16]
 801fa44:	8919      	ldrh	r1, [r3, #8]
 801fa46:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801fa4a:	428a      	cmp	r2, r1
 801fa4c:	db1d      	blt.n	801fa8a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801fa4e:	8a58      	ldrh	r0, [r3, #18]
 801fa50:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801fa54:	895b      	ldrh	r3, [r3, #10]
 801fa56:	4298      	cmp	r0, r3
 801fa58:	bfac      	ite	ge
 801fa5a:	2000      	movge	r0, #0
 801fa5c:	2001      	movlt	r0, #1
 801fa5e:	4770      	bx	lr
 801fa60:	4b0d      	ldr	r3, [pc, #52]	; (801fa98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801fa62:	881b      	ldrh	r3, [r3, #0]
 801fa64:	4413      	add	r3, r2
 801fa66:	4298      	cmp	r0, r3
 801fa68:	da0d      	bge.n	801fa86 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801fa6a:	4b0c      	ldr	r3, [pc, #48]	; (801fa9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801fa6c:	681b      	ldr	r3, [r3, #0]
 801fa6e:	1a80      	subs	r0, r0, r2
 801fa70:	220e      	movs	r2, #14
 801fa72:	fb02 3300 	mla	r3, r2, r0, r3
 801fa76:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801fa7a:	891a      	ldrh	r2, [r3, #8]
 801fa7c:	4291      	cmp	r1, r2
 801fa7e:	db04      	blt.n	801fa8a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801fa80:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801fa84:	e7e6      	b.n	801fa54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801fa86:	2000      	movs	r0, #0
 801fa88:	4770      	bx	lr
 801fa8a:	2001      	movs	r0, #1
 801fa8c:	4770      	bx	lr
 801fa8e:	bf00      	nop
 801fa90:	20009804 	.word	0x20009804
 801fa94:	200097fc 	.word	0x200097fc
 801fa98:	20009800 	.word	0x20009800
 801fa9c:	200097e4 	.word	0x200097e4

0801faa0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801faa0:	b508      	push	{r3, lr}
 801faa2:	4b12      	ldr	r3, [pc, #72]	; (801faec <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801faa4:	6819      	ldr	r1, [r3, #0]
 801faa6:	b931      	cbnz	r1, 801fab6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801faa8:	4b11      	ldr	r3, [pc, #68]	; (801faf0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801faaa:	4a12      	ldr	r2, [pc, #72]	; (801faf4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801faac:	4812      	ldr	r0, [pc, #72]	; (801faf8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801faae:	f240 41d1 	movw	r1, #1233	; 0x4d1
 801fab2:	f00e fa05 	bl	802dec0 <__assert_func>
 801fab6:	8803      	ldrh	r3, [r0, #0]
 801fab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fabc:	4293      	cmp	r3, r2
 801fabe:	d012      	beq.n	801fae6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801fac0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fac4:	4293      	cmp	r3, r2
 801fac6:	d103      	bne.n	801fad0 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801fac8:	4b0c      	ldr	r3, [pc, #48]	; (801fafc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801faca:	681b      	ldr	r3, [r3, #0]
 801facc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801face:	bd08      	pop	{r3, pc}
 801fad0:	4a0b      	ldr	r2, [pc, #44]	; (801fb00 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801fad2:	6812      	ldr	r2, [r2, #0]
 801fad4:	b11a      	cbz	r2, 801fade <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801fad6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801fada:	2800      	cmp	r0, #0
 801fadc:	d1f7      	bne.n	801face <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801fade:	2214      	movs	r2, #20
 801fae0:	4353      	muls	r3, r2
 801fae2:	58c8      	ldr	r0, [r1, r3]
 801fae4:	e7f3      	b.n	801face <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801fae6:	2000      	movs	r0, #0
 801fae8:	e7f1      	b.n	801face <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801faea:	bf00      	nop
 801faec:	20009804 	.word	0x20009804
 801faf0:	0803278a 	.word	0x0803278a
 801faf4:	08032842 	.word	0x08032842
 801faf8:	0803270c 	.word	0x0803270c
 801fafc:	2000977c 	.word	0x2000977c
 801fb00:	200097e0 	.word	0x200097e0

0801fb04 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801fb04:	8802      	ldrh	r2, [r0, #0]
 801fb06:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801fb0a:	429a      	cmp	r2, r3
 801fb0c:	d845      	bhi.n	801fb9a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801fb0e:	4b24      	ldr	r3, [pc, #144]	; (801fba0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801fb10:	8818      	ldrh	r0, [r3, #0]
 801fb12:	4282      	cmp	r2, r0
 801fb14:	d221      	bcs.n	801fb5a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801fb16:	4b23      	ldr	r3, [pc, #140]	; (801fba4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801fb18:	6819      	ldr	r1, [r3, #0]
 801fb1a:	2314      	movs	r3, #20
 801fb1c:	fb03 1302 	mla	r3, r3, r2, r1
 801fb20:	6858      	ldr	r0, [r3, #4]
 801fb22:	2800      	cmp	r0, #0
 801fb24:	d03a      	beq.n	801fb9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801fb26:	4920      	ldr	r1, [pc, #128]	; (801fba8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801fb28:	6809      	ldr	r1, [r1, #0]
 801fb2a:	2900      	cmp	r1, #0
 801fb2c:	d036      	beq.n	801fb9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801fb2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801fb32:	2900      	cmp	r1, #0
 801fb34:	d032      	beq.n	801fb9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801fb36:	891a      	ldrh	r2, [r3, #8]
 801fb38:	8958      	ldrh	r0, [r3, #10]
 801fb3a:	4350      	muls	r0, r2
 801fb3c:	7c5a      	ldrb	r2, [r3, #17]
 801fb3e:	7cdb      	ldrb	r3, [r3, #19]
 801fb40:	0952      	lsrs	r2, r2, #5
 801fb42:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801fb46:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801fb4a:	2b0b      	cmp	r3, #11
 801fb4c:	bf18      	it	ne
 801fb4e:	0040      	lslne	r0, r0, #1
 801fb50:	3003      	adds	r0, #3
 801fb52:	f020 0003 	bic.w	r0, r0, #3
 801fb56:	4408      	add	r0, r1
 801fb58:	4770      	bx	lr
 801fb5a:	4b14      	ldr	r3, [pc, #80]	; (801fbac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801fb5c:	881b      	ldrh	r3, [r3, #0]
 801fb5e:	4403      	add	r3, r0
 801fb60:	429a      	cmp	r2, r3
 801fb62:	da1a      	bge.n	801fb9a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801fb64:	4b12      	ldr	r3, [pc, #72]	; (801fbb0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801fb66:	681b      	ldr	r3, [r3, #0]
 801fb68:	1a10      	subs	r0, r2, r0
 801fb6a:	210e      	movs	r1, #14
 801fb6c:	fb01 3000 	mla	r0, r1, r0, r3
 801fb70:	7b03      	ldrb	r3, [r0, #12]
 801fb72:	f003 031f 	and.w	r3, r3, #31
 801fb76:	2b0b      	cmp	r3, #11
 801fb78:	d10b      	bne.n	801fb92 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801fb7a:	8903      	ldrh	r3, [r0, #8]
 801fb7c:	8940      	ldrh	r0, [r0, #10]
 801fb7e:	4358      	muls	r0, r3
 801fb80:	4b09      	ldr	r3, [pc, #36]	; (801fba8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801fb82:	6819      	ldr	r1, [r3, #0]
 801fb84:	3003      	adds	r0, #3
 801fb86:	f020 0303 	bic.w	r3, r0, #3
 801fb8a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801fb8e:	4418      	add	r0, r3
 801fb90:	4770      	bx	lr
 801fb92:	2b0d      	cmp	r3, #13
 801fb94:	d101      	bne.n	801fb9a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801fb96:	300d      	adds	r0, #13
 801fb98:	4770      	bx	lr
 801fb9a:	2000      	movs	r0, #0
 801fb9c:	4770      	bx	lr
 801fb9e:	bf00      	nop
 801fba0:	200097fc 	.word	0x200097fc
 801fba4:	20009804 	.word	0x20009804
 801fba8:	200097e0 	.word	0x200097e0
 801fbac:	20009800 	.word	0x20009800
 801fbb0:	200097e4 	.word	0x200097e4

0801fbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801fbb4:	b510      	push	{r4, lr}
 801fbb6:	4b17      	ldr	r3, [pc, #92]	; (801fc14 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801fbb8:	6819      	ldr	r1, [r3, #0]
 801fbba:	8803      	ldrh	r3, [r0, #0]
 801fbbc:	b1e9      	cbz	r1, 801fbfa <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801fbbe:	4a16      	ldr	r2, [pc, #88]	; (801fc18 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801fbc0:	8812      	ldrh	r2, [r2, #0]
 801fbc2:	429a      	cmp	r2, r3
 801fbc4:	d90a      	bls.n	801fbdc <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801fbc6:	2214      	movs	r2, #20
 801fbc8:	fb02 1303 	mla	r3, r2, r3, r1
 801fbcc:	7c58      	ldrb	r0, [r3, #17]
 801fbce:	0942      	lsrs	r2, r0, #5
 801fbd0:	7cd8      	ldrb	r0, [r3, #19]
 801fbd2:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801fbd6:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801fbda:	bd10      	pop	{r4, pc}
 801fbdc:	490f      	ldr	r1, [pc, #60]	; (801fc1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801fbde:	8809      	ldrh	r1, [r1, #0]
 801fbe0:	4411      	add	r1, r2
 801fbe2:	428b      	cmp	r3, r1
 801fbe4:	da09      	bge.n	801fbfa <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801fbe6:	1a9b      	subs	r3, r3, r2
 801fbe8:	4a0d      	ldr	r2, [pc, #52]	; (801fc20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801fbea:	6812      	ldr	r2, [r2, #0]
 801fbec:	210e      	movs	r1, #14
 801fbee:	fb01 2303 	mla	r3, r1, r3, r2
 801fbf2:	7b18      	ldrb	r0, [r3, #12]
 801fbf4:	f000 001f 	and.w	r0, r0, #31
 801fbf8:	e7ef      	b.n	801fbda <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801fbfa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fbfe:	4293      	cmp	r3, r2
 801fc00:	d106      	bne.n	801fc10 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801fc02:	f7f0 f9ff 	bl	8010004 <_ZN8touchgfx3HAL3lcdEv>
 801fc06:	6803      	ldr	r3, [r0, #0]
 801fc08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc0e:	4718      	bx	r3
 801fc10:	2000      	movs	r0, #0
 801fc12:	e7e2      	b.n	801fbda <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801fc14:	20009804 	.word	0x20009804
 801fc18:	200097fc 	.word	0x200097fc
 801fc1c:	20009800 	.word	0x20009800
 801fc20:	200097e4 	.word	0x200097e4

0801fc24 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801fc24:	2010      	movs	r0, #16
 801fc26:	4770      	bx	lr

0801fc28 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801fc28:	2000      	movs	r0, #0
 801fc2a:	4770      	bx	lr

0801fc2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801fc2c:	2bff      	cmp	r3, #255	; 0xff
 801fc2e:	d050      	beq.n	801fcd2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801fc30:	2a0b      	cmp	r2, #11
 801fc32:	d04a      	beq.n	801fcca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801fc34:	d80e      	bhi.n	801fc54 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801fc36:	2a03      	cmp	r2, #3
 801fc38:	d03f      	beq.n	801fcba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801fc3a:	d804      	bhi.n	801fc46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801fc3c:	2a01      	cmp	r2, #1
 801fc3e:	d03e      	beq.n	801fcbe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801fc40:	d93f      	bls.n	801fcc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801fc42:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801fc44:	4770      	bx	lr
 801fc46:	2a09      	cmp	r2, #9
 801fc48:	d03f      	beq.n	801fcca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801fc4a:	d83c      	bhi.n	801fcc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801fc4c:	2a08      	cmp	r2, #8
 801fc4e:	d03a      	beq.n	801fcc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801fc50:	2000      	movs	r0, #0
 801fc52:	4770      	bx	lr
 801fc54:	2a2f      	cmp	r2, #47	; 0x2f
 801fc56:	d024      	beq.n	801fca2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801fc58:	d80d      	bhi.n	801fc76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801fc5a:	2a2d      	cmp	r2, #45	; 0x2d
 801fc5c:	d014      	beq.n	801fc88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801fc5e:	d826      	bhi.n	801fcae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801fc60:	2a2c      	cmp	r2, #44	; 0x2c
 801fc62:	d1f5      	bne.n	801fc50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fc64:	684b      	ldr	r3, [r1, #4]
 801fc66:	781b      	ldrb	r3, [r3, #0]
 801fc68:	2b01      	cmp	r3, #1
 801fc6a:	d018      	beq.n	801fc9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801fc6c:	d323      	bcc.n	801fcb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801fc6e:	2b02      	cmp	r3, #2
 801fc70:	d1ee      	bne.n	801fc50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fc72:	6880      	ldr	r0, [r0, #8]
 801fc74:	4770      	bx	lr
 801fc76:	2a31      	cmp	r2, #49	; 0x31
 801fc78:	d004      	beq.n	801fc84 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801fc7a:	d328      	bcc.n	801fcce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801fc7c:	2a32      	cmp	r2, #50	; 0x32
 801fc7e:	d026      	beq.n	801fcce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801fc80:	2a33      	cmp	r2, #51	; 0x33
 801fc82:	d1e5      	bne.n	801fc50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fc84:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801fc86:	4770      	bx	lr
 801fc88:	684b      	ldr	r3, [r1, #4]
 801fc8a:	781b      	ldrb	r3, [r3, #0]
 801fc8c:	2b01      	cmp	r3, #1
 801fc8e:	d004      	beq.n	801fc9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801fc90:	d30b      	bcc.n	801fcaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801fc92:	2b02      	cmp	r3, #2
 801fc94:	d1dc      	bne.n	801fc50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fc96:	6900      	ldr	r0, [r0, #16]
 801fc98:	4770      	bx	lr
 801fc9a:	6a00      	ldr	r0, [r0, #32]
 801fc9c:	4770      	bx	lr
 801fc9e:	6980      	ldr	r0, [r0, #24]
 801fca0:	4770      	bx	lr
 801fca2:	684b      	ldr	r3, [r1, #4]
 801fca4:	781b      	ldrb	r3, [r3, #0]
 801fca6:	2b00      	cmp	r3, #0
 801fca8:	d1d2      	bne.n	801fc50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fcaa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801fcac:	4770      	bx	lr
 801fcae:	684b      	ldr	r3, [r1, #4]
 801fcb0:	781b      	ldrb	r3, [r3, #0]
 801fcb2:	2b00      	cmp	r3, #0
 801fcb4:	d1cc      	bne.n	801fc50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fcb6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801fcb8:	4770      	bx	lr
 801fcba:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801fcbc:	4770      	bx	lr
 801fcbe:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801fcc0:	4770      	bx	lr
 801fcc2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801fcc4:	4770      	bx	lr
 801fcc6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801fcc8:	4770      	bx	lr
 801fcca:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801fccc:	4770      	bx	lr
 801fcce:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801fcd0:	4770      	bx	lr
 801fcd2:	2a0b      	cmp	r2, #11
 801fcd4:	d049      	beq.n	801fd6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801fcd6:	d80e      	bhi.n	801fcf6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801fcd8:	2a03      	cmp	r2, #3
 801fcda:	d040      	beq.n	801fd5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801fcdc:	d804      	bhi.n	801fce8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801fcde:	2a01      	cmp	r2, #1
 801fce0:	d03f      	beq.n	801fd62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801fce2:	d940      	bls.n	801fd66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801fce4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801fce6:	4770      	bx	lr
 801fce8:	2a09      	cmp	r2, #9
 801fcea:	d03e      	beq.n	801fd6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801fcec:	d801      	bhi.n	801fcf2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801fcee:	2a08      	cmp	r2, #8
 801fcf0:	d1ae      	bne.n	801fc50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fcf2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801fcf4:	4770      	bx	lr
 801fcf6:	2a2f      	cmp	r2, #47	; 0x2f
 801fcf8:	d024      	beq.n	801fd44 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801fcfa:	d80d      	bhi.n	801fd18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801fcfc:	2a2d      	cmp	r2, #45	; 0x2d
 801fcfe:	d014      	beq.n	801fd2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801fd00:	d826      	bhi.n	801fd50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801fd02:	2a2c      	cmp	r2, #44	; 0x2c
 801fd04:	d1a4      	bne.n	801fc50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fd06:	684b      	ldr	r3, [r1, #4]
 801fd08:	781b      	ldrb	r3, [r3, #0]
 801fd0a:	2b01      	cmp	r3, #1
 801fd0c:	d018      	beq.n	801fd40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801fd0e:	d324      	bcc.n	801fd5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801fd10:	2b02      	cmp	r3, #2
 801fd12:	d19d      	bne.n	801fc50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fd14:	68c0      	ldr	r0, [r0, #12]
 801fd16:	4770      	bx	lr
 801fd18:	2a31      	cmp	r2, #49	; 0x31
 801fd1a:	d004      	beq.n	801fd26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801fd1c:	d327      	bcc.n	801fd6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801fd1e:	2a32      	cmp	r2, #50	; 0x32
 801fd20:	d025      	beq.n	801fd6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801fd22:	2a33      	cmp	r2, #51	; 0x33
 801fd24:	d194      	bne.n	801fc50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fd26:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801fd28:	4770      	bx	lr
 801fd2a:	684b      	ldr	r3, [r1, #4]
 801fd2c:	781b      	ldrb	r3, [r3, #0]
 801fd2e:	2b01      	cmp	r3, #1
 801fd30:	d004      	beq.n	801fd3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801fd32:	d30b      	bcc.n	801fd4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801fd34:	2b02      	cmp	r3, #2
 801fd36:	d18b      	bne.n	801fc50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fd38:	6940      	ldr	r0, [r0, #20]
 801fd3a:	4770      	bx	lr
 801fd3c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fd3e:	4770      	bx	lr
 801fd40:	69c0      	ldr	r0, [r0, #28]
 801fd42:	4770      	bx	lr
 801fd44:	684b      	ldr	r3, [r1, #4]
 801fd46:	781b      	ldrb	r3, [r3, #0]
 801fd48:	2b00      	cmp	r3, #0
 801fd4a:	d181      	bne.n	801fc50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fd4c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801fd4e:	4770      	bx	lr
 801fd50:	684b      	ldr	r3, [r1, #4]
 801fd52:	781b      	ldrb	r3, [r3, #0]
 801fd54:	2b00      	cmp	r3, #0
 801fd56:	f47f af7b 	bne.w	801fc50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fd5a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801fd5c:	4770      	bx	lr
 801fd5e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801fd60:	4770      	bx	lr
 801fd62:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801fd64:	4770      	bx	lr
 801fd66:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801fd68:	4770      	bx	lr
 801fd6a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801fd6c:	4770      	bx	lr
 801fd6e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801fd70:	4770      	bx	lr

0801fd72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fd72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd76:	b087      	sub	sp, #28
 801fd78:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fd7a:	9205      	str	r2, [sp, #20]
 801fd7c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fd80:	9202      	str	r2, [sp, #8]
 801fd82:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801fd86:	9101      	str	r1, [sp, #4]
 801fd88:	6841      	ldr	r1, [r0, #4]
 801fd8a:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801fd8e:	fb01 2404 	mla	r4, r1, r4, r2
 801fd92:	6802      	ldr	r2, [r0, #0]
 801fd94:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fd98:	f8de 2000 	ldr.w	r2, [lr]
 801fd9c:	9203      	str	r2, [sp, #12]
 801fd9e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801fda2:	3204      	adds	r2, #4
 801fda4:	9204      	str	r2, [sp, #16]
 801fda6:	9a02      	ldr	r2, [sp, #8]
 801fda8:	43d6      	mvns	r6, r2
 801fdaa:	b2f6      	uxtb	r6, r6
 801fdac:	9a01      	ldr	r2, [sp, #4]
 801fdae:	2a00      	cmp	r2, #0
 801fdb0:	dc03      	bgt.n	801fdba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fdb2:	9a05      	ldr	r2, [sp, #20]
 801fdb4:	2a00      	cmp	r2, #0
 801fdb6:	f340 8129 	ble.w	802000c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801fdba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fdbc:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801fdc0:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801fdc4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fdc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fdca:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fdce:	2b00      	cmp	r3, #0
 801fdd0:	dd0e      	ble.n	801fdf0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fdd2:	1408      	asrs	r0, r1, #16
 801fdd4:	d405      	bmi.n	801fde2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fdd6:	4560      	cmp	r0, ip
 801fdd8:	da03      	bge.n	801fde2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fdda:	1410      	asrs	r0, r2, #16
 801fddc:	d401      	bmi.n	801fde2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fdde:	42b8      	cmp	r0, r7
 801fde0:	db07      	blt.n	801fdf2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801fde2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fde4:	4401      	add	r1, r0
 801fde6:	9814      	ldr	r0, [sp, #80]	; 0x50
 801fde8:	3b01      	subs	r3, #1
 801fdea:	4402      	add	r2, r0
 801fdec:	3402      	adds	r4, #2
 801fdee:	e7ee      	b.n	801fdce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801fdf0:	d071      	beq.n	801fed6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fdf2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fdf4:	1e58      	subs	r0, r3, #1
 801fdf6:	fb05 1500 	mla	r5, r5, r0, r1
 801fdfa:	142d      	asrs	r5, r5, #16
 801fdfc:	d45f      	bmi.n	801febe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801fdfe:	4565      	cmp	r5, ip
 801fe00:	da5d      	bge.n	801febe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801fe02:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fe04:	fb05 2000 	mla	r0, r5, r0, r2
 801fe08:	1400      	asrs	r0, r0, #16
 801fe0a:	d458      	bmi.n	801febe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801fe0c:	42b8      	cmp	r0, r7
 801fe0e:	da56      	bge.n	801febe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801fe10:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801fe14:	4699      	mov	r9, r3
 801fe16:	46a2      	mov	sl, r4
 801fe18:	f1b9 0f00 	cmp.w	r9, #0
 801fe1c:	dd57      	ble.n	801fece <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801fe1e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801fe22:	9803      	ldr	r0, [sp, #12]
 801fe24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801fe28:	140d      	asrs	r5, r1, #16
 801fe2a:	fb07 000c 	mla	r0, r7, ip, r0
 801fe2e:	f109 39ff 	add.w	r9, r9, #4294967295
 801fe32:	5d40      	ldrb	r0, [r0, r5]
 801fe34:	9d04      	ldr	r5, [sp, #16]
 801fe36:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801fe3a:	f8ba 5000 	ldrh.w	r5, [sl]
 801fe3e:	122f      	asrs	r7, r5, #8
 801fe40:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801fe44:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fe48:	fb17 f706 	smulbb	r7, r7, r6
 801fe4c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801fe50:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fe54:	00ed      	lsls	r5, r5, #3
 801fe56:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801fe5a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801fe5e:	10c7      	asrs	r7, r0, #3
 801fe60:	b2ed      	uxtb	r5, r5
 801fe62:	00c0      	lsls	r0, r0, #3
 801fe64:	fb18 f806 	smulbb	r8, r8, r6
 801fe68:	fb15 f506 	smulbb	r5, r5, r6
 801fe6c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fe70:	b2c0      	uxtb	r0, r0
 801fe72:	fa1f fc8c 	uxth.w	ip, ip
 801fe76:	fb07 870b 	mla	r7, r7, fp, r8
 801fe7a:	fb00 500b 	mla	r0, r0, fp, r5
 801fe7e:	b280      	uxth	r0, r0
 801fe80:	b2bf      	uxth	r7, r7
 801fe82:	f10c 0501 	add.w	r5, ip, #1
 801fe86:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fe8a:	f107 0801 	add.w	r8, r7, #1
 801fe8e:	1c45      	adds	r5, r0, #1
 801fe90:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801fe94:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801fe98:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fe9a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fe9e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801fea2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801fea6:	ea45 0c0c 	orr.w	ip, r5, ip
 801feaa:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801feae:	4401      	add	r1, r0
 801feb0:	9814      	ldr	r0, [sp, #80]	; 0x50
 801feb2:	ea4c 0c08 	orr.w	ip, ip, r8
 801feb6:	f82a cb02 	strh.w	ip, [sl], #2
 801feba:	4402      	add	r2, r0
 801febc:	e7ac      	b.n	801fe18 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801febe:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801fec2:	f04f 0800 	mov.w	r8, #0
 801fec6:	eb03 0008 	add.w	r0, r3, r8
 801feca:	2800      	cmp	r0, #0
 801fecc:	dc41      	bgt.n	801ff52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801fece:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fed2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fed6:	9b01      	ldr	r3, [sp, #4]
 801fed8:	2b00      	cmp	r3, #0
 801feda:	f340 8097 	ble.w	802000c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801fede:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fee6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801feea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801feec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fef0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fef4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fef8:	eef0 6a62 	vmov.f32	s13, s5
 801fefc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff00:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff04:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff08:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801ff0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff10:	eef0 6a43 	vmov.f32	s13, s6
 801ff14:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff18:	ee12 2a90 	vmov	r2, s5
 801ff1c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff20:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff24:	ee13 2a10 	vmov	r2, s6
 801ff28:	9313      	str	r3, [sp, #76]	; 0x4c
 801ff2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff2c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff30:	9314      	str	r3, [sp, #80]	; 0x50
 801ff32:	9b01      	ldr	r3, [sp, #4]
 801ff34:	9a05      	ldr	r2, [sp, #20]
 801ff36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff3a:	3b01      	subs	r3, #1
 801ff3c:	9301      	str	r3, [sp, #4]
 801ff3e:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801ff42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff44:	eeb0 3a67 	vmov.f32	s6, s15
 801ff48:	bf08      	it	eq
 801ff4a:	4613      	moveq	r3, r2
 801ff4c:	eef0 2a47 	vmov.f32	s5, s14
 801ff50:	e72c      	b.n	801fdac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ff52:	140f      	asrs	r7, r1, #16
 801ff54:	d453      	bmi.n	801fffe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ff56:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ff5a:	42bd      	cmp	r5, r7
 801ff5c:	dd4f      	ble.n	801fffe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ff5e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ff62:	d44c      	bmi.n	801fffe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ff64:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ff68:	4560      	cmp	r0, ip
 801ff6a:	dd48      	ble.n	801fffe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ff6c:	9803      	ldr	r0, [sp, #12]
 801ff6e:	b22d      	sxth	r5, r5
 801ff70:	fb0c 0505 	mla	r5, ip, r5, r0
 801ff74:	5de8      	ldrb	r0, [r5, r7]
 801ff76:	9d04      	ldr	r5, [sp, #16]
 801ff78:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801ff7c:	f06f 0501 	mvn.w	r5, #1
 801ff80:	fb05 fb08 	mul.w	fp, r5, r8
 801ff84:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ff88:	f834 500b 	ldrh.w	r5, [r4, fp]
 801ff8c:	122f      	asrs	r7, r5, #8
 801ff8e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ff92:	fb17 f706 	smulbb	r7, r7, r6
 801ff96:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801ff9a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ff9e:	00ed      	lsls	r5, r5, #3
 801ffa0:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801ffa4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ffa8:	10c7      	asrs	r7, r0, #3
 801ffaa:	b2ed      	uxtb	r5, r5
 801ffac:	00c0      	lsls	r0, r0, #3
 801ffae:	fb19 f906 	smulbb	r9, r9, r6
 801ffb2:	fb15 f506 	smulbb	r5, r5, r6
 801ffb6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ffba:	b2c0      	uxtb	r0, r0
 801ffbc:	fa1f fc8c 	uxth.w	ip, ip
 801ffc0:	fb07 970a 	mla	r7, r7, sl, r9
 801ffc4:	fb00 500a 	mla	r0, r0, sl, r5
 801ffc8:	b2bf      	uxth	r7, r7
 801ffca:	b280      	uxth	r0, r0
 801ffcc:	f10c 0501 	add.w	r5, ip, #1
 801ffd0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ffd4:	f107 0901 	add.w	r9, r7, #1
 801ffd8:	1c45      	adds	r5, r0, #1
 801ffda:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ffde:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801ffe2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ffe6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ffea:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ffee:	ea45 0c0c 	orr.w	ip, r5, ip
 801fff2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fff6:	ea4c 0c09 	orr.w	ip, ip, r9
 801fffa:	f824 c00b 	strh.w	ip, [r4, fp]
 801fffe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020000:	4401      	add	r1, r0
 8020002:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020004:	f108 38ff 	add.w	r8, r8, #4294967295
 8020008:	4402      	add	r2, r0
 802000a:	e75c      	b.n	801fec6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802000c:	b007      	add	sp, #28
 802000e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020012 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020012:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020016:	b085      	sub	sp, #20
 8020018:	4693      	mov	fp, r2
 802001a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 802001c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802001e:	6870      	ldr	r0, [r6, #4]
 8020020:	9100      	str	r1, [sp, #0]
 8020022:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020026:	fb00 2404 	mla	r4, r0, r4, r2
 802002a:	6832      	ldr	r2, [r6, #0]
 802002c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020030:	682a      	ldr	r2, [r5, #0]
 8020032:	9201      	str	r2, [sp, #4]
 8020034:	686a      	ldr	r2, [r5, #4]
 8020036:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 802003a:	3204      	adds	r2, #4
 802003c:	9202      	str	r2, [sp, #8]
 802003e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020042:	9a00      	ldr	r2, [sp, #0]
 8020044:	2a00      	cmp	r2, #0
 8020046:	dc03      	bgt.n	8020050 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020048:	f1bb 0f00 	cmp.w	fp, #0
 802004c:	f340 80a0 	ble.w	8020190 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8020050:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020052:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8020056:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 802005a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802005e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020060:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020064:	2b00      	cmp	r3, #0
 8020066:	dd0c      	ble.n	8020082 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020068:	1406      	asrs	r6, r0, #16
 802006a:	d405      	bmi.n	8020078 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802006c:	454e      	cmp	r6, r9
 802006e:	da03      	bge.n	8020078 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020070:	1416      	asrs	r6, r2, #16
 8020072:	d401      	bmi.n	8020078 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020074:	4546      	cmp	r6, r8
 8020076:	db05      	blt.n	8020084 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020078:	4470      	add	r0, lr
 802007a:	4462      	add	r2, ip
 802007c:	3b01      	subs	r3, #1
 802007e:	3402      	adds	r4, #2
 8020080:	e7f0      	b.n	8020064 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020082:	d00f      	beq.n	80200a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020084:	1e5e      	subs	r6, r3, #1
 8020086:	fb0e 0706 	mla	r7, lr, r6, r0
 802008a:	143f      	asrs	r7, r7, #16
 802008c:	d541      	bpl.n	8020112 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 802008e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8020092:	4698      	mov	r8, r3
 8020094:	9603      	str	r6, [sp, #12]
 8020096:	f1b8 0f00 	cmp.w	r8, #0
 802009a:	dc59      	bgt.n	8020150 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802009c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80200a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80200a4:	9b00      	ldr	r3, [sp, #0]
 80200a6:	2b00      	cmp	r3, #0
 80200a8:	dd72      	ble.n	8020190 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80200aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80200ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80200b2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80200b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80200b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80200bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80200c0:	eeb0 6a62 	vmov.f32	s12, s5
 80200c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80200c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80200cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80200d0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80200d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80200d8:	eeb0 6a43 	vmov.f32	s12, s6
 80200dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80200e0:	ee12 2a90 	vmov	r2, s5
 80200e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80200e8:	fb92 fef3 	sdiv	lr, r2, r3
 80200ec:	ee13 2a10 	vmov	r2, s6
 80200f0:	fb92 fcf3 	sdiv	ip, r2, r3
 80200f4:	9b00      	ldr	r3, [sp, #0]
 80200f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80200fa:	3b01      	subs	r3, #1
 80200fc:	9300      	str	r3, [sp, #0]
 80200fe:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020104:	eeb0 3a67 	vmov.f32	s6, s15
 8020108:	bf08      	it	eq
 802010a:	465b      	moveq	r3, fp
 802010c:	eef0 2a47 	vmov.f32	s5, s14
 8020110:	e797      	b.n	8020042 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020112:	454f      	cmp	r7, r9
 8020114:	dabb      	bge.n	802008e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020116:	fb0c 2606 	mla	r6, ip, r6, r2
 802011a:	1436      	asrs	r6, r6, #16
 802011c:	d4b7      	bmi.n	802008e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802011e:	4546      	cmp	r6, r8
 8020120:	dab5      	bge.n	802008e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020122:	461e      	mov	r6, r3
 8020124:	46a0      	mov	r8, r4
 8020126:	2e00      	cmp	r6, #0
 8020128:	ddb8      	ble.n	802009c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802012a:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 802012e:	9901      	ldr	r1, [sp, #4]
 8020130:	1417      	asrs	r7, r2, #16
 8020132:	ea4f 4920 	mov.w	r9, r0, asr #16
 8020136:	fb0a 1707 	mla	r7, sl, r7, r1
 802013a:	9902      	ldr	r1, [sp, #8]
 802013c:	f817 7009 	ldrb.w	r7, [r7, r9]
 8020140:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8020144:	f828 7b02 	strh.w	r7, [r8], #2
 8020148:	4470      	add	r0, lr
 802014a:	4462      	add	r2, ip
 802014c:	3e01      	subs	r6, #1
 802014e:	e7ea      	b.n	8020126 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8020150:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020154:	d417      	bmi.n	8020186 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8020156:	68ae      	ldr	r6, [r5, #8]
 8020158:	454e      	cmp	r6, r9
 802015a:	dd14      	ble.n	8020186 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 802015c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8020160:	d411      	bmi.n	8020186 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8020162:	68ef      	ldr	r7, [r5, #12]
 8020164:	4557      	cmp	r7, sl
 8020166:	dd0e      	ble.n	8020186 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8020168:	9f01      	ldr	r7, [sp, #4]
 802016a:	b236      	sxth	r6, r6
 802016c:	fb0a 7606 	mla	r6, sl, r6, r7
 8020170:	9f02      	ldr	r7, [sp, #8]
 8020172:	f816 6009 	ldrb.w	r6, [r6, r9]
 8020176:	f06f 0101 	mvn.w	r1, #1
 802017a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 802017e:	fb01 f608 	mul.w	r6, r1, r8
 8020182:	9903      	ldr	r1, [sp, #12]
 8020184:	538f      	strh	r7, [r1, r6]
 8020186:	4470      	add	r0, lr
 8020188:	4462      	add	r2, ip
 802018a:	f108 38ff 	add.w	r8, r8, #4294967295
 802018e:	e782      	b.n	8020096 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020190:	b005      	add	sp, #20
 8020192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020196 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020196:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802019a:	b087      	sub	sp, #28
 802019c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802019e:	9205      	str	r2, [sp, #20]
 80201a0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80201a4:	9203      	str	r2, [sp, #12]
 80201a6:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 80201aa:	9102      	str	r1, [sp, #8]
 80201ac:	6861      	ldr	r1, [r4, #4]
 80201ae:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80201b2:	fb01 2000 	mla	r0, r1, r0, r2
 80201b6:	6822      	ldr	r2, [r4, #0]
 80201b8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80201bc:	9200      	str	r2, [sp, #0]
 80201be:	f8dc 2000 	ldr.w	r2, [ip]
 80201c2:	9204      	str	r2, [sp, #16]
 80201c4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80201c8:	3204      	adds	r2, #4
 80201ca:	9201      	str	r2, [sp, #4]
 80201cc:	9a03      	ldr	r2, [sp, #12]
 80201ce:	43d5      	mvns	r5, r2
 80201d0:	b2ed      	uxtb	r5, r5
 80201d2:	9a02      	ldr	r2, [sp, #8]
 80201d4:	2a00      	cmp	r2, #0
 80201d6:	dc03      	bgt.n	80201e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80201d8:	9a05      	ldr	r2, [sp, #20]
 80201da:	2a00      	cmp	r2, #0
 80201dc:	f340 812c 	ble.w	8020438 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80201e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80201e2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80201e6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80201ea:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80201ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80201f0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80201f4:	2b00      	cmp	r3, #0
 80201f6:	dd10      	ble.n	802021a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80201f8:	140c      	asrs	r4, r1, #16
 80201fa:	d405      	bmi.n	8020208 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80201fc:	4574      	cmp	r4, lr
 80201fe:	da03      	bge.n	8020208 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020200:	1414      	asrs	r4, r2, #16
 8020202:	d401      	bmi.n	8020208 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020204:	42bc      	cmp	r4, r7
 8020206:	db09      	blt.n	802021c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020208:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802020a:	9800      	ldr	r0, [sp, #0]
 802020c:	4421      	add	r1, r4
 802020e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020210:	3002      	adds	r0, #2
 8020212:	4422      	add	r2, r4
 8020214:	3b01      	subs	r3, #1
 8020216:	9000      	str	r0, [sp, #0]
 8020218:	e7ec      	b.n	80201f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802021a:	d071      	beq.n	8020300 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 802021c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 802021e:	1e5c      	subs	r4, r3, #1
 8020220:	fb06 1604 	mla	r6, r6, r4, r1
 8020224:	1436      	asrs	r6, r6, #16
 8020226:	d45d      	bmi.n	80202e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8020228:	4576      	cmp	r6, lr
 802022a:	da5b      	bge.n	80202e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802022c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 802022e:	fb06 2404 	mla	r4, r6, r4, r2
 8020232:	1424      	asrs	r4, r4, #16
 8020234:	d456      	bmi.n	80202e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8020236:	42bc      	cmp	r4, r7
 8020238:	da54      	bge.n	80202e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802023a:	f8dd 9000 	ldr.w	r9, [sp]
 802023e:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8020242:	4698      	mov	r8, r3
 8020244:	f1b8 0f00 	cmp.w	r8, #0
 8020248:	dd54      	ble.n	80202f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 802024a:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 802024e:	9804      	ldr	r0, [sp, #16]
 8020250:	1414      	asrs	r4, r2, #16
 8020252:	fb07 0404 	mla	r4, r7, r4, r0
 8020256:	140e      	asrs	r6, r1, #16
 8020258:	9801      	ldr	r0, [sp, #4]
 802025a:	f814 e006 	ldrb.w	lr, [r4, r6]
 802025e:	f8b9 4000 	ldrh.w	r4, [r9]
 8020262:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020266:	eb00 0b0e 	add.w	fp, r0, lr
 802026a:	1227      	asrs	r7, r4, #8
 802026c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8020270:	f89b b001 	ldrb.w	fp, [fp, #1]
 8020274:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8020278:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802027a:	fb16 f60a 	smulbb	r6, r6, sl
 802027e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020282:	fb07 6705 	mla	r7, r7, r5, r6
 8020286:	10e6      	asrs	r6, r4, #3
 8020288:	00e4      	lsls	r4, r4, #3
 802028a:	b2e4      	uxtb	r4, r4
 802028c:	fb1b fb0a 	smulbb	fp, fp, sl
 8020290:	fb14 f405 	smulbb	r4, r4, r5
 8020294:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020298:	b2bf      	uxth	r7, r7
 802029a:	fb06 b605 	mla	r6, r6, r5, fp
 802029e:	fb0e 4e0a 	mla	lr, lr, sl, r4
 80202a2:	b2b6      	uxth	r6, r6
 80202a4:	fa1f fe8e 	uxth.w	lr, lr
 80202a8:	1c7c      	adds	r4, r7, #1
 80202aa:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80202ae:	f106 0b01 	add.w	fp, r6, #1
 80202b2:	f10e 0401 	add.w	r4, lr, #1
 80202b6:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 80202ba:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80202be:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80202c2:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80202c6:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80202ca:	4327      	orrs	r7, r4
 80202cc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80202d0:	4401      	add	r1, r0
 80202d2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80202d4:	ea47 070b 	orr.w	r7, r7, fp
 80202d8:	f829 7b02 	strh.w	r7, [r9], #2
 80202dc:	4402      	add	r2, r0
 80202de:	f108 38ff 	add.w	r8, r8, #4294967295
 80202e2:	e7af      	b.n	8020244 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80202e4:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 80202e8:	f04f 0e00 	mov.w	lr, #0
 80202ec:	eb03 040e 	add.w	r4, r3, lr
 80202f0:	2c00      	cmp	r4, #0
 80202f2:	dc43      	bgt.n	802037c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80202f4:	9a00      	ldr	r2, [sp, #0]
 80202f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80202fa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80202fe:	9300      	str	r3, [sp, #0]
 8020300:	9b02      	ldr	r3, [sp, #8]
 8020302:	2b00      	cmp	r3, #0
 8020304:	f340 8098 	ble.w	8020438 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020308:	ee30 0a04 	vadd.f32	s0, s0, s8
 802030c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020310:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020316:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802031a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802031e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020322:	eef0 6a62 	vmov.f32	s13, s5
 8020326:	ee61 7a27 	vmul.f32	s15, s2, s15
 802032a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802032e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020332:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8020336:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802033a:	eef0 6a43 	vmov.f32	s13, s6
 802033e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020342:	ee12 2a90 	vmov	r2, s5
 8020346:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802034a:	fb92 f3f3 	sdiv	r3, r2, r3
 802034e:	ee13 2a10 	vmov	r2, s6
 8020352:	9313      	str	r3, [sp, #76]	; 0x4c
 8020354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020356:	fb92 f3f3 	sdiv	r3, r2, r3
 802035a:	9314      	str	r3, [sp, #80]	; 0x50
 802035c:	9b02      	ldr	r3, [sp, #8]
 802035e:	9a05      	ldr	r2, [sp, #20]
 8020360:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020364:	3b01      	subs	r3, #1
 8020366:	9302      	str	r3, [sp, #8]
 8020368:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 802036c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802036e:	eeb0 3a67 	vmov.f32	s6, s15
 8020372:	bf08      	it	eq
 8020374:	4613      	moveq	r3, r2
 8020376:	eef0 2a47 	vmov.f32	s5, s14
 802037a:	e72a      	b.n	80201d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802037c:	140f      	asrs	r7, r1, #16
 802037e:	d454      	bmi.n	802042a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8020380:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8020384:	42be      	cmp	r6, r7
 8020386:	dd50      	ble.n	802042a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8020388:	ea5f 4822 	movs.w	r8, r2, asr #16
 802038c:	d44d      	bmi.n	802042a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802038e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8020392:	4544      	cmp	r4, r8
 8020394:	dd49      	ble.n	802042a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8020396:	9c04      	ldr	r4, [sp, #16]
 8020398:	b236      	sxth	r6, r6
 802039a:	fb08 4606 	mla	r6, r8, r6, r4
 802039e:	f06f 0001 	mvn.w	r0, #1
 80203a2:	f816 8007 	ldrb.w	r8, [r6, r7]
 80203a6:	9c01      	ldr	r4, [sp, #4]
 80203a8:	fb00 fa0e 	mul.w	sl, r0, lr
 80203ac:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80203b0:	9800      	ldr	r0, [sp, #0]
 80203b2:	eb04 0b08 	add.w	fp, r4, r8
 80203b6:	f830 400a 	ldrh.w	r4, [r0, sl]
 80203ba:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80203be:	9801      	ldr	r0, [sp, #4]
 80203c0:	f89b b001 	ldrb.w	fp, [fp, #1]
 80203c4:	f810 8008 	ldrb.w	r8, [r0, r8]
 80203c8:	9800      	ldr	r0, [sp, #0]
 80203ca:	1227      	asrs	r7, r4, #8
 80203cc:	fb16 f609 	smulbb	r6, r6, r9
 80203d0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80203d4:	fb07 6705 	mla	r7, r7, r5, r6
 80203d8:	10e6      	asrs	r6, r4, #3
 80203da:	00e4      	lsls	r4, r4, #3
 80203dc:	b2e4      	uxtb	r4, r4
 80203de:	fb1b fb09 	smulbb	fp, fp, r9
 80203e2:	fb14 f405 	smulbb	r4, r4, r5
 80203e6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80203ea:	b2bf      	uxth	r7, r7
 80203ec:	fb06 b605 	mla	r6, r6, r5, fp
 80203f0:	fb08 4809 	mla	r8, r8, r9, r4
 80203f4:	b2b6      	uxth	r6, r6
 80203f6:	fa1f f888 	uxth.w	r8, r8
 80203fa:	1c7c      	adds	r4, r7, #1
 80203fc:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8020400:	f106 0b01 	add.w	fp, r6, #1
 8020404:	f108 0401 	add.w	r4, r8, #1
 8020408:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 802040c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8020410:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020414:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8020418:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 802041c:	4327      	orrs	r7, r4
 802041e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020422:	ea47 070b 	orr.w	r7, r7, fp
 8020426:	f820 700a 	strh.w	r7, [r0, sl]
 802042a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802042c:	4401      	add	r1, r0
 802042e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020430:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020434:	4402      	add	r2, r0
 8020436:	e759      	b.n	80202ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020438:	b007      	add	sp, #28
 802043a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020440 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020444:	b085      	sub	sp, #20
 8020446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802044a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 802044c:	9203      	str	r2, [sp, #12]
 802044e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020452:	6870      	ldr	r0, [r6, #4]
 8020454:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020456:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 802045a:	686f      	ldr	r7, [r5, #4]
 802045c:	9101      	str	r1, [sp, #4]
 802045e:	fb00 2404 	mla	r4, r0, r4, r2
 8020462:	6832      	ldr	r2, [r6, #0]
 8020464:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020468:	682a      	ldr	r2, [r5, #0]
 802046a:	9202      	str	r2, [sp, #8]
 802046c:	3704      	adds	r7, #4
 802046e:	9a01      	ldr	r2, [sp, #4]
 8020470:	2a00      	cmp	r2, #0
 8020472:	dc03      	bgt.n	802047c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020474:	9a03      	ldr	r2, [sp, #12]
 8020476:	2a00      	cmp	r2, #0
 8020478:	f340 80cc 	ble.w	8020614 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802047c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802047e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8020482:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8020486:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802048a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802048c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020490:	2b00      	cmp	r3, #0
 8020492:	dd0d      	ble.n	80204b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020494:	1406      	asrs	r6, r0, #16
 8020496:	d405      	bmi.n	80204a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020498:	454e      	cmp	r6, r9
 802049a:	da03      	bge.n	80204a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802049c:	1416      	asrs	r6, r2, #16
 802049e:	d401      	bmi.n	80204a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80204a0:	4546      	cmp	r6, r8
 80204a2:	db06      	blt.n	80204b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80204a4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80204a6:	4460      	add	r0, ip
 80204a8:	4432      	add	r2, r6
 80204aa:	3b01      	subs	r3, #1
 80204ac:	3402      	adds	r4, #2
 80204ae:	e7ef      	b.n	8020490 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80204b0:	d00f      	beq.n	80204d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80204b2:	1e5e      	subs	r6, r3, #1
 80204b4:	fb0c 0e06 	mla	lr, ip, r6, r0
 80204b8:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 80204bc:	d543      	bpl.n	8020546 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80204be:	4698      	mov	r8, r3
 80204c0:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 80204c4:	f1b8 0f00 	cmp.w	r8, #0
 80204c8:	dc71      	bgt.n	80205ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 80204ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80204ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80204d2:	9b01      	ldr	r3, [sp, #4]
 80204d4:	2b00      	cmp	r3, #0
 80204d6:	f340 809d 	ble.w	8020614 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80204da:	ee30 0a04 	vadd.f32	s0, s0, s8
 80204de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80204e2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80204e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80204e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80204ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80204f0:	eeb0 6a62 	vmov.f32	s12, s5
 80204f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80204f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80204fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020500:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020504:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020508:	eeb0 6a43 	vmov.f32	s12, s6
 802050c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020510:	ee12 2a90 	vmov	r2, s5
 8020514:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020518:	fb92 fcf3 	sdiv	ip, r2, r3
 802051c:	ee13 2a10 	vmov	r2, s6
 8020520:	fb92 f3f3 	sdiv	r3, r2, r3
 8020524:	9312      	str	r3, [sp, #72]	; 0x48
 8020526:	9b01      	ldr	r3, [sp, #4]
 8020528:	9a03      	ldr	r2, [sp, #12]
 802052a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802052e:	3b01      	subs	r3, #1
 8020530:	9301      	str	r3, [sp, #4]
 8020532:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020538:	eeb0 3a67 	vmov.f32	s6, s15
 802053c:	bf08      	it	eq
 802053e:	4613      	moveq	r3, r2
 8020540:	eef0 2a47 	vmov.f32	s5, s14
 8020544:	e793      	b.n	802046e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8020546:	45ce      	cmp	lr, r9
 8020548:	dab9      	bge.n	80204be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802054a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802054c:	fb01 2606 	mla	r6, r1, r6, r2
 8020550:	1436      	asrs	r6, r6, #16
 8020552:	d4b4      	bmi.n	80204be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020554:	4546      	cmp	r6, r8
 8020556:	dab2      	bge.n	80204be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020558:	4698      	mov	r8, r3
 802055a:	46a2      	mov	sl, r4
 802055c:	f1b8 0f00 	cmp.w	r8, #0
 8020560:	ddb3      	ble.n	80204ca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020562:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8020566:	9902      	ldr	r1, [sp, #8]
 8020568:	1416      	asrs	r6, r2, #16
 802056a:	fb09 1606 	mla	r6, r9, r6, r1
 802056e:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8020572:	492a      	ldr	r1, [pc, #168]	; (802061c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8020574:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8020578:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802057c:	eb07 0b0e 	add.w	fp, r7, lr
 8020580:	4460      	add	r0, ip
 8020582:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8020586:	f89b 9002 	ldrb.w	r9, [fp, #2]
 802058a:	00f6      	lsls	r6, r6, #3
 802058c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8020590:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020594:	ea49 0606 	orr.w	r6, r9, r6
 8020598:	f817 900e 	ldrb.w	r9, [r7, lr]
 802059c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802059e:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 80205a2:	f82a 6b02 	strh.w	r6, [sl], #2
 80205a6:	440a      	add	r2, r1
 80205a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80205ac:	e7d6      	b.n	802055c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80205ae:	ea5f 4920 	movs.w	r9, r0, asr #16
 80205b2:	d429      	bmi.n	8020608 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80205b4:	68ae      	ldr	r6, [r5, #8]
 80205b6:	454e      	cmp	r6, r9
 80205b8:	dd26      	ble.n	8020608 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80205ba:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80205be:	d423      	bmi.n	8020608 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80205c0:	68e9      	ldr	r1, [r5, #12]
 80205c2:	4559      	cmp	r1, fp
 80205c4:	dd20      	ble.n	8020608 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80205c6:	9902      	ldr	r1, [sp, #8]
 80205c8:	fa0f fe86 	sxth.w	lr, r6
 80205cc:	fb0b 1e0e 	mla	lr, fp, lr, r1
 80205d0:	f06f 0101 	mvn.w	r1, #1
 80205d4:	f81e e009 	ldrb.w	lr, [lr, r9]
 80205d8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80205dc:	eb07 060e 	add.w	r6, r7, lr
 80205e0:	fb01 f908 	mul.w	r9, r1, r8
 80205e4:	f896 b002 	ldrb.w	fp, [r6, #2]
 80205e8:	7876      	ldrb	r6, [r6, #1]
 80205ea:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 80205ee:	00f6      	lsls	r6, r6, #3
 80205f0:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 80205f4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80205f8:	ea4b 0606 	orr.w	r6, fp, r6
 80205fc:	f817 b00e 	ldrb.w	fp, [r7, lr]
 8020600:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8020604:	f82a 6009 	strh.w	r6, [sl, r9]
 8020608:	9912      	ldr	r1, [sp, #72]	; 0x48
 802060a:	4460      	add	r0, ip
 802060c:	440a      	add	r2, r1
 802060e:	f108 38ff 	add.w	r8, r8, #4294967295
 8020612:	e757      	b.n	80204c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020614:	b005      	add	sp, #20
 8020616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802061a:	bf00      	nop
 802061c:	fffff800 	.word	0xfffff800

08020620 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020624:	b087      	sub	sp, #28
 8020626:	468b      	mov	fp, r1
 8020628:	9815      	ldr	r0, [sp, #84]	; 0x54
 802062a:	9204      	str	r2, [sp, #16]
 802062c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020630:	9205      	str	r2, [sp, #20]
 8020632:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8020636:	6841      	ldr	r1, [r0, #4]
 8020638:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 802063c:	fb01 2404 	mla	r4, r1, r4, r2
 8020640:	6802      	ldr	r2, [r0, #0]
 8020642:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020646:	f8dc 2000 	ldr.w	r2, [ip]
 802064a:	9201      	str	r2, [sp, #4]
 802064c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8020650:	3204      	adds	r2, #4
 8020652:	9202      	str	r2, [sp, #8]
 8020654:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020658:	f1bb 0f00 	cmp.w	fp, #0
 802065c:	dc03      	bgt.n	8020666 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802065e:	9a04      	ldr	r2, [sp, #16]
 8020660:	2a00      	cmp	r2, #0
 8020662:	f340 8138 	ble.w	80208d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8020666:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020668:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 802066c:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8020670:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020674:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020676:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802067a:	2b00      	cmp	r3, #0
 802067c:	dd0e      	ble.n	802069c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802067e:	1402      	asrs	r2, r0, #16
 8020680:	d405      	bmi.n	802068e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020682:	42ba      	cmp	r2, r7
 8020684:	da03      	bge.n	802068e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020686:	140a      	asrs	r2, r1, #16
 8020688:	d401      	bmi.n	802068e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802068a:	42b2      	cmp	r2, r6
 802068c:	db07      	blt.n	802069e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802068e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020690:	4410      	add	r0, r2
 8020692:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020694:	3b01      	subs	r3, #1
 8020696:	4411      	add	r1, r2
 8020698:	3402      	adds	r4, #2
 802069a:	e7ee      	b.n	802067a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802069c:	d019      	beq.n	80206d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802069e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80206a0:	1e5a      	subs	r2, r3, #1
 80206a2:	fb05 0502 	mla	r5, r5, r2, r0
 80206a6:	142d      	asrs	r5, r5, #16
 80206a8:	d409      	bmi.n	80206be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80206aa:	42bd      	cmp	r5, r7
 80206ac:	da07      	bge.n	80206be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80206ae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80206b0:	fb05 1202 	mla	r2, r5, r2, r1
 80206b4:	1412      	asrs	r2, r2, #16
 80206b6:	d402      	bmi.n	80206be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80206b8:	42b2      	cmp	r2, r6
 80206ba:	f2c0 80ac 	blt.w	8020816 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80206be:	f04f 0e00 	mov.w	lr, #0
 80206c2:	eb03 020e 	add.w	r2, r3, lr
 80206c6:	2a00      	cmp	r2, #0
 80206c8:	dc3e      	bgt.n	8020748 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80206ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80206ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80206d2:	f1bb 0f00 	cmp.w	fp, #0
 80206d6:	f340 80fe 	ble.w	80208d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80206da:	ee30 0a04 	vadd.f32	s0, s0, s8
 80206de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80206e2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80206e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80206e8:	f1bb 0b01 	subs.w	fp, fp, #1
 80206ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 80206f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80206f4:	eeb0 6a62 	vmov.f32	s12, s5
 80206f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80206fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020700:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020704:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020708:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802070c:	eeb0 6a43 	vmov.f32	s12, s6
 8020710:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020714:	ee12 2a90 	vmov	r2, s5
 8020718:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802071c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020720:	ee13 2a10 	vmov	r2, s6
 8020724:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020728:	9313      	str	r3, [sp, #76]	; 0x4c
 802072a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802072c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020730:	9a04      	ldr	r2, [sp, #16]
 8020732:	9314      	str	r3, [sp, #80]	; 0x50
 8020734:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020738:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802073a:	eeb0 3a67 	vmov.f32	s6, s15
 802073e:	bf08      	it	eq
 8020740:	4613      	moveq	r3, r2
 8020742:	eef0 2a47 	vmov.f32	s5, s14
 8020746:	e787      	b.n	8020658 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020748:	1406      	asrs	r6, r0, #16
 802074a:	d45d      	bmi.n	8020808 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802074c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8020750:	42b5      	cmp	r5, r6
 8020752:	dd59      	ble.n	8020808 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020754:	140f      	asrs	r7, r1, #16
 8020756:	d457      	bmi.n	8020808 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020758:	f8dc 200c 	ldr.w	r2, [ip, #12]
 802075c:	42ba      	cmp	r2, r7
 802075e:	dd53      	ble.n	8020808 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020760:	9a01      	ldr	r2, [sp, #4]
 8020762:	b22d      	sxth	r5, r5
 8020764:	fb07 2505 	mla	r5, r7, r5, r2
 8020768:	5daa      	ldrb	r2, [r5, r6]
 802076a:	9d02      	ldr	r5, [sp, #8]
 802076c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8020770:	0e2e      	lsrs	r6, r5, #24
 8020772:	d049      	beq.n	8020808 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020774:	f06f 0201 	mvn.w	r2, #1
 8020778:	fb02 f20e 	mul.w	r2, r2, lr
 802077c:	9203      	str	r2, [sp, #12]
 802077e:	f834 8002 	ldrh.w	r8, [r4, r2]
 8020782:	9a05      	ldr	r2, [sp, #20]
 8020784:	4356      	muls	r6, r2
 8020786:	1c72      	adds	r2, r6, #1
 8020788:	eb02 2226 	add.w	r2, r2, r6, asr #8
 802078c:	1212      	asrs	r2, r2, #8
 802078e:	fa1f f982 	uxth.w	r9, r2
 8020792:	ea4f 2728 	mov.w	r7, r8, asr #8
 8020796:	f3c5 4607 	ubfx	r6, r5, #16, #8
 802079a:	43d2      	mvns	r2, r2
 802079c:	b2d2      	uxtb	r2, r2
 802079e:	fb16 f609 	smulbb	r6, r6, r9
 80207a2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80207a6:	fb07 6702 	mla	r7, r7, r2, r6
 80207aa:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80207ae:	ea4f 06e8 	mov.w	r6, r8, asr #3
 80207b2:	b2ed      	uxtb	r5, r5
 80207b4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80207b8:	fa5f f888 	uxtb.w	r8, r8
 80207bc:	fb15 f509 	smulbb	r5, r5, r9
 80207c0:	fb08 5502 	mla	r5, r8, r2, r5
 80207c4:	b2bf      	uxth	r7, r7
 80207c6:	fb1a fa09 	smulbb	sl, sl, r9
 80207ca:	b2ad      	uxth	r5, r5
 80207cc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80207d0:	fb06 a602 	mla	r6, r6, r2, sl
 80207d4:	1c7a      	adds	r2, r7, #1
 80207d6:	f105 0a01 	add.w	sl, r5, #1
 80207da:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80207de:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80207e2:	b2b6      	uxth	r6, r6
 80207e4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80207e8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80207ec:	ea4a 0707 	orr.w	r7, sl, r7
 80207f0:	f106 0a01 	add.w	sl, r6, #1
 80207f4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80207f8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80207fc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020800:	9a03      	ldr	r2, [sp, #12]
 8020802:	ea47 070a 	orr.w	r7, r7, sl
 8020806:	52a7      	strh	r7, [r4, r2]
 8020808:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802080a:	4410      	add	r0, r2
 802080c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802080e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020812:	4411      	add	r1, r2
 8020814:	e755      	b.n	80206c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020816:	f04f 0800 	mov.w	r8, #0
 802081a:	eba3 0208 	sub.w	r2, r3, r8
 802081e:	2a00      	cmp	r2, #0
 8020820:	f77f af53 	ble.w	80206ca <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8020824:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8020828:	9f01      	ldr	r7, [sp, #4]
 802082a:	140a      	asrs	r2, r1, #16
 802082c:	1405      	asrs	r5, r0, #16
 802082e:	fb06 7202 	mla	r2, r6, r2, r7
 8020832:	5d52      	ldrb	r2, [r2, r5]
 8020834:	9d02      	ldr	r5, [sp, #8]
 8020836:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 802083a:	0e2e      	lsrs	r6, r5, #24
 802083c:	d044      	beq.n	80208c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802083e:	9a05      	ldr	r2, [sp, #20]
 8020840:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8020844:	4356      	muls	r6, r2
 8020846:	1c72      	adds	r2, r6, #1
 8020848:	eb02 2226 	add.w	r2, r2, r6, asr #8
 802084c:	1212      	asrs	r2, r2, #8
 802084e:	fa1f f982 	uxth.w	r9, r2
 8020852:	ea4f 272e 	mov.w	r7, lr, asr #8
 8020856:	f3c5 4607 	ubfx	r6, r5, #16, #8
 802085a:	43d2      	mvns	r2, r2
 802085c:	b2d2      	uxtb	r2, r2
 802085e:	fb16 f609 	smulbb	r6, r6, r9
 8020862:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020866:	fb07 6702 	mla	r7, r7, r2, r6
 802086a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 802086e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8020872:	b2ed      	uxtb	r5, r5
 8020874:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020878:	fa5f fe8e 	uxtb.w	lr, lr
 802087c:	fb15 f509 	smulbb	r5, r5, r9
 8020880:	fb0e 5502 	mla	r5, lr, r2, r5
 8020884:	b2bf      	uxth	r7, r7
 8020886:	fb1a fa09 	smulbb	sl, sl, r9
 802088a:	b2ad      	uxth	r5, r5
 802088c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020890:	fb06 a602 	mla	r6, r6, r2, sl
 8020894:	1c7a      	adds	r2, r7, #1
 8020896:	f105 0a01 	add.w	sl, r5, #1
 802089a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802089e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80208a2:	b2b6      	uxth	r6, r6
 80208a4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80208a8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80208ac:	ea4a 0707 	orr.w	r7, sl, r7
 80208b0:	f106 0a01 	add.w	sl, r6, #1
 80208b4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80208b8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80208bc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80208c0:	ea47 070a 	orr.w	r7, r7, sl
 80208c4:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80208c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80208ca:	4410      	add	r0, r2
 80208cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80208ce:	f108 0801 	add.w	r8, r8, #1
 80208d2:	4411      	add	r1, r2
 80208d4:	e7a1      	b.n	802081a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80208d6:	b007      	add	sp, #28
 80208d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080208dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80208dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208e0:	b085      	sub	sp, #20
 80208e2:	468b      	mov	fp, r1
 80208e4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80208e6:	9203      	str	r2, [sp, #12]
 80208e8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80208ec:	6841      	ldr	r1, [r0, #4]
 80208ee:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80208f2:	fb01 2404 	mla	r4, r1, r4, r2
 80208f6:	6802      	ldr	r2, [r0, #0]
 80208f8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80208fc:	f8de 2000 	ldr.w	r2, [lr]
 8020900:	9200      	str	r2, [sp, #0]
 8020902:	f8de 2004 	ldr.w	r2, [lr, #4]
 8020906:	3204      	adds	r2, #4
 8020908:	9201      	str	r2, [sp, #4]
 802090a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802090e:	f1bb 0f00 	cmp.w	fp, #0
 8020912:	dc03      	bgt.n	802091c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020914:	9a03      	ldr	r2, [sp, #12]
 8020916:	2a00      	cmp	r2, #0
 8020918:	f340 8153 	ble.w	8020bc2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 802091c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802091e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8020922:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8020926:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802092a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802092c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020930:	2b00      	cmp	r3, #0
 8020932:	dd0e      	ble.n	8020952 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020934:	1408      	asrs	r0, r1, #16
 8020936:	d405      	bmi.n	8020944 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020938:	42b8      	cmp	r0, r7
 802093a:	da03      	bge.n	8020944 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802093c:	1410      	asrs	r0, r2, #16
 802093e:	d401      	bmi.n	8020944 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020940:	42b0      	cmp	r0, r6
 8020942:	db07      	blt.n	8020954 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020944:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020946:	4401      	add	r1, r0
 8020948:	9812      	ldr	r0, [sp, #72]	; 0x48
 802094a:	3b01      	subs	r3, #1
 802094c:	4402      	add	r2, r0
 802094e:	3402      	adds	r4, #2
 8020950:	e7ee      	b.n	8020930 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8020952:	d017      	beq.n	8020984 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020954:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020956:	1e58      	subs	r0, r3, #1
 8020958:	fb05 1500 	mla	r5, r5, r0, r1
 802095c:	142d      	asrs	r5, r5, #16
 802095e:	d409      	bmi.n	8020974 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020960:	42bd      	cmp	r5, r7
 8020962:	da07      	bge.n	8020974 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020964:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020966:	fb05 2000 	mla	r0, r5, r0, r2
 802096a:	1400      	asrs	r0, r0, #16
 802096c:	d402      	bmi.n	8020974 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802096e:	42b0      	cmp	r0, r6
 8020970:	f2c0 80bc 	blt.w	8020aec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8020974:	2600      	movs	r6, #0
 8020976:	1998      	adds	r0, r3, r6
 8020978:	2800      	cmp	r0, #0
 802097a:	dc3e      	bgt.n	80209fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802097c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020980:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020984:	f1bb 0f00 	cmp.w	fp, #0
 8020988:	f340 811b 	ble.w	8020bc2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 802098c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020990:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020994:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802099a:	f1bb 0b01 	subs.w	fp, fp, #1
 802099e:	ee31 1a05 	vadd.f32	s2, s2, s10
 80209a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80209a6:	eeb0 6a62 	vmov.f32	s12, s5
 80209aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80209ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80209b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80209b6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80209ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80209be:	eeb0 6a43 	vmov.f32	s12, s6
 80209c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80209c6:	ee12 2a90 	vmov	r2, s5
 80209ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80209ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80209d2:	ee13 2a10 	vmov	r2, s6
 80209d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80209da:	9311      	str	r3, [sp, #68]	; 0x44
 80209dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80209de:	fb92 f3f3 	sdiv	r3, r2, r3
 80209e2:	9a03      	ldr	r2, [sp, #12]
 80209e4:	9312      	str	r3, [sp, #72]	; 0x48
 80209e6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80209ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80209ec:	eeb0 3a67 	vmov.f32	s6, s15
 80209f0:	bf08      	it	eq
 80209f2:	4613      	moveq	r3, r2
 80209f4:	eef0 2a47 	vmov.f32	s5, s14
 80209f8:	e789      	b.n	802090e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80209fa:	140f      	asrs	r7, r1, #16
 80209fc:	d426      	bmi.n	8020a4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80209fe:	f8de 5008 	ldr.w	r5, [lr, #8]
 8020a02:	42bd      	cmp	r5, r7
 8020a04:	dd22      	ble.n	8020a4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020a06:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020a0a:	d41f      	bmi.n	8020a4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020a0c:	f8de 000c 	ldr.w	r0, [lr, #12]
 8020a10:	4560      	cmp	r0, ip
 8020a12:	dd1b      	ble.n	8020a4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020a14:	9800      	ldr	r0, [sp, #0]
 8020a16:	b22d      	sxth	r5, r5
 8020a18:	fb0c 0505 	mla	r5, ip, r5, r0
 8020a1c:	5de8      	ldrb	r0, [r5, r7]
 8020a1e:	9d01      	ldr	r5, [sp, #4]
 8020a20:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8020a24:	0e07      	lsrs	r7, r0, #24
 8020a26:	2fff      	cmp	r7, #255	; 0xff
 8020a28:	d116      	bne.n	8020a58 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020a2a:	f06f 0501 	mvn.w	r5, #1
 8020a2e:	fb05 f706 	mul.w	r7, r5, r6
 8020a32:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8020a36:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8020a3a:	0945      	lsrs	r5, r0, #5
 8020a3c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020a40:	ea4c 0505 	orr.w	r5, ip, r5
 8020a44:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020a48:	4305      	orrs	r5, r0
 8020a4a:	53e5      	strh	r5, [r4, r7]
 8020a4c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020a4e:	4401      	add	r1, r0
 8020a50:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020a52:	3e01      	subs	r6, #1
 8020a54:	4402      	add	r2, r0
 8020a56:	e78e      	b.n	8020976 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8020a58:	b2fd      	uxtb	r5, r7
 8020a5a:	2f00      	cmp	r7, #0
 8020a5c:	d0f6      	beq.n	8020a4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020a5e:	f06f 0701 	mvn.w	r7, #1
 8020a62:	4377      	muls	r7, r6
 8020a64:	fa1f f985 	uxth.w	r9, r5
 8020a68:	f834 8007 	ldrh.w	r8, [r4, r7]
 8020a6c:	9702      	str	r7, [sp, #8]
 8020a6e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8020a72:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8020a76:	43ed      	mvns	r5, r5
 8020a78:	b2ed      	uxtb	r5, r5
 8020a7a:	fb17 f709 	smulbb	r7, r7, r9
 8020a7e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020a82:	fb0c 7c05 	mla	ip, ip, r5, r7
 8020a86:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020a8a:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8020a8e:	b2c0      	uxtb	r0, r0
 8020a90:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020a94:	fa5f f888 	uxtb.w	r8, r8
 8020a98:	fb10 f009 	smulbb	r0, r0, r9
 8020a9c:	fb08 0005 	mla	r0, r8, r5, r0
 8020aa0:	b280      	uxth	r0, r0
 8020aa2:	fa1f fc8c 	uxth.w	ip, ip
 8020aa6:	fb1a fa09 	smulbb	sl, sl, r9
 8020aaa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020aae:	fb07 a705 	mla	r7, r7, r5, sl
 8020ab2:	f100 0a01 	add.w	sl, r0, #1
 8020ab6:	f10c 0501 	add.w	r5, ip, #1
 8020aba:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8020abe:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020ac2:	b2bf      	uxth	r7, r7
 8020ac4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020ac8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020acc:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020ad0:	f107 0a01 	add.w	sl, r7, #1
 8020ad4:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020ad8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020adc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020ae0:	9802      	ldr	r0, [sp, #8]
 8020ae2:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020ae6:	f824 c000 	strh.w	ip, [r4, r0]
 8020aea:	e7af      	b.n	8020a4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020aec:	f04f 0800 	mov.w	r8, #0
 8020af0:	eba3 0008 	sub.w	r0, r3, r8
 8020af4:	2800      	cmp	r0, #0
 8020af6:	f77f af41 	ble.w	802097c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020afa:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8020afe:	9f00      	ldr	r7, [sp, #0]
 8020b00:	1410      	asrs	r0, r2, #16
 8020b02:	140d      	asrs	r5, r1, #16
 8020b04:	fb06 7000 	mla	r0, r6, r0, r7
 8020b08:	5d40      	ldrb	r0, [r0, r5]
 8020b0a:	9d01      	ldr	r5, [sp, #4]
 8020b0c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8020b10:	0e2e      	lsrs	r6, r5, #24
 8020b12:	2eff      	cmp	r6, #255	; 0xff
 8020b14:	d112      	bne.n	8020b3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8020b16:	482c      	ldr	r0, [pc, #176]	; (8020bc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8020b18:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8020b1c:	0968      	lsrs	r0, r5, #5
 8020b1e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020b22:	4330      	orrs	r0, r6
 8020b24:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020b28:	4328      	orrs	r0, r5
 8020b2a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8020b2e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020b30:	4401      	add	r1, r0
 8020b32:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020b34:	f108 0801 	add.w	r8, r8, #1
 8020b38:	4402      	add	r2, r0
 8020b3a:	e7d9      	b.n	8020af0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020b3c:	b2f0      	uxtb	r0, r6
 8020b3e:	2e00      	cmp	r6, #0
 8020b40:	d0f5      	beq.n	8020b2e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8020b42:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8020b46:	fa1f f980 	uxth.w	r9, r0
 8020b4a:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020b4e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020b52:	43c0      	mvns	r0, r0
 8020b54:	b2c0      	uxtb	r0, r0
 8020b56:	fb16 f609 	smulbb	r6, r6, r9
 8020b5a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020b5e:	fb07 6700 	mla	r7, r7, r0, r6
 8020b62:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020b66:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020b6a:	b2ed      	uxtb	r5, r5
 8020b6c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020b70:	fa5f fc8c 	uxtb.w	ip, ip
 8020b74:	fb15 f509 	smulbb	r5, r5, r9
 8020b78:	fb0c 5500 	mla	r5, ip, r0, r5
 8020b7c:	b2bf      	uxth	r7, r7
 8020b7e:	fb1a fa09 	smulbb	sl, sl, r9
 8020b82:	b2ad      	uxth	r5, r5
 8020b84:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020b88:	fb06 a600 	mla	r6, r6, r0, sl
 8020b8c:	1c78      	adds	r0, r7, #1
 8020b8e:	f105 0a01 	add.w	sl, r5, #1
 8020b92:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8020b96:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020b9a:	b2b6      	uxth	r6, r6
 8020b9c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020ba0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020ba4:	ea4a 0707 	orr.w	r7, sl, r7
 8020ba8:	f106 0a01 	add.w	sl, r6, #1
 8020bac:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020bb0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020bb4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020bb8:	ea47 070a 	orr.w	r7, r7, sl
 8020bbc:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8020bc0:	e7b5      	b.n	8020b2e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8020bc2:	b005      	add	sp, #20
 8020bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bc8:	fffff800 	.word	0xfffff800

08020bcc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bd0:	b087      	sub	sp, #28
 8020bd2:	468b      	mov	fp, r1
 8020bd4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020bd6:	9204      	str	r2, [sp, #16]
 8020bd8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020bdc:	9205      	str	r2, [sp, #20]
 8020bde:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8020be2:	6861      	ldr	r1, [r4, #4]
 8020be4:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8020be8:	fb01 2000 	mla	r0, r1, r0, r2
 8020bec:	6822      	ldr	r2, [r4, #0]
 8020bee:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8020bf2:	f8de 2000 	ldr.w	r2, [lr]
 8020bf6:	9201      	str	r2, [sp, #4]
 8020bf8:	f8de 2004 	ldr.w	r2, [lr, #4]
 8020bfc:	9202      	str	r2, [sp, #8]
 8020bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020c02:	f1bb 0f00 	cmp.w	fp, #0
 8020c06:	dc03      	bgt.n	8020c10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8020c08:	9a04      	ldr	r2, [sp, #16]
 8020c0a:	2a00      	cmp	r2, #0
 8020c0c:	f340 8142 	ble.w	8020e94 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8020c10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020c12:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8020c16:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8020c1a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020c1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020c20:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020c24:	2b00      	cmp	r3, #0
 8020c26:	dd0e      	ble.n	8020c46 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020c28:	140c      	asrs	r4, r1, #16
 8020c2a:	d405      	bmi.n	8020c38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020c2c:	42bc      	cmp	r4, r7
 8020c2e:	da03      	bge.n	8020c38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020c30:	1414      	asrs	r4, r2, #16
 8020c32:	d401      	bmi.n	8020c38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020c34:	42b4      	cmp	r4, r6
 8020c36:	db07      	blt.n	8020c48 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020c38:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020c3a:	4421      	add	r1, r4
 8020c3c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020c3e:	3b01      	subs	r3, #1
 8020c40:	4422      	add	r2, r4
 8020c42:	3002      	adds	r0, #2
 8020c44:	e7ee      	b.n	8020c24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020c46:	d019      	beq.n	8020c7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020c48:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020c4a:	1e5c      	subs	r4, r3, #1
 8020c4c:	fb05 1504 	mla	r5, r5, r4, r1
 8020c50:	142d      	asrs	r5, r5, #16
 8020c52:	d409      	bmi.n	8020c68 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020c54:	42bd      	cmp	r5, r7
 8020c56:	da07      	bge.n	8020c68 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020c58:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020c5a:	fb05 2404 	mla	r4, r5, r4, r2
 8020c5e:	1424      	asrs	r4, r4, #16
 8020c60:	d402      	bmi.n	8020c68 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020c62:	42b4      	cmp	r4, r6
 8020c64:	f2c0 80b1 	blt.w	8020dca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8020c68:	f04f 0800 	mov.w	r8, #0
 8020c6c:	eb03 0408 	add.w	r4, r3, r8
 8020c70:	2c00      	cmp	r4, #0
 8020c72:	dc3e      	bgt.n	8020cf2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020c74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020c78:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020c7c:	f1bb 0f00 	cmp.w	fp, #0
 8020c80:	f340 8108 	ble.w	8020e94 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8020c84:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020c88:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020c8c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020c90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020c92:	f1bb 0b01 	subs.w	fp, fp, #1
 8020c96:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020c9a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020c9e:	eeb0 6a62 	vmov.f32	s12, s5
 8020ca2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020ca6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020caa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020cae:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020cb2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020cb6:	eeb0 6a43 	vmov.f32	s12, s6
 8020cba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020cbe:	ee12 2a90 	vmov	r2, s5
 8020cc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020cc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8020cca:	ee13 2a10 	vmov	r2, s6
 8020cce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020cd2:	9313      	str	r3, [sp, #76]	; 0x4c
 8020cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020cd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8020cda:	9a04      	ldr	r2, [sp, #16]
 8020cdc:	9314      	str	r3, [sp, #80]	; 0x50
 8020cde:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020ce2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020ce4:	eeb0 3a67 	vmov.f32	s6, s15
 8020ce8:	bf08      	it	eq
 8020cea:	4613      	moveq	r3, r2
 8020cec:	eef0 2a47 	vmov.f32	s5, s14
 8020cf0:	e787      	b.n	8020c02 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8020cf2:	140e      	asrs	r6, r1, #16
 8020cf4:	d462      	bmi.n	8020dbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020cf6:	f8de 5008 	ldr.w	r5, [lr, #8]
 8020cfa:	42b5      	cmp	r5, r6
 8020cfc:	dd5e      	ble.n	8020dbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020cfe:	1417      	asrs	r7, r2, #16
 8020d00:	d45c      	bmi.n	8020dbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020d02:	f8de 400c 	ldr.w	r4, [lr, #12]
 8020d06:	42bc      	cmp	r4, r7
 8020d08:	dd58      	ble.n	8020dbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020d0a:	b22d      	sxth	r5, r5
 8020d0c:	fb07 6505 	mla	r5, r7, r5, r6
 8020d10:	9c02      	ldr	r4, [sp, #8]
 8020d12:	5d66      	ldrb	r6, [r4, r5]
 8020d14:	2e00      	cmp	r6, #0
 8020d16:	d051      	beq.n	8020dbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020d18:	9c01      	ldr	r4, [sp, #4]
 8020d1a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8020d1e:	f06f 0401 	mvn.w	r4, #1
 8020d22:	fb04 f408 	mul.w	r4, r4, r8
 8020d26:	9403      	str	r4, [sp, #12]
 8020d28:	5b05      	ldrh	r5, [r0, r4]
 8020d2a:	9c05      	ldr	r4, [sp, #20]
 8020d2c:	4366      	muls	r6, r4
 8020d2e:	1c74      	adds	r4, r6, #1
 8020d30:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8020d34:	1224      	asrs	r4, r4, #8
 8020d36:	b2a7      	uxth	r7, r4
 8020d38:	122e      	asrs	r6, r5, #8
 8020d3a:	43e4      	mvns	r4, r4
 8020d3c:	b2e4      	uxtb	r4, r4
 8020d3e:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8020d42:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020d46:	fb16 f604 	smulbb	r6, r6, r4
 8020d4a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020d4e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020d52:	00ed      	lsls	r5, r5, #3
 8020d54:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020d58:	b2ed      	uxtb	r5, r5
 8020d5a:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8020d5e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8020d62:	fb15 f504 	smulbb	r5, r5, r4
 8020d66:	fa5f f989 	uxtb.w	r9, r9
 8020d6a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020d6e:	fb09 5507 	mla	r5, r9, r7, r5
 8020d72:	fb1a fa04 	smulbb	sl, sl, r4
 8020d76:	fa1f fc8c 	uxth.w	ip, ip
 8020d7a:	b2ad      	uxth	r5, r5
 8020d7c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020d80:	fb06 a607 	mla	r6, r6, r7, sl
 8020d84:	f10c 0401 	add.w	r4, ip, #1
 8020d88:	f105 0a01 	add.w	sl, r5, #1
 8020d8c:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8020d90:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020d94:	b2b6      	uxth	r6, r6
 8020d96:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020d9a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020d9e:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020da2:	f106 0a01 	add.w	sl, r6, #1
 8020da6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020daa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020dae:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020db2:	9c03      	ldr	r4, [sp, #12]
 8020db4:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020db8:	f820 c004 	strh.w	ip, [r0, r4]
 8020dbc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020dbe:	4421      	add	r1, r4
 8020dc0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020dc2:	f108 38ff 	add.w	r8, r8, #4294967295
 8020dc6:	4422      	add	r2, r4
 8020dc8:	e750      	b.n	8020c6c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020dca:	f04f 0900 	mov.w	r9, #0
 8020dce:	eba3 0409 	sub.w	r4, r3, r9
 8020dd2:	2c00      	cmp	r4, #0
 8020dd4:	f77f af4e 	ble.w	8020c74 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020dd8:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8020ddc:	140d      	asrs	r5, r1, #16
 8020dde:	1414      	asrs	r4, r2, #16
 8020de0:	fb06 5404 	mla	r4, r6, r4, r5
 8020de4:	9d02      	ldr	r5, [sp, #8]
 8020de6:	5d2e      	ldrb	r6, [r5, r4]
 8020de8:	2e00      	cmp	r6, #0
 8020dea:	d04c      	beq.n	8020e86 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8020dec:	9d01      	ldr	r5, [sp, #4]
 8020dee:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8020df2:	9c05      	ldr	r4, [sp, #20]
 8020df4:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8020df8:	4366      	muls	r6, r4
 8020dfa:	1c74      	adds	r4, r6, #1
 8020dfc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8020e00:	1224      	asrs	r4, r4, #8
 8020e02:	b2a7      	uxth	r7, r4
 8020e04:	122e      	asrs	r6, r5, #8
 8020e06:	43e4      	mvns	r4, r4
 8020e08:	b2e4      	uxtb	r4, r4
 8020e0a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8020e0e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020e12:	fb16 f604 	smulbb	r6, r6, r4
 8020e16:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020e1a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020e1e:	00ed      	lsls	r5, r5, #3
 8020e20:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020e24:	b2ed      	uxtb	r5, r5
 8020e26:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8020e2a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020e2e:	fb15 f504 	smulbb	r5, r5, r4
 8020e32:	fa5f f888 	uxtb.w	r8, r8
 8020e36:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020e3a:	fb08 5507 	mla	r5, r8, r7, r5
 8020e3e:	fb1a fa04 	smulbb	sl, sl, r4
 8020e42:	fa1f fc8c 	uxth.w	ip, ip
 8020e46:	b2ad      	uxth	r5, r5
 8020e48:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020e4c:	fb06 a607 	mla	r6, r6, r7, sl
 8020e50:	f10c 0401 	add.w	r4, ip, #1
 8020e54:	f105 0a01 	add.w	sl, r5, #1
 8020e58:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8020e5c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020e60:	b2b6      	uxth	r6, r6
 8020e62:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020e66:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020e6a:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020e6e:	f106 0a01 	add.w	sl, r6, #1
 8020e72:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020e76:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020e7a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020e7e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020e82:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8020e86:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020e88:	4421      	add	r1, r4
 8020e8a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020e8c:	f109 0901 	add.w	r9, r9, #1
 8020e90:	4422      	add	r2, r4
 8020e92:	e79c      	b.n	8020dce <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8020e94:	b007      	add	sp, #28
 8020e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020e9a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020e9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e9e:	b085      	sub	sp, #20
 8020ea0:	468b      	mov	fp, r1
 8020ea2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020ea4:	9203      	str	r2, [sp, #12]
 8020ea6:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8020eaa:	6861      	ldr	r1, [r4, #4]
 8020eac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8020eb0:	fb01 2000 	mla	r0, r1, r0, r2
 8020eb4:	6822      	ldr	r2, [r4, #0]
 8020eb6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8020eba:	f8d8 2000 	ldr.w	r2, [r8]
 8020ebe:	9200      	str	r2, [sp, #0]
 8020ec0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8020ec4:	9201      	str	r2, [sp, #4]
 8020ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020eca:	f1bb 0f00 	cmp.w	fp, #0
 8020ece:	dc03      	bgt.n	8020ed8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020ed0:	9a03      	ldr	r2, [sp, #12]
 8020ed2:	2a00      	cmp	r2, #0
 8020ed4:	f340 8146 	ble.w	8021164 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8020ed8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020eda:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8020ede:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8020ee2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020ee6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020ee8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	dd0e      	ble.n	8020f0e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020ef0:	140c      	asrs	r4, r1, #16
 8020ef2:	d405      	bmi.n	8020f00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020ef4:	42bc      	cmp	r4, r7
 8020ef6:	da03      	bge.n	8020f00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020ef8:	1414      	asrs	r4, r2, #16
 8020efa:	d401      	bmi.n	8020f00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020efc:	42b4      	cmp	r4, r6
 8020efe:	db07      	blt.n	8020f10 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020f00:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020f02:	4421      	add	r1, r4
 8020f04:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020f06:	3b01      	subs	r3, #1
 8020f08:	4422      	add	r2, r4
 8020f0a:	3002      	adds	r0, #2
 8020f0c:	e7ee      	b.n	8020eec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020f0e:	d017      	beq.n	8020f40 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020f10:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020f12:	1e5c      	subs	r4, r3, #1
 8020f14:	fb05 1504 	mla	r5, r5, r4, r1
 8020f18:	142d      	asrs	r5, r5, #16
 8020f1a:	d409      	bmi.n	8020f30 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020f1c:	42bd      	cmp	r5, r7
 8020f1e:	da07      	bge.n	8020f30 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020f20:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020f22:	fb05 2404 	mla	r4, r5, r4, r2
 8020f26:	1424      	asrs	r4, r4, #16
 8020f28:	d402      	bmi.n	8020f30 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020f2a:	42b4      	cmp	r4, r6
 8020f2c:	f2c0 80b3 	blt.w	8021096 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8020f30:	2600      	movs	r6, #0
 8020f32:	199c      	adds	r4, r3, r6
 8020f34:	2c00      	cmp	r4, #0
 8020f36:	dc3e      	bgt.n	8020fb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020f38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020f3c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020f40:	f1bb 0f00 	cmp.w	fp, #0
 8020f44:	f340 810e 	ble.w	8021164 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8020f48:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020f4c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020f50:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020f54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020f56:	f1bb 0b01 	subs.w	fp, fp, #1
 8020f5a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020f5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020f62:	eeb0 6a62 	vmov.f32	s12, s5
 8020f66:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020f6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020f6e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020f72:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020f76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020f7a:	eeb0 6a43 	vmov.f32	s12, s6
 8020f7e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020f82:	ee12 2a90 	vmov	r2, s5
 8020f86:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020f8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f8e:	ee13 2a10 	vmov	r2, s6
 8020f92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020f96:	9311      	str	r3, [sp, #68]	; 0x44
 8020f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020f9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f9e:	9a03      	ldr	r2, [sp, #12]
 8020fa0:	9312      	str	r3, [sp, #72]	; 0x48
 8020fa2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020fa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020fa8:	eeb0 3a67 	vmov.f32	s6, s15
 8020fac:	bf08      	it	eq
 8020fae:	4613      	moveq	r3, r2
 8020fb0:	eef0 2a47 	vmov.f32	s5, s14
 8020fb4:	e789      	b.n	8020eca <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020fb6:	140f      	asrs	r7, r1, #16
 8020fb8:	d418      	bmi.n	8020fec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020fba:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8020fbe:	42bd      	cmp	r5, r7
 8020fc0:	dd14      	ble.n	8020fec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020fc2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020fc6:	d411      	bmi.n	8020fec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020fc8:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8020fcc:	4564      	cmp	r4, ip
 8020fce:	dd0d      	ble.n	8020fec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020fd0:	b22d      	sxth	r5, r5
 8020fd2:	fb0c 7505 	mla	r5, ip, r5, r7
 8020fd6:	9c01      	ldr	r4, [sp, #4]
 8020fd8:	5d64      	ldrb	r4, [r4, r5]
 8020fda:	2cff      	cmp	r4, #255	; 0xff
 8020fdc:	d10c      	bne.n	8020ff8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8020fde:	9c00      	ldr	r4, [sp, #0]
 8020fe0:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8020fe4:	f06f 0401 	mvn.w	r4, #1
 8020fe8:	4374      	muls	r4, r6
 8020fea:	5305      	strh	r5, [r0, r4]
 8020fec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020fee:	4421      	add	r1, r4
 8020ff0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020ff2:	3e01      	subs	r6, #1
 8020ff4:	4422      	add	r2, r4
 8020ff6:	e79c      	b.n	8020f32 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020ff8:	2c00      	cmp	r4, #0
 8020ffa:	d0f7      	beq.n	8020fec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020ffc:	9f00      	ldr	r7, [sp, #0]
 8020ffe:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8021002:	f06f 0501 	mvn.w	r5, #1
 8021006:	4375      	muls	r5, r6
 8021008:	9502      	str	r5, [sp, #8]
 802100a:	5b45      	ldrh	r5, [r0, r5]
 802100c:	fa1f fc84 	uxth.w	ip, r4
 8021010:	122f      	asrs	r7, r5, #8
 8021012:	43e4      	mvns	r4, r4
 8021014:	b2e4      	uxtb	r4, r4
 8021016:	ea4f 2e29 	mov.w	lr, r9, asr #8
 802101a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802101e:	fb17 f704 	smulbb	r7, r7, r4
 8021022:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8021026:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802102a:	00ed      	lsls	r5, r5, #3
 802102c:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8021030:	b2ed      	uxtb	r5, r5
 8021032:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8021036:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 802103a:	fb15 f504 	smulbb	r5, r5, r4
 802103e:	fa5f f989 	uxtb.w	r9, r9
 8021042:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8021046:	fb09 550c 	mla	r5, r9, ip, r5
 802104a:	fb1a fa04 	smulbb	sl, sl, r4
 802104e:	fa1f fe8e 	uxth.w	lr, lr
 8021052:	b2ad      	uxth	r5, r5
 8021054:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021058:	fb07 a70c 	mla	r7, r7, ip, sl
 802105c:	f10e 0401 	add.w	r4, lr, #1
 8021060:	f105 0a01 	add.w	sl, r5, #1
 8021064:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8021068:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802106c:	b2bf      	uxth	r7, r7
 802106e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021072:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8021076:	ea4a 0e0e 	orr.w	lr, sl, lr
 802107a:	f107 0a01 	add.w	sl, r7, #1
 802107e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8021082:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021086:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802108a:	9c02      	ldr	r4, [sp, #8]
 802108c:	ea4e 0e0a 	orr.w	lr, lr, sl
 8021090:	f820 e004 	strh.w	lr, [r0, r4]
 8021094:	e7aa      	b.n	8020fec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021096:	f04f 0900 	mov.w	r9, #0
 802109a:	eba3 0409 	sub.w	r4, r3, r9
 802109e:	2c00      	cmp	r4, #0
 80210a0:	f77f af4a 	ble.w	8020f38 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80210a4:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80210a8:	1414      	asrs	r4, r2, #16
 80210aa:	140d      	asrs	r5, r1, #16
 80210ac:	fb06 5504 	mla	r5, r6, r4, r5
 80210b0:	9c01      	ldr	r4, [sp, #4]
 80210b2:	5d64      	ldrb	r4, [r4, r5]
 80210b4:	2cff      	cmp	r4, #255	; 0xff
 80210b6:	d10b      	bne.n	80210d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80210b8:	9c00      	ldr	r4, [sp, #0]
 80210ba:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 80210be:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 80210c2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80210c4:	4421      	add	r1, r4
 80210c6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80210c8:	f109 0901 	add.w	r9, r9, #1
 80210cc:	4422      	add	r2, r4
 80210ce:	e7e4      	b.n	802109a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80210d0:	2c00      	cmp	r4, #0
 80210d2:	d0f6      	beq.n	80210c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80210d4:	9e00      	ldr	r6, [sp, #0]
 80210d6:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 80210da:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 80210de:	b2a7      	uxth	r7, r4
 80210e0:	122e      	asrs	r6, r5, #8
 80210e2:	43e4      	mvns	r4, r4
 80210e4:	b2e4      	uxtb	r4, r4
 80210e6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80210ea:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80210ee:	fb16 f604 	smulbb	r6, r6, r4
 80210f2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80210f6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80210fa:	00ed      	lsls	r5, r5, #3
 80210fc:	fb0c 6c07 	mla	ip, ip, r7, r6
 8021100:	b2ed      	uxtb	r5, r5
 8021102:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8021106:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802110a:	fb15 f504 	smulbb	r5, r5, r4
 802110e:	fa5f fe8e 	uxtb.w	lr, lr
 8021112:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8021116:	fb0e 5507 	mla	r5, lr, r7, r5
 802111a:	fb1a fa04 	smulbb	sl, sl, r4
 802111e:	fa1f fc8c 	uxth.w	ip, ip
 8021122:	b2ad      	uxth	r5, r5
 8021124:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021128:	fb06 a607 	mla	r6, r6, r7, sl
 802112c:	f10c 0401 	add.w	r4, ip, #1
 8021130:	f105 0a01 	add.w	sl, r5, #1
 8021134:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8021138:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802113c:	b2b6      	uxth	r6, r6
 802113e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021142:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021146:	ea4a 0c0c 	orr.w	ip, sl, ip
 802114a:	f106 0a01 	add.w	sl, r6, #1
 802114e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8021152:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021156:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802115a:	ea4c 0c0a 	orr.w	ip, ip, sl
 802115e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8021162:	e7ae      	b.n	80210c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8021164:	b005      	add	sp, #20
 8021166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802116a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802116a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802116e:	b085      	sub	sp, #20
 8021170:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021172:	9203      	str	r2, [sp, #12]
 8021174:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8021178:	9201      	str	r2, [sp, #4]
 802117a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802117e:	9100      	str	r1, [sp, #0]
 8021180:	6841      	ldr	r1, [r0, #4]
 8021182:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8021186:	fb01 2404 	mla	r4, r1, r4, r2
 802118a:	6802      	ldr	r2, [r0, #0]
 802118c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021190:	f8de 2000 	ldr.w	r2, [lr]
 8021194:	9202      	str	r2, [sp, #8]
 8021196:	9a01      	ldr	r2, [sp, #4]
 8021198:	43d6      	mvns	r6, r2
 802119a:	b2f6      	uxtb	r6, r6
 802119c:	9a00      	ldr	r2, [sp, #0]
 802119e:	2a00      	cmp	r2, #0
 80211a0:	dc03      	bgt.n	80211aa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80211a2:	9a03      	ldr	r2, [sp, #12]
 80211a4:	2a00      	cmp	r2, #0
 80211a6:	f340 8124 	ble.w	80213f2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80211aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80211ac:	f9be c008 	ldrsh.w	ip, [lr, #8]
 80211b0:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 80211b4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80211b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80211ba:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80211be:	2b00      	cmp	r3, #0
 80211c0:	dd0e      	ble.n	80211e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80211c2:	1408      	asrs	r0, r1, #16
 80211c4:	d405      	bmi.n	80211d2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80211c6:	4560      	cmp	r0, ip
 80211c8:	da03      	bge.n	80211d2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80211ca:	1410      	asrs	r0, r2, #16
 80211cc:	d401      	bmi.n	80211d2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80211ce:	42b8      	cmp	r0, r7
 80211d0:	db07      	blt.n	80211e2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80211d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80211d4:	4401      	add	r1, r0
 80211d6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80211d8:	3b01      	subs	r3, #1
 80211da:	4402      	add	r2, r0
 80211dc:	3402      	adds	r4, #2
 80211de:	e7ee      	b.n	80211be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80211e0:	d06e      	beq.n	80212c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80211e2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80211e4:	1e58      	subs	r0, r3, #1
 80211e6:	fb05 1500 	mla	r5, r5, r0, r1
 80211ea:	142d      	asrs	r5, r5, #16
 80211ec:	d45c      	bmi.n	80212a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80211ee:	4565      	cmp	r5, ip
 80211f0:	da5a      	bge.n	80212a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80211f2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80211f4:	fb05 2000 	mla	r0, r5, r0, r2
 80211f8:	1400      	asrs	r0, r0, #16
 80211fa:	d455      	bmi.n	80212a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80211fc:	42b8      	cmp	r0, r7
 80211fe:	da53      	bge.n	80212a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8021200:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8021204:	4699      	mov	r9, r3
 8021206:	46a2      	mov	sl, r4
 8021208:	f1b9 0f00 	cmp.w	r9, #0
 802120c:	dd54      	ble.n	80212b8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802120e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8021212:	140d      	asrs	r5, r1, #16
 8021214:	1410      	asrs	r0, r2, #16
 8021216:	fb07 5000 	mla	r0, r7, r0, r5
 802121a:	9d02      	ldr	r5, [sp, #8]
 802121c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8021220:	f8ba 5000 	ldrh.w	r5, [sl]
 8021224:	122f      	asrs	r7, r5, #8
 8021226:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802122a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802122e:	fb17 f706 	smulbb	r7, r7, r6
 8021232:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8021236:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802123a:	00ed      	lsls	r5, r5, #3
 802123c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8021240:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8021244:	10c7      	asrs	r7, r0, #3
 8021246:	b2ed      	uxtb	r5, r5
 8021248:	00c0      	lsls	r0, r0, #3
 802124a:	fb18 f806 	smulbb	r8, r8, r6
 802124e:	fb15 f506 	smulbb	r5, r5, r6
 8021252:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021256:	b2c0      	uxtb	r0, r0
 8021258:	fa1f fc8c 	uxth.w	ip, ip
 802125c:	fb07 870b 	mla	r7, r7, fp, r8
 8021260:	fb00 500b 	mla	r0, r0, fp, r5
 8021264:	b280      	uxth	r0, r0
 8021266:	b2bf      	uxth	r7, r7
 8021268:	f10c 0501 	add.w	r5, ip, #1
 802126c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8021270:	f107 0801 	add.w	r8, r7, #1
 8021274:	1c45      	adds	r5, r0, #1
 8021276:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 802127a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 802127e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021280:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021284:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021288:	ea4f 1858 	mov.w	r8, r8, lsr #5
 802128c:	ea45 0c0c 	orr.w	ip, r5, ip
 8021290:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021294:	4401      	add	r1, r0
 8021296:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021298:	ea4c 0c08 	orr.w	ip, ip, r8
 802129c:	f82a cb02 	strh.w	ip, [sl], #2
 80212a0:	4402      	add	r2, r0
 80212a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80212a6:	e7af      	b.n	8021208 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80212a8:	f8bd a004 	ldrh.w	sl, [sp, #4]
 80212ac:	f04f 0800 	mov.w	r8, #0
 80212b0:	eb03 0008 	add.w	r0, r3, r8
 80212b4:	2800      	cmp	r0, #0
 80212b6:	dc41      	bgt.n	802133c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80212b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80212bc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80212c0:	9b00      	ldr	r3, [sp, #0]
 80212c2:	2b00      	cmp	r3, #0
 80212c4:	f340 8095 	ble.w	80213f2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80212c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80212cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80212d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80212d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80212d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80212da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80212de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80212e2:	eef0 6a62 	vmov.f32	s13, s5
 80212e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80212ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80212ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 80212f2:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80212f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80212fa:	eef0 6a43 	vmov.f32	s13, s6
 80212fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021302:	ee12 2a90 	vmov	r2, s5
 8021306:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802130a:	fb92 f3f3 	sdiv	r3, r2, r3
 802130e:	ee13 2a10 	vmov	r2, s6
 8021312:	9311      	str	r3, [sp, #68]	; 0x44
 8021314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021316:	fb92 f3f3 	sdiv	r3, r2, r3
 802131a:	9312      	str	r3, [sp, #72]	; 0x48
 802131c:	9b00      	ldr	r3, [sp, #0]
 802131e:	9a03      	ldr	r2, [sp, #12]
 8021320:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021324:	3b01      	subs	r3, #1
 8021326:	9300      	str	r3, [sp, #0]
 8021328:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 802132c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802132e:	eeb0 3a67 	vmov.f32	s6, s15
 8021332:	bf08      	it	eq
 8021334:	4613      	moveq	r3, r2
 8021336:	eef0 2a47 	vmov.f32	s5, s14
 802133a:	e72f      	b.n	802119c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802133c:	140f      	asrs	r7, r1, #16
 802133e:	d451      	bmi.n	80213e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8021340:	f8de 5008 	ldr.w	r5, [lr, #8]
 8021344:	42bd      	cmp	r5, r7
 8021346:	dd4d      	ble.n	80213e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8021348:	ea5f 4c22 	movs.w	ip, r2, asr #16
 802134c:	d44a      	bmi.n	80213e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802134e:	f8de 000c 	ldr.w	r0, [lr, #12]
 8021352:	4560      	cmp	r0, ip
 8021354:	dd46      	ble.n	80213e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8021356:	b22d      	sxth	r5, r5
 8021358:	fb0c 7505 	mla	r5, ip, r5, r7
 802135c:	9802      	ldr	r0, [sp, #8]
 802135e:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8021362:	f06f 0501 	mvn.w	r5, #1
 8021366:	fb05 fb08 	mul.w	fp, r5, r8
 802136a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802136e:	f834 500b 	ldrh.w	r5, [r4, fp]
 8021372:	122f      	asrs	r7, r5, #8
 8021374:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021378:	fb17 f706 	smulbb	r7, r7, r6
 802137c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8021380:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021384:	00ed      	lsls	r5, r5, #3
 8021386:	fb0c 7c0a 	mla	ip, ip, sl, r7
 802138a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 802138e:	10c7      	asrs	r7, r0, #3
 8021390:	b2ed      	uxtb	r5, r5
 8021392:	00c0      	lsls	r0, r0, #3
 8021394:	fb19 f906 	smulbb	r9, r9, r6
 8021398:	fb15 f506 	smulbb	r5, r5, r6
 802139c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80213a0:	b2c0      	uxtb	r0, r0
 80213a2:	fa1f fc8c 	uxth.w	ip, ip
 80213a6:	fb07 970a 	mla	r7, r7, sl, r9
 80213aa:	fb00 500a 	mla	r0, r0, sl, r5
 80213ae:	b2bf      	uxth	r7, r7
 80213b0:	b280      	uxth	r0, r0
 80213b2:	f10c 0501 	add.w	r5, ip, #1
 80213b6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80213ba:	f107 0901 	add.w	r9, r7, #1
 80213be:	1c45      	adds	r5, r0, #1
 80213c0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80213c4:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80213c8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80213cc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80213d0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80213d4:	ea45 0c0c 	orr.w	ip, r5, ip
 80213d8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80213dc:	ea4c 0c09 	orr.w	ip, ip, r9
 80213e0:	f824 c00b 	strh.w	ip, [r4, fp]
 80213e4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80213e6:	4401      	add	r1, r0
 80213e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80213ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80213ee:	4402      	add	r2, r0
 80213f0:	e75e      	b.n	80212b0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80213f2:	b005      	add	sp, #20
 80213f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080213f8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80213f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213fc:	b085      	sub	sp, #20
 80213fe:	4693      	mov	fp, r2
 8021400:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021402:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021404:	6870      	ldr	r0, [r6, #4]
 8021406:	9101      	str	r1, [sp, #4]
 8021408:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802140c:	fb00 2404 	mla	r4, r0, r4, r2
 8021410:	6832      	ldr	r2, [r6, #0]
 8021412:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8021416:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802141a:	682a      	ldr	r2, [r5, #0]
 802141c:	9202      	str	r2, [sp, #8]
 802141e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021422:	9a01      	ldr	r2, [sp, #4]
 8021424:	2a00      	cmp	r2, #0
 8021426:	dc03      	bgt.n	8021430 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8021428:	f1bb 0f00 	cmp.w	fp, #0
 802142c:	f340 809a 	ble.w	8021564 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8021430:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021432:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8021436:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 802143a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802143e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021440:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021444:	2b00      	cmp	r3, #0
 8021446:	dd0c      	ble.n	8021462 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021448:	1406      	asrs	r6, r0, #16
 802144a:	d405      	bmi.n	8021458 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802144c:	454e      	cmp	r6, r9
 802144e:	da03      	bge.n	8021458 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021450:	1416      	asrs	r6, r2, #16
 8021452:	d401      	bmi.n	8021458 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021454:	4546      	cmp	r6, r8
 8021456:	db05      	blt.n	8021464 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021458:	4470      	add	r0, lr
 802145a:	4462      	add	r2, ip
 802145c:	3b01      	subs	r3, #1
 802145e:	3402      	adds	r4, #2
 8021460:	e7f0      	b.n	8021444 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021462:	d00f      	beq.n	8021484 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021464:	1e5e      	subs	r6, r3, #1
 8021466:	fb0e 0706 	mla	r7, lr, r6, r0
 802146a:	143f      	asrs	r7, r7, #16
 802146c:	d541      	bpl.n	80214f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 802146e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8021472:	4698      	mov	r8, r3
 8021474:	9603      	str	r6, [sp, #12]
 8021476:	f1b8 0f00 	cmp.w	r8, #0
 802147a:	dc56      	bgt.n	802152a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 802147c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021480:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021484:	9b01      	ldr	r3, [sp, #4]
 8021486:	2b00      	cmp	r3, #0
 8021488:	dd6c      	ble.n	8021564 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802148a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802148e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021492:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021498:	ee31 1a05 	vadd.f32	s2, s2, s10
 802149c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80214a0:	eeb0 6a62 	vmov.f32	s12, s5
 80214a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80214a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80214ac:	ee77 2a62 	vsub.f32	s5, s14, s5
 80214b0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80214b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80214b8:	eeb0 6a43 	vmov.f32	s12, s6
 80214bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80214c0:	ee12 2a90 	vmov	r2, s5
 80214c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80214c8:	fb92 fef3 	sdiv	lr, r2, r3
 80214cc:	ee13 2a10 	vmov	r2, s6
 80214d0:	fb92 fcf3 	sdiv	ip, r2, r3
 80214d4:	9b01      	ldr	r3, [sp, #4]
 80214d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80214da:	3b01      	subs	r3, #1
 80214dc:	9301      	str	r3, [sp, #4]
 80214de:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80214e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80214e4:	eeb0 3a67 	vmov.f32	s6, s15
 80214e8:	bf08      	it	eq
 80214ea:	465b      	moveq	r3, fp
 80214ec:	eef0 2a47 	vmov.f32	s5, s14
 80214f0:	e797      	b.n	8021422 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80214f2:	454f      	cmp	r7, r9
 80214f4:	dabb      	bge.n	802146e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80214f6:	fb0c 2606 	mla	r6, ip, r6, r2
 80214fa:	1436      	asrs	r6, r6, #16
 80214fc:	d4b7      	bmi.n	802146e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80214fe:	4546      	cmp	r6, r8
 8021500:	dab5      	bge.n	802146e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021502:	461e      	mov	r6, r3
 8021504:	46a0      	mov	r8, r4
 8021506:	2e00      	cmp	r6, #0
 8021508:	ddb8      	ble.n	802147c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802150a:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 802150e:	9902      	ldr	r1, [sp, #8]
 8021510:	1417      	asrs	r7, r2, #16
 8021512:	ea4f 4920 	mov.w	r9, r0, asr #16
 8021516:	fb0a 9707 	mla	r7, sl, r7, r9
 802151a:	4470      	add	r0, lr
 802151c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8021520:	f828 7b02 	strh.w	r7, [r8], #2
 8021524:	4462      	add	r2, ip
 8021526:	3e01      	subs	r6, #1
 8021528:	e7ed      	b.n	8021506 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 802152a:	ea5f 4920 	movs.w	r9, r0, asr #16
 802152e:	d414      	bmi.n	802155a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8021530:	68ae      	ldr	r6, [r5, #8]
 8021532:	454e      	cmp	r6, r9
 8021534:	dd11      	ble.n	802155a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8021536:	ea5f 4a22 	movs.w	sl, r2, asr #16
 802153a:	d40e      	bmi.n	802155a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 802153c:	68ef      	ldr	r7, [r5, #12]
 802153e:	4557      	cmp	r7, sl
 8021540:	dd0b      	ble.n	802155a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8021542:	b236      	sxth	r6, r6
 8021544:	fb0a 9606 	mla	r6, sl, r6, r9
 8021548:	9f02      	ldr	r7, [sp, #8]
 802154a:	f06f 0101 	mvn.w	r1, #1
 802154e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8021552:	fb01 f608 	mul.w	r6, r1, r8
 8021556:	9903      	ldr	r1, [sp, #12]
 8021558:	538f      	strh	r7, [r1, r6]
 802155a:	4470      	add	r0, lr
 802155c:	4462      	add	r2, ip
 802155e:	f108 38ff 	add.w	r8, r8, #4294967295
 8021562:	e788      	b.n	8021476 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8021564:	b005      	add	sp, #20
 8021566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802156a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802156a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802156e:	b087      	sub	sp, #28
 8021570:	468b      	mov	fp, r1
 8021572:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021574:	9203      	str	r2, [sp, #12]
 8021576:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 802157a:	9204      	str	r2, [sp, #16]
 802157c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8021580:	6841      	ldr	r1, [r0, #4]
 8021582:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8021586:	fb01 2505 	mla	r5, r1, r5, r2
 802158a:	6802      	ldr	r2, [r0, #0]
 802158c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8021590:	f8d9 2000 	ldr.w	r2, [r9]
 8021594:	9201      	str	r2, [sp, #4]
 8021596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802159a:	f1bb 0f00 	cmp.w	fp, #0
 802159e:	dc03      	bgt.n	80215a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80215a0:	9a03      	ldr	r2, [sp, #12]
 80215a2:	2a00      	cmp	r2, #0
 80215a4:	f340 8159 	ble.w	802185a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 80215a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80215aa:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 80215ae:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 80215b2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80215b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80215b8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80215bc:	2b00      	cmp	r3, #0
 80215be:	dd0e      	ble.n	80215de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80215c0:	1402      	asrs	r2, r0, #16
 80215c2:	d405      	bmi.n	80215d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80215c4:	42ba      	cmp	r2, r7
 80215c6:	da03      	bge.n	80215d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80215c8:	140a      	asrs	r2, r1, #16
 80215ca:	d401      	bmi.n	80215d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80215cc:	42b2      	cmp	r2, r6
 80215ce:	db07      	blt.n	80215e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80215d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80215d2:	4410      	add	r0, r2
 80215d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80215d6:	3b01      	subs	r3, #1
 80215d8:	4411      	add	r1, r2
 80215da:	3502      	adds	r5, #2
 80215dc:	e7ee      	b.n	80215bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80215de:	d017      	beq.n	8021610 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80215e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80215e2:	1e5a      	subs	r2, r3, #1
 80215e4:	fb04 0402 	mla	r4, r4, r2, r0
 80215e8:	1424      	asrs	r4, r4, #16
 80215ea:	d409      	bmi.n	8021600 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80215ec:	42bc      	cmp	r4, r7
 80215ee:	da07      	bge.n	8021600 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80215f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80215f2:	fb04 1202 	mla	r2, r4, r2, r1
 80215f6:	1412      	asrs	r2, r2, #16
 80215f8:	d402      	bmi.n	8021600 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80215fa:	42b2      	cmp	r2, r6
 80215fc:	f2c0 80bf 	blt.w	802177e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021600:	2700      	movs	r7, #0
 8021602:	19da      	adds	r2, r3, r7
 8021604:	2a00      	cmp	r2, #0
 8021606:	dc3e      	bgt.n	8021686 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021608:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802160c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8021610:	f1bb 0f00 	cmp.w	fp, #0
 8021614:	f340 8121 	ble.w	802185a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8021618:	ee30 0a04 	vadd.f32	s0, s0, s8
 802161c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021620:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021626:	f1bb 0b01 	subs.w	fp, fp, #1
 802162a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802162e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021632:	eeb0 6a62 	vmov.f32	s12, s5
 8021636:	ee61 7a27 	vmul.f32	s15, s2, s15
 802163a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802163e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021642:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021646:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802164a:	eeb0 6a43 	vmov.f32	s12, s6
 802164e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021652:	ee12 2a90 	vmov	r2, s5
 8021656:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802165a:	fb92 f3f3 	sdiv	r3, r2, r3
 802165e:	ee13 2a10 	vmov	r2, s6
 8021662:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021666:	9313      	str	r3, [sp, #76]	; 0x4c
 8021668:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802166a:	fb92 f3f3 	sdiv	r3, r2, r3
 802166e:	9a03      	ldr	r2, [sp, #12]
 8021670:	9314      	str	r3, [sp, #80]	; 0x50
 8021672:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021676:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021678:	eeb0 3a67 	vmov.f32	s6, s15
 802167c:	bf08      	it	eq
 802167e:	4613      	moveq	r3, r2
 8021680:	eef0 2a47 	vmov.f32	s5, s14
 8021684:	e789      	b.n	802159a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8021686:	1406      	asrs	r6, r0, #16
 8021688:	d42d      	bmi.n	80216e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 802168a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 802168e:	42b4      	cmp	r4, r6
 8021690:	dd29      	ble.n	80216e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021692:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8021696:	d426      	bmi.n	80216e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021698:	f8d9 200c 	ldr.w	r2, [r9, #12]
 802169c:	4562      	cmp	r2, ip
 802169e:	dd22      	ble.n	80216e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80216a0:	b224      	sxth	r4, r4
 80216a2:	9a01      	ldr	r2, [sp, #4]
 80216a4:	fb0c 6404 	mla	r4, ip, r4, r6
 80216a8:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 80216ac:	0e22      	lsrs	r2, r4, #24
 80216ae:	d01a      	beq.n	80216e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80216b0:	9e04      	ldr	r6, [sp, #16]
 80216b2:	4372      	muls	r2, r6
 80216b4:	1c56      	adds	r6, r2, #1
 80216b6:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80216ba:	1212      	asrs	r2, r2, #8
 80216bc:	0a26      	lsrs	r6, r4, #8
 80216be:	2aff      	cmp	r2, #255	; 0xff
 80216c0:	9605      	str	r6, [sp, #20]
 80216c2:	d116      	bne.n	80216f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80216c4:	f06f 0201 	mvn.w	r2, #1
 80216c8:	fb02 fc07 	mul.w	ip, r2, r7
 80216cc:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80216d0:	0962      	lsrs	r2, r4, #5
 80216d2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80216d6:	f026 0607 	bic.w	r6, r6, #7
 80216da:	4316      	orrs	r6, r2
 80216dc:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80216e0:	4326      	orrs	r6, r4
 80216e2:	f825 600c 	strh.w	r6, [r5, ip]
 80216e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80216e8:	4410      	add	r0, r2
 80216ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80216ec:	3f01      	subs	r7, #1
 80216ee:	4411      	add	r1, r2
 80216f0:	e787      	b.n	8021602 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80216f2:	f06f 0601 	mvn.w	r6, #1
 80216f6:	437e      	muls	r6, r7
 80216f8:	fa1f fa82 	uxth.w	sl, r2
 80216fc:	f835 8006 	ldrh.w	r8, [r5, r6]
 8021700:	9602      	str	r6, [sp, #8]
 8021702:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8021706:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 802170a:	43d2      	mvns	r2, r2
 802170c:	b2d2      	uxtb	r2, r2
 802170e:	fb1c fc0a 	smulbb	ip, ip, sl
 8021712:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8021716:	fb0e ce02 	mla	lr, lr, r2, ip
 802171a:	b2e4      	uxtb	r4, r4
 802171c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8021720:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8021724:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8021728:	fa5f f888 	uxtb.w	r8, r8
 802172c:	fb14 f40a 	smulbb	r4, r4, sl
 8021730:	fb08 4402 	mla	r4, r8, r2, r4
 8021734:	fa1f fe8e 	uxth.w	lr, lr
 8021738:	fb16 f60a 	smulbb	r6, r6, sl
 802173c:	b2a4      	uxth	r4, r4
 802173e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021742:	fb0c 6c02 	mla	ip, ip, r2, r6
 8021746:	f10e 0201 	add.w	r2, lr, #1
 802174a:	1c66      	adds	r6, r4, #1
 802174c:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8021750:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8021754:	fa1f fc8c 	uxth.w	ip, ip
 8021758:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802175c:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8021760:	ea46 0e0e 	orr.w	lr, r6, lr
 8021764:	f10c 0601 	add.w	r6, ip, #1
 8021768:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 802176c:	0976      	lsrs	r6, r6, #5
 802176e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021772:	9a02      	ldr	r2, [sp, #8]
 8021774:	ea4e 0e06 	orr.w	lr, lr, r6
 8021778:	f825 e002 	strh.w	lr, [r5, r2]
 802177c:	e7b3      	b.n	80216e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 802177e:	f04f 0800 	mov.w	r8, #0
 8021782:	eba3 0208 	sub.w	r2, r3, r8
 8021786:	2a00      	cmp	r2, #0
 8021788:	f77f af3e 	ble.w	8021608 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802178c:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8021790:	1404      	asrs	r4, r0, #16
 8021792:	140a      	asrs	r2, r1, #16
 8021794:	fb06 4202 	mla	r2, r6, r2, r4
 8021798:	9c01      	ldr	r4, [sp, #4]
 802179a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 802179e:	0e22      	lsrs	r2, r4, #24
 80217a0:	d016      	beq.n	80217d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80217a2:	9e04      	ldr	r6, [sp, #16]
 80217a4:	4372      	muls	r2, r6
 80217a6:	1c56      	adds	r6, r2, #1
 80217a8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80217ac:	1212      	asrs	r2, r2, #8
 80217ae:	2aff      	cmp	r2, #255	; 0xff
 80217b0:	ea4f 2614 	mov.w	r6, r4, lsr #8
 80217b4:	d113      	bne.n	80217de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80217b6:	0962      	lsrs	r2, r4, #5
 80217b8:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80217bc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80217c0:	f026 0607 	bic.w	r6, r6, #7
 80217c4:	4316      	orrs	r6, r2
 80217c6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80217ca:	4326      	orrs	r6, r4
 80217cc:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 80217d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80217d2:	4410      	add	r0, r2
 80217d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80217d6:	f108 0801 	add.w	r8, r8, #1
 80217da:	4411      	add	r1, r2
 80217dc:	e7d1      	b.n	8021782 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80217de:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 80217e2:	fa1f fa82 	uxth.w	sl, r2
 80217e6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80217ea:	f3c4 4707 	ubfx	r7, r4, #16, #8
 80217ee:	43d2      	mvns	r2, r2
 80217f0:	b2d2      	uxtb	r2, r2
 80217f2:	fb17 f70a 	smulbb	r7, r7, sl
 80217f6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80217fa:	fb0c 7c02 	mla	ip, ip, r2, r7
 80217fe:	b2e4      	uxtb	r4, r4
 8021800:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021804:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021808:	fa5f fe8e 	uxtb.w	lr, lr
 802180c:	fb14 f40a 	smulbb	r4, r4, sl
 8021810:	fb0e 4402 	mla	r4, lr, r2, r4
 8021814:	b2f6      	uxtb	r6, r6
 8021816:	fa1f fc8c 	uxth.w	ip, ip
 802181a:	fb16 f60a 	smulbb	r6, r6, sl
 802181e:	b2a4      	uxth	r4, r4
 8021820:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021824:	fb07 6702 	mla	r7, r7, r2, r6
 8021828:	f10c 0201 	add.w	r2, ip, #1
 802182c:	1c66      	adds	r6, r4, #1
 802182e:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021832:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8021836:	b2bf      	uxth	r7, r7
 8021838:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802183c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021840:	ea46 0c0c 	orr.w	ip, r6, ip
 8021844:	1c7e      	adds	r6, r7, #1
 8021846:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 802184a:	0976      	lsrs	r6, r6, #5
 802184c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021850:	ea4c 0c06 	orr.w	ip, ip, r6
 8021854:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8021858:	e7ba      	b.n	80217d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802185a:	b007      	add	sp, #28
 802185c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021860 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021864:	b085      	sub	sp, #20
 8021866:	468b      	mov	fp, r1
 8021868:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802186a:	9203      	str	r2, [sp, #12]
 802186c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8021870:	6841      	ldr	r1, [r0, #4]
 8021872:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8021876:	fb01 2404 	mla	r4, r1, r4, r2
 802187a:	6802      	ldr	r2, [r0, #0]
 802187c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021880:	f8d8 2000 	ldr.w	r2, [r8]
 8021884:	9201      	str	r2, [sp, #4]
 8021886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802188a:	f1bb 0f00 	cmp.w	fp, #0
 802188e:	dc03      	bgt.n	8021898 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8021890:	9a03      	ldr	r2, [sp, #12]
 8021892:	2a00      	cmp	r2, #0
 8021894:	f340 814f 	ble.w	8021b36 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8021898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802189a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 802189e:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 80218a2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80218a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80218a8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80218ac:	2b00      	cmp	r3, #0
 80218ae:	dd0e      	ble.n	80218ce <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80218b0:	1408      	asrs	r0, r1, #16
 80218b2:	d405      	bmi.n	80218c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80218b4:	42b8      	cmp	r0, r7
 80218b6:	da03      	bge.n	80218c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80218b8:	1410      	asrs	r0, r2, #16
 80218ba:	d401      	bmi.n	80218c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80218bc:	42b0      	cmp	r0, r6
 80218be:	db07      	blt.n	80218d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80218c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80218c2:	4401      	add	r1, r0
 80218c4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80218c6:	3b01      	subs	r3, #1
 80218c8:	4402      	add	r2, r0
 80218ca:	3402      	adds	r4, #2
 80218cc:	e7ee      	b.n	80218ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80218ce:	d017      	beq.n	8021900 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80218d0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80218d2:	1e58      	subs	r0, r3, #1
 80218d4:	fb05 1500 	mla	r5, r5, r0, r1
 80218d8:	142d      	asrs	r5, r5, #16
 80218da:	d409      	bmi.n	80218f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80218dc:	42bd      	cmp	r5, r7
 80218de:	da07      	bge.n	80218f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80218e0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80218e2:	fb05 2000 	mla	r0, r5, r0, r2
 80218e6:	1400      	asrs	r0, r0, #16
 80218e8:	d402      	bmi.n	80218f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80218ea:	42b0      	cmp	r0, r6
 80218ec:	f2c0 80ba 	blt.w	8021a64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80218f0:	2600      	movs	r6, #0
 80218f2:	1998      	adds	r0, r3, r6
 80218f4:	2800      	cmp	r0, #0
 80218f6:	dc3e      	bgt.n	8021976 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80218f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80218fc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021900:	f1bb 0f00 	cmp.w	fp, #0
 8021904:	f340 8117 	ble.w	8021b36 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8021908:	ee30 0a04 	vadd.f32	s0, s0, s8
 802190c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021910:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021916:	f1bb 0b01 	subs.w	fp, fp, #1
 802191a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802191e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021922:	eeb0 6a62 	vmov.f32	s12, s5
 8021926:	ee61 7a27 	vmul.f32	s15, s2, s15
 802192a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802192e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021932:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021936:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802193a:	eeb0 6a43 	vmov.f32	s12, s6
 802193e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021942:	ee12 2a90 	vmov	r2, s5
 8021946:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802194a:	fb92 f3f3 	sdiv	r3, r2, r3
 802194e:	ee13 2a10 	vmov	r2, s6
 8021952:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021956:	9311      	str	r3, [sp, #68]	; 0x44
 8021958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802195a:	fb92 f3f3 	sdiv	r3, r2, r3
 802195e:	9a03      	ldr	r2, [sp, #12]
 8021960:	9312      	str	r3, [sp, #72]	; 0x48
 8021962:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021968:	eeb0 3a67 	vmov.f32	s6, s15
 802196c:	bf08      	it	eq
 802196e:	4613      	moveq	r3, r2
 8021970:	eef0 2a47 	vmov.f32	s5, s14
 8021974:	e789      	b.n	802188a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8021976:	140f      	asrs	r7, r1, #16
 8021978:	d424      	bmi.n	80219c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802197a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 802197e:	42bd      	cmp	r5, r7
 8021980:	dd20      	ble.n	80219c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021982:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8021986:	d41d      	bmi.n	80219c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021988:	f8d8 000c 	ldr.w	r0, [r8, #12]
 802198c:	4560      	cmp	r0, ip
 802198e:	dd19      	ble.n	80219c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021990:	b22d      	sxth	r5, r5
 8021992:	fb0c 7505 	mla	r5, ip, r5, r7
 8021996:	9801      	ldr	r0, [sp, #4]
 8021998:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 802199c:	0e07      	lsrs	r7, r0, #24
 802199e:	2fff      	cmp	r7, #255	; 0xff
 80219a0:	d116      	bne.n	80219d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80219a2:	f06f 0501 	mvn.w	r5, #1
 80219a6:	fb05 f706 	mul.w	r7, r5, r6
 80219aa:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 80219ae:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 80219b2:	0945      	lsrs	r5, r0, #5
 80219b4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80219b8:	ea4c 0505 	orr.w	r5, ip, r5
 80219bc:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80219c0:	4305      	orrs	r5, r0
 80219c2:	53e5      	strh	r5, [r4, r7]
 80219c4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80219c6:	4401      	add	r1, r0
 80219c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80219ca:	3e01      	subs	r6, #1
 80219cc:	4402      	add	r2, r0
 80219ce:	e790      	b.n	80218f2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80219d0:	b2fd      	uxtb	r5, r7
 80219d2:	2f00      	cmp	r7, #0
 80219d4:	d0f6      	beq.n	80219c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80219d6:	f06f 0701 	mvn.w	r7, #1
 80219da:	4377      	muls	r7, r6
 80219dc:	fa1f f985 	uxth.w	r9, r5
 80219e0:	f834 e007 	ldrh.w	lr, [r4, r7]
 80219e4:	9702      	str	r7, [sp, #8]
 80219e6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80219ea:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80219ee:	43ed      	mvns	r5, r5
 80219f0:	b2ed      	uxtb	r5, r5
 80219f2:	fb17 f709 	smulbb	r7, r7, r9
 80219f6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80219fa:	fb0c 7c05 	mla	ip, ip, r5, r7
 80219fe:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8021a02:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021a06:	b2c0      	uxtb	r0, r0
 8021a08:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021a0c:	fa5f fe8e 	uxtb.w	lr, lr
 8021a10:	fb10 f009 	smulbb	r0, r0, r9
 8021a14:	fb0e 0005 	mla	r0, lr, r5, r0
 8021a18:	b280      	uxth	r0, r0
 8021a1a:	fa1f fc8c 	uxth.w	ip, ip
 8021a1e:	fb1a fa09 	smulbb	sl, sl, r9
 8021a22:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021a26:	fb07 a705 	mla	r7, r7, r5, sl
 8021a2a:	f100 0a01 	add.w	sl, r0, #1
 8021a2e:	f10c 0501 	add.w	r5, ip, #1
 8021a32:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8021a36:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8021a3a:	b2bf      	uxth	r7, r7
 8021a3c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021a40:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021a44:	ea4a 0c0c 	orr.w	ip, sl, ip
 8021a48:	f107 0a01 	add.w	sl, r7, #1
 8021a4c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8021a50:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021a54:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021a58:	9802      	ldr	r0, [sp, #8]
 8021a5a:	ea4c 0c0a 	orr.w	ip, ip, sl
 8021a5e:	f824 c000 	strh.w	ip, [r4, r0]
 8021a62:	e7af      	b.n	80219c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021a64:	f04f 0e00 	mov.w	lr, #0
 8021a68:	eba3 000e 	sub.w	r0, r3, lr
 8021a6c:	2800      	cmp	r0, #0
 8021a6e:	f77f af43 	ble.w	80218f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021a72:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8021a76:	140d      	asrs	r5, r1, #16
 8021a78:	1410      	asrs	r0, r2, #16
 8021a7a:	fb06 5000 	mla	r0, r6, r0, r5
 8021a7e:	9d01      	ldr	r5, [sp, #4]
 8021a80:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8021a84:	0e2e      	lsrs	r6, r5, #24
 8021a86:	2eff      	cmp	r6, #255	; 0xff
 8021a88:	d112      	bne.n	8021ab0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8021a8a:	482c      	ldr	r0, [pc, #176]	; (8021b3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8021a8c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8021a90:	0968      	lsrs	r0, r5, #5
 8021a92:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021a96:	4330      	orrs	r0, r6
 8021a98:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021a9c:	4328      	orrs	r0, r5
 8021a9e:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8021aa2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021aa4:	4401      	add	r1, r0
 8021aa6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021aa8:	f10e 0e01 	add.w	lr, lr, #1
 8021aac:	4402      	add	r2, r0
 8021aae:	e7db      	b.n	8021a68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021ab0:	b2f0      	uxtb	r0, r6
 8021ab2:	2e00      	cmp	r6, #0
 8021ab4:	d0f5      	beq.n	8021aa2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021ab6:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8021aba:	fa1f f980 	uxth.w	r9, r0
 8021abe:	ea4f 272c 	mov.w	r7, ip, asr #8
 8021ac2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8021ac6:	43c0      	mvns	r0, r0
 8021ac8:	b2c0      	uxtb	r0, r0
 8021aca:	fb16 f609 	smulbb	r6, r6, r9
 8021ace:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021ad2:	fb07 6700 	mla	r7, r7, r0, r6
 8021ad6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8021ada:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8021ade:	b2ed      	uxtb	r5, r5
 8021ae0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021ae4:	fa5f fc8c 	uxtb.w	ip, ip
 8021ae8:	fb15 f509 	smulbb	r5, r5, r9
 8021aec:	fb0c 5500 	mla	r5, ip, r0, r5
 8021af0:	b2bf      	uxth	r7, r7
 8021af2:	fb1a fa09 	smulbb	sl, sl, r9
 8021af6:	b2ad      	uxth	r5, r5
 8021af8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021afc:	fb06 a600 	mla	r6, r6, r0, sl
 8021b00:	1c78      	adds	r0, r7, #1
 8021b02:	f105 0a01 	add.w	sl, r5, #1
 8021b06:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8021b0a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021b0e:	b2b6      	uxth	r6, r6
 8021b10:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021b14:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8021b18:	ea4a 0707 	orr.w	r7, sl, r7
 8021b1c:	f106 0a01 	add.w	sl, r6, #1
 8021b20:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8021b24:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021b28:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021b2c:	ea47 070a 	orr.w	r7, r7, sl
 8021b30:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8021b34:	e7b5      	b.n	8021aa2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021b36:	b005      	add	sp, #20
 8021b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b3c:	fffff800 	.word	0xfffff800

08021b40 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b44:	b087      	sub	sp, #28
 8021b46:	468b      	mov	fp, r1
 8021b48:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021b4a:	9203      	str	r2, [sp, #12]
 8021b4c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8021b50:	9204      	str	r2, [sp, #16]
 8021b52:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8021b56:	6841      	ldr	r1, [r0, #4]
 8021b58:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8021b5c:	fb01 2404 	mla	r4, r1, r4, r2
 8021b60:	6802      	ldr	r2, [r0, #0]
 8021b62:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021b66:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8021b6a:	3201      	adds	r2, #1
 8021b6c:	f022 0201 	bic.w	r2, r2, #1
 8021b70:	9200      	str	r2, [sp, #0]
 8021b72:	f8d9 2000 	ldr.w	r2, [r9]
 8021b76:	9201      	str	r2, [sp, #4]
 8021b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021b7c:	f1bb 0f00 	cmp.w	fp, #0
 8021b80:	dc03      	bgt.n	8021b8a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021b82:	9a03      	ldr	r2, [sp, #12]
 8021b84:	2a00      	cmp	r2, #0
 8021b86:	f340 8169 	ble.w	8021e5c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021b8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021b8c:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8021b90:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8021b94:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021b98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021b9a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021b9e:	2b00      	cmp	r3, #0
 8021ba0:	dd0e      	ble.n	8021bc0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8021ba2:	1402      	asrs	r2, r0, #16
 8021ba4:	d405      	bmi.n	8021bb2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021ba6:	42ba      	cmp	r2, r7
 8021ba8:	da03      	bge.n	8021bb2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021baa:	140a      	asrs	r2, r1, #16
 8021bac:	d401      	bmi.n	8021bb2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021bae:	42b2      	cmp	r2, r6
 8021bb0:	db07      	blt.n	8021bc2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021bb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021bb4:	4410      	add	r0, r2
 8021bb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021bb8:	3b01      	subs	r3, #1
 8021bba:	4411      	add	r1, r2
 8021bbc:	3402      	adds	r4, #2
 8021bbe:	e7ee      	b.n	8021b9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8021bc0:	d017      	beq.n	8021bf2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8021bc2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021bc4:	1e5a      	subs	r2, r3, #1
 8021bc6:	fb05 0502 	mla	r5, r5, r2, r0
 8021bca:	142d      	asrs	r5, r5, #16
 8021bcc:	d409      	bmi.n	8021be2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021bce:	42bd      	cmp	r5, r7
 8021bd0:	da07      	bge.n	8021be2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021bd2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021bd4:	fb05 1202 	mla	r2, r5, r2, r1
 8021bd8:	1412      	asrs	r2, r2, #16
 8021bda:	d402      	bmi.n	8021be2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021bdc:	42b2      	cmp	r2, r6
 8021bde:	f2c0 80c7 	blt.w	8021d70 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8021be2:	2700      	movs	r7, #0
 8021be4:	19da      	adds	r2, r3, r7
 8021be6:	2a00      	cmp	r2, #0
 8021be8:	dc3e      	bgt.n	8021c68 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8021bea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021bee:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021bf2:	f1bb 0f00 	cmp.w	fp, #0
 8021bf6:	f340 8131 	ble.w	8021e5c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021bfa:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021bfe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021c02:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021c06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021c08:	f1bb 0b01 	subs.w	fp, fp, #1
 8021c0c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021c10:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021c14:	eeb0 6a62 	vmov.f32	s12, s5
 8021c18:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021c1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021c20:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021c24:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021c28:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021c2c:	eeb0 6a43 	vmov.f32	s12, s6
 8021c30:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021c34:	ee12 2a90 	vmov	r2, s5
 8021c38:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021c3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c40:	ee13 2a10 	vmov	r2, s6
 8021c44:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021c48:	9313      	str	r3, [sp, #76]	; 0x4c
 8021c4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021c4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c50:	9a03      	ldr	r2, [sp, #12]
 8021c52:	9314      	str	r3, [sp, #80]	; 0x50
 8021c54:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021c58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021c5a:	eeb0 3a67 	vmov.f32	s6, s15
 8021c5e:	bf08      	it	eq
 8021c60:	4613      	moveq	r3, r2
 8021c62:	eef0 2a47 	vmov.f32	s5, s14
 8021c66:	e789      	b.n	8021b7c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021c68:	1405      	asrs	r5, r0, #16
 8021c6a:	d435      	bmi.n	8021cd8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021c6c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8021c70:	42aa      	cmp	r2, r5
 8021c72:	dd31      	ble.n	8021cd8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021c74:	140e      	asrs	r6, r1, #16
 8021c76:	d42f      	bmi.n	8021cd8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021c78:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8021c7c:	42b2      	cmp	r2, r6
 8021c7e:	dd2b      	ble.n	8021cd8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021c80:	9a00      	ldr	r2, [sp, #0]
 8021c82:	fb06 5502 	mla	r5, r6, r2, r5
 8021c86:	086a      	lsrs	r2, r5, #1
 8021c88:	9e01      	ldr	r6, [sp, #4]
 8021c8a:	5cb2      	ldrb	r2, [r6, r2]
 8021c8c:	07ee      	lsls	r6, r5, #31
 8021c8e:	bf54      	ite	pl
 8021c90:	f002 020f 	andpl.w	r2, r2, #15
 8021c94:	1112      	asrmi	r2, r2, #4
 8021c96:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021c9a:	b2d2      	uxtb	r2, r2
 8021c9c:	b1e2      	cbz	r2, 8021cd8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021c9e:	9d04      	ldr	r5, [sp, #16]
 8021ca0:	436a      	muls	r2, r5
 8021ca2:	1c55      	adds	r5, r2, #1
 8021ca4:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8021ca8:	4d6e      	ldr	r5, [pc, #440]	; (8021e64 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8021caa:	682d      	ldr	r5, [r5, #0]
 8021cac:	1212      	asrs	r2, r2, #8
 8021cae:	0a2e      	lsrs	r6, r5, #8
 8021cb0:	2aff      	cmp	r2, #255	; 0xff
 8021cb2:	9605      	str	r6, [sp, #20]
 8021cb4:	d116      	bne.n	8021ce4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8021cb6:	f06f 0201 	mvn.w	r2, #1
 8021cba:	fb02 fc07 	mul.w	ip, r2, r7
 8021cbe:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8021cc2:	096a      	lsrs	r2, r5, #5
 8021cc4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021cc8:	f026 0607 	bic.w	r6, r6, #7
 8021ccc:	4316      	orrs	r6, r2
 8021cce:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021cd2:	432e      	orrs	r6, r5
 8021cd4:	f824 600c 	strh.w	r6, [r4, ip]
 8021cd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021cda:	4410      	add	r0, r2
 8021cdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021cde:	3f01      	subs	r7, #1
 8021ce0:	4411      	add	r1, r2
 8021ce2:	e77f      	b.n	8021be4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8021ce4:	f06f 0601 	mvn.w	r6, #1
 8021ce8:	437e      	muls	r6, r7
 8021cea:	fa1f fa82 	uxth.w	sl, r2
 8021cee:	f834 8006 	ldrh.w	r8, [r4, r6]
 8021cf2:	9602      	str	r6, [sp, #8]
 8021cf4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8021cf8:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8021cfc:	43d2      	mvns	r2, r2
 8021cfe:	b2d2      	uxtb	r2, r2
 8021d00:	fb1c fc0a 	smulbb	ip, ip, sl
 8021d04:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8021d08:	fb0e ce02 	mla	lr, lr, r2, ip
 8021d0c:	b2ed      	uxtb	r5, r5
 8021d0e:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8021d12:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8021d16:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8021d1a:	fa5f f888 	uxtb.w	r8, r8
 8021d1e:	fb15 f50a 	smulbb	r5, r5, sl
 8021d22:	fb08 5502 	mla	r5, r8, r2, r5
 8021d26:	fa1f fe8e 	uxth.w	lr, lr
 8021d2a:	fb16 f60a 	smulbb	r6, r6, sl
 8021d2e:	b2ad      	uxth	r5, r5
 8021d30:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021d34:	fb0c 6c02 	mla	ip, ip, r2, r6
 8021d38:	f10e 0201 	add.w	r2, lr, #1
 8021d3c:	1c6e      	adds	r6, r5, #1
 8021d3e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8021d42:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8021d46:	fa1f fc8c 	uxth.w	ip, ip
 8021d4a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021d4e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8021d52:	ea46 0e0e 	orr.w	lr, r6, lr
 8021d56:	f10c 0601 	add.w	r6, ip, #1
 8021d5a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8021d5e:	0976      	lsrs	r6, r6, #5
 8021d60:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021d64:	9a02      	ldr	r2, [sp, #8]
 8021d66:	ea4e 0e06 	orr.w	lr, lr, r6
 8021d6a:	f824 e002 	strh.w	lr, [r4, r2]
 8021d6e:	e7b3      	b.n	8021cd8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021d70:	f04f 0800 	mov.w	r8, #0
 8021d74:	eba3 0208 	sub.w	r2, r3, r8
 8021d78:	2a00      	cmp	r2, #0
 8021d7a:	f77f af36 	ble.w	8021bea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8021d7e:	9e00      	ldr	r6, [sp, #0]
 8021d80:	1402      	asrs	r2, r0, #16
 8021d82:	140d      	asrs	r5, r1, #16
 8021d84:	fb06 2505 	mla	r5, r6, r5, r2
 8021d88:	086a      	lsrs	r2, r5, #1
 8021d8a:	9e01      	ldr	r6, [sp, #4]
 8021d8c:	5cb2      	ldrb	r2, [r6, r2]
 8021d8e:	07ed      	lsls	r5, r5, #31
 8021d90:	bf54      	ite	pl
 8021d92:	f002 020f 	andpl.w	r2, r2, #15
 8021d96:	1112      	asrmi	r2, r2, #4
 8021d98:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021d9c:	b2d2      	uxtb	r2, r2
 8021d9e:	b1c2      	cbz	r2, 8021dd2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8021da0:	9d04      	ldr	r5, [sp, #16]
 8021da2:	436a      	muls	r2, r5
 8021da4:	1c55      	adds	r5, r2, #1
 8021da6:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8021daa:	4d2e      	ldr	r5, [pc, #184]	; (8021e64 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8021dac:	1212      	asrs	r2, r2, #8
 8021dae:	682e      	ldr	r6, [r5, #0]
 8021db0:	2aff      	cmp	r2, #255	; 0xff
 8021db2:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8021db6:	d113      	bne.n	8021de0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8021db8:	0972      	lsrs	r2, r6, #5
 8021dba:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8021dbe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021dc2:	f025 0507 	bic.w	r5, r5, #7
 8021dc6:	4315      	orrs	r5, r2
 8021dc8:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021dcc:	4335      	orrs	r5, r6
 8021dce:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8021dd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021dd4:	4410      	add	r0, r2
 8021dd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021dd8:	f108 0801 	add.w	r8, r8, #1
 8021ddc:	4411      	add	r1, r2
 8021dde:	e7c9      	b.n	8021d74 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8021de0:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8021de4:	fa1f fa82 	uxth.w	sl, r2
 8021de8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021dec:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8021df0:	43d2      	mvns	r2, r2
 8021df2:	b2d2      	uxtb	r2, r2
 8021df4:	fb17 f70a 	smulbb	r7, r7, sl
 8021df8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021dfc:	fb0c 7c02 	mla	ip, ip, r2, r7
 8021e00:	b2f6      	uxtb	r6, r6
 8021e02:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021e06:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021e0a:	fa5f fe8e 	uxtb.w	lr, lr
 8021e0e:	fb16 f60a 	smulbb	r6, r6, sl
 8021e12:	fb0e 6602 	mla	r6, lr, r2, r6
 8021e16:	b2ed      	uxtb	r5, r5
 8021e18:	fa1f fc8c 	uxth.w	ip, ip
 8021e1c:	fb15 f50a 	smulbb	r5, r5, sl
 8021e20:	b2b6      	uxth	r6, r6
 8021e22:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021e26:	fb07 5702 	mla	r7, r7, r2, r5
 8021e2a:	f10c 0201 	add.w	r2, ip, #1
 8021e2e:	1c75      	adds	r5, r6, #1
 8021e30:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021e34:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8021e38:	b2bf      	uxth	r7, r7
 8021e3a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021e3e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021e42:	ea45 0c0c 	orr.w	ip, r5, ip
 8021e46:	1c7d      	adds	r5, r7, #1
 8021e48:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8021e4c:	096d      	lsrs	r5, r5, #5
 8021e4e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021e52:	ea4c 0c05 	orr.w	ip, ip, r5
 8021e56:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8021e5a:	e7ba      	b.n	8021dd2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8021e5c:	b007      	add	sp, #28
 8021e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e62:	bf00      	nop
 8021e64:	20009784 	.word	0x20009784

08021e68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e6c:	b087      	sub	sp, #28
 8021e6e:	f8df 830c 	ldr.w	r8, [pc, #780]	; 802217c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8021e72:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021e74:	9205      	str	r2, [sp, #20]
 8021e76:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8021e7a:	9101      	str	r1, [sp, #4]
 8021e7c:	6841      	ldr	r1, [r0, #4]
 8021e7e:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8021e82:	fb01 2404 	mla	r4, r1, r4, r2
 8021e86:	6802      	ldr	r2, [r0, #0]
 8021e88:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021e8c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021e90:	3201      	adds	r2, #1
 8021e92:	f022 0201 	bic.w	r2, r2, #1
 8021e96:	9202      	str	r2, [sp, #8]
 8021e98:	f8db 2000 	ldr.w	r2, [fp]
 8021e9c:	9203      	str	r2, [sp, #12]
 8021e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021ea2:	9a01      	ldr	r2, [sp, #4]
 8021ea4:	2a00      	cmp	r2, #0
 8021ea6:	dc03      	bgt.n	8021eb0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021ea8:	9a05      	ldr	r2, [sp, #20]
 8021eaa:	2a00      	cmp	r2, #0
 8021eac:	f340 8162 	ble.w	8022174 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8021eb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021eb2:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8021eb6:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8021eba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021ebe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021ec0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021ec4:	2b00      	cmp	r3, #0
 8021ec6:	dd0e      	ble.n	8021ee6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8021ec8:	1402      	asrs	r2, r0, #16
 8021eca:	d405      	bmi.n	8021ed8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021ecc:	42ba      	cmp	r2, r7
 8021ece:	da03      	bge.n	8021ed8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021ed0:	140a      	asrs	r2, r1, #16
 8021ed2:	d401      	bmi.n	8021ed8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021ed4:	42b2      	cmp	r2, r6
 8021ed6:	db07      	blt.n	8021ee8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8021ed8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021eda:	4410      	add	r0, r2
 8021edc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021ede:	3b01      	subs	r3, #1
 8021ee0:	4411      	add	r1, r2
 8021ee2:	3402      	adds	r4, #2
 8021ee4:	e7ee      	b.n	8021ec4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021ee6:	d017      	beq.n	8021f18 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021ee8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021eea:	1e5a      	subs	r2, r3, #1
 8021eec:	fb05 0502 	mla	r5, r5, r2, r0
 8021ef0:	142d      	asrs	r5, r5, #16
 8021ef2:	d409      	bmi.n	8021f08 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021ef4:	42bd      	cmp	r5, r7
 8021ef6:	da07      	bge.n	8021f08 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021ef8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021efa:	fb05 1202 	mla	r2, r5, r2, r1
 8021efe:	1412      	asrs	r2, r2, #16
 8021f00:	d402      	bmi.n	8021f08 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021f02:	42b2      	cmp	r2, r6
 8021f04:	f2c0 80c3 	blt.w	802208e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8021f08:	2500      	movs	r5, #0
 8021f0a:	195a      	adds	r2, r3, r5
 8021f0c:	2a00      	cmp	r2, #0
 8021f0e:	dc3f      	bgt.n	8021f90 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8021f10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021f14:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021f18:	9b01      	ldr	r3, [sp, #4]
 8021f1a:	2b00      	cmp	r3, #0
 8021f1c:	f340 812a 	ble.w	8022174 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8021f20:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021f24:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021f28:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021f2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021f2e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021f32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021f36:	eeb0 6a62 	vmov.f32	s12, s5
 8021f3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021f3e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021f42:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021f46:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021f4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021f4e:	eeb0 6a43 	vmov.f32	s12, s6
 8021f52:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021f56:	ee12 2a90 	vmov	r2, s5
 8021f5a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021f5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f62:	ee13 2a10 	vmov	r2, s6
 8021f66:	9313      	str	r3, [sp, #76]	; 0x4c
 8021f68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021f6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f6e:	9314      	str	r3, [sp, #80]	; 0x50
 8021f70:	9b01      	ldr	r3, [sp, #4]
 8021f72:	9a05      	ldr	r2, [sp, #20]
 8021f74:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021f78:	3b01      	subs	r3, #1
 8021f7a:	9301      	str	r3, [sp, #4]
 8021f7c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021f80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021f82:	eeb0 3a67 	vmov.f32	s6, s15
 8021f86:	bf08      	it	eq
 8021f88:	4613      	moveq	r3, r2
 8021f8a:	eef0 2a47 	vmov.f32	s5, s14
 8021f8e:	e788      	b.n	8021ea2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021f90:	1406      	asrs	r6, r0, #16
 8021f92:	d42c      	bmi.n	8021fee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021f94:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021f98:	42b2      	cmp	r2, r6
 8021f9a:	dd28      	ble.n	8021fee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021f9c:	140f      	asrs	r7, r1, #16
 8021f9e:	d426      	bmi.n	8021fee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021fa0:	f8db 200c 	ldr.w	r2, [fp, #12]
 8021fa4:	42ba      	cmp	r2, r7
 8021fa6:	dd22      	ble.n	8021fee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021fa8:	9a02      	ldr	r2, [sp, #8]
 8021faa:	fb07 6602 	mla	r6, r7, r2, r6
 8021fae:	0872      	lsrs	r2, r6, #1
 8021fb0:	9f03      	ldr	r7, [sp, #12]
 8021fb2:	5cba      	ldrb	r2, [r7, r2]
 8021fb4:	07f6      	lsls	r6, r6, #31
 8021fb6:	bf54      	ite	pl
 8021fb8:	f002 020f 	andpl.w	r2, r2, #15
 8021fbc:	1112      	asrmi	r2, r2, #4
 8021fbe:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021fc2:	b2d2      	uxtb	r2, r2
 8021fc4:	2aff      	cmp	r2, #255	; 0xff
 8021fc6:	d118      	bne.n	8021ffa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8021fc8:	f8d8 2000 	ldr.w	r2, [r8]
 8021fcc:	f06f 0601 	mvn.w	r6, #1
 8021fd0:	fb06 f705 	mul.w	r7, r6, r5
 8021fd4:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8021fd8:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8021fdc:	0956      	lsrs	r6, r2, #5
 8021fde:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021fe2:	ea4c 0606 	orr.w	r6, ip, r6
 8021fe6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021fea:	4316      	orrs	r6, r2
 8021fec:	53e6      	strh	r6, [r4, r7]
 8021fee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021ff0:	4410      	add	r0, r2
 8021ff2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021ff4:	3d01      	subs	r5, #1
 8021ff6:	4411      	add	r1, r2
 8021ff8:	e787      	b.n	8021f0a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021ffa:	2a00      	cmp	r2, #0
 8021ffc:	d0f7      	beq.n	8021fee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021ffe:	f06f 0601 	mvn.w	r6, #1
 8022002:	436e      	muls	r6, r5
 8022004:	f8d8 c000 	ldr.w	ip, [r8]
 8022008:	f834 e006 	ldrh.w	lr, [r4, r6]
 802200c:	9604      	str	r6, [sp, #16]
 802200e:	fa1f f982 	uxth.w	r9, r2
 8022012:	ea4f 272e 	mov.w	r7, lr, asr #8
 8022016:	f3cc 4607 	ubfx	r6, ip, #16, #8
 802201a:	43d2      	mvns	r2, r2
 802201c:	b2d2      	uxtb	r2, r2
 802201e:	fb16 f609 	smulbb	r6, r6, r9
 8022022:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022026:	fb07 6702 	mla	r7, r7, r2, r6
 802202a:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 802202e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022032:	fa5f fc8c 	uxtb.w	ip, ip
 8022036:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802203a:	fa5f fe8e 	uxtb.w	lr, lr
 802203e:	fb1c fc09 	smulbb	ip, ip, r9
 8022042:	fb0e cc02 	mla	ip, lr, r2, ip
 8022046:	b2bf      	uxth	r7, r7
 8022048:	fb1a fa09 	smulbb	sl, sl, r9
 802204c:	fa1f fc8c 	uxth.w	ip, ip
 8022050:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022054:	fb06 a602 	mla	r6, r6, r2, sl
 8022058:	1c7a      	adds	r2, r7, #1
 802205a:	f10c 0a01 	add.w	sl, ip, #1
 802205e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8022062:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8022066:	b2b6      	uxth	r6, r6
 8022068:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802206c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8022070:	ea4a 0707 	orr.w	r7, sl, r7
 8022074:	f106 0a01 	add.w	sl, r6, #1
 8022078:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802207c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022080:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022084:	9a04      	ldr	r2, [sp, #16]
 8022086:	ea47 070a 	orr.w	r7, r7, sl
 802208a:	52a7      	strh	r7, [r4, r2]
 802208c:	e7af      	b.n	8021fee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802208e:	f04f 0e00 	mov.w	lr, #0
 8022092:	eba3 020e 	sub.w	r2, r3, lr
 8022096:	2a00      	cmp	r2, #0
 8022098:	f77f af3a 	ble.w	8021f10 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802209c:	9e02      	ldr	r6, [sp, #8]
 802209e:	1402      	asrs	r2, r0, #16
 80220a0:	140d      	asrs	r5, r1, #16
 80220a2:	fb06 2505 	mla	r5, r6, r5, r2
 80220a6:	086a      	lsrs	r2, r5, #1
 80220a8:	9e03      	ldr	r6, [sp, #12]
 80220aa:	5cb2      	ldrb	r2, [r6, r2]
 80220ac:	07ed      	lsls	r5, r5, #31
 80220ae:	bf54      	ite	pl
 80220b0:	f002 020f 	andpl.w	r2, r2, #15
 80220b4:	1112      	asrmi	r2, r2, #4
 80220b6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80220ba:	b2d2      	uxtb	r2, r2
 80220bc:	2aff      	cmp	r2, #255	; 0xff
 80220be:	d115      	bne.n	80220ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80220c0:	f8d8 5000 	ldr.w	r5, [r8]
 80220c4:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 80220c8:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 80220cc:	096a      	lsrs	r2, r5, #5
 80220ce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80220d2:	4332      	orrs	r2, r6
 80220d4:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80220d8:	432a      	orrs	r2, r5
 80220da:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 80220de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80220e0:	4410      	add	r0, r2
 80220e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80220e4:	f10e 0e01 	add.w	lr, lr, #1
 80220e8:	4411      	add	r1, r2
 80220ea:	e7d2      	b.n	8022092 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80220ec:	2a00      	cmp	r2, #0
 80220ee:	d0f6      	beq.n	80220de <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80220f0:	f8d8 7000 	ldr.w	r7, [r8]
 80220f4:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80220f8:	fa1f f982 	uxth.w	r9, r2
 80220fc:	ea4f 262c 	mov.w	r6, ip, asr #8
 8022100:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8022104:	43d2      	mvns	r2, r2
 8022106:	b2d2      	uxtb	r2, r2
 8022108:	fb15 f509 	smulbb	r5, r5, r9
 802210c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022110:	fb06 5602 	mla	r6, r6, r2, r5
 8022114:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8022118:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802211c:	b2ff      	uxtb	r7, r7
 802211e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022122:	fa5f fc8c 	uxtb.w	ip, ip
 8022126:	fb17 f709 	smulbb	r7, r7, r9
 802212a:	fb0c 7702 	mla	r7, ip, r2, r7
 802212e:	b2b6      	uxth	r6, r6
 8022130:	fb1a fa09 	smulbb	sl, sl, r9
 8022134:	b2bf      	uxth	r7, r7
 8022136:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802213a:	fb05 a502 	mla	r5, r5, r2, sl
 802213e:	1c72      	adds	r2, r6, #1
 8022140:	f107 0a01 	add.w	sl, r7, #1
 8022144:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8022148:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 802214c:	b2ad      	uxth	r5, r5
 802214e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022152:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8022156:	ea4a 0606 	orr.w	r6, sl, r6
 802215a:	f105 0a01 	add.w	sl, r5, #1
 802215e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8022162:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022166:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802216a:	ea46 060a 	orr.w	r6, r6, sl
 802216e:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8022172:	e7b4      	b.n	80220de <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8022174:	b007      	add	sp, #28
 8022176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802217a:	bf00      	nop
 802217c:	20009784 	.word	0x20009784

08022180 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8022180:	4770      	bx	lr

08022182 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8022182:	4770      	bx	lr

08022184 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8022184:	4770      	bx	lr

08022186 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8022186:	4770      	bx	lr

08022188 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8022188:	4770      	bx	lr

0802218a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802218a:	4770      	bx	lr

0802218c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802218c:	4770      	bx	lr

0802218e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802218e:	4770      	bx	lr

08022190 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8022190:	4770      	bx	lr

08022192 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8022192:	4770      	bx	lr

08022194 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8022194:	4770      	bx	lr

08022196 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8022196:	4770      	bx	lr

08022198 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8022198:	4770      	bx	lr

0802219a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802219a:	4770      	bx	lr

0802219c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802219c:	4770      	bx	lr

0802219e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 802219e:	4770      	bx	lr

080221a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80221a0:	4770      	bx	lr

080221a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80221a2:	4770      	bx	lr

080221a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80221a4:	4770      	bx	lr

080221a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80221a6:	4770      	bx	lr

080221a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80221a8:	4770      	bx	lr

080221aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80221aa:	4770      	bx	lr

080221ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80221ac:	4770      	bx	lr

080221ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80221ae:	4770      	bx	lr

080221b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80221b0:	4770      	bx	lr

080221b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80221b2:	4770      	bx	lr

080221b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80221b4:	4770      	bx	lr

080221b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80221b6:	4770      	bx	lr

080221b8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 80221b8:	b508      	push	{r3, lr}
 80221ba:	4b06      	ldr	r3, [pc, #24]	; (80221d4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 80221bc:	8818      	ldrh	r0, [r3, #0]
 80221be:	b928      	cbnz	r0, 80221cc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 80221c0:	4b05      	ldr	r3, [pc, #20]	; (80221d8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 80221c2:	4a06      	ldr	r2, [pc, #24]	; (80221dc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 80221c4:	4806      	ldr	r0, [pc, #24]	; (80221e0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 80221c6:	2150      	movs	r1, #80	; 0x50
 80221c8:	f00b fe7a 	bl	802dec0 <__assert_func>
 80221cc:	0040      	lsls	r0, r0, #1
 80221ce:	b280      	uxth	r0, r0
 80221d0:	bd08      	pop	{r3, pc}
 80221d2:	bf00      	nop
 80221d4:	20009776 	.word	0x20009776
 80221d8:	08032c23 	.word	0x08032c23
 80221dc:	0803321c 	.word	0x0803321c
 80221e0:	08032c65 	.word	0x08032c65

080221e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80221e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221e8:	b08b      	sub	sp, #44	; 0x2c
 80221ea:	460f      	mov	r7, r1
 80221ec:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 80221f0:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 80221f4:	4616      	mov	r6, r2
 80221f6:	f1bb 0f00 	cmp.w	fp, #0
 80221fa:	d049      	beq.n	8022290 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80221fc:	6810      	ldr	r0, [r2, #0]
 80221fe:	6851      	ldr	r1, [r2, #4]
 8022200:	ad06      	add	r5, sp, #24
 8022202:	c503      	stmia	r5!, {r0, r1}
 8022204:	6818      	ldr	r0, [r3, #0]
 8022206:	6859      	ldr	r1, [r3, #4]
 8022208:	ad08      	add	r5, sp, #32
 802220a:	c503      	stmia	r5!, {r0, r1}
 802220c:	a806      	add	r0, sp, #24
 802220e:	f7f9 fd7f 	bl	801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022212:	4631      	mov	r1, r6
 8022214:	a808      	add	r0, sp, #32
 8022216:	f7f9 fdbf 	bl	801bd98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802221a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802221e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8022222:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8022226:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 802222a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 802222e:	fb16 2103 	smlabb	r1, r6, r3, r2
 8022232:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8022236:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 802223a:	4f5f      	ldr	r7, [pc, #380]	; (80223b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802223c:	440a      	add	r2, r1
 802223e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8022242:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8022246:	6838      	ldr	r0, [r7, #0]
 8022248:	4413      	add	r3, r2
 802224a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 802224e:	6803      	ldr	r3, [r0, #0]
 8022250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022252:	4798      	blx	r3
 8022254:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022258:	46b9      	mov	r9, r7
 802225a:	d01c      	beq.n	8022296 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 802225c:	f010 0f04 	tst.w	r0, #4
 8022260:	d01d      	beq.n	802229e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8022262:	f8d9 0000 	ldr.w	r0, [r9]
 8022266:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 802226a:	6801      	ldr	r1, [r0, #0]
 802226c:	f8cd b00c 	str.w	fp, [sp, #12]
 8022270:	2700      	movs	r7, #0
 8022272:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8022276:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 802227a:	9402      	str	r4, [sp, #8]
 802227c:	b2ad      	uxth	r5, r5
 802227e:	fa1f f488 	uxth.w	r4, r8
 8022282:	9501      	str	r5, [sp, #4]
 8022284:	9400      	str	r4, [sp, #0]
 8022286:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8022288:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802228c:	4631      	mov	r1, r6
 802228e:	47a0      	blx	r4
 8022290:	b00b      	add	sp, #44	; 0x2c
 8022292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022296:	b914      	cbnz	r4, 802229e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8022298:	f010 0f01 	tst.w	r0, #1
 802229c:	e7e0      	b.n	8022260 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 802229e:	f8d9 0000 	ldr.w	r0, [r9]
 80222a2:	6803      	ldr	r3, [r0, #0]
 80222a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80222a6:	4798      	blx	r3
 80222a8:	4b44      	ldr	r3, [pc, #272]	; (80223bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 80222aa:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 80222ae:	881a      	ldrh	r2, [r3, #0]
 80222b0:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80222b4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80222b8:	fb02 1404 	mla	r4, r2, r4, r1
 80222bc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80222c0:	469a      	mov	sl, r3
 80222c2:	fb05 f502 	mul.w	r5, r5, r2
 80222c6:	ea4f 0748 	mov.w	r7, r8, lsl #1
 80222ca:	d059      	beq.n	8022380 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 80222cc:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 80222d0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80222d4:	fa1f f28b 	uxth.w	r2, fp
 80222d8:	fa1f f989 	uxth.w	r9, r9
 80222dc:	469e      	mov	lr, r3
 80222de:	42ac      	cmp	r4, r5
 80222e0:	d264      	bcs.n	80223ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80222e2:	eb04 0a07 	add.w	sl, r4, r7
 80222e6:	4554      	cmp	r4, sl
 80222e8:	d23d      	bcs.n	8022366 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 80222ea:	8821      	ldrh	r1, [r4, #0]
 80222ec:	f836 3b02 	ldrh.w	r3, [r6], #2
 80222f0:	1208      	asrs	r0, r1, #8
 80222f2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80222f6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80222fa:	fb10 f009 	smulbb	r0, r0, r9
 80222fe:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8022302:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022306:	00c9      	lsls	r1, r1, #3
 8022308:	fb0c 0c02 	mla	ip, ip, r2, r0
 802230c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8022310:	10d8      	asrs	r0, r3, #3
 8022312:	b2c9      	uxtb	r1, r1
 8022314:	00db      	lsls	r3, r3, #3
 8022316:	fa1f fc8c 	uxth.w	ip, ip
 802231a:	fb1b fb09 	smulbb	fp, fp, r9
 802231e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022322:	b2db      	uxtb	r3, r3
 8022324:	fb11 f109 	smulbb	r1, r1, r9
 8022328:	fb00 b002 	mla	r0, r0, r2, fp
 802232c:	fb03 1302 	mla	r3, r3, r2, r1
 8022330:	f10c 0b01 	add.w	fp, ip, #1
 8022334:	b29b      	uxth	r3, r3
 8022336:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802233a:	b280      	uxth	r0, r0
 802233c:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8022340:	f103 0c01 	add.w	ip, r3, #1
 8022344:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022348:	1c43      	adds	r3, r0, #1
 802234a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802234e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022352:	0940      	lsrs	r0, r0, #5
 8022354:	ea4c 0c0b 	orr.w	ip, ip, fp
 8022358:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802235c:	ea4c 0c00 	orr.w	ip, ip, r0
 8022360:	f824 cb02 	strh.w	ip, [r4], #2
 8022364:	e7bf      	b.n	80222e6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8022366:	f8be 3000 	ldrh.w	r3, [lr]
 802236a:	eba3 0308 	sub.w	r3, r3, r8
 802236e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8022372:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8022376:	eba3 0308 	sub.w	r3, r3, r8
 802237a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802237e:	e7ae      	b.n	80222de <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8022380:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8022384:	f8d9 0000 	ldr.w	r0, [r9]
 8022388:	42ac      	cmp	r4, r5
 802238a:	6803      	ldr	r3, [r0, #0]
 802238c:	d20e      	bcs.n	80223ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802238e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8022392:	4632      	mov	r2, r6
 8022394:	463b      	mov	r3, r7
 8022396:	4621      	mov	r1, r4
 8022398:	47c0      	blx	r8
 802239a:	f8ba 3000 	ldrh.w	r3, [sl]
 802239e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80223a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80223a6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80223aa:	e7eb      	b.n	8022384 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 80223ac:	4b02      	ldr	r3, [pc, #8]	; (80223b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80223ae:	6818      	ldr	r0, [r3, #0]
 80223b0:	6803      	ldr	r3, [r0, #0]
 80223b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80223b4:	4798      	blx	r3
 80223b6:	e76b      	b.n	8022290 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80223b8:	2000977c 	.word	0x2000977c
 80223bc:	20009776 	.word	0x20009776

080223c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80223c0:	b510      	push	{r4, lr}
 80223c2:	2104      	movs	r1, #4
 80223c4:	4604      	mov	r4, r0
 80223c6:	f00a ff5c 	bl	802d282 <_ZdlPvj>
 80223ca:	4620      	mov	r0, r4
 80223cc:	bd10      	pop	{r4, pc}

080223ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80223ce:	b510      	push	{r4, lr}
 80223d0:	2104      	movs	r1, #4
 80223d2:	4604      	mov	r4, r0
 80223d4:	f00a ff55 	bl	802d282 <_ZdlPvj>
 80223d8:	4620      	mov	r0, r4
 80223da:	bd10      	pop	{r4, pc}

080223dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80223dc:	b510      	push	{r4, lr}
 80223de:	2104      	movs	r1, #4
 80223e0:	4604      	mov	r4, r0
 80223e2:	f00a ff4e 	bl	802d282 <_ZdlPvj>
 80223e6:	4620      	mov	r0, r4
 80223e8:	bd10      	pop	{r4, pc}

080223ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80223ea:	b510      	push	{r4, lr}
 80223ec:	2104      	movs	r1, #4
 80223ee:	4604      	mov	r4, r0
 80223f0:	f00a ff47 	bl	802d282 <_ZdlPvj>
 80223f4:	4620      	mov	r0, r4
 80223f6:	bd10      	pop	{r4, pc}

080223f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80223f8:	b510      	push	{r4, lr}
 80223fa:	2104      	movs	r1, #4
 80223fc:	4604      	mov	r4, r0
 80223fe:	f00a ff40 	bl	802d282 <_ZdlPvj>
 8022402:	4620      	mov	r0, r4
 8022404:	bd10      	pop	{r4, pc}

08022406 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8022406:	b510      	push	{r4, lr}
 8022408:	2104      	movs	r1, #4
 802240a:	4604      	mov	r4, r0
 802240c:	f00a ff39 	bl	802d282 <_ZdlPvj>
 8022410:	4620      	mov	r0, r4
 8022412:	bd10      	pop	{r4, pc}

08022414 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022414:	b510      	push	{r4, lr}
 8022416:	2104      	movs	r1, #4
 8022418:	4604      	mov	r4, r0
 802241a:	f00a ff32 	bl	802d282 <_ZdlPvj>
 802241e:	4620      	mov	r0, r4
 8022420:	bd10      	pop	{r4, pc}

08022422 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8022422:	b510      	push	{r4, lr}
 8022424:	2104      	movs	r1, #4
 8022426:	4604      	mov	r4, r0
 8022428:	f00a ff2b 	bl	802d282 <_ZdlPvj>
 802242c:	4620      	mov	r0, r4
 802242e:	bd10      	pop	{r4, pc}

08022430 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8022430:	b510      	push	{r4, lr}
 8022432:	2104      	movs	r1, #4
 8022434:	4604      	mov	r4, r0
 8022436:	f00a ff24 	bl	802d282 <_ZdlPvj>
 802243a:	4620      	mov	r0, r4
 802243c:	bd10      	pop	{r4, pc}

0802243e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802243e:	b510      	push	{r4, lr}
 8022440:	2104      	movs	r1, #4
 8022442:	4604      	mov	r4, r0
 8022444:	f00a ff1d 	bl	802d282 <_ZdlPvj>
 8022448:	4620      	mov	r0, r4
 802244a:	bd10      	pop	{r4, pc}

0802244c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802244c:	b510      	push	{r4, lr}
 802244e:	2104      	movs	r1, #4
 8022450:	4604      	mov	r4, r0
 8022452:	f00a ff16 	bl	802d282 <_ZdlPvj>
 8022456:	4620      	mov	r0, r4
 8022458:	bd10      	pop	{r4, pc}

0802245a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802245a:	b510      	push	{r4, lr}
 802245c:	2104      	movs	r1, #4
 802245e:	4604      	mov	r4, r0
 8022460:	f00a ff0f 	bl	802d282 <_ZdlPvj>
 8022464:	4620      	mov	r0, r4
 8022466:	bd10      	pop	{r4, pc}

08022468 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8022468:	b510      	push	{r4, lr}
 802246a:	2104      	movs	r1, #4
 802246c:	4604      	mov	r4, r0
 802246e:	f00a ff08 	bl	802d282 <_ZdlPvj>
 8022472:	4620      	mov	r0, r4
 8022474:	bd10      	pop	{r4, pc}

08022476 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8022476:	b510      	push	{r4, lr}
 8022478:	2104      	movs	r1, #4
 802247a:	4604      	mov	r4, r0
 802247c:	f00a ff01 	bl	802d282 <_ZdlPvj>
 8022480:	4620      	mov	r0, r4
 8022482:	bd10      	pop	{r4, pc}

08022484 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8022484:	b510      	push	{r4, lr}
 8022486:	2104      	movs	r1, #4
 8022488:	4604      	mov	r4, r0
 802248a:	f00a fefa 	bl	802d282 <_ZdlPvj>
 802248e:	4620      	mov	r0, r4
 8022490:	bd10      	pop	{r4, pc}

08022492 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8022492:	b510      	push	{r4, lr}
 8022494:	2104      	movs	r1, #4
 8022496:	4604      	mov	r4, r0
 8022498:	f00a fef3 	bl	802d282 <_ZdlPvj>
 802249c:	4620      	mov	r0, r4
 802249e:	bd10      	pop	{r4, pc}

080224a0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80224a0:	b510      	push	{r4, lr}
 80224a2:	2104      	movs	r1, #4
 80224a4:	4604      	mov	r4, r0
 80224a6:	f00a feec 	bl	802d282 <_ZdlPvj>
 80224aa:	4620      	mov	r0, r4
 80224ac:	bd10      	pop	{r4, pc}

080224ae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80224ae:	b510      	push	{r4, lr}
 80224b0:	2104      	movs	r1, #4
 80224b2:	4604      	mov	r4, r0
 80224b4:	f00a fee5 	bl	802d282 <_ZdlPvj>
 80224b8:	4620      	mov	r0, r4
 80224ba:	bd10      	pop	{r4, pc}

080224bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80224bc:	b510      	push	{r4, lr}
 80224be:	2104      	movs	r1, #4
 80224c0:	4604      	mov	r4, r0
 80224c2:	f00a fede 	bl	802d282 <_ZdlPvj>
 80224c6:	4620      	mov	r0, r4
 80224c8:	bd10      	pop	{r4, pc}

080224ca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 80224ca:	b510      	push	{r4, lr}
 80224cc:	2104      	movs	r1, #4
 80224ce:	4604      	mov	r4, r0
 80224d0:	f00a fed7 	bl	802d282 <_ZdlPvj>
 80224d4:	4620      	mov	r0, r4
 80224d6:	bd10      	pop	{r4, pc}

080224d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80224d8:	b510      	push	{r4, lr}
 80224da:	2104      	movs	r1, #4
 80224dc:	4604      	mov	r4, r0
 80224de:	f00a fed0 	bl	802d282 <_ZdlPvj>
 80224e2:	4620      	mov	r0, r4
 80224e4:	bd10      	pop	{r4, pc}

080224e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80224e6:	b510      	push	{r4, lr}
 80224e8:	2104      	movs	r1, #4
 80224ea:	4604      	mov	r4, r0
 80224ec:	f00a fec9 	bl	802d282 <_ZdlPvj>
 80224f0:	4620      	mov	r0, r4
 80224f2:	bd10      	pop	{r4, pc}

080224f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80224f4:	b510      	push	{r4, lr}
 80224f6:	2104      	movs	r1, #4
 80224f8:	4604      	mov	r4, r0
 80224fa:	f00a fec2 	bl	802d282 <_ZdlPvj>
 80224fe:	4620      	mov	r0, r4
 8022500:	bd10      	pop	{r4, pc}

08022502 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8022502:	b510      	push	{r4, lr}
 8022504:	2104      	movs	r1, #4
 8022506:	4604      	mov	r4, r0
 8022508:	f00a febb 	bl	802d282 <_ZdlPvj>
 802250c:	4620      	mov	r0, r4
 802250e:	bd10      	pop	{r4, pc}

08022510 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8022510:	b510      	push	{r4, lr}
 8022512:	2104      	movs	r1, #4
 8022514:	4604      	mov	r4, r0
 8022516:	f00a feb4 	bl	802d282 <_ZdlPvj>
 802251a:	4620      	mov	r0, r4
 802251c:	bd10      	pop	{r4, pc}

0802251e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 802251e:	b510      	push	{r4, lr}
 8022520:	2104      	movs	r1, #4
 8022522:	4604      	mov	r4, r0
 8022524:	f00a fead 	bl	802d282 <_ZdlPvj>
 8022528:	4620      	mov	r0, r4
 802252a:	bd10      	pop	{r4, pc}

0802252c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 802252c:	b510      	push	{r4, lr}
 802252e:	2104      	movs	r1, #4
 8022530:	4604      	mov	r4, r0
 8022532:	f00a fea6 	bl	802d282 <_ZdlPvj>
 8022536:	4620      	mov	r0, r4
 8022538:	bd10      	pop	{r4, pc}

0802253a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 802253a:	b510      	push	{r4, lr}
 802253c:	2104      	movs	r1, #4
 802253e:	4604      	mov	r4, r0
 8022540:	f00a fe9f 	bl	802d282 <_ZdlPvj>
 8022544:	4620      	mov	r0, r4
 8022546:	bd10      	pop	{r4, pc}

08022548 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8022548:	b5f0      	push	{r4, r5, r6, r7, lr}
 802254a:	4606      	mov	r6, r0
 802254c:	b087      	sub	sp, #28
 802254e:	460c      	mov	r4, r1
 8022550:	4617      	mov	r7, r2
 8022552:	461d      	mov	r5, r3
 8022554:	b333      	cbz	r3, 80225a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022556:	4608      	mov	r0, r1
 8022558:	f7f5 f809 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 802255c:	bb10      	cbnz	r0, 80225a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 802255e:	6820      	ldr	r0, [r4, #0]
 8022560:	6861      	ldr	r1, [r4, #4]
 8022562:	4c1c      	ldr	r4, [pc, #112]	; (80225d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8022564:	ab04      	add	r3, sp, #16
 8022566:	c303      	stmia	r3!, {r0, r1}
 8022568:	a804      	add	r0, sp, #16
 802256a:	f7f9 fbd1 	bl	801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802256e:	6820      	ldr	r0, [r4, #0]
 8022570:	6803      	ldr	r3, [r0, #0]
 8022572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022574:	4798      	blx	r3
 8022576:	2dff      	cmp	r5, #255	; 0xff
 8022578:	d016      	beq.n	80225a8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 802257a:	f010 0f08 	tst.w	r0, #8
 802257e:	6820      	ldr	r0, [r4, #0]
 8022580:	d015      	beq.n	80225ae <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8022582:	2400      	movs	r4, #0
 8022584:	6801      	ldr	r1, [r0, #0]
 8022586:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802258a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802258e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8022592:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8022596:	9401      	str	r4, [sp, #4]
 8022598:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 802259c:	9400      	str	r4, [sp, #0]
 802259e:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 80225a0:	4639      	mov	r1, r7
 80225a2:	47a0      	blx	r4
 80225a4:	b007      	add	sp, #28
 80225a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80225a8:	f010 0f02 	tst.w	r0, #2
 80225ac:	e7e7      	b.n	802257e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 80225ae:	6803      	ldr	r3, [r0, #0]
 80225b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80225b2:	4798      	blx	r3
 80225b4:	4b08      	ldr	r3, [pc, #32]	; (80225d8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80225b6:	881a      	ldrh	r2, [r3, #0]
 80225b8:	6833      	ldr	r3, [r6, #0]
 80225ba:	e9cd 7500 	strd	r7, r5, [sp]
 80225be:	4601      	mov	r1, r0
 80225c0:	69dd      	ldr	r5, [r3, #28]
 80225c2:	4630      	mov	r0, r6
 80225c4:	ab04      	add	r3, sp, #16
 80225c6:	47a8      	blx	r5
 80225c8:	6820      	ldr	r0, [r4, #0]
 80225ca:	6803      	ldr	r3, [r0, #0]
 80225cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80225ce:	4798      	blx	r3
 80225d0:	e7e8      	b.n	80225a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80225d2:	bf00      	nop
 80225d4:	2000977c 	.word	0x2000977c
 80225d8:	20009776 	.word	0x20009776

080225dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80225dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225e0:	4f97      	ldr	r7, [pc, #604]	; (8022840 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 80225e2:	4616      	mov	r6, r2
 80225e4:	683a      	ldr	r2, [r7, #0]
 80225e6:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80225ea:	2a02      	cmp	r2, #2
 80225ec:	b08f      	sub	sp, #60	; 0x3c
 80225ee:	4604      	mov	r4, r0
 80225f0:	4689      	mov	r9, r1
 80225f2:	d106      	bne.n	8022602 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 80225f4:	4b93      	ldr	r3, [pc, #588]	; (8022844 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 80225f6:	4a94      	ldr	r2, [pc, #592]	; (8022848 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80225f8:	f44f 7159 	mov.w	r1, #868	; 0x364
 80225fc:	4893      	ldr	r0, [pc, #588]	; (802284c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 80225fe:	f00b fc5f 	bl	802dec0 <__assert_func>
 8022602:	ad0e      	add	r5, sp, #56	; 0x38
 8022604:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8022608:	4628      	mov	r0, r5
 802260a:	f7fd fad3 	bl	801fbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802260e:	6823      	ldr	r3, [r4, #0]
 8022610:	4680      	mov	r8, r0
 8022612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022614:	4620      	mov	r0, r4
 8022616:	4798      	blx	r3
 8022618:	4580      	cmp	r8, r0
 802261a:	d004      	beq.n	8022626 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 802261c:	4b8c      	ldr	r3, [pc, #560]	; (8022850 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 802261e:	4a8a      	ldr	r2, [pc, #552]	; (8022848 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8022620:	f240 3166 	movw	r1, #870	; 0x366
 8022624:	e7ea      	b.n	80225fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8022626:	4628      	mov	r0, r5
 8022628:	f7fd fa3a 	bl	801faa0 <_ZNK8touchgfx6Bitmap7getDataEv>
 802262c:	4680      	mov	r8, r0
 802262e:	b920      	cbnz	r0, 802263a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8022630:	4b88      	ldr	r3, [pc, #544]	; (8022854 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8022632:	4a85      	ldr	r2, [pc, #532]	; (8022848 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8022634:	f44f 715a 	mov.w	r1, #872	; 0x368
 8022638:	e7e0      	b.n	80225fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802263a:	6830      	ldr	r0, [r6, #0]
 802263c:	6871      	ldr	r1, [r6, #4]
 802263e:	f9b6 a000 	ldrsh.w	sl, [r6]
 8022642:	ab06      	add	r3, sp, #24
 8022644:	c303      	stmia	r3!, {r0, r1}
 8022646:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802264a:	f8d9 0000 	ldr.w	r0, [r9]
 802264e:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8022652:	ab08      	add	r3, sp, #32
 8022654:	c303      	stmia	r3!, {r0, r1}
 8022656:	4628      	mov	r0, r5
 8022658:	f7fd f91a 	bl	801f890 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802265c:	4606      	mov	r6, r0
 802265e:	4628      	mov	r0, r5
 8022660:	f7fd f950 	bl	801f904 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022664:	f10d 0b20 	add.w	fp, sp, #32
 8022668:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 802266c:	a806      	add	r0, sp, #24
 802266e:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8022672:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8022676:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 802267a:	f7f9 fb49 	bl	801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802267e:	4658      	mov	r0, fp
 8022680:	f7f9 fb46 	bl	801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022684:	a80a      	add	r0, sp, #40	; 0x28
 8022686:	f7f9 fb43 	bl	801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802268a:	4d73      	ldr	r5, [pc, #460]	; (8022858 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 802268c:	4b73      	ldr	r3, [pc, #460]	; (802285c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 802268e:	f9b5 2000 	ldrsh.w	r2, [r5]
 8022692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022696:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 802269a:	2100      	movs	r1, #0
 802269c:	910c      	str	r1, [sp, #48]	; 0x30
 802269e:	4658      	mov	r0, fp
 80226a0:	a90c      	add	r1, sp, #48	; 0x30
 80226a2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80226a6:	f7f4 ff1f 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 80226aa:	4658      	mov	r0, fp
 80226ac:	f7f4 ff5f 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 80226b0:	2800      	cmp	r0, #0
 80226b2:	f040 8099 	bne.w	80227e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 80226b6:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80226ba:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80226be:	4288      	cmp	r0, r1
 80226c0:	db37      	blt.n	8022732 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 80226c2:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80226c6:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80226ca:	429a      	cmp	r2, r3
 80226cc:	db31      	blt.n	8022732 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 80226ce:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 80226d2:	4430      	add	r0, r6
 80226d4:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80226d8:	4431      	add	r1, r6
 80226da:	b200      	sxth	r0, r0
 80226dc:	b209      	sxth	r1, r1
 80226de:	4288      	cmp	r0, r1
 80226e0:	dc27      	bgt.n	8022732 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 80226e2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80226e6:	440a      	add	r2, r1
 80226e8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80226ec:	440b      	add	r3, r1
 80226ee:	b212      	sxth	r2, r2
 80226f0:	b21b      	sxth	r3, r3
 80226f2:	429a      	cmp	r2, r3
 80226f4:	dc1d      	bgt.n	8022732 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 80226f6:	6823      	ldr	r3, [r4, #0]
 80226f8:	4620      	mov	r0, r4
 80226fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80226fc:	4798      	blx	r3
 80226fe:	4682      	mov	sl, r0
 8022700:	6838      	ldr	r0, [r7, #0]
 8022702:	6803      	ldr	r3, [r0, #0]
 8022704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022706:	4798      	blx	r3
 8022708:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 802270c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8022710:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8022714:	1a5b      	subs	r3, r3, r1
 8022716:	b29b      	uxth	r3, r3
 8022718:	b21c      	sxth	r4, r3
 802271a:	2c00      	cmp	r4, #0
 802271c:	dc0e      	bgt.n	802273c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 802271e:	bf1f      	itttt	ne
 8022720:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8022724:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8022728:	185b      	addne	r3, r3, r1
 802272a:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 802272e:	4644      	mov	r4, r8
 8022730:	e009      	b.n	8022746 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16a>
 8022732:	4b4b      	ldr	r3, [pc, #300]	; (8022860 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8022734:	4a44      	ldr	r2, [pc, #272]	; (8022848 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8022736:	f240 3176 	movw	r1, #886	; 0x376
 802273a:	e75f      	b.n	80225fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802273c:	1ad3      	subs	r3, r2, r3
 802273e:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8022742:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8022746:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 802274a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 802274e:	1b9b      	subs	r3, r3, r6
 8022750:	b29b      	uxth	r3, r3
 8022752:	b219      	sxth	r1, r3
 8022754:	2900      	cmp	r1, #0
 8022756:	dd4b      	ble.n	80227f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x214>
 8022758:	4351      	muls	r1, r2
 802275a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 802275e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8022762:	1acb      	subs	r3, r1, r3
 8022764:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8022768:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 802276c:	2e00      	cmp	r6, #0
 802276e:	dd3b      	ble.n	80227e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8022770:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8022774:	2b00      	cmp	r3, #0
 8022776:	dd37      	ble.n	80227e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8022778:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 802277c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8022780:	fb0a f90c 	mul.w	r9, sl, ip
 8022784:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8022788:	4481      	add	r9, r0
 802278a:	8828      	ldrh	r0, [r5, #0]
 802278c:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8022790:	42ae      	cmp	r6, r5
 8022792:	bfa8      	it	ge
 8022794:	462e      	movge	r6, r5
 8022796:	1a41      	subs	r1, r0, r1
 8022798:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 802279c:	428e      	cmp	r6, r1
 802279e:	bfa8      	it	ge
 80227a0:	460e      	movge	r6, r1
 80227a2:	429d      	cmp	r5, r3
 80227a4:	bfa8      	it	ge
 80227a6:	461d      	movge	r5, r3
 80227a8:	4b2c      	ldr	r3, [pc, #176]	; (802285c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80227aa:	881b      	ldrh	r3, [r3, #0]
 80227ac:	eba3 030c 	sub.w	r3, r3, ip
 80227b0:	429d      	cmp	r5, r3
 80227b2:	bfa8      	it	ge
 80227b4:	461d      	movge	r5, r3
 80227b6:	42b0      	cmp	r0, r6
 80227b8:	d12c      	bne.n	8022814 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 80227ba:	4290      	cmp	r0, r2
 80227bc:	d12a      	bne.n	8022814 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 80227be:	6838      	ldr	r0, [r7, #0]
 80227c0:	9203      	str	r2, [sp, #12]
 80227c2:	6803      	ldr	r3, [r0, #0]
 80227c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80227c6:	4798      	blx	r3
 80227c8:	07c3      	lsls	r3, r0, #31
 80227ca:	d51a      	bpl.n	8022802 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 80227cc:	9a03      	ldr	r2, [sp, #12]
 80227ce:	6838      	ldr	r0, [r7, #0]
 80227d0:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 80227d4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80227d8:	6803      	ldr	r3, [r0, #0]
 80227da:	9200      	str	r2, [sp, #0]
 80227dc:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 80227de:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80227e2:	4623      	mov	r3, r4
 80227e4:	47a8      	blx	r5
 80227e6:	4680      	mov	r8, r0
 80227e8:	4640      	mov	r0, r8
 80227ea:	b00f      	add	sp, #60	; 0x3c
 80227ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227f0:	bf1f      	itttt	ne
 80227f2:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 80227f6:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 80227fa:	185b      	addne	r3, r3, r1
 80227fc:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8022800:	e7b2      	b.n	8022768 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18c>
 8022802:	6838      	ldr	r0, [r7, #0]
 8022804:	6803      	ldr	r3, [r0, #0]
 8022806:	464a      	mov	r2, r9
 8022808:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 802280a:	4621      	mov	r1, r4
 802280c:	fb05 f30a 	mul.w	r3, r5, sl
 8022810:	47b0      	blx	r6
 8022812:	e7e9      	b.n	80227e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8022814:	4355      	muls	r5, r2
 8022816:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 802281a:	9303      	str	r3, [sp, #12]
 802281c:	0076      	lsls	r6, r6, #1
 802281e:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8022822:	9b03      	ldr	r3, [sp, #12]
 8022824:	429c      	cmp	r4, r3
 8022826:	d2df      	bcs.n	80227e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8022828:	6838      	ldr	r0, [r7, #0]
 802282a:	6803      	ldr	r3, [r0, #0]
 802282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802282e:	464a      	mov	r2, r9
 8022830:	461d      	mov	r5, r3
 8022832:	4621      	mov	r1, r4
 8022834:	4633      	mov	r3, r6
 8022836:	47a8      	blx	r5
 8022838:	44d1      	add	r9, sl
 802283a:	445c      	add	r4, fp
 802283c:	e7f1      	b.n	8022822 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x246>
 802283e:	bf00      	nop
 8022840:	2000977c 	.word	0x2000977c
 8022844:	08032a1b 	.word	0x08032a1b
 8022848:	080332cc 	.word	0x080332cc
 802284c:	08032acd 	.word	0x08032acd
 8022850:	08032aff 	.word	0x08032aff
 8022854:	08032b54 	.word	0x08032b54
 8022858:	20009776 	.word	0x20009776
 802285c:	20009778 	.word	0x20009778
 8022860:	08032b92 	.word	0x08032b92

08022864 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8022864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022868:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 802286c:	9e08      	ldr	r6, [sp, #32]
 802286e:	4688      	mov	r8, r1
 8022870:	4614      	mov	r4, r2
 8022872:	461d      	mov	r5, r3
 8022874:	2f00      	cmp	r7, #0
 8022876:	f000 80b3 	beq.w	80229e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 802287a:	4618      	mov	r0, r3
 802287c:	f7f4 fe77 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 8022880:	2800      	cmp	r0, #0
 8022882:	f040 80ad 	bne.w	80229e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 8022886:	f9b5 1000 	ldrsh.w	r1, [r5]
 802288a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 802288e:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8022892:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8022896:	fb04 1303 	mla	r3, r4, r3, r1
 802289a:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 802289e:	4365      	muls	r5, r4
 80228a0:	2fff      	cmp	r7, #255	; 0xff
 80228a2:	eba4 0200 	sub.w	r2, r4, r0
 80228a6:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 80228aa:	ea4f 2816 	mov.w	r8, r6, lsr #8
 80228ae:	d04b      	beq.n	8022948 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 80228b0:	b2bc      	uxth	r4, r7
 80228b2:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 80228b6:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 80228ba:	fa5f f788 	uxtb.w	r7, r8
 80228be:	b2f3      	uxtb	r3, r6
 80228c0:	0040      	lsls	r0, r0, #1
 80228c2:	fb0e fe04 	mul.w	lr, lr, r4
 80228c6:	4367      	muls	r7, r4
 80228c8:	4363      	muls	r3, r4
 80228ca:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80228ce:	fa1f fc8c 	uxth.w	ip, ip
 80228d2:	42a9      	cmp	r1, r5
 80228d4:	f080 8084 	bcs.w	80229e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 80228d8:	eb01 0900 	add.w	r9, r1, r0
 80228dc:	4549      	cmp	r1, r9
 80228de:	d231      	bcs.n	8022944 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 80228e0:	880a      	ldrh	r2, [r1, #0]
 80228e2:	1214      	asrs	r4, r2, #8
 80228e4:	10d6      	asrs	r6, r2, #3
 80228e6:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80228ea:	00d2      	lsls	r2, r2, #3
 80228ec:	b2d2      	uxtb	r2, r2
 80228ee:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80228f2:	fb14 f40c 	smulbb	r4, r4, ip
 80228f6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80228fa:	4474      	add	r4, lr
 80228fc:	fb12 f20c 	smulbb	r2, r2, ip
 8022900:	b2a4      	uxth	r4, r4
 8022902:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022906:	441a      	add	r2, r3
 8022908:	b292      	uxth	r2, r2
 802290a:	f104 0a01 	add.w	sl, r4, #1
 802290e:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8022912:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022916:	fb16 f60c 	smulbb	r6, r6, ip
 802291a:	f102 0a01 	add.w	sl, r2, #1
 802291e:	443e      	add	r6, r7
 8022920:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8022924:	b2b6      	uxth	r6, r6
 8022926:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802292a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802292e:	4322      	orrs	r2, r4
 8022930:	1c74      	adds	r4, r6, #1
 8022932:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8022936:	0976      	lsrs	r6, r6, #5
 8022938:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802293c:	4332      	orrs	r2, r6
 802293e:	f821 2b02 	strh.w	r2, [r1], #2
 8022942:	e7cb      	b.n	80228dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 8022944:	4441      	add	r1, r8
 8022946:	e7c4      	b.n	80228d2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8022948:	4f26      	ldr	r7, [pc, #152]	; (80229e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x180>)
 802294a:	0973      	lsrs	r3, r6, #5
 802294c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022950:	ea08 0707 	and.w	r7, r8, r7
 8022954:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8022958:	433b      	orrs	r3, r7
 802295a:	4333      	orrs	r3, r6
 802295c:	07e6      	lsls	r6, r4, #31
 802295e:	b29b      	uxth	r3, r3
 8022960:	d50b      	bpl.n	802297a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x116>
 8022962:	0040      	lsls	r0, r0, #1
 8022964:	0052      	lsls	r2, r2, #1
 8022966:	42a9      	cmp	r1, r5
 8022968:	d23a      	bcs.n	80229e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 802296a:	180c      	adds	r4, r1, r0
 802296c:	42a1      	cmp	r1, r4
 802296e:	d202      	bcs.n	8022976 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x112>
 8022970:	f821 3b02 	strh.w	r3, [r1], #2
 8022974:	e7fa      	b.n	802296c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x108>
 8022976:	4411      	add	r1, r2
 8022978:	e7f5      	b.n	8022966 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x102>
 802297a:	078f      	lsls	r7, r1, #30
 802297c:	d008      	beq.n	8022990 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>
 802297e:	0066      	lsls	r6, r4, #1
 8022980:	460a      	mov	r2, r1
 8022982:	42aa      	cmp	r2, r5
 8022984:	d202      	bcs.n	802298c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>
 8022986:	8013      	strh	r3, [r2, #0]
 8022988:	4432      	add	r2, r6
 802298a:	e7fa      	b.n	8022982 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11e>
 802298c:	3102      	adds	r1, #2
 802298e:	3801      	subs	r0, #1
 8022990:	07c6      	lsls	r6, r0, #31
 8022992:	d50b      	bpl.n	80229ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8022994:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8022998:	3a01      	subs	r2, #1
 802299a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 802299e:	0066      	lsls	r6, r4, #1
 80229a0:	42aa      	cmp	r2, r5
 80229a2:	d202      	bcs.n	80229aa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 80229a4:	8013      	strh	r3, [r2, #0]
 80229a6:	4432      	add	r2, r6
 80229a8:	e7fa      	b.n	80229a0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13c>
 80229aa:	3801      	subs	r0, #1
 80229ac:	b1c0      	cbz	r0, 80229e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 80229ae:	1040      	asrs	r0, r0, #1
 80229b0:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 80229b4:	0080      	lsls	r0, r0, #2
 80229b6:	0064      	lsls	r4, r4, #1
 80229b8:	42a9      	cmp	r1, r5
 80229ba:	d211      	bcs.n	80229e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 80229bc:	078a      	lsls	r2, r1, #30
 80229be:	d006      	beq.n	80229ce <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16a>
 80229c0:	4b09      	ldr	r3, [pc, #36]	; (80229e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 80229c2:	4a0a      	ldr	r2, [pc, #40]	; (80229ec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 80229c4:	480a      	ldr	r0, [pc, #40]	; (80229f0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 80229c6:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80229ca:	f00b fa79 	bl	802dec0 <__assert_func>
 80229ce:	180e      	adds	r6, r1, r0
 80229d0:	460a      	mov	r2, r1
 80229d2:	42b2      	cmp	r2, r6
 80229d4:	d202      	bcs.n	80229dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x178>
 80229d6:	f842 3b04 	str.w	r3, [r2], #4
 80229da:	e7fa      	b.n	80229d2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 80229dc:	4421      	add	r1, r4
 80229de:	e7eb      	b.n	80229b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x154>
 80229e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80229e4:	00fff800 	.word	0x00fff800
 80229e8:	080328cc 	.word	0x080328cc
 80229ec:	08032f18 	.word	0x08032f18
 80229f0:	08032acd 	.word	0x08032acd

080229f4 <_ZN8touchgfx8LCD16bppC1Ev>:
 80229f4:	2200      	movs	r2, #0
 80229f6:	4910      	ldr	r1, [pc, #64]	; (8022a38 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 80229f8:	6042      	str	r2, [r0, #4]
 80229fa:	6001      	str	r1, [r0, #0]
 80229fc:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8022a00:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8022a04:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8022a08:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8022a0c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8022a10:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8022a14:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8022a18:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8022a1c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8022a20:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8022a24:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8022a28:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8022a2c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8022a30:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8022a34:	4770      	bx	lr
 8022a36:	bf00      	nop
 8022a38:	08032ed0 	.word	0x08032ed0

08022a3c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8022a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a40:	460d      	mov	r5, r1
 8022a42:	b08d      	sub	sp, #52	; 0x34
 8022a44:	4604      	mov	r4, r0
 8022a46:	6808      	ldr	r0, [r1, #0]
 8022a48:	6849      	ldr	r1, [r1, #4]
 8022a4a:	4699      	mov	r9, r3
 8022a4c:	ab08      	add	r3, sp, #32
 8022a4e:	c303      	stmia	r3!, {r0, r1}
 8022a50:	6810      	ldr	r0, [r2, #0]
 8022a52:	6851      	ldr	r1, [r2, #4]
 8022a54:	ab0a      	add	r3, sp, #40	; 0x28
 8022a56:	c303      	stmia	r3!, {r0, r1}
 8022a58:	a808      	add	r0, sp, #32
 8022a5a:	f7f9 f959 	bl	801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022a5e:	4629      	mov	r1, r5
 8022a60:	a80a      	add	r0, sp, #40	; 0x28
 8022a62:	f7f9 f999 	bl	801bd98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022a66:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8022a6a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8022a6e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8022a72:	4d63      	ldr	r5, [pc, #396]	; (8022c00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022a74:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8022a78:	6828      	ldr	r0, [r5, #0]
 8022a7a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8022a7e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022a82:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022a86:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8022a8a:	440a      	add	r2, r1
 8022a8c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8022a90:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8022a94:	4413      	add	r3, r2
 8022a96:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8022a9a:	6803      	ldr	r3, [r0, #0]
 8022a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022a9e:	4798      	blx	r3
 8022aa0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022aa4:	d119      	bne.n	8022ada <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8022aa6:	f010 0f20 	tst.w	r0, #32
 8022aaa:	6828      	ldr	r0, [r5, #0]
 8022aac:	d018      	beq.n	8022ae0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8022aae:	2500      	movs	r5, #0
 8022ab0:	6801      	ldr	r1, [r0, #0]
 8022ab2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8022ab6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8022aba:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8022abe:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8022ac2:	9502      	str	r5, [sp, #8]
 8022ac4:	b2b6      	uxth	r6, r6
 8022ac6:	fa1f f588 	uxth.w	r5, r8
 8022aca:	9601      	str	r6, [sp, #4]
 8022acc:	9500      	str	r5, [sp, #0]
 8022ace:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8022ad0:	4621      	mov	r1, r4
 8022ad2:	47a8      	blx	r5
 8022ad4:	b00d      	add	sp, #52	; 0x34
 8022ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ada:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022ade:	e7e4      	b.n	8022aaa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8022ae0:	6803      	ldr	r3, [r0, #0]
 8022ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022ae4:	4798      	blx	r3
 8022ae6:	4947      	ldr	r1, [pc, #284]	; (8022c04 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8022ae8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8022aec:	880b      	ldrh	r3, [r1, #0]
 8022aee:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8022af2:	fb03 5202 	mla	r2, r3, r2, r5
 8022af6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022afa:	4373      	muls	r3, r6
 8022afc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022b00:	9307      	str	r3, [sp, #28]
 8022b02:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022b06:	9306      	str	r3, [sp, #24]
 8022b08:	468a      	mov	sl, r1
 8022b0a:	9b07      	ldr	r3, [sp, #28]
 8022b0c:	4298      	cmp	r0, r3
 8022b0e:	d270      	bcs.n	8022bf2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8022b10:	9b06      	ldr	r3, [sp, #24]
 8022b12:	4621      	mov	r1, r4
 8022b14:	eb00 0b03 	add.w	fp, r0, r3
 8022b18:	4558      	cmp	r0, fp
 8022b1a:	d25d      	bcs.n	8022bd8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8022b1c:	f851 4b04 	ldr.w	r4, [r1], #4
 8022b20:	0e23      	lsrs	r3, r4, #24
 8022b22:	d014      	beq.n	8022b4e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022b24:	2bff      	cmp	r3, #255	; 0xff
 8022b26:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8022b2a:	d112      	bne.n	8022b52 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022b2c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022b30:	d10f      	bne.n	8022b52 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022b32:	0963      	lsrs	r3, r4, #5
 8022b34:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8022b38:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022b3c:	f02c 0c07 	bic.w	ip, ip, #7
 8022b40:	ea43 0c0c 	orr.w	ip, r3, ip
 8022b44:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8022b48:	ea4c 0404 	orr.w	r4, ip, r4
 8022b4c:	8004      	strh	r4, [r0, #0]
 8022b4e:	3002      	adds	r0, #2
 8022b50:	e7e2      	b.n	8022b18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8022b52:	fb09 f303 	mul.w	r3, r9, r3
 8022b56:	8807      	ldrh	r7, [r0, #0]
 8022b58:	1c5a      	adds	r2, r3, #1
 8022b5a:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8022b5e:	1212      	asrs	r2, r2, #8
 8022b60:	123e      	asrs	r6, r7, #8
 8022b62:	b293      	uxth	r3, r2
 8022b64:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8022b68:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022b6c:	43d2      	mvns	r2, r2
 8022b6e:	b2d2      	uxtb	r2, r2
 8022b70:	10fd      	asrs	r5, r7, #3
 8022b72:	fb1e fe03 	smulbb	lr, lr, r3
 8022b76:	00ff      	lsls	r7, r7, #3
 8022b78:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022b7c:	fb06 e602 	mla	r6, r6, r2, lr
 8022b80:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022b84:	b2ff      	uxtb	r7, r7
 8022b86:	fa5f fc8c 	uxtb.w	ip, ip
 8022b8a:	b2e4      	uxtb	r4, r4
 8022b8c:	b2b6      	uxth	r6, r6
 8022b8e:	fb1c fc03 	smulbb	ip, ip, r3
 8022b92:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8022b96:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8022b9a:	fb14 f403 	smulbb	r4, r4, r3
 8022b9e:	fb05 c502 	mla	r5, r5, r2, ip
 8022ba2:	f106 0e01 	add.w	lr, r6, #1
 8022ba6:	fb07 4702 	mla	r7, r7, r2, r4
 8022baa:	b2ad      	uxth	r5, r5
 8022bac:	b2bf      	uxth	r7, r7
 8022bae:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8022bb2:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8022bb6:	f105 0c01 	add.w	ip, r5, #1
 8022bba:	1c7e      	adds	r6, r7, #1
 8022bbc:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8022bc0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022bc4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8022bc8:	096d      	lsrs	r5, r5, #5
 8022bca:	ea46 060e 	orr.w	r6, r6, lr
 8022bce:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022bd2:	432e      	orrs	r6, r5
 8022bd4:	8006      	strh	r6, [r0, #0]
 8022bd6:	e7ba      	b.n	8022b4e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022bd8:	f8ba 3000 	ldrh.w	r3, [sl]
 8022bdc:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8022be0:	eba3 0308 	sub.w	r3, r3, r8
 8022be4:	eba4 0408 	sub.w	r4, r4, r8
 8022be8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022bec:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8022bf0:	e78b      	b.n	8022b0a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8022bf2:	4b03      	ldr	r3, [pc, #12]	; (8022c00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022bf4:	6818      	ldr	r0, [r3, #0]
 8022bf6:	6803      	ldr	r3, [r0, #0]
 8022bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022bfa:	4798      	blx	r3
 8022bfc:	e76a      	b.n	8022ad4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8022bfe:	bf00      	nop
 8022c00:	2000977c 	.word	0x2000977c
 8022c04:	20009776 	.word	0x20009776

08022c08 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8022c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022c0c:	460c      	mov	r4, r1
 8022c0e:	b085      	sub	sp, #20
 8022c10:	6810      	ldr	r0, [r2, #0]
 8022c12:	6851      	ldr	r1, [r2, #4]
 8022c14:	466d      	mov	r5, sp
 8022c16:	c503      	stmia	r5!, {r0, r1}
 8022c18:	6818      	ldr	r0, [r3, #0]
 8022c1a:	6859      	ldr	r1, [r3, #4]
 8022c1c:	4616      	mov	r6, r2
 8022c1e:	c503      	stmia	r5!, {r0, r1}
 8022c20:	4668      	mov	r0, sp
 8022c22:	f7f9 f875 	bl	801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022c26:	4631      	mov	r1, r6
 8022c28:	a802      	add	r0, sp, #8
 8022c2a:	f7f9 f8b5 	bl	801bd98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022c2e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8022c32:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8022c36:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8022c3a:	4d28      	ldr	r5, [pc, #160]	; (8022cdc <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8022c3c:	4e28      	ldr	r6, [pc, #160]	; (8022ce0 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8022c3e:	6828      	ldr	r0, [r5, #0]
 8022c40:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8022c44:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8022c48:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022c4c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022c50:	f8bd 1000 	ldrh.w	r1, [sp]
 8022c54:	440a      	add	r2, r1
 8022c56:	f8ad 2008 	strh.w	r2, [sp, #8]
 8022c5a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8022c5e:	4413      	add	r3, r2
 8022c60:	f8ad 300a 	strh.w	r3, [sp, #10]
 8022c64:	6803      	ldr	r3, [r0, #0]
 8022c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022c68:	4798      	blx	r3
 8022c6a:	8833      	ldrh	r3, [r6, #0]
 8022c6c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8022c70:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8022c74:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8022ce4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8022c78:	fb03 1202 	mla	r2, r3, r2, r1
 8022c7c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022c80:	fb08 f303 	mul.w	r3, r8, r3
 8022c84:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022c88:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8022c8c:	4298      	cmp	r0, r3
 8022c8e:	d21d      	bcs.n	8022ccc <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8022c90:	eb00 080c 	add.w	r8, r0, ip
 8022c94:	4540      	cmp	r0, r8
 8022c96:	d20f      	bcs.n	8022cb8 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8022c98:	f854 1b04 	ldr.w	r1, [r4], #4
 8022c9c:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8022ca0:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8022ca4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022ca8:	ea42 0209 	orr.w	r2, r2, r9
 8022cac:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8022cb0:	430a      	orrs	r2, r1
 8022cb2:	f820 2b02 	strh.w	r2, [r0], #2
 8022cb6:	e7ed      	b.n	8022c94 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8022cb8:	8832      	ldrh	r2, [r6, #0]
 8022cba:	1bd2      	subs	r2, r2, r7
 8022cbc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022cc0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8022cc4:	1bd2      	subs	r2, r2, r7
 8022cc6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8022cca:	e7df      	b.n	8022c8c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8022ccc:	6828      	ldr	r0, [r5, #0]
 8022cce:	6803      	ldr	r3, [r0, #0]
 8022cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022cd2:	4798      	blx	r3
 8022cd4:	b005      	add	sp, #20
 8022cd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022cda:	bf00      	nop
 8022cdc:	2000977c 	.word	0x2000977c
 8022ce0:	20009776 	.word	0x20009776
 8022ce4:	fffff800 	.word	0xfffff800

08022ce8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8022ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022cec:	460e      	mov	r6, r1
 8022cee:	b08e      	sub	sp, #56	; 0x38
 8022cf0:	4604      	mov	r4, r0
 8022cf2:	6808      	ldr	r0, [r1, #0]
 8022cf4:	6849      	ldr	r1, [r1, #4]
 8022cf6:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8022ed0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8022cfa:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8022ed4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8022cfe:	461d      	mov	r5, r3
 8022d00:	ab0a      	add	r3, sp, #40	; 0x28
 8022d02:	c303      	stmia	r3!, {r0, r1}
 8022d04:	6810      	ldr	r0, [r2, #0]
 8022d06:	6851      	ldr	r1, [r2, #4]
 8022d08:	ab0c      	add	r3, sp, #48	; 0x30
 8022d0a:	c303      	stmia	r3!, {r0, r1}
 8022d0c:	a80a      	add	r0, sp, #40	; 0x28
 8022d0e:	f7f8 ffff 	bl	801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022d12:	4631      	mov	r1, r6
 8022d14:	a80c      	add	r0, sp, #48	; 0x30
 8022d16:	f7f9 f83f 	bl	801bd98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022d1a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8022d1e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8022d22:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8022d26:	f8d8 0000 	ldr.w	r0, [r8]
 8022d2a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8022d2e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8022d32:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022d36:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022d3a:	440c      	add	r4, r1
 8022d3c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8022d40:	440a      	add	r2, r1
 8022d42:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8022d46:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8022d4a:	4413      	add	r3, r2
 8022d4c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8022d50:	6803      	ldr	r3, [r0, #0]
 8022d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022d54:	4798      	blx	r3
 8022d56:	2dff      	cmp	r5, #255	; 0xff
 8022d58:	d124      	bne.n	8022da4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8022d5a:	f010 0f01 	tst.w	r0, #1
 8022d5e:	f8d8 0000 	ldr.w	r0, [r8]
 8022d62:	d022      	beq.n	8022daa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8022d64:	2100      	movs	r1, #0
 8022d66:	f8d0 c000 	ldr.w	ip, [r0]
 8022d6a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8022d6e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8022d72:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8022d76:	f04f 0e01 	mov.w	lr, #1
 8022d7a:	f8cd e018 	str.w	lr, [sp, #24]
 8022d7e:	f8b9 e000 	ldrh.w	lr, [r9]
 8022d82:	9503      	str	r5, [sp, #12]
 8022d84:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8022d88:	b2b6      	uxth	r6, r6
 8022d8a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8022d8e:	9102      	str	r1, [sp, #8]
 8022d90:	b2bf      	uxth	r7, r7
 8022d92:	9601      	str	r6, [sp, #4]
 8022d94:	9700      	str	r7, [sp, #0]
 8022d96:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8022d9a:	4621      	mov	r1, r4
 8022d9c:	47a8      	blx	r5
 8022d9e:	b00e      	add	sp, #56	; 0x38
 8022da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022da4:	f010 0f04 	tst.w	r0, #4
 8022da8:	e7d9      	b.n	8022d5e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8022daa:	6803      	ldr	r3, [r0, #0]
 8022dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022dae:	4798      	blx	r3
 8022db0:	f8b9 3000 	ldrh.w	r3, [r9]
 8022db4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8022db8:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8022dbc:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8022dc0:	fb03 1202 	mla	r2, r3, r2, r1
 8022dc4:	ebac 0c07 	sub.w	ip, ip, r7
 8022dc8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022dcc:	435e      	muls	r6, r3
 8022dce:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8022dd2:	2dff      	cmp	r5, #255	; 0xff
 8022dd4:	eba3 0707 	sub.w	r7, r3, r7
 8022dd8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8022ddc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022de0:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8022de4:	d049      	beq.n	8022e7a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8022de6:	43eb      	mvns	r3, r5
 8022de8:	fa1f f985 	uxth.w	r9, r5
 8022dec:	b2db      	uxtb	r3, r3
 8022dee:	42b0      	cmp	r0, r6
 8022df0:	d266      	bcs.n	8022ec0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8022df2:	eb00 0a0e 	add.w	sl, r0, lr
 8022df6:	4550      	cmp	r0, sl
 8022df8:	4621      	mov	r1, r4
 8022dfa:	f104 0403 	add.w	r4, r4, #3
 8022dfe:	d25b      	bcs.n	8022eb8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8022e00:	8802      	ldrh	r2, [r0, #0]
 8022e02:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022e06:	ea4f 2822 	mov.w	r8, r2, asr #8
 8022e0a:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8022e0e:	fb11 f109 	smulbb	r1, r1, r9
 8022e12:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8022e16:	10d5      	asrs	r5, r2, #3
 8022e18:	fb08 1803 	mla	r8, r8, r3, r1
 8022e1c:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8022e20:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022e24:	fb11 f109 	smulbb	r1, r1, r9
 8022e28:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8022e2c:	fb05 1503 	mla	r5, r5, r3, r1
 8022e30:	00d2      	lsls	r2, r2, #3
 8022e32:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8022e36:	b2d2      	uxtb	r2, r2
 8022e38:	fb11 f109 	smulbb	r1, r1, r9
 8022e3c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022e40:	fa1f f888 	uxth.w	r8, r8
 8022e44:	fb02 1203 	mla	r2, r2, r3, r1
 8022e48:	b292      	uxth	r2, r2
 8022e4a:	f108 0101 	add.w	r1, r8, #1
 8022e4e:	b2ad      	uxth	r5, r5
 8022e50:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8022e54:	1c51      	adds	r1, r2, #1
 8022e56:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022e5a:	1c69      	adds	r1, r5, #1
 8022e5c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022e60:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8022e64:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022e68:	096d      	lsrs	r5, r5, #5
 8022e6a:	ea42 0208 	orr.w	r2, r2, r8
 8022e6e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022e72:	432a      	orrs	r2, r5
 8022e74:	f820 2b02 	strh.w	r2, [r0], #2
 8022e78:	e7bd      	b.n	8022df6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8022e7a:	4a14      	ldr	r2, [pc, #80]	; (8022ecc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8022e7c:	42b0      	cmp	r0, r6
 8022e7e:	d21f      	bcs.n	8022ec0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8022e80:	eb00 050e 	add.w	r5, r0, lr
 8022e84:	42a8      	cmp	r0, r5
 8022e86:	4621      	mov	r1, r4
 8022e88:	f104 0403 	add.w	r4, r4, #3
 8022e8c:	d210      	bcs.n	8022eb0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8022e8e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8022e92:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022e96:	00db      	lsls	r3, r3, #3
 8022e98:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8022e9c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022ea0:	430b      	orrs	r3, r1
 8022ea2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8022ea6:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8022eaa:	f820 3b02 	strh.w	r3, [r0], #2
 8022eae:	e7e9      	b.n	8022e84 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8022eb0:	4438      	add	r0, r7
 8022eb2:	eb01 040c 	add.w	r4, r1, ip
 8022eb6:	e7e1      	b.n	8022e7c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8022eb8:	4438      	add	r0, r7
 8022eba:	eb01 040c 	add.w	r4, r1, ip
 8022ebe:	e796      	b.n	8022dee <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8022ec0:	4b03      	ldr	r3, [pc, #12]	; (8022ed0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8022ec2:	6818      	ldr	r0, [r3, #0]
 8022ec4:	6803      	ldr	r3, [r0, #0]
 8022ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022ec8:	4798      	blx	r3
 8022eca:	e768      	b.n	8022d9e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8022ecc:	fffff800 	.word	0xfffff800
 8022ed0:	2000977c 	.word	0x2000977c
 8022ed4:	20009776 	.word	0x20009776

08022ed8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8022ed8:	b570      	push	{r4, r5, r6, lr}
 8022eda:	9c04      	ldr	r4, [sp, #16]
 8022edc:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8022ee0:	4605      	mov	r5, r0
 8022ee2:	4608      	mov	r0, r1
 8022ee4:	4619      	mov	r1, r3
 8022ee6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8022eea:	2a0d      	cmp	r2, #13
 8022eec:	d825      	bhi.n	8022f3a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 8022eee:	e8df f002 	tbb	[pc, r2]
 8022ef2:	1807      	.short	0x1807
 8022ef4:	1d1d1d13 	.word	0x1d1d1d13
 8022ef8:	1d1d1d1d 	.word	0x1d1d1d1d
 8022efc:	1d1d1d1d 	.word	0x1d1d1d1d
 8022f00:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8022f04:	682a      	ldr	r2, [r5, #0]
 8022f06:	68d6      	ldr	r6, [r2, #12]
 8022f08:	4623      	mov	r3, r4
 8022f0a:	460a      	mov	r2, r1
 8022f0c:	46b4      	mov	ip, r6
 8022f0e:	4601      	mov	r1, r0
 8022f10:	4628      	mov	r0, r5
 8022f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022f16:	4760      	bx	ip
 8022f18:	4622      	mov	r2, r4
 8022f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022f1e:	f7ff bd8d 	b.w	8022a3c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022f22:	4622      	mov	r2, r4
 8022f24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022f28:	f7ff bede 	b.w	8022ce8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8022f2c:	4b03      	ldr	r3, [pc, #12]	; (8022f3c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8022f2e:	4a04      	ldr	r2, [pc, #16]	; (8022f40 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8022f30:	4804      	ldr	r0, [pc, #16]	; (8022f44 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8022f32:	f240 315d 	movw	r1, #861	; 0x35d
 8022f36:	f00a ffc3 	bl	802dec0 <__assert_func>
 8022f3a:	bd70      	pop	{r4, r5, r6, pc}
 8022f3c:	08032bf2 	.word	0x08032bf2
 8022f40:	08033352 	.word	0x08033352
 8022f44:	08032acd 	.word	0x08032acd

08022f48 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8022f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f4c:	b093      	sub	sp, #76	; 0x4c
 8022f4e:	880e      	ldrh	r6, [r1, #0]
 8022f50:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8022f54:	4681      	mov	r9, r0
 8022f56:	4688      	mov	r8, r1
 8022f58:	4615      	mov	r5, r2
 8022f5a:	b136      	cbz	r6, 8022f6a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 8022f5c:	4b70      	ldr	r3, [pc, #448]	; (8023120 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8022f5e:	4a71      	ldr	r2, [pc, #452]	; (8023124 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8022f60:	4871      	ldr	r0, [pc, #452]	; (8023128 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8022f62:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8022f66:	f00a ffab 	bl	802dec0 <__assert_func>
 8022f6a:	6810      	ldr	r0, [r2, #0]
 8022f6c:	6851      	ldr	r1, [r2, #4]
 8022f6e:	4f6f      	ldr	r7, [pc, #444]	; (802312c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8022f70:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8023130 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8022f74:	ac0e      	add	r4, sp, #56	; 0x38
 8022f76:	c403      	stmia	r4!, {r0, r1}
 8022f78:	6818      	ldr	r0, [r3, #0]
 8022f7a:	6859      	ldr	r1, [r3, #4]
 8022f7c:	ac10      	add	r4, sp, #64	; 0x40
 8022f7e:	c403      	stmia	r4!, {r0, r1}
 8022f80:	a80e      	add	r0, sp, #56	; 0x38
 8022f82:	f7f8 fec5 	bl	801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022f86:	4629      	mov	r1, r5
 8022f88:	a810      	add	r0, sp, #64	; 0x40
 8022f8a:	f7f8 ff05 	bl	801bd98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022f8e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8022f92:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8022f96:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8022f9a:	6838      	ldr	r0, [r7, #0]
 8022f9c:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8022fa0:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8022fa4:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022fa8:	4489      	add	r9, r1
 8022faa:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8022fae:	440a      	add	r2, r1
 8022fb0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8022fb4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8022fb8:	4413      	add	r3, r2
 8022fba:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8022fbe:	6803      	ldr	r3, [r0, #0]
 8022fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022fc2:	4798      	blx	r3
 8022fc4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8022fc8:	6838      	ldr	r0, [r7, #0]
 8022fca:	d01d      	beq.n	8023008 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8022fcc:	6802      	ldr	r2, [r0, #0]
 8022fce:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8022fd2:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8022fd6:	210b      	movs	r1, #11
 8022fd8:	9107      	str	r1, [sp, #28]
 8022fda:	f8bb 1000 	ldrh.w	r1, [fp]
 8022fde:	9106      	str	r1, [sp, #24]
 8022fe0:	2101      	movs	r1, #1
 8022fe2:	e9cd a104 	strd	sl, r1, [sp, #16]
 8022fe6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8022fea:	9103      	str	r1, [sp, #12]
 8022fec:	b2a4      	uxth	r4, r4
 8022fee:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8022ff2:	9100      	str	r1, [sp, #0]
 8022ff4:	b2ad      	uxth	r5, r5
 8022ff6:	9502      	str	r5, [sp, #8]
 8022ff8:	9401      	str	r4, [sp, #4]
 8022ffa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8022ffc:	4649      	mov	r1, r9
 8022ffe:	4642      	mov	r2, r8
 8023000:	47a0      	blx	r4
 8023002:	b013      	add	sp, #76	; 0x4c
 8023004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023008:	6803      	ldr	r3, [r0, #0]
 802300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802300c:	4798      	blx	r3
 802300e:	f8bb 3000 	ldrh.w	r3, [fp]
 8023012:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8023016:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 802301a:	fb03 1202 	mla	r2, r3, r2, r1
 802301e:	435d      	muls	r5, r3
 8023020:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8023024:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8023028:	920c      	str	r2, [sp, #48]	; 0x30
 802302a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 802302e:	1b12      	subs	r2, r2, r4
 8023030:	920d      	str	r2, [sp, #52]	; 0x34
 8023032:	0062      	lsls	r2, r4, #1
 8023034:	1b1c      	subs	r4, r3, r4
 8023036:	0063      	lsls	r3, r4, #1
 8023038:	920a      	str	r2, [sp, #40]	; 0x28
 802303a:	930b      	str	r3, [sp, #44]	; 0x2c
 802303c:	f04f 0e04 	mov.w	lr, #4
 8023040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023042:	4298      	cmp	r0, r3
 8023044:	d266      	bcs.n	8023114 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8023046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023048:	eb00 0b03 	add.w	fp, r0, r3
 802304c:	4558      	cmp	r0, fp
 802304e:	d25c      	bcs.n	802310a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 8023050:	f819 3b01 	ldrb.w	r3, [r9], #1
 8023054:	fb1e e303 	smlabb	r3, lr, r3, lr
 8023058:	f858 2003 	ldr.w	r2, [r8, r3]
 802305c:	0e11      	lsrs	r1, r2, #24
 802305e:	d012      	beq.n	8023086 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 8023060:	29ff      	cmp	r1, #255	; 0xff
 8023062:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8023066:	d110      	bne.n	802308a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 8023068:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802306c:	d10d      	bne.n	802308a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 802306e:	0953      	lsrs	r3, r2, #5
 8023070:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8023074:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023078:	f027 0707 	bic.w	r7, r7, #7
 802307c:	431f      	orrs	r7, r3
 802307e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023082:	433a      	orrs	r2, r7
 8023084:	8002      	strh	r2, [r0, #0]
 8023086:	3002      	adds	r0, #2
 8023088:	e7e0      	b.n	802304c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 802308a:	fb0a f101 	mul.w	r1, sl, r1
 802308e:	8806      	ldrh	r6, [r0, #0]
 8023090:	1c4b      	adds	r3, r1, #1
 8023092:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8023096:	1235      	asrs	r5, r6, #8
 8023098:	10f4      	asrs	r4, r6, #3
 802309a:	121b      	asrs	r3, r3, #8
 802309c:	00f6      	lsls	r6, r6, #3
 802309e:	b299      	uxth	r1, r3
 80230a0:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80230a4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80230a8:	b2f6      	uxtb	r6, r6
 80230aa:	43db      	mvns	r3, r3
 80230ac:	b2d2      	uxtb	r2, r2
 80230ae:	b2db      	uxtb	r3, r3
 80230b0:	fb1c fc01 	smulbb	ip, ip, r1
 80230b4:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80230b8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80230bc:	fb12 f201 	smulbb	r2, r2, r1
 80230c0:	fb05 c503 	mla	r5, r5, r3, ip
 80230c4:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80230c8:	b2ff      	uxtb	r7, r7
 80230ca:	fb06 2203 	mla	r2, r6, r3, r2
 80230ce:	b2ad      	uxth	r5, r5
 80230d0:	fb17 f701 	smulbb	r7, r7, r1
 80230d4:	b292      	uxth	r2, r2
 80230d6:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80230da:	fb04 7403 	mla	r4, r4, r3, r7
 80230de:	f105 0c01 	add.w	ip, r5, #1
 80230e2:	1c57      	adds	r7, r2, #1
 80230e4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80230e8:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80230ec:	b2a4      	uxth	r4, r4
 80230ee:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80230f2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80230f6:	433d      	orrs	r5, r7
 80230f8:	1c67      	adds	r7, r4, #1
 80230fa:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80230fe:	0964      	lsrs	r4, r4, #5
 8023100:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8023104:	4325      	orrs	r5, r4
 8023106:	8005      	strh	r5, [r0, #0]
 8023108:	e7bd      	b.n	8023086 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 802310a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802310c:	4418      	add	r0, r3
 802310e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023110:	4499      	add	r9, r3
 8023112:	e795      	b.n	8023040 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 8023114:	4b05      	ldr	r3, [pc, #20]	; (802312c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8023116:	6818      	ldr	r0, [r3, #0]
 8023118:	6803      	ldr	r3, [r0, #0]
 802311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802311c:	4798      	blx	r3
 802311e:	e770      	b.n	8023002 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 8023120:	080329cb 	.word	0x080329cb
 8023124:	08033123 	.word	0x08033123
 8023128:	08032acd 	.word	0x08032acd
 802312c:	2000977c 	.word	0x2000977c
 8023130:	20009776 	.word	0x20009776

08023134 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8023134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023138:	4614      	mov	r4, r2
 802313a:	880a      	ldrh	r2, [r1, #0]
 802313c:	b087      	sub	sp, #28
 802313e:	2a02      	cmp	r2, #2
 8023140:	4680      	mov	r8, r0
 8023142:	460d      	mov	r5, r1
 8023144:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8023148:	d006      	beq.n	8023158 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 802314a:	4b63      	ldr	r3, [pc, #396]	; (80232d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 802314c:	4a63      	ldr	r2, [pc, #396]	; (80232dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 802314e:	4864      	ldr	r0, [pc, #400]	; (80232e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 8023150:	f240 11e1 	movw	r1, #481	; 0x1e1
 8023154:	f00a feb4 	bl	802dec0 <__assert_func>
 8023158:	2e00      	cmp	r6, #0
 802315a:	f000 80b9 	beq.w	80232d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 802315e:	6820      	ldr	r0, [r4, #0]
 8023160:	6861      	ldr	r1, [r4, #4]
 8023162:	af02      	add	r7, sp, #8
 8023164:	c703      	stmia	r7!, {r0, r1}
 8023166:	6818      	ldr	r0, [r3, #0]
 8023168:	6859      	ldr	r1, [r3, #4]
 802316a:	af04      	add	r7, sp, #16
 802316c:	c703      	stmia	r7!, {r0, r1}
 802316e:	a802      	add	r0, sp, #8
 8023170:	f7f8 fdce 	bl	801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023174:	4621      	mov	r1, r4
 8023176:	a804      	add	r0, sp, #16
 8023178:	f7f8 fe0e 	bl	801bd98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802317c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023180:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023184:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8023188:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 802318c:	fb14 2103 	smlabb	r1, r4, r3, r2
 8023190:	eb08 0401 	add.w	r4, r8, r1
 8023194:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8023198:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 802319c:	440a      	add	r2, r1
 802319e:	f8ad 2010 	strh.w	r2, [sp, #16]
 80231a2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80231a6:	4413      	add	r3, r2
 80231a8:	f8ad 3012 	strh.w	r3, [sp, #18]
 80231ac:	4b4d      	ldr	r3, [pc, #308]	; (80232e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 80231ae:	6818      	ldr	r0, [r3, #0]
 80231b0:	6803      	ldr	r3, [r0, #0]
 80231b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80231b4:	4798      	blx	r3
 80231b6:	4b4c      	ldr	r3, [pc, #304]	; (80232e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 80231b8:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80231bc:	881a      	ldrh	r2, [r3, #0]
 80231be:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80231c2:	2eff      	cmp	r6, #255	; 0xff
 80231c4:	fb02 c101 	mla	r1, r2, r1, ip
 80231c8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80231cc:	fb02 f207 	mul.w	r2, r2, r7
 80231d0:	f105 0104 	add.w	r1, r5, #4
 80231d4:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 80231d8:	461d      	mov	r5, r3
 80231da:	d05a      	beq.n	8023292 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 80231dc:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 80231e0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80231e4:	b2b6      	uxth	r6, r6
 80231e6:	fa1f fe8e 	uxth.w	lr, lr
 80231ea:	9301      	str	r3, [sp, #4]
 80231ec:	4282      	cmp	r2, r0
 80231ee:	d96a      	bls.n	80232c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 80231f0:	eb00 0b0a 	add.w	fp, r0, sl
 80231f4:	4583      	cmp	fp, r0
 80231f6:	d940      	bls.n	802327a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 80231f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80231fc:	8805      	ldrh	r5, [r0, #0]
 80231fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8023202:	122f      	asrs	r7, r5, #8
 8023204:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8023208:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802320c:	fb17 f70e 	smulbb	r7, r7, lr
 8023210:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8023214:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023218:	00ed      	lsls	r5, r5, #3
 802321a:	fb0c 7c06 	mla	ip, ip, r6, r7
 802321e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8023222:	10df      	asrs	r7, r3, #3
 8023224:	b2ed      	uxtb	r5, r5
 8023226:	00db      	lsls	r3, r3, #3
 8023228:	fa1f fc8c 	uxth.w	ip, ip
 802322c:	fb19 f90e 	smulbb	r9, r9, lr
 8023230:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023234:	b2db      	uxtb	r3, r3
 8023236:	fb15 f50e 	smulbb	r5, r5, lr
 802323a:	fb07 9706 	mla	r7, r7, r6, r9
 802323e:	fb03 5306 	mla	r3, r3, r6, r5
 8023242:	f10c 0901 	add.w	r9, ip, #1
 8023246:	b29b      	uxth	r3, r3
 8023248:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 802324c:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8023250:	f103 0c01 	add.w	ip, r3, #1
 8023254:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023258:	b2bf      	uxth	r7, r7
 802325a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802325e:	ea4c 0c09 	orr.w	ip, ip, r9
 8023262:	f107 0901 	add.w	r9, r7, #1
 8023266:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 802326a:	097f      	lsrs	r7, r7, #5
 802326c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023270:	ea4c 0c07 	orr.w	ip, ip, r7
 8023274:	f820 cb02 	strh.w	ip, [r0], #2
 8023278:	e7bc      	b.n	80231f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 802327a:	9b01      	ldr	r3, [sp, #4]
 802327c:	881b      	ldrh	r3, [r3, #0]
 802327e:	eba3 0308 	sub.w	r3, r3, r8
 8023282:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023286:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802328a:	eba3 0308 	sub.w	r3, r3, r8
 802328e:	441c      	add	r4, r3
 8023290:	e7ac      	b.n	80231ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 8023292:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8023296:	4282      	cmp	r2, r0
 8023298:	d915      	bls.n	80232c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 802329a:	eb00 060a 	add.w	r6, r0, sl
 802329e:	4286      	cmp	r6, r0
 80232a0:	d906      	bls.n	80232b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 80232a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80232a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80232aa:	f820 3b02 	strh.w	r3, [r0], #2
 80232ae:	e7f6      	b.n	802329e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 80232b0:	882b      	ldrh	r3, [r5, #0]
 80232b2:	eba3 0308 	sub.w	r3, r3, r8
 80232b6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80232ba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80232be:	eba3 0308 	sub.w	r3, r3, r8
 80232c2:	441c      	add	r4, r3
 80232c4:	e7e7      	b.n	8023296 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 80232c6:	4b07      	ldr	r3, [pc, #28]	; (80232e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 80232c8:	6818      	ldr	r0, [r3, #0]
 80232ca:	6803      	ldr	r3, [r0, #0]
 80232cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80232ce:	4798      	blx	r3
 80232d0:	b007      	add	sp, #28
 80232d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232d6:	bf00      	nop
 80232d8:	080328fb 	.word	0x080328fb
 80232dc:	08032f8d 	.word	0x08032f8d
 80232e0:	08032acd 	.word	0x08032acd
 80232e4:	2000977c 	.word	0x2000977c
 80232e8:	20009776 	.word	0x20009776

080232ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80232ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232f0:	f8b1 9000 	ldrh.w	r9, [r1]
 80232f4:	b091      	sub	sp, #68	; 0x44
 80232f6:	f1b9 0f01 	cmp.w	r9, #1
 80232fa:	4604      	mov	r4, r0
 80232fc:	460f      	mov	r7, r1
 80232fe:	4690      	mov	r8, r2
 8023300:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8023304:	d006      	beq.n	8023314 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 8023306:	4b84      	ldr	r3, [pc, #528]	; (8023518 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 8023308:	4a84      	ldr	r2, [pc, #528]	; (802351c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 802330a:	4885      	ldr	r0, [pc, #532]	; (8023520 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 802330c:	f240 212f 	movw	r1, #559	; 0x22f
 8023310:	f00a fdd6 	bl	802dec0 <__assert_func>
 8023314:	2d00      	cmp	r5, #0
 8023316:	d04f      	beq.n	80233b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8023318:	6810      	ldr	r0, [r2, #0]
 802331a:	6851      	ldr	r1, [r2, #4]
 802331c:	f8df b208 	ldr.w	fp, [pc, #520]	; 8023528 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 8023320:	ae0c      	add	r6, sp, #48	; 0x30
 8023322:	c603      	stmia	r6!, {r0, r1}
 8023324:	6818      	ldr	r0, [r3, #0]
 8023326:	6859      	ldr	r1, [r3, #4]
 8023328:	ae0e      	add	r6, sp, #56	; 0x38
 802332a:	c603      	stmia	r6!, {r0, r1}
 802332c:	a80c      	add	r0, sp, #48	; 0x30
 802332e:	f7f8 fcef 	bl	801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023332:	4641      	mov	r1, r8
 8023334:	a80e      	add	r0, sp, #56	; 0x38
 8023336:	f7f8 fd2f 	bl	801bd98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802333a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802333e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8023342:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8023346:	f8db 0000 	ldr.w	r0, [fp]
 802334a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 802334e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8023352:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 802352c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 8023356:	fb11 2103 	smlabb	r1, r1, r3, r2
 802335a:	440c      	add	r4, r1
 802335c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8023360:	440a      	add	r2, r1
 8023362:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8023366:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 802336a:	4413      	add	r3, r2
 802336c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8023370:	6803      	ldr	r3, [r0, #0]
 8023372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023374:	4798      	blx	r3
 8023376:	f010 0f80 	tst.w	r0, #128	; 0x80
 802337a:	f8db 0000 	ldr.w	r0, [fp]
 802337e:	d01e      	beq.n	80233be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 8023380:	2200      	movs	r2, #0
 8023382:	6801      	ldr	r1, [r0, #0]
 8023384:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8023388:	e9cd 2208 	strd	r2, r2, [sp, #32]
 802338c:	220b      	movs	r2, #11
 802338e:	9207      	str	r2, [sp, #28]
 8023390:	f8b8 2000 	ldrh.w	r2, [r8]
 8023394:	9504      	str	r5, [sp, #16]
 8023396:	e9cd 9205 	strd	r9, r2, [sp, #20]
 802339a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 802339e:	9203      	str	r2, [sp, #12]
 80233a0:	fa1f f28a 	uxth.w	r2, sl
 80233a4:	9202      	str	r2, [sp, #8]
 80233a6:	b2b6      	uxth	r6, r6
 80233a8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80233ac:	9200      	str	r2, [sp, #0]
 80233ae:	9601      	str	r6, [sp, #4]
 80233b0:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 80233b2:	463a      	mov	r2, r7
 80233b4:	4621      	mov	r1, r4
 80233b6:	47a8      	blx	r5
 80233b8:	b011      	add	sp, #68	; 0x44
 80233ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233be:	6803      	ldr	r3, [r0, #0]
 80233c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80233c2:	4798      	blx	r3
 80233c4:	f8b8 2000 	ldrh.w	r2, [r8]
 80233c8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80233cc:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 80233d0:	2dff      	cmp	r5, #255	; 0xff
 80233d2:	fb02 1303 	mla	r3, r2, r3, r1
 80233d6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80233da:	ea4f 0946 	mov.w	r9, r6, lsl #1
 80233de:	fb0a fa02 	mul.w	sl, sl, r2
 80233e2:	d062      	beq.n	80234aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 80233e4:	ea6f 0c05 	mvn.w	ip, r5
 80233e8:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 80233ec:	930a      	str	r3, [sp, #40]	; 0x28
 80233ee:	b2ad      	uxth	r5, r5
 80233f0:	fa5f fc8c 	uxtb.w	ip, ip
 80233f4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80233f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80233fa:	4298      	cmp	r0, r3
 80233fc:	f080 8085 	bcs.w	802350a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8023400:	eb00 0b09 	add.w	fp, r0, r9
 8023404:	4558      	cmp	r0, fp
 8023406:	d246      	bcs.n	8023496 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8023408:	f814 eb01 	ldrb.w	lr, [r4], #1
 802340c:	2303      	movs	r3, #3
 802340e:	2204      	movs	r2, #4
 8023410:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8023414:	eb07 0a0e 	add.w	sl, r7, lr
 8023418:	8803      	ldrh	r3, [r0, #0]
 802341a:	f89a 8002 	ldrb.w	r8, [sl, #2]
 802341e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023422:	1219      	asrs	r1, r3, #8
 8023424:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023428:	fb18 f805 	smulbb	r8, r8, r5
 802342c:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8023430:	10da      	asrs	r2, r3, #3
 8023432:	fb01 810c 	mla	r1, r1, ip, r8
 8023436:	00db      	lsls	r3, r3, #3
 8023438:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802343c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023440:	b2db      	uxtb	r3, r3
 8023442:	fb18 f805 	smulbb	r8, r8, r5
 8023446:	fb1e fe05 	smulbb	lr, lr, r5
 802344a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 802344e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8023452:	b289      	uxth	r1, r1
 8023454:	fb02 820c 	mla	r2, r2, ip, r8
 8023458:	fb03 e30c 	mla	r3, r3, ip, lr
 802345c:	b292      	uxth	r2, r2
 802345e:	b29b      	uxth	r3, r3
 8023460:	f101 0801 	add.w	r8, r1, #1
 8023464:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8023468:	f103 0e01 	add.w	lr, r3, #1
 802346c:	f102 0801 	add.w	r8, r2, #1
 8023470:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8023474:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8023478:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802347c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8023480:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8023484:	ea4e 0101 	orr.w	r1, lr, r1
 8023488:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802348c:	ea41 0108 	orr.w	r1, r1, r8
 8023490:	f820 1b02 	strh.w	r1, [r0], #2
 8023494:	e7b6      	b.n	8023404 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8023496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023498:	881b      	ldrh	r3, [r3, #0]
 802349a:	1b9b      	subs	r3, r3, r6
 802349c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80234a0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80234a4:	1b9b      	subs	r3, r3, r6
 80234a6:	441c      	add	r4, r3
 80234a8:	e7a6      	b.n	80233f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 80234aa:	491e      	ldr	r1, [pc, #120]	; (8023524 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 80234ac:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 80234b0:	2203      	movs	r2, #3
 80234b2:	2504      	movs	r5, #4
 80234b4:	4550      	cmp	r0, sl
 80234b6:	d228      	bcs.n	802350a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 80234b8:	eb00 0c09 	add.w	ip, r0, r9
 80234bc:	4560      	cmp	r0, ip
 80234be:	4623      	mov	r3, r4
 80234c0:	d219      	bcs.n	80234f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80234c2:	f893 e000 	ldrb.w	lr, [r3]
 80234c6:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 80234ca:	eb07 0b0e 	add.w	fp, r7, lr
 80234ce:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80234d2:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80234d6:	f89b b001 	ldrb.w	fp, [fp, #1]
 80234da:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80234de:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 80234e2:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80234e6:	ea43 030b 	orr.w	r3, r3, fp
 80234ea:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 80234ee:	3401      	adds	r4, #1
 80234f0:	f820 3b02 	strh.w	r3, [r0], #2
 80234f4:	e7e2      	b.n	80234bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 80234f6:	f8b8 3000 	ldrh.w	r3, [r8]
 80234fa:	1b9b      	subs	r3, r3, r6
 80234fc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023500:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8023504:	1b9b      	subs	r3, r3, r6
 8023506:	441c      	add	r4, r3
 8023508:	e7d4      	b.n	80234b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 802350a:	4b07      	ldr	r3, [pc, #28]	; (8023528 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 802350c:	6818      	ldr	r0, [r3, #0]
 802350e:	6803      	ldr	r3, [r0, #0]
 8023510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023512:	4798      	blx	r3
 8023514:	e750      	b.n	80233b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8023516:	bf00      	nop
 8023518:	08032949 	.word	0x08032949
 802351c:	08033016 	.word	0x08033016
 8023520:	08032acd 	.word	0x08032acd
 8023524:	fffff800 	.word	0xfffff800
 8023528:	2000977c 	.word	0x2000977c
 802352c:	20009776 	.word	0x20009776

08023530 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8023530:	b430      	push	{r4, r5}
 8023532:	780d      	ldrb	r5, [r1, #0]
 8023534:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8023538:	2d01      	cmp	r5, #1
 802353a:	d00a      	beq.n	8023552 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 802353c:	d305      	bcc.n	802354a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 802353e:	2d02      	cmp	r5, #2
 8023540:	d10b      	bne.n	802355a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8023542:	9402      	str	r4, [sp, #8]
 8023544:	bc30      	pop	{r4, r5}
 8023546:	f7ff bdf5 	b.w	8023134 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 802354a:	9402      	str	r4, [sp, #8]
 802354c:	bc30      	pop	{r4, r5}
 802354e:	f7ff bcfb 	b.w	8022f48 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8023552:	9402      	str	r4, [sp, #8]
 8023554:	bc30      	pop	{r4, r5}
 8023556:	f7ff bec9 	b.w	80232ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 802355a:	bc30      	pop	{r4, r5}
 802355c:	4770      	bx	lr
	...

08023560 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8023560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023564:	4604      	mov	r4, r0
 8023566:	b087      	sub	sp, #28
 8023568:	6810      	ldr	r0, [r2, #0]
 802356a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 802356e:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80237a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8023572:	460e      	mov	r6, r1
 8023574:	6851      	ldr	r1, [r2, #4]
 8023576:	ad02      	add	r5, sp, #8
 8023578:	c503      	stmia	r5!, {r0, r1}
 802357a:	6818      	ldr	r0, [r3, #0]
 802357c:	6859      	ldr	r1, [r3, #4]
 802357e:	ad04      	add	r5, sp, #16
 8023580:	4617      	mov	r7, r2
 8023582:	c503      	stmia	r5!, {r0, r1}
 8023584:	a802      	add	r0, sp, #8
 8023586:	f7f8 fbc3 	bl	801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802358a:	4639      	mov	r1, r7
 802358c:	a804      	add	r0, sp, #16
 802358e:	f7f8 fc03 	bl	801bd98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023592:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023596:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802359a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 802359e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80235a2:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80235a6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80235aa:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80235ae:	440e      	add	r6, r1
 80235b0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80235b4:	440a      	add	r2, r1
 80235b6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80235ba:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80235be:	4413      	add	r3, r2
 80235c0:	f8ad 3012 	strh.w	r3, [sp, #18]
 80235c4:	4b77      	ldr	r3, [pc, #476]	; (80237a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80235c6:	6818      	ldr	r0, [r3, #0]
 80235c8:	6803      	ldr	r3, [r0, #0]
 80235ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80235cc:	4798      	blx	r3
 80235ce:	f8b9 b000 	ldrh.w	fp, [r9]
 80235d2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80235d6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80235da:	fb0b 2303 	mla	r3, fp, r3, r2
 80235de:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80235e2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80235e6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80235ea:	fb05 f50b 	mul.w	r5, r5, fp
 80235ee:	9300      	str	r3, [sp, #0]
 80235f0:	d069      	beq.n	80236c6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80235f2:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80235f6:	4558      	cmp	r0, fp
 80235f8:	f080 80cc 	bcs.w	8023794 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80235fc:	9b00      	ldr	r3, [sp, #0]
 80235fe:	18c3      	adds	r3, r0, r3
 8023600:	9301      	str	r3, [sp, #4]
 8023602:	4631      	mov	r1, r6
 8023604:	9b01      	ldr	r3, [sp, #4]
 8023606:	4298      	cmp	r0, r3
 8023608:	d24f      	bcs.n	80236aa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 802360a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802360e:	2a00      	cmp	r2, #0
 8023610:	d048      	beq.n	80236a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023612:	fb0a f202 	mul.w	r2, sl, r2
 8023616:	1c53      	adds	r3, r2, #1
 8023618:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802361c:	121b      	asrs	r3, r3, #8
 802361e:	d041      	beq.n	80236a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023620:	8802      	ldrh	r2, [r0, #0]
 8023622:	f8b4 c000 	ldrh.w	ip, [r4]
 8023626:	b29e      	uxth	r6, r3
 8023628:	1215      	asrs	r5, r2, #8
 802362a:	43db      	mvns	r3, r3
 802362c:	b2db      	uxtb	r3, r3
 802362e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8023632:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023636:	fb15 f503 	smulbb	r5, r5, r3
 802363a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 802363e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023642:	00d2      	lsls	r2, r2, #3
 8023644:	fb07 5706 	mla	r7, r7, r6, r5
 8023648:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802364c:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8023650:	b2d2      	uxtb	r2, r2
 8023652:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023656:	b2bf      	uxth	r7, r7
 8023658:	fb1e fe03 	smulbb	lr, lr, r3
 802365c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023660:	fa5f fc8c 	uxtb.w	ip, ip
 8023664:	fb12 f203 	smulbb	r2, r2, r3
 8023668:	fb05 e506 	mla	r5, r5, r6, lr
 802366c:	fb0c 2c06 	mla	ip, ip, r6, r2
 8023670:	f107 0e01 	add.w	lr, r7, #1
 8023674:	fa1f fc8c 	uxth.w	ip, ip
 8023678:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 802367c:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8023680:	f10c 0701 	add.w	r7, ip, #1
 8023684:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023688:	b2ad      	uxth	r5, r5
 802368a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802368e:	ea47 070e 	orr.w	r7, r7, lr
 8023692:	f105 0e01 	add.w	lr, r5, #1
 8023696:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 802369a:	096d      	lsrs	r5, r5, #5
 802369c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80236a0:	432f      	orrs	r7, r5
 80236a2:	8007      	strh	r7, [r0, #0]
 80236a4:	3002      	adds	r0, #2
 80236a6:	3402      	adds	r4, #2
 80236a8:	e7ac      	b.n	8023604 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80236aa:	f8b9 3000 	ldrh.w	r3, [r9]
 80236ae:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80236b2:	eba3 0308 	sub.w	r3, r3, r8
 80236b6:	eba6 0608 	sub.w	r6, r6, r8
 80236ba:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80236be:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80236c2:	440e      	add	r6, r1
 80236c4:	e797      	b.n	80235f6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 80236c6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80236ca:	42a8      	cmp	r0, r5
 80236cc:	d262      	bcs.n	8023794 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80236ce:	9b00      	ldr	r3, [sp, #0]
 80236d0:	4631      	mov	r1, r6
 80236d2:	eb00 0b03 	add.w	fp, r0, r3
 80236d6:	4558      	cmp	r0, fp
 80236d8:	d24e      	bcs.n	8023778 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80236da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80236de:	b12b      	cbz	r3, 80236ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80236e0:	2bff      	cmp	r3, #255	; 0xff
 80236e2:	f8b4 e000 	ldrh.w	lr, [r4]
 80236e6:	d104      	bne.n	80236f2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 80236e8:	f8a0 e000 	strh.w	lr, [r0]
 80236ec:	3002      	adds	r0, #2
 80236ee:	3402      	adds	r4, #2
 80236f0:	e7f1      	b.n	80236d6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 80236f2:	8802      	ldrh	r2, [r0, #0]
 80236f4:	b29f      	uxth	r7, r3
 80236f6:	1216      	asrs	r6, r2, #8
 80236f8:	43db      	mvns	r3, r3
 80236fa:	b2db      	uxtb	r3, r3
 80236fc:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8023700:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8023704:	fb16 f603 	smulbb	r6, r6, r3
 8023708:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 802370c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023710:	00d2      	lsls	r2, r2, #3
 8023712:	fb0c 6c07 	mla	ip, ip, r7, r6
 8023716:	b2d2      	uxtb	r2, r2
 8023718:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802371c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8023720:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023724:	fb1a fa03 	smulbb	sl, sl, r3
 8023728:	fa1f fc8c 	uxth.w	ip, ip
 802372c:	fb12 f303 	smulbb	r3, r2, r3
 8023730:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8023734:	fa5f fe8e 	uxtb.w	lr, lr
 8023738:	fb06 a607 	mla	r6, r6, r7, sl
 802373c:	f10c 0201 	add.w	r2, ip, #1
 8023740:	fb0e 3307 	mla	r3, lr, r7, r3
 8023744:	b2b6      	uxth	r6, r6
 8023746:	b29b      	uxth	r3, r3
 8023748:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 802374c:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8023750:	f106 0a01 	add.w	sl, r6, #1
 8023754:	f103 0c01 	add.w	ip, r3, #1
 8023758:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802375c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8023760:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023764:	0976      	lsrs	r6, r6, #5
 8023766:	ea4c 0c02 	orr.w	ip, ip, r2
 802376a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802376e:	ea4c 0c06 	orr.w	ip, ip, r6
 8023772:	f8a0 c000 	strh.w	ip, [r0]
 8023776:	e7b9      	b.n	80236ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8023778:	f8b9 3000 	ldrh.w	r3, [r9]
 802377c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8023780:	eba3 0308 	sub.w	r3, r3, r8
 8023784:	eba6 0608 	sub.w	r6, r6, r8
 8023788:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 802378c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023790:	440e      	add	r6, r1
 8023792:	e79a      	b.n	80236ca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8023794:	4b03      	ldr	r3, [pc, #12]	; (80237a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8023796:	6818      	ldr	r0, [r3, #0]
 8023798:	6803      	ldr	r3, [r0, #0]
 802379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802379c:	4798      	blx	r3
 802379e:	b007      	add	sp, #28
 80237a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237a4:	2000977c 	.word	0x2000977c
 80237a8:	20009776 	.word	0x20009776

080237ac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80237ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237b0:	b089      	sub	sp, #36	; 0x24
 80237b2:	4682      	mov	sl, r0
 80237b4:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 80237b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80237ba:	460f      	mov	r7, r1
 80237bc:	4691      	mov	r9, r2
 80237be:	4698      	mov	r8, r3
 80237c0:	2e00      	cmp	r6, #0
 80237c2:	d03d      	beq.n	8023840 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80237c4:	4608      	mov	r0, r1
 80237c6:	f7fc f863 	bl	801f890 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80237ca:	4605      	mov	r5, r0
 80237cc:	4638      	mov	r0, r7
 80237ce:	f7fc f899 	bl	801f904 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80237d2:	f8ad 000e 	strh.w	r0, [sp, #14]
 80237d6:	4638      	mov	r0, r7
 80237d8:	f8ad 9008 	strh.w	r9, [sp, #8]
 80237dc:	f8ad 500c 	strh.w	r5, [sp, #12]
 80237e0:	f8ad 800a 	strh.w	r8, [sp, #10]
 80237e4:	f7fc f95c 	bl	801faa0 <_ZNK8touchgfx6Bitmap7getDataEv>
 80237e8:	4605      	mov	r5, r0
 80237ea:	4638      	mov	r0, r7
 80237ec:	f7fc f98a 	bl	801fb04 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80237f0:	4681      	mov	r9, r0
 80237f2:	4638      	mov	r0, r7
 80237f4:	f7fc f9de 	bl	801fbb4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80237f8:	280b      	cmp	r0, #11
 80237fa:	f200 816f 	bhi.w	8023adc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 80237fe:	e8df f010 	tbh	[pc, r0, lsl #1]
 8023802:	00c3      	.short	0x00c3
 8023804:	000c00b4 	.word	0x000c00b4
 8023808:	016d016d 	.word	0x016d016d
 802380c:	016d016d 	.word	0x016d016d
 8023810:	016d016d 	.word	0x016d016d
 8023814:	016d016d 	.word	0x016d016d
 8023818:	00bb      	.short	0x00bb
 802381a:	4bb3      	ldr	r3, [pc, #716]	; (8023ae8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 802381c:	6818      	ldr	r0, [r3, #0]
 802381e:	6803      	ldr	r3, [r0, #0]
 8023820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023822:	4798      	blx	r3
 8023824:	2eff      	cmp	r6, #255	; 0xff
 8023826:	d121      	bne.n	802386c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8023828:	0683      	lsls	r3, r0, #26
 802382a:	d41f      	bmi.n	802386c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 802382c:	4638      	mov	r0, r7
 802382e:	f7fc f8fd 	bl	801fa2c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8023832:	b940      	cbnz	r0, 8023846 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8023834:	4623      	mov	r3, r4
 8023836:	aa02      	add	r2, sp, #8
 8023838:	4629      	mov	r1, r5
 802383a:	4650      	mov	r0, sl
 802383c:	f7ff f9e4 	bl	8022c08 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8023840:	b009      	add	sp, #36	; 0x24
 8023842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023846:	f10d 0818 	add.w	r8, sp, #24
 802384a:	4639      	mov	r1, r7
 802384c:	4640      	mov	r0, r8
 802384e:	f7fc f893 	bl	801f978 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8023852:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023856:	af04      	add	r7, sp, #16
 8023858:	e887 0003 	stmia.w	r7, {r0, r1}
 802385c:	4638      	mov	r0, r7
 802385e:	4621      	mov	r1, r4
 8023860:	f7f3 fe42 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 8023864:	4638      	mov	r0, r7
 8023866:	f7f3 fe82 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 802386a:	b130      	cbz	r0, 802387a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 802386c:	4633      	mov	r3, r6
 802386e:	4622      	mov	r2, r4
 8023870:	a902      	add	r1, sp, #8
 8023872:	4628      	mov	r0, r5
 8023874:	f7ff f8e2 	bl	8022a3c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023878:	e7e2      	b.n	8023840 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802387a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802387e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8023882:	4293      	cmp	r3, r2
 8023884:	dd12      	ble.n	80238ac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 8023886:	1a9b      	subs	r3, r3, r2
 8023888:	f9b4 0000 	ldrsh.w	r0, [r4]
 802388c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023890:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023894:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023898:	f8ad 101c 	strh.w	r1, [sp, #28]
 802389c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80238a0:	4642      	mov	r2, r8
 80238a2:	4633      	mov	r3, r6
 80238a4:	a902      	add	r1, sp, #8
 80238a6:	4628      	mov	r0, r5
 80238a8:	f7ff f8c8 	bl	8022a3c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80238ac:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80238b0:	f9b4 2000 	ldrsh.w	r2, [r4]
 80238b4:	4293      	cmp	r3, r2
 80238b6:	dd12      	ble.n	80238de <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 80238b8:	1a9b      	subs	r3, r3, r2
 80238ba:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80238be:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80238c2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80238c6:	f8ad 001a 	strh.w	r0, [sp, #26]
 80238ca:	f8ad 301c 	strh.w	r3, [sp, #28]
 80238ce:	f8ad 101e 	strh.w	r1, [sp, #30]
 80238d2:	23ff      	movs	r3, #255	; 0xff
 80238d4:	4642      	mov	r2, r8
 80238d6:	a902      	add	r1, sp, #8
 80238d8:	4628      	mov	r0, r5
 80238da:	f7ff f8af 	bl	8022a3c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80238de:	463b      	mov	r3, r7
 80238e0:	aa02      	add	r2, sp, #8
 80238e2:	4629      	mov	r1, r5
 80238e4:	4650      	mov	r0, sl
 80238e6:	f7ff f98f 	bl	8022c08 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80238ea:	88a2      	ldrh	r2, [r4, #4]
 80238ec:	8823      	ldrh	r3, [r4, #0]
 80238ee:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80238f2:	4413      	add	r3, r2
 80238f4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80238f8:	440a      	add	r2, r1
 80238fa:	b29b      	uxth	r3, r3
 80238fc:	b292      	uxth	r2, r2
 80238fe:	b211      	sxth	r1, r2
 8023900:	b218      	sxth	r0, r3
 8023902:	4288      	cmp	r0, r1
 8023904:	dd12      	ble.n	802392c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 8023906:	1a9b      	subs	r3, r3, r2
 8023908:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 802390c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8023910:	f8ad 1018 	strh.w	r1, [sp, #24]
 8023914:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023918:	f8ad 001e 	strh.w	r0, [sp, #30]
 802391c:	23ff      	movs	r3, #255	; 0xff
 802391e:	4642      	mov	r2, r8
 8023920:	a902      	add	r1, sp, #8
 8023922:	4628      	mov	r0, r5
 8023924:	f8ad 601a 	strh.w	r6, [sp, #26]
 8023928:	f7ff f888 	bl	8022a3c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802392c:	88e2      	ldrh	r2, [r4, #6]
 802392e:	8863      	ldrh	r3, [r4, #2]
 8023930:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8023934:	4413      	add	r3, r2
 8023936:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 802393a:	440a      	add	r2, r1
 802393c:	b29b      	uxth	r3, r3
 802393e:	b292      	uxth	r2, r2
 8023940:	b211      	sxth	r1, r2
 8023942:	b218      	sxth	r0, r3
 8023944:	4288      	cmp	r0, r1
 8023946:	f77f af7b 	ble.w	8023840 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802394a:	1a9b      	subs	r3, r3, r2
 802394c:	f9b4 6000 	ldrsh.w	r6, [r4]
 8023950:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023954:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023958:	f8ad 6018 	strh.w	r6, [sp, #24]
 802395c:	f8ad 101a 	strh.w	r1, [sp, #26]
 8023960:	f8ad 001c 	strh.w	r0, [sp, #28]
 8023964:	23ff      	movs	r3, #255	; 0xff
 8023966:	4642      	mov	r2, r8
 8023968:	e782      	b.n	8023870 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 802396a:	4633      	mov	r3, r6
 802396c:	4622      	mov	r2, r4
 802396e:	a902      	add	r1, sp, #8
 8023970:	4628      	mov	r0, r5
 8023972:	f7ff f9b9 	bl	8022ce8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8023976:	e763      	b.n	8023840 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023978:	9600      	str	r6, [sp, #0]
 802397a:	4623      	mov	r3, r4
 802397c:	aa02      	add	r2, sp, #8
 802397e:	4649      	mov	r1, r9
 8023980:	4628      	mov	r0, r5
 8023982:	f7ff fdd5 	bl	8023530 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8023986:	e75b      	b.n	8023840 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023988:	4638      	mov	r0, r7
 802398a:	f7fc f84f 	bl	801fa2c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 802398e:	b950      	cbnz	r0, 80239a6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 8023990:	e9cd 6000 	strd	r6, r0, [sp]
 8023994:	f8da 3000 	ldr.w	r3, [sl]
 8023998:	aa02      	add	r2, sp, #8
 802399a:	68de      	ldr	r6, [r3, #12]
 802399c:	4629      	mov	r1, r5
 802399e:	4623      	mov	r3, r4
 80239a0:	4650      	mov	r0, sl
 80239a2:	47b0      	blx	r6
 80239a4:	e74c      	b.n	8023840 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80239a6:	f10d 0818 	add.w	r8, sp, #24
 80239aa:	4639      	mov	r1, r7
 80239ac:	4640      	mov	r0, r8
 80239ae:	f7fb ffe3 	bl	801f978 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80239b2:	e898 0003 	ldmia.w	r8, {r0, r1}
 80239b6:	af04      	add	r7, sp, #16
 80239b8:	e887 0003 	stmia.w	r7, {r0, r1}
 80239bc:	4638      	mov	r0, r7
 80239be:	4621      	mov	r1, r4
 80239c0:	f7f3 fd92 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 80239c4:	4638      	mov	r0, r7
 80239c6:	f7f3 fdd2 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 80239ca:	b138      	cbz	r0, 80239dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 80239cc:	9600      	str	r6, [sp, #0]
 80239ce:	4623      	mov	r3, r4
 80239d0:	aa02      	add	r2, sp, #8
 80239d2:	4649      	mov	r1, r9
 80239d4:	4628      	mov	r0, r5
 80239d6:	f7ff fdc3 	bl	8023560 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80239da:	e731      	b.n	8023840 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80239dc:	e9cd 6000 	strd	r6, r0, [sp]
 80239e0:	f8da 3000 	ldr.w	r3, [sl]
 80239e4:	aa02      	add	r2, sp, #8
 80239e6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80239ea:	4629      	mov	r1, r5
 80239ec:	463b      	mov	r3, r7
 80239ee:	4650      	mov	r0, sl
 80239f0:	47d8      	blx	fp
 80239f2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80239f6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80239fa:	4293      	cmp	r3, r2
 80239fc:	dd13      	ble.n	8023a26 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 80239fe:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023a02:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023a06:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023a0a:	1a9b      	subs	r3, r3, r2
 8023a0c:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023a10:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023a14:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023a18:	9600      	str	r6, [sp, #0]
 8023a1a:	4643      	mov	r3, r8
 8023a1c:	aa02      	add	r2, sp, #8
 8023a1e:	4649      	mov	r1, r9
 8023a20:	4628      	mov	r0, r5
 8023a22:	f7ff fd9d 	bl	8023560 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023a26:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023a2a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8023a2e:	4293      	cmp	r3, r2
 8023a30:	dd13      	ble.n	8023a5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 8023a32:	1a9b      	subs	r3, r3, r2
 8023a34:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8023a38:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023a3c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023a40:	f8ad 001a 	strh.w	r0, [sp, #26]
 8023a44:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023a48:	f8ad 101e 	strh.w	r1, [sp, #30]
 8023a4c:	9600      	str	r6, [sp, #0]
 8023a4e:	4643      	mov	r3, r8
 8023a50:	aa02      	add	r2, sp, #8
 8023a52:	4649      	mov	r1, r9
 8023a54:	4628      	mov	r0, r5
 8023a56:	f7ff fd83 	bl	8023560 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023a5a:	88a2      	ldrh	r2, [r4, #4]
 8023a5c:	8823      	ldrh	r3, [r4, #0]
 8023a5e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023a62:	4413      	add	r3, r2
 8023a64:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023a68:	440a      	add	r2, r1
 8023a6a:	b29b      	uxth	r3, r3
 8023a6c:	b292      	uxth	r2, r2
 8023a6e:	b211      	sxth	r1, r2
 8023a70:	b218      	sxth	r0, r3
 8023a72:	4288      	cmp	r0, r1
 8023a74:	dd13      	ble.n	8023a9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 8023a76:	1a9b      	subs	r3, r3, r2
 8023a78:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023a7c:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8023a80:	f8ad 1018 	strh.w	r1, [sp, #24]
 8023a84:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023a88:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023a8c:	9600      	str	r6, [sp, #0]
 8023a8e:	4643      	mov	r3, r8
 8023a90:	aa02      	add	r2, sp, #8
 8023a92:	4649      	mov	r1, r9
 8023a94:	4628      	mov	r0, r5
 8023a96:	f8ad 701a 	strh.w	r7, [sp, #26]
 8023a9a:	f7ff fd61 	bl	8023560 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023a9e:	88e2      	ldrh	r2, [r4, #6]
 8023aa0:	8863      	ldrh	r3, [r4, #2]
 8023aa2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8023aa6:	4413      	add	r3, r2
 8023aa8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8023aac:	440a      	add	r2, r1
 8023aae:	b29b      	uxth	r3, r3
 8023ab0:	b292      	uxth	r2, r2
 8023ab2:	b211      	sxth	r1, r2
 8023ab4:	b218      	sxth	r0, r3
 8023ab6:	4288      	cmp	r0, r1
 8023ab8:	f77f aec2 	ble.w	8023840 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023abc:	f9b4 7000 	ldrsh.w	r7, [r4]
 8023ac0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023ac4:	f8ad 7018 	strh.w	r7, [sp, #24]
 8023ac8:	1a9b      	subs	r3, r3, r2
 8023aca:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023ace:	f8ad 101a 	strh.w	r1, [sp, #26]
 8023ad2:	f8ad 001c 	strh.w	r0, [sp, #28]
 8023ad6:	9600      	str	r6, [sp, #0]
 8023ad8:	4643      	mov	r3, r8
 8023ada:	e779      	b.n	80239d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 8023adc:	4b03      	ldr	r3, [pc, #12]	; (8023aec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 8023ade:	4a04      	ldr	r2, [pc, #16]	; (8023af0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 8023ae0:	4804      	ldr	r0, [pc, #16]	; (8023af4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 8023ae2:	21b4      	movs	r1, #180	; 0xb4
 8023ae4:	f00a f9ec 	bl	802dec0 <__assert_func>
 8023ae8:	2000977c 	.word	0x2000977c
 8023aec:	08032997 	.word	0x08032997
 8023af0:	0803309f 	.word	0x0803309f
 8023af4:	08032acd 	.word	0x08032acd

08023af8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8023af8:	b508      	push	{r3, lr}
 8023afa:	b180      	cbz	r0, 8023b1e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8023afc:	2902      	cmp	r1, #2
 8023afe:	d014      	beq.n	8023b2a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8023b00:	2903      	cmp	r1, #3
 8023b02:	d01d      	beq.n	8023b40 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8023b04:	2901      	cmp	r1, #1
 8023b06:	d101      	bne.n	8023b0c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8023b08:	2001      	movs	r0, #1
 8023b0a:	bd08      	pop	{r3, pc}
 8023b0c:	4b0e      	ldr	r3, [pc, #56]	; (8023b48 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023b0e:	8818      	ldrh	r0, [r3, #0]
 8023b10:	b990      	cbnz	r0, 8023b38 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8023b12:	4b0e      	ldr	r3, [pc, #56]	; (8023b4c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8023b14:	4a0e      	ldr	r2, [pc, #56]	; (8023b50 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8023b16:	480f      	ldr	r0, [pc, #60]	; (8023b54 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8023b18:	2150      	movs	r1, #80	; 0x50
 8023b1a:	f00a f9d1 	bl	802dec0 <__assert_func>
 8023b1e:	2902      	cmp	r1, #2
 8023b20:	d00e      	beq.n	8023b40 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8023b22:	2903      	cmp	r1, #3
 8023b24:	d0f2      	beq.n	8023b0c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8023b26:	2901      	cmp	r1, #1
 8023b28:	d1ee      	bne.n	8023b08 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8023b2a:	4b07      	ldr	r3, [pc, #28]	; (8023b48 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023b2c:	8818      	ldrh	r0, [r3, #0]
 8023b2e:	2800      	cmp	r0, #0
 8023b30:	d0ef      	beq.n	8023b12 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8023b32:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023b36:	e7e8      	b.n	8023b0a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023b38:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023b3c:	4240      	negs	r0, r0
 8023b3e:	e7e4      	b.n	8023b0a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023b40:	f04f 30ff 	mov.w	r0, #4294967295
 8023b44:	e7e1      	b.n	8023b0a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023b46:	bf00      	nop
 8023b48:	20009776 	.word	0x20009776
 8023b4c:	08032c23 	.word	0x08032c23
 8023b50:	0803321c 	.word	0x0803321c
 8023b54:	08032c65 	.word	0x08032c65

08023b58 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8023b58:	b508      	push	{r3, lr}
 8023b5a:	b180      	cbz	r0, 8023b7e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8023b5c:	2902      	cmp	r1, #2
 8023b5e:	d014      	beq.n	8023b8a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8023b60:	2903      	cmp	r1, #3
 8023b62:	d018      	beq.n	8023b96 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8023b64:	2901      	cmp	r1, #1
 8023b66:	d001      	beq.n	8023b6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8023b68:	2001      	movs	r0, #1
 8023b6a:	e013      	b.n	8023b94 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8023b6c:	4b0e      	ldr	r3, [pc, #56]	; (8023ba8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023b6e:	8818      	ldrh	r0, [r3, #0]
 8023b70:	b970      	cbnz	r0, 8023b90 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8023b72:	4b0e      	ldr	r3, [pc, #56]	; (8023bac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8023b74:	4a0e      	ldr	r2, [pc, #56]	; (8023bb0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8023b76:	480f      	ldr	r0, [pc, #60]	; (8023bb4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8023b78:	2150      	movs	r1, #80	; 0x50
 8023b7a:	f00a f9a1 	bl	802dec0 <__assert_func>
 8023b7e:	2902      	cmp	r1, #2
 8023b80:	d009      	beq.n	8023b96 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8023b82:	2903      	cmp	r1, #3
 8023b84:	d0f0      	beq.n	8023b68 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8023b86:	2901      	cmp	r1, #1
 8023b88:	d1f0      	bne.n	8023b6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8023b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8023b8e:	e001      	b.n	8023b94 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8023b90:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023b94:	bd08      	pop	{r3, pc}
 8023b96:	4b04      	ldr	r3, [pc, #16]	; (8023ba8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023b98:	8818      	ldrh	r0, [r3, #0]
 8023b9a:	2800      	cmp	r0, #0
 8023b9c:	d0e9      	beq.n	8023b72 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8023b9e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023ba2:	4240      	negs	r0, r0
 8023ba4:	e7f6      	b.n	8023b94 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8023ba6:	bf00      	nop
 8023ba8:	20009776 	.word	0x20009776
 8023bac:	08032c23 	.word	0x08032c23
 8023bb0:	0803321c 	.word	0x0803321c
 8023bb4:	08032c65 	.word	0x08032c65

08023bb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8023bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023bbc:	b099      	sub	sp, #100	; 0x64
 8023bbe:	910b      	str	r1, [sp, #44]	; 0x2c
 8023bc0:	a914      	add	r1, sp, #80	; 0x50
 8023bc2:	e881 000c 	stmia.w	r1, {r2, r3}
 8023bc6:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8023bca:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8023bce:	930a      	str	r3, [sp, #40]	; 0x28
 8023bd0:	f891 900d 	ldrb.w	r9, [r1, #13]
 8023bd4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8023bd8:	9311      	str	r3, [sp, #68]	; 0x44
 8023bda:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8023bde:	930c      	str	r3, [sp, #48]	; 0x30
 8023be0:	7988      	ldrb	r0, [r1, #6]
 8023be2:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 8023be6:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 8023bea:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 8023bee:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8023bf2:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8023bf6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8023bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023bfe:	4303      	orrs	r3, r0
 8023c00:	9309      	str	r3, [sp, #36]	; 0x24
 8023c02:	f000 81a1 	beq.w	8023f48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023c06:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8023c0a:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8023c0e:	f891 9007 	ldrb.w	r9, [r1, #7]
 8023c12:	ea59 0903 	orrs.w	r9, r9, r3
 8023c16:	f000 8197 	beq.w	8023f48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023c1a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8023c1e:	b29b      	uxth	r3, r3
 8023c20:	2e00      	cmp	r6, #0
 8023c22:	f000 813a 	beq.w	8023e9a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8023c26:	1af6      	subs	r6, r6, r3
 8023c28:	b2b6      	uxth	r6, r6
 8023c2a:	0433      	lsls	r3, r6, #16
 8023c2c:	d502      	bpl.n	8023c34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8023c2e:	1bad      	subs	r5, r5, r6
 8023c30:	b22d      	sxth	r5, r5
 8023c32:	2600      	movs	r6, #0
 8023c34:	f9b2 1000 	ldrsh.w	r1, [r2]
 8023c38:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8023c3c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8023c40:	428d      	cmp	r5, r1
 8023c42:	b28b      	uxth	r3, r1
 8023c44:	bfbf      	itttt	lt
 8023c46:	18f6      	addlt	r6, r6, r3
 8023c48:	1b75      	sublt	r5, r6, r5
 8023c4a:	b2ae      	uxthlt	r6, r5
 8023c4c:	460d      	movlt	r5, r1
 8023c4e:	8891      	ldrh	r1, [r2, #4]
 8023c50:	440b      	add	r3, r1
 8023c52:	b21b      	sxth	r3, r3
 8023c54:	9310      	str	r3, [sp, #64]	; 0x40
 8023c56:	88d3      	ldrh	r3, [r2, #6]
 8023c58:	8852      	ldrh	r2, [r2, #2]
 8023c5a:	4413      	add	r3, r2
 8023c5c:	b21b      	sxth	r3, r3
 8023c5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8023c60:	4bbc      	ldr	r3, [pc, #752]	; (8023f54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8023c62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023c64:	f893 b000 	ldrb.w	fp, [r3]
 8023c68:	f10b 3cff 	add.w	ip, fp, #4294967295
 8023c6c:	f1dc 0300 	rsbs	r3, ip, #0
 8023c70:	eb43 030c 	adc.w	r3, r3, ip
 8023c74:	930e      	str	r3, [sp, #56]	; 0x38
 8023c76:	4629      	mov	r1, r5
 8023c78:	4653      	mov	r3, sl
 8023c7a:	a814      	add	r0, sp, #80	; 0x50
 8023c7c:	f7f7 fecd 	bl	801ba1a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8023c80:	4629      	mov	r1, r5
 8023c82:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8023c86:	4653      	mov	r3, sl
 8023c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023c8a:	a814      	add	r0, sp, #80	; 0x50
 8023c8c:	f7f7 fedd 	bl	801ba4a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8023c90:	a918      	add	r1, sp, #96	; 0x60
 8023c92:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8023c96:	a817      	add	r0, sp, #92	; 0x5c
 8023c98:	f7f7 fff8 	bl	801bc8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8023c9c:	f1ba 0f00 	cmp.w	sl, #0
 8023ca0:	f040 80fe 	bne.w	8023ea0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 8023ca4:	f1bb 0f01 	cmp.w	fp, #1
 8023ca8:	f040 8102 	bne.w	8023eb0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 8023cac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023cae:	b153      	cbz	r3, 8023cc6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8023cb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023cb2:	2408      	movs	r4, #8
 8023cb4:	fb94 f3f8 	sdiv	r3, r4, r8
 8023cb8:	1e5c      	subs	r4, r3, #1
 8023cba:	4414      	add	r4, r2
 8023cbc:	fb94 f4f3 	sdiv	r4, r4, r3
 8023cc0:	fb14 f403 	smulbb	r4, r4, r3
 8023cc4:	b2a4      	uxth	r4, r4
 8023cc6:	b906      	cbnz	r6, 8023cca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 8023cc8:	b16f      	cbz	r7, 8023ce6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 8023cca:	fb07 6304 	mla	r3, r7, r4, r6
 8023cce:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023cd0:	fb08 f303 	mul.w	r3, r8, r3
 8023cd4:	463a      	mov	r2, r7
 8023cd6:	f003 0707 	and.w	r7, r3, #7
 8023cda:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8023cde:	9328      	str	r3, [sp, #160]	; 0xa0
 8023ce0:	eba9 0302 	sub.w	r3, r9, r2
 8023ce4:	930d      	str	r3, [sp, #52]	; 0x34
 8023ce6:	4651      	mov	r1, sl
 8023ce8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023cea:	f7ff ff05 	bl	8023af8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8023cee:	4651      	mov	r1, sl
 8023cf0:	4681      	mov	r9, r0
 8023cf2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023cf4:	f7ff ff30 	bl	8023b58 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8023cf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023cfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023cfc:	eba3 0a02 	sub.w	sl, r3, r2
 8023d00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023d02:	459a      	cmp	sl, r3
 8023d04:	bfa8      	it	ge
 8023d06:	469a      	movge	sl, r3
 8023d08:	f1ba 0f00 	cmp.w	sl, #0
 8023d0c:	4683      	mov	fp, r0
 8023d0e:	f340 811b 	ble.w	8023f48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023d12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023d14:	1bad      	subs	r5, r5, r6
 8023d16:	1b5d      	subs	r5, r3, r5
 8023d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d1a:	429d      	cmp	r5, r3
 8023d1c:	bfd4      	ite	le
 8023d1e:	ebc6 0605 	rsble	r6, r6, r5
 8023d22:	ebc6 0603 	rsbgt	r6, r6, r3
 8023d26:	2e00      	cmp	r6, #0
 8023d28:	f340 810e 	ble.w	8023f48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023d2c:	1ba4      	subs	r4, r4, r6
 8023d2e:	fb08 f304 	mul.w	r3, r8, r4
 8023d32:	930f      	str	r3, [sp, #60]	; 0x3c
 8023d34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023d36:	2b00      	cmp	r3, #0
 8023d38:	f040 8114 	bne.w	8023f64 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 8023d3c:	4b86      	ldr	r3, [pc, #536]	; (8023f58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8023d3e:	6818      	ldr	r0, [r3, #0]
 8023d40:	6803      	ldr	r3, [r0, #0]
 8023d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023d44:	4798      	blx	r3
 8023d46:	2301      	movs	r3, #1
 8023d48:	fa03 f308 	lsl.w	r3, r3, r8
 8023d4c:	4a83      	ldr	r2, [pc, #524]	; (8023f5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8023d4e:	3b01      	subs	r3, #1
 8023d50:	b2db      	uxtb	r3, r3
 8023d52:	8811      	ldrh	r1, [r2, #0]
 8023d54:	930e      	str	r3, [sp, #56]	; 0x38
 8023d56:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8023d5a:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8023d5e:	fb01 2303 	mla	r3, r1, r3, r2
 8023d62:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8023d66:	930a      	str	r3, [sp, #40]	; 0x28
 8023d68:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d6a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8023d6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8023d70:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d72:	0a19      	lsrs	r1, r3, #8
 8023d74:	b2cb      	uxtb	r3, r1
 8023d76:	9312      	str	r3, [sp, #72]	; 0x48
 8023d78:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d7a:	b2db      	uxtb	r3, r3
 8023d7c:	9311      	str	r3, [sp, #68]	; 0x44
 8023d7e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d80:	095a      	lsrs	r2, r3, #5
 8023d82:	4b77      	ldr	r3, [pc, #476]	; (8023f60 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8023d84:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023d88:	400b      	ands	r3, r1
 8023d8a:	4313      	orrs	r3, r2
 8023d8c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023d8e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023d92:	4313      	orrs	r3, r2
 8023d94:	b29b      	uxth	r3, r3
 8023d96:	9310      	str	r3, [sp, #64]	; 0x40
 8023d98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d9a:	781a      	ldrb	r2, [r3, #0]
 8023d9c:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8023da0:	413a      	asrs	r2, r7
 8023da2:	fb06 b919 	mls	r9, r6, r9, fp
 8023da6:	fb03 fb06 	mul.w	fp, r3, r6
 8023daa:	b2d2      	uxtb	r2, r2
 8023dac:	930d      	str	r3, [sp, #52]	; 0x34
 8023dae:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8023db2:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8023db6:	f0c0 80ea 	bcc.w	8023f8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 8023dba:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8023dbe:	46b6      	mov	lr, r6
 8023dc0:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8023dc4:	f0c0 80d2 	bcc.w	8023f6c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 8023dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023dca:	4013      	ands	r3, r2
 8023dcc:	d055      	beq.n	8023e7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 8023dce:	20ff      	movs	r0, #255	; 0xff
 8023dd0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023dd2:	fb90 f1f1 	sdiv	r1, r0, r1
 8023dd6:	434b      	muls	r3, r1
 8023dd8:	2bfe      	cmp	r3, #254	; 0xfe
 8023dda:	dd03      	ble.n	8023de4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 8023ddc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023dde:	4281      	cmp	r1, r0
 8023de0:	f000 80c2 	beq.w	8023f68 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8023de4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023de6:	f8bc 4000 	ldrh.w	r4, [ip]
 8023dea:	fb11 f303 	smulbb	r3, r1, r3
 8023dee:	b29b      	uxth	r3, r3
 8023df0:	1c59      	adds	r1, r3, #1
 8023df2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023df6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023dfa:	b29d      	uxth	r5, r3
 8023dfc:	43db      	mvns	r3, r3
 8023dfe:	b2db      	uxtb	r3, r3
 8023e00:	9309      	str	r3, [sp, #36]	; 0x24
 8023e02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023e04:	1220      	asrs	r0, r4, #8
 8023e06:	fb13 f905 	smulbb	r9, r3, r5
 8023e0a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e10:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8023e14:	fb00 9003 	mla	r0, r0, r3, r9
 8023e18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023e1a:	10e1      	asrs	r1, r4, #3
 8023e1c:	fb13 f905 	smulbb	r9, r3, r5
 8023e20:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e26:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8023e2a:	fb01 9103 	mla	r1, r1, r3, r9
 8023e2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023e30:	00e4      	lsls	r4, r4, #3
 8023e32:	fb13 f505 	smulbb	r5, r3, r5
 8023e36:	b2e4      	uxtb	r4, r4
 8023e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e3a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8023e3e:	fb04 5403 	mla	r4, r4, r3, r5
 8023e42:	b280      	uxth	r0, r0
 8023e44:	b2a4      	uxth	r4, r4
 8023e46:	1c43      	adds	r3, r0, #1
 8023e48:	f104 0901 	add.w	r9, r4, #1
 8023e4c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023e50:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8023e54:	b289      	uxth	r1, r1
 8023e56:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8023e5a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023e5e:	ea49 0000 	orr.w	r0, r9, r0
 8023e62:	f101 0901 	add.w	r9, r1, #1
 8023e66:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8023e6a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8023e6e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023e72:	ea40 0009 	orr.w	r0, r0, r9
 8023e76:	f8ac 0000 	strh.w	r0, [ip]
 8023e7a:	4447      	add	r7, r8
 8023e7c:	b2bf      	uxth	r7, r7
 8023e7e:	2f07      	cmp	r7, #7
 8023e80:	bf81      	itttt	hi
 8023e82:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8023e84:	785a      	ldrbhi	r2, [r3, #1]
 8023e86:	3301      	addhi	r3, #1
 8023e88:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8023e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023e8c:	bf9a      	itte	ls
 8023e8e:	fa42 f208 	asrls.w	r2, r2, r8
 8023e92:	b2d2      	uxtbls	r2, r2
 8023e94:	2700      	movhi	r7, #0
 8023e96:	449c      	add	ip, r3
 8023e98:	e792      	b.n	8023dc0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8023e9a:	441d      	add	r5, r3
 8023e9c:	b22d      	sxth	r5, r5
 8023e9e:	e6c9      	b.n	8023c34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8023ea0:	f1ba 0f01 	cmp.w	sl, #1
 8023ea4:	f47f af02 	bne.w	8023cac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023ea8:	f1bb 0f01 	cmp.w	fp, #1
 8023eac:	f47f aefe 	bne.w	8023cac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023eb0:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8023f58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 8023eb4:	f8db 0000 	ldr.w	r0, [fp]
 8023eb8:	6803      	ldr	r3, [r0, #0]
 8023eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023ebc:	4798      	blx	r3
 8023ebe:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8023ec2:	465a      	mov	r2, fp
 8023ec4:	d006      	beq.n	8023ed4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 8023ec6:	f1b8 0f04 	cmp.w	r8, #4
 8023eca:	d140      	bne.n	8023f4e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8023ecc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023ece:	3300      	adds	r3, #0
 8023ed0:	bf18      	it	ne
 8023ed2:	2301      	movne	r3, #1
 8023ed4:	0580      	lsls	r0, r0, #22
 8023ed6:	d563      	bpl.n	8023fa0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8023ed8:	f1b8 0f08 	cmp.w	r8, #8
 8023edc:	d160      	bne.n	8023fa0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8023ede:	2b00      	cmp	r3, #0
 8023ee0:	bf0c      	ite	eq
 8023ee2:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8023ee6:	f44f 7180 	movne.w	r1, #256	; 0x100
 8023eea:	2e00      	cmp	r6, #0
 8023eec:	f47f aede 	bne.w	8023cac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023ef0:	2f00      	cmp	r7, #0
 8023ef2:	f47f aedb 	bne.w	8023cac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ef8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023efa:	18eb      	adds	r3, r5, r3
 8023efc:	4283      	cmp	r3, r0
 8023efe:	f73f aed5 	bgt.w	8023cac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f04:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023f06:	444b      	add	r3, r9
 8023f08:	4283      	cmp	r3, r0
 8023f0a:	f73f aecf 	bgt.w	8023cac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023f0e:	6810      	ldr	r0, [r2, #0]
 8023f10:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8023f14:	6805      	ldr	r5, [r0, #0]
 8023f16:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8023f1a:	f1b8 0f08 	cmp.w	r8, #8
 8023f1e:	f04f 0600 	mov.w	r6, #0
 8023f22:	bf18      	it	ne
 8023f24:	3401      	addne	r4, #1
 8023f26:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8023f2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023f2c:	9104      	str	r1, [sp, #16]
 8023f2e:	bf18      	it	ne
 8023f30:	f024 0401 	bicne.w	r4, r4, #1
 8023f34:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023f36:	bf18      	it	ne
 8023f38:	b2a4      	uxthne	r4, r4
 8023f3a:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8023f3e:	e9cd 4900 	strd	r4, r9, [sp]
 8023f42:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023f44:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 8023f46:	47a0      	blx	r4
 8023f48:	b019      	add	sp, #100	; 0x64
 8023f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f4e:	2300      	movs	r3, #0
 8023f50:	e7c0      	b.n	8023ed4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 8023f52:	bf00      	nop
 8023f54:	20009774 	.word	0x20009774
 8023f58:	2000977c 	.word	0x2000977c
 8023f5c:	20009776 	.word	0x20009776
 8023f60:	00fff800 	.word	0x00fff800
 8023f64:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023f66:	e6ee      	b.n	8023d46 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 8023f68:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023f6a:	e784      	b.n	8023e76 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 8023f6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023f6e:	b153      	cbz	r3, 8023f86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 8023f70:	441f      	add	r7, r3
 8023f72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023f74:	b2bf      	uxth	r7, r7
 8023f76:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8023f7a:	f007 0707 	and.w	r7, r7, #7
 8023f7e:	781a      	ldrb	r2, [r3, #0]
 8023f80:	9328      	str	r3, [sp, #160]	; 0xa0
 8023f82:	413a      	asrs	r2, r7
 8023f84:	b2d2      	uxtb	r2, r2
 8023f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f88:	445b      	add	r3, fp
 8023f8a:	930a      	str	r3, [sp, #40]	; 0x28
 8023f8c:	e711      	b.n	8023db2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 8023f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023f90:	2b00      	cmp	r3, #0
 8023f92:	d1d9      	bne.n	8023f48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023f94:	4b05      	ldr	r3, [pc, #20]	; (8023fac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 8023f96:	6818      	ldr	r0, [r3, #0]
 8023f98:	6803      	ldr	r3, [r0, #0]
 8023f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023f9c:	4798      	blx	r3
 8023f9e:	e7d3      	b.n	8023f48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023fa0:	2b00      	cmp	r3, #0
 8023fa2:	f43f ae83 	beq.w	8023cac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023faa:	e79e      	b.n	8023eea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8023fac:	2000977c 	.word	0x2000977c

08023fb0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8023fb0:	b538      	push	{r3, r4, r5, lr}
 8023fb2:	4c15      	ldr	r4, [pc, #84]	; (8024008 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8023fb4:	7823      	ldrb	r3, [r4, #0]
 8023fb6:	f3bf 8f5b 	dmb	ish
 8023fba:	07da      	lsls	r2, r3, #31
 8023fbc:	4605      	mov	r5, r0
 8023fbe:	d40b      	bmi.n	8023fd8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8023fc0:	4620      	mov	r0, r4
 8023fc2:	f009 f960 	bl	802d286 <__cxa_guard_acquire>
 8023fc6:	b138      	cbz	r0, 8023fd8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8023fc8:	4620      	mov	r0, r4
 8023fca:	f009 f968 	bl	802d29e <__cxa_guard_release>
 8023fce:	4a0f      	ldr	r2, [pc, #60]	; (802400c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8023fd0:	490f      	ldr	r1, [pc, #60]	; (8024010 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8023fd2:	4810      	ldr	r0, [pc, #64]	; (8024014 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8023fd4:	f009 f950 	bl	802d278 <__aeabi_atexit>
 8023fd8:	4c0f      	ldr	r4, [pc, #60]	; (8024018 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8023fda:	7823      	ldrb	r3, [r4, #0]
 8023fdc:	f3bf 8f5b 	dmb	ish
 8023fe0:	07db      	lsls	r3, r3, #31
 8023fe2:	d40b      	bmi.n	8023ffc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8023fe4:	4620      	mov	r0, r4
 8023fe6:	f009 f94e 	bl	802d286 <__cxa_guard_acquire>
 8023fea:	b138      	cbz	r0, 8023ffc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8023fec:	4620      	mov	r0, r4
 8023fee:	f009 f956 	bl	802d29e <__cxa_guard_release>
 8023ff2:	4a06      	ldr	r2, [pc, #24]	; (802400c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8023ff4:	4909      	ldr	r1, [pc, #36]	; (802401c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8023ff6:	480a      	ldr	r0, [pc, #40]	; (8024020 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8023ff8:	f009 f93e 	bl	802d278 <__aeabi_atexit>
 8023ffc:	4b05      	ldr	r3, [pc, #20]	; (8024014 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8023ffe:	612b      	str	r3, [r5, #16]
 8024000:	4b07      	ldr	r3, [pc, #28]	; (8024020 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8024002:	616b      	str	r3, [r5, #20]
 8024004:	bd38      	pop	{r3, r4, r5, pc}
 8024006:	bf00      	nop
 8024008:	20009848 	.word	0x20009848
 802400c:	20000000 	.word	0x20000000
 8024010:	080221b3 	.word	0x080221b3
 8024014:	20000064 	.word	0x20000064
 8024018:	2000984c 	.word	0x2000984c
 802401c:	080221b1 	.word	0x080221b1
 8024020:	20000068 	.word	0x20000068

08024024 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8024024:	b538      	push	{r3, r4, r5, lr}
 8024026:	4c15      	ldr	r4, [pc, #84]	; (802407c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8024028:	7823      	ldrb	r3, [r4, #0]
 802402a:	f3bf 8f5b 	dmb	ish
 802402e:	07da      	lsls	r2, r3, #31
 8024030:	4605      	mov	r5, r0
 8024032:	d40b      	bmi.n	802404c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8024034:	4620      	mov	r0, r4
 8024036:	f009 f926 	bl	802d286 <__cxa_guard_acquire>
 802403a:	b138      	cbz	r0, 802404c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 802403c:	4620      	mov	r0, r4
 802403e:	f009 f92e 	bl	802d29e <__cxa_guard_release>
 8024042:	4a0f      	ldr	r2, [pc, #60]	; (8024080 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8024044:	490f      	ldr	r1, [pc, #60]	; (8024084 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8024046:	4810      	ldr	r0, [pc, #64]	; (8024088 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8024048:	f009 f916 	bl	802d278 <__aeabi_atexit>
 802404c:	4c0f      	ldr	r4, [pc, #60]	; (802408c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 802404e:	7823      	ldrb	r3, [r4, #0]
 8024050:	f3bf 8f5b 	dmb	ish
 8024054:	07db      	lsls	r3, r3, #31
 8024056:	d40b      	bmi.n	8024070 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8024058:	4620      	mov	r0, r4
 802405a:	f009 f914 	bl	802d286 <__cxa_guard_acquire>
 802405e:	b138      	cbz	r0, 8024070 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8024060:	4620      	mov	r0, r4
 8024062:	f009 f91c 	bl	802d29e <__cxa_guard_release>
 8024066:	4a06      	ldr	r2, [pc, #24]	; (8024080 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8024068:	4909      	ldr	r1, [pc, #36]	; (8024090 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802406a:	480a      	ldr	r0, [pc, #40]	; (8024094 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802406c:	f009 f904 	bl	802d278 <__aeabi_atexit>
 8024070:	4b05      	ldr	r3, [pc, #20]	; (8024088 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8024072:	60ab      	str	r3, [r5, #8]
 8024074:	4b07      	ldr	r3, [pc, #28]	; (8024094 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8024076:	60eb      	str	r3, [r5, #12]
 8024078:	bd38      	pop	{r3, r4, r5, pc}
 802407a:	bf00      	nop
 802407c:	20009820 	.word	0x20009820
 8024080:	20000000 	.word	0x20000000
 8024084:	080221b7 	.word	0x080221b7
 8024088:	2000003c 	.word	0x2000003c
 802408c:	20009824 	.word	0x20009824
 8024090:	080221b5 	.word	0x080221b5
 8024094:	20000040 	.word	0x20000040

08024098 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8024098:	b510      	push	{r4, lr}
 802409a:	4604      	mov	r4, r0
 802409c:	f7ff ff88 	bl	8023fb0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 80240a0:	4620      	mov	r0, r4
 80240a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80240a6:	f7ff bfbd 	b.w	8024024 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080240ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80240ac:	b538      	push	{r3, r4, r5, lr}
 80240ae:	4c15      	ldr	r4, [pc, #84]	; (8024104 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80240b0:	7823      	ldrb	r3, [r4, #0]
 80240b2:	f3bf 8f5b 	dmb	ish
 80240b6:	07da      	lsls	r2, r3, #31
 80240b8:	4605      	mov	r5, r0
 80240ba:	d40b      	bmi.n	80240d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80240bc:	4620      	mov	r0, r4
 80240be:	f009 f8e2 	bl	802d286 <__cxa_guard_acquire>
 80240c2:	b138      	cbz	r0, 80240d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80240c4:	4620      	mov	r0, r4
 80240c6:	f009 f8ea 	bl	802d29e <__cxa_guard_release>
 80240ca:	4a0f      	ldr	r2, [pc, #60]	; (8024108 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80240cc:	490f      	ldr	r1, [pc, #60]	; (802410c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80240ce:	4810      	ldr	r0, [pc, #64]	; (8024110 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80240d0:	f009 f8d2 	bl	802d278 <__aeabi_atexit>
 80240d4:	4c0f      	ldr	r4, [pc, #60]	; (8024114 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80240d6:	7823      	ldrb	r3, [r4, #0]
 80240d8:	f3bf 8f5b 	dmb	ish
 80240dc:	07db      	lsls	r3, r3, #31
 80240de:	d40b      	bmi.n	80240f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80240e0:	4620      	mov	r0, r4
 80240e2:	f009 f8d0 	bl	802d286 <__cxa_guard_acquire>
 80240e6:	b138      	cbz	r0, 80240f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80240e8:	4620      	mov	r0, r4
 80240ea:	f009 f8d8 	bl	802d29e <__cxa_guard_release>
 80240ee:	4a06      	ldr	r2, [pc, #24]	; (8024108 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80240f0:	4909      	ldr	r1, [pc, #36]	; (8024118 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80240f2:	480a      	ldr	r0, [pc, #40]	; (802411c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80240f4:	f009 f8c0 	bl	802d278 <__aeabi_atexit>
 80240f8:	4b05      	ldr	r3, [pc, #20]	; (8024110 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80240fa:	622b      	str	r3, [r5, #32]
 80240fc:	4b07      	ldr	r3, [pc, #28]	; (802411c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80240fe:	626b      	str	r3, [r5, #36]	; 0x24
 8024100:	bd38      	pop	{r3, r4, r5, pc}
 8024102:	bf00      	nop
 8024104:	20009850 	.word	0x20009850
 8024108:	20000000 	.word	0x20000000
 802410c:	080221ab 	.word	0x080221ab
 8024110:	2000006c 	.word	0x2000006c
 8024114:	20009854 	.word	0x20009854
 8024118:	080221a9 	.word	0x080221a9
 802411c:	20000070 	.word	0x20000070

08024120 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8024120:	b538      	push	{r3, r4, r5, lr}
 8024122:	4c15      	ldr	r4, [pc, #84]	; (8024178 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8024124:	7823      	ldrb	r3, [r4, #0]
 8024126:	f3bf 8f5b 	dmb	ish
 802412a:	07da      	lsls	r2, r3, #31
 802412c:	4605      	mov	r5, r0
 802412e:	d40b      	bmi.n	8024148 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8024130:	4620      	mov	r0, r4
 8024132:	f009 f8a8 	bl	802d286 <__cxa_guard_acquire>
 8024136:	b138      	cbz	r0, 8024148 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8024138:	4620      	mov	r0, r4
 802413a:	f009 f8b0 	bl	802d29e <__cxa_guard_release>
 802413e:	4a0f      	ldr	r2, [pc, #60]	; (802417c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024140:	490f      	ldr	r1, [pc, #60]	; (8024180 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8024142:	4810      	ldr	r0, [pc, #64]	; (8024184 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024144:	f009 f898 	bl	802d278 <__aeabi_atexit>
 8024148:	4c0f      	ldr	r4, [pc, #60]	; (8024188 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802414a:	7823      	ldrb	r3, [r4, #0]
 802414c:	f3bf 8f5b 	dmb	ish
 8024150:	07db      	lsls	r3, r3, #31
 8024152:	d40b      	bmi.n	802416c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8024154:	4620      	mov	r0, r4
 8024156:	f009 f896 	bl	802d286 <__cxa_guard_acquire>
 802415a:	b138      	cbz	r0, 802416c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 802415c:	4620      	mov	r0, r4
 802415e:	f009 f89e 	bl	802d29e <__cxa_guard_release>
 8024162:	4a06      	ldr	r2, [pc, #24]	; (802417c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024164:	4909      	ldr	r1, [pc, #36]	; (802418c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8024166:	480a      	ldr	r0, [pc, #40]	; (8024190 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8024168:	f009 f886 	bl	802d278 <__aeabi_atexit>
 802416c:	4b05      	ldr	r3, [pc, #20]	; (8024184 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802416e:	61ab      	str	r3, [r5, #24]
 8024170:	4b07      	ldr	r3, [pc, #28]	; (8024190 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8024172:	61eb      	str	r3, [r5, #28]
 8024174:	bd38      	pop	{r3, r4, r5, pc}
 8024176:	bf00      	nop
 8024178:	20009828 	.word	0x20009828
 802417c:	20000000 	.word	0x20000000
 8024180:	080221af 	.word	0x080221af
 8024184:	20000044 	.word	0x20000044
 8024188:	2000982c 	.word	0x2000982c
 802418c:	080221ad 	.word	0x080221ad
 8024190:	20000048 	.word	0x20000048

08024194 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8024194:	b510      	push	{r4, lr}
 8024196:	4604      	mov	r4, r0
 8024198:	f7ff ff88 	bl	80240ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 802419c:	4620      	mov	r0, r4
 802419e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80241a2:	f7ff bfbd 	b.w	8024120 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080241a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80241a8:	b538      	push	{r3, r4, r5, lr}
 80241aa:	4c15      	ldr	r4, [pc, #84]	; (8024200 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80241ac:	7823      	ldrb	r3, [r4, #0]
 80241ae:	f3bf 8f5b 	dmb	ish
 80241b2:	07da      	lsls	r2, r3, #31
 80241b4:	4605      	mov	r5, r0
 80241b6:	d40b      	bmi.n	80241d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80241b8:	4620      	mov	r0, r4
 80241ba:	f009 f864 	bl	802d286 <__cxa_guard_acquire>
 80241be:	b138      	cbz	r0, 80241d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80241c0:	4620      	mov	r0, r4
 80241c2:	f009 f86c 	bl	802d29e <__cxa_guard_release>
 80241c6:	4a0f      	ldr	r2, [pc, #60]	; (8024204 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80241c8:	490f      	ldr	r1, [pc, #60]	; (8024208 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80241ca:	4810      	ldr	r0, [pc, #64]	; (802420c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80241cc:	f009 f854 	bl	802d278 <__aeabi_atexit>
 80241d0:	4c0f      	ldr	r4, [pc, #60]	; (8024210 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80241d2:	7823      	ldrb	r3, [r4, #0]
 80241d4:	f3bf 8f5b 	dmb	ish
 80241d8:	07db      	lsls	r3, r3, #31
 80241da:	d40b      	bmi.n	80241f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80241dc:	4620      	mov	r0, r4
 80241de:	f009 f852 	bl	802d286 <__cxa_guard_acquire>
 80241e2:	b138      	cbz	r0, 80241f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80241e4:	4620      	mov	r0, r4
 80241e6:	f009 f85a 	bl	802d29e <__cxa_guard_release>
 80241ea:	4a06      	ldr	r2, [pc, #24]	; (8024204 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80241ec:	4909      	ldr	r1, [pc, #36]	; (8024214 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80241ee:	480a      	ldr	r0, [pc, #40]	; (8024218 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80241f0:	f009 f842 	bl	802d278 <__aeabi_atexit>
 80241f4:	4b05      	ldr	r3, [pc, #20]	; (802420c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80241f6:	632b      	str	r3, [r5, #48]	; 0x30
 80241f8:	4b07      	ldr	r3, [pc, #28]	; (8024218 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80241fa:	636b      	str	r3, [r5, #52]	; 0x34
 80241fc:	bd38      	pop	{r3, r4, r5, pc}
 80241fe:	bf00      	nop
 8024200:	20009860 	.word	0x20009860
 8024204:	20000000 	.word	0x20000000
 8024208:	080221a3 	.word	0x080221a3
 802420c:	2000007c 	.word	0x2000007c
 8024210:	20009864 	.word	0x20009864
 8024214:	080221a1 	.word	0x080221a1
 8024218:	20000080 	.word	0x20000080

0802421c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 802421c:	b538      	push	{r3, r4, r5, lr}
 802421e:	4c15      	ldr	r4, [pc, #84]	; (8024274 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8024220:	7823      	ldrb	r3, [r4, #0]
 8024222:	f3bf 8f5b 	dmb	ish
 8024226:	07da      	lsls	r2, r3, #31
 8024228:	4605      	mov	r5, r0
 802422a:	d40b      	bmi.n	8024244 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 802422c:	4620      	mov	r0, r4
 802422e:	f009 f82a 	bl	802d286 <__cxa_guard_acquire>
 8024232:	b138      	cbz	r0, 8024244 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024234:	4620      	mov	r0, r4
 8024236:	f009 f832 	bl	802d29e <__cxa_guard_release>
 802423a:	4a0f      	ldr	r2, [pc, #60]	; (8024278 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 802423c:	490f      	ldr	r1, [pc, #60]	; (802427c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802423e:	4810      	ldr	r0, [pc, #64]	; (8024280 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8024240:	f009 f81a 	bl	802d278 <__aeabi_atexit>
 8024244:	4c0f      	ldr	r4, [pc, #60]	; (8024284 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8024246:	7823      	ldrb	r3, [r4, #0]
 8024248:	f3bf 8f5b 	dmb	ish
 802424c:	07db      	lsls	r3, r3, #31
 802424e:	d40b      	bmi.n	8024268 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8024250:	4620      	mov	r0, r4
 8024252:	f009 f818 	bl	802d286 <__cxa_guard_acquire>
 8024256:	b138      	cbz	r0, 8024268 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8024258:	4620      	mov	r0, r4
 802425a:	f009 f820 	bl	802d29e <__cxa_guard_release>
 802425e:	4a06      	ldr	r2, [pc, #24]	; (8024278 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8024260:	4909      	ldr	r1, [pc, #36]	; (8024288 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8024262:	480a      	ldr	r0, [pc, #40]	; (802428c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8024264:	f009 f808 	bl	802d278 <__aeabi_atexit>
 8024268:	4b05      	ldr	r3, [pc, #20]	; (8024280 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802426a:	62ab      	str	r3, [r5, #40]	; 0x28
 802426c:	4b07      	ldr	r3, [pc, #28]	; (802428c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 802426e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8024270:	bd38      	pop	{r3, r4, r5, pc}
 8024272:	bf00      	nop
 8024274:	20009830 	.word	0x20009830
 8024278:	20000000 	.word	0x20000000
 802427c:	080221a7 	.word	0x080221a7
 8024280:	2000004c 	.word	0x2000004c
 8024284:	20009834 	.word	0x20009834
 8024288:	080221a5 	.word	0x080221a5
 802428c:	20000050 	.word	0x20000050

08024290 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8024290:	b510      	push	{r4, lr}
 8024292:	4604      	mov	r4, r0
 8024294:	f7ff ff88 	bl	80241a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8024298:	4620      	mov	r0, r4
 802429a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802429e:	f7ff bfbd 	b.w	802421c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080242a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 80242a4:	b538      	push	{r3, r4, r5, lr}
 80242a6:	4c15      	ldr	r4, [pc, #84]	; (80242fc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 80242a8:	7823      	ldrb	r3, [r4, #0]
 80242aa:	f3bf 8f5b 	dmb	ish
 80242ae:	07da      	lsls	r2, r3, #31
 80242b0:	4605      	mov	r5, r0
 80242b2:	d40b      	bmi.n	80242cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80242b4:	4620      	mov	r0, r4
 80242b6:	f008 ffe6 	bl	802d286 <__cxa_guard_acquire>
 80242ba:	b138      	cbz	r0, 80242cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80242bc:	4620      	mov	r0, r4
 80242be:	f008 ffee 	bl	802d29e <__cxa_guard_release>
 80242c2:	4a0f      	ldr	r2, [pc, #60]	; (8024300 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80242c4:	490f      	ldr	r1, [pc, #60]	; (8024304 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80242c6:	4810      	ldr	r0, [pc, #64]	; (8024308 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80242c8:	f008 ffd6 	bl	802d278 <__aeabi_atexit>
 80242cc:	4c0f      	ldr	r4, [pc, #60]	; (802430c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 80242ce:	7823      	ldrb	r3, [r4, #0]
 80242d0:	f3bf 8f5b 	dmb	ish
 80242d4:	07db      	lsls	r3, r3, #31
 80242d6:	d40b      	bmi.n	80242f0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80242d8:	4620      	mov	r0, r4
 80242da:	f008 ffd4 	bl	802d286 <__cxa_guard_acquire>
 80242de:	b138      	cbz	r0, 80242f0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80242e0:	4620      	mov	r0, r4
 80242e2:	f008 ffdc 	bl	802d29e <__cxa_guard_release>
 80242e6:	4a06      	ldr	r2, [pc, #24]	; (8024300 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80242e8:	4909      	ldr	r1, [pc, #36]	; (8024310 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80242ea:	480a      	ldr	r0, [pc, #40]	; (8024314 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80242ec:	f008 ffc4 	bl	802d278 <__aeabi_atexit>
 80242f0:	4b05      	ldr	r3, [pc, #20]	; (8024308 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80242f2:	652b      	str	r3, [r5, #80]	; 0x50
 80242f4:	4b07      	ldr	r3, [pc, #28]	; (8024314 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80242f6:	656b      	str	r3, [r5, #84]	; 0x54
 80242f8:	bd38      	pop	{r3, r4, r5, pc}
 80242fa:	bf00      	nop
 80242fc:	20009868 	.word	0x20009868
 8024300:	20000000 	.word	0x20000000
 8024304:	08022193 	.word	0x08022193
 8024308:	20000084 	.word	0x20000084
 802430c:	2000986c 	.word	0x2000986c
 8024310:	08022191 	.word	0x08022191
 8024314:	20000088 	.word	0x20000088

08024318 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8024318:	b538      	push	{r3, r4, r5, lr}
 802431a:	4c15      	ldr	r4, [pc, #84]	; (8024370 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 802431c:	7823      	ldrb	r3, [r4, #0]
 802431e:	f3bf 8f5b 	dmb	ish
 8024322:	07da      	lsls	r2, r3, #31
 8024324:	4605      	mov	r5, r0
 8024326:	d40b      	bmi.n	8024340 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8024328:	4620      	mov	r0, r4
 802432a:	f008 ffac 	bl	802d286 <__cxa_guard_acquire>
 802432e:	b138      	cbz	r0, 8024340 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8024330:	4620      	mov	r0, r4
 8024332:	f008 ffb4 	bl	802d29e <__cxa_guard_release>
 8024336:	4a0f      	ldr	r2, [pc, #60]	; (8024374 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8024338:	490f      	ldr	r1, [pc, #60]	; (8024378 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802433a:	4810      	ldr	r0, [pc, #64]	; (802437c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802433c:	f008 ff9c 	bl	802d278 <__aeabi_atexit>
 8024340:	4c0f      	ldr	r4, [pc, #60]	; (8024380 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8024342:	7823      	ldrb	r3, [r4, #0]
 8024344:	f3bf 8f5b 	dmb	ish
 8024348:	07db      	lsls	r3, r3, #31
 802434a:	d40b      	bmi.n	8024364 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 802434c:	4620      	mov	r0, r4
 802434e:	f008 ff9a 	bl	802d286 <__cxa_guard_acquire>
 8024352:	b138      	cbz	r0, 8024364 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8024354:	4620      	mov	r0, r4
 8024356:	f008 ffa2 	bl	802d29e <__cxa_guard_release>
 802435a:	4a06      	ldr	r2, [pc, #24]	; (8024374 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 802435c:	4909      	ldr	r1, [pc, #36]	; (8024384 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 802435e:	480a      	ldr	r0, [pc, #40]	; (8024388 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8024360:	f008 ff8a 	bl	802d278 <__aeabi_atexit>
 8024364:	4b05      	ldr	r3, [pc, #20]	; (802437c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8024366:	64ab      	str	r3, [r5, #72]	; 0x48
 8024368:	4b07      	ldr	r3, [pc, #28]	; (8024388 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 802436a:	64eb      	str	r3, [r5, #76]	; 0x4c
 802436c:	bd38      	pop	{r3, r4, r5, pc}
 802436e:	bf00      	nop
 8024370:	20009870 	.word	0x20009870
 8024374:	20000000 	.word	0x20000000
 8024378:	08022197 	.word	0x08022197
 802437c:	2000008c 	.word	0x2000008c
 8024380:	20009874 	.word	0x20009874
 8024384:	08022195 	.word	0x08022195
 8024388:	20000090 	.word	0x20000090

0802438c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 802438c:	b538      	push	{r3, r4, r5, lr}
 802438e:	4c15      	ldr	r4, [pc, #84]	; (80243e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8024390:	7823      	ldrb	r3, [r4, #0]
 8024392:	f3bf 8f5b 	dmb	ish
 8024396:	07da      	lsls	r2, r3, #31
 8024398:	4605      	mov	r5, r0
 802439a:	d40b      	bmi.n	80243b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 802439c:	4620      	mov	r0, r4
 802439e:	f008 ff72 	bl	802d286 <__cxa_guard_acquire>
 80243a2:	b138      	cbz	r0, 80243b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80243a4:	4620      	mov	r0, r4
 80243a6:	f008 ff7a 	bl	802d29e <__cxa_guard_release>
 80243aa:	4a0f      	ldr	r2, [pc, #60]	; (80243e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80243ac:	490f      	ldr	r1, [pc, #60]	; (80243ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80243ae:	4810      	ldr	r0, [pc, #64]	; (80243f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80243b0:	f008 ff62 	bl	802d278 <__aeabi_atexit>
 80243b4:	4c0f      	ldr	r4, [pc, #60]	; (80243f4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 80243b6:	7823      	ldrb	r3, [r4, #0]
 80243b8:	f3bf 8f5b 	dmb	ish
 80243bc:	07db      	lsls	r3, r3, #31
 80243be:	d40b      	bmi.n	80243d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80243c0:	4620      	mov	r0, r4
 80243c2:	f008 ff60 	bl	802d286 <__cxa_guard_acquire>
 80243c6:	b138      	cbz	r0, 80243d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80243c8:	4620      	mov	r0, r4
 80243ca:	f008 ff68 	bl	802d29e <__cxa_guard_release>
 80243ce:	4a06      	ldr	r2, [pc, #24]	; (80243e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80243d0:	4909      	ldr	r1, [pc, #36]	; (80243f8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 80243d2:	480a      	ldr	r0, [pc, #40]	; (80243fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80243d4:	f008 ff50 	bl	802d278 <__aeabi_atexit>
 80243d8:	4b05      	ldr	r3, [pc, #20]	; (80243f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80243da:	642b      	str	r3, [r5, #64]	; 0x40
 80243dc:	4b07      	ldr	r3, [pc, #28]	; (80243fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80243de:	646b      	str	r3, [r5, #68]	; 0x44
 80243e0:	bd38      	pop	{r3, r4, r5, pc}
 80243e2:	bf00      	nop
 80243e4:	20009838 	.word	0x20009838
 80243e8:	20000000 	.word	0x20000000
 80243ec:	0802219b 	.word	0x0802219b
 80243f0:	20000054 	.word	0x20000054
 80243f4:	2000983c 	.word	0x2000983c
 80243f8:	08022199 	.word	0x08022199
 80243fc:	20000058 	.word	0x20000058

08024400 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8024400:	b538      	push	{r3, r4, r5, lr}
 8024402:	4c15      	ldr	r4, [pc, #84]	; (8024458 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8024404:	7823      	ldrb	r3, [r4, #0]
 8024406:	f3bf 8f5b 	dmb	ish
 802440a:	07da      	lsls	r2, r3, #31
 802440c:	4605      	mov	r5, r0
 802440e:	d40b      	bmi.n	8024428 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8024410:	4620      	mov	r0, r4
 8024412:	f008 ff38 	bl	802d286 <__cxa_guard_acquire>
 8024416:	b138      	cbz	r0, 8024428 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8024418:	4620      	mov	r0, r4
 802441a:	f008 ff40 	bl	802d29e <__cxa_guard_release>
 802441e:	4a0f      	ldr	r2, [pc, #60]	; (802445c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8024420:	490f      	ldr	r1, [pc, #60]	; (8024460 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8024422:	4810      	ldr	r0, [pc, #64]	; (8024464 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8024424:	f008 ff28 	bl	802d278 <__aeabi_atexit>
 8024428:	4c0f      	ldr	r4, [pc, #60]	; (8024468 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 802442a:	7823      	ldrb	r3, [r4, #0]
 802442c:	f3bf 8f5b 	dmb	ish
 8024430:	07db      	lsls	r3, r3, #31
 8024432:	d40b      	bmi.n	802444c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8024434:	4620      	mov	r0, r4
 8024436:	f008 ff26 	bl	802d286 <__cxa_guard_acquire>
 802443a:	b138      	cbz	r0, 802444c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 802443c:	4620      	mov	r0, r4
 802443e:	f008 ff2e 	bl	802d29e <__cxa_guard_release>
 8024442:	4a06      	ldr	r2, [pc, #24]	; (802445c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8024444:	4909      	ldr	r1, [pc, #36]	; (802446c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8024446:	480a      	ldr	r0, [pc, #40]	; (8024470 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8024448:	f008 ff16 	bl	802d278 <__aeabi_atexit>
 802444c:	4b05      	ldr	r3, [pc, #20]	; (8024464 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 802444e:	63ab      	str	r3, [r5, #56]	; 0x38
 8024450:	4b07      	ldr	r3, [pc, #28]	; (8024470 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8024452:	63eb      	str	r3, [r5, #60]	; 0x3c
 8024454:	bd38      	pop	{r3, r4, r5, pc}
 8024456:	bf00      	nop
 8024458:	20009858 	.word	0x20009858
 802445c:	20000000 	.word	0x20000000
 8024460:	0802219f 	.word	0x0802219f
 8024464:	20000074 	.word	0x20000074
 8024468:	2000985c 	.word	0x2000985c
 802446c:	0802219d 	.word	0x0802219d
 8024470:	20000078 	.word	0x20000078

08024474 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8024474:	b510      	push	{r4, lr}
 8024476:	4604      	mov	r4, r0
 8024478:	f7ff ff14 	bl	80242a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 802447c:	4620      	mov	r0, r4
 802447e:	f7ff ff85 	bl	802438c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8024482:	4620      	mov	r0, r4
 8024484:	f7ff ff48 	bl	8024318 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8024488:	4620      	mov	r0, r4
 802448a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802448e:	f7ff bfb7 	b.w	8024400 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08024494 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8024494:	b538      	push	{r3, r4, r5, lr}
 8024496:	4c15      	ldr	r4, [pc, #84]	; (80244ec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8024498:	7823      	ldrb	r3, [r4, #0]
 802449a:	f3bf 8f5b 	dmb	ish
 802449e:	07da      	lsls	r2, r3, #31
 80244a0:	4605      	mov	r5, r0
 80244a2:	d40b      	bmi.n	80244bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80244a4:	4620      	mov	r0, r4
 80244a6:	f008 feee 	bl	802d286 <__cxa_guard_acquire>
 80244aa:	b138      	cbz	r0, 80244bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80244ac:	4620      	mov	r0, r4
 80244ae:	f008 fef6 	bl	802d29e <__cxa_guard_release>
 80244b2:	4a0f      	ldr	r2, [pc, #60]	; (80244f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80244b4:	490f      	ldr	r1, [pc, #60]	; (80244f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80244b6:	4810      	ldr	r0, [pc, #64]	; (80244f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80244b8:	f008 fede 	bl	802d278 <__aeabi_atexit>
 80244bc:	4c0f      	ldr	r4, [pc, #60]	; (80244fc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80244be:	7823      	ldrb	r3, [r4, #0]
 80244c0:	f3bf 8f5b 	dmb	ish
 80244c4:	07db      	lsls	r3, r3, #31
 80244c6:	d40b      	bmi.n	80244e0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80244c8:	4620      	mov	r0, r4
 80244ca:	f008 fedc 	bl	802d286 <__cxa_guard_acquire>
 80244ce:	b138      	cbz	r0, 80244e0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80244d0:	4620      	mov	r0, r4
 80244d2:	f008 fee4 	bl	802d29e <__cxa_guard_release>
 80244d6:	4a06      	ldr	r2, [pc, #24]	; (80244f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80244d8:	4909      	ldr	r1, [pc, #36]	; (8024500 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80244da:	480a      	ldr	r0, [pc, #40]	; (8024504 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80244dc:	f008 fecc 	bl	802d278 <__aeabi_atexit>
 80244e0:	4b05      	ldr	r3, [pc, #20]	; (80244f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80244e2:	662b      	str	r3, [r5, #96]	; 0x60
 80244e4:	4b07      	ldr	r3, [pc, #28]	; (8024504 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80244e6:	666b      	str	r3, [r5, #100]	; 0x64
 80244e8:	bd38      	pop	{r3, r4, r5, pc}
 80244ea:	bf00      	nop
 80244ec:	20009840 	.word	0x20009840
 80244f0:	20000000 	.word	0x20000000
 80244f4:	0802218b 	.word	0x0802218b
 80244f8:	2000005c 	.word	0x2000005c
 80244fc:	20009844 	.word	0x20009844
 8024500:	08022189 	.word	0x08022189
 8024504:	20000060 	.word	0x20000060

08024508 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8024508:	b538      	push	{r3, r4, r5, lr}
 802450a:	4c15      	ldr	r4, [pc, #84]	; (8024560 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 802450c:	7823      	ldrb	r3, [r4, #0]
 802450e:	f3bf 8f5b 	dmb	ish
 8024512:	07da      	lsls	r2, r3, #31
 8024514:	4605      	mov	r5, r0
 8024516:	d40b      	bmi.n	8024530 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024518:	4620      	mov	r0, r4
 802451a:	f008 feb4 	bl	802d286 <__cxa_guard_acquire>
 802451e:	b138      	cbz	r0, 8024530 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024520:	4620      	mov	r0, r4
 8024522:	f008 febc 	bl	802d29e <__cxa_guard_release>
 8024526:	4a0f      	ldr	r2, [pc, #60]	; (8024564 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024528:	490f      	ldr	r1, [pc, #60]	; (8024568 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802452a:	4810      	ldr	r0, [pc, #64]	; (802456c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802452c:	f008 fea4 	bl	802d278 <__aeabi_atexit>
 8024530:	4c0f      	ldr	r4, [pc, #60]	; (8024570 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8024532:	7823      	ldrb	r3, [r4, #0]
 8024534:	f3bf 8f5b 	dmb	ish
 8024538:	07db      	lsls	r3, r3, #31
 802453a:	d40b      	bmi.n	8024554 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 802453c:	4620      	mov	r0, r4
 802453e:	f008 fea2 	bl	802d286 <__cxa_guard_acquire>
 8024542:	b138      	cbz	r0, 8024554 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024544:	4620      	mov	r0, r4
 8024546:	f008 feaa 	bl	802d29e <__cxa_guard_release>
 802454a:	4a06      	ldr	r2, [pc, #24]	; (8024564 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802454c:	4909      	ldr	r1, [pc, #36]	; (8024574 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802454e:	480a      	ldr	r0, [pc, #40]	; (8024578 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8024550:	f008 fe92 	bl	802d278 <__aeabi_atexit>
 8024554:	4b05      	ldr	r3, [pc, #20]	; (802456c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8024556:	65ab      	str	r3, [r5, #88]	; 0x58
 8024558:	4b07      	ldr	r3, [pc, #28]	; (8024578 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802455a:	65eb      	str	r3, [r5, #92]	; 0x5c
 802455c:	bd38      	pop	{r3, r4, r5, pc}
 802455e:	bf00      	nop
 8024560:	20009818 	.word	0x20009818
 8024564:	20000000 	.word	0x20000000
 8024568:	0802218f 	.word	0x0802218f
 802456c:	20000034 	.word	0x20000034
 8024570:	2000981c 	.word	0x2000981c
 8024574:	0802218d 	.word	0x0802218d
 8024578:	20000038 	.word	0x20000038

0802457c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 802457c:	b510      	push	{r4, lr}
 802457e:	4604      	mov	r4, r0
 8024580:	f7ff ff88 	bl	8024494 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8024584:	4620      	mov	r0, r4
 8024586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802458a:	f7ff bfbd 	b.w	8024508 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08024590 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8024590:	b538      	push	{r3, r4, r5, lr}
 8024592:	4c15      	ldr	r4, [pc, #84]	; (80245e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8024594:	7823      	ldrb	r3, [r4, #0]
 8024596:	f3bf 8f5b 	dmb	ish
 802459a:	07da      	lsls	r2, r3, #31
 802459c:	4605      	mov	r5, r0
 802459e:	d40b      	bmi.n	80245b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80245a0:	4620      	mov	r0, r4
 80245a2:	f008 fe70 	bl	802d286 <__cxa_guard_acquire>
 80245a6:	b138      	cbz	r0, 80245b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80245a8:	4620      	mov	r0, r4
 80245aa:	f008 fe78 	bl	802d29e <__cxa_guard_release>
 80245ae:	4a0f      	ldr	r2, [pc, #60]	; (80245ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80245b0:	490f      	ldr	r1, [pc, #60]	; (80245f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80245b2:	4810      	ldr	r0, [pc, #64]	; (80245f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80245b4:	f008 fe60 	bl	802d278 <__aeabi_atexit>
 80245b8:	4c0f      	ldr	r4, [pc, #60]	; (80245f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80245ba:	7823      	ldrb	r3, [r4, #0]
 80245bc:	f3bf 8f5b 	dmb	ish
 80245c0:	07db      	lsls	r3, r3, #31
 80245c2:	d40b      	bmi.n	80245dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80245c4:	4620      	mov	r0, r4
 80245c6:	f008 fe5e 	bl	802d286 <__cxa_guard_acquire>
 80245ca:	b138      	cbz	r0, 80245dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80245cc:	4620      	mov	r0, r4
 80245ce:	f008 fe66 	bl	802d29e <__cxa_guard_release>
 80245d2:	4a06      	ldr	r2, [pc, #24]	; (80245ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80245d4:	4909      	ldr	r1, [pc, #36]	; (80245fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80245d6:	480a      	ldr	r0, [pc, #40]	; (8024600 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80245d8:	f008 fe4e 	bl	802d278 <__aeabi_atexit>
 80245dc:	4b05      	ldr	r3, [pc, #20]	; (80245f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80245de:	672b      	str	r3, [r5, #112]	; 0x70
 80245e0:	4b07      	ldr	r3, [pc, #28]	; (8024600 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80245e2:	676b      	str	r3, [r5, #116]	; 0x74
 80245e4:	bd38      	pop	{r3, r4, r5, pc}
 80245e6:	bf00      	nop
 80245e8:	20009810 	.word	0x20009810
 80245ec:	20000000 	.word	0x20000000
 80245f0:	08022183 	.word	0x08022183
 80245f4:	2000002c 	.word	0x2000002c
 80245f8:	20009814 	.word	0x20009814
 80245fc:	08022181 	.word	0x08022181
 8024600:	20000030 	.word	0x20000030

08024604 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8024604:	b538      	push	{r3, r4, r5, lr}
 8024606:	4c15      	ldr	r4, [pc, #84]	; (802465c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8024608:	7823      	ldrb	r3, [r4, #0]
 802460a:	f3bf 8f5b 	dmb	ish
 802460e:	07da      	lsls	r2, r3, #31
 8024610:	4605      	mov	r5, r0
 8024612:	d40b      	bmi.n	802462c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024614:	4620      	mov	r0, r4
 8024616:	f008 fe36 	bl	802d286 <__cxa_guard_acquire>
 802461a:	b138      	cbz	r0, 802462c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802461c:	4620      	mov	r0, r4
 802461e:	f008 fe3e 	bl	802d29e <__cxa_guard_release>
 8024622:	4a0f      	ldr	r2, [pc, #60]	; (8024660 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024624:	490f      	ldr	r1, [pc, #60]	; (8024664 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8024626:	4810      	ldr	r0, [pc, #64]	; (8024668 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024628:	f008 fe26 	bl	802d278 <__aeabi_atexit>
 802462c:	4c0f      	ldr	r4, [pc, #60]	; (802466c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802462e:	7823      	ldrb	r3, [r4, #0]
 8024630:	f3bf 8f5b 	dmb	ish
 8024634:	07db      	lsls	r3, r3, #31
 8024636:	d40b      	bmi.n	8024650 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024638:	4620      	mov	r0, r4
 802463a:	f008 fe24 	bl	802d286 <__cxa_guard_acquire>
 802463e:	b138      	cbz	r0, 8024650 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024640:	4620      	mov	r0, r4
 8024642:	f008 fe2c 	bl	802d29e <__cxa_guard_release>
 8024646:	4a06      	ldr	r2, [pc, #24]	; (8024660 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024648:	4909      	ldr	r1, [pc, #36]	; (8024670 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802464a:	480a      	ldr	r0, [pc, #40]	; (8024674 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802464c:	f008 fe14 	bl	802d278 <__aeabi_atexit>
 8024650:	4b05      	ldr	r3, [pc, #20]	; (8024668 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024652:	66ab      	str	r3, [r5, #104]	; 0x68
 8024654:	4b07      	ldr	r3, [pc, #28]	; (8024674 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024656:	66eb      	str	r3, [r5, #108]	; 0x6c
 8024658:	bd38      	pop	{r3, r4, r5, pc}
 802465a:	bf00      	nop
 802465c:	20009808 	.word	0x20009808
 8024660:	20000000 	.word	0x20000000
 8024664:	08022187 	.word	0x08022187
 8024668:	20000024 	.word	0x20000024
 802466c:	2000980c 	.word	0x2000980c
 8024670:	08022185 	.word	0x08022185
 8024674:	20000028 	.word	0x20000028

08024678 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8024678:	b510      	push	{r4, lr}
 802467a:	4604      	mov	r4, r0
 802467c:	f7ff ff88 	bl	8024590 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8024680:	4620      	mov	r0, r4
 8024682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024686:	f7ff bfbd 	b.w	8024604 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0802468a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 802468a:	b510      	push	{r4, lr}
 802468c:	4604      	mov	r4, r0
 802468e:	f7ff fff3 	bl	8024678 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8024692:	4620      	mov	r0, r4
 8024694:	f7ff ff72 	bl	802457c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8024698:	4620      	mov	r0, r4
 802469a:	f7ff fdf9 	bl	8024290 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 802469e:	4620      	mov	r0, r4
 80246a0:	f7ff fcfa 	bl	8024098 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 80246a4:	4620      	mov	r0, r4
 80246a6:	f7ff fd75 	bl	8024194 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 80246aa:	4620      	mov	r0, r4
 80246ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80246b0:	f7ff bee0 	b.w	8024474 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

080246b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 80246b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246b8:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 80246bc:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80246c0:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80246c4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 80246c8:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 80246cc:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80246d0:	8808      	ldrh	r0, [r1, #0]
 80246d2:	fb0e 4708 	mla	r7, lr, r8, r4
 80246d6:	f1be 0f00 	cmp.w	lr, #0
 80246da:	eb02 0a07 	add.w	sl, r2, r7
 80246de:	db37      	blt.n	8024750 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 80246e0:	45f3      	cmp	fp, lr
 80246e2:	dd35      	ble.n	8024750 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 80246e4:	2c00      	cmp	r4, #0
 80246e6:	db31      	blt.n	802474c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 80246e8:	45a0      	cmp	r8, r4
 80246ea:	dd2f      	ble.n	802474c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 80246ec:	5dd2      	ldrb	r2, [r2, r7]
 80246ee:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 80246f2:	1c62      	adds	r2, r4, #1
 80246f4:	d42f      	bmi.n	8024756 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80246f6:	4590      	cmp	r8, r2
 80246f8:	dd2d      	ble.n	8024756 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80246fa:	b366      	cbz	r6, 8024756 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80246fc:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8024700:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8024704:	f11e 0e01 	adds.w	lr, lr, #1
 8024708:	d429      	bmi.n	802475e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 802470a:	45f3      	cmp	fp, lr
 802470c:	dd27      	ble.n	802475e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 802470e:	f1bc 0f00 	cmp.w	ip, #0
 8024712:	f000 80a1 	beq.w	8024858 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 8024716:	2c00      	cmp	r4, #0
 8024718:	db1f      	blt.n	802475a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 802471a:	45a0      	cmp	r8, r4
 802471c:	dd1d      	ble.n	802475a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 802471e:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8024722:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8024726:	3401      	adds	r4, #1
 8024728:	d41c      	bmi.n	8024764 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 802472a:	45a0      	cmp	r8, r4
 802472c:	dd1a      	ble.n	8024764 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 802472e:	b1de      	cbz	r6, 8024768 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8024730:	44d0      	add	r8, sl
 8024732:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024736:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802473a:	2e0f      	cmp	r6, #15
 802473c:	d915      	bls.n	802476a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 802473e:	4b49      	ldr	r3, [pc, #292]	; (8024864 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8024740:	4a49      	ldr	r2, [pc, #292]	; (8024868 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8024742:	484a      	ldr	r0, [pc, #296]	; (802486c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8024744:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8024748:	f009 fbba 	bl	802dec0 <__assert_func>
 802474c:	4681      	mov	r9, r0
 802474e:	e7d0      	b.n	80246f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8024750:	4607      	mov	r7, r0
 8024752:	4681      	mov	r9, r0
 8024754:	e7d6      	b.n	8024704 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8024756:	4607      	mov	r7, r0
 8024758:	e7d4      	b.n	8024704 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 802475a:	4686      	mov	lr, r0
 802475c:	e7e3      	b.n	8024726 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 802475e:	4603      	mov	r3, r0
 8024760:	4686      	mov	lr, r0
 8024762:	e7ea      	b.n	802473a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8024764:	4603      	mov	r3, r0
 8024766:	e7e8      	b.n	802473a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8024768:	4603      	mov	r3, r0
 802476a:	f1bc 0f0f 	cmp.w	ip, #15
 802476e:	d8e6      	bhi.n	802473e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8024770:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8024774:	fb16 f80c 	smulbb	r8, r6, ip
 8024778:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802477c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8024780:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024784:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8024788:	ea44 0909 	orr.w	r9, r4, r9
 802478c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024790:	f1cc 0410 	rsb	r4, ip, #16
 8024794:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024798:	1ba4      	subs	r4, r4, r6
 802479a:	041a      	lsls	r2, r3, #16
 802479c:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 80247a0:	ea4a 0707 	orr.w	r7, sl, r7
 80247a4:	4377      	muls	r7, r6
 80247a6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80247aa:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80247ae:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80247b2:	fb04 7409 	mla	r4, r4, r9, r7
 80247b6:	4313      	orrs	r3, r2
 80247b8:	ea4f 420e 	mov.w	r2, lr, lsl #16
 80247bc:	fb08 4303 	mla	r3, r8, r3, r4
 80247c0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80247c4:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 80247c8:	4322      	orrs	r2, r4
 80247ca:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 80247ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80247d2:	0d53      	lsrs	r3, r2, #21
 80247d4:	0952      	lsrs	r2, r2, #5
 80247d6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80247da:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80247de:	431a      	orrs	r2, r3
 80247e0:	b293      	uxth	r3, r2
 80247e2:	b2af      	uxth	r7, r5
 80247e4:	1202      	asrs	r2, r0, #8
 80247e6:	43ed      	mvns	r5, r5
 80247e8:	b2ed      	uxtb	r5, r5
 80247ea:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80247ee:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80247f2:	fb12 f205 	smulbb	r2, r2, r5
 80247f6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80247fa:	fb0c 2c07 	mla	ip, ip, r7, r2
 80247fe:	00dc      	lsls	r4, r3, #3
 8024800:	10da      	asrs	r2, r3, #3
 8024802:	10c6      	asrs	r6, r0, #3
 8024804:	00c3      	lsls	r3, r0, #3
 8024806:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802480a:	b2db      	uxtb	r3, r3
 802480c:	fb16 f605 	smulbb	r6, r6, r5
 8024810:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024814:	b2e4      	uxtb	r4, r4
 8024816:	fb13 f305 	smulbb	r3, r3, r5
 802481a:	fa1f fc8c 	uxth.w	ip, ip
 802481e:	fb02 6207 	mla	r2, r2, r7, r6
 8024822:	fb04 3307 	mla	r3, r4, r7, r3
 8024826:	b296      	uxth	r6, r2
 8024828:	b29a      	uxth	r2, r3
 802482a:	f10c 0301 	add.w	r3, ip, #1
 802482e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024832:	1c53      	adds	r3, r2, #1
 8024834:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024838:	1c72      	adds	r2, r6, #1
 802483a:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 802483e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8024842:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024846:	0952      	lsrs	r2, r2, #5
 8024848:	ea43 030c 	orr.w	r3, r3, ip
 802484c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024850:	4313      	orrs	r3, r2
 8024852:	800b      	strh	r3, [r1, #0]
 8024854:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024858:	2e0f      	cmp	r6, #15
 802485a:	f63f af70 	bhi.w	802473e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 802485e:	4603      	mov	r3, r0
 8024860:	4686      	mov	lr, r0
 8024862:	e785      	b.n	8024770 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8024864:	08032be1 	.word	0x08032be1
 8024868:	08033257 	.word	0x08033257
 802486c:	08032c65 	.word	0x08032c65

08024870 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024874:	ed2d 8b08 	vpush	{d8-d11}
 8024878:	b099      	sub	sp, #100	; 0x64
 802487a:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 802487e:	9215      	str	r2, [sp, #84]	; 0x54
 8024880:	9309      	str	r3, [sp, #36]	; 0x24
 8024882:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8024884:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8024888:	930d      	str	r3, [sp, #52]	; 0x34
 802488a:	910c      	str	r1, [sp, #48]	; 0x30
 802488c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8024890:	9016      	str	r0, [sp, #88]	; 0x58
 8024892:	6850      	ldr	r0, [r2, #4]
 8024894:	6812      	ldr	r2, [r2, #0]
 8024896:	fb00 1303 	mla	r3, r0, r3, r1
 802489a:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 802489e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80248a0:	681b      	ldr	r3, [r3, #0]
 80248a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80248a4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80248a6:	685e      	ldr	r6, [r3, #4]
 80248a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80248aa:	43db      	mvns	r3, r3
 80248ac:	b2db      	uxtb	r3, r3
 80248ae:	eeb0 aa40 	vmov.f32	s20, s0
 80248b2:	eef0 9a60 	vmov.f32	s19, s1
 80248b6:	eeb0 9a41 	vmov.f32	s18, s2
 80248ba:	eeb0 8a62 	vmov.f32	s16, s5
 80248be:	eef0 8a43 	vmov.f32	s17, s6
 80248c2:	eef0 ba44 	vmov.f32	s23, s8
 80248c6:	eeb0 ba64 	vmov.f32	s22, s9
 80248ca:	eef0 aa45 	vmov.f32	s21, s10
 80248ce:	3604      	adds	r6, #4
 80248d0:	930a      	str	r3, [sp, #40]	; 0x28
 80248d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80248d4:	2b00      	cmp	r3, #0
 80248d6:	dc03      	bgt.n	80248e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80248d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80248da:	2b00      	cmp	r3, #0
 80248dc:	f340 8225 	ble.w	8024d2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 80248e0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80248e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80248e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80248ea:	1e48      	subs	r0, r1, #1
 80248ec:	1e57      	subs	r7, r2, #1
 80248ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248f0:	2b00      	cmp	r3, #0
 80248f2:	f340 80e3 	ble.w	8024abc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 80248f6:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 80248fa:	ea4f 4325 	mov.w	r3, r5, asr #16
 80248fe:	d406      	bmi.n	802490e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024900:	4584      	cmp	ip, r0
 8024902:	da04      	bge.n	802490e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024904:	2b00      	cmp	r3, #0
 8024906:	db02      	blt.n	802490e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024908:	42bb      	cmp	r3, r7
 802490a:	f2c0 80d8 	blt.w	8024abe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802490e:	f11c 0c01 	adds.w	ip, ip, #1
 8024912:	f100 80c9 	bmi.w	8024aa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024916:	4561      	cmp	r1, ip
 8024918:	f2c0 80c6 	blt.w	8024aa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802491c:	3301      	adds	r3, #1
 802491e:	f100 80c3 	bmi.w	8024aa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024922:	429a      	cmp	r2, r3
 8024924:	f2c0 80c0 	blt.w	8024aa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024928:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802492c:	4647      	mov	r7, r8
 802492e:	f1bb 0f00 	cmp.w	fp, #0
 8024932:	f340 80e3 	ble.w	8024afc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8024936:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8024938:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802493a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802493e:	689b      	ldr	r3, [r3, #8]
 8024940:	ea5f 422a 	movs.w	r2, sl, asr #16
 8024944:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024948:	f3ca 3003 	ubfx	r0, sl, #12, #4
 802494c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024950:	f100 8121 	bmi.w	8024b96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8024954:	f103 39ff 	add.w	r9, r3, #4294967295
 8024958:	454a      	cmp	r2, r9
 802495a:	f280 811c 	bge.w	8024b96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802495e:	f1bc 0f00 	cmp.w	ip, #0
 8024962:	f2c0 8118 	blt.w	8024b96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8024966:	f10e 39ff 	add.w	r9, lr, #4294967295
 802496a:	45cc      	cmp	ip, r9
 802496c:	f280 8113 	bge.w	8024b96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8024970:	b21b      	sxth	r3, r3
 8024972:	fb0c 2203 	mla	r2, ip, r3, r2
 8024976:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024978:	eb04 0902 	add.w	r9, r4, r2
 802497c:	5ca2      	ldrb	r2, [r4, r2]
 802497e:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8024982:	2800      	cmp	r0, #0
 8024984:	f000 80fe 	beq.w	8024b84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8024988:	f899 2001 	ldrb.w	r2, [r9, #1]
 802498c:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8024990:	9211      	str	r2, [sp, #68]	; 0x44
 8024992:	b151      	cbz	r1, 80249aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024994:	eb09 0203 	add.w	r2, r9, r3
 8024998:	f819 3003 	ldrb.w	r3, [r9, r3]
 802499c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80249a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80249a2:	7853      	ldrb	r3, [r2, #1]
 80249a4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80249a8:	9312      	str	r3, [sp, #72]	; 0x48
 80249aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80249ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80249ae:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80249b2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80249b6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80249ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80249be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80249c0:	041b      	lsls	r3, r3, #16
 80249c2:	fb10 f201 	smulbb	r2, r0, r1
 80249c6:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80249ca:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80249ce:	10d2      	asrs	r2, r2, #3
 80249d0:	4323      	orrs	r3, r4
 80249d2:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 80249d6:	4353      	muls	r3, r2
 80249d8:	fb09 330c 	mla	r3, r9, ip, r3
 80249dc:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80249e0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80249e4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80249e8:	ea4c 0e0e 	orr.w	lr, ip, lr
 80249ec:	f1c1 0c10 	rsb	ip, r1, #16
 80249f0:	ebac 0c00 	sub.w	ip, ip, r0
 80249f4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80249f8:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80249fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80249fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024a00:	0418      	lsls	r0, r3, #16
 8024a02:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024a06:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024a0a:	4318      	orrs	r0, r3
 8024a0c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8024a10:	fb02 c200 	mla	r2, r2, r0, ip
 8024a14:	0d53      	lsrs	r3, r2, #21
 8024a16:	0952      	lsrs	r2, r2, #5
 8024a18:	8838      	ldrh	r0, [r7, #0]
 8024a1a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024a1e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024a22:	431a      	orrs	r2, r3
 8024a24:	b292      	uxth	r2, r2
 8024a26:	1201      	asrs	r1, r0, #8
 8024a28:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8024a2c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8024a30:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024a34:	fb11 f104 	smulbb	r1, r1, r4
 8024a38:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8024a3c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024a40:	00c0      	lsls	r0, r0, #3
 8024a42:	fb0c 1c03 	mla	ip, ip, r3, r1
 8024a46:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8024a4a:	10d1      	asrs	r1, r2, #3
 8024a4c:	b2c0      	uxtb	r0, r0
 8024a4e:	00d2      	lsls	r2, r2, #3
 8024a50:	b2d2      	uxtb	r2, r2
 8024a52:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024a56:	fb1e fe04 	smulbb	lr, lr, r4
 8024a5a:	fb10 f004 	smulbb	r0, r0, r4
 8024a5e:	fa1f fc8c 	uxth.w	ip, ip
 8024a62:	fb01 e103 	mla	r1, r1, r3, lr
 8024a66:	fb02 0303 	mla	r3, r2, r3, r0
 8024a6a:	b29a      	uxth	r2, r3
 8024a6c:	f10c 0301 	add.w	r3, ip, #1
 8024a70:	b289      	uxth	r1, r1
 8024a72:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024a76:	1c53      	adds	r3, r2, #1
 8024a78:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024a7c:	1c4a      	adds	r2, r1, #1
 8024a7e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024a82:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8024a86:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024a8a:	0949      	lsrs	r1, r1, #5
 8024a8c:	ea43 030c 	orr.w	r3, r3, ip
 8024a90:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024a94:	430b      	orrs	r3, r1
 8024a96:	803b      	strh	r3, [r7, #0]
 8024a98:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024a9a:	449a      	add	sl, r3
 8024a9c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024a9e:	3702      	adds	r7, #2
 8024aa0:	441d      	add	r5, r3
 8024aa2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024aa6:	e742      	b.n	802492e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024aa8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024aaa:	449a      	add	sl, r3
 8024aac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024aae:	441d      	add	r5, r3
 8024ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ab2:	3b01      	subs	r3, #1
 8024ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8024ab6:	f108 0802 	add.w	r8, r8, #2
 8024aba:	e718      	b.n	80248ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8024abc:	d023      	beq.n	8024b06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8024abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ac0:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8024ac2:	3b01      	subs	r3, #1
 8024ac4:	fb00 a003 	mla	r0, r0, r3, sl
 8024ac8:	1400      	asrs	r0, r0, #16
 8024aca:	f53f af2d 	bmi.w	8024928 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024ace:	3901      	subs	r1, #1
 8024ad0:	4288      	cmp	r0, r1
 8024ad2:	f6bf af29 	bge.w	8024928 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024ad6:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8024ad8:	fb01 5303 	mla	r3, r1, r3, r5
 8024adc:	141b      	asrs	r3, r3, #16
 8024ade:	f53f af23 	bmi.w	8024928 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024ae2:	3a01      	subs	r2, #1
 8024ae4:	4293      	cmp	r3, r2
 8024ae6:	f6bf af1f 	bge.w	8024928 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024aea:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8024aee:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8024af2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8024af6:	f1be 0f00 	cmp.w	lr, #0
 8024afa:	dc6c      	bgt.n	8024bd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8024afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024afe:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024b02:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8024b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024b08:	2b00      	cmp	r3, #0
 8024b0a:	f340 810e 	ble.w	8024d2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8024b0e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024b12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024b16:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024b1a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024b1c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024b20:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024b24:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024b28:	eef0 6a48 	vmov.f32	s13, s16
 8024b2c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024b30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b34:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024b38:	ee16 aa90 	vmov	sl, s13
 8024b3c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024b40:	eef0 6a68 	vmov.f32	s13, s17
 8024b44:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024b48:	ee18 2a10 	vmov	r2, s16
 8024b4c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024b50:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b54:	ee18 2a90 	vmov	r2, s17
 8024b58:	932d      	str	r3, [sp, #180]	; 0xb4
 8024b5a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024b5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b60:	932e      	str	r3, [sp, #184]	; 0xb8
 8024b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024b64:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8024b66:	3b01      	subs	r3, #1
 8024b68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b6c:	930c      	str	r3, [sp, #48]	; 0x30
 8024b6e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024b70:	bf08      	it	eq
 8024b72:	4613      	moveq	r3, r2
 8024b74:	ee16 5a90 	vmov	r5, s13
 8024b78:	9309      	str	r3, [sp, #36]	; 0x24
 8024b7a:	eef0 8a67 	vmov.f32	s17, s15
 8024b7e:	eeb0 8a47 	vmov.f32	s16, s14
 8024b82:	e6a6      	b.n	80248d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8024b84:	2900      	cmp	r1, #0
 8024b86:	f43f af10 	beq.w	80249aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024b8a:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024b8e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024b92:	930f      	str	r3, [sp, #60]	; 0x3c
 8024b94:	e709      	b.n	80249aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024b96:	f112 0901 	adds.w	r9, r2, #1
 8024b9a:	f53f af7d 	bmi.w	8024a98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024b9e:	454b      	cmp	r3, r9
 8024ba0:	f6ff af7a 	blt.w	8024a98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024ba4:	f11c 0901 	adds.w	r9, ip, #1
 8024ba8:	f53f af76 	bmi.w	8024a98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024bac:	45ce      	cmp	lr, r9
 8024bae:	f6ff af73 	blt.w	8024a98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024bb2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024bb4:	9202      	str	r2, [sp, #8]
 8024bb6:	b21b      	sxth	r3, r3
 8024bb8:	fa0f f28e 	sxth.w	r2, lr
 8024bbc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024bc0:	e9cd c003 	strd	ip, r0, [sp, #12]
 8024bc4:	9201      	str	r2, [sp, #4]
 8024bc6:	9300      	str	r3, [sp, #0]
 8024bc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024bca:	9816      	ldr	r0, [sp, #88]	; 0x58
 8024bcc:	4633      	mov	r3, r6
 8024bce:	4639      	mov	r1, r7
 8024bd0:	f7ff fd70 	bl	80246b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8024bd4:	e760      	b.n	8024a98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024bd6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024bd8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024bda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024bde:	ea4f 422a 	mov.w	r2, sl, asr #16
 8024be2:	1429      	asrs	r1, r5, #16
 8024be4:	fb03 2101 	mla	r1, r3, r1, r2
 8024be8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024bea:	440a      	add	r2, r1
 8024bec:	5c61      	ldrb	r1, [r4, r1]
 8024bee:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8024bf2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024bf6:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8024bfa:	f1bc 0f00 	cmp.w	ip, #0
 8024bfe:	f000 808c 	beq.w	8024d1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 8024c02:	7857      	ldrb	r7, [r2, #1]
 8024c04:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8024c08:	9413      	str	r4, [sp, #76]	; 0x4c
 8024c0a:	b140      	cbz	r0, 8024c1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024c0c:	18d7      	adds	r7, r2, r3
 8024c0e:	5cd3      	ldrb	r3, [r2, r3]
 8024c10:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024c14:	9310      	str	r3, [sp, #64]	; 0x40
 8024c16:	787b      	ldrb	r3, [r7, #1]
 8024c18:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024c1c:	9314      	str	r3, [sp, #80]	; 0x50
 8024c1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024c20:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024c22:	fb1c f200 	smulbb	r2, ip, r0
 8024c26:	041f      	lsls	r7, r3, #16
 8024c28:	10d2      	asrs	r2, r2, #3
 8024c2a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024c2e:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8024c32:	431f      	orrs	r7, r3
 8024c34:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8024c38:	9317      	str	r3, [sp, #92]	; 0x5c
 8024c3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024c3c:	041b      	lsls	r3, r3, #16
 8024c3e:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8024c42:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024c46:	ea43 030b 	orr.w	r3, r3, fp
 8024c4a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024c4c:	4353      	muls	r3, r2
 8024c4e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024c52:	fb04 3707 	mla	r7, r4, r7, r3
 8024c56:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024c5a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8024c5e:	ea43 0b01 	orr.w	fp, r3, r1
 8024c62:	f1c0 0110 	rsb	r1, r0, #16
 8024c66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024c68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024c6a:	eba1 0c0c 	sub.w	ip, r1, ip
 8024c6e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024c72:	fb0c 770b 	mla	r7, ip, fp, r7
 8024c76:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024c7a:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8024c7e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024c82:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8024c86:	ea4c 0c0b 	orr.w	ip, ip, fp
 8024c8a:	fb02 770c 	mla	r7, r2, ip, r7
 8024c8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024c90:	0d79      	lsrs	r1, r7, #21
 8024c92:	097f      	lsrs	r7, r7, #5
 8024c94:	8812      	ldrh	r2, [r2, #0]
 8024c96:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024c9a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024c9e:	430f      	orrs	r7, r1
 8024ca0:	b2bb      	uxth	r3, r7
 8024ca2:	1211      	asrs	r1, r2, #8
 8024ca4:	1218      	asrs	r0, r3, #8
 8024ca6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024caa:	fb11 f104 	smulbb	r1, r1, r4
 8024cae:	10d7      	asrs	r7, r2, #3
 8024cb0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024cb4:	00d2      	lsls	r2, r2, #3
 8024cb6:	fb00 1009 	mla	r0, r0, r9, r1
 8024cba:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024cbe:	10d9      	asrs	r1, r3, #3
 8024cc0:	b2d2      	uxtb	r2, r2
 8024cc2:	00db      	lsls	r3, r3, #3
 8024cc4:	fb17 f704 	smulbb	r7, r7, r4
 8024cc8:	fb12 f204 	smulbb	r2, r2, r4
 8024ccc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024cd0:	b2db      	uxtb	r3, r3
 8024cd2:	b280      	uxth	r0, r0
 8024cd4:	fb01 7109 	mla	r1, r1, r9, r7
 8024cd8:	fb03 2309 	mla	r3, r3, r9, r2
 8024cdc:	b29b      	uxth	r3, r3
 8024cde:	b289      	uxth	r1, r1
 8024ce0:	1c42      	adds	r2, r0, #1
 8024ce2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024ce6:	1c4f      	adds	r7, r1, #1
 8024ce8:	1c5a      	adds	r2, r3, #1
 8024cea:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024cee:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8024cf2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024cf6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024cfa:	0949      	lsrs	r1, r1, #5
 8024cfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024cfe:	4310      	orrs	r0, r2
 8024d00:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024d04:	4308      	orrs	r0, r1
 8024d06:	f823 0b02 	strh.w	r0, [r3], #2
 8024d0a:	930e      	str	r3, [sp, #56]	; 0x38
 8024d0c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024d0e:	449a      	add	sl, r3
 8024d10:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024d12:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024d16:	441d      	add	r5, r3
 8024d18:	e6ed      	b.n	8024af6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8024d1a:	2800      	cmp	r0, #0
 8024d1c:	f43f af7f 	beq.w	8024c1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024d20:	5cd3      	ldrb	r3, [r2, r3]
 8024d22:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024d26:	9310      	str	r3, [sp, #64]	; 0x40
 8024d28:	e779      	b.n	8024c1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024d2a:	b019      	add	sp, #100	; 0x64
 8024d2c:	ecbd 8b08 	vpop	{d8-d11}
 8024d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024d34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8024d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024d38:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8024d3c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8024d40:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024d44:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8024d48:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8024d4c:	8808      	ldrh	r0, [r1, #0]
 8024d4e:	fb06 570e 	mla	r7, r6, lr, r5
 8024d52:	2e00      	cmp	r6, #0
 8024d54:	eb02 0807 	add.w	r8, r2, r7
 8024d58:	db38      	blt.n	8024dcc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8024d5a:	45b1      	cmp	r9, r6
 8024d5c:	dd36      	ble.n	8024dcc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8024d5e:	2d00      	cmp	r5, #0
 8024d60:	db32      	blt.n	8024dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8024d62:	45ae      	cmp	lr, r5
 8024d64:	dd30      	ble.n	8024dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8024d66:	5dd2      	ldrb	r2, [r2, r7]
 8024d68:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8024d6c:	1c6a      	adds	r2, r5, #1
 8024d6e:	d430      	bmi.n	8024dd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8024d70:	4596      	cmp	lr, r2
 8024d72:	dd2e      	ble.n	8024dd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8024d74:	b36c      	cbz	r4, 8024dd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8024d76:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024d7a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8024d7e:	3601      	adds	r6, #1
 8024d80:	d42b      	bmi.n	8024dda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8024d82:	45b1      	cmp	r9, r6
 8024d84:	dd29      	ble.n	8024dda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8024d86:	f1bc 0f00 	cmp.w	ip, #0
 8024d8a:	d028      	beq.n	8024dde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8024d8c:	2d00      	cmp	r5, #0
 8024d8e:	db22      	blt.n	8024dd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8024d90:	45ae      	cmp	lr, r5
 8024d92:	dd20      	ble.n	8024dd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8024d94:	f818 600e 	ldrb.w	r6, [r8, lr]
 8024d98:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8024d9c:	3501      	adds	r5, #1
 8024d9e:	d407      	bmi.n	8024db0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8024da0:	45ae      	cmp	lr, r5
 8024da2:	dd05      	ble.n	8024db0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8024da4:	b134      	cbz	r4, 8024db4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8024da6:	44c6      	add	lr, r8
 8024da8:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024dac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8024db0:	2c0f      	cmp	r4, #15
 8024db2:	d802      	bhi.n	8024dba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8024db4:	f1bc 0f0f 	cmp.w	ip, #15
 8024db8:	d914      	bls.n	8024de4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 8024dba:	4b26      	ldr	r3, [pc, #152]	; (8024e54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8024dbc:	4a26      	ldr	r2, [pc, #152]	; (8024e58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 8024dbe:	4827      	ldr	r0, [pc, #156]	; (8024e5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8024dc0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8024dc4:	f009 f87c 	bl	802dec0 <__assert_func>
 8024dc8:	4607      	mov	r7, r0
 8024dca:	e7cf      	b.n	8024d6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8024dcc:	4602      	mov	r2, r0
 8024dce:	4607      	mov	r7, r0
 8024dd0:	e7d5      	b.n	8024d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8024dd2:	4602      	mov	r2, r0
 8024dd4:	e7d3      	b.n	8024d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8024dd6:	4606      	mov	r6, r0
 8024dd8:	e7e0      	b.n	8024d9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 8024dda:	4606      	mov	r6, r0
 8024ddc:	e7e8      	b.n	8024db0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8024dde:	2c0f      	cmp	r4, #15
 8024de0:	d8eb      	bhi.n	8024dba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8024de2:	4606      	mov	r6, r0
 8024de4:	043d      	lsls	r5, r7, #16
 8024de6:	fb14 f30c 	smulbb	r3, r4, ip
 8024dea:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8024dee:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8024df2:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024df6:	10db      	asrs	r3, r3, #3
 8024df8:	432f      	orrs	r7, r5
 8024dfa:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024dfe:	f1cc 0510 	rsb	r5, ip, #16
 8024e02:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024e06:	1b2d      	subs	r5, r5, r4
 8024e08:	ea4e 0202 	orr.w	r2, lr, r2
 8024e0c:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8024e10:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8024e14:	4354      	muls	r4, r2
 8024e16:	fb05 4507 	mla	r5, r5, r7, r4
 8024e1a:	0404      	lsls	r4, r0, #16
 8024e1c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024e20:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024e24:	4320      	orrs	r0, r4
 8024e26:	fb03 5400 	mla	r4, r3, r0, r5
 8024e2a:	0430      	lsls	r0, r6, #16
 8024e2c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024e30:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8024e34:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8024e38:	4330      	orrs	r0, r6
 8024e3a:	fb03 4000 	mla	r0, r3, r0, r4
 8024e3e:	0d43      	lsrs	r3, r0, #21
 8024e40:	0940      	lsrs	r0, r0, #5
 8024e42:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024e46:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024e4a:	4318      	orrs	r0, r3
 8024e4c:	8008      	strh	r0, [r1, #0]
 8024e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024e52:	bf00      	nop
 8024e54:	08032be1 	.word	0x08032be1
 8024e58:	08033257 	.word	0x08033257
 8024e5c:	08032c65 	.word	0x08032c65

08024e60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e64:	ed2d 8b0a 	vpush	{d8-d12}
 8024e68:	b093      	sub	sp, #76	; 0x4c
 8024e6a:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8024e6e:	920f      	str	r2, [sp, #60]	; 0x3c
 8024e70:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024e72:	9108      	str	r1, [sp, #32]
 8024e74:	9306      	str	r3, [sp, #24]
 8024e76:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8024e7a:	9010      	str	r0, [sp, #64]	; 0x40
 8024e7c:	6850      	ldr	r0, [r2, #4]
 8024e7e:	6812      	ldr	r2, [r2, #0]
 8024e80:	fb00 1303 	mla	r3, r0, r3, r1
 8024e84:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024e88:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024e8a:	681b      	ldr	r3, [r3, #0]
 8024e8c:	9307      	str	r3, [sp, #28]
 8024e8e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024e90:	685f      	ldr	r7, [r3, #4]
 8024e92:	eeb0 aa40 	vmov.f32	s20, s0
 8024e96:	eef0 9a60 	vmov.f32	s19, s1
 8024e9a:	eeb0 9a41 	vmov.f32	s18, s2
 8024e9e:	eeb0 8a62 	vmov.f32	s16, s5
 8024ea2:	eef0 8a43 	vmov.f32	s17, s6
 8024ea6:	eeb0 ca44 	vmov.f32	s24, s8
 8024eaa:	eef0 ba64 	vmov.f32	s23, s9
 8024eae:	eeb0 ba45 	vmov.f32	s22, s10
 8024eb2:	3704      	adds	r7, #4
 8024eb4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8024eb8:	9b08      	ldr	r3, [sp, #32]
 8024eba:	2b00      	cmp	r3, #0
 8024ebc:	dc03      	bgt.n	8024ec6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8024ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024ec0:	2b00      	cmp	r3, #0
 8024ec2:	f340 81b2 	ble.w	802522a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8024ec6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024ec8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024ecc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024ed0:	1e48      	subs	r0, r1, #1
 8024ed2:	f102 3cff 	add.w	ip, r2, #4294967295
 8024ed6:	9b06      	ldr	r3, [sp, #24]
 8024ed8:	2b00      	cmp	r3, #0
 8024eda:	f340 80a9 	ble.w	8025030 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024ede:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024ee2:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024ee6:	d406      	bmi.n	8024ef6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024ee8:	4586      	cmp	lr, r0
 8024eea:	da04      	bge.n	8024ef6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024eec:	2b00      	cmp	r3, #0
 8024eee:	db02      	blt.n	8024ef6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024ef0:	4563      	cmp	r3, ip
 8024ef2:	f2c0 809e 	blt.w	8025032 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024ef6:	f11e 0e01 	adds.w	lr, lr, #1
 8024efa:	f100 808f 	bmi.w	802501c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024efe:	4571      	cmp	r1, lr
 8024f00:	f2c0 808c 	blt.w	802501c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024f04:	3301      	adds	r3, #1
 8024f06:	f100 8089 	bmi.w	802501c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024f0a:	429a      	cmp	r2, r3
 8024f0c:	f2c0 8086 	blt.w	802501c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024f10:	f8dd b018 	ldr.w	fp, [sp, #24]
 8024f14:	46c8      	mov	r8, r9
 8024f16:	f1bb 0f00 	cmp.w	fp, #0
 8024f1a:	f340 80a6 	ble.w	802506a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8024f1e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8024f20:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024f22:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024f26:	689b      	ldr	r3, [r3, #8]
 8024f28:	1422      	asrs	r2, r4, #16
 8024f2a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024f2e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024f32:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024f36:	f100 80e3 	bmi.w	8025100 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024f3a:	f103 3aff 	add.w	sl, r3, #4294967295
 8024f3e:	4552      	cmp	r2, sl
 8024f40:	f280 80de 	bge.w	8025100 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024f44:	f1bc 0f00 	cmp.w	ip, #0
 8024f48:	f2c0 80da 	blt.w	8025100 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024f4c:	f10e 3aff 	add.w	sl, lr, #4294967295
 8024f50:	45d4      	cmp	ip, sl
 8024f52:	f280 80d5 	bge.w	8025100 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024f56:	b21b      	sxth	r3, r3
 8024f58:	fb0c 2203 	mla	r2, ip, r3, r2
 8024f5c:	9d07      	ldr	r5, [sp, #28]
 8024f5e:	eb05 0a02 	add.w	sl, r5, r2
 8024f62:	5caa      	ldrb	r2, [r5, r2]
 8024f64:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8024f68:	2800      	cmp	r0, #0
 8024f6a:	f000 80c0 	beq.w	80250ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8024f6e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8024f72:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8024f76:	920b      	str	r2, [sp, #44]	; 0x2c
 8024f78:	b151      	cbz	r1, 8024f90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8024f7a:	eb0a 0203 	add.w	r2, sl, r3
 8024f7e:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8024f82:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024f86:	9309      	str	r3, [sp, #36]	; 0x24
 8024f88:	7853      	ldrb	r3, [r2, #1]
 8024f8a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024f8e:	930c      	str	r3, [sp, #48]	; 0x30
 8024f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024f92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024f94:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024f98:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024f9c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024fa0:	ea4c 0c03 	orr.w	ip, ip, r3
 8024fa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024fa6:	041b      	lsls	r3, r3, #16
 8024fa8:	fb10 f201 	smulbb	r2, r0, r1
 8024fac:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024fb0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024fb4:	10d2      	asrs	r2, r2, #3
 8024fb6:	432b      	orrs	r3, r5
 8024fb8:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8024fbc:	4353      	muls	r3, r2
 8024fbe:	fb0a 330c 	mla	r3, sl, ip, r3
 8024fc2:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8024fc6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024fca:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024fce:	ea4c 0e0e 	orr.w	lr, ip, lr
 8024fd2:	f1c1 0c10 	rsb	ip, r1, #16
 8024fd6:	ebac 0c00 	sub.w	ip, ip, r0
 8024fda:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024fde:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8024fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fe4:	0418      	lsls	r0, r3, #16
 8024fe6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024fea:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024fee:	4318      	orrs	r0, r3
 8024ff0:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8024ff4:	fb02 c200 	mla	r2, r2, r0, ip
 8024ff8:	0d53      	lsrs	r3, r2, #21
 8024ffa:	0952      	lsrs	r2, r2, #5
 8024ffc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025000:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025004:	431a      	orrs	r2, r3
 8025006:	f8a8 2000 	strh.w	r2, [r8]
 802500a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802500c:	441c      	add	r4, r3
 802500e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025010:	f108 0802 	add.w	r8, r8, #2
 8025014:	441e      	add	r6, r3
 8025016:	f10b 3bff 	add.w	fp, fp, #4294967295
 802501a:	e77c      	b.n	8024f16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802501c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802501e:	441c      	add	r4, r3
 8025020:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025022:	441e      	add	r6, r3
 8025024:	9b06      	ldr	r3, [sp, #24]
 8025026:	3b01      	subs	r3, #1
 8025028:	9306      	str	r3, [sp, #24]
 802502a:	f109 0902 	add.w	r9, r9, #2
 802502e:	e752      	b.n	8024ed6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025030:	d020      	beq.n	8025074 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8025032:	9b06      	ldr	r3, [sp, #24]
 8025034:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8025036:	3b01      	subs	r3, #1
 8025038:	fb00 4003 	mla	r0, r0, r3, r4
 802503c:	1400      	asrs	r0, r0, #16
 802503e:	f53f af67 	bmi.w	8024f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8025042:	3901      	subs	r1, #1
 8025044:	4288      	cmp	r0, r1
 8025046:	f6bf af63 	bge.w	8024f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802504a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802504c:	fb01 6303 	mla	r3, r1, r3, r6
 8025050:	141b      	asrs	r3, r3, #16
 8025052:	f53f af5d 	bmi.w	8024f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8025056:	3a01      	subs	r2, #1
 8025058:	4293      	cmp	r3, r2
 802505a:	f6bf af59 	bge.w	8024f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802505e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8025062:	46ca      	mov	sl, r9
 8025064:	f1b8 0f00 	cmp.w	r8, #0
 8025068:	dc67      	bgt.n	802513a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802506a:	9b06      	ldr	r3, [sp, #24]
 802506c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8025070:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8025074:	9b08      	ldr	r3, [sp, #32]
 8025076:	2b00      	cmp	r3, #0
 8025078:	f340 80d7 	ble.w	802522a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802507c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8025080:	ee79 9aab 	vadd.f32	s19, s19, s23
 8025084:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8025088:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802508a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802508e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025092:	eef0 6a48 	vmov.f32	s13, s16
 8025096:	ee69 7a27 	vmul.f32	s15, s18, s15
 802509a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802509e:	ee37 8a48 	vsub.f32	s16, s14, s16
 80250a2:	ee16 4a90 	vmov	r4, s13
 80250a6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80250aa:	eef0 6a68 	vmov.f32	s13, s17
 80250ae:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80250b2:	ee18 2a10 	vmov	r2, s16
 80250b6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80250ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80250be:	ee18 2a90 	vmov	r2, s17
 80250c2:	9329      	str	r3, [sp, #164]	; 0xa4
 80250c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80250c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80250ca:	932a      	str	r3, [sp, #168]	; 0xa8
 80250cc:	9b08      	ldr	r3, [sp, #32]
 80250ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80250d0:	3b01      	subs	r3, #1
 80250d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80250d6:	9308      	str	r3, [sp, #32]
 80250d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80250da:	bf08      	it	eq
 80250dc:	4613      	moveq	r3, r2
 80250de:	ee16 6a90 	vmov	r6, s13
 80250e2:	9306      	str	r3, [sp, #24]
 80250e4:	eef0 8a67 	vmov.f32	s17, s15
 80250e8:	eeb0 8a47 	vmov.f32	s16, s14
 80250ec:	e6e4      	b.n	8024eb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80250ee:	2900      	cmp	r1, #0
 80250f0:	f43f af4e 	beq.w	8024f90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80250f4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80250f8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80250fc:	9309      	str	r3, [sp, #36]	; 0x24
 80250fe:	e747      	b.n	8024f90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8025100:	f112 0a01 	adds.w	sl, r2, #1
 8025104:	d481      	bmi.n	802500a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025106:	4553      	cmp	r3, sl
 8025108:	f6ff af7f 	blt.w	802500a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802510c:	f11c 0a01 	adds.w	sl, ip, #1
 8025110:	f53f af7b 	bmi.w	802500a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025114:	45d6      	cmp	lr, sl
 8025116:	f6ff af78 	blt.w	802500a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802511a:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 802511e:	b21b      	sxth	r3, r3
 8025120:	fa0f f28e 	sxth.w	r2, lr
 8025124:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8025128:	9201      	str	r2, [sp, #4]
 802512a:	9300      	str	r3, [sp, #0]
 802512c:	9a07      	ldr	r2, [sp, #28]
 802512e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025130:	463b      	mov	r3, r7
 8025132:	4641      	mov	r1, r8
 8025134:	f7ff fdfe 	bl	8024d34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8025138:	e767      	b.n	802500a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802513a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802513c:	9d07      	ldr	r5, [sp, #28]
 802513e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8025142:	1422      	asrs	r2, r4, #16
 8025144:	1431      	asrs	r1, r6, #16
 8025146:	fb03 2101 	mla	r1, r3, r1, r2
 802514a:	9a07      	ldr	r2, [sp, #28]
 802514c:	440a      	add	r2, r1
 802514e:	5c69      	ldrb	r1, [r5, r1]
 8025150:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8025154:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025158:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 802515c:	f1be 0f00 	cmp.w	lr, #0
 8025160:	d05c      	beq.n	802521c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8025162:	f892 c001 	ldrb.w	ip, [r2, #1]
 8025166:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 802516a:	950d      	str	r5, [sp, #52]	; 0x34
 802516c:	b150      	cbz	r0, 8025184 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 802516e:	eb02 0c03 	add.w	ip, r2, r3
 8025172:	5cd3      	ldrb	r3, [r2, r3]
 8025174:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025178:	930a      	str	r3, [sp, #40]	; 0x28
 802517a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802517e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025182:	930e      	str	r3, [sp, #56]	; 0x38
 8025184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025186:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025188:	fb1e f200 	smulbb	r2, lr, r0
 802518c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8025190:	10d2      	asrs	r2, r2, #3
 8025192:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025196:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802519a:	ea4c 0c03 	orr.w	ip, ip, r3
 802519e:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80251a2:	9311      	str	r3, [sp, #68]	; 0x44
 80251a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80251a6:	041b      	lsls	r3, r3, #16
 80251a8:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 80251ac:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80251b0:	ea43 030b 	orr.w	r3, r3, fp
 80251b4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80251b6:	4353      	muls	r3, r2
 80251b8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80251bc:	fb05 3c0c 	mla	ip, r5, ip, r3
 80251c0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80251c4:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80251c8:	ea43 0b01 	orr.w	fp, r3, r1
 80251cc:	f1c0 0110 	rsb	r1, r0, #16
 80251d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80251d2:	eba1 0e0e 	sub.w	lr, r1, lr
 80251d6:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80251da:	fb0e cc0b 	mla	ip, lr, fp, ip
 80251de:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80251e2:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 80251e6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80251ea:	ea4b 0e0e 	orr.w	lr, fp, lr
 80251ee:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80251f2:	fb02 cc0e 	mla	ip, r2, lr, ip
 80251f6:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80251fa:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80251fe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025202:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025206:	ea43 0c0c 	orr.w	ip, r3, ip
 802520a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802520c:	f82a cb02 	strh.w	ip, [sl], #2
 8025210:	441c      	add	r4, r3
 8025212:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025214:	f108 38ff 	add.w	r8, r8, #4294967295
 8025218:	441e      	add	r6, r3
 802521a:	e723      	b.n	8025064 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802521c:	2800      	cmp	r0, #0
 802521e:	d0b1      	beq.n	8025184 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8025220:	5cd3      	ldrb	r3, [r2, r3]
 8025222:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025226:	930a      	str	r3, [sp, #40]	; 0x28
 8025228:	e7ac      	b.n	8025184 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 802522a:	b013      	add	sp, #76	; 0x4c
 802522c:	ecbd 8b0a 	vpop	{d8-d12}
 8025230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025234 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8025234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025238:	468b      	mov	fp, r1
 802523a:	8809      	ldrh	r1, [r1, #0]
 802523c:	b089      	sub	sp, #36	; 0x24
 802523e:	10cd      	asrs	r5, r1, #3
 8025240:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8025244:	ea4f 2921 	mov.w	r9, r1, asr #8
 8025248:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802524c:	00c9      	lsls	r1, r1, #3
 802524e:	9500      	str	r5, [sp, #0]
 8025250:	b2c9      	uxtb	r1, r1
 8025252:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8025256:	9101      	str	r1, [sp, #4]
 8025258:	9900      	ldr	r1, [sp, #0]
 802525a:	9202      	str	r2, [sp, #8]
 802525c:	fb04 650e 	mla	r5, r4, lr, r6
 8025260:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8025264:	eb02 0805 	add.w	r8, r2, r5
 8025268:	0209      	lsls	r1, r1, #8
 802526a:	9a01      	ldr	r2, [sp, #4]
 802526c:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8025270:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8025274:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8025278:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 802527c:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8025280:	4311      	orrs	r1, r2
 8025282:	2c00      	cmp	r4, #0
 8025284:	9107      	str	r1, [sp, #28]
 8025286:	db43      	blt.n	8025310 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8025288:	45a2      	cmp	sl, r4
 802528a:	dd41      	ble.n	8025310 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 802528c:	2e00      	cmp	r6, #0
 802528e:	db3d      	blt.n	802530c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8025290:	45b6      	cmp	lr, r6
 8025292:	dd3b      	ble.n	802530c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8025294:	9a02      	ldr	r2, [sp, #8]
 8025296:	5d55      	ldrb	r5, [r2, r5]
 8025298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802529c:	441d      	add	r5, r3
 802529e:	1c72      	adds	r2, r6, #1
 80252a0:	d439      	bmi.n	8025316 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 80252a2:	4596      	cmp	lr, r2
 80252a4:	dd37      	ble.n	8025316 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 80252a6:	2f00      	cmp	r7, #0
 80252a8:	d035      	beq.n	8025316 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 80252aa:	f898 1001 	ldrb.w	r1, [r8, #1]
 80252ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80252b2:	4419      	add	r1, r3
 80252b4:	3401      	adds	r4, #1
 80252b6:	d432      	bmi.n	802531e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 80252b8:	45a2      	cmp	sl, r4
 80252ba:	dd30      	ble.n	802531e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 80252bc:	b378      	cbz	r0, 802531e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 80252be:	2e00      	cmp	r6, #0
 80252c0:	db2b      	blt.n	802531a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 80252c2:	45b6      	cmp	lr, r6
 80252c4:	dd29      	ble.n	802531a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 80252c6:	f818 400e 	ldrb.w	r4, [r8, lr]
 80252ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80252ce:	441c      	add	r4, r3
 80252d0:	3601      	adds	r6, #1
 80252d2:	d427      	bmi.n	8025324 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 80252d4:	45b6      	cmp	lr, r6
 80252d6:	dd25      	ble.n	8025324 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 80252d8:	b327      	cbz	r7, 8025324 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 80252da:	44c6      	add	lr, r8
 80252dc:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80252e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80252e4:	4413      	add	r3, r2
 80252e6:	782a      	ldrb	r2, [r5, #0]
 80252e8:	9202      	str	r2, [sp, #8]
 80252ea:	780a      	ldrb	r2, [r1, #0]
 80252ec:	9203      	str	r2, [sp, #12]
 80252ee:	7822      	ldrb	r2, [r4, #0]
 80252f0:	9204      	str	r2, [sp, #16]
 80252f2:	2f0f      	cmp	r7, #15
 80252f4:	781a      	ldrb	r2, [r3, #0]
 80252f6:	9205      	str	r2, [sp, #20]
 80252f8:	d801      	bhi.n	80252fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 80252fa:	280f      	cmp	r0, #15
 80252fc:	d914      	bls.n	8025328 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 80252fe:	4b3f      	ldr	r3, [pc, #252]	; (80253fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 8025300:	4a3f      	ldr	r2, [pc, #252]	; (8025400 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8025302:	4840      	ldr	r0, [pc, #256]	; (8025404 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8025304:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8025308:	f008 fdda 	bl	802dec0 <__assert_func>
 802530c:	ad07      	add	r5, sp, #28
 802530e:	e7c6      	b.n	802529e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 8025310:	a907      	add	r1, sp, #28
 8025312:	460d      	mov	r5, r1
 8025314:	e7ce      	b.n	80252b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8025316:	a907      	add	r1, sp, #28
 8025318:	e7cc      	b.n	80252b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 802531a:	ac07      	add	r4, sp, #28
 802531c:	e7d8      	b.n	80252d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 802531e:	ab07      	add	r3, sp, #28
 8025320:	461c      	mov	r4, r3
 8025322:	e7e0      	b.n	80252e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8025324:	ab07      	add	r3, sp, #28
 8025326:	e7de      	b.n	80252e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8025328:	b2ba      	uxth	r2, r7
 802532a:	b280      	uxth	r0, r0
 802532c:	fb02 fa00 	mul.w	sl, r2, r0
 8025330:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8025334:	0112      	lsls	r2, r2, #4
 8025336:	b280      	uxth	r0, r0
 8025338:	f891 8002 	ldrb.w	r8, [r1, #2]
 802533c:	7849      	ldrb	r1, [r1, #1]
 802533e:	78ae      	ldrb	r6, [r5, #2]
 8025340:	786d      	ldrb	r5, [r5, #1]
 8025342:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8025346:	eba2 020a 	sub.w	r2, r2, sl
 802534a:	b292      	uxth	r2, r2
 802534c:	ebae 0e00 	sub.w	lr, lr, r0
 8025350:	fa1f fe8e 	uxth.w	lr, lr
 8025354:	4351      	muls	r1, r2
 8025356:	fb02 f808 	mul.w	r8, r2, r8
 802535a:	fb0e 8806 	mla	r8, lr, r6, r8
 802535e:	fb0e 1505 	mla	r5, lr, r5, r1
 8025362:	78a6      	ldrb	r6, [r4, #2]
 8025364:	7861      	ldrb	r1, [r4, #1]
 8025366:	fa1f f78c 	uxth.w	r7, ip
 802536a:	fb00 8806 	mla	r8, r0, r6, r8
 802536e:	fb00 5501 	mla	r5, r0, r1, r5
 8025372:	789e      	ldrb	r6, [r3, #2]
 8025374:	7859      	ldrb	r1, [r3, #1]
 8025376:	9b00      	ldr	r3, [sp, #0]
 8025378:	ea6f 0c0c 	mvn.w	ip, ip
 802537c:	fa5f fc8c 	uxtb.w	ip, ip
 8025380:	fb0a 5101 	mla	r1, sl, r1, r5
 8025384:	fb13 f50c 	smulbb	r5, r3, ip
 8025388:	9b03      	ldr	r3, [sp, #12]
 802538a:	435a      	muls	r2, r3
 802538c:	9b02      	ldr	r3, [sp, #8]
 802538e:	fb0e 2203 	mla	r2, lr, r3, r2
 8025392:	9b04      	ldr	r3, [sp, #16]
 8025394:	fb00 2003 	mla	r0, r0, r3, r2
 8025398:	9b05      	ldr	r3, [sp, #20]
 802539a:	fb0a 8606 	mla	r6, sl, r6, r8
 802539e:	fb19 f90c 	smulbb	r9, r9, ip
 80253a2:	fb0a 0a03 	mla	sl, sl, r3, r0
 80253a6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80253aa:	9b01      	ldr	r3, [sp, #4]
 80253ac:	fb06 9607 	mla	r6, r6, r7, r9
 80253b0:	b2b6      	uxth	r6, r6
 80253b2:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80253b6:	fb13 fc0c 	smulbb	ip, r3, ip
 80253ba:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80253be:	fb01 5107 	mla	r1, r1, r7, r5
 80253c2:	f106 0901 	add.w	r9, r6, #1
 80253c6:	fb0a c707 	mla	r7, sl, r7, ip
 80253ca:	b2bf      	uxth	r7, r7
 80253cc:	b289      	uxth	r1, r1
 80253ce:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 80253d2:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 80253d6:	1c4d      	adds	r5, r1, #1
 80253d8:	1c7e      	adds	r6, r7, #1
 80253da:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80253de:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 80253e2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80253e6:	0949      	lsrs	r1, r1, #5
 80253e8:	ea46 0609 	orr.w	r6, r6, r9
 80253ec:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80253f0:	430e      	orrs	r6, r1
 80253f2:	f8ab 6000 	strh.w	r6, [fp]
 80253f6:	b009      	add	sp, #36	; 0x24
 80253f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80253fc:	08032be1 	.word	0x08032be1
 8025400:	080331ae 	.word	0x080331ae
 8025404:	08032c65 	.word	0x08032c65

08025408 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802540c:	ed2d 8b08 	vpush	{d8-d11}
 8025410:	b095      	sub	sp, #84	; 0x54
 8025412:	eeb0 aa40 	vmov.f32	s20, s0
 8025416:	9212      	str	r2, [sp, #72]	; 0x48
 8025418:	9309      	str	r3, [sp, #36]	; 0x24
 802541a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802541c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8025420:	930f      	str	r3, [sp, #60]	; 0x3c
 8025422:	910e      	str	r1, [sp, #56]	; 0x38
 8025424:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8025428:	9013      	str	r0, [sp, #76]	; 0x4c
 802542a:	6850      	ldr	r0, [r2, #4]
 802542c:	6812      	ldr	r2, [r2, #0]
 802542e:	fb00 1303 	mla	r3, r0, r3, r1
 8025432:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025436:	930a      	str	r3, [sp, #40]	; 0x28
 8025438:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802543a:	681b      	ldr	r3, [r3, #0]
 802543c:	930d      	str	r3, [sp, #52]	; 0x34
 802543e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025440:	685c      	ldr	r4, [r3, #4]
 8025442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025444:	43db      	mvns	r3, r3
 8025446:	b2db      	uxtb	r3, r3
 8025448:	eef0 9a60 	vmov.f32	s19, s1
 802544c:	eeb0 9a41 	vmov.f32	s18, s2
 8025450:	eeb0 8a62 	vmov.f32	s16, s5
 8025454:	eef0 8a43 	vmov.f32	s17, s6
 8025458:	eef0 ba44 	vmov.f32	s23, s8
 802545c:	eeb0 ba64 	vmov.f32	s22, s9
 8025460:	eef0 aa45 	vmov.f32	s21, s10
 8025464:	3404      	adds	r4, #4
 8025466:	930b      	str	r3, [sp, #44]	; 0x2c
 8025468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802546a:	2b00      	cmp	r3, #0
 802546c:	dc03      	bgt.n	8025476 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802546e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025470:	2b00      	cmp	r3, #0
 8025472:	f340 8255 	ble.w	8025920 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8025476:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025478:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802547c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025480:	1e48      	subs	r0, r1, #1
 8025482:	1e55      	subs	r5, r2, #1
 8025484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025486:	2b00      	cmp	r3, #0
 8025488:	f340 80f9 	ble.w	802567e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 802548c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 802548e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025490:	1436      	asrs	r6, r6, #16
 8025492:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025496:	d406      	bmi.n	80254a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8025498:	4286      	cmp	r6, r0
 802549a:	da04      	bge.n	80254a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802549c:	2b00      	cmp	r3, #0
 802549e:	db02      	blt.n	80254a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80254a0:	42ab      	cmp	r3, r5
 80254a2:	f2c0 80ed 	blt.w	8025680 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80254a6:	3601      	adds	r6, #1
 80254a8:	f100 80da 	bmi.w	8025660 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 80254ac:	42b1      	cmp	r1, r6
 80254ae:	f2c0 80d7 	blt.w	8025660 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 80254b2:	3301      	adds	r3, #1
 80254b4:	f100 80d4 	bmi.w	8025660 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 80254b8:	429a      	cmp	r2, r3
 80254ba:	f2c0 80d1 	blt.w	8025660 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 80254be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80254c0:	9311      	str	r3, [sp, #68]	; 0x44
 80254c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80254c4:	930c      	str	r3, [sp, #48]	; 0x30
 80254c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80254c8:	2b00      	cmp	r3, #0
 80254ca:	f340 80fa 	ble.w	80256c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80254ce:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80254d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80254d2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80254d4:	68c6      	ldr	r6, [r0, #12]
 80254d6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80254d8:	141d      	asrs	r5, r3, #16
 80254da:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80254de:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80254e0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80254e2:	1400      	asrs	r0, r0, #16
 80254e4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80254e8:	6892      	ldr	r2, [r2, #8]
 80254ea:	f100 813e 	bmi.w	802576a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80254ee:	1e57      	subs	r7, r2, #1
 80254f0:	42b8      	cmp	r0, r7
 80254f2:	f280 813a 	bge.w	802576a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80254f6:	2d00      	cmp	r5, #0
 80254f8:	f2c0 8137 	blt.w	802576a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80254fc:	1e77      	subs	r7, r6, #1
 80254fe:	42bd      	cmp	r5, r7
 8025500:	f280 8133 	bge.w	802576a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025504:	b212      	sxth	r2, r2
 8025506:	fb05 0002 	mla	r0, r5, r2, r0
 802550a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802550c:	f815 a000 	ldrb.w	sl, [r5, r0]
 8025510:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8025514:	182e      	adds	r6, r5, r0
 8025516:	eb04 050a 	add.w	r5, r4, sl
 802551a:	2b00      	cmp	r3, #0
 802551c:	f000 8117 	beq.w	802574e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8025520:	f896 c001 	ldrb.w	ip, [r6, #1]
 8025524:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025528:	44a4      	add	ip, r4
 802552a:	2900      	cmp	r1, #0
 802552c:	f000 8117 	beq.w	802575e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8025530:	18b0      	adds	r0, r6, r2
 8025532:	5cb2      	ldrb	r2, [r6, r2]
 8025534:	7840      	ldrb	r0, [r0, #1]
 8025536:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802553a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802553e:	4422      	add	r2, r4
 8025540:	4420      	add	r0, r4
 8025542:	b29b      	uxth	r3, r3
 8025544:	b289      	uxth	r1, r1
 8025546:	fb03 f901 	mul.w	r9, r3, r1
 802554a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802554e:	011b      	lsls	r3, r3, #4
 8025550:	b289      	uxth	r1, r1
 8025552:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8025556:	f895 b002 	ldrb.w	fp, [r5, #2]
 802555a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802555c:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8025560:	f8b6 e000 	ldrh.w	lr, [r6]
 8025564:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8025568:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 802556c:	eba3 0309 	sub.w	r3, r3, r9
 8025570:	b29b      	uxth	r3, r3
 8025572:	eba8 0801 	sub.w	r8, r8, r1
 8025576:	fa1f f888 	uxth.w	r8, r8
 802557a:	435f      	muls	r7, r3
 802557c:	fb08 770b 	mla	r7, r8, fp, r7
 8025580:	f892 b002 	ldrb.w	fp, [r2, #2]
 8025584:	9310      	str	r3, [sp, #64]	; 0x40
 8025586:	fb01 770b 	mla	r7, r1, fp, r7
 802558a:	f890 b002 	ldrb.w	fp, [r0, #2]
 802558e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025590:	fb09 770b 	mla	r7, r9, fp, r7
 8025594:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8025598:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802559c:	fb1b fb03 	smulbb	fp, fp, r3
 80255a0:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80255a4:	fb07 b706 	mla	r7, r7, r6, fp
 80255a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80255aa:	f895 b001 	ldrb.w	fp, [r5, #1]
 80255ae:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80255b2:	f89c c000 	ldrb.w	ip, [ip]
 80255b6:	435d      	muls	r5, r3
 80255b8:	fb08 550b 	mla	r5, r8, fp, r5
 80255bc:	f892 b001 	ldrb.w	fp, [r2, #1]
 80255c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80255c2:	fb01 550b 	mla	r5, r1, fp, r5
 80255c6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80255ca:	fb09 550b 	mla	r5, r9, fp, r5
 80255ce:	ea4f 0bee 	mov.w	fp, lr, asr #3
 80255d2:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80255d6:	fb1b fb03 	smulbb	fp, fp, r3
 80255da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80255dc:	fb03 f30c 	mul.w	r3, r3, ip
 80255e0:	f892 c000 	ldrb.w	ip, [r2]
 80255e4:	fb08 330a 	mla	r3, r8, sl, r3
 80255e8:	fb01 330c 	mla	r3, r1, ip, r3
 80255ec:	f890 c000 	ldrb.w	ip, [r0]
 80255f0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80255f4:	fb09 3c0c 	mla	ip, r9, ip, r3
 80255f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80255fa:	fa5f fe8e 	uxtb.w	lr, lr
 80255fe:	b2bf      	uxth	r7, r7
 8025600:	fb1e fe03 	smulbb	lr, lr, r3
 8025604:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025608:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802560c:	fb05 b506 	mla	r5, r5, r6, fp
 8025610:	1c7b      	adds	r3, r7, #1
 8025612:	fb0c e606 	mla	r6, ip, r6, lr
 8025616:	b2ad      	uxth	r5, r5
 8025618:	b2b6      	uxth	r6, r6
 802561a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802561e:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8025622:	f105 0b01 	add.w	fp, r5, #1
 8025626:	1c77      	adds	r7, r6, #1
 8025628:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802562c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025630:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025634:	096d      	lsrs	r5, r5, #5
 8025636:	431f      	orrs	r7, r3
 8025638:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802563c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802563e:	433d      	orrs	r5, r7
 8025640:	801d      	strh	r5, [r3, #0]
 8025642:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025644:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025646:	3302      	adds	r3, #2
 8025648:	930c      	str	r3, [sp, #48]	; 0x30
 802564a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802564c:	4413      	add	r3, r2
 802564e:	9327      	str	r3, [sp, #156]	; 0x9c
 8025650:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025652:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025654:	4413      	add	r3, r2
 8025656:	9328      	str	r3, [sp, #160]	; 0xa0
 8025658:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802565a:	3b01      	subs	r3, #1
 802565c:	9311      	str	r3, [sp, #68]	; 0x44
 802565e:	e732      	b.n	80254c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8025660:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025662:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8025664:	4433      	add	r3, r6
 8025666:	9327      	str	r3, [sp, #156]	; 0x9c
 8025668:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 802566a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802566c:	4433      	add	r3, r6
 802566e:	9328      	str	r3, [sp, #160]	; 0xa0
 8025670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025672:	3b01      	subs	r3, #1
 8025674:	9309      	str	r3, [sp, #36]	; 0x24
 8025676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025678:	3302      	adds	r3, #2
 802567a:	930a      	str	r3, [sp, #40]	; 0x28
 802567c:	e702      	b.n	8025484 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802567e:	d027      	beq.n	80256d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8025680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025682:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8025684:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8025686:	3b01      	subs	r3, #1
 8025688:	fb00 5003 	mla	r0, r0, r3, r5
 802568c:	1400      	asrs	r0, r0, #16
 802568e:	f53f af16 	bmi.w	80254be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025692:	3901      	subs	r1, #1
 8025694:	4288      	cmp	r0, r1
 8025696:	f6bf af12 	bge.w	80254be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802569a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802569c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 802569e:	fb01 0303 	mla	r3, r1, r3, r0
 80256a2:	141b      	asrs	r3, r3, #16
 80256a4:	f53f af0b 	bmi.w	80254be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80256a8:	3a01      	subs	r2, #1
 80256aa:	4293      	cmp	r3, r2
 80256ac:	f6bf af07 	bge.w	80254be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80256b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80256b2:	9311      	str	r3, [sp, #68]	; 0x44
 80256b4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80256b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80256ba:	930c      	str	r3, [sp, #48]	; 0x30
 80256bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80256be:	2b00      	cmp	r3, #0
 80256c0:	dc70      	bgt.n	80257a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 80256c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80256c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80256c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80256ca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80256ce:	930a      	str	r3, [sp, #40]	; 0x28
 80256d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80256d2:	2b00      	cmp	r3, #0
 80256d4:	f340 8124 	ble.w	8025920 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 80256d8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80256dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80256e0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80256e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80256e6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80256ea:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80256ee:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80256f2:	eef0 6a48 	vmov.f32	s13, s16
 80256f6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80256fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80256fe:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025702:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8025706:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802570a:	eef0 6a68 	vmov.f32	s13, s17
 802570e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025712:	ee18 2a10 	vmov	r2, s16
 8025716:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802571a:	fb92 f3f3 	sdiv	r3, r2, r3
 802571e:	ee18 2a90 	vmov	r2, s17
 8025722:	9329      	str	r3, [sp, #164]	; 0xa4
 8025724:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025726:	fb92 f3f3 	sdiv	r3, r2, r3
 802572a:	932a      	str	r3, [sp, #168]	; 0xa8
 802572c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802572e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025730:	3b01      	subs	r3, #1
 8025732:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025736:	930e      	str	r3, [sp, #56]	; 0x38
 8025738:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802573a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 802573e:	bf08      	it	eq
 8025740:	4613      	moveq	r3, r2
 8025742:	9309      	str	r3, [sp, #36]	; 0x24
 8025744:	eef0 8a67 	vmov.f32	s17, s15
 8025748:	eeb0 8a47 	vmov.f32	s16, s14
 802574c:	e68c      	b.n	8025468 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802574e:	b149      	cbz	r1, 8025764 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8025750:	5cb2      	ldrb	r2, [r6, r2]
 8025752:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025756:	4422      	add	r2, r4
 8025758:	4628      	mov	r0, r5
 802575a:	46ac      	mov	ip, r5
 802575c:	e6f1      	b.n	8025542 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802575e:	4628      	mov	r0, r5
 8025760:	462a      	mov	r2, r5
 8025762:	e6ee      	b.n	8025542 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8025764:	4628      	mov	r0, r5
 8025766:	462a      	mov	r2, r5
 8025768:	e7f7      	b.n	802575a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 802576a:	1c47      	adds	r7, r0, #1
 802576c:	f53f af69 	bmi.w	8025642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025770:	42ba      	cmp	r2, r7
 8025772:	f6ff af66 	blt.w	8025642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025776:	1c6f      	adds	r7, r5, #1
 8025778:	f53f af63 	bmi.w	8025642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802577c:	42be      	cmp	r6, r7
 802577e:	f6ff af60 	blt.w	8025642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025782:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025784:	9002      	str	r0, [sp, #8]
 8025786:	b236      	sxth	r6, r6
 8025788:	b212      	sxth	r2, r2
 802578a:	e9cd 1705 	strd	r1, r7, [sp, #20]
 802578e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8025792:	9200      	str	r2, [sp, #0]
 8025794:	9601      	str	r6, [sp, #4]
 8025796:	4623      	mov	r3, r4
 8025798:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 802579c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802579e:	f7ff fd49 	bl	8025234 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80257a2:	e74e      	b.n	8025642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80257a4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80257a6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80257a8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80257aa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80257ac:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80257b0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80257b2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80257b6:	142d      	asrs	r5, r5, #16
 80257b8:	1400      	asrs	r0, r0, #16
 80257ba:	fb02 5000 	mla	r0, r2, r0, r5
 80257be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80257c0:	f815 9000 	ldrb.w	r9, [r5, r0]
 80257c4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80257c8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80257cc:	182e      	adds	r6, r5, r0
 80257ce:	eb04 0509 	add.w	r5, r4, r9
 80257d2:	2b00      	cmp	r3, #0
 80257d4:	f000 8096 	beq.w	8025904 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 80257d8:	7877      	ldrb	r7, [r6, #1]
 80257da:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80257de:	4427      	add	r7, r4
 80257e0:	2900      	cmp	r1, #0
 80257e2:	f000 8097 	beq.w	8025914 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 80257e6:	18b0      	adds	r0, r6, r2
 80257e8:	5cb2      	ldrb	r2, [r6, r2]
 80257ea:	7840      	ldrb	r0, [r0, #1]
 80257ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80257f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80257f4:	4422      	add	r2, r4
 80257f6:	4420      	add	r0, r4
 80257f8:	b29b      	uxth	r3, r3
 80257fa:	b289      	uxth	r1, r1
 80257fc:	fb03 f801 	mul.w	r8, r3, r1
 8025800:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025802:	f895 b002 	ldrb.w	fp, [r5, #2]
 8025806:	f8b6 c000 	ldrh.w	ip, [r6]
 802580a:	78be      	ldrb	r6, [r7, #2]
 802580c:	f814 9009 	ldrb.w	r9, [r4, r9]
 8025810:	011b      	lsls	r3, r3, #4
 8025812:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8025816:	b289      	uxth	r1, r1
 8025818:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802581c:	eba3 0308 	sub.w	r3, r3, r8
 8025820:	b29b      	uxth	r3, r3
 8025822:	ebae 0e01 	sub.w	lr, lr, r1
 8025826:	fa1f fe8e 	uxth.w	lr, lr
 802582a:	435e      	muls	r6, r3
 802582c:	fb0e 660b 	mla	r6, lr, fp, r6
 8025830:	f892 b002 	ldrb.w	fp, [r2, #2]
 8025834:	9310      	str	r3, [sp, #64]	; 0x40
 8025836:	fb01 660b 	mla	r6, r1, fp, r6
 802583a:	f890 b002 	ldrb.w	fp, [r0, #2]
 802583e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025840:	fb08 660b 	mla	r6, r8, fp, r6
 8025844:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8025848:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802584c:	fb1b fb03 	smulbb	fp, fp, r3
 8025850:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025854:	fb06 b60a 	mla	r6, r6, sl, fp
 8025858:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802585a:	f895 b001 	ldrb.w	fp, [r5, #1]
 802585e:	787d      	ldrb	r5, [r7, #1]
 8025860:	783f      	ldrb	r7, [r7, #0]
 8025862:	435d      	muls	r5, r3
 8025864:	fb0e 550b 	mla	r5, lr, fp, r5
 8025868:	f892 b001 	ldrb.w	fp, [r2, #1]
 802586c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802586e:	fb01 550b 	mla	r5, r1, fp, r5
 8025872:	f890 b001 	ldrb.w	fp, [r0, #1]
 8025876:	fb08 550b 	mla	r5, r8, fp, r5
 802587a:	ea4f 0bec 	mov.w	fp, ip, asr #3
 802587e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8025882:	fb1b fb03 	smulbb	fp, fp, r3
 8025886:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025888:	437b      	muls	r3, r7
 802588a:	7817      	ldrb	r7, [r2, #0]
 802588c:	fb0e 3309 	mla	r3, lr, r9, r3
 8025890:	fb01 3307 	mla	r3, r1, r7, r3
 8025894:	7807      	ldrb	r7, [r0, #0]
 8025896:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802589a:	fb08 3707 	mla	r7, r8, r7, r3
 802589e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80258a0:	fa5f fc8c 	uxtb.w	ip, ip
 80258a4:	fb1c fc03 	smulbb	ip, ip, r3
 80258a8:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80258ac:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80258b0:	fb05 b50a 	mla	r5, r5, sl, fp
 80258b4:	fb07 c70a 	mla	r7, r7, sl, ip
 80258b8:	b2b6      	uxth	r6, r6
 80258ba:	b2ad      	uxth	r5, r5
 80258bc:	b2bf      	uxth	r7, r7
 80258be:	1c73      	adds	r3, r6, #1
 80258c0:	1c7a      	adds	r2, r7, #1
 80258c2:	f105 0b01 	add.w	fp, r5, #1
 80258c6:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80258ca:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80258ce:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80258d2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80258d6:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80258da:	096d      	lsrs	r5, r5, #5
 80258dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80258de:	4316      	orrs	r6, r2
 80258e0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80258e4:	432e      	orrs	r6, r5
 80258e6:	f823 6b02 	strh.w	r6, [r3], #2
 80258ea:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80258ec:	930c      	str	r3, [sp, #48]	; 0x30
 80258ee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80258f0:	4413      	add	r3, r2
 80258f2:	9327      	str	r3, [sp, #156]	; 0x9c
 80258f4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80258f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80258f8:	4413      	add	r3, r2
 80258fa:	9328      	str	r3, [sp, #160]	; 0xa0
 80258fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80258fe:	3b01      	subs	r3, #1
 8025900:	9311      	str	r3, [sp, #68]	; 0x44
 8025902:	e6db      	b.n	80256bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8025904:	b149      	cbz	r1, 802591a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8025906:	5cb2      	ldrb	r2, [r6, r2]
 8025908:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802590c:	4422      	add	r2, r4
 802590e:	4628      	mov	r0, r5
 8025910:	462f      	mov	r7, r5
 8025912:	e771      	b.n	80257f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8025914:	4628      	mov	r0, r5
 8025916:	462a      	mov	r2, r5
 8025918:	e76e      	b.n	80257f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802591a:	4628      	mov	r0, r5
 802591c:	462a      	mov	r2, r5
 802591e:	e7f7      	b.n	8025910 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8025920:	b015      	add	sp, #84	; 0x54
 8025922:	ecbd 8b08 	vpop	{d8-d11}
 8025926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802592c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 802592c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025930:	880e      	ldrh	r6, [r1, #0]
 8025932:	b085      	sub	sp, #20
 8025934:	0230      	lsls	r0, r6, #8
 8025936:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 802593a:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 802593e:	0170      	lsls	r0, r6, #5
 8025940:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8025944:	9101      	str	r1, [sp, #4]
 8025946:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 802594a:	00f6      	lsls	r6, r6, #3
 802594c:	ea4b 0000 	orr.w	r0, fp, r0
 8025950:	b2f6      	uxtb	r6, r6
 8025952:	4691      	mov	r9, r2
 8025954:	fb05 7a0c 	mla	sl, r5, ip, r7
 8025958:	4306      	orrs	r6, r0
 802595a:	2d00      	cmp	r5, #0
 802595c:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8025960:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8025964:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8025968:	9603      	str	r6, [sp, #12]
 802596a:	eb09 0e0a 	add.w	lr, r9, sl
 802596e:	db42      	blt.n	80259f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8025970:	45a8      	cmp	r8, r5
 8025972:	dd40      	ble.n	80259f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8025974:	2f00      	cmp	r7, #0
 8025976:	db3c      	blt.n	80259f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8025978:	45bc      	cmp	ip, r7
 802597a:	dd3a      	ble.n	80259f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 802597c:	f819 600a 	ldrb.w	r6, [r9, sl]
 8025980:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025984:	441e      	add	r6, r3
 8025986:	1c78      	adds	r0, r7, #1
 8025988:	d438      	bmi.n	80259fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 802598a:	4584      	cmp	ip, r0
 802598c:	dd36      	ble.n	80259fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 802598e:	b3aa      	cbz	r2, 80259fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8025990:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8025994:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025998:	4418      	add	r0, r3
 802599a:	3501      	adds	r5, #1
 802599c:	d432      	bmi.n	8025a04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 802599e:	45a8      	cmp	r8, r5
 80259a0:	dd30      	ble.n	8025a04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 80259a2:	b37c      	cbz	r4, 8025a04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 80259a4:	2f00      	cmp	r7, #0
 80259a6:	db2b      	blt.n	8025a00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 80259a8:	45bc      	cmp	ip, r7
 80259aa:	dd29      	ble.n	8025a00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 80259ac:	f81e 500c 	ldrb.w	r5, [lr, ip]
 80259b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80259b4:	441d      	add	r5, r3
 80259b6:	3701      	adds	r7, #1
 80259b8:	d427      	bmi.n	8025a0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 80259ba:	45bc      	cmp	ip, r7
 80259bc:	dd25      	ble.n	8025a0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 80259be:	b322      	cbz	r2, 8025a0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 80259c0:	44f4      	add	ip, lr
 80259c2:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80259c6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80259ca:	443b      	add	r3, r7
 80259cc:	781f      	ldrb	r7, [r3, #0]
 80259ce:	f896 9000 	ldrb.w	r9, [r6]
 80259d2:	f890 a000 	ldrb.w	sl, [r0]
 80259d6:	f895 8000 	ldrb.w	r8, [r5]
 80259da:	2a0f      	cmp	r2, #15
 80259dc:	4639      	mov	r1, r7
 80259de:	d801      	bhi.n	80259e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 80259e0:	2c0f      	cmp	r4, #15
 80259e2:	d914      	bls.n	8025a0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 80259e4:	4b2c      	ldr	r3, [pc, #176]	; (8025a98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 80259e6:	4a2d      	ldr	r2, [pc, #180]	; (8025a9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 80259e8:	482d      	ldr	r0, [pc, #180]	; (8025aa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 80259ea:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80259ee:	f008 fa67 	bl	802dec0 <__assert_func>
 80259f2:	ae03      	add	r6, sp, #12
 80259f4:	e7c7      	b.n	8025986 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 80259f6:	a803      	add	r0, sp, #12
 80259f8:	4606      	mov	r6, r0
 80259fa:	e7ce      	b.n	802599a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80259fc:	a803      	add	r0, sp, #12
 80259fe:	e7cc      	b.n	802599a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8025a00:	ad03      	add	r5, sp, #12
 8025a02:	e7d8      	b.n	80259b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 8025a04:	ab03      	add	r3, sp, #12
 8025a06:	461d      	mov	r5, r3
 8025a08:	e7e0      	b.n	80259cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8025a0a:	ab03      	add	r3, sp, #12
 8025a0c:	e7de      	b.n	80259cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8025a0e:	b292      	uxth	r2, r2
 8025a10:	b2a4      	uxth	r4, r4
 8025a12:	fb02 fe04 	mul.w	lr, r2, r4
 8025a16:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8025a1a:	0112      	lsls	r2, r2, #4
 8025a1c:	b2a4      	uxth	r4, r4
 8025a1e:	f890 c002 	ldrb.w	ip, [r0, #2]
 8025a22:	f896 b002 	ldrb.w	fp, [r6, #2]
 8025a26:	7840      	ldrb	r0, [r0, #1]
 8025a28:	7876      	ldrb	r6, [r6, #1]
 8025a2a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8025a2e:	eba2 020e 	sub.w	r2, r2, lr
 8025a32:	b292      	uxth	r2, r2
 8025a34:	1b3f      	subs	r7, r7, r4
 8025a36:	b2bf      	uxth	r7, r7
 8025a38:	fb02 fc0c 	mul.w	ip, r2, ip
 8025a3c:	fb07 cc0b 	mla	ip, r7, fp, ip
 8025a40:	f895 b002 	ldrb.w	fp, [r5, #2]
 8025a44:	fb04 cc0b 	mla	ip, r4, fp, ip
 8025a48:	f893 b002 	ldrb.w	fp, [r3, #2]
 8025a4c:	785b      	ldrb	r3, [r3, #1]
 8025a4e:	fb0e cc0b 	mla	ip, lr, fp, ip
 8025a52:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8025a56:	fb02 fc0a 	mul.w	ip, r2, sl
 8025a5a:	4342      	muls	r2, r0
 8025a5c:	7868      	ldrb	r0, [r5, #1]
 8025a5e:	fb07 cc09 	mla	ip, r7, r9, ip
 8025a62:	fb07 2206 	mla	r2, r7, r6, r2
 8025a66:	fb04 cc08 	mla	ip, r4, r8, ip
 8025a6a:	fb04 2400 	mla	r4, r4, r0, r2
 8025a6e:	fb0e cc01 	mla	ip, lr, r1, ip
 8025a72:	fb0e 4e03 	mla	lr, lr, r3, r4
 8025a76:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8025a7a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025a7e:	ea4c 0c0b 	orr.w	ip, ip, fp
 8025a82:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025a86:	9b01      	ldr	r3, [sp, #4]
 8025a88:	ea4c 0c0e 	orr.w	ip, ip, lr
 8025a8c:	f8a3 c000 	strh.w	ip, [r3]
 8025a90:	b005      	add	sp, #20
 8025a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a96:	bf00      	nop
 8025a98:	08032be1 	.word	0x08032be1
 8025a9c:	080331ae 	.word	0x080331ae
 8025aa0:	08032c65 	.word	0x08032c65

08025aa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025aa8:	ed2d 8b08 	vpush	{d8-d11}
 8025aac:	b08f      	sub	sp, #60	; 0x3c
 8025aae:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 8025ab2:	920c      	str	r2, [sp, #48]	; 0x30
 8025ab4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8025ab6:	910a      	str	r1, [sp, #40]	; 0x28
 8025ab8:	9306      	str	r3, [sp, #24]
 8025aba:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8025abe:	900d      	str	r0, [sp, #52]	; 0x34
 8025ac0:	6850      	ldr	r0, [r2, #4]
 8025ac2:	6812      	ldr	r2, [r2, #0]
 8025ac4:	fb00 1303 	mla	r3, r0, r3, r1
 8025ac8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025acc:	9307      	str	r3, [sp, #28]
 8025ace:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025ad0:	681b      	ldr	r3, [r3, #0]
 8025ad2:	9308      	str	r3, [sp, #32]
 8025ad4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025ad6:	685c      	ldr	r4, [r3, #4]
 8025ad8:	eeb0 aa40 	vmov.f32	s20, s0
 8025adc:	eef0 9a60 	vmov.f32	s19, s1
 8025ae0:	eeb0 9a41 	vmov.f32	s18, s2
 8025ae4:	eeb0 8a62 	vmov.f32	s16, s5
 8025ae8:	eef0 8a43 	vmov.f32	s17, s6
 8025aec:	eef0 ba44 	vmov.f32	s23, s8
 8025af0:	eeb0 ba64 	vmov.f32	s22, s9
 8025af4:	eef0 aa45 	vmov.f32	s21, s10
 8025af8:	3404      	adds	r4, #4
 8025afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025afc:	2b00      	cmp	r3, #0
 8025afe:	dc03      	bgt.n	8025b08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8025b00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025b02:	2b00      	cmp	r3, #0
 8025b04:	f340 81d6 	ble.w	8025eb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8025b08:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025b0a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025b0e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025b12:	1e48      	subs	r0, r1, #1
 8025b14:	1e56      	subs	r6, r2, #1
 8025b16:	9b06      	ldr	r3, [sp, #24]
 8025b18:	2b00      	cmp	r3, #0
 8025b1a:	f340 80b7 	ble.w	8025c8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8025b1e:	ea5f 472b 	movs.w	r7, fp, asr #16
 8025b22:	ea4f 4325 	mov.w	r3, r5, asr #16
 8025b26:	d406      	bmi.n	8025b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025b28:	4287      	cmp	r7, r0
 8025b2a:	da04      	bge.n	8025b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025b2c:	2b00      	cmp	r3, #0
 8025b2e:	db02      	blt.n	8025b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025b30:	42b3      	cmp	r3, r6
 8025b32:	f2c0 80ac 	blt.w	8025c8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025b36:	3701      	adds	r7, #1
 8025b38:	f100 809d 	bmi.w	8025c76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025b3c:	42b9      	cmp	r1, r7
 8025b3e:	f2c0 809a 	blt.w	8025c76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025b42:	3301      	adds	r3, #1
 8025b44:	f100 8097 	bmi.w	8025c76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025b48:	429a      	cmp	r2, r3
 8025b4a:	f2c0 8094 	blt.w	8025c76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025b4e:	9b06      	ldr	r3, [sp, #24]
 8025b50:	930b      	str	r3, [sp, #44]	; 0x2c
 8025b52:	9b07      	ldr	r3, [sp, #28]
 8025b54:	9309      	str	r3, [sp, #36]	; 0x24
 8025b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025b58:	2b00      	cmp	r3, #0
 8025b5a:	f340 80b5 	ble.w	8025cc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8025b5e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8025b60:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025b62:	68c7      	ldr	r7, [r0, #12]
 8025b64:	6892      	ldr	r2, [r2, #8]
 8025b66:	ea5f 402b 	movs.w	r0, fp, asr #16
 8025b6a:	ea4f 4625 	mov.w	r6, r5, asr #16
 8025b6e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025b72:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025b76:	f100 80fb 	bmi.w	8025d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8025b7a:	f102 3cff 	add.w	ip, r2, #4294967295
 8025b7e:	4560      	cmp	r0, ip
 8025b80:	f280 80f6 	bge.w	8025d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8025b84:	2e00      	cmp	r6, #0
 8025b86:	f2c0 80f3 	blt.w	8025d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8025b8a:	f107 3cff 	add.w	ip, r7, #4294967295
 8025b8e:	4566      	cmp	r6, ip
 8025b90:	f280 80ee 	bge.w	8025d70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8025b94:	b212      	sxth	r2, r2
 8025b96:	fb06 0002 	mla	r0, r6, r2, r0
 8025b9a:	9e08      	ldr	r6, [sp, #32]
 8025b9c:	1837      	adds	r7, r6, r0
 8025b9e:	5c30      	ldrb	r0, [r6, r0]
 8025ba0:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8025ba4:	eb04 0c08 	add.w	ip, r4, r8
 8025ba8:	2b00      	cmp	r3, #0
 8025baa:	f000 80d3 	beq.w	8025d54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8025bae:	787e      	ldrb	r6, [r7, #1]
 8025bb0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025bb4:	4426      	add	r6, r4
 8025bb6:	2900      	cmp	r1, #0
 8025bb8:	f000 80d4 	beq.w	8025d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 8025bbc:	18b8      	adds	r0, r7, r2
 8025bbe:	5cba      	ldrb	r2, [r7, r2]
 8025bc0:	7840      	ldrb	r0, [r0, #1]
 8025bc2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025bc6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025bca:	4422      	add	r2, r4
 8025bcc:	4420      	add	r0, r4
 8025bce:	b29b      	uxth	r3, r3
 8025bd0:	b289      	uxth	r1, r1
 8025bd2:	fb03 f901 	mul.w	r9, r3, r1
 8025bd6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025bda:	011b      	lsls	r3, r3, #4
 8025bdc:	b289      	uxth	r1, r1
 8025bde:	78b7      	ldrb	r7, [r6, #2]
 8025be0:	f89c a002 	ldrb.w	sl, [ip, #2]
 8025be4:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025be8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025bec:	eba3 0309 	sub.w	r3, r3, r9
 8025bf0:	b29b      	uxth	r3, r3
 8025bf2:	ebae 0e01 	sub.w	lr, lr, r1
 8025bf6:	fa1f fe8e 	uxth.w	lr, lr
 8025bfa:	435f      	muls	r7, r3
 8025bfc:	fb0e 770a 	mla	r7, lr, sl, r7
 8025c00:	f892 a002 	ldrb.w	sl, [r2, #2]
 8025c04:	fb01 770a 	mla	r7, r1, sl, r7
 8025c08:	f890 a002 	ldrb.w	sl, [r0, #2]
 8025c0c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8025c10:	f814 7008 	ldrb.w	r7, [r4, r8]
 8025c14:	f896 8000 	ldrb.w	r8, [r6]
 8025c18:	7876      	ldrb	r6, [r6, #1]
 8025c1a:	fb03 f808 	mul.w	r8, r3, r8
 8025c1e:	fb0e 8807 	mla	r8, lr, r7, r8
 8025c22:	7817      	ldrb	r7, [r2, #0]
 8025c24:	fb01 8807 	mla	r8, r1, r7, r8
 8025c28:	7807      	ldrb	r7, [r0, #0]
 8025c2a:	fb09 8707 	mla	r7, r9, r7, r8
 8025c2e:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8025c32:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025c36:	ea47 070a 	orr.w	r7, r7, sl
 8025c3a:	4373      	muls	r3, r6
 8025c3c:	f892 a001 	ldrb.w	sl, [r2, #1]
 8025c40:	fb0e 330c 	mla	r3, lr, ip, r3
 8025c44:	fb01 310a 	mla	r1, r1, sl, r3
 8025c48:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c4e:	fb09 1a0a 	mla	sl, r9, sl, r1
 8025c52:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025c56:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025c5a:	ea47 070a 	orr.w	r7, r7, sl
 8025c5e:	801f      	strh	r7, [r3, #0]
 8025c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c62:	3302      	adds	r3, #2
 8025c64:	9309      	str	r3, [sp, #36]	; 0x24
 8025c66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025c68:	449b      	add	fp, r3
 8025c6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025c6c:	441d      	add	r5, r3
 8025c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025c70:	3b01      	subs	r3, #1
 8025c72:	930b      	str	r3, [sp, #44]	; 0x2c
 8025c74:	e76f      	b.n	8025b56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025c76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025c78:	449b      	add	fp, r3
 8025c7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025c7c:	441d      	add	r5, r3
 8025c7e:	9b06      	ldr	r3, [sp, #24]
 8025c80:	3b01      	subs	r3, #1
 8025c82:	9306      	str	r3, [sp, #24]
 8025c84:	9b07      	ldr	r3, [sp, #28]
 8025c86:	3302      	adds	r3, #2
 8025c88:	9307      	str	r3, [sp, #28]
 8025c8a:	e744      	b.n	8025b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025c8c:	d023      	beq.n	8025cd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8025c8e:	9b06      	ldr	r3, [sp, #24]
 8025c90:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025c92:	3b01      	subs	r3, #1
 8025c94:	fb00 b003 	mla	r0, r0, r3, fp
 8025c98:	1400      	asrs	r0, r0, #16
 8025c9a:	f53f af58 	bmi.w	8025b4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025c9e:	3901      	subs	r1, #1
 8025ca0:	4288      	cmp	r0, r1
 8025ca2:	f6bf af54 	bge.w	8025b4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025ca6:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025ca8:	fb01 5303 	mla	r3, r1, r3, r5
 8025cac:	141b      	asrs	r3, r3, #16
 8025cae:	f53f af4e 	bmi.w	8025b4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025cb2:	3a01      	subs	r2, #1
 8025cb4:	4293      	cmp	r3, r2
 8025cb6:	f6bf af4a 	bge.w	8025b4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025cba:	9b06      	ldr	r3, [sp, #24]
 8025cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8025cbe:	9b07      	ldr	r3, [sp, #28]
 8025cc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8025cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025cc4:	2b00      	cmp	r3, #0
 8025cc6:	dc70      	bgt.n	8025daa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8025cc8:	9b06      	ldr	r3, [sp, #24]
 8025cca:	9a07      	ldr	r2, [sp, #28]
 8025ccc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025cd0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025cd4:	9307      	str	r3, [sp, #28]
 8025cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025cd8:	2b00      	cmp	r3, #0
 8025cda:	f340 80eb 	ble.w	8025eb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8025cde:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025ce2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025ce6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025cea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025cec:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025cf0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025cf4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025cf8:	eef0 6a48 	vmov.f32	s13, s16
 8025cfc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025d00:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025d04:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025d08:	ee16 ba90 	vmov	fp, s13
 8025d0c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025d10:	eef0 6a68 	vmov.f32	s13, s17
 8025d14:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025d18:	ee18 2a10 	vmov	r2, s16
 8025d1c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025d20:	fb92 f3f3 	sdiv	r3, r2, r3
 8025d24:	ee18 2a90 	vmov	r2, s17
 8025d28:	9323      	str	r3, [sp, #140]	; 0x8c
 8025d2a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025d2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025d30:	9324      	str	r3, [sp, #144]	; 0x90
 8025d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025d34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025d36:	3b01      	subs	r3, #1
 8025d38:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025d3c:	930a      	str	r3, [sp, #40]	; 0x28
 8025d3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025d40:	bf08      	it	eq
 8025d42:	4613      	moveq	r3, r2
 8025d44:	ee16 5a90 	vmov	r5, s13
 8025d48:	9306      	str	r3, [sp, #24]
 8025d4a:	eef0 8a67 	vmov.f32	s17, s15
 8025d4e:	eeb0 8a47 	vmov.f32	s16, s14
 8025d52:	e6d2      	b.n	8025afa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8025d54:	b149      	cbz	r1, 8025d6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8025d56:	5cba      	ldrb	r2, [r7, r2]
 8025d58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025d5c:	4422      	add	r2, r4
 8025d5e:	4660      	mov	r0, ip
 8025d60:	4666      	mov	r6, ip
 8025d62:	e734      	b.n	8025bce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8025d64:	4660      	mov	r0, ip
 8025d66:	4662      	mov	r2, ip
 8025d68:	e731      	b.n	8025bce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8025d6a:	4660      	mov	r0, ip
 8025d6c:	4662      	mov	r2, ip
 8025d6e:	e7f7      	b.n	8025d60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8025d70:	f110 0c01 	adds.w	ip, r0, #1
 8025d74:	f53f af74 	bmi.w	8025c60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025d78:	4562      	cmp	r2, ip
 8025d7a:	f6ff af71 	blt.w	8025c60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025d7e:	f116 0c01 	adds.w	ip, r6, #1
 8025d82:	f53f af6d 	bmi.w	8025c60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025d86:	4567      	cmp	r7, ip
 8025d88:	f6ff af6a 	blt.w	8025c60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025d8c:	b23f      	sxth	r7, r7
 8025d8e:	b212      	sxth	r2, r2
 8025d90:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8025d94:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8025d98:	9200      	str	r2, [sp, #0]
 8025d9a:	9701      	str	r7, [sp, #4]
 8025d9c:	4623      	mov	r3, r4
 8025d9e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8025da2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8025da4:	f7ff fdc2 	bl	802592c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8025da8:	e75a      	b.n	8025c60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025daa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025dac:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025db0:	ea4f 462b 	mov.w	r6, fp, asr #16
 8025db4:	1428      	asrs	r0, r5, #16
 8025db6:	fb02 6000 	mla	r0, r2, r0, r6
 8025dba:	9e08      	ldr	r6, [sp, #32]
 8025dbc:	f816 8000 	ldrb.w	r8, [r6, r0]
 8025dc0:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025dc4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025dc8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025dcc:	1837      	adds	r7, r6, r0
 8025dce:	eb04 0c08 	add.w	ip, r4, r8
 8025dd2:	2b00      	cmp	r3, #0
 8025dd4:	d060      	beq.n	8025e98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8025dd6:	787e      	ldrb	r6, [r7, #1]
 8025dd8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025ddc:	4426      	add	r6, r4
 8025dde:	2900      	cmp	r1, #0
 8025de0:	d062      	beq.n	8025ea8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8025de2:	18b8      	adds	r0, r7, r2
 8025de4:	5cba      	ldrb	r2, [r7, r2]
 8025de6:	7840      	ldrb	r0, [r0, #1]
 8025de8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025dec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025df0:	4422      	add	r2, r4
 8025df2:	4420      	add	r0, r4
 8025df4:	b29b      	uxth	r3, r3
 8025df6:	b289      	uxth	r1, r1
 8025df8:	fb03 f901 	mul.w	r9, r3, r1
 8025dfc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025e00:	011b      	lsls	r3, r3, #4
 8025e02:	b289      	uxth	r1, r1
 8025e04:	78b7      	ldrb	r7, [r6, #2]
 8025e06:	f89c a002 	ldrb.w	sl, [ip, #2]
 8025e0a:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025e0e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025e12:	eba3 0309 	sub.w	r3, r3, r9
 8025e16:	b29b      	uxth	r3, r3
 8025e18:	ebae 0e01 	sub.w	lr, lr, r1
 8025e1c:	fa1f fe8e 	uxth.w	lr, lr
 8025e20:	435f      	muls	r7, r3
 8025e22:	fb0e 770a 	mla	r7, lr, sl, r7
 8025e26:	f892 a002 	ldrb.w	sl, [r2, #2]
 8025e2a:	fb01 770a 	mla	r7, r1, sl, r7
 8025e2e:	f890 a002 	ldrb.w	sl, [r0, #2]
 8025e32:	fb09 7a0a 	mla	sl, r9, sl, r7
 8025e36:	f814 7008 	ldrb.w	r7, [r4, r8]
 8025e3a:	f896 8000 	ldrb.w	r8, [r6]
 8025e3e:	7876      	ldrb	r6, [r6, #1]
 8025e40:	fb03 f808 	mul.w	r8, r3, r8
 8025e44:	fb0e 8807 	mla	r8, lr, r7, r8
 8025e48:	7817      	ldrb	r7, [r2, #0]
 8025e4a:	fb01 8807 	mla	r8, r1, r7, r8
 8025e4e:	7807      	ldrb	r7, [r0, #0]
 8025e50:	fb09 8707 	mla	r7, r9, r7, r8
 8025e54:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8025e58:	4373      	muls	r3, r6
 8025e5a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025e5e:	7856      	ldrb	r6, [r2, #1]
 8025e60:	ea47 070a 	orr.w	r7, r7, sl
 8025e64:	fb0e 330c 	mla	r3, lr, ip, r3
 8025e68:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025e6c:	fb01 3306 	mla	r3, r1, r6, r3
 8025e70:	fb09 3a0a 	mla	sl, r9, sl, r3
 8025e74:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025e7a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025e7e:	ea47 070a 	orr.w	r7, r7, sl
 8025e82:	f823 7b02 	strh.w	r7, [r3], #2
 8025e86:	930b      	str	r3, [sp, #44]	; 0x2c
 8025e88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025e8a:	449b      	add	fp, r3
 8025e8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025e8e:	441d      	add	r5, r3
 8025e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025e92:	3b01      	subs	r3, #1
 8025e94:	9309      	str	r3, [sp, #36]	; 0x24
 8025e96:	e714      	b.n	8025cc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8025e98:	b149      	cbz	r1, 8025eae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8025e9a:	5cba      	ldrb	r2, [r7, r2]
 8025e9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025ea0:	4422      	add	r2, r4
 8025ea2:	4660      	mov	r0, ip
 8025ea4:	4666      	mov	r6, ip
 8025ea6:	e7a5      	b.n	8025df4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025ea8:	4660      	mov	r0, ip
 8025eaa:	4662      	mov	r2, ip
 8025eac:	e7a2      	b.n	8025df4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025eae:	4660      	mov	r0, ip
 8025eb0:	4662      	mov	r2, ip
 8025eb2:	e7f7      	b.n	8025ea4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8025eb4:	b00f      	add	sp, #60	; 0x3c
 8025eb6:	ecbd 8b08 	vpop	{d8-d11}
 8025eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025ec0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8025ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ec4:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 8025ec8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8025ecc:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8025ed0:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8025ed4:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8025ed8:	fb04 560c 	mla	r6, r4, ip, r5
 8025edc:	2c00      	cmp	r4, #0
 8025ede:	eb02 0e06 	add.w	lr, r2, r6
 8025ee2:	db3d      	blt.n	8025f60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8025ee4:	45a0      	cmp	r8, r4
 8025ee6:	dd3b      	ble.n	8025f60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8025ee8:	2d00      	cmp	r5, #0
 8025eea:	db37      	blt.n	8025f5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8025eec:	45ac      	cmp	ip, r5
 8025eee:	dd35      	ble.n	8025f5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8025ef0:	5d92      	ldrb	r2, [r2, r6]
 8025ef2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025ef6:	1c6e      	adds	r6, r5, #1
 8025ef8:	d435      	bmi.n	8025f66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8025efa:	45b4      	cmp	ip, r6
 8025efc:	dd33      	ble.n	8025f66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8025efe:	b3a0      	cbz	r0, 8025f6a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 8025f00:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8025f04:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8025f08:	3401      	adds	r4, #1
 8025f0a:	d432      	bmi.n	8025f72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8025f0c:	45a0      	cmp	r8, r4
 8025f0e:	dd30      	ble.n	8025f72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8025f10:	b397      	cbz	r7, 8025f78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 8025f12:	2d00      	cmp	r5, #0
 8025f14:	db2b      	blt.n	8025f6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8025f16:	45ac      	cmp	ip, r5
 8025f18:	dd29      	ble.n	8025f6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8025f1a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8025f1e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8025f22:	3501      	adds	r5, #1
 8025f24:	d42b      	bmi.n	8025f7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8025f26:	45ac      	cmp	ip, r5
 8025f28:	dd29      	ble.n	8025f7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8025f2a:	b350      	cbz	r0, 8025f82 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8025f2c:	44f4      	add	ip, lr
 8025f2e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8025f32:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8025f36:	280f      	cmp	r0, #15
 8025f38:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8025f3c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025f40:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025f44:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8025f48:	d801      	bhi.n	8025f4e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 8025f4a:	2f0f      	cmp	r7, #15
 8025f4c:	d91b      	bls.n	8025f86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 8025f4e:	4b8d      	ldr	r3, [pc, #564]	; (8026184 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 8025f50:	4a8d      	ldr	r2, [pc, #564]	; (8026188 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 8025f52:	488e      	ldr	r0, [pc, #568]	; (802618c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8025f54:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8025f58:	f007 ffb2 	bl	802dec0 <__assert_func>
 8025f5c:	2200      	movs	r2, #0
 8025f5e:	e7ca      	b.n	8025ef6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 8025f60:	2600      	movs	r6, #0
 8025f62:	4632      	mov	r2, r6
 8025f64:	e7d0      	b.n	8025f08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8025f66:	2600      	movs	r6, #0
 8025f68:	e7ce      	b.n	8025f08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8025f6a:	4606      	mov	r6, r0
 8025f6c:	e7cc      	b.n	8025f08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8025f6e:	2400      	movs	r4, #0
 8025f70:	e7d7      	b.n	8025f22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 8025f72:	2300      	movs	r3, #0
 8025f74:	461c      	mov	r4, r3
 8025f76:	e7de      	b.n	8025f36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025f78:	463b      	mov	r3, r7
 8025f7a:	463c      	mov	r4, r7
 8025f7c:	e7db      	b.n	8025f36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025f7e:	2300      	movs	r3, #0
 8025f80:	e7d9      	b.n	8025f36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025f82:	4603      	mov	r3, r0
 8025f84:	e7d7      	b.n	8025f36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025f86:	b280      	uxth	r0, r0
 8025f88:	b2bf      	uxth	r7, r7
 8025f8a:	fb07 fe00 	mul.w	lr, r7, r0
 8025f8e:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8025f92:	0100      	lsls	r0, r0, #4
 8025f94:	eba0 0c0e 	sub.w	ip, r0, lr
 8025f98:	b2bf      	uxth	r7, r7
 8025f9a:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8025f9e:	fa1f fc8c 	uxth.w	ip, ip
 8025fa2:	1bed      	subs	r5, r5, r7
 8025fa4:	b2ad      	uxth	r5, r5
 8025fa6:	fb0a f00c 	mul.w	r0, sl, ip
 8025faa:	fb0b 0005 	mla	r0, fp, r5, r0
 8025fae:	fb07 0009 	mla	r0, r7, r9, r0
 8025fb2:	fb0e 0008 	mla	r0, lr, r8, r0
 8025fb6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025fba:	9001      	str	r0, [sp, #4]
 8025fbc:	2800      	cmp	r0, #0
 8025fbe:	f000 80de 	beq.w	802617e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 8025fc2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8025fc6:	d018      	beq.n	8025ffa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 8025fc8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8025fcc:	fb0b f000 	mul.w	r0, fp, r0
 8025fd0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025fd4:	fb0b fb02 	mul.w	fp, fp, r2
 8025fd8:	0a02      	lsrs	r2, r0, #8
 8025fda:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025fde:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8025fe2:	4402      	add	r2, r0
 8025fe4:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8025fe8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8025fec:	0a12      	lsrs	r2, r2, #8
 8025fee:	0a00      	lsrs	r0, r0, #8
 8025ff0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025ff4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025ff8:	4302      	orrs	r2, r0
 8025ffa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8025ffe:	d01a      	beq.n	8026036 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 8026000:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8026004:	fb0a f000 	mul.w	r0, sl, r0
 8026008:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802600c:	fb0a fa06 	mul.w	sl, sl, r6
 8026010:	0a06      	lsrs	r6, r0, #8
 8026012:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026016:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802601a:	4406      	add	r6, r0
 802601c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026020:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8026024:	0a36      	lsrs	r6, r6, #8
 8026026:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802602a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802602e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026032:	ea46 060a 	orr.w	r6, r6, sl
 8026036:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802603a:	d01b      	beq.n	8026074 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 802603c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8026040:	fb09 fa0a 	mul.w	sl, r9, sl
 8026044:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026048:	fb09 f004 	mul.w	r0, r9, r4
 802604c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8026050:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026054:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026058:	f500 7980 	add.w	r9, r0, #256	; 0x100
 802605c:	4454      	add	r4, sl
 802605e:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8026062:	0a24      	lsrs	r4, r4, #8
 8026064:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026068:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802606c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026070:	ea44 0409 	orr.w	r4, r4, r9
 8026074:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026078:	d01b      	beq.n	80260b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 802607a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802607e:	fb08 f909 	mul.w	r9, r8, r9
 8026082:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026086:	fb08 f003 	mul.w	r0, r8, r3
 802608a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802608e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026092:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8026096:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802609a:	444b      	add	r3, r9
 802609c:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80260a0:	0a1b      	lsrs	r3, r3, #8
 80260a2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80260a6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80260aa:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80260ae:	ea43 0308 	orr.w	r3, r3, r8
 80260b2:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80260b6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80260ba:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 80260be:	fb0c f808 	mul.w	r8, ip, r8
 80260c2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80260c6:	fb0c f606 	mul.w	r6, ip, r6
 80260ca:	fb05 8909 	mla	r9, r5, r9, r8
 80260ce:	fb05 6502 	mla	r5, r5, r2, r6
 80260d2:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 80260d6:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 80260da:	9a01      	ldr	r2, [sp, #4]
 80260dc:	8808      	ldrh	r0, [r1, #0]
 80260de:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80260e2:	fb07 9908 	mla	r9, r7, r8, r9
 80260e6:	fb07 5704 	mla	r7, r7, r4, r5
 80260ea:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80260ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80260f2:	b2b6      	uxth	r6, r6
 80260f4:	fb0e 9808 	mla	r8, lr, r8, r9
 80260f8:	fb0e 7e03 	mla	lr, lr, r3, r7
 80260fc:	4372      	muls	r2, r6
 80260fe:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026102:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026106:	1c53      	adds	r3, r2, #1
 8026108:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802610c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026110:	ea48 0e0e 	orr.w	lr, r8, lr
 8026114:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026118:	1205      	asrs	r5, r0, #8
 802611a:	ea4f 421e 	mov.w	r2, lr, lsr #16
 802611e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8026122:	b2db      	uxtb	r3, r3
 8026124:	fb12 f206 	smulbb	r2, r2, r6
 8026128:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802612c:	fb05 2503 	mla	r5, r5, r3, r2
 8026130:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8026134:	10c2      	asrs	r2, r0, #3
 8026136:	fa5f fe8e 	uxtb.w	lr, lr
 802613a:	00c0      	lsls	r0, r0, #3
 802613c:	fb14 f406 	smulbb	r4, r4, r6
 8026140:	b2c0      	uxtb	r0, r0
 8026142:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026146:	fb1e fe06 	smulbb	lr, lr, r6
 802614a:	fb02 4203 	mla	r2, r2, r3, r4
 802614e:	b2ad      	uxth	r5, r5
 8026150:	fb00 e303 	mla	r3, r0, r3, lr
 8026154:	b298      	uxth	r0, r3
 8026156:	b294      	uxth	r4, r2
 8026158:	1c6b      	adds	r3, r5, #1
 802615a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802615e:	1c62      	adds	r2, r4, #1
 8026160:	1c43      	adds	r3, r0, #1
 8026162:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026166:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802616a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802616e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026172:	0952      	lsrs	r2, r2, #5
 8026174:	432b      	orrs	r3, r5
 8026176:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802617a:	4313      	orrs	r3, r2
 802617c:	800b      	strh	r3, [r1, #0]
 802617e:	b003      	add	sp, #12
 8026180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026184:	08032be1 	.word	0x08032be1
 8026188:	080331ae 	.word	0x080331ae
 802618c:	08032c65 	.word	0x08032c65

08026190 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026194:	ed2d 8b08 	vpush	{d8-d11}
 8026198:	b09f      	sub	sp, #124	; 0x7c
 802619a:	eeb0 aa40 	vmov.f32	s20, s0
 802619e:	921b      	str	r2, [sp, #108]	; 0x6c
 80261a0:	9309      	str	r3, [sp, #36]	; 0x24
 80261a2:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80261a4:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80261a8:	931c      	str	r3, [sp, #112]	; 0x70
 80261aa:	9119      	str	r1, [sp, #100]	; 0x64
 80261ac:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80261b0:	901d      	str	r0, [sp, #116]	; 0x74
 80261b2:	6850      	ldr	r0, [r2, #4]
 80261b4:	6812      	ldr	r2, [r2, #0]
 80261b6:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 80261b8:	fb00 1303 	mla	r3, r0, r3, r1
 80261bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80261c0:	930c      	str	r3, [sp, #48]	; 0x30
 80261c2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80261c4:	681b      	ldr	r3, [r3, #0]
 80261c6:	9312      	str	r3, [sp, #72]	; 0x48
 80261c8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80261ca:	685e      	ldr	r6, [r3, #4]
 80261cc:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80261d0:	930d      	str	r3, [sp, #52]	; 0x34
 80261d2:	eef0 9a60 	vmov.f32	s19, s1
 80261d6:	eeb0 9a41 	vmov.f32	s18, s2
 80261da:	eeb0 8a62 	vmov.f32	s16, s5
 80261de:	eef0 8a43 	vmov.f32	s17, s6
 80261e2:	eef0 ba44 	vmov.f32	s23, s8
 80261e6:	eeb0 ba64 	vmov.f32	s22, s9
 80261ea:	eef0 aa45 	vmov.f32	s21, s10
 80261ee:	3604      	adds	r6, #4
 80261f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80261f2:	2b00      	cmp	r3, #0
 80261f4:	dc03      	bgt.n	80261fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80261f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80261f8:	2b00      	cmp	r3, #0
 80261fa:	f340 8388 	ble.w	802690e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 80261fe:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8026200:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026204:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026208:	1e48      	subs	r0, r1, #1
 802620a:	1e57      	subs	r7, r2, #1
 802620c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802620e:	2b00      	cmp	r3, #0
 8026210:	f340 8195 	ble.w	802653e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026214:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8026216:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802621a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802621e:	d406      	bmi.n	802622e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8026220:	4584      	cmp	ip, r0
 8026222:	da04      	bge.n	802622e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8026224:	2b00      	cmp	r3, #0
 8026226:	db02      	blt.n	802622e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8026228:	42bb      	cmp	r3, r7
 802622a:	f2c0 8189 	blt.w	8026540 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 802622e:	f11c 0c01 	adds.w	ip, ip, #1
 8026232:	f100 8177 	bmi.w	8026524 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026236:	4561      	cmp	r1, ip
 8026238:	f2c0 8174 	blt.w	8026524 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802623c:	3301      	adds	r3, #1
 802623e:	f100 8171 	bmi.w	8026524 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026242:	429a      	cmp	r2, r3
 8026244:	f2c0 816e 	blt.w	8026524 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802624a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802624c:	931a      	str	r3, [sp, #104]	; 0x68
 802624e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8026250:	2b00      	cmp	r3, #0
 8026252:	f340 8193 	ble.w	802657c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8026256:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8026258:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802625c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802625e:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8026262:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8026264:	141b      	asrs	r3, r3, #16
 8026266:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802626a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802626e:	f100 81d6 	bmi.w	802661e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8026272:	f100 38ff 	add.w	r8, r0, #4294967295
 8026276:	4543      	cmp	r3, r8
 8026278:	f280 81d1 	bge.w	802661e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802627c:	f1bc 0f00 	cmp.w	ip, #0
 8026280:	f2c0 81cd 	blt.w	802661e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8026284:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026288:	45c4      	cmp	ip, r8
 802628a:	f280 81c8 	bge.w	802661e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802628e:	b200      	sxth	r0, r0
 8026290:	fb0c 3300 	mla	r3, ip, r0, r3
 8026294:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026296:	eb04 0803 	add.w	r8, r4, r3
 802629a:	5ce3      	ldrb	r3, [r4, r3]
 802629c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80262a0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80262a4:	2a00      	cmp	r2, #0
 80262a6:	f000 81af 	beq.w	8026608 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 80262aa:	f898 c001 	ldrb.w	ip, [r8, #1]
 80262ae:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80262b2:	940e      	str	r4, [sp, #56]	; 0x38
 80262b4:	0e24      	lsrs	r4, r4, #24
 80262b6:	9415      	str	r4, [sp, #84]	; 0x54
 80262b8:	b179      	cbz	r1, 80262da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80262ba:	eb08 0c00 	add.w	ip, r8, r0
 80262be:	f818 0000 	ldrb.w	r0, [r8, r0]
 80262c2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80262c6:	900a      	str	r0, [sp, #40]	; 0x28
 80262c8:	0e00      	lsrs	r0, r0, #24
 80262ca:	9013      	str	r0, [sp, #76]	; 0x4c
 80262cc:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80262d0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80262d4:	900f      	str	r0, [sp, #60]	; 0x3c
 80262d6:	0e00      	lsrs	r0, r0, #24
 80262d8:	9016      	str	r0, [sp, #88]	; 0x58
 80262da:	b292      	uxth	r2, r2
 80262dc:	b289      	uxth	r1, r1
 80262de:	fb02 f901 	mul.w	r9, r2, r1
 80262e2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80262e6:	0112      	lsls	r2, r2, #4
 80262e8:	eba2 0809 	sub.w	r8, r2, r9
 80262ec:	b289      	uxth	r1, r1
 80262ee:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80262f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80262f4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80262f6:	fa1f f888 	uxth.w	r8, r8
 80262fa:	1a52      	subs	r2, r2, r1
 80262fc:	b292      	uxth	r2, r2
 80262fe:	fb08 f000 	mul.w	r0, r8, r0
 8026302:	fb02 000e 	mla	r0, r2, lr, r0
 8026306:	fb01 0004 	mla	r0, r1, r4, r0
 802630a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802630c:	fb09 0004 	mla	r0, r9, r4, r0
 8026310:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026314:	2800      	cmp	r0, #0
 8026316:	f000 80fa 	beq.w	802650e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802631a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802631e:	d01b      	beq.n	8026358 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8026320:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026324:	fb0e fa0a 	mul.w	sl, lr, sl
 8026328:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802632c:	fb0e fe03 	mul.w	lr, lr, r3
 8026330:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026334:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026338:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802633c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026340:	4453      	add	r3, sl
 8026342:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026346:	0a1b      	lsrs	r3, r3, #8
 8026348:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802634c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026350:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026354:	ea43 030c 	orr.w	r3, r3, ip
 8026358:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802635a:	2cff      	cmp	r4, #255	; 0xff
 802635c:	d021      	beq.n	80263a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802635e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026360:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026364:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026366:	fb04 fb0b 	mul.w	fp, r4, fp
 802636a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802636c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026370:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026372:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026376:	fb04 fa0a 	mul.w	sl, r4, sl
 802637a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802637e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026382:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026386:	44de      	add	lr, fp
 8026388:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802638c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026390:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026394:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026398:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802639c:	ea4e 040a 	orr.w	r4, lr, sl
 80263a0:	940e      	str	r4, [sp, #56]	; 0x38
 80263a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80263a4:	2cff      	cmp	r4, #255	; 0xff
 80263a6:	d021      	beq.n	80263ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 80263a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80263aa:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80263ae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80263b0:	fb04 fb0b 	mul.w	fp, r4, fp
 80263b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80263b6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80263ba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80263bc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80263c0:	fb04 fa0a 	mul.w	sl, r4, sl
 80263c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80263c8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80263cc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80263d0:	44de      	add	lr, fp
 80263d2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80263d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80263da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80263de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80263e2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80263e6:	ea4e 040a 	orr.w	r4, lr, sl
 80263ea:	940a      	str	r4, [sp, #40]	; 0x28
 80263ec:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80263ee:	2cff      	cmp	r4, #255	; 0xff
 80263f0:	d021      	beq.n	8026436 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80263f2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80263f4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80263f8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80263fa:	fb04 fb0b 	mul.w	fp, r4, fp
 80263fe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026400:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026404:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026406:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802640a:	fb04 fa0a 	mul.w	sl, r4, sl
 802640e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026412:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026416:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802641a:	44de      	add	lr, fp
 802641c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026420:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026424:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026428:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802642c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026430:	ea4e 040a 	orr.w	r4, lr, sl
 8026434:	940f      	str	r4, [sp, #60]	; 0x3c
 8026436:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026438:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802643c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802643e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8026442:	fb08 fc0c 	mul.w	ip, r8, ip
 8026446:	fb02 cc0e 	mla	ip, r2, lr, ip
 802644a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802644e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026450:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026454:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026458:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802645a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802645e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8026462:	fb08 f80e 	mul.w	r8, r8, lr
 8026466:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802646a:	fb02 8303 	mla	r3, r2, r3, r8
 802646e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026470:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026472:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026476:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026478:	fb01 330a 	mla	r3, r1, sl, r3
 802647c:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8026480:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026482:	fb09 3901 	mla	r9, r9, r1, r3
 8026486:	4342      	muls	r2, r0
 8026488:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802648c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026490:	883b      	ldrh	r3, [r7, #0]
 8026492:	1c50      	adds	r0, r2, #1
 8026494:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026498:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802649c:	ea4c 0c09 	orr.w	ip, ip, r9
 80264a0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80264a4:	1219      	asrs	r1, r3, #8
 80264a6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80264aa:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80264ae:	b2c0      	uxtb	r0, r0
 80264b0:	fb12 f204 	smulbb	r2, r2, r4
 80264b4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80264b8:	fb01 2100 	mla	r1, r1, r0, r2
 80264bc:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80264c0:	10da      	asrs	r2, r3, #3
 80264c2:	fa5f fc8c 	uxtb.w	ip, ip
 80264c6:	00db      	lsls	r3, r3, #3
 80264c8:	fb1c fc04 	smulbb	ip, ip, r4
 80264cc:	b2db      	uxtb	r3, r3
 80264ce:	b289      	uxth	r1, r1
 80264d0:	fb03 c300 	mla	r3, r3, r0, ip
 80264d4:	fa1f fc83 	uxth.w	ip, r3
 80264d8:	1c4b      	adds	r3, r1, #1
 80264da:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80264de:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80264e2:	fb1e fe04 	smulbb	lr, lr, r4
 80264e6:	f10c 0301 	add.w	r3, ip, #1
 80264ea:	fb02 e200 	mla	r2, r2, r0, lr
 80264ee:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80264f2:	b292      	uxth	r2, r2
 80264f4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80264f8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80264fc:	430b      	orrs	r3, r1
 80264fe:	1c51      	adds	r1, r2, #1
 8026500:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026504:	0952      	lsrs	r2, r2, #5
 8026506:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802650a:	4313      	orrs	r3, r2
 802650c:	803b      	strh	r3, [r7, #0]
 802650e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8026510:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8026512:	441a      	add	r2, r3
 8026514:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026516:	9231      	str	r2, [sp, #196]	; 0xc4
 8026518:	441d      	add	r5, r3
 802651a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802651c:	3b01      	subs	r3, #1
 802651e:	3702      	adds	r7, #2
 8026520:	931a      	str	r3, [sp, #104]	; 0x68
 8026522:	e694      	b.n	802624e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8026524:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8026526:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8026528:	441c      	add	r4, r3
 802652a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802652c:	9431      	str	r4, [sp, #196]	; 0xc4
 802652e:	441d      	add	r5, r3
 8026530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026532:	3b01      	subs	r3, #1
 8026534:	9309      	str	r3, [sp, #36]	; 0x24
 8026536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026538:	3302      	adds	r3, #2
 802653a:	930c      	str	r3, [sp, #48]	; 0x30
 802653c:	e666      	b.n	802620c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802653e:	d024      	beq.n	802658a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fa>
 8026540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026542:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8026544:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8026546:	3b01      	subs	r3, #1
 8026548:	fb00 4003 	mla	r0, r0, r3, r4
 802654c:	1400      	asrs	r0, r0, #16
 802654e:	f53f ae7b 	bmi.w	8026248 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8026552:	3901      	subs	r1, #1
 8026554:	4288      	cmp	r0, r1
 8026556:	f6bf ae77 	bge.w	8026248 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802655a:	9934      	ldr	r1, [sp, #208]	; 0xd0
 802655c:	fb01 5303 	mla	r3, r1, r3, r5
 8026560:	141b      	asrs	r3, r3, #16
 8026562:	f53f ae71 	bmi.w	8026248 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8026566:	3a01      	subs	r2, #1
 8026568:	4293      	cmp	r3, r2
 802656a:	f6bf ae6d 	bge.w	8026248 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802656e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8026572:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8026576:	f1bb 0f00 	cmp.w	fp, #0
 802657a:	dc70      	bgt.n	802665e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 802657c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802657e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026584:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026588:	930c      	str	r3, [sp, #48]	; 0x30
 802658a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802658c:	2b00      	cmp	r3, #0
 802658e:	f340 81be 	ble.w	802690e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 8026592:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802659a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802659e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80265a0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80265a4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80265a8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80265ac:	eef0 6a48 	vmov.f32	s13, s16
 80265b0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80265b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80265b8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80265bc:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 80265c0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80265c4:	eef0 6a68 	vmov.f32	s13, s17
 80265c8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80265cc:	ee18 2a10 	vmov	r2, s16
 80265d0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80265d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80265d8:	ee18 2a90 	vmov	r2, s17
 80265dc:	9333      	str	r3, [sp, #204]	; 0xcc
 80265de:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80265e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80265e4:	9334      	str	r3, [sp, #208]	; 0xd0
 80265e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80265e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80265ea:	3b01      	subs	r3, #1
 80265ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80265f0:	9319      	str	r3, [sp, #100]	; 0x64
 80265f2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80265f4:	bf08      	it	eq
 80265f6:	4613      	moveq	r3, r2
 80265f8:	ee16 5a90 	vmov	r5, s13
 80265fc:	9309      	str	r3, [sp, #36]	; 0x24
 80265fe:	eef0 8a67 	vmov.f32	s17, s15
 8026602:	eeb0 8a47 	vmov.f32	s16, s14
 8026606:	e5f3      	b.n	80261f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8026608:	2900      	cmp	r1, #0
 802660a:	f43f ae66 	beq.w	80262da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802660e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8026612:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026616:	900a      	str	r0, [sp, #40]	; 0x28
 8026618:	0e00      	lsrs	r0, r0, #24
 802661a:	9013      	str	r0, [sp, #76]	; 0x4c
 802661c:	e65d      	b.n	80262da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802661e:	f113 0801 	adds.w	r8, r3, #1
 8026622:	f53f af74 	bmi.w	802650e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026626:	4540      	cmp	r0, r8
 8026628:	f6ff af71 	blt.w	802650e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802662c:	f11c 0801 	adds.w	r8, ip, #1
 8026630:	f53f af6d 	bmi.w	802650e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026634:	45c6      	cmp	lr, r8
 8026636:	f6ff af6a 	blt.w	802650e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802663a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802663c:	9302      	str	r3, [sp, #8]
 802663e:	b200      	sxth	r0, r0
 8026640:	fa0f f38e 	sxth.w	r3, lr
 8026644:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8026648:	e9cd c203 	strd	ip, r2, [sp, #12]
 802664c:	9301      	str	r3, [sp, #4]
 802664e:	9000      	str	r0, [sp, #0]
 8026650:	4633      	mov	r3, r6
 8026652:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026654:	981d      	ldr	r0, [sp, #116]	; 0x74
 8026656:	4639      	mov	r1, r7
 8026658:	f7ff fc32 	bl	8025ec0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 802665c:	e757      	b.n	802650e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802665e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8026660:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8026662:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026666:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8026668:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802666c:	1427      	asrs	r7, r4, #16
 802666e:	142b      	asrs	r3, r5, #16
 8026670:	fb01 7303 	mla	r3, r1, r3, r7
 8026674:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026676:	18e7      	adds	r7, r4, r3
 8026678:	5ce3      	ldrb	r3, [r4, r3]
 802667a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802667e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026682:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026686:	2a00      	cmp	r2, #0
 8026688:	f000 8137 	beq.w	80268fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76a>
 802668c:	f897 e001 	ldrb.w	lr, [r7, #1]
 8026690:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8026694:	9410      	str	r4, [sp, #64]	; 0x40
 8026696:	0e24      	lsrs	r4, r4, #24
 8026698:	9417      	str	r4, [sp, #92]	; 0x5c
 802669a:	b170      	cbz	r0, 80266ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 802669c:	eb07 0e01 	add.w	lr, r7, r1
 80266a0:	5c79      	ldrb	r1, [r7, r1]
 80266a2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80266a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80266a8:	0e09      	lsrs	r1, r1, #24
 80266aa:	9114      	str	r1, [sp, #80]	; 0x50
 80266ac:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80266b0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80266b4:	9111      	str	r1, [sp, #68]	; 0x44
 80266b6:	0e09      	lsrs	r1, r1, #24
 80266b8:	9118      	str	r1, [sp, #96]	; 0x60
 80266ba:	b292      	uxth	r2, r2
 80266bc:	b280      	uxth	r0, r0
 80266be:	fb02 f800 	mul.w	r8, r2, r0
 80266c2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80266c6:	0112      	lsls	r2, r2, #4
 80266c8:	eba2 0e08 	sub.w	lr, r2, r8
 80266cc:	b280      	uxth	r0, r0
 80266ce:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80266d2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80266d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80266d6:	fa1f fe8e 	uxth.w	lr, lr
 80266da:	1a12      	subs	r2, r2, r0
 80266dc:	b292      	uxth	r2, r2
 80266de:	fb0e f101 	mul.w	r1, lr, r1
 80266e2:	fb02 110c 	mla	r1, r2, ip, r1
 80266e6:	fb00 1104 	mla	r1, r0, r4, r1
 80266ea:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80266ec:	fb08 1104 	mla	r1, r8, r4, r1
 80266f0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80266f4:	2900      	cmp	r1, #0
 80266f6:	f000 80f5 	beq.w	80268e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 80266fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80266fe:	d019      	beq.n	8026734 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8026700:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026704:	fb0c fa0a 	mul.w	sl, ip, sl
 8026708:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802670c:	fb0c fc03 	mul.w	ip, ip, r3
 8026710:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026714:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026718:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802671c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8026720:	4453      	add	r3, sl
 8026722:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026726:	0a1b      	lsrs	r3, r3, #8
 8026728:	0a3f      	lsrs	r7, r7, #8
 802672a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802672e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026732:	433b      	orrs	r3, r7
 8026734:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026736:	2cff      	cmp	r4, #255	; 0xff
 8026738:	d020      	beq.n	802677c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 802673a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802673c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026740:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026742:	4367      	muls	r7, r4
 8026744:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026746:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802674a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802674c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026750:	fb04 fa0a 	mul.w	sl, r4, sl
 8026754:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026758:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802675c:	44bc      	add	ip, r7
 802675e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026762:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026766:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802676a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802676e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026772:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026776:	ea4c 040a 	orr.w	r4, ip, sl
 802677a:	9410      	str	r4, [sp, #64]	; 0x40
 802677c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802677e:	2cff      	cmp	r4, #255	; 0xff
 8026780:	d020      	beq.n	80267c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8026782:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026784:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026788:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802678a:	4367      	muls	r7, r4
 802678c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802678e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026792:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026794:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026798:	fb04 fa0a 	mul.w	sl, r4, sl
 802679c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80267a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80267a4:	44bc      	add	ip, r7
 80267a6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80267aa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80267ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80267b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80267b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80267ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80267be:	ea4c 040a 	orr.w	r4, ip, sl
 80267c2:	940b      	str	r4, [sp, #44]	; 0x2c
 80267c4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80267c6:	2cff      	cmp	r4, #255	; 0xff
 80267c8:	d020      	beq.n	802680c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67c>
 80267ca:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80267cc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80267d0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80267d2:	4367      	muls	r7, r4
 80267d4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80267d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80267da:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80267dc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80267e0:	fb04 fa0a 	mul.w	sl, r4, sl
 80267e4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80267e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80267ec:	44bc      	add	ip, r7
 80267ee:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80267f2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80267f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80267fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80267fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026802:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026806:	ea4c 040a 	orr.w	r4, ip, sl
 802680a:	9411      	str	r4, [sp, #68]	; 0x44
 802680c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802680e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026812:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026814:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026818:	fb0e f707 	mul.w	r7, lr, r7
 802681c:	fb02 770c 	mla	r7, r2, ip, r7
 8026820:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026824:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026826:	fb00 770c 	mla	r7, r0, ip, r7
 802682a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802682e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026830:	fb08 770c 	mla	r7, r8, ip, r7
 8026834:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8026838:	fb0e fe0c 	mul.w	lr, lr, ip
 802683c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026840:	fb02 e303 	mla	r3, r2, r3, lr
 8026844:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026846:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026848:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802684c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802684e:	fb00 330a 	mla	r3, r0, sl, r3
 8026852:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8026856:	fb08 3c0c 	mla	ip, r8, ip, r3
 802685a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802685c:	f8b9 0000 	ldrh.w	r0, [r9]
 8026860:	434b      	muls	r3, r1
 8026862:	0a3f      	lsrs	r7, r7, #8
 8026864:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026868:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802686c:	1c59      	adds	r1, r3, #1
 802686e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026872:	ea47 070c 	orr.w	r7, r7, ip
 8026876:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802687a:	1202      	asrs	r2, r0, #8
 802687c:	0c3b      	lsrs	r3, r7, #16
 802687e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026882:	b2c9      	uxtb	r1, r1
 8026884:	fb13 f304 	smulbb	r3, r3, r4
 8026888:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802688c:	fb02 3201 	mla	r2, r2, r1, r3
 8026890:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8026894:	10c3      	asrs	r3, r0, #3
 8026896:	b2ff      	uxtb	r7, r7
 8026898:	00c0      	lsls	r0, r0, #3
 802689a:	b292      	uxth	r2, r2
 802689c:	fb1c fc04 	smulbb	ip, ip, r4
 80268a0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80268a4:	b2c0      	uxtb	r0, r0
 80268a6:	fb17 f704 	smulbb	r7, r7, r4
 80268aa:	fb03 c301 	mla	r3, r3, r1, ip
 80268ae:	fb00 7001 	mla	r0, r0, r1, r7
 80268b2:	f102 0c01 	add.w	ip, r2, #1
 80268b6:	b280      	uxth	r0, r0
 80268b8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80268bc:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 80268c0:	1c42      	adds	r2, r0, #1
 80268c2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80268c6:	b29b      	uxth	r3, r3
 80268c8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80268cc:	ea42 020c 	orr.w	r2, r2, ip
 80268d0:	f103 0c01 	add.w	ip, r3, #1
 80268d4:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80268d8:	095b      	lsrs	r3, r3, #5
 80268da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80268de:	431a      	orrs	r2, r3
 80268e0:	f8a9 2000 	strh.w	r2, [r9]
 80268e4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80268e6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80268e8:	441a      	add	r2, r3
 80268ea:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80268ec:	9231      	str	r2, [sp, #196]	; 0xc4
 80268ee:	f109 0902 	add.w	r9, r9, #2
 80268f2:	441d      	add	r5, r3
 80268f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80268f8:	e63d      	b.n	8026576 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80268fa:	2800      	cmp	r0, #0
 80268fc:	f43f aedd 	beq.w	80266ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 8026900:	5c79      	ldrb	r1, [r7, r1]
 8026902:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026906:	910b      	str	r1, [sp, #44]	; 0x2c
 8026908:	0e09      	lsrs	r1, r1, #24
 802690a:	9114      	str	r1, [sp, #80]	; 0x50
 802690c:	e6d5      	b.n	80266ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 802690e:	b01f      	add	sp, #124	; 0x7c
 8026910:	ecbd 8b08 	vpop	{d8-d11}
 8026914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026918 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8026918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802691c:	880e      	ldrh	r6, [r1, #0]
 802691e:	b085      	sub	sp, #20
 8026920:	ea4f 2826 	mov.w	r8, r6, asr #8
 8026924:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8026928:	4691      	mov	r9, r2
 802692a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 802692e:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 8026932:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8026936:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 802693a:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 802693e:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8026942:	9200      	str	r2, [sp, #0]
 8026944:	00f6      	lsls	r6, r6, #3
 8026946:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 802694a:	9201      	str	r2, [sp, #4]
 802694c:	2c00      	cmp	r4, #0
 802694e:	b2f2      	uxtb	r2, r6
 8026950:	fb04 560c 	mla	r6, r4, ip, r5
 8026954:	9202      	str	r2, [sp, #8]
 8026956:	eb09 0806 	add.w	r8, r9, r6
 802695a:	db3f      	blt.n	80269dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 802695c:	45a6      	cmp	lr, r4
 802695e:	dd3d      	ble.n	80269dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8026960:	2d00      	cmp	r5, #0
 8026962:	db39      	blt.n	80269d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8026964:	45ac      	cmp	ip, r5
 8026966:	dd37      	ble.n	80269d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8026968:	f819 2006 	ldrb.w	r2, [r9, r6]
 802696c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026970:	1c6e      	adds	r6, r5, #1
 8026972:	d436      	bmi.n	80269e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8026974:	45b4      	cmp	ip, r6
 8026976:	dd34      	ble.n	80269e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8026978:	b3a8      	cbz	r0, 80269e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 802697a:	f898 6001 	ldrb.w	r6, [r8, #1]
 802697e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8026982:	3401      	adds	r4, #1
 8026984:	d433      	bmi.n	80269ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8026986:	45a6      	cmp	lr, r4
 8026988:	dd31      	ble.n	80269ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 802698a:	b39f      	cbz	r7, 80269f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 802698c:	2d00      	cmp	r5, #0
 802698e:	eb08 0e0c 	add.w	lr, r8, ip
 8026992:	db2a      	blt.n	80269ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8026994:	45ac      	cmp	ip, r5
 8026996:	dd28      	ble.n	80269ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8026998:	f818 400c 	ldrb.w	r4, [r8, ip]
 802699c:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80269a0:	3501      	adds	r5, #1
 80269a2:	d42a      	bmi.n	80269fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 80269a4:	45ac      	cmp	ip, r5
 80269a6:	dd28      	ble.n	80269fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 80269a8:	b348      	cbz	r0, 80269fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 80269aa:	f89e 5001 	ldrb.w	r5, [lr, #1]
 80269ae:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80269b2:	280f      	cmp	r0, #15
 80269b4:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80269b8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80269bc:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80269c0:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80269c4:	d801      	bhi.n	80269ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 80269c6:	2f0f      	cmp	r7, #15
 80269c8:	d91b      	bls.n	8026a02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 80269ca:	4b7d      	ldr	r3, [pc, #500]	; (8026bc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 80269cc:	4a7d      	ldr	r2, [pc, #500]	; (8026bc4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 80269ce:	487e      	ldr	r0, [pc, #504]	; (8026bc8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 80269d0:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80269d4:	f007 fa74 	bl	802dec0 <__assert_func>
 80269d8:	2200      	movs	r2, #0
 80269da:	e7c9      	b.n	8026970 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 80269dc:	2600      	movs	r6, #0
 80269de:	4632      	mov	r2, r6
 80269e0:	e7cf      	b.n	8026982 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80269e2:	2600      	movs	r6, #0
 80269e4:	e7cd      	b.n	8026982 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80269e6:	4606      	mov	r6, r0
 80269e8:	e7cb      	b.n	8026982 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 80269ea:	2400      	movs	r4, #0
 80269ec:	e7d8      	b.n	80269a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 80269ee:	2300      	movs	r3, #0
 80269f0:	461c      	mov	r4, r3
 80269f2:	e7de      	b.n	80269b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 80269f4:	463b      	mov	r3, r7
 80269f6:	463c      	mov	r4, r7
 80269f8:	e7db      	b.n	80269b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 80269fa:	2300      	movs	r3, #0
 80269fc:	e7d9      	b.n	80269b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 80269fe:	4603      	mov	r3, r0
 8026a00:	e7d7      	b.n	80269b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8026a02:	b280      	uxth	r0, r0
 8026a04:	b2bf      	uxth	r7, r7
 8026a06:	fb00 fe07 	mul.w	lr, r0, r7
 8026a0a:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8026a0e:	0100      	lsls	r0, r0, #4
 8026a10:	eba0 0c0e 	sub.w	ip, r0, lr
 8026a14:	b2bf      	uxth	r7, r7
 8026a16:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8026a1a:	fa1f fc8c 	uxth.w	ip, ip
 8026a1e:	1bed      	subs	r5, r5, r7
 8026a20:	b2ad      	uxth	r5, r5
 8026a22:	fb0c f00a 	mul.w	r0, ip, sl
 8026a26:	fb05 000b 	mla	r0, r5, fp, r0
 8026a2a:	fb07 0009 	mla	r0, r7, r9, r0
 8026a2e:	fb0e 0008 	mla	r0, lr, r8, r0
 8026a32:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026a36:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8026a3a:	9003      	str	r0, [sp, #12]
 8026a3c:	d018      	beq.n	8026a70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x158>
 8026a3e:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026a42:	fb0b f000 	mul.w	r0, fp, r0
 8026a46:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026a4a:	fb0b fb02 	mul.w	fp, fp, r2
 8026a4e:	0a02      	lsrs	r2, r0, #8
 8026a50:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026a54:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026a58:	4402      	add	r2, r0
 8026a5a:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8026a5e:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8026a62:	0a12      	lsrs	r2, r2, #8
 8026a64:	0a00      	lsrs	r0, r0, #8
 8026a66:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026a6a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026a6e:	4302      	orrs	r2, r0
 8026a70:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8026a74:	d019      	beq.n	8026aaa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x192>
 8026a76:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8026a7a:	fb0a fb0b 	mul.w	fp, sl, fp
 8026a7e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026a82:	fb0a fa06 	mul.w	sl, sl, r6
 8026a86:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8026a8a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026a8e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026a92:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026a96:	445e      	add	r6, fp
 8026a98:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026a9c:	0a36      	lsrs	r6, r6, #8
 8026a9e:	0a00      	lsrs	r0, r0, #8
 8026aa0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026aa4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026aa8:	4306      	orrs	r6, r0
 8026aaa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026aae:	d019      	beq.n	8026ae4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1cc>
 8026ab0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8026ab4:	fb09 fa0a 	mul.w	sl, r9, sl
 8026ab8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026abc:	fb09 f904 	mul.w	r9, r9, r4
 8026ac0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8026ac4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026ac8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026acc:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8026ad0:	4454      	add	r4, sl
 8026ad2:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8026ad6:	0a24      	lsrs	r4, r4, #8
 8026ad8:	0a00      	lsrs	r0, r0, #8
 8026ada:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026ade:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026ae2:	4304      	orrs	r4, r0
 8026ae4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026ae8:	d019      	beq.n	8026b1e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x206>
 8026aea:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8026aee:	fb08 f909 	mul.w	r9, r8, r9
 8026af2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026af6:	fb08 f803 	mul.w	r8, r8, r3
 8026afa:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8026afe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026b02:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8026b06:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8026b0a:	444b      	add	r3, r9
 8026b0c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026b10:	0a1b      	lsrs	r3, r3, #8
 8026b12:	0a00      	lsrs	r0, r0, #8
 8026b14:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026b18:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026b1c:	4303      	orrs	r3, r0
 8026b1e:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8026b22:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026b26:	fb0c f808 	mul.w	r8, ip, r8
 8026b2a:	fb05 8800 	mla	r8, r5, r0, r8
 8026b2e:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8026b32:	fb07 8800 	mla	r8, r7, r0, r8
 8026b36:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8026b3a:	fb0e 8000 	mla	r0, lr, r0, r8
 8026b3e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026b42:	fb0c f606 	mul.w	r6, ip, r6
 8026b46:	0a00      	lsrs	r0, r0, #8
 8026b48:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026b4c:	fb05 6202 	mla	r2, r5, r2, r6
 8026b50:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8026b54:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8026b58:	fb07 2700 	mla	r7, r7, r0, r2
 8026b5c:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8026b60:	9b03      	ldr	r3, [sp, #12]
 8026b62:	9d00      	ldr	r5, [sp, #0]
 8026b64:	9a02      	ldr	r2, [sp, #8]
 8026b66:	fb0e 7000 	mla	r0, lr, r0, r7
 8026b6a:	43dc      	mvns	r4, r3
 8026b6c:	9b01      	ldr	r3, [sp, #4]
 8026b6e:	b2e4      	uxtb	r4, r4
 8026b70:	0a00      	lsrs	r0, r0, #8
 8026b72:	4363      	muls	r3, r4
 8026b74:	4365      	muls	r5, r4
 8026b76:	4362      	muls	r2, r4
 8026b78:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026b7c:	ea48 0000 	orr.w	r0, r8, r0
 8026b80:	4614      	mov	r4, r2
 8026b82:	1c5e      	adds	r6, r3, #1
 8026b84:	1c6a      	adds	r2, r5, #1
 8026b86:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 8026b8a:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8026b8e:	0a03      	lsrs	r3, r0, #8
 8026b90:	0c02      	lsrs	r2, r0, #16
 8026b92:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8026b96:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8026b9a:	00db      	lsls	r3, r3, #3
 8026b9c:	0212      	lsls	r2, r2, #8
 8026b9e:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8026ba2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026ba6:	4313      	orrs	r3, r2
 8026ba8:	1c62      	adds	r2, r4, #1
 8026baa:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8026bae:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8026bb2:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8026bb6:	4318      	orrs	r0, r3
 8026bb8:	8008      	strh	r0, [r1, #0]
 8026bba:	b005      	add	sp, #20
 8026bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026bc0:	08032be1 	.word	0x08032be1
 8026bc4:	080331ae 	.word	0x080331ae
 8026bc8:	08032c65 	.word	0x08032c65

08026bcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bd0:	ed2d 8b08 	vpush	{d8-d11}
 8026bd4:	b09b      	sub	sp, #108	; 0x6c
 8026bd6:	eeb0 aa40 	vmov.f32	s20, s0
 8026bda:	9218      	str	r2, [sp, #96]	; 0x60
 8026bdc:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8026bde:	9116      	str	r1, [sp, #88]	; 0x58
 8026be0:	9307      	str	r3, [sp, #28]
 8026be2:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8026be6:	9019      	str	r0, [sp, #100]	; 0x64
 8026be8:	6850      	ldr	r0, [r2, #4]
 8026bea:	6812      	ldr	r2, [r2, #0]
 8026bec:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8026bee:	fb00 1303 	mla	r3, r0, r3, r1
 8026bf2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8026bf8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026bfa:	681b      	ldr	r3, [r3, #0]
 8026bfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8026bfe:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026c00:	685e      	ldr	r6, [r3, #4]
 8026c02:	eef0 9a60 	vmov.f32	s19, s1
 8026c06:	eeb0 9a41 	vmov.f32	s18, s2
 8026c0a:	eeb0 8a62 	vmov.f32	s16, s5
 8026c0e:	eef0 8a43 	vmov.f32	s17, s6
 8026c12:	eef0 ba44 	vmov.f32	s23, s8
 8026c16:	eeb0 ba64 	vmov.f32	s22, s9
 8026c1a:	eef0 aa45 	vmov.f32	s21, s10
 8026c1e:	3604      	adds	r6, #4
 8026c20:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026c22:	2b00      	cmp	r3, #0
 8026c24:	dc03      	bgt.n	8026c2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8026c26:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026c28:	2b00      	cmp	r3, #0
 8026c2a:	f340 8373 	ble.w	8027314 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8026c2e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026c30:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026c34:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026c38:	1e48      	subs	r0, r1, #1
 8026c3a:	1e57      	subs	r7, r2, #1
 8026c3c:	9b07      	ldr	r3, [sp, #28]
 8026c3e:	2b00      	cmp	r3, #0
 8026c40:	f340 8190 	ble.w	8026f64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8026c44:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8026c46:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026c4a:	ea4f 4325 	mov.w	r3, r5, asr #16
 8026c4e:	d406      	bmi.n	8026c5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026c50:	4584      	cmp	ip, r0
 8026c52:	da04      	bge.n	8026c5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026c54:	2b00      	cmp	r3, #0
 8026c56:	db02      	blt.n	8026c5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026c58:	42bb      	cmp	r3, r7
 8026c5a:	f2c0 8184 	blt.w	8026f66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8026c5e:	f11c 0c01 	adds.w	ip, ip, #1
 8026c62:	f100 8172 	bmi.w	8026f4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026c66:	4561      	cmp	r1, ip
 8026c68:	f2c0 816f 	blt.w	8026f4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026c6c:	3301      	adds	r3, #1
 8026c6e:	f100 816c 	bmi.w	8026f4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026c72:	429a      	cmp	r2, r3
 8026c74:	f2c0 8169 	blt.w	8026f4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026c78:	9b07      	ldr	r3, [sp, #28]
 8026c7a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026c7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8026c7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026c80:	2b00      	cmp	r3, #0
 8026c82:	f340 818e 	ble.w	8026fa2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 8026c86:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026c88:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026c8c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026c8e:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8026c92:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026c94:	141b      	asrs	r3, r3, #16
 8026c96:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8026c9a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026c9e:	f100 81d1 	bmi.w	8027044 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8026ca2:	f101 38ff 	add.w	r8, r1, #4294967295
 8026ca6:	4543      	cmp	r3, r8
 8026ca8:	f280 81cc 	bge.w	8027044 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8026cac:	f1bc 0f00 	cmp.w	ip, #0
 8026cb0:	f2c0 81c8 	blt.w	8027044 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8026cb4:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026cb8:	45c4      	cmp	ip, r8
 8026cba:	f280 81c3 	bge.w	8027044 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8026cbe:	b209      	sxth	r1, r1
 8026cc0:	fb0c 3301 	mla	r3, ip, r1, r3
 8026cc4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026cc6:	eb04 0803 	add.w	r8, r4, r3
 8026cca:	5ce3      	ldrb	r3, [r4, r3]
 8026ccc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026cd0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026cd4:	2a00      	cmp	r2, #0
 8026cd6:	f000 81aa 	beq.w	802702e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8026cda:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026cde:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026ce2:	940b      	str	r4, [sp, #44]	; 0x2c
 8026ce4:	0e24      	lsrs	r4, r4, #24
 8026ce6:	9412      	str	r4, [sp, #72]	; 0x48
 8026ce8:	b178      	cbz	r0, 8026d0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8026cea:	eb08 0c01 	add.w	ip, r8, r1
 8026cee:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026cf2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026cf6:	9108      	str	r1, [sp, #32]
 8026cf8:	0e09      	lsrs	r1, r1, #24
 8026cfa:	9110      	str	r1, [sp, #64]	; 0x40
 8026cfc:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8026d00:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026d04:	910c      	str	r1, [sp, #48]	; 0x30
 8026d06:	0e09      	lsrs	r1, r1, #24
 8026d08:	9113      	str	r1, [sp, #76]	; 0x4c
 8026d0a:	b292      	uxth	r2, r2
 8026d0c:	b280      	uxth	r0, r0
 8026d0e:	fb02 f900 	mul.w	r9, r2, r0
 8026d12:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026d16:	0112      	lsls	r2, r2, #4
 8026d18:	eba2 0809 	sub.w	r8, r2, r9
 8026d1c:	b280      	uxth	r0, r0
 8026d1e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026d22:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026d24:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026d26:	fa1f f888 	uxth.w	r8, r8
 8026d2a:	1a12      	subs	r2, r2, r0
 8026d2c:	b292      	uxth	r2, r2
 8026d2e:	fb08 f101 	mul.w	r1, r8, r1
 8026d32:	fb02 110e 	mla	r1, r2, lr, r1
 8026d36:	fb00 1104 	mla	r1, r0, r4, r1
 8026d3a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026d3c:	fb09 1104 	mla	r1, r9, r4, r1
 8026d40:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026d44:	2900      	cmp	r1, #0
 8026d46:	f000 80f5 	beq.w	8026f34 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8026d4a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026d4e:	d01b      	beq.n	8026d88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8026d50:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026d54:	fb0e fa0a 	mul.w	sl, lr, sl
 8026d58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026d5c:	fb0e fe03 	mul.w	lr, lr, r3
 8026d60:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026d64:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026d68:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026d6c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026d70:	4453      	add	r3, sl
 8026d72:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026d76:	0a1b      	lsrs	r3, r3, #8
 8026d78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d7c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026d80:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026d84:	ea43 030c 	orr.w	r3, r3, ip
 8026d88:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026d8a:	2cff      	cmp	r4, #255	; 0xff
 8026d8c:	d021      	beq.n	8026dd2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026d8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026d90:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026d94:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026d96:	fb04 fb0b 	mul.w	fp, r4, fp
 8026d9a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026d9c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026da0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026da2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026da6:	fb04 fa0a 	mul.w	sl, r4, sl
 8026daa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026dae:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026db2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026db6:	44de      	add	lr, fp
 8026db8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026dbc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026dc0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026dc4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026dc8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026dcc:	ea4e 040a 	orr.w	r4, lr, sl
 8026dd0:	940b      	str	r4, [sp, #44]	; 0x2c
 8026dd2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026dd4:	2cff      	cmp	r4, #255	; 0xff
 8026dd6:	d021      	beq.n	8026e1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8026dd8:	9c08      	ldr	r4, [sp, #32]
 8026dda:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026dde:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026de0:	fb04 fb0b 	mul.w	fp, r4, fp
 8026de4:	9c08      	ldr	r4, [sp, #32]
 8026de6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026dea:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026dec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026df0:	fb04 fa0a 	mul.w	sl, r4, sl
 8026df4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026df8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026dfc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026e00:	44de      	add	lr, fp
 8026e02:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026e06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026e0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026e0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026e12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026e16:	ea4e 040a 	orr.w	r4, lr, sl
 8026e1a:	9408      	str	r4, [sp, #32]
 8026e1c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026e1e:	2cff      	cmp	r4, #255	; 0xff
 8026e20:	d021      	beq.n	8026e66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8026e22:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026e24:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026e28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026e2a:	fb04 fb0b 	mul.w	fp, r4, fp
 8026e2e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026e30:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026e34:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026e36:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026e3a:	fb04 fa0a 	mul.w	sl, r4, sl
 8026e3e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026e42:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026e46:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026e4a:	44de      	add	lr, fp
 8026e4c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026e50:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026e54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026e58:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026e5c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026e60:	ea4e 040a 	orr.w	r4, lr, sl
 8026e64:	940c      	str	r4, [sp, #48]	; 0x30
 8026e66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026e68:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026e6c:	9c08      	ldr	r4, [sp, #32]
 8026e6e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8026e72:	fb08 fc0c 	mul.w	ip, r8, ip
 8026e76:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026e7a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026e7e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026e80:	fb00 cc0e 	mla	ip, r0, lr, ip
 8026e84:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026e88:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026e8a:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026e8e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8026e92:	fb08 f80e 	mul.w	r8, r8, lr
 8026e96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026e9a:	fb02 8303 	mla	r3, r2, r3, r8
 8026e9e:	9a08      	ldr	r2, [sp, #32]
 8026ea0:	f8b7 8000 	ldrh.w	r8, [r7]
 8026ea4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026ea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026eaa:	fb00 330a 	mla	r3, r0, sl, r3
 8026eae:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8026eb2:	fb09 3900 	mla	r9, r9, r0, r3
 8026eb6:	43c9      	mvns	r1, r1
 8026eb8:	ea4f 2228 	mov.w	r2, r8, asr #8
 8026ebc:	fa5f fe81 	uxtb.w	lr, r1
 8026ec0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026ec4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026ec8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026ecc:	fb02 f20e 	mul.w	r2, r2, lr
 8026ed0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026ed4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026ed8:	ea4c 0c09 	orr.w	ip, ip, r9
 8026edc:	1c53      	adds	r3, r2, #1
 8026ede:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026ee2:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8026ee6:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8026eea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026eee:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026ef2:	4a63      	ldr	r2, [pc, #396]	; (8027080 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 8026ef4:	fb00 f00e 	mul.w	r0, r0, lr
 8026ef8:	b2db      	uxtb	r3, r3
 8026efa:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8026efe:	1c43      	adds	r3, r0, #1
 8026f00:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026f04:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8026f08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8026f0c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026f10:	b2c9      	uxtb	r1, r1
 8026f12:	00db      	lsls	r3, r3, #3
 8026f14:	fb01 f10e 	mul.w	r1, r1, lr
 8026f18:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026f1c:	4313      	orrs	r3, r2
 8026f1e:	1c4a      	adds	r2, r1, #1
 8026f20:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026f24:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8026f28:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8026f2c:	ea4c 0c03 	orr.w	ip, ip, r3
 8026f30:	f8a7 c000 	strh.w	ip, [r7]
 8026f34:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8026f36:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8026f38:	441a      	add	r2, r3
 8026f3a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026f3c:	922d      	str	r2, [sp, #180]	; 0xb4
 8026f3e:	441d      	add	r5, r3
 8026f40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026f42:	3b01      	subs	r3, #1
 8026f44:	3702      	adds	r7, #2
 8026f46:	9317      	str	r3, [sp, #92]	; 0x5c
 8026f48:	e699      	b.n	8026c7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8026f4a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8026f4c:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8026f4e:	441c      	add	r4, r3
 8026f50:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026f52:	942d      	str	r4, [sp, #180]	; 0xb4
 8026f54:	441d      	add	r5, r3
 8026f56:	9b07      	ldr	r3, [sp, #28]
 8026f58:	3b01      	subs	r3, #1
 8026f5a:	9307      	str	r3, [sp, #28]
 8026f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026f5e:	3302      	adds	r3, #2
 8026f60:	930a      	str	r3, [sp, #40]	; 0x28
 8026f62:	e66b      	b.n	8026c3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8026f64:	d024      	beq.n	8026fb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8026f66:	9b07      	ldr	r3, [sp, #28]
 8026f68:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8026f6a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8026f6c:	3b01      	subs	r3, #1
 8026f6e:	fb00 4003 	mla	r0, r0, r3, r4
 8026f72:	1400      	asrs	r0, r0, #16
 8026f74:	f53f ae80 	bmi.w	8026c78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8026f78:	3901      	subs	r1, #1
 8026f7a:	4288      	cmp	r0, r1
 8026f7c:	f6bf ae7c 	bge.w	8026c78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8026f80:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8026f82:	fb01 5303 	mla	r3, r1, r3, r5
 8026f86:	141b      	asrs	r3, r3, #16
 8026f88:	f53f ae76 	bmi.w	8026c78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8026f8c:	3a01      	subs	r2, #1
 8026f8e:	4293      	cmp	r3, r2
 8026f90:	f6bf ae72 	bge.w	8026c78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8026f94:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026f98:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8026f9c:	f1bb 0f00 	cmp.w	fp, #0
 8026fa0:	dc70      	bgt.n	8027084 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026fa2:	9b07      	ldr	r3, [sp, #28]
 8026fa4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026faa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026fae:	930a      	str	r3, [sp, #40]	; 0x28
 8026fb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026fb2:	2b00      	cmp	r3, #0
 8026fb4:	f340 81ae 	ble.w	8027314 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8026fb8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026fbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026fc0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026fc4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026fc6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026fca:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026fce:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026fd2:	eef0 6a48 	vmov.f32	s13, s16
 8026fd6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026fda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026fde:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026fe2:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8026fe6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026fea:	eef0 6a68 	vmov.f32	s13, s17
 8026fee:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026ff2:	ee18 2a10 	vmov	r2, s16
 8026ff6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026ffa:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ffe:	ee18 2a90 	vmov	r2, s17
 8027002:	932f      	str	r3, [sp, #188]	; 0xbc
 8027004:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027006:	fb92 f3f3 	sdiv	r3, r2, r3
 802700a:	9330      	str	r3, [sp, #192]	; 0xc0
 802700c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802700e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027010:	3b01      	subs	r3, #1
 8027012:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027016:	9316      	str	r3, [sp, #88]	; 0x58
 8027018:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802701a:	bf08      	it	eq
 802701c:	4613      	moveq	r3, r2
 802701e:	ee16 5a90 	vmov	r5, s13
 8027022:	9307      	str	r3, [sp, #28]
 8027024:	eef0 8a67 	vmov.f32	s17, s15
 8027028:	eeb0 8a47 	vmov.f32	s16, s14
 802702c:	e5f8      	b.n	8026c20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802702e:	2800      	cmp	r0, #0
 8027030:	f43f ae6b 	beq.w	8026d0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8027034:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027038:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802703c:	9108      	str	r1, [sp, #32]
 802703e:	0e09      	lsrs	r1, r1, #24
 8027040:	9110      	str	r1, [sp, #64]	; 0x40
 8027042:	e662      	b.n	8026d0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8027044:	f113 0801 	adds.w	r8, r3, #1
 8027048:	f53f af74 	bmi.w	8026f34 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802704c:	4541      	cmp	r1, r8
 802704e:	f6ff af71 	blt.w	8026f34 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8027052:	f11c 0801 	adds.w	r8, ip, #1
 8027056:	f53f af6d 	bmi.w	8026f34 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802705a:	45c6      	cmp	lr, r8
 802705c:	f6ff af6a 	blt.w	8026f34 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8027060:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8027064:	b209      	sxth	r1, r1
 8027066:	fa0f f38e 	sxth.w	r3, lr
 802706a:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802706e:	9301      	str	r3, [sp, #4]
 8027070:	9100      	str	r1, [sp, #0]
 8027072:	4633      	mov	r3, r6
 8027074:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027076:	9819      	ldr	r0, [sp, #100]	; 0x64
 8027078:	4639      	mov	r1, r7
 802707a:	f7ff fc4d 	bl	8026918 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 802707e:	e759      	b.n	8026f34 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8027080:	fffff800 	.word	0xfffff800
 8027084:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8027086:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8027088:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802708c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802708e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027092:	1427      	asrs	r7, r4, #16
 8027094:	142b      	asrs	r3, r5, #16
 8027096:	fb01 7303 	mla	r3, r1, r3, r7
 802709a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802709c:	18e7      	adds	r7, r4, r3
 802709e:	5ce3      	ldrb	r3, [r4, r3]
 80270a0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80270a4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80270a8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80270ac:	2a00      	cmp	r2, #0
 80270ae:	f000 8127 	beq.w	8027300 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 80270b2:	f897 e001 	ldrb.w	lr, [r7, #1]
 80270b6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80270ba:	940d      	str	r4, [sp, #52]	; 0x34
 80270bc:	0e24      	lsrs	r4, r4, #24
 80270be:	9414      	str	r4, [sp, #80]	; 0x50
 80270c0:	b170      	cbz	r0, 80270e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 80270c2:	eb07 0e01 	add.w	lr, r7, r1
 80270c6:	5c79      	ldrb	r1, [r7, r1]
 80270c8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80270cc:	9109      	str	r1, [sp, #36]	; 0x24
 80270ce:	0e09      	lsrs	r1, r1, #24
 80270d0:	9111      	str	r1, [sp, #68]	; 0x44
 80270d2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80270d6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80270da:	910e      	str	r1, [sp, #56]	; 0x38
 80270dc:	0e09      	lsrs	r1, r1, #24
 80270de:	9115      	str	r1, [sp, #84]	; 0x54
 80270e0:	b292      	uxth	r2, r2
 80270e2:	b280      	uxth	r0, r0
 80270e4:	fb02 f800 	mul.w	r8, r2, r0
 80270e8:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80270ec:	0112      	lsls	r2, r2, #4
 80270ee:	eba2 0e08 	sub.w	lr, r2, r8
 80270f2:	b280      	uxth	r0, r0
 80270f4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80270f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80270fa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80270fc:	fa1f fe8e 	uxth.w	lr, lr
 8027100:	1a09      	subs	r1, r1, r0
 8027102:	b289      	uxth	r1, r1
 8027104:	fb0e f202 	mul.w	r2, lr, r2
 8027108:	fb01 220c 	mla	r2, r1, ip, r2
 802710c:	fb00 2204 	mla	r2, r0, r4, r2
 8027110:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027112:	fb08 2204 	mla	r2, r8, r4, r2
 8027116:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802711a:	2a00      	cmp	r2, #0
 802711c:	f000 80e5 	beq.w	80272ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8027120:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027124:	d019      	beq.n	802715a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 8027126:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802712a:	fb0c fa0a 	mul.w	sl, ip, sl
 802712e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027132:	fb0c fc03 	mul.w	ip, ip, r3
 8027136:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802713a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802713e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027142:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8027146:	4453      	add	r3, sl
 8027148:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802714c:	0a1b      	lsrs	r3, r3, #8
 802714e:	0a3f      	lsrs	r7, r7, #8
 8027150:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027154:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027158:	433b      	orrs	r3, r7
 802715a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802715c:	2cff      	cmp	r4, #255	; 0xff
 802715e:	d020      	beq.n	80271a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 8027160:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027162:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8027166:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8027168:	4367      	muls	r7, r4
 802716a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802716c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027170:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8027172:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027176:	fb04 fa0a 	mul.w	sl, r4, sl
 802717a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802717e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027182:	44bc      	add	ip, r7
 8027184:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027188:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802718c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027190:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027194:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027198:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802719c:	ea4c 040a 	orr.w	r4, ip, sl
 80271a0:	940d      	str	r4, [sp, #52]	; 0x34
 80271a2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80271a4:	2cff      	cmp	r4, #255	; 0xff
 80271a6:	d020      	beq.n	80271ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 80271a8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80271aa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80271ae:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80271b0:	4367      	muls	r7, r4
 80271b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80271b4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80271b8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80271ba:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80271be:	fb04 fa0a 	mul.w	sl, r4, sl
 80271c2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80271c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80271ca:	44bc      	add	ip, r7
 80271cc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80271d0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80271d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80271d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80271dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80271e0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80271e4:	ea4c 040a 	orr.w	r4, ip, sl
 80271e8:	9409      	str	r4, [sp, #36]	; 0x24
 80271ea:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80271ec:	2cff      	cmp	r4, #255	; 0xff
 80271ee:	d020      	beq.n	8027232 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 80271f0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80271f2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80271f6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80271f8:	4367      	muls	r7, r4
 80271fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80271fc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027200:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027202:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027206:	fb04 fa0a 	mul.w	sl, r4, sl
 802720a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802720e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027212:	44bc      	add	ip, r7
 8027214:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027218:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802721c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027220:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027224:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027228:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802722c:	ea4c 040a 	orr.w	r4, ip, sl
 8027230:	940e      	str	r4, [sp, #56]	; 0x38
 8027232:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027234:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8027238:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802723a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802723e:	fb0e f707 	mul.w	r7, lr, r7
 8027242:	fb01 770c 	mla	r7, r1, ip, r7
 8027246:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802724a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802724c:	fb00 770c 	mla	r7, r0, ip, r7
 8027250:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027254:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027256:	fb08 770c 	mla	r7, r8, ip, r7
 802725a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802725e:	fb0e fe0c 	mul.w	lr, lr, ip
 8027262:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027266:	fb01 e303 	mla	r3, r1, r3, lr
 802726a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802726c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8027270:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027272:	fb00 330a 	mla	r3, r0, sl, r3
 8027276:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802727a:	fb08 3c0c 	mla	ip, r8, ip, r3
 802727e:	f8b9 3000 	ldrh.w	r3, [r9]
 8027282:	43d2      	mvns	r2, r2
 8027284:	1218      	asrs	r0, r3, #8
 8027286:	b2d2      	uxtb	r2, r2
 8027288:	10d9      	asrs	r1, r3, #3
 802728a:	0a3f      	lsrs	r7, r7, #8
 802728c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027290:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027294:	00db      	lsls	r3, r3, #3
 8027296:	4350      	muls	r0, r2
 8027298:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802729c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80272a0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80272a4:	b2db      	uxtb	r3, r3
 80272a6:	ea47 070c 	orr.w	r7, r7, ip
 80272aa:	4351      	muls	r1, r2
 80272ac:	4353      	muls	r3, r2
 80272ae:	1c42      	adds	r2, r0, #1
 80272b0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80272b4:	0c3a      	lsrs	r2, r7, #16
 80272b6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80272ba:	4a19      	ldr	r2, [pc, #100]	; (8027320 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 80272bc:	b2c0      	uxtb	r0, r0
 80272be:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80272c2:	1c4a      	adds	r2, r1, #1
 80272c4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80272c8:	0a3a      	lsrs	r2, r7, #8
 80272ca:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80272ce:	00c9      	lsls	r1, r1, #3
 80272d0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80272d4:	4301      	orrs	r1, r0
 80272d6:	1c58      	adds	r0, r3, #1
 80272d8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80272dc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80272e0:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 80272e4:	4308      	orrs	r0, r1
 80272e6:	f8a9 0000 	strh.w	r0, [r9]
 80272ea:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80272ec:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80272ee:	441a      	add	r2, r3
 80272f0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80272f2:	922d      	str	r2, [sp, #180]	; 0xb4
 80272f4:	f109 0902 	add.w	r9, r9, #2
 80272f8:	441d      	add	r5, r3
 80272fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80272fe:	e64d      	b.n	8026f9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8027300:	2800      	cmp	r0, #0
 8027302:	f43f aeed 	beq.w	80270e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8027306:	5c79      	ldrb	r1, [r7, r1]
 8027308:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802730c:	9109      	str	r1, [sp, #36]	; 0x24
 802730e:	0e09      	lsrs	r1, r1, #24
 8027310:	9111      	str	r1, [sp, #68]	; 0x44
 8027312:	e6e5      	b.n	80270e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8027314:	b01b      	add	sp, #108	; 0x6c
 8027316:	ecbd 8b08 	vpop	{d8-d11}
 802731a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802731e:	bf00      	nop
 8027320:	fffff800 	.word	0xfffff800

08027324 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8027324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027328:	b085      	sub	sp, #20
 802732a:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 802732e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8027332:	9103      	str	r1, [sp, #12]
 8027334:	fb05 7106 	mla	r1, r5, r6, r7
 8027338:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 802733c:	2d00      	cmp	r5, #0
 802733e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8027342:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8027346:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802734a:	9401      	str	r4, [sp, #4]
 802734c:	eb03 0901 	add.w	r9, r3, r1
 8027350:	f2c0 80c0 	blt.w	80274d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8027354:	45a8      	cmp	r8, r5
 8027356:	f340 80bd 	ble.w	80274d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 802735a:	2f00      	cmp	r7, #0
 802735c:	f2c0 80b6 	blt.w	80274cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8027360:	42be      	cmp	r6, r7
 8027362:	f340 80b3 	ble.w	80274cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8027366:	f813 c001 	ldrb.w	ip, [r3, r1]
 802736a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 802736e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027372:	d019      	beq.n	80273a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 8027374:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8027378:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802737c:	435a      	muls	r2, r3
 802737e:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8027382:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8027386:	fb0c f403 	mul.w	r4, ip, r3
 802738a:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 802738e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8027392:	441a      	add	r2, r3
 8027394:	f104 0320 	add.w	r3, r4, #32
 8027398:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 802739c:	0a1b      	lsrs	r3, r3, #8
 802739e:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 80273a2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80273a6:	4319      	orrs	r1, r3
 80273a8:	b289      	uxth	r1, r1
 80273aa:	1c7b      	adds	r3, r7, #1
 80273ac:	f100 8097 	bmi.w	80274de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 80273b0:	429e      	cmp	r6, r3
 80273b2:	f340 8094 	ble.w	80274de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 80273b6:	2800      	cmp	r0, #0
 80273b8:	f000 8094 	beq.w	80274e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 80273bc:	f899 4001 	ldrb.w	r4, [r9, #1]
 80273c0:	9b01      	ldr	r3, [sp, #4]
 80273c2:	2cff      	cmp	r4, #255	; 0xff
 80273c4:	885b      	ldrh	r3, [r3, #2]
 80273c6:	d01b      	beq.n	8027400 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 80273c8:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 80273cc:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80273d0:	fb0a f202 	mul.w	r2, sl, r2
 80273d4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80273d8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80273dc:	fb04 fa03 	mul.w	sl, r4, r3
 80273e0:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80273e4:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80273e8:	441a      	add	r2, r3
 80273ea:	f10a 0320 	add.w	r3, sl, #32
 80273ee:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80273f2:	0a1b      	lsrs	r3, r3, #8
 80273f4:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80273f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80273fc:	ea4b 0303 	orr.w	r3, fp, r3
 8027400:	b29b      	uxth	r3, r3
 8027402:	3501      	adds	r5, #1
 8027404:	d474      	bmi.n	80274f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8027406:	45a8      	cmp	r8, r5
 8027408:	dd72      	ble.n	80274f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 802740a:	f1be 0f00 	cmp.w	lr, #0
 802740e:	f000 8120 	beq.w	8027652 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8027412:	2f00      	cmp	r7, #0
 8027414:	db69      	blt.n	80274ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8027416:	42be      	cmp	r6, r7
 8027418:	dd67      	ble.n	80274ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 802741a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802741e:	9a01      	ldr	r2, [sp, #4]
 8027420:	2dff      	cmp	r5, #255	; 0xff
 8027422:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8027426:	d01c      	beq.n	8027462 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8027428:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 802742c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8027430:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8027434:	fb05 fa0b 	mul.w	sl, r5, fp
 8027438:	fb08 f802 	mul.w	r8, r8, r2
 802743c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8027440:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8027444:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027448:	4490      	add	r8, r2
 802744a:	f10a 0220 	add.w	r2, sl, #32
 802744e:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8027452:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027456:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 802745a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802745e:	ea4b 0b0a 	orr.w	fp, fp, sl
 8027462:	fa1f fb8b 	uxth.w	fp, fp
 8027466:	3701      	adds	r7, #1
 8027468:	d447      	bmi.n	80274fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 802746a:	42be      	cmp	r6, r7
 802746c:	dd45      	ble.n	80274fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 802746e:	2800      	cmp	r0, #0
 8027470:	d046      	beq.n	8027500 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 8027472:	3601      	adds	r6, #1
 8027474:	9a01      	ldr	r2, [sp, #4]
 8027476:	f819 7006 	ldrb.w	r7, [r9, r6]
 802747a:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 802747e:	2fff      	cmp	r7, #255	; 0xff
 8027480:	d01a      	beq.n	80274b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 8027482:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8027486:	ea4f 08e7 	mov.w	r8, r7, asr #3
 802748a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802748e:	fb07 f902 	mul.w	r9, r7, r2
 8027492:	fb08 f806 	mul.w	r8, r8, r6
 8027496:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802749a:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 802749e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80274a2:	44b0      	add	r8, r6
 80274a4:	f109 0620 	add.w	r6, r9, #32
 80274a8:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 80274ac:	0a36      	lsrs	r6, r6, #8
 80274ae:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80274b2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80274b6:	4332      	orrs	r2, r6
 80274b8:	b292      	uxth	r2, r2
 80274ba:	280f      	cmp	r0, #15
 80274bc:	d922      	bls.n	8027504 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 80274be:	4b69      	ldr	r3, [pc, #420]	; (8027664 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 80274c0:	4a69      	ldr	r2, [pc, #420]	; (8027668 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 80274c2:	486a      	ldr	r0, [pc, #424]	; (802766c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 80274c4:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80274c8:	f006 fcfa 	bl	802dec0 <__assert_func>
 80274cc:	f04f 0c00 	mov.w	ip, #0
 80274d0:	4661      	mov	r1, ip
 80274d2:	e76a      	b.n	80273aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 80274d4:	2400      	movs	r4, #0
 80274d6:	46a4      	mov	ip, r4
 80274d8:	4623      	mov	r3, r4
 80274da:	4621      	mov	r1, r4
 80274dc:	e791      	b.n	8027402 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80274de:	2400      	movs	r4, #0
 80274e0:	4623      	mov	r3, r4
 80274e2:	e78e      	b.n	8027402 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80274e4:	4604      	mov	r4, r0
 80274e6:	4603      	mov	r3, r0
 80274e8:	e78b      	b.n	8027402 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 80274ea:	2500      	movs	r5, #0
 80274ec:	46ab      	mov	fp, r5
 80274ee:	e7ba      	b.n	8027466 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 80274f0:	2700      	movs	r7, #0
 80274f2:	463d      	mov	r5, r7
 80274f4:	463a      	mov	r2, r7
 80274f6:	46bb      	mov	fp, r7
 80274f8:	e7df      	b.n	80274ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 80274fa:	2700      	movs	r7, #0
 80274fc:	463a      	mov	r2, r7
 80274fe:	e7dc      	b.n	80274ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8027500:	4607      	mov	r7, r0
 8027502:	4602      	mov	r2, r0
 8027504:	f1be 0f0f 	cmp.w	lr, #15
 8027508:	d8d9      	bhi.n	80274be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 802750a:	b286      	uxth	r6, r0
 802750c:	fa1f f98e 	uxth.w	r9, lr
 8027510:	fb06 f809 	mul.w	r8, r6, r9
 8027514:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027518:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802751c:	0136      	lsls	r6, r6, #4
 802751e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027522:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027526:	9601      	str	r6, [sp, #4]
 8027528:	ea4a 0101 	orr.w	r1, sl, r1
 802752c:	fa1f f689 	uxth.w	r6, r9
 8027530:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8027534:	fb10 f90e 	smulbb	r9, r0, lr
 8027538:	ea4f 09e9 	mov.w	r9, r9, asr #3
 802753c:	9602      	str	r6, [sp, #8]
 802753e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027542:	460e      	mov	r6, r1
 8027544:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8027548:	f1ce 0110 	rsb	r1, lr, #16
 802754c:	1a09      	subs	r1, r1, r0
 802754e:	ea4a 0303 	orr.w	r3, sl, r3
 8027552:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8027556:	4343      	muls	r3, r0
 8027558:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 802755c:	9801      	ldr	r0, [sp, #4]
 802755e:	fb01 3106 	mla	r1, r1, r6, r3
 8027562:	9e02      	ldr	r6, [sp, #8]
 8027564:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8027568:	1b80      	subs	r0, r0, r6
 802756a:	9e01      	ldr	r6, [sp, #4]
 802756c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027570:	eba6 0608 	sub.w	r6, r6, r8
 8027574:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027578:	b2b6      	uxth	r6, r6
 802757a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802757e:	ea4a 0202 	orr.w	r2, sl, r2
 8027582:	b280      	uxth	r0, r0
 8027584:	4374      	muls	r4, r6
 8027586:	fb09 1302 	mla	r3, r9, r2, r1
 802758a:	fb0c 4400 	mla	r4, ip, r0, r4
 802758e:	9a03      	ldr	r2, [sp, #12]
 8027590:	9802      	ldr	r0, [sp, #8]
 8027592:	8811      	ldrh	r1, [r2, #0]
 8027594:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8027598:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 802759c:	fb00 4505 	mla	r5, r0, r5, r4
 80275a0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80275a4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80275a8:	fb08 5707 	mla	r7, r8, r7, r5
 80275ac:	ea4a 0b0b 	orr.w	fp, sl, fp
 80275b0:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80275b4:	b292      	uxth	r2, r2
 80275b6:	fb0e 3e0b 	mla	lr, lr, fp, r3
 80275ba:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80275be:	4357      	muls	r7, r2
 80275c0:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80275c4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80275c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80275cc:	f107 0801 	add.w	r8, r7, #1
 80275d0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80275d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80275d8:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80275dc:	fa1f f38e 	uxth.w	r3, lr
 80275e0:	1208      	asrs	r0, r1, #8
 80275e2:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80275e6:	b2ff      	uxtb	r7, r7
 80275e8:	121c      	asrs	r4, r3, #8
 80275ea:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80275ee:	fb10 f007 	smulbb	r0, r0, r7
 80275f2:	10cd      	asrs	r5, r1, #3
 80275f4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80275f8:	fb04 0402 	mla	r4, r4, r2, r0
 80275fc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027600:	10d8      	asrs	r0, r3, #3
 8027602:	fb15 f507 	smulbb	r5, r5, r7
 8027606:	00db      	lsls	r3, r3, #3
 8027608:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802760c:	fb00 5002 	mla	r0, r0, r2, r5
 8027610:	b2dd      	uxtb	r5, r3
 8027612:	00cb      	lsls	r3, r1, #3
 8027614:	b2db      	uxtb	r3, r3
 8027616:	fb13 f307 	smulbb	r3, r3, r7
 802761a:	fb05 3202 	mla	r2, r5, r2, r3
 802761e:	b2a4      	uxth	r4, r4
 8027620:	b292      	uxth	r2, r2
 8027622:	1c63      	adds	r3, r4, #1
 8027624:	b280      	uxth	r0, r0
 8027626:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802762a:	1c53      	adds	r3, r2, #1
 802762c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027630:	1c42      	adds	r2, r0, #1
 8027632:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027636:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802763a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802763e:	0940      	lsrs	r0, r0, #5
 8027640:	4323      	orrs	r3, r4
 8027642:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027646:	9a03      	ldr	r2, [sp, #12]
 8027648:	4303      	orrs	r3, r0
 802764a:	8013      	strh	r3, [r2, #0]
 802764c:	b005      	add	sp, #20
 802764e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027652:	280f      	cmp	r0, #15
 8027654:	f63f af33 	bhi.w	80274be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8027658:	4677      	mov	r7, lr
 802765a:	4675      	mov	r5, lr
 802765c:	4672      	mov	r2, lr
 802765e:	46f3      	mov	fp, lr
 8027660:	e753      	b.n	802750a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8027662:	bf00      	nop
 8027664:	08032be1 	.word	0x08032be1
 8027668:	080331ae 	.word	0x080331ae
 802766c:	08032c65 	.word	0x08032c65

08027670 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027674:	ed2d 8b08 	vpush	{d8-d11}
 8027678:	b097      	sub	sp, #92	; 0x5c
 802767a:	eeb0 aa40 	vmov.f32	s20, s0
 802767e:	9214      	str	r2, [sp, #80]	; 0x50
 8027680:	9308      	str	r3, [sp, #32]
 8027682:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027684:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8027688:	9312      	str	r3, [sp, #72]	; 0x48
 802768a:	9111      	str	r1, [sp, #68]	; 0x44
 802768c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8027690:	9015      	str	r0, [sp, #84]	; 0x54
 8027692:	6850      	ldr	r0, [r2, #4]
 8027694:	6812      	ldr	r2, [r2, #0]
 8027696:	fb00 1303 	mla	r3, r0, r3, r1
 802769a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802769e:	9309      	str	r3, [sp, #36]	; 0x24
 80276a0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80276a2:	681b      	ldr	r3, [r3, #0]
 80276a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80276a6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80276a8:	685b      	ldr	r3, [r3, #4]
 80276aa:	930c      	str	r3, [sp, #48]	; 0x30
 80276ac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80276b0:	930a      	str	r3, [sp, #40]	; 0x28
 80276b2:	eef0 9a60 	vmov.f32	s19, s1
 80276b6:	eeb0 9a41 	vmov.f32	s18, s2
 80276ba:	eeb0 8a62 	vmov.f32	s16, s5
 80276be:	eef0 8a43 	vmov.f32	s17, s6
 80276c2:	eef0 ba44 	vmov.f32	s23, s8
 80276c6:	eeb0 ba64 	vmov.f32	s22, s9
 80276ca:	eef0 aa45 	vmov.f32	s21, s10
 80276ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80276d0:	2b00      	cmp	r3, #0
 80276d2:	dc03      	bgt.n	80276dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80276d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80276d6:	2b00      	cmp	r3, #0
 80276d8:	f340 83cb 	ble.w	8027e72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 80276dc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80276de:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80276e2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80276e6:	1e48      	subs	r0, r1, #1
 80276e8:	1e55      	subs	r5, r2, #1
 80276ea:	9b08      	ldr	r3, [sp, #32]
 80276ec:	2b00      	cmp	r3, #0
 80276ee:	f340 81a3 	ble.w	8027a38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 80276f2:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80276f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80276f6:	1436      	asrs	r6, r6, #16
 80276f8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80276fc:	d406      	bmi.n	802770c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80276fe:	4286      	cmp	r6, r0
 8027700:	da04      	bge.n	802770c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027702:	2b00      	cmp	r3, #0
 8027704:	db02      	blt.n	802770c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027706:	42ab      	cmp	r3, r5
 8027708:	f2c0 8197 	blt.w	8027a3a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802770c:	3601      	adds	r6, #1
 802770e:	f100 8184 	bmi.w	8027a1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027712:	42b1      	cmp	r1, r6
 8027714:	f2c0 8181 	blt.w	8027a1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027718:	3301      	adds	r3, #1
 802771a:	f100 817e 	bmi.w	8027a1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802771e:	429a      	cmp	r2, r3
 8027720:	f2c0 817b 	blt.w	8027a1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027724:	9b08      	ldr	r3, [sp, #32]
 8027726:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027728:	9313      	str	r3, [sp, #76]	; 0x4c
 802772a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802772e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027730:	2b00      	cmp	r3, #0
 8027732:	f340 81a4 	ble.w	8027a7e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8027736:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027738:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 802773a:	1418      	asrs	r0, r3, #16
 802773c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802773e:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027742:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027744:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8027748:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802774a:	142d      	asrs	r5, r5, #16
 802774c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8027750:	f100 81f8 	bmi.w	8027b44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8027754:	f102 3eff 	add.w	lr, r2, #4294967295
 8027758:	4575      	cmp	r5, lr
 802775a:	f280 81f3 	bge.w	8027b44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 802775e:	2800      	cmp	r0, #0
 8027760:	f2c0 81f0 	blt.w	8027b44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8027764:	f103 3eff 	add.w	lr, r3, #4294967295
 8027768:	4570      	cmp	r0, lr
 802776a:	f280 81eb 	bge.w	8027b44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 802776e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027770:	b212      	sxth	r2, r2
 8027772:	fb00 5002 	mla	r0, r0, r2, r5
 8027776:	fa1f fe81 	uxth.w	lr, r1
 802777a:	eb03 0a00 	add.w	sl, r3, r0
 802777e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027782:	f813 9000 	ldrb.w	r9, [r3, r0]
 8027786:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802778a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802778e:	b29b      	uxth	r3, r3
 8027790:	f1bc 0f00 	cmp.w	ip, #0
 8027794:	f000 81b9 	beq.w	8027b0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8027798:	f81a 4002 	ldrb.w	r4, [sl, r2]
 802779c:	940d      	str	r4, [sp, #52]	; 0x34
 802779e:	eb0a 0b02 	add.w	fp, sl, r2
 80277a2:	fa1f fa8c 	uxth.w	sl, ip
 80277a6:	fb0a fe0e 	mul.w	lr, sl, lr
 80277aa:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80277ae:	fa1f fa8a 	uxth.w	sl, sl
 80277b2:	eba5 050e 	sub.w	r5, r5, lr
 80277b6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80277ba:	940e      	str	r4, [sp, #56]	; 0x38
 80277bc:	eba3 030a 	sub.w	r3, r3, sl
 80277c0:	b2ad      	uxth	r5, r5
 80277c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80277c4:	b29b      	uxth	r3, r3
 80277c6:	fb08 f505 	mul.w	r5, r8, r5
 80277ca:	fb09 5303 	mla	r3, r9, r3, r5
 80277ce:	fb0a 3304 	mla	r3, sl, r4, r3
 80277d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80277d4:	fb0e 3304 	mla	r3, lr, r4, r3
 80277d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80277dc:	2b00      	cmp	r3, #0
 80277de:	f000 810f 	beq.w	8027a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 80277e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80277e4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80277e8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80277ec:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80277f0:	f000 8190 	beq.w	8027b14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 80277f4:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80277f8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80277fc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027800:	fb09 f000 	mul.w	r0, r9, r0
 8027804:	fb0a fe0e 	mul.w	lr, sl, lr
 8027808:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802780c:	f100 0b20 	add.w	fp, r0, #32
 8027810:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8027814:	44ce      	add	lr, r9
 8027816:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802781a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802781e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027822:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027826:	ea4e 0909 	orr.w	r9, lr, r9
 802782a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802782e:	8868      	ldrh	r0, [r5, #2]
 8027830:	d019      	beq.n	8027866 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8027832:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027836:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802783a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802783e:	fb08 f800 	mul.w	r8, r8, r0
 8027842:	fb0a fe0e 	mul.w	lr, sl, lr
 8027846:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802784a:	f108 0b20 	add.w	fp, r8, #32
 802784e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8027852:	4486      	add	lr, r0
 8027854:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8027858:	0a00      	lsrs	r0, r0, #8
 802785a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802785e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027862:	ea4e 0000 	orr.w	r0, lr, r0
 8027866:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802786a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802786e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8027872:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027876:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802787a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802787e:	ea4e 0909 	orr.w	r9, lr, r9
 8027882:	ea4a 0000 	orr.w	r0, sl, r0
 8027886:	f1bc 0f00 	cmp.w	ip, #0
 802788a:	f000 8145 	beq.w	8027b18 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 802788e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8027892:	3a01      	subs	r2, #1
 8027894:	0052      	lsls	r2, r2, #1
 8027896:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027898:	3202      	adds	r2, #2
 802789a:	2cff      	cmp	r4, #255	; 0xff
 802789c:	eb05 0e02 	add.w	lr, r5, r2
 80278a0:	5aaa      	ldrh	r2, [r5, r2]
 80278a2:	d018      	beq.n	80278d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80278a4:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80278a8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80278ac:	fb04 fa02 	mul.w	sl, r4, r2
 80278b0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80278b4:	fb08 f805 	mul.w	r8, r8, r5
 80278b8:	f10a 0520 	add.w	r5, sl, #32
 80278bc:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80278c0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80278c4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80278c8:	4442      	add	r2, r8
 80278ca:	0a2d      	lsrs	r5, r5, #8
 80278cc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80278d0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80278d4:	432a      	orrs	r2, r5
 80278d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80278d8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80278dc:	2cff      	cmp	r4, #255	; 0xff
 80278de:	d01a      	beq.n	8027916 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80278e0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80278e4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80278e8:	fb04 fa05 	mul.w	sl, r4, r5
 80278ec:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80278f0:	fb08 f80e 	mul.w	r8, r8, lr
 80278f4:	f10a 0e20 	add.w	lr, sl, #32
 80278f8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80278fc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027900:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027904:	4445      	add	r5, r8
 8027906:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802790a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802790e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8027912:	ea45 050e 	orr.w	r5, r5, lr
 8027916:	fb1c fe01 	smulbb	lr, ip, r1
 802791a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802791e:	f1cc 0810 	rsb	r8, ip, #16
 8027922:	eba8 0801 	sub.w	r8, r8, r1
 8027926:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802792a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802792e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8027932:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8027936:	4341      	muls	r1, r0
 8027938:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802793c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027940:	ea4a 0202 	orr.w	r2, sl, r2
 8027944:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8027948:	fb09 1108 	mla	r1, r9, r8, r1
 802794c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027950:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8027954:	fb0c 1102 	mla	r1, ip, r2, r1
 8027958:	ea4b 0505 	orr.w	r5, fp, r5
 802795c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8027960:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027964:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027968:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802796c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027970:	ea42 0e0e 	orr.w	lr, r2, lr
 8027974:	fa1f f28e 	uxth.w	r2, lr
 8027978:	2bff      	cmp	r3, #255	; 0xff
 802797a:	d103      	bne.n	8027984 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 802797c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802797e:	29ff      	cmp	r1, #255	; 0xff
 8027980:	f000 80de 	beq.w	8027b40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8027984:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027986:	8838      	ldrh	r0, [r7, #0]
 8027988:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802798a:	434b      	muls	r3, r1
 802798c:	f103 0c01 	add.w	ip, r3, #1
 8027990:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8027994:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8027998:	fa5f fc83 	uxtb.w	ip, r3
 802799c:	1203      	asrs	r3, r0, #8
 802799e:	1215      	asrs	r5, r2, #8
 80279a0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80279a4:	fb13 f30c 	smulbb	r3, r3, ip
 80279a8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80279ac:	fb05 3501 	mla	r5, r5, r1, r3
 80279b0:	10c3      	asrs	r3, r0, #3
 80279b2:	10d1      	asrs	r1, r2, #3
 80279b4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80279b8:	fb13 f30c 	smulbb	r3, r3, ip
 80279bc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80279c0:	fb01 3104 	mla	r1, r1, r4, r3
 80279c4:	00c3      	lsls	r3, r0, #3
 80279c6:	00d2      	lsls	r2, r2, #3
 80279c8:	b2db      	uxtb	r3, r3
 80279ca:	b2d2      	uxtb	r2, r2
 80279cc:	fb13 f30c 	smulbb	r3, r3, ip
 80279d0:	b2ad      	uxth	r5, r5
 80279d2:	fb02 3304 	mla	r3, r2, r4, r3
 80279d6:	b29a      	uxth	r2, r3
 80279d8:	1c6b      	adds	r3, r5, #1
 80279da:	b289      	uxth	r1, r1
 80279dc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80279e0:	1c53      	adds	r3, r2, #1
 80279e2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80279e6:	1c4a      	adds	r2, r1, #1
 80279e8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80279ec:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80279f0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80279f4:	0949      	lsrs	r1, r1, #5
 80279f6:	432b      	orrs	r3, r5
 80279f8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80279fc:	430b      	orrs	r3, r1
 80279fe:	803b      	strh	r3, [r7, #0]
 8027a00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027a02:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027a04:	4413      	add	r3, r2
 8027a06:	9329      	str	r3, [sp, #164]	; 0xa4
 8027a08:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8027a0a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027a0c:	441a      	add	r2, r3
 8027a0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027a10:	922a      	str	r2, [sp, #168]	; 0xa8
 8027a12:	3b01      	subs	r3, #1
 8027a14:	3702      	adds	r7, #2
 8027a16:	9313      	str	r3, [sp, #76]	; 0x4c
 8027a18:	e689      	b.n	802772e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8027a1a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027a1c:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8027a1e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8027a20:	4433      	add	r3, r6
 8027a22:	9329      	str	r3, [sp, #164]	; 0xa4
 8027a24:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027a26:	441c      	add	r4, r3
 8027a28:	9b08      	ldr	r3, [sp, #32]
 8027a2a:	942a      	str	r4, [sp, #168]	; 0xa8
 8027a2c:	3b01      	subs	r3, #1
 8027a2e:	9308      	str	r3, [sp, #32]
 8027a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027a32:	3302      	adds	r3, #2
 8027a34:	9309      	str	r3, [sp, #36]	; 0x24
 8027a36:	e658      	b.n	80276ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8027a38:	d028      	beq.n	8027a8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8027a3a:	9b08      	ldr	r3, [sp, #32]
 8027a3c:	982b      	ldr	r0, [sp, #172]	; 0xac
 8027a3e:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8027a40:	3b01      	subs	r3, #1
 8027a42:	fb00 5003 	mla	r0, r0, r3, r5
 8027a46:	1400      	asrs	r0, r0, #16
 8027a48:	f53f ae6c 	bmi.w	8027724 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027a4c:	3901      	subs	r1, #1
 8027a4e:	4288      	cmp	r0, r1
 8027a50:	f6bf ae68 	bge.w	8027724 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027a54:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8027a56:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8027a58:	fb01 0303 	mla	r3, r1, r3, r0
 8027a5c:	141b      	asrs	r3, r3, #16
 8027a5e:	f53f ae61 	bmi.w	8027724 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027a62:	3a01      	subs	r2, #1
 8027a64:	4293      	cmp	r3, r2
 8027a66:	f6bf ae5d 	bge.w	8027724 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027a6a:	9b08      	ldr	r3, [sp, #32]
 8027a6c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8027a70:	9313      	str	r3, [sp, #76]	; 0x4c
 8027a72:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027a76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027a78:	2b00      	cmp	r3, #0
 8027a7a:	f300 8082 	bgt.w	8027b82 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8027a7e:	9b08      	ldr	r3, [sp, #32]
 8027a80:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027a86:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8027a8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027a8e:	2b00      	cmp	r3, #0
 8027a90:	f340 81ef 	ble.w	8027e72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 8027a94:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027a9c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027aa0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027aa2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027aa6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027aaa:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027aae:	eef0 6a48 	vmov.f32	s13, s16
 8027ab2:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027ab6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027aba:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027abe:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8027ac2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027ac6:	eef0 6a68 	vmov.f32	s13, s17
 8027aca:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027ace:	ee18 2a10 	vmov	r2, s16
 8027ad2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027ad6:	fb92 f3f3 	sdiv	r3, r2, r3
 8027ada:	ee18 2a90 	vmov	r2, s17
 8027ade:	932b      	str	r3, [sp, #172]	; 0xac
 8027ae0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027ae2:	fb92 f3f3 	sdiv	r3, r2, r3
 8027ae6:	932c      	str	r3, [sp, #176]	; 0xb0
 8027ae8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027aea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027aec:	3b01      	subs	r3, #1
 8027aee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027af2:	9311      	str	r3, [sp, #68]	; 0x44
 8027af4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027af6:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8027afa:	bf08      	it	eq
 8027afc:	4613      	moveq	r3, r2
 8027afe:	9308      	str	r3, [sp, #32]
 8027b00:	eef0 8a67 	vmov.f32	s17, s15
 8027b04:	eeb0 8a47 	vmov.f32	s16, s14
 8027b08:	e5e1      	b.n	80276ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8027b0a:	fb08 f505 	mul.w	r5, r8, r5
 8027b0e:	fb09 5303 	mla	r3, r9, r3, r5
 8027b12:	e661      	b.n	80277d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8027b14:	4681      	mov	r9, r0
 8027b16:	e688      	b.n	802782a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8027b18:	f1c1 0210 	rsb	r2, r1, #16
 8027b1c:	4341      	muls	r1, r0
 8027b1e:	fb09 1902 	mla	r9, r9, r2, r1
 8027b22:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027b26:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027b2a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8027b2e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027b32:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027b36:	ea42 0909 	orr.w	r9, r2, r9
 8027b3a:	fa1f f289 	uxth.w	r2, r9
 8027b3e:	e71b      	b.n	8027978 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027b40:	803a      	strh	r2, [r7, #0]
 8027b42:	e75d      	b.n	8027a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027b44:	f115 0e01 	adds.w	lr, r5, #1
 8027b48:	f53f af5a 	bmi.w	8027a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027b4c:	4572      	cmp	r2, lr
 8027b4e:	f6ff af57 	blt.w	8027a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027b52:	f110 0e01 	adds.w	lr, r0, #1
 8027b56:	f53f af53 	bmi.w	8027a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027b5a:	4573      	cmp	r3, lr
 8027b5c:	f6ff af50 	blt.w	8027a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027b60:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027b62:	9502      	str	r5, [sp, #8]
 8027b64:	b21b      	sxth	r3, r3
 8027b66:	b212      	sxth	r2, r2
 8027b68:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8027b6c:	9301      	str	r3, [sp, #4]
 8027b6e:	9200      	str	r2, [sp, #0]
 8027b70:	e9cd c405 	strd	ip, r4, [sp, #20]
 8027b74:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8027b78:	4639      	mov	r1, r7
 8027b7a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027b7c:	f7ff fbd2 	bl	8027324 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8027b80:	e73e      	b.n	8027a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027b82:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027b84:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027b88:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027b8a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027b8e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027b90:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027b94:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027b96:	141f      	asrs	r7, r3, #16
 8027b98:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027b9a:	141b      	asrs	r3, r3, #16
 8027b9c:	fb01 3707 	mla	r7, r1, r7, r3
 8027ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027ba2:	fa1f fc82 	uxth.w	ip, r2
 8027ba6:	eb03 0a07 	add.w	sl, r3, r7
 8027baa:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027bae:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027bb2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027bb6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027bba:	b29b      	uxth	r3, r3
 8027bbc:	2d00      	cmp	r5, #0
 8027bbe:	f000 813d 	beq.w	8027e3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8027bc2:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8027bc6:	940f      	str	r4, [sp, #60]	; 0x3c
 8027bc8:	eb0a 0b01 	add.w	fp, sl, r1
 8027bcc:	fa1f fa85 	uxth.w	sl, r5
 8027bd0:	fb0a fc0c 	mul.w	ip, sl, ip
 8027bd4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8027bd8:	fa1f fa8a 	uxth.w	sl, sl
 8027bdc:	eba0 000c 	sub.w	r0, r0, ip
 8027be0:	eba3 030a 	sub.w	r3, r3, sl
 8027be4:	b280      	uxth	r0, r0
 8027be6:	fb08 f000 	mul.w	r0, r8, r0
 8027bea:	b29b      	uxth	r3, r3
 8027bec:	fb09 0303 	mla	r3, r9, r3, r0
 8027bf0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027bf2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027bf6:	9410      	str	r4, [sp, #64]	; 0x40
 8027bf8:	fb0a 3300 	mla	r3, sl, r0, r3
 8027bfc:	fb0c 3304 	mla	r3, ip, r4, r3
 8027c00:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c04:	2b00      	cmp	r3, #0
 8027c06:	f000 810b 	beq.w	8027e20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 8027c0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8027c0c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027c0e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027c12:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8027c16:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8027c1a:	f000 8114 	beq.w	8027e46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 8027c1e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027c22:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027c26:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027c2a:	fb09 f707 	mul.w	r7, r9, r7
 8027c2e:	fb0a fc0c 	mul.w	ip, sl, ip
 8027c32:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8027c36:	f107 0b20 	add.w	fp, r7, #32
 8027c3a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027c3e:	44cc      	add	ip, r9
 8027c40:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027c44:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027c48:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027c4c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027c50:	ea4c 0909 	orr.w	r9, ip, r9
 8027c54:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027c58:	8847      	ldrh	r7, [r0, #2]
 8027c5a:	d019      	beq.n	8027c90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x620>
 8027c5c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027c60:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027c64:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027c68:	fb08 f807 	mul.w	r8, r8, r7
 8027c6c:	fb0a fc0c 	mul.w	ip, sl, ip
 8027c70:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027c74:	f108 0b20 	add.w	fp, r8, #32
 8027c78:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027c7c:	44bc      	add	ip, r7
 8027c7e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027c82:	0a3f      	lsrs	r7, r7, #8
 8027c84:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027c88:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027c8c:	ea4c 0707 	orr.w	r7, ip, r7
 8027c90:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027c94:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027c98:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8027c9c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027ca0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027ca4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8027ca8:	ea4c 0909 	orr.w	r9, ip, r9
 8027cac:	ea4a 0707 	orr.w	r7, sl, r7
 8027cb0:	2d00      	cmp	r5, #0
 8027cb2:	f000 80ca 	beq.w	8027e4a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8027cb6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8027cba:	3901      	subs	r1, #1
 8027cbc:	0049      	lsls	r1, r1, #1
 8027cbe:	3102      	adds	r1, #2
 8027cc0:	eb00 0c01 	add.w	ip, r0, r1
 8027cc4:	5a41      	ldrh	r1, [r0, r1]
 8027cc6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027cc8:	28ff      	cmp	r0, #255	; 0xff
 8027cca:	d019      	beq.n	8027d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x690>
 8027ccc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027cce:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8027cd2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027cd6:	fb04 fa01 	mul.w	sl, r4, r1
 8027cda:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027cde:	fb08 f800 	mul.w	r8, r8, r0
 8027ce2:	f10a 0020 	add.w	r0, sl, #32
 8027ce6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8027cea:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027cee:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027cf2:	4441      	add	r1, r8
 8027cf4:	0a00      	lsrs	r0, r0, #8
 8027cf6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8027cfa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027cfe:	4301      	orrs	r1, r0
 8027d00:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027d02:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027d06:	2cff      	cmp	r4, #255	; 0xff
 8027d08:	d01a      	beq.n	8027d40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8027d0a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8027d0e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027d12:	fb04 fa00 	mul.w	sl, r4, r0
 8027d16:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027d1a:	fb08 f80c 	mul.w	r8, r8, ip
 8027d1e:	f10a 0c20 	add.w	ip, sl, #32
 8027d22:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027d26:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8027d2a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027d2e:	4440      	add	r0, r8
 8027d30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027d34:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027d38:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027d3c:	ea40 000c 	orr.w	r0, r0, ip
 8027d40:	fb15 fc02 	smulbb	ip, r5, r2
 8027d44:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027d48:	f1c5 0810 	rsb	r8, r5, #16
 8027d4c:	eba8 0802 	sub.w	r8, r8, r2
 8027d50:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027d54:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027d58:	437a      	muls	r2, r7
 8027d5a:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027d5e:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027d62:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027d66:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027d6a:	fb09 2208 	mla	r2, r9, r8, r2
 8027d6e:	ea4a 0101 	orr.w	r1, sl, r1
 8027d72:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027d76:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027d7a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027d7e:	fb05 2201 	mla	r2, r5, r1, r2
 8027d82:	ea4b 0000 	orr.w	r0, fp, r0
 8027d86:	fb0c 2200 	mla	r2, ip, r0, r2
 8027d8a:	0d57      	lsrs	r7, r2, #21
 8027d8c:	0952      	lsrs	r2, r2, #5
 8027d8e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027d92:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027d96:	433a      	orrs	r2, r7
 8027d98:	2bff      	cmp	r3, #255	; 0xff
 8027d9a:	b292      	uxth	r2, r2
 8027d9c:	d102      	bne.n	8027da4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8027d9e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027da0:	29ff      	cmp	r1, #255	; 0xff
 8027da2:	d063      	beq.n	8027e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fc>
 8027da4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027da6:	f8be 1000 	ldrh.w	r1, [lr]
 8027daa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027dac:	4343      	muls	r3, r0
 8027dae:	1c58      	adds	r0, r3, #1
 8027db0:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8027db4:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8027db8:	1208      	asrs	r0, r1, #8
 8027dba:	b2db      	uxtb	r3, r3
 8027dbc:	1215      	asrs	r5, r2, #8
 8027dbe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027dc2:	fb10 f003 	smulbb	r0, r0, r3
 8027dc6:	10cf      	asrs	r7, r1, #3
 8027dc8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027dcc:	00c9      	lsls	r1, r1, #3
 8027dce:	fb05 0504 	mla	r5, r5, r4, r0
 8027dd2:	b2c9      	uxtb	r1, r1
 8027dd4:	10d0      	asrs	r0, r2, #3
 8027dd6:	00d2      	lsls	r2, r2, #3
 8027dd8:	fb11 f103 	smulbb	r1, r1, r3
 8027ddc:	b2d2      	uxtb	r2, r2
 8027dde:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8027de2:	fb02 1204 	mla	r2, r2, r4, r1
 8027de6:	fb17 f703 	smulbb	r7, r7, r3
 8027dea:	b2ad      	uxth	r5, r5
 8027dec:	b292      	uxth	r2, r2
 8027dee:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027df2:	fb00 7004 	mla	r0, r0, r4, r7
 8027df6:	1c6b      	adds	r3, r5, #1
 8027df8:	1c57      	adds	r7, r2, #1
 8027dfa:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027dfe:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8027e02:	b280      	uxth	r0, r0
 8027e04:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8027e08:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027e0c:	433d      	orrs	r5, r7
 8027e0e:	1c47      	adds	r7, r0, #1
 8027e10:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027e14:	097f      	lsrs	r7, r7, #5
 8027e16:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027e1a:	433d      	orrs	r5, r7
 8027e1c:	f8ae 5000 	strh.w	r5, [lr]
 8027e20:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027e22:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027e24:	4413      	add	r3, r2
 8027e26:	9329      	str	r3, [sp, #164]	; 0xa4
 8027e28:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8027e2a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027e2c:	441a      	add	r2, r3
 8027e2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027e30:	922a      	str	r2, [sp, #168]	; 0xa8
 8027e32:	3b01      	subs	r3, #1
 8027e34:	f10e 0e02 	add.w	lr, lr, #2
 8027e38:	9313      	str	r3, [sp, #76]	; 0x4c
 8027e3a:	e61c      	b.n	8027a76 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 8027e3c:	fb08 f000 	mul.w	r0, r8, r0
 8027e40:	fb09 0303 	mla	r3, r9, r3, r0
 8027e44:	e6dc      	b.n	8027c00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x590>
 8027e46:	46b9      	mov	r9, r7
 8027e48:	e704      	b.n	8027c54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e4>
 8027e4a:	f1c2 0110 	rsb	r1, r2, #16
 8027e4e:	437a      	muls	r2, r7
 8027e50:	fb09 2901 	mla	r9, r9, r1, r2
 8027e54:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027e58:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027e5c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027e60:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027e64:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027e68:	4302      	orrs	r2, r0
 8027e6a:	e795      	b.n	8027d98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8027e6c:	f8ae 2000 	strh.w	r2, [lr]
 8027e70:	e7d6      	b.n	8027e20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 8027e72:	b017      	add	sp, #92	; 0x5c
 8027e74:	ecbd 8b08 	vpop	{d8-d11}
 8027e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8027e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e80:	b085      	sub	sp, #20
 8027e82:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8027e86:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8027e8a:	9103      	str	r1, [sp, #12]
 8027e8c:	fb05 7106 	mla	r1, r5, r6, r7
 8027e90:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 8027e94:	2d00      	cmp	r5, #0
 8027e96:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8027e9a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8027e9e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8027ea2:	9401      	str	r4, [sp, #4]
 8027ea4:	eb02 0901 	add.w	r9, r2, r1
 8027ea8:	f2c0 80c0 	blt.w	802802c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8027eac:	45a8      	cmp	r8, r5
 8027eae:	f340 80bd 	ble.w	802802c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8027eb2:	2f00      	cmp	r7, #0
 8027eb4:	f2c0 80b6 	blt.w	8028024 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8027eb8:	42be      	cmp	r6, r7
 8027eba:	f340 80b3 	ble.w	8028024 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8027ebe:	f812 c001 	ldrb.w	ip, [r2, r1]
 8027ec2:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8027ec6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027eca:	d019      	beq.n	8027f00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8027ecc:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8027ed0:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8027ed4:	435a      	muls	r2, r3
 8027ed6:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8027eda:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8027ede:	fb0c f403 	mul.w	r4, ip, r3
 8027ee2:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8027ee6:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8027eea:	441a      	add	r2, r3
 8027eec:	f104 0320 	add.w	r3, r4, #32
 8027ef0:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8027ef4:	0a1b      	lsrs	r3, r3, #8
 8027ef6:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8027efa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027efe:	4319      	orrs	r1, r3
 8027f00:	b289      	uxth	r1, r1
 8027f02:	1c7b      	adds	r3, r7, #1
 8027f04:	f100 8097 	bmi.w	8028036 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8027f08:	429e      	cmp	r6, r3
 8027f0a:	f340 8094 	ble.w	8028036 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8027f0e:	2800      	cmp	r0, #0
 8027f10:	f000 8094 	beq.w	802803c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8027f14:	f899 4001 	ldrb.w	r4, [r9, #1]
 8027f18:	9b01      	ldr	r3, [sp, #4]
 8027f1a:	2cff      	cmp	r4, #255	; 0xff
 8027f1c:	885b      	ldrh	r3, [r3, #2]
 8027f1e:	d01b      	beq.n	8027f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8027f20:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8027f24:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8027f28:	fb0a f202 	mul.w	r2, sl, r2
 8027f2c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027f30:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8027f34:	fb04 fa03 	mul.w	sl, r4, r3
 8027f38:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8027f3c:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8027f40:	441a      	add	r2, r3
 8027f42:	f10a 0320 	add.w	r3, sl, #32
 8027f46:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8027f4a:	0a1b      	lsrs	r3, r3, #8
 8027f4c:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8027f50:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027f54:	ea4b 0303 	orr.w	r3, fp, r3
 8027f58:	b29b      	uxth	r3, r3
 8027f5a:	3501      	adds	r5, #1
 8027f5c:	d474      	bmi.n	8028048 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8027f5e:	45a8      	cmp	r8, r5
 8027f60:	dd72      	ble.n	8028048 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8027f62:	f1be 0f00 	cmp.w	lr, #0
 8027f66:	f000 8110 	beq.w	802818a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 8027f6a:	2f00      	cmp	r7, #0
 8027f6c:	db69      	blt.n	8028042 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8027f6e:	42be      	cmp	r6, r7
 8027f70:	dd67      	ble.n	8028042 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8027f72:	f819 5006 	ldrb.w	r5, [r9, r6]
 8027f76:	9a01      	ldr	r2, [sp, #4]
 8027f78:	2dff      	cmp	r5, #255	; 0xff
 8027f7a:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8027f7e:	d01c      	beq.n	8027fba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8027f80:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8027f84:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8027f88:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8027f8c:	fb05 fa0b 	mul.w	sl, r5, fp
 8027f90:	fb08 f802 	mul.w	r8, r8, r2
 8027f94:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8027f98:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8027f9c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027fa0:	4490      	add	r8, r2
 8027fa2:	f10a 0220 	add.w	r2, sl, #32
 8027fa6:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8027faa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027fae:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8027fb2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8027fb6:	ea4b 0b0a 	orr.w	fp, fp, sl
 8027fba:	fa1f fb8b 	uxth.w	fp, fp
 8027fbe:	3701      	adds	r7, #1
 8027fc0:	d447      	bmi.n	8028052 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8027fc2:	42be      	cmp	r6, r7
 8027fc4:	dd45      	ble.n	8028052 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8027fc6:	2800      	cmp	r0, #0
 8027fc8:	d046      	beq.n	8028058 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 8027fca:	3601      	adds	r6, #1
 8027fcc:	9a01      	ldr	r2, [sp, #4]
 8027fce:	f819 7006 	ldrb.w	r7, [r9, r6]
 8027fd2:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8027fd6:	2fff      	cmp	r7, #255	; 0xff
 8027fd8:	d01a      	beq.n	8028010 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8027fda:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8027fde:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8027fe2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027fe6:	fb07 f902 	mul.w	r9, r7, r2
 8027fea:	fb08 f806 	mul.w	r8, r8, r6
 8027fee:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8027ff2:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8027ff6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027ffa:	44b0      	add	r8, r6
 8027ffc:	f109 0620 	add.w	r6, r9, #32
 8028000:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8028004:	0a36      	lsrs	r6, r6, #8
 8028006:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802800a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802800e:	4332      	orrs	r2, r6
 8028010:	b292      	uxth	r2, r2
 8028012:	280f      	cmp	r0, #15
 8028014:	d922      	bls.n	802805c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8028016:	4b61      	ldr	r3, [pc, #388]	; (802819c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8028018:	4a61      	ldr	r2, [pc, #388]	; (80281a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 802801a:	4862      	ldr	r0, [pc, #392]	; (80281a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 802801c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8028020:	f005 ff4e 	bl	802dec0 <__assert_func>
 8028024:	f04f 0c00 	mov.w	ip, #0
 8028028:	4661      	mov	r1, ip
 802802a:	e76a      	b.n	8027f02 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 802802c:	2400      	movs	r4, #0
 802802e:	46a4      	mov	ip, r4
 8028030:	4623      	mov	r3, r4
 8028032:	4621      	mov	r1, r4
 8028034:	e791      	b.n	8027f5a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8028036:	2400      	movs	r4, #0
 8028038:	4623      	mov	r3, r4
 802803a:	e78e      	b.n	8027f5a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 802803c:	4604      	mov	r4, r0
 802803e:	4603      	mov	r3, r0
 8028040:	e78b      	b.n	8027f5a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8028042:	2500      	movs	r5, #0
 8028044:	46ab      	mov	fp, r5
 8028046:	e7ba      	b.n	8027fbe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8028048:	2700      	movs	r7, #0
 802804a:	463d      	mov	r5, r7
 802804c:	463a      	mov	r2, r7
 802804e:	46bb      	mov	fp, r7
 8028050:	e7df      	b.n	8028012 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8028052:	2700      	movs	r7, #0
 8028054:	463a      	mov	r2, r7
 8028056:	e7dc      	b.n	8028012 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8028058:	4607      	mov	r7, r0
 802805a:	4602      	mov	r2, r0
 802805c:	f1be 0f0f 	cmp.w	lr, #15
 8028060:	d8d9      	bhi.n	8028016 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8028062:	b286      	uxth	r6, r0
 8028064:	fa1f f98e 	uxth.w	r9, lr
 8028068:	fb06 f809 	mul.w	r8, r6, r9
 802806c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8028070:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8028074:	0136      	lsls	r6, r6, #4
 8028076:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802807a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802807e:	9601      	str	r6, [sp, #4]
 8028080:	ea4a 0101 	orr.w	r1, sl, r1
 8028084:	fa1f f689 	uxth.w	r6, r9
 8028088:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 802808c:	fb10 f90e 	smulbb	r9, r0, lr
 8028090:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8028094:	9602      	str	r6, [sp, #8]
 8028096:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802809a:	460e      	mov	r6, r1
 802809c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80280a0:	f1ce 0110 	rsb	r1, lr, #16
 80280a4:	1a09      	subs	r1, r1, r0
 80280a6:	ea4a 0303 	orr.w	r3, sl, r3
 80280aa:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 80280ae:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80280b2:	4343      	muls	r3, r0
 80280b4:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80280b8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80280bc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80280c0:	fb01 3106 	mla	r1, r1, r6, r3
 80280c4:	ea4a 0202 	orr.w	r2, sl, r2
 80280c8:	fb09 1302 	mla	r3, r9, r2, r1
 80280cc:	9a03      	ldr	r2, [sp, #12]
 80280ce:	9802      	ldr	r0, [sp, #8]
 80280d0:	8811      	ldrh	r1, [r2, #0]
 80280d2:	9a01      	ldr	r2, [sp, #4]
 80280d4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80280d8:	1a12      	subs	r2, r2, r0
 80280da:	9801      	ldr	r0, [sp, #4]
 80280dc:	eba0 0608 	sub.w	r6, r0, r8
 80280e0:	b2b6      	uxth	r6, r6
 80280e2:	b292      	uxth	r2, r2
 80280e4:	4374      	muls	r4, r6
 80280e6:	fb0c 4402 	mla	r4, ip, r2, r4
 80280ea:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80280ee:	9a02      	ldr	r2, [sp, #8]
 80280f0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80280f4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80280f8:	fb02 4505 	mla	r5, r2, r5, r4
 80280fc:	ea4a 0b0b 	orr.w	fp, sl, fp
 8028100:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8028104:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8028108:	fb08 5707 	mla	r7, r8, r7, r5
 802810c:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8028110:	120a      	asrs	r2, r1, #8
 8028112:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8028116:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802811a:	b2ff      	uxtb	r7, r7
 802811c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028120:	10c8      	asrs	r0, r1, #3
 8028122:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028126:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802812a:	00c9      	lsls	r1, r1, #3
 802812c:	437a      	muls	r2, r7
 802812e:	ea43 0e0e 	orr.w	lr, r3, lr
 8028132:	b2c9      	uxtb	r1, r1
 8028134:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028138:	fa1f f38e 	uxth.w	r3, lr
 802813c:	4378      	muls	r0, r7
 802813e:	434f      	muls	r7, r1
 8028140:	1c51      	adds	r1, r2, #1
 8028142:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8028146:	121a      	asrs	r2, r3, #8
 8028148:	f022 0207 	bic.w	r2, r2, #7
 802814c:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8028150:	1c41      	adds	r1, r0, #1
 8028152:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028156:	10d9      	asrs	r1, r3, #3
 8028158:	f021 0103 	bic.w	r1, r1, #3
 802815c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028160:	0212      	lsls	r2, r2, #8
 8028162:	00c9      	lsls	r1, r1, #3
 8028164:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028168:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802816c:	430a      	orrs	r2, r1
 802816e:	1c79      	adds	r1, r7, #1
 8028170:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8028174:	00db      	lsls	r3, r3, #3
 8028176:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 802817a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802817e:	4313      	orrs	r3, r2
 8028180:	9a03      	ldr	r2, [sp, #12]
 8028182:	8013      	strh	r3, [r2, #0]
 8028184:	b005      	add	sp, #20
 8028186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802818a:	280f      	cmp	r0, #15
 802818c:	f63f af43 	bhi.w	8028016 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8028190:	4677      	mov	r7, lr
 8028192:	4675      	mov	r5, lr
 8028194:	4672      	mov	r2, lr
 8028196:	46f3      	mov	fp, lr
 8028198:	e763      	b.n	8028062 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 802819a:	bf00      	nop
 802819c:	08032be1 	.word	0x08032be1
 80281a0:	080331ae 	.word	0x080331ae
 80281a4:	08032c65 	.word	0x08032c65

080281a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80281a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80281ac:	ed2d 8b08 	vpush	{d8-d11}
 80281b0:	b093      	sub	sp, #76	; 0x4c
 80281b2:	eeb0 aa40 	vmov.f32	s20, s0
 80281b6:	9210      	str	r2, [sp, #64]	; 0x40
 80281b8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80281ba:	910e      	str	r1, [sp, #56]	; 0x38
 80281bc:	9306      	str	r3, [sp, #24]
 80281be:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80281c2:	9011      	str	r0, [sp, #68]	; 0x44
 80281c4:	6850      	ldr	r0, [r2, #4]
 80281c6:	6812      	ldr	r2, [r2, #0]
 80281c8:	fb00 1303 	mla	r3, r0, r3, r1
 80281cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80281d0:	9307      	str	r3, [sp, #28]
 80281d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80281d4:	681b      	ldr	r3, [r3, #0]
 80281d6:	9308      	str	r3, [sp, #32]
 80281d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80281da:	685b      	ldr	r3, [r3, #4]
 80281dc:	9309      	str	r3, [sp, #36]	; 0x24
 80281de:	eef0 9a60 	vmov.f32	s19, s1
 80281e2:	eeb0 9a41 	vmov.f32	s18, s2
 80281e6:	eeb0 8a62 	vmov.f32	s16, s5
 80281ea:	eef0 8a43 	vmov.f32	s17, s6
 80281ee:	eef0 ba44 	vmov.f32	s23, s8
 80281f2:	eeb0 ba64 	vmov.f32	s22, s9
 80281f6:	eef0 aa45 	vmov.f32	s21, s10
 80281fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80281fc:	2b00      	cmp	r3, #0
 80281fe:	dc03      	bgt.n	8028208 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8028200:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028202:	2b00      	cmp	r3, #0
 8028204:	f340 83b4 	ble.w	8028970 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c8>
 8028208:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802820a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802820e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028212:	1e48      	subs	r0, r1, #1
 8028214:	1e55      	subs	r5, r2, #1
 8028216:	9b06      	ldr	r3, [sp, #24]
 8028218:	2b00      	cmp	r3, #0
 802821a:	f340 8163 	ble.w	80284e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 802821e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8028220:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028222:	1436      	asrs	r6, r6, #16
 8028224:	ea4f 4323 	mov.w	r3, r3, asr #16
 8028228:	d406      	bmi.n	8028238 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802822a:	4286      	cmp	r6, r0
 802822c:	da04      	bge.n	8028238 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802822e:	2b00      	cmp	r3, #0
 8028230:	db02      	blt.n	8028238 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028232:	42ab      	cmp	r3, r5
 8028234:	f2c0 8157 	blt.w	80284e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8028238:	3601      	adds	r6, #1
 802823a:	f100 8144 	bmi.w	80284c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802823e:	42b1      	cmp	r1, r6
 8028240:	f2c0 8141 	blt.w	80284c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8028244:	3301      	adds	r3, #1
 8028246:	f100 813e 	bmi.w	80284c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802824a:	429a      	cmp	r2, r3
 802824c:	f2c0 813b 	blt.w	80284c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8028250:	9b06      	ldr	r3, [sp, #24]
 8028252:	9f07      	ldr	r7, [sp, #28]
 8028254:	930f      	str	r3, [sp, #60]	; 0x3c
 8028256:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802825a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802825c:	2b00      	cmp	r3, #0
 802825e:	f340 8164 	ble.w	802852a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028262:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028264:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8028266:	1418      	asrs	r0, r3, #16
 8028268:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802826a:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802826e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028270:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8028274:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028276:	142d      	asrs	r5, r5, #16
 8028278:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802827c:	f100 81ee 	bmi.w	802865c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8028280:	f102 3eff 	add.w	lr, r2, #4294967295
 8028284:	4575      	cmp	r5, lr
 8028286:	f280 81e9 	bge.w	802865c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802828a:	2800      	cmp	r0, #0
 802828c:	f2c0 81e6 	blt.w	802865c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8028290:	f103 3eff 	add.w	lr, r3, #4294967295
 8028294:	4570      	cmp	r0, lr
 8028296:	f280 81e1 	bge.w	802865c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802829a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802829c:	b212      	sxth	r2, r2
 802829e:	fb00 5002 	mla	r0, r0, r2, r5
 80282a2:	fa1f fe81 	uxth.w	lr, r1
 80282a6:	eb03 0a00 	add.w	sl, r3, r0
 80282aa:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80282ae:	f813 9000 	ldrb.w	r9, [r3, r0]
 80282b2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80282b6:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80282ba:	b29b      	uxth	r3, r3
 80282bc:	f1bc 0f00 	cmp.w	ip, #0
 80282c0:	f000 8179 	beq.w	80285b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 80282c4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80282c8:	940a      	str	r4, [sp, #40]	; 0x28
 80282ca:	eb0a 0b02 	add.w	fp, sl, r2
 80282ce:	fa1f fa8c 	uxth.w	sl, ip
 80282d2:	fb0a fe0e 	mul.w	lr, sl, lr
 80282d6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80282da:	fa1f fa8a 	uxth.w	sl, sl
 80282de:	eba5 050e 	sub.w	r5, r5, lr
 80282e2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80282e6:	940b      	str	r4, [sp, #44]	; 0x2c
 80282e8:	eba3 030a 	sub.w	r3, r3, sl
 80282ec:	b2ad      	uxth	r5, r5
 80282ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80282f0:	b29b      	uxth	r3, r3
 80282f2:	fb08 f505 	mul.w	r5, r8, r5
 80282f6:	fb09 5303 	mla	r3, r9, r3, r5
 80282fa:	fb0a 3304 	mla	r3, sl, r4, r3
 80282fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028300:	fb0e 3304 	mla	r3, lr, r4, r3
 8028304:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028308:	2b00      	cmp	r3, #0
 802830a:	f000 80cf 	beq.w	80284ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 802830e:	9c08      	ldr	r4, [sp, #32]
 8028310:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028314:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8028318:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802831c:	f000 8150 	beq.w	80285c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8028320:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8028324:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8028328:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802832c:	fb09 f000 	mul.w	r0, r9, r0
 8028330:	fb0a fe0e 	mul.w	lr, sl, lr
 8028334:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8028338:	f100 0b20 	add.w	fp, r0, #32
 802833c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8028340:	44ce      	add	lr, r9
 8028342:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8028346:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802834a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802834e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8028352:	ea4e 0909 	orr.w	r9, lr, r9
 8028356:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802835a:	8868      	ldrh	r0, [r5, #2]
 802835c:	d019      	beq.n	8028392 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802835e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8028362:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8028366:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802836a:	fb08 f800 	mul.w	r8, r8, r0
 802836e:	fb0a fe0e 	mul.w	lr, sl, lr
 8028372:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8028376:	f108 0b20 	add.w	fp, r8, #32
 802837a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802837e:	4486      	add	lr, r0
 8028380:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8028384:	0a00      	lsrs	r0, r0, #8
 8028386:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802838a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802838e:	ea4e 0000 	orr.w	r0, lr, r0
 8028392:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8028396:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802839a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802839e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80283a2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80283a6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80283aa:	ea4e 0909 	orr.w	r9, lr, r9
 80283ae:	ea4a 0000 	orr.w	r0, sl, r0
 80283b2:	f1bc 0f00 	cmp.w	ip, #0
 80283b6:	f000 8105 	beq.w	80285c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80283ba:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80283be:	3a01      	subs	r2, #1
 80283c0:	0052      	lsls	r2, r2, #1
 80283c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80283c4:	3202      	adds	r2, #2
 80283c6:	2cff      	cmp	r4, #255	; 0xff
 80283c8:	eb05 0e02 	add.w	lr, r5, r2
 80283cc:	5aaa      	ldrh	r2, [r5, r2]
 80283ce:	d018      	beq.n	8028402 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80283d0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80283d4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80283d8:	fb04 fa02 	mul.w	sl, r4, r2
 80283dc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80283e0:	fb08 f805 	mul.w	r8, r8, r5
 80283e4:	f10a 0520 	add.w	r5, sl, #32
 80283e8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80283ec:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80283f0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80283f4:	4442      	add	r2, r8
 80283f6:	0a2d      	lsrs	r5, r5, #8
 80283f8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80283fc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028400:	432a      	orrs	r2, r5
 8028402:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028404:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8028408:	2cff      	cmp	r4, #255	; 0xff
 802840a:	d01a      	beq.n	8028442 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 802840c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8028410:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028414:	fb04 fa05 	mul.w	sl, r4, r5
 8028418:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802841c:	fb08 f80e 	mul.w	r8, r8, lr
 8028420:	f10a 0e20 	add.w	lr, sl, #32
 8028424:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8028428:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802842c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028430:	4445      	add	r5, r8
 8028432:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028436:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802843a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802843e:	ea45 050e 	orr.w	r5, r5, lr
 8028442:	fb1c fe01 	smulbb	lr, ip, r1
 8028446:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802844a:	f1cc 0810 	rsb	r8, ip, #16
 802844e:	eba8 0801 	sub.w	r8, r8, r1
 8028452:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8028456:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802845a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802845e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8028462:	4341      	muls	r1, r0
 8028464:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028468:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802846c:	ea4a 0202 	orr.w	r2, sl, r2
 8028470:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8028474:	fb09 1108 	mla	r1, r9, r8, r1
 8028478:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802847c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8028480:	fb0c 1102 	mla	r1, ip, r2, r1
 8028484:	ea4b 0505 	orr.w	r5, fp, r5
 8028488:	fb0e 1e05 	mla	lr, lr, r5, r1
 802848c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8028490:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8028494:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028498:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802849c:	ea42 0e0e 	orr.w	lr, r2, lr
 80284a0:	fa1f f28e 	uxth.w	r2, lr
 80284a4:	2bff      	cmp	r3, #255	; 0xff
 80284a6:	f040 80a1 	bne.w	80285ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x444>
 80284aa:	803a      	strh	r2, [r7, #0]
 80284ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80284ae:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80284b0:	4413      	add	r3, r2
 80284b2:	9325      	str	r3, [sp, #148]	; 0x94
 80284b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80284b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80284b8:	441a      	add	r2, r3
 80284ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80284bc:	9226      	str	r2, [sp, #152]	; 0x98
 80284be:	3b01      	subs	r3, #1
 80284c0:	3702      	adds	r7, #2
 80284c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80284c4:	e6c9      	b.n	802825a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80284c6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80284c8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80284ca:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80284cc:	4433      	add	r3, r6
 80284ce:	9325      	str	r3, [sp, #148]	; 0x94
 80284d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80284d2:	441c      	add	r4, r3
 80284d4:	9b06      	ldr	r3, [sp, #24]
 80284d6:	9426      	str	r4, [sp, #152]	; 0x98
 80284d8:	3b01      	subs	r3, #1
 80284da:	9306      	str	r3, [sp, #24]
 80284dc:	9b07      	ldr	r3, [sp, #28]
 80284de:	3302      	adds	r3, #2
 80284e0:	9307      	str	r3, [sp, #28]
 80284e2:	e698      	b.n	8028216 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80284e4:	d028      	beq.n	8028538 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 80284e6:	9b06      	ldr	r3, [sp, #24]
 80284e8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80284ea:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80284ec:	3b01      	subs	r3, #1
 80284ee:	fb00 5003 	mla	r0, r0, r3, r5
 80284f2:	1400      	asrs	r0, r0, #16
 80284f4:	f53f aeac 	bmi.w	8028250 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80284f8:	3901      	subs	r1, #1
 80284fa:	4288      	cmp	r0, r1
 80284fc:	f6bf aea8 	bge.w	8028250 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028500:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8028502:	9826      	ldr	r0, [sp, #152]	; 0x98
 8028504:	fb01 0303 	mla	r3, r1, r3, r0
 8028508:	141b      	asrs	r3, r3, #16
 802850a:	f53f aea1 	bmi.w	8028250 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802850e:	3a01      	subs	r2, #1
 8028510:	4293      	cmp	r3, r2
 8028512:	f6bf ae9d 	bge.w	8028250 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028516:	9b06      	ldr	r3, [sp, #24]
 8028518:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802851c:	930f      	str	r3, [sp, #60]	; 0x3c
 802851e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8028522:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028524:	2b00      	cmp	r3, #0
 8028526:	f300 80b6 	bgt.w	8028696 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 802852a:	9b06      	ldr	r3, [sp, #24]
 802852c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028530:	9b07      	ldr	r3, [sp, #28]
 8028532:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8028536:	9307      	str	r3, [sp, #28]
 8028538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802853a:	2b00      	cmp	r3, #0
 802853c:	f340 8218 	ble.w	8028970 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c8>
 8028540:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028548:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802854c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802854e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028552:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028556:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802855a:	eef0 6a48 	vmov.f32	s13, s16
 802855e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028562:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028566:	ee37 8a48 	vsub.f32	s16, s14, s16
 802856a:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 802856e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028572:	eef0 6a68 	vmov.f32	s13, s17
 8028576:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802857a:	ee18 2a10 	vmov	r2, s16
 802857e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028582:	fb92 f3f3 	sdiv	r3, r2, r3
 8028586:	ee18 2a90 	vmov	r2, s17
 802858a:	9327      	str	r3, [sp, #156]	; 0x9c
 802858c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802858e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028592:	9328      	str	r3, [sp, #160]	; 0xa0
 8028594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028596:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028598:	3b01      	subs	r3, #1
 802859a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802859e:	930e      	str	r3, [sp, #56]	; 0x38
 80285a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80285a2:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80285a6:	bf08      	it	eq
 80285a8:	4613      	moveq	r3, r2
 80285aa:	9306      	str	r3, [sp, #24]
 80285ac:	eef0 8a67 	vmov.f32	s17, s15
 80285b0:	eeb0 8a47 	vmov.f32	s16, s14
 80285b4:	e621      	b.n	80281fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80285b6:	fb08 f505 	mul.w	r5, r8, r5
 80285ba:	fb09 5303 	mla	r3, r9, r3, r5
 80285be:	e6a1      	b.n	8028304 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80285c0:	4681      	mov	r9, r0
 80285c2:	e6c8      	b.n	8028356 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80285c4:	f1c1 0210 	rsb	r2, r1, #16
 80285c8:	4341      	muls	r1, r0
 80285ca:	fb09 1902 	mla	r9, r9, r2, r1
 80285ce:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80285d2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80285d6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80285da:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80285de:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80285e2:	ea42 0909 	orr.w	r9, r2, r9
 80285e6:	fa1f f289 	uxth.w	r2, r9
 80285ea:	e75b      	b.n	80284a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80285ec:	f8b7 c000 	ldrh.w	ip, [r7]
 80285f0:	43db      	mvns	r3, r3
 80285f2:	ea4f 202c 	mov.w	r0, ip, asr #8
 80285f6:	fa5f fe83 	uxtb.w	lr, r3
 80285fa:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80285fe:	fb00 f00e 	mul.w	r0, r0, lr
 8028602:	1c41      	adds	r1, r0, #1
 8028604:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028608:	1211      	asrs	r1, r2, #8
 802860a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802860e:	f021 0107 	bic.w	r1, r1, #7
 8028612:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028616:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802861a:	48d8      	ldr	r0, [pc, #864]	; (802897c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d4>)
 802861c:	fb05 f50e 	mul.w	r5, r5, lr
 8028620:	b2c9      	uxtb	r1, r1
 8028622:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8028626:	1c69      	adds	r1, r5, #1
 8028628:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802862c:	10d1      	asrs	r1, r2, #3
 802862e:	f021 0103 	bic.w	r1, r1, #3
 8028632:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8028636:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802863a:	b2db      	uxtb	r3, r3
 802863c:	00c9      	lsls	r1, r1, #3
 802863e:	fb03 f30e 	mul.w	r3, r3, lr
 8028642:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028646:	4301      	orrs	r1, r0
 8028648:	1c58      	adds	r0, r3, #1
 802864a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802864e:	00d2      	lsls	r2, r2, #3
 8028650:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028654:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028658:	430a      	orrs	r2, r1
 802865a:	e726      	b.n	80284aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 802865c:	f115 0e01 	adds.w	lr, r5, #1
 8028660:	f53f af24 	bmi.w	80284ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8028664:	4572      	cmp	r2, lr
 8028666:	f6ff af21 	blt.w	80284ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 802866a:	f110 0e01 	adds.w	lr, r0, #1
 802866e:	f53f af1d 	bmi.w	80284ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8028672:	4573      	cmp	r3, lr
 8028674:	f6ff af1a 	blt.w	80284ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8028678:	b21b      	sxth	r3, r3
 802867a:	b212      	sxth	r2, r2
 802867c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8028680:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8028684:	9301      	str	r3, [sp, #4]
 8028686:	9200      	str	r2, [sp, #0]
 8028688:	4639      	mov	r1, r7
 802868a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 802868e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028690:	f7ff fbf4 	bl	8027e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8028694:	e70a      	b.n	80284ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8028696:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028698:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802869c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802869e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80286a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80286a4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80286a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80286aa:	141f      	asrs	r7, r3, #16
 80286ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80286ae:	141b      	asrs	r3, r3, #16
 80286b0:	fb01 3707 	mla	r7, r1, r7, r3
 80286b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80286b6:	fa1f fc82 	uxth.w	ip, r2
 80286ba:	eb03 0a07 	add.w	sl, r3, r7
 80286be:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80286c2:	f813 9007 	ldrb.w	r9, [r3, r7]
 80286c6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80286ca:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80286ce:	b29b      	uxth	r3, r3
 80286d0:	2d00      	cmp	r5, #0
 80286d2:	f000 80fe 	beq.w	80288d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 80286d6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80286da:	940c      	str	r4, [sp, #48]	; 0x30
 80286dc:	eb0a 0b01 	add.w	fp, sl, r1
 80286e0:	fa1f fa85 	uxth.w	sl, r5
 80286e4:	fb0a fc0c 	mul.w	ip, sl, ip
 80286e8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80286ec:	fa1f fa8a 	uxth.w	sl, sl
 80286f0:	eba0 000c 	sub.w	r0, r0, ip
 80286f4:	eba3 030a 	sub.w	r3, r3, sl
 80286f8:	b280      	uxth	r0, r0
 80286fa:	fb08 f000 	mul.w	r0, r8, r0
 80286fe:	b29b      	uxth	r3, r3
 8028700:	fb09 0303 	mla	r3, r9, r3, r0
 8028704:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028706:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802870a:	940d      	str	r4, [sp, #52]	; 0x34
 802870c:	fb0a 3300 	mla	r3, sl, r0, r3
 8028710:	fb0c 3304 	mla	r3, ip, r4, r3
 8028714:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028718:	2b00      	cmp	r3, #0
 802871a:	f000 80cc 	beq.w	80288b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70e>
 802871e:	9808      	ldr	r0, [sp, #32]
 8028720:	9c08      	ldr	r4, [sp, #32]
 8028722:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028726:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802872a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802872e:	f000 80d5 	beq.w	80288dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8028732:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8028736:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802873a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802873e:	fb09 f707 	mul.w	r7, r9, r7
 8028742:	fb0a fc0c 	mul.w	ip, sl, ip
 8028746:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802874a:	f107 0b20 	add.w	fp, r7, #32
 802874e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8028752:	44cc      	add	ip, r9
 8028754:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8028758:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802875c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8028760:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8028764:	ea4c 0909 	orr.w	r9, ip, r9
 8028768:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802876c:	8847      	ldrh	r7, [r0, #2]
 802876e:	d019      	beq.n	80287a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8028770:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8028774:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8028778:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802877c:	fb08 f807 	mul.w	r8, r8, r7
 8028780:	fb0a fc0c 	mul.w	ip, sl, ip
 8028784:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8028788:	f108 0b20 	add.w	fp, r8, #32
 802878c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8028790:	44bc      	add	ip, r7
 8028792:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8028796:	0a3f      	lsrs	r7, r7, #8
 8028798:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802879c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80287a0:	ea4c 0707 	orr.w	r7, ip, r7
 80287a4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80287a8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80287ac:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80287b0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80287b4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80287b8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80287bc:	ea4c 0909 	orr.w	r9, ip, r9
 80287c0:	ea4a 0707 	orr.w	r7, sl, r7
 80287c4:	2d00      	cmp	r5, #0
 80287c6:	f000 808b 	beq.w	80288e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 80287ca:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80287ce:	3901      	subs	r1, #1
 80287d0:	0049      	lsls	r1, r1, #1
 80287d2:	3102      	adds	r1, #2
 80287d4:	eb00 0c01 	add.w	ip, r0, r1
 80287d8:	5a41      	ldrh	r1, [r0, r1]
 80287da:	980c      	ldr	r0, [sp, #48]	; 0x30
 80287dc:	28ff      	cmp	r0, #255	; 0xff
 80287de:	d019      	beq.n	8028814 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 80287e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80287e2:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80287e6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80287ea:	fb04 fa01 	mul.w	sl, r4, r1
 80287ee:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80287f2:	fb08 f800 	mul.w	r8, r8, r0
 80287f6:	f10a 0020 	add.w	r0, sl, #32
 80287fa:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80287fe:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8028802:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028806:	4441      	add	r1, r8
 8028808:	0a00      	lsrs	r0, r0, #8
 802880a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802880e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028812:	4301      	orrs	r1, r0
 8028814:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028816:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802881a:	2cff      	cmp	r4, #255	; 0xff
 802881c:	d01a      	beq.n	8028854 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 802881e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8028822:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028826:	fb04 fa00 	mul.w	sl, r4, r0
 802882a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802882e:	fb08 f80c 	mul.w	r8, r8, ip
 8028832:	f10a 0c20 	add.w	ip, sl, #32
 8028836:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802883a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802883e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028842:	4440      	add	r0, r8
 8028844:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028848:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802884c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028850:	ea40 000c 	orr.w	r0, r0, ip
 8028854:	fb15 fc02 	smulbb	ip, r5, r2
 8028858:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802885c:	f1c5 0810 	rsb	r8, r5, #16
 8028860:	eba8 0802 	sub.w	r8, r8, r2
 8028864:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8028868:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802886c:	437a      	muls	r2, r7
 802886e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8028872:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8028876:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802887a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802887e:	fb09 2208 	mla	r2, r9, r8, r2
 8028882:	ea4a 0101 	orr.w	r1, sl, r1
 8028886:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802888a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802888e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028892:	fb05 2201 	mla	r2, r5, r1, r2
 8028896:	ea4b 0000 	orr.w	r0, fp, r0
 802889a:	fb0c 2200 	mla	r2, ip, r0, r2
 802889e:	0d57      	lsrs	r7, r2, #21
 80288a0:	0952      	lsrs	r2, r2, #5
 80288a2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80288a6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80288aa:	433a      	orrs	r2, r7
 80288ac:	2bff      	cmp	r3, #255	; 0xff
 80288ae:	b292      	uxth	r2, r2
 80288b0:	d127      	bne.n	8028902 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 80288b2:	f8ae 2000 	strh.w	r2, [lr]
 80288b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80288b8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80288ba:	4413      	add	r3, r2
 80288bc:	9325      	str	r3, [sp, #148]	; 0x94
 80288be:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80288c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80288c2:	441a      	add	r2, r3
 80288c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80288c6:	9226      	str	r2, [sp, #152]	; 0x98
 80288c8:	3b01      	subs	r3, #1
 80288ca:	f10e 0e02 	add.w	lr, lr, #2
 80288ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80288d0:	e627      	b.n	8028522 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80288d2:	fb08 f000 	mul.w	r0, r8, r0
 80288d6:	fb09 0303 	mla	r3, r9, r3, r0
 80288da:	e71b      	b.n	8028714 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 80288dc:	46b9      	mov	r9, r7
 80288de:	e743      	b.n	8028768 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 80288e0:	f1c2 0110 	rsb	r1, r2, #16
 80288e4:	437a      	muls	r2, r7
 80288e6:	fb09 2901 	mla	r9, r9, r1, r2
 80288ea:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80288ee:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80288f2:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80288f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80288fa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80288fe:	4302      	orrs	r2, r0
 8028900:	e7d4      	b.n	80288ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8028902:	f8be 7000 	ldrh.w	r7, [lr]
 8028906:	4c1d      	ldr	r4, [pc, #116]	; (802897c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d4>)
 8028908:	43db      	mvns	r3, r3
 802890a:	1238      	asrs	r0, r7, #8
 802890c:	fa5f fc83 	uxtb.w	ip, r3
 8028910:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028914:	10fd      	asrs	r5, r7, #3
 8028916:	fb00 f00c 	mul.w	r0, r0, ip
 802891a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802891e:	fb05 f10c 	mul.w	r1, r5, ip
 8028922:	1c45      	adds	r5, r0, #1
 8028924:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028928:	1215      	asrs	r5, r2, #8
 802892a:	f025 0507 	bic.w	r5, r5, #7
 802892e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028932:	1c4d      	adds	r5, r1, #1
 8028934:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8028938:	10d1      	asrs	r1, r2, #3
 802893a:	f021 0103 	bic.w	r1, r1, #3
 802893e:	00fb      	lsls	r3, r7, #3
 8028940:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8028944:	b2db      	uxtb	r3, r3
 8028946:	b2c0      	uxtb	r0, r0
 8028948:	00c9      	lsls	r1, r1, #3
 802894a:	fb03 f30c 	mul.w	r3, r3, ip
 802894e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028952:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8028956:	4308      	orrs	r0, r1
 8028958:	1c59      	adds	r1, r3, #1
 802895a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802895e:	00d2      	lsls	r2, r2, #3
 8028960:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028964:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8028968:	4318      	orrs	r0, r3
 802896a:	f8ae 0000 	strh.w	r0, [lr]
 802896e:	e7a2      	b.n	80288b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70e>
 8028970:	b013      	add	sp, #76	; 0x4c
 8028972:	ecbd 8b08 	vpop	{d8-d11}
 8028976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802897a:	bf00      	nop
 802897c:	fffff800 	.word	0xfffff800

08028980 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8028980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028984:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8028988:	fb0c 4e03 	mla	lr, ip, r3, r4
 802898c:	f1bc 0f00 	cmp.w	ip, #0
 8028990:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8028994:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8028998:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 802899c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80289a0:	8808      	ldrh	r0, [r1, #0]
 80289a2:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 80289a6:	db2f      	blt.n	8028a08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80289a8:	45e2      	cmp	sl, ip
 80289aa:	dd2d      	ble.n	8028a08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80289ac:	2c00      	cmp	r4, #0
 80289ae:	db29      	blt.n	8028a04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80289b0:	42a3      	cmp	r3, r4
 80289b2:	dd27      	ble.n	8028a04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80289b4:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 80289b8:	1c62      	adds	r2, r4, #1
 80289ba:	d428      	bmi.n	8028a0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80289bc:	4293      	cmp	r3, r2
 80289be:	dd26      	ble.n	8028a0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80289c0:	b32f      	cbz	r7, 8028a0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 80289c2:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 80289c6:	f11c 0c01 	adds.w	ip, ip, #1
 80289ca:	d424      	bmi.n	8028a16 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 80289cc:	45e2      	cmp	sl, ip
 80289ce:	dd22      	ble.n	8028a16 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 80289d0:	2e00      	cmp	r6, #0
 80289d2:	f000 809d 	beq.w	8028b10 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 80289d6:	2c00      	cmp	r4, #0
 80289d8:	db1b      	blt.n	8028a12 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 80289da:	42a3      	cmp	r3, r4
 80289dc:	dd19      	ble.n	8028a12 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 80289de:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 80289e2:	3401      	adds	r4, #1
 80289e4:	d41a      	bmi.n	8028a1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 80289e6:	42a3      	cmp	r3, r4
 80289e8:	dd18      	ble.n	8028a1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 80289ea:	b1cf      	cbz	r7, 8028a20 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 80289ec:	3301      	adds	r3, #1
 80289ee:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 80289f2:	2f0f      	cmp	r7, #15
 80289f4:	d915      	bls.n	8028a22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 80289f6:	4b49      	ldr	r3, [pc, #292]	; (8028b1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 80289f8:	4a49      	ldr	r2, [pc, #292]	; (8028b20 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 80289fa:	484a      	ldr	r0, [pc, #296]	; (8028b24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 80289fc:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8028a00:	f005 fa5e 	bl	802dec0 <__assert_func>
 8028a04:	4681      	mov	r9, r0
 8028a06:	e7d7      	b.n	80289b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8028a08:	4686      	mov	lr, r0
 8028a0a:	4681      	mov	r9, r0
 8028a0c:	e7db      	b.n	80289c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8028a0e:	4686      	mov	lr, r0
 8028a10:	e7d9      	b.n	80289c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8028a12:	4684      	mov	ip, r0
 8028a14:	e7e5      	b.n	80289e2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8028a16:	4603      	mov	r3, r0
 8028a18:	4684      	mov	ip, r0
 8028a1a:	e7ea      	b.n	80289f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8028a1c:	4603      	mov	r3, r0
 8028a1e:	e7e8      	b.n	80289f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8028a20:	4603      	mov	r3, r0
 8028a22:	2e0f      	cmp	r6, #15
 8028a24:	d8e7      	bhi.n	80289f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8028a26:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8028a2a:	fb17 f806 	smulbb	r8, r7, r6
 8028a2e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8028a32:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8028a36:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028a3a:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8028a3e:	ea44 0909 	orr.w	r9, r4, r9
 8028a42:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028a46:	f1c6 0410 	rsb	r4, r6, #16
 8028a4a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028a4e:	1be4      	subs	r4, r4, r7
 8028a50:	041a      	lsls	r2, r3, #16
 8028a52:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8028a56:	ea4a 0e0e 	orr.w	lr, sl, lr
 8028a5a:	fb07 fe0e 	mul.w	lr, r7, lr
 8028a5e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028a62:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8028a66:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028a6a:	fb04 e409 	mla	r4, r4, r9, lr
 8028a6e:	4313      	orrs	r3, r2
 8028a70:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8028a74:	fb08 4303 	mla	r3, r8, r3, r4
 8028a78:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028a7c:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8028a80:	4322      	orrs	r2, r4
 8028a82:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8028a86:	fb06 3202 	mla	r2, r6, r2, r3
 8028a8a:	0d53      	lsrs	r3, r2, #21
 8028a8c:	0952      	lsrs	r2, r2, #5
 8028a8e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028a92:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028a96:	431a      	orrs	r2, r3
 8028a98:	b293      	uxth	r3, r2
 8028a9a:	b2af      	uxth	r7, r5
 8028a9c:	1202      	asrs	r2, r0, #8
 8028a9e:	43ed      	mvns	r5, r5
 8028aa0:	b2ed      	uxtb	r5, r5
 8028aa2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8028aa6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8028aaa:	fb12 f205 	smulbb	r2, r2, r5
 8028aae:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8028ab2:	fb0c 2c07 	mla	ip, ip, r7, r2
 8028ab6:	00dc      	lsls	r4, r3, #3
 8028ab8:	10da      	asrs	r2, r3, #3
 8028aba:	10c6      	asrs	r6, r0, #3
 8028abc:	00c3      	lsls	r3, r0, #3
 8028abe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8028ac2:	b2db      	uxtb	r3, r3
 8028ac4:	fb16 f605 	smulbb	r6, r6, r5
 8028ac8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028acc:	b2e4      	uxtb	r4, r4
 8028ace:	fb13 f305 	smulbb	r3, r3, r5
 8028ad2:	fa1f fc8c 	uxth.w	ip, ip
 8028ad6:	fb02 6207 	mla	r2, r2, r7, r6
 8028ada:	fb04 3307 	mla	r3, r4, r7, r3
 8028ade:	b296      	uxth	r6, r2
 8028ae0:	b29a      	uxth	r2, r3
 8028ae2:	f10c 0301 	add.w	r3, ip, #1
 8028ae6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028aea:	1c53      	adds	r3, r2, #1
 8028aec:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028af0:	1c72      	adds	r2, r6, #1
 8028af2:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8028af6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8028afa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028afe:	0952      	lsrs	r2, r2, #5
 8028b00:	ea43 030c 	orr.w	r3, r3, ip
 8028b04:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028b08:	4313      	orrs	r3, r2
 8028b0a:	800b      	strh	r3, [r1, #0]
 8028b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028b10:	2f0f      	cmp	r7, #15
 8028b12:	f63f af70 	bhi.w	80289f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8028b16:	4603      	mov	r3, r0
 8028b18:	4684      	mov	ip, r0
 8028b1a:	e784      	b.n	8028a26 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8028b1c:	08032be1 	.word	0x08032be1
 8028b20:	08033257 	.word	0x08033257
 8028b24:	08032c65 	.word	0x08032c65

08028b28 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b2c:	ed2d 8b08 	vpush	{d8-d11}
 8028b30:	b093      	sub	sp, #76	; 0x4c
 8028b32:	461d      	mov	r5, r3
 8028b34:	9210      	str	r2, [sp, #64]	; 0x40
 8028b36:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028b38:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8028b3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8028b3e:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 8028b42:	910a      	str	r1, [sp, #40]	; 0x28
 8028b44:	6859      	ldr	r1, [r3, #4]
 8028b46:	681b      	ldr	r3, [r3, #0]
 8028b48:	9011      	str	r0, [sp, #68]	; 0x44
 8028b4a:	fb01 2707 	mla	r7, r1, r7, r2
 8028b4e:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8028b52:	9307      	str	r3, [sp, #28]
 8028b54:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028b56:	681b      	ldr	r3, [r3, #0]
 8028b58:	9309      	str	r3, [sp, #36]	; 0x24
 8028b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028b5c:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8028b60:	43db      	mvns	r3, r3
 8028b62:	b2db      	uxtb	r3, r3
 8028b64:	eeb0 aa40 	vmov.f32	s20, s0
 8028b68:	eef0 9a60 	vmov.f32	s19, s1
 8028b6c:	eeb0 9a41 	vmov.f32	s18, s2
 8028b70:	eeb0 8a62 	vmov.f32	s16, s5
 8028b74:	eef0 8a43 	vmov.f32	s17, s6
 8028b78:	eef0 ba44 	vmov.f32	s23, s8
 8028b7c:	eeb0 ba64 	vmov.f32	s22, s9
 8028b80:	eef0 aa45 	vmov.f32	s21, s10
 8028b84:	9308      	str	r3, [sp, #32]
 8028b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028b88:	2b00      	cmp	r3, #0
 8028b8a:	dc03      	bgt.n	8028b94 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028b8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028b8e:	2b00      	cmp	r3, #0
 8028b90:	f340 8203 	ble.w	8028f9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 8028b94:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028b96:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028b9a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028b9e:	1e48      	subs	r0, r1, #1
 8028ba0:	f102 3cff 	add.w	ip, r2, #4294967295
 8028ba4:	2d00      	cmp	r5, #0
 8028ba6:	f340 80da 	ble.w	8028d5e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8028baa:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028bae:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028bb2:	d406      	bmi.n	8028bc2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028bb4:	4586      	cmp	lr, r0
 8028bb6:	da04      	bge.n	8028bc2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028bb8:	2b00      	cmp	r3, #0
 8028bba:	db02      	blt.n	8028bc2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028bbc:	4563      	cmp	r3, ip
 8028bbe:	f2c0 80cf 	blt.w	8028d60 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8028bc2:	f11e 0e01 	adds.w	lr, lr, #1
 8028bc6:	f100 80c1 	bmi.w	8028d4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028bca:	4571      	cmp	r1, lr
 8028bcc:	f2c0 80be 	blt.w	8028d4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028bd0:	3301      	adds	r3, #1
 8028bd2:	f100 80bb 	bmi.w	8028d4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028bd6:	429a      	cmp	r2, r3
 8028bd8:	f2c0 80b8 	blt.w	8028d4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028bdc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8028be0:	46a9      	mov	r9, r5
 8028be2:	f1b9 0f00 	cmp.w	r9, #0
 8028be6:	f340 80d8 	ble.w	8028d9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8028bea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028bec:	1421      	asrs	r1, r4, #16
 8028bee:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028bf2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028bf6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028bfa:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028bfe:	f100 8111 	bmi.w	8028e24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028c02:	f10e 3aff 	add.w	sl, lr, #4294967295
 8028c06:	4551      	cmp	r1, sl
 8028c08:	f280 810c 	bge.w	8028e24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028c0c:	2800      	cmp	r0, #0
 8028c0e:	f2c0 8109 	blt.w	8028e24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028c12:	f103 3aff 	add.w	sl, r3, #4294967295
 8028c16:	4550      	cmp	r0, sl
 8028c18:	f280 8104 	bge.w	8028e24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028c1c:	fa0f f38e 	sxth.w	r3, lr
 8028c20:	fb00 1103 	mla	r1, r0, r3, r1
 8028c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028c26:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8028c2a:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8028c2e:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8028c32:	f1bc 0f00 	cmp.w	ip, #0
 8028c36:	d007      	beq.n	8028c48 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8028c38:	005b      	lsls	r3, r3, #1
 8028c3a:	eb0a 0003 	add.w	r0, sl, r3
 8028c3e:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8028c42:	930c      	str	r3, [sp, #48]	; 0x30
 8028c44:	8843      	ldrh	r3, [r0, #2]
 8028c46:	930d      	str	r3, [sp, #52]	; 0x34
 8028c48:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8028c4c:	fb12 f30c 	smulbb	r3, r2, ip
 8028c50:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028c54:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8028c58:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028c5c:	10db      	asrs	r3, r3, #3
 8028c5e:	ea40 000e 	orr.w	r0, r0, lr
 8028c62:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028c66:	f1cc 0e10 	rsb	lr, ip, #16
 8028c6a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028c6e:	ebae 0e02 	sub.w	lr, lr, r2
 8028c72:	ea4a 0101 	orr.w	r1, sl, r1
 8028c76:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028c7a:	4351      	muls	r1, r2
 8028c7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028c7e:	9f08      	ldr	r7, [sp, #32]
 8028c80:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8028c84:	fb0e 1e00 	mla	lr, lr, r0, r1
 8028c88:	0410      	lsls	r0, r2, #16
 8028c8a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028c8e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028c92:	4310      	orrs	r0, r2
 8028c94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028c96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028c98:	0412      	lsls	r2, r2, #16
 8028c9a:	fb03 e000 	mla	r0, r3, r0, lr
 8028c9e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028ca2:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8028ca6:	ea42 020e 	orr.w	r2, r2, lr
 8028caa:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8028cae:	fb03 0302 	mla	r3, r3, r2, r0
 8028cb2:	0d5a      	lsrs	r2, r3, #21
 8028cb4:	095b      	lsrs	r3, r3, #5
 8028cb6:	f8b8 0000 	ldrh.w	r0, [r8]
 8028cba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028cbe:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028cc2:	4313      	orrs	r3, r2
 8028cc4:	b29b      	uxth	r3, r3
 8028cc6:	1201      	asrs	r1, r0, #8
 8028cc8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8028ccc:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8028cd0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028cd4:	fb11 f107 	smulbb	r1, r1, r7
 8028cd8:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8028cdc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8028ce0:	00c0      	lsls	r0, r0, #3
 8028ce2:	fb0c 1c02 	mla	ip, ip, r2, r1
 8028ce6:	b2c0      	uxtb	r0, r0
 8028ce8:	10d9      	asrs	r1, r3, #3
 8028cea:	00db      	lsls	r3, r3, #3
 8028cec:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8028cf0:	b2db      	uxtb	r3, r3
 8028cf2:	fb10 f007 	smulbb	r0, r0, r7
 8028cf6:	fa1f fc8c 	uxth.w	ip, ip
 8028cfa:	fb03 0302 	mla	r3, r3, r2, r0
 8028cfe:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028d02:	fb1e fe07 	smulbb	lr, lr, r7
 8028d06:	fb01 e102 	mla	r1, r1, r2, lr
 8028d0a:	b29a      	uxth	r2, r3
 8028d0c:	f10c 0301 	add.w	r3, ip, #1
 8028d10:	b289      	uxth	r1, r1
 8028d12:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028d16:	1c53      	adds	r3, r2, #1
 8028d18:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028d1c:	1c4a      	adds	r2, r1, #1
 8028d1e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028d22:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8028d26:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028d2a:	0949      	lsrs	r1, r1, #5
 8028d2c:	ea43 030c 	orr.w	r3, r3, ip
 8028d30:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028d34:	430b      	orrs	r3, r1
 8028d36:	f8a8 3000 	strh.w	r3, [r8]
 8028d3a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028d3c:	441c      	add	r4, r3
 8028d3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028d40:	f108 0802 	add.w	r8, r8, #2
 8028d44:	441e      	add	r6, r3
 8028d46:	f109 39ff 	add.w	r9, r9, #4294967295
 8028d4a:	e74a      	b.n	8028be2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8028d4c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028d4e:	441c      	add	r4, r3
 8028d50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028d52:	441e      	add	r6, r3
 8028d54:	9b07      	ldr	r3, [sp, #28]
 8028d56:	3302      	adds	r3, #2
 8028d58:	3d01      	subs	r5, #1
 8028d5a:	9307      	str	r3, [sp, #28]
 8028d5c:	e722      	b.n	8028ba4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028d5e:	d022      	beq.n	8028da6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8028d60:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8028d62:	1e6b      	subs	r3, r5, #1
 8028d64:	fb00 4003 	mla	r0, r0, r3, r4
 8028d68:	1400      	asrs	r0, r0, #16
 8028d6a:	f53f af37 	bmi.w	8028bdc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028d6e:	3901      	subs	r1, #1
 8028d70:	4288      	cmp	r0, r1
 8028d72:	f6bf af33 	bge.w	8028bdc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028d76:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8028d78:	fb01 6303 	mla	r3, r1, r3, r6
 8028d7c:	141b      	asrs	r3, r3, #16
 8028d7e:	f53f af2d 	bmi.w	8028bdc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028d82:	3a01      	subs	r2, #1
 8028d84:	4293      	cmp	r3, r2
 8028d86:	f6bf af29 	bge.w	8028bdc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028d8a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8028d8e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8028d92:	46a8      	mov	r8, r5
 8028d94:	f1b8 0f00 	cmp.w	r8, #0
 8028d98:	dc5e      	bgt.n	8028e58 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8028d9a:	9b07      	ldr	r3, [sp, #28]
 8028d9c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028da0:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028da4:	9307      	str	r3, [sp, #28]
 8028da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028da8:	2b00      	cmp	r3, #0
 8028daa:	f340 80f6 	ble.w	8028f9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 8028dae:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028db2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028db6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028dba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028dbc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028dc0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028dc4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028dc8:	eef0 6a48 	vmov.f32	s13, s16
 8028dcc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028dd0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028dd4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028dd8:	ee16 4a90 	vmov	r4, s13
 8028ddc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028de0:	eef0 6a68 	vmov.f32	s13, s17
 8028de4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028de8:	ee18 2a10 	vmov	r2, s16
 8028dec:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028df0:	fb92 f3f3 	sdiv	r3, r2, r3
 8028df4:	ee18 2a90 	vmov	r2, s17
 8028df8:	9327      	str	r3, [sp, #156]	; 0x9c
 8028dfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028dfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8028e00:	9328      	str	r3, [sp, #160]	; 0xa0
 8028e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028e04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028e06:	3b01      	subs	r3, #1
 8028e08:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028e0c:	930a      	str	r3, [sp, #40]	; 0x28
 8028e0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028e10:	ee16 6a90 	vmov	r6, s13
 8028e14:	bf14      	ite	ne
 8028e16:	461d      	movne	r5, r3
 8028e18:	4615      	moveq	r5, r2
 8028e1a:	eef0 8a67 	vmov.f32	s17, s15
 8028e1e:	eeb0 8a47 	vmov.f32	s16, s14
 8028e22:	e6b0      	b.n	8028b86 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8028e24:	f111 0a01 	adds.w	sl, r1, #1
 8028e28:	d487      	bmi.n	8028d3a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028e2a:	45d6      	cmp	lr, sl
 8028e2c:	db85      	blt.n	8028d3a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028e2e:	f110 0a01 	adds.w	sl, r0, #1
 8028e32:	d482      	bmi.n	8028d3a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028e34:	4553      	cmp	r3, sl
 8028e36:	db80      	blt.n	8028d3a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028e38:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8028e3a:	9101      	str	r1, [sp, #4]
 8028e3c:	b21b      	sxth	r3, r3
 8028e3e:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8028e42:	9300      	str	r3, [sp, #0]
 8028e44:	e9cd c704 	strd	ip, r7, [sp, #16]
 8028e48:	fa0f f38e 	sxth.w	r3, lr
 8028e4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028e4e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028e50:	4641      	mov	r1, r8
 8028e52:	f7ff fd95 	bl	8028980 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8028e56:	e770      	b.n	8028d3a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028e58:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028e5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8028e5c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028e60:	1430      	asrs	r0, r6, #16
 8028e62:	1423      	asrs	r3, r4, #16
 8028e64:	fb01 3000 	mla	r0, r1, r0, r3
 8028e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028e6a:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8028e6e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8028e72:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028e76:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028e7a:	8858      	ldrh	r0, [r3, #2]
 8028e7c:	f1be 0f00 	cmp.w	lr, #0
 8028e80:	d00b      	beq.n	8028e9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8028e82:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8028e86:	3901      	subs	r1, #1
 8028e88:	0049      	lsls	r1, r1, #1
 8028e8a:	3102      	adds	r1, #2
 8028e8c:	eb03 0b01 	add.w	fp, r3, r1
 8028e90:	5a5b      	ldrh	r3, [r3, r1]
 8028e92:	930e      	str	r3, [sp, #56]	; 0x38
 8028e94:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028e98:	930f      	str	r3, [sp, #60]	; 0x3c
 8028e9a:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8028e9e:	fb12 f30e 	smulbb	r3, r2, lr
 8028ea2:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028ea6:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8028eaa:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8028eae:	10db      	asrs	r3, r3, #3
 8028eb0:	ea41 010c 	orr.w	r1, r1, ip
 8028eb4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028eb8:	f1ce 0c10 	rsb	ip, lr, #16
 8028ebc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028ec0:	ebac 0c02 	sub.w	ip, ip, r2
 8028ec4:	ea4b 0000 	orr.w	r0, fp, r0
 8028ec8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028ecc:	4350      	muls	r0, r2
 8028ece:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028ed0:	9f08      	ldr	r7, [sp, #32]
 8028ed2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8028ed6:	fb0c 0c01 	mla	ip, ip, r1, r0
 8028eda:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8028ede:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8028ee2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028ee4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8028ee6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028eea:	0412      	lsls	r2, r2, #16
 8028eec:	ea4b 0101 	orr.w	r1, fp, r1
 8028ef0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028ef4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028ef8:	fb03 c101 	mla	r1, r3, r1, ip
 8028efc:	4302      	orrs	r2, r0
 8028efe:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8028f02:	fb03 1202 	mla	r2, r3, r2, r1
 8028f06:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8028f0a:	0952      	lsrs	r2, r2, #5
 8028f0c:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8028f10:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8028f14:	f8b9 2000 	ldrh.w	r2, [r9]
 8028f18:	ea4b 0303 	orr.w	r3, fp, r3
 8028f1c:	b29b      	uxth	r3, r3
 8028f1e:	1211      	asrs	r1, r2, #8
 8028f20:	1218      	asrs	r0, r3, #8
 8028f22:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028f26:	fb11 f107 	smulbb	r1, r1, r7
 8028f2a:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8028f2e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028f32:	00d2      	lsls	r2, r2, #3
 8028f34:	fb00 100a 	mla	r0, r0, sl, r1
 8028f38:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8028f3c:	10d9      	asrs	r1, r3, #3
 8028f3e:	b2d2      	uxtb	r2, r2
 8028f40:	00db      	lsls	r3, r3, #3
 8028f42:	fb1c fc07 	smulbb	ip, ip, r7
 8028f46:	fb12 f207 	smulbb	r2, r2, r7
 8028f4a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028f4e:	b2db      	uxtb	r3, r3
 8028f50:	b280      	uxth	r0, r0
 8028f52:	fb01 c10a 	mla	r1, r1, sl, ip
 8028f56:	fb03 230a 	mla	r3, r3, sl, r2
 8028f5a:	b29b      	uxth	r3, r3
 8028f5c:	b289      	uxth	r1, r1
 8028f5e:	1c42      	adds	r2, r0, #1
 8028f60:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028f64:	f101 0c01 	add.w	ip, r1, #1
 8028f68:	1c5a      	adds	r2, r3, #1
 8028f6a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028f6e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8028f72:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028f74:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028f78:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8028f7c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028f80:	4310      	orrs	r0, r2
 8028f82:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028f86:	441c      	add	r4, r3
 8028f88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028f8a:	ea40 000c 	orr.w	r0, r0, ip
 8028f8e:	f829 0b02 	strh.w	r0, [r9], #2
 8028f92:	441e      	add	r6, r3
 8028f94:	f108 38ff 	add.w	r8, r8, #4294967295
 8028f98:	e6fc      	b.n	8028d94 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8028f9a:	b013      	add	sp, #76	; 0x4c
 8028f9c:	ecbd 8b08 	vpop	{d8-d11}
 8028fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028fa4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8028fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028fa8:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8028fac:	fb06 5c03 	mla	ip, r6, r3, r5
 8028fb0:	2e00      	cmp	r6, #0
 8028fb2:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8028fb6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8028fba:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8028fbe:	8808      	ldrh	r0, [r1, #0]
 8028fc0:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8028fc4:	db2e      	blt.n	8029024 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8028fc6:	45b0      	cmp	r8, r6
 8028fc8:	dd2c      	ble.n	8029024 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8028fca:	2d00      	cmp	r5, #0
 8028fcc:	db28      	blt.n	8029020 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8028fce:	42ab      	cmp	r3, r5
 8028fd0:	dd26      	ble.n	8029020 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8028fd2:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8028fd6:	1c6a      	adds	r2, r5, #1
 8028fd8:	d427      	bmi.n	802902a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8028fda:	4293      	cmp	r3, r2
 8028fdc:	dd25      	ble.n	802902a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8028fde:	b324      	cbz	r4, 802902a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8028fe0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8028fe4:	3601      	adds	r6, #1
 8028fe6:	d424      	bmi.n	8029032 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8028fe8:	45b0      	cmp	r8, r6
 8028fea:	dd22      	ble.n	8029032 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8028fec:	b31f      	cbz	r7, 8029036 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8028fee:	2d00      	cmp	r5, #0
 8028ff0:	db1d      	blt.n	802902e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8028ff2:	42ab      	cmp	r3, r5
 8028ff4:	dd1b      	ble.n	802902e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8028ff6:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8028ffa:	3501      	adds	r5, #1
 8028ffc:	d405      	bmi.n	802900a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8028ffe:	42ab      	cmp	r3, r5
 8029000:	dd03      	ble.n	802900a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8029002:	b124      	cbz	r4, 802900e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8029004:	3301      	adds	r3, #1
 8029006:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 802900a:	2c0f      	cmp	r4, #15
 802900c:	d801      	bhi.n	8029012 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802900e:	2f0f      	cmp	r7, #15
 8029010:	d914      	bls.n	802903c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8029012:	4b27      	ldr	r3, [pc, #156]	; (80290b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8029014:	4a27      	ldr	r2, [pc, #156]	; (80290b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8029016:	4828      	ldr	r0, [pc, #160]	; (80290b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8029018:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 802901c:	f004 ff50 	bl	802dec0 <__assert_func>
 8029020:	4684      	mov	ip, r0
 8029022:	e7d8      	b.n	8028fd6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8029024:	4602      	mov	r2, r0
 8029026:	4684      	mov	ip, r0
 8029028:	e7dc      	b.n	8028fe4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802902a:	4602      	mov	r2, r0
 802902c:	e7da      	b.n	8028fe4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802902e:	4606      	mov	r6, r0
 8029030:	e7e3      	b.n	8028ffa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8029032:	4606      	mov	r6, r0
 8029034:	e7e9      	b.n	802900a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8029036:	2c0f      	cmp	r4, #15
 8029038:	d8eb      	bhi.n	8029012 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802903a:	4606      	mov	r6, r0
 802903c:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8029040:	fb14 f307 	smulbb	r3, r4, r7
 8029044:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8029048:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 802904c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8029050:	10db      	asrs	r3, r3, #3
 8029052:	ea45 0c0c 	orr.w	ip, r5, ip
 8029056:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802905a:	f1c7 0510 	rsb	r5, r7, #16
 802905e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8029062:	1b2d      	subs	r5, r5, r4
 8029064:	ea4e 0202 	orr.w	r2, lr, r2
 8029068:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 802906c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8029070:	4354      	muls	r4, r2
 8029072:	fb05 450c 	mla	r5, r5, ip, r4
 8029076:	0404      	lsls	r4, r0, #16
 8029078:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802907c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029080:	4320      	orrs	r0, r4
 8029082:	fb03 5400 	mla	r4, r3, r0, r5
 8029086:	0430      	lsls	r0, r6, #16
 8029088:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802908c:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8029090:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8029094:	4330      	orrs	r0, r6
 8029096:	fb07 4000 	mla	r0, r7, r0, r4
 802909a:	0d43      	lsrs	r3, r0, #21
 802909c:	0940      	lsrs	r0, r0, #5
 802909e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80290a2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80290a6:	4318      	orrs	r0, r3
 80290a8:	8008      	strh	r0, [r1, #0]
 80290aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80290ae:	bf00      	nop
 80290b0:	08032be1 	.word	0x08032be1
 80290b4:	08033257 	.word	0x08033257
 80290b8:	08032c65 	.word	0x08032c65

080290bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80290bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80290c0:	ed2d 8b08 	vpush	{d8-d11}
 80290c4:	b08f      	sub	sp, #60	; 0x3c
 80290c6:	461d      	mov	r5, r3
 80290c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80290ca:	920c      	str	r2, [sp, #48]	; 0x30
 80290cc:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 80290d0:	9107      	str	r1, [sp, #28]
 80290d2:	6859      	ldr	r1, [r3, #4]
 80290d4:	681b      	ldr	r3, [r3, #0]
 80290d6:	900d      	str	r0, [sp, #52]	; 0x34
 80290d8:	fb01 2707 	mla	r7, r1, r7, r2
 80290dc:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80290e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80290e2:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80290e6:	f8d3 8000 	ldr.w	r8, [r3]
 80290ea:	eeb0 aa40 	vmov.f32	s20, s0
 80290ee:	eef0 9a60 	vmov.f32	s19, s1
 80290f2:	eeb0 9a41 	vmov.f32	s18, s2
 80290f6:	eeb0 8a62 	vmov.f32	s16, s5
 80290fa:	eef0 8a43 	vmov.f32	s17, s6
 80290fe:	eef0 ba44 	vmov.f32	s23, s8
 8029102:	eeb0 ba64 	vmov.f32	s22, s9
 8029106:	eef0 aa45 	vmov.f32	s21, s10
 802910a:	9b07      	ldr	r3, [sp, #28]
 802910c:	2b00      	cmp	r3, #0
 802910e:	dc03      	bgt.n	8029118 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8029110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029112:	2b00      	cmp	r3, #0
 8029114:	f340 8181 	ble.w	802941a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8029118:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802911a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802911e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029122:	1e48      	subs	r0, r1, #1
 8029124:	f102 3cff 	add.w	ip, r2, #4294967295
 8029128:	2d00      	cmp	r5, #0
 802912a:	f340 809b 	ble.w	8029264 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 802912e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029132:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029136:	d406      	bmi.n	8029146 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8029138:	4586      	cmp	lr, r0
 802913a:	da04      	bge.n	8029146 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802913c:	2b00      	cmp	r3, #0
 802913e:	db02      	blt.n	8029146 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8029140:	4563      	cmp	r3, ip
 8029142:	f2c0 8090 	blt.w	8029266 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8029146:	f11e 0e01 	adds.w	lr, lr, #1
 802914a:	f100 8084 	bmi.w	8029256 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802914e:	4571      	cmp	r1, lr
 8029150:	f2c0 8081 	blt.w	8029256 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8029154:	3301      	adds	r3, #1
 8029156:	d47e      	bmi.n	8029256 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8029158:	429a      	cmp	r2, r3
 802915a:	db7c      	blt.n	8029256 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802915c:	46aa      	mov	sl, r5
 802915e:	46b9      	mov	r9, r7
 8029160:	f1ba 0f00 	cmp.w	sl, #0
 8029164:	f340 8099 	ble.w	802929a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8029168:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802916a:	1421      	asrs	r1, r4, #16
 802916c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8029170:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029174:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8029178:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802917c:	f100 80d0 	bmi.w	8029320 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8029180:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029184:	4559      	cmp	r1, fp
 8029186:	f280 80cb 	bge.w	8029320 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 802918a:	2800      	cmp	r0, #0
 802918c:	f2c0 80c8 	blt.w	8029320 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8029190:	f103 3bff 	add.w	fp, r3, #4294967295
 8029194:	4558      	cmp	r0, fp
 8029196:	f280 80c3 	bge.w	8029320 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 802919a:	fa0f fe8e 	sxth.w	lr, lr
 802919e:	fb00 110e 	mla	r1, r0, lr, r1
 80291a2:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80291a6:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80291aa:	8841      	ldrh	r1, [r0, #2]
 80291ac:	f1bc 0f00 	cmp.w	ip, #0
 80291b0:	d00b      	beq.n	80291ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80291b2:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80291b6:	3b01      	subs	r3, #1
 80291b8:	005b      	lsls	r3, r3, #1
 80291ba:	3302      	adds	r3, #2
 80291bc:	eb00 0e03 	add.w	lr, r0, r3
 80291c0:	5ac3      	ldrh	r3, [r0, r3]
 80291c2:	9308      	str	r3, [sp, #32]
 80291c4:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80291c8:	9309      	str	r3, [sp, #36]	; 0x24
 80291ca:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80291ce:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80291d2:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80291d6:	ea40 000b 	orr.w	r0, r0, fp
 80291da:	fb12 f30c 	smulbb	r3, r2, ip
 80291de:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80291e2:	10db      	asrs	r3, r3, #3
 80291e4:	f1cc 0e10 	rsb	lr, ip, #16
 80291e8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80291ec:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80291f0:	ebae 0e02 	sub.w	lr, lr, r2
 80291f4:	ea4b 0101 	orr.w	r1, fp, r1
 80291f8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80291fc:	4351      	muls	r1, r2
 80291fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029200:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8029204:	fb0e 1e00 	mla	lr, lr, r0, r1
 8029208:	0410      	lsls	r0, r2, #16
 802920a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802920e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8029212:	4310      	orrs	r0, r2
 8029214:	9a08      	ldr	r2, [sp, #32]
 8029216:	9908      	ldr	r1, [sp, #32]
 8029218:	0412      	lsls	r2, r2, #16
 802921a:	fb03 e000 	mla	r0, r3, r0, lr
 802921e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8029222:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8029226:	ea42 020e 	orr.w	r2, r2, lr
 802922a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802922e:	fb03 0302 	mla	r3, r3, r2, r0
 8029232:	0d5a      	lsrs	r2, r3, #21
 8029234:	095b      	lsrs	r3, r3, #5
 8029236:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802923a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802923e:	4313      	orrs	r3, r2
 8029240:	f8a9 3000 	strh.w	r3, [r9]
 8029244:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8029246:	441c      	add	r4, r3
 8029248:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802924a:	f109 0902 	add.w	r9, r9, #2
 802924e:	441e      	add	r6, r3
 8029250:	f10a 3aff 	add.w	sl, sl, #4294967295
 8029254:	e784      	b.n	8029160 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8029256:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8029258:	441c      	add	r4, r3
 802925a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802925c:	3d01      	subs	r5, #1
 802925e:	441e      	add	r6, r3
 8029260:	3702      	adds	r7, #2
 8029262:	e761      	b.n	8029128 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8029264:	d01d      	beq.n	80292a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029266:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8029268:	1e6b      	subs	r3, r5, #1
 802926a:	fb00 4003 	mla	r0, r0, r3, r4
 802926e:	1400      	asrs	r0, r0, #16
 8029270:	f53f af74 	bmi.w	802915c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8029274:	3901      	subs	r1, #1
 8029276:	4288      	cmp	r0, r1
 8029278:	f6bf af70 	bge.w	802915c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802927c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802927e:	fb01 6303 	mla	r3, r1, r3, r6
 8029282:	141b      	asrs	r3, r3, #16
 8029284:	f53f af6a 	bmi.w	802915c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8029288:	3a01      	subs	r2, #1
 802928a:	4293      	cmp	r3, r2
 802928c:	f6bf af66 	bge.w	802915c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8029290:	46a9      	mov	r9, r5
 8029292:	46ba      	mov	sl, r7
 8029294:	f1b9 0f00 	cmp.w	r9, #0
 8029298:	dc5a      	bgt.n	8029350 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802929a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802929e:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80292a2:	9b07      	ldr	r3, [sp, #28]
 80292a4:	2b00      	cmp	r3, #0
 80292a6:	f340 80b8 	ble.w	802941a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80292aa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80292ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80292b2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80292b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80292b8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80292bc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80292c0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80292c4:	eef0 6a48 	vmov.f32	s13, s16
 80292c8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80292cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80292d0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80292d4:	ee16 4a90 	vmov	r4, s13
 80292d8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80292dc:	eef0 6a68 	vmov.f32	s13, s17
 80292e0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80292e4:	ee18 2a10 	vmov	r2, s16
 80292e8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80292ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80292f0:	ee18 2a90 	vmov	r2, s17
 80292f4:	9323      	str	r3, [sp, #140]	; 0x8c
 80292f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80292f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80292fc:	9324      	str	r3, [sp, #144]	; 0x90
 80292fe:	9b07      	ldr	r3, [sp, #28]
 8029300:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029302:	3b01      	subs	r3, #1
 8029304:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029308:	9307      	str	r3, [sp, #28]
 802930a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802930c:	ee16 6a90 	vmov	r6, s13
 8029310:	bf14      	ite	ne
 8029312:	461d      	movne	r5, r3
 8029314:	4615      	moveq	r5, r2
 8029316:	eef0 8a67 	vmov.f32	s17, s15
 802931a:	eeb0 8a47 	vmov.f32	s16, s14
 802931e:	e6f4      	b.n	802910a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8029320:	f111 0b01 	adds.w	fp, r1, #1
 8029324:	d48e      	bmi.n	8029244 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8029326:	45de      	cmp	lr, fp
 8029328:	db8c      	blt.n	8029244 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802932a:	f110 0b01 	adds.w	fp, r0, #1
 802932e:	d489      	bmi.n	8029244 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8029330:	455b      	cmp	r3, fp
 8029332:	db87      	blt.n	8029244 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8029334:	b21b      	sxth	r3, r3
 8029336:	e9cd 1001 	strd	r1, r0, [sp, #4]
 802933a:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802933e:	9300      	str	r3, [sp, #0]
 8029340:	4642      	mov	r2, r8
 8029342:	fa0f f38e 	sxth.w	r3, lr
 8029346:	4649      	mov	r1, r9
 8029348:	980d      	ldr	r0, [sp, #52]	; 0x34
 802934a:	f7ff fe2b 	bl	8028fa4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802934e:	e779      	b.n	8029244 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8029350:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029352:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8029356:	1420      	asrs	r0, r4, #16
 8029358:	1431      	asrs	r1, r6, #16
 802935a:	fb03 0101 	mla	r1, r3, r1, r0
 802935e:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8029362:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8029366:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 802936a:	8841      	ldrh	r1, [r0, #2]
 802936c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029370:	f1be 0f00 	cmp.w	lr, #0
 8029374:	d00b      	beq.n	802938e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8029376:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802937a:	3b01      	subs	r3, #1
 802937c:	005b      	lsls	r3, r3, #1
 802937e:	3302      	adds	r3, #2
 8029380:	eb00 0b03 	add.w	fp, r0, r3
 8029384:	5ac3      	ldrh	r3, [r0, r3]
 8029386:	930a      	str	r3, [sp, #40]	; 0x28
 8029388:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802938c:	930b      	str	r3, [sp, #44]	; 0x2c
 802938e:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8029392:	fb12 f30e 	smulbb	r3, r2, lr
 8029396:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802939a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802939e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80293a2:	10db      	asrs	r3, r3, #3
 80293a4:	ea40 000c 	orr.w	r0, r0, ip
 80293a8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80293ac:	f1ce 0c10 	rsb	ip, lr, #16
 80293b0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80293b4:	ebac 0c02 	sub.w	ip, ip, r2
 80293b8:	ea4b 0101 	orr.w	r1, fp, r1
 80293bc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80293c0:	4351      	muls	r1, r2
 80293c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80293c4:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80293c8:	fb0c 1c00 	mla	ip, ip, r0, r1
 80293cc:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80293d0:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 80293d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80293d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80293d8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80293dc:	0412      	lsls	r2, r2, #16
 80293de:	ea4b 0000 	orr.w	r0, fp, r0
 80293e2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80293e6:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 80293ea:	fb03 c000 	mla	r0, r3, r0, ip
 80293ee:	ea42 0b0b 	orr.w	fp, r2, fp
 80293f2:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80293f6:	fb03 000b 	mla	r0, r3, fp, r0
 80293fa:	0d43      	lsrs	r3, r0, #21
 80293fc:	0940      	lsrs	r0, r0, #5
 80293fe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029402:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029406:	4318      	orrs	r0, r3
 8029408:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802940a:	f82a 0b02 	strh.w	r0, [sl], #2
 802940e:	441c      	add	r4, r3
 8029410:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029412:	f109 39ff 	add.w	r9, r9, #4294967295
 8029416:	441e      	add	r6, r3
 8029418:	e73c      	b.n	8029294 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802941a:	b00f      	add	sp, #60	; 0x3c
 802941c:	ecbd 8b08 	vpop	{d8-d11}
 8029420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029424 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8029424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029428:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 802942c:	fb04 5603 	mla	r6, r4, r3, r5
 8029430:	2c00      	cmp	r4, #0
 8029432:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8029436:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 802943a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802943e:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8029442:	db36      	blt.n	80294b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8029444:	45a6      	cmp	lr, r4
 8029446:	dd34      	ble.n	80294b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8029448:	2d00      	cmp	r5, #0
 802944a:	db30      	blt.n	80294ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 802944c:	42ab      	cmp	r3, r5
 802944e:	dd2e      	ble.n	80294ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8029450:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8029454:	1c6e      	adds	r6, r5, #1
 8029456:	d42f      	bmi.n	80294b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8029458:	42b3      	cmp	r3, r6
 802945a:	dd2d      	ble.n	80294b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 802945c:	b370      	cbz	r0, 80294bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 802945e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8029462:	3401      	adds	r4, #1
 8029464:	d42e      	bmi.n	80294c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8029466:	45a6      	cmp	lr, r4
 8029468:	dd2c      	ble.n	80294c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 802946a:	b377      	cbz	r7, 80294ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 802946c:	2d00      	cmp	r5, #0
 802946e:	db27      	blt.n	80294c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8029470:	42ab      	cmp	r3, r5
 8029472:	dd25      	ble.n	80294c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8029474:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8029478:	3501      	adds	r5, #1
 802947a:	d429      	bmi.n	80294d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 802947c:	42ab      	cmp	r3, r5
 802947e:	dd27      	ble.n	80294d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8029480:	b340      	cbz	r0, 80294d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 8029482:	3301      	adds	r3, #1
 8029484:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8029488:	280f      	cmp	r0, #15
 802948a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802948e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8029492:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8029496:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802949a:	d801      	bhi.n	80294a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 802949c:	2f0f      	cmp	r7, #15
 802949e:	d91b      	bls.n	80294d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 80294a0:	4b8d      	ldr	r3, [pc, #564]	; (80296d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 80294a2:	4a8e      	ldr	r2, [pc, #568]	; (80296dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 80294a4:	488e      	ldr	r0, [pc, #568]	; (80296e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 80294a6:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80294aa:	f004 fd09 	bl	802dec0 <__assert_func>
 80294ae:	2200      	movs	r2, #0
 80294b0:	e7d0      	b.n	8029454 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 80294b2:	2600      	movs	r6, #0
 80294b4:	4632      	mov	r2, r6
 80294b6:	e7d4      	b.n	8029462 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80294b8:	2600      	movs	r6, #0
 80294ba:	e7d2      	b.n	8029462 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80294bc:	4606      	mov	r6, r0
 80294be:	e7d0      	b.n	8029462 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 80294c0:	2400      	movs	r4, #0
 80294c2:	e7d9      	b.n	8029478 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 80294c4:	2300      	movs	r3, #0
 80294c6:	461c      	mov	r4, r3
 80294c8:	e7de      	b.n	8029488 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80294ca:	463b      	mov	r3, r7
 80294cc:	463c      	mov	r4, r7
 80294ce:	e7db      	b.n	8029488 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80294d0:	2300      	movs	r3, #0
 80294d2:	e7d9      	b.n	8029488 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80294d4:	4603      	mov	r3, r0
 80294d6:	e7d7      	b.n	8029488 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 80294d8:	b280      	uxth	r0, r0
 80294da:	b2bf      	uxth	r7, r7
 80294dc:	fb07 fe00 	mul.w	lr, r7, r0
 80294e0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80294e4:	0100      	lsls	r0, r0, #4
 80294e6:	eba0 0c0e 	sub.w	ip, r0, lr
 80294ea:	b2bf      	uxth	r7, r7
 80294ec:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80294f0:	fa1f fc8c 	uxth.w	ip, ip
 80294f4:	1bed      	subs	r5, r5, r7
 80294f6:	b2ad      	uxth	r5, r5
 80294f8:	fb0a f00c 	mul.w	r0, sl, ip
 80294fc:	fb0b 0005 	mla	r0, fp, r5, r0
 8029500:	fb07 0009 	mla	r0, r7, r9, r0
 8029504:	fb0e 0008 	mla	r0, lr, r8, r0
 8029508:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802950c:	9001      	str	r0, [sp, #4]
 802950e:	2800      	cmp	r0, #0
 8029510:	f000 80de 	beq.w	80296d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 8029514:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8029518:	d018      	beq.n	802954c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 802951a:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802951e:	fb0b f000 	mul.w	r0, fp, r0
 8029522:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029526:	fb0b fb02 	mul.w	fp, fp, r2
 802952a:	0a02      	lsrs	r2, r0, #8
 802952c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029530:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8029534:	4402      	add	r2, r0
 8029536:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802953a:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802953e:	0a12      	lsrs	r2, r2, #8
 8029540:	0a00      	lsrs	r0, r0, #8
 8029542:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029546:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802954a:	4302      	orrs	r2, r0
 802954c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8029550:	d01a      	beq.n	8029588 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 8029552:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8029556:	fb0a f000 	mul.w	r0, sl, r0
 802955a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802955e:	fb0a fa06 	mul.w	sl, sl, r6
 8029562:	0a06      	lsrs	r6, r0, #8
 8029564:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8029568:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802956c:	4406      	add	r6, r0
 802956e:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8029572:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8029576:	0a36      	lsrs	r6, r6, #8
 8029578:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802957c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8029580:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029584:	ea46 060a 	orr.w	r6, r6, sl
 8029588:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802958c:	d01b      	beq.n	80295c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 802958e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8029592:	fb09 fa0a 	mul.w	sl, r9, sl
 8029596:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802959a:	fb09 f004 	mul.w	r0, r9, r4
 802959e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80295a2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80295a6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80295aa:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80295ae:	4454      	add	r4, sl
 80295b0:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80295b4:	0a24      	lsrs	r4, r4, #8
 80295b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80295ba:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80295be:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80295c2:	ea44 0409 	orr.w	r4, r4, r9
 80295c6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80295ca:	d01b      	beq.n	8029604 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 80295cc:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80295d0:	fb08 f909 	mul.w	r9, r8, r9
 80295d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80295d8:	fb08 f003 	mul.w	r0, r8, r3
 80295dc:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80295e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80295e4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80295e8:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80295ec:	444b      	add	r3, r9
 80295ee:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80295f2:	0a1b      	lsrs	r3, r3, #8
 80295f4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80295f8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80295fc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8029600:	ea43 0308 	orr.w	r3, r3, r8
 8029604:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8029608:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802960c:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8029610:	fb0c f808 	mul.w	r8, ip, r8
 8029614:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029618:	fb0c f606 	mul.w	r6, ip, r6
 802961c:	fb05 8909 	mla	r9, r5, r9, r8
 8029620:	fb05 6502 	mla	r5, r5, r2, r6
 8029624:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8029628:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802962c:	9a01      	ldr	r2, [sp, #4]
 802962e:	8808      	ldrh	r0, [r1, #0]
 8029630:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8029634:	fb07 9908 	mla	r9, r7, r8, r9
 8029638:	fb07 5704 	mla	r7, r7, r4, r5
 802963c:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8029640:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029644:	b2b6      	uxth	r6, r6
 8029646:	fb0e 9808 	mla	r8, lr, r8, r9
 802964a:	fb0e 7e03 	mla	lr, lr, r3, r7
 802964e:	4372      	muls	r2, r6
 8029650:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029654:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029658:	1c53      	adds	r3, r2, #1
 802965a:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802965e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8029662:	ea48 0e0e 	orr.w	lr, r8, lr
 8029666:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802966a:	1205      	asrs	r5, r0, #8
 802966c:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8029670:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8029674:	b2db      	uxtb	r3, r3
 8029676:	fb12 f206 	smulbb	r2, r2, r6
 802967a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802967e:	fb05 2503 	mla	r5, r5, r3, r2
 8029682:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8029686:	10c2      	asrs	r2, r0, #3
 8029688:	fa5f fe8e 	uxtb.w	lr, lr
 802968c:	00c0      	lsls	r0, r0, #3
 802968e:	fb14 f406 	smulbb	r4, r4, r6
 8029692:	b2c0      	uxtb	r0, r0
 8029694:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029698:	fb1e fe06 	smulbb	lr, lr, r6
 802969c:	fb02 4203 	mla	r2, r2, r3, r4
 80296a0:	b2ad      	uxth	r5, r5
 80296a2:	fb00 e303 	mla	r3, r0, r3, lr
 80296a6:	b298      	uxth	r0, r3
 80296a8:	b294      	uxth	r4, r2
 80296aa:	1c6b      	adds	r3, r5, #1
 80296ac:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80296b0:	1c62      	adds	r2, r4, #1
 80296b2:	1c43      	adds	r3, r0, #1
 80296b4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80296b8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80296bc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80296c0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80296c4:	0952      	lsrs	r2, r2, #5
 80296c6:	432b      	orrs	r3, r5
 80296c8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80296cc:	4313      	orrs	r3, r2
 80296ce:	800b      	strh	r3, [r1, #0]
 80296d0:	b003      	add	sp, #12
 80296d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80296d6:	bf00      	nop
 80296d8:	08032be1 	.word	0x08032be1
 80296dc:	080331ae 	.word	0x080331ae
 80296e0:	08032c65 	.word	0x08032c65

080296e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80296e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80296e8:	ed2d 8b08 	vpush	{d8-d11}
 80296ec:	b09d      	sub	sp, #116	; 0x74
 80296ee:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 80296f2:	9219      	str	r2, [sp, #100]	; 0x64
 80296f4:	9307      	str	r3, [sp, #28]
 80296f6:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80296f8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80296fc:	931a      	str	r3, [sp, #104]	; 0x68
 80296fe:	9117      	str	r1, [sp, #92]	; 0x5c
 8029700:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8029704:	901b      	str	r0, [sp, #108]	; 0x6c
 8029706:	6850      	ldr	r0, [r2, #4]
 8029708:	6812      	ldr	r2, [r2, #0]
 802970a:	fb00 1303 	mla	r3, r0, r3, r1
 802970e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8029712:	930a      	str	r3, [sp, #40]	; 0x28
 8029714:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8029716:	681b      	ldr	r3, [r3, #0]
 8029718:	9310      	str	r3, [sp, #64]	; 0x40
 802971a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 802971e:	930b      	str	r3, [sp, #44]	; 0x2c
 8029720:	eeb0 aa40 	vmov.f32	s20, s0
 8029724:	eef0 9a60 	vmov.f32	s19, s1
 8029728:	eeb0 9a41 	vmov.f32	s18, s2
 802972c:	eeb0 8a62 	vmov.f32	s16, s5
 8029730:	eef0 8a43 	vmov.f32	s17, s6
 8029734:	eef0 ba44 	vmov.f32	s23, s8
 8029738:	eeb0 ba64 	vmov.f32	s22, s9
 802973c:	eef0 aa45 	vmov.f32	s21, s10
 8029740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029742:	2b00      	cmp	r3, #0
 8029744:	dc03      	bgt.n	802974e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8029746:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8029748:	2b00      	cmp	r3, #0
 802974a:	f340 8375 	ble.w	8029e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 802974e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8029750:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029754:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029758:	1e48      	subs	r0, r1, #1
 802975a:	1e57      	subs	r7, r2, #1
 802975c:	9b07      	ldr	r3, [sp, #28]
 802975e:	2b00      	cmp	r3, #0
 8029760:	f340 818e 	ble.w	8029a80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8029764:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8029768:	ea4f 4326 	mov.w	r3, r6, asr #16
 802976c:	d406      	bmi.n	802977c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802976e:	4584      	cmp	ip, r0
 8029770:	da04      	bge.n	802977c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8029772:	2b00      	cmp	r3, #0
 8029774:	db02      	blt.n	802977c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8029776:	42bb      	cmp	r3, r7
 8029778:	f2c0 8183 	blt.w	8029a82 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 802977c:	f11c 0c01 	adds.w	ip, ip, #1
 8029780:	f100 8173 	bmi.w	8029a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8029784:	4561      	cmp	r1, ip
 8029786:	f2c0 8170 	blt.w	8029a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802978a:	3301      	adds	r3, #1
 802978c:	f100 816d 	bmi.w	8029a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8029790:	429a      	cmp	r2, r3
 8029792:	f2c0 816a 	blt.w	8029a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8029796:	9b07      	ldr	r3, [sp, #28]
 8029798:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802979a:	9318      	str	r3, [sp, #96]	; 0x60
 802979c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802979e:	2b00      	cmp	r3, #0
 80297a0:	f340 818c 	ble.w	8029abc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 80297a4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80297a6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80297a8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80297ac:	689b      	ldr	r3, [r3, #8]
 80297ae:	1422      	asrs	r2, r4, #16
 80297b0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80297b4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80297b8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80297bc:	f100 81cd 	bmi.w	8029b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80297c0:	f103 38ff 	add.w	r8, r3, #4294967295
 80297c4:	4542      	cmp	r2, r8
 80297c6:	f280 81c8 	bge.w	8029b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80297ca:	f1bc 0f00 	cmp.w	ip, #0
 80297ce:	f2c0 81c4 	blt.w	8029b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80297d2:	f10e 38ff 	add.w	r8, lr, #4294967295
 80297d6:	45c4      	cmp	ip, r8
 80297d8:	f280 81bf 	bge.w	8029b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80297dc:	b21b      	sxth	r3, r3
 80297de:	fb0c 2203 	mla	r2, ip, r3, r2
 80297e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80297e4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80297e8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80297ec:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80297f0:	2800      	cmp	r0, #0
 80297f2:	f000 81a9 	beq.w	8029b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 80297f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80297fa:	950c      	str	r5, [sp, #48]	; 0x30
 80297fc:	0e2d      	lsrs	r5, r5, #24
 80297fe:	9513      	str	r5, [sp, #76]	; 0x4c
 8029800:	b181      	cbz	r1, 8029824 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029802:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8029806:	3b01      	subs	r3, #1
 8029808:	009b      	lsls	r3, r3, #2
 802980a:	3304      	adds	r3, #4
 802980c:	eb08 0c03 	add.w	ip, r8, r3
 8029810:	f858 3003 	ldr.w	r3, [r8, r3]
 8029814:	9308      	str	r3, [sp, #32]
 8029816:	0e1b      	lsrs	r3, r3, #24
 8029818:	9311      	str	r3, [sp, #68]	; 0x44
 802981a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802981e:	930d      	str	r3, [sp, #52]	; 0x34
 8029820:	0e1b      	lsrs	r3, r3, #24
 8029822:	9314      	str	r3, [sp, #80]	; 0x50
 8029824:	b280      	uxth	r0, r0
 8029826:	b289      	uxth	r1, r1
 8029828:	fb00 f901 	mul.w	r9, r0, r1
 802982c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8029830:	0100      	lsls	r0, r0, #4
 8029832:	eba0 0809 	sub.w	r8, r0, r9
 8029836:	b289      	uxth	r1, r1
 8029838:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802983c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802983e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029840:	fa1f f888 	uxth.w	r8, r8
 8029844:	1a5b      	subs	r3, r3, r1
 8029846:	b29b      	uxth	r3, r3
 8029848:	fb08 f000 	mul.w	r0, r8, r0
 802984c:	fb03 000e 	mla	r0, r3, lr, r0
 8029850:	fb01 0005 	mla	r0, r1, r5, r0
 8029854:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029856:	fb09 0005 	mla	r0, r9, r5, r0
 802985a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802985e:	2800      	cmp	r0, #0
 8029860:	f000 80fa 	beq.w	8029a58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029864:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8029868:	d01b      	beq.n	80298a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802986a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802986e:	fb0e fa0a 	mul.w	sl, lr, sl
 8029872:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029876:	fb0e fe02 	mul.w	lr, lr, r2
 802987a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802987e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029882:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029886:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802988a:	4452      	add	r2, sl
 802988c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029890:	0a12      	lsrs	r2, r2, #8
 8029892:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029896:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802989a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802989e:	ea42 020c 	orr.w	r2, r2, ip
 80298a2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80298a4:	2dff      	cmp	r5, #255	; 0xff
 80298a6:	d021      	beq.n	80298ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80298a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80298aa:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80298ae:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80298b0:	fb05 fb0b 	mul.w	fp, r5, fp
 80298b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80298b6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80298ba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80298bc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80298c0:	fb05 fa0a 	mul.w	sl, r5, sl
 80298c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80298c8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80298cc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80298d0:	44de      	add	lr, fp
 80298d2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80298d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80298da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80298de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80298e2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80298e6:	ea4e 050a 	orr.w	r5, lr, sl
 80298ea:	950c      	str	r5, [sp, #48]	; 0x30
 80298ec:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80298ee:	2dff      	cmp	r5, #255	; 0xff
 80298f0:	d021      	beq.n	8029936 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80298f2:	9d08      	ldr	r5, [sp, #32]
 80298f4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80298f8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80298fa:	fb05 fb0b 	mul.w	fp, r5, fp
 80298fe:	9d08      	ldr	r5, [sp, #32]
 8029900:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029904:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029906:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802990a:	fb05 fa0a 	mul.w	sl, r5, sl
 802990e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029912:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029916:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802991a:	44de      	add	lr, fp
 802991c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029920:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029924:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029928:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802992c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029930:	ea4e 050a 	orr.w	r5, lr, sl
 8029934:	9508      	str	r5, [sp, #32]
 8029936:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029938:	2dff      	cmp	r5, #255	; 0xff
 802993a:	d021      	beq.n	8029980 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 802993c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802993e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029942:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029944:	fb05 fb0b 	mul.w	fp, r5, fp
 8029948:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802994a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802994e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029950:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029954:	fb05 fa0a 	mul.w	sl, r5, sl
 8029958:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802995c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029960:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029964:	44de      	add	lr, fp
 8029966:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802996a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802996e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029972:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029976:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802997a:	ea4e 050a 	orr.w	r5, lr, sl
 802997e:	950d      	str	r5, [sp, #52]	; 0x34
 8029980:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029982:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029986:	9d08      	ldr	r5, [sp, #32]
 8029988:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802998c:	fb08 fc0c 	mul.w	ip, r8, ip
 8029990:	fb03 cc0e 	mla	ip, r3, lr, ip
 8029994:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029998:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802999a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802999e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80299a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80299a4:	fb09 cc0e 	mla	ip, r9, lr, ip
 80299a8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80299ac:	fb08 f80e 	mul.w	r8, r8, lr
 80299b0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80299b4:	fb03 8202 	mla	r2, r3, r2, r8
 80299b8:	9b08      	ldr	r3, [sp, #32]
 80299ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80299bc:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80299c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80299c2:	fb01 220a 	mla	r2, r1, sl, r2
 80299c6:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80299ca:	fb09 2901 	mla	r9, r9, r1, r2
 80299ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80299d0:	883b      	ldrh	r3, [r7, #0]
 80299d2:	4342      	muls	r2, r0
 80299d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80299d8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80299dc:	1c50      	adds	r0, r2, #1
 80299de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80299e2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80299e6:	ea4c 0c09 	orr.w	ip, ip, r9
 80299ea:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80299ee:	1219      	asrs	r1, r3, #8
 80299f0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80299f4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80299f8:	b2c0      	uxtb	r0, r0
 80299fa:	fb12 f205 	smulbb	r2, r2, r5
 80299fe:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029a02:	fb01 2100 	mla	r1, r1, r0, r2
 8029a06:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8029a0a:	10da      	asrs	r2, r3, #3
 8029a0c:	fa5f fc8c 	uxtb.w	ip, ip
 8029a10:	00db      	lsls	r3, r3, #3
 8029a12:	fb1c fc05 	smulbb	ip, ip, r5
 8029a16:	b2db      	uxtb	r3, r3
 8029a18:	b289      	uxth	r1, r1
 8029a1a:	fb03 c300 	mla	r3, r3, r0, ip
 8029a1e:	fa1f fc83 	uxth.w	ip, r3
 8029a22:	1c4b      	adds	r3, r1, #1
 8029a24:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029a28:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029a2c:	fb1e fe05 	smulbb	lr, lr, r5
 8029a30:	f10c 0301 	add.w	r3, ip, #1
 8029a34:	fb02 e200 	mla	r2, r2, r0, lr
 8029a38:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8029a3c:	b292      	uxth	r2, r2
 8029a3e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8029a42:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029a46:	430b      	orrs	r3, r1
 8029a48:	1c51      	adds	r1, r2, #1
 8029a4a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029a4e:	0952      	lsrs	r2, r2, #5
 8029a50:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029a54:	4313      	orrs	r3, r2
 8029a56:	803b      	strh	r3, [r7, #0]
 8029a58:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8029a5a:	441c      	add	r4, r3
 8029a5c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8029a5e:	441e      	add	r6, r3
 8029a60:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8029a62:	3b01      	subs	r3, #1
 8029a64:	3702      	adds	r7, #2
 8029a66:	9318      	str	r3, [sp, #96]	; 0x60
 8029a68:	e698      	b.n	802979c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8029a6a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8029a6c:	441c      	add	r4, r3
 8029a6e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8029a70:	441e      	add	r6, r3
 8029a72:	9b07      	ldr	r3, [sp, #28]
 8029a74:	3b01      	subs	r3, #1
 8029a76:	9307      	str	r3, [sp, #28]
 8029a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029a7a:	3302      	adds	r3, #2
 8029a7c:	930a      	str	r3, [sp, #40]	; 0x28
 8029a7e:	e66d      	b.n	802975c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029a80:	d023      	beq.n	8029aca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8029a82:	9b07      	ldr	r3, [sp, #28]
 8029a84:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8029a86:	3b01      	subs	r3, #1
 8029a88:	fb00 4003 	mla	r0, r0, r3, r4
 8029a8c:	1400      	asrs	r0, r0, #16
 8029a8e:	f53f ae82 	bmi.w	8029796 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029a92:	3901      	subs	r1, #1
 8029a94:	4288      	cmp	r0, r1
 8029a96:	f6bf ae7e 	bge.w	8029796 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029a9a:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8029a9c:	fb01 6303 	mla	r3, r1, r3, r6
 8029aa0:	141b      	asrs	r3, r3, #16
 8029aa2:	f53f ae78 	bmi.w	8029796 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029aa6:	3a01      	subs	r2, #1
 8029aa8:	4293      	cmp	r3, r2
 8029aaa:	f6bf ae74 	bge.w	8029796 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029aae:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029ab2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8029ab6:	f1bb 0f00 	cmp.w	fp, #0
 8029aba:	dc6c      	bgt.n	8029b96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8029abc:	9b07      	ldr	r3, [sp, #28]
 8029abe:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029ac4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029ac8:	930a      	str	r3, [sp, #40]	; 0x28
 8029aca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029acc:	2b00      	cmp	r3, #0
 8029ace:	f340 81b3 	ble.w	8029e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8029ad2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029ada:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029ade:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029ae0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029ae4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029ae8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029aec:	eef0 6a48 	vmov.f32	s13, s16
 8029af0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029af4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029af8:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029afc:	ee16 4a90 	vmov	r4, s13
 8029b00:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029b04:	eef0 6a68 	vmov.f32	s13, s17
 8029b08:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029b0c:	ee18 2a10 	vmov	r2, s16
 8029b10:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029b14:	fb92 f3f3 	sdiv	r3, r2, r3
 8029b18:	ee18 2a90 	vmov	r2, s17
 8029b1c:	9331      	str	r3, [sp, #196]	; 0xc4
 8029b1e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029b20:	fb92 f3f3 	sdiv	r3, r2, r3
 8029b24:	9332      	str	r3, [sp, #200]	; 0xc8
 8029b26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029b28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8029b2a:	3b01      	subs	r3, #1
 8029b2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029b30:	9317      	str	r3, [sp, #92]	; 0x5c
 8029b32:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029b34:	bf08      	it	eq
 8029b36:	4613      	moveq	r3, r2
 8029b38:	ee16 6a90 	vmov	r6, s13
 8029b3c:	9307      	str	r3, [sp, #28]
 8029b3e:	eef0 8a67 	vmov.f32	s17, s15
 8029b42:	eeb0 8a47 	vmov.f32	s16, s14
 8029b46:	e5fb      	b.n	8029740 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8029b48:	2900      	cmp	r1, #0
 8029b4a:	f43f ae6b 	beq.w	8029824 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029b4e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029b52:	9308      	str	r3, [sp, #32]
 8029b54:	0e1b      	lsrs	r3, r3, #24
 8029b56:	9311      	str	r3, [sp, #68]	; 0x44
 8029b58:	e664      	b.n	8029824 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029b5a:	f112 0801 	adds.w	r8, r2, #1
 8029b5e:	f53f af7b 	bmi.w	8029a58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029b62:	4543      	cmp	r3, r8
 8029b64:	f6ff af78 	blt.w	8029a58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029b68:	f11c 0801 	adds.w	r8, ip, #1
 8029b6c:	f53f af74 	bmi.w	8029a58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029b70:	45c6      	cmp	lr, r8
 8029b72:	f6ff af71 	blt.w	8029a58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029b76:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8029b78:	9201      	str	r2, [sp, #4]
 8029b7a:	fa0f f28e 	sxth.w	r2, lr
 8029b7e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8029b82:	e9cd c002 	strd	ip, r0, [sp, #8]
 8029b86:	9200      	str	r2, [sp, #0]
 8029b88:	b21b      	sxth	r3, r3
 8029b8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029b8c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8029b8e:	4639      	mov	r1, r7
 8029b90:	f7ff fc48 	bl	8029424 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8029b94:	e760      	b.n	8029a58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029b96:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8029b98:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029b9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029b9e:	1427      	asrs	r7, r4, #16
 8029ba0:	1433      	asrs	r3, r6, #16
 8029ba2:	fb01 7303 	mla	r3, r1, r3, r7
 8029ba6:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8029baa:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029bae:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029bb2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029bb6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029bba:	2a00      	cmp	r2, #0
 8029bbc:	f000 8133 	beq.w	8029e26 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 8029bc0:	687d      	ldr	r5, [r7, #4]
 8029bc2:	950e      	str	r5, [sp, #56]	; 0x38
 8029bc4:	0e2d      	lsrs	r5, r5, #24
 8029bc6:	9515      	str	r5, [sp, #84]	; 0x54
 8029bc8:	b178      	cbz	r0, 8029bea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8029bca:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8029bce:	3901      	subs	r1, #1
 8029bd0:	0089      	lsls	r1, r1, #2
 8029bd2:	3104      	adds	r1, #4
 8029bd4:	eb07 0e01 	add.w	lr, r7, r1
 8029bd8:	5879      	ldr	r1, [r7, r1]
 8029bda:	9109      	str	r1, [sp, #36]	; 0x24
 8029bdc:	0e09      	lsrs	r1, r1, #24
 8029bde:	9112      	str	r1, [sp, #72]	; 0x48
 8029be0:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029be4:	910f      	str	r1, [sp, #60]	; 0x3c
 8029be6:	0e09      	lsrs	r1, r1, #24
 8029be8:	9116      	str	r1, [sp, #88]	; 0x58
 8029bea:	b292      	uxth	r2, r2
 8029bec:	b280      	uxth	r0, r0
 8029bee:	fb02 f800 	mul.w	r8, r2, r0
 8029bf2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8029bf6:	0112      	lsls	r2, r2, #4
 8029bf8:	eba2 0e08 	sub.w	lr, r2, r8
 8029bfc:	b280      	uxth	r0, r0
 8029bfe:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8029c02:	9915      	ldr	r1, [sp, #84]	; 0x54
 8029c04:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029c06:	fa1f fe8e 	uxth.w	lr, lr
 8029c0a:	1a12      	subs	r2, r2, r0
 8029c0c:	b292      	uxth	r2, r2
 8029c0e:	fb0e f101 	mul.w	r1, lr, r1
 8029c12:	fb02 110c 	mla	r1, r2, ip, r1
 8029c16:	fb00 1105 	mla	r1, r0, r5, r1
 8029c1a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029c1c:	fb08 1105 	mla	r1, r8, r5, r1
 8029c20:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8029c24:	2900      	cmp	r1, #0
 8029c26:	f000 80f5 	beq.w	8029e14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8029c2a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8029c2e:	d019      	beq.n	8029c64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8029c30:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8029c34:	fb0c fa0a 	mul.w	sl, ip, sl
 8029c38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029c3c:	fb0c fc03 	mul.w	ip, ip, r3
 8029c40:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029c44:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029c48:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029c4c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8029c50:	4453      	add	r3, sl
 8029c52:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029c56:	0a1b      	lsrs	r3, r3, #8
 8029c58:	0a3f      	lsrs	r7, r7, #8
 8029c5a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029c5e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8029c62:	433b      	orrs	r3, r7
 8029c64:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029c66:	2dff      	cmp	r5, #255	; 0xff
 8029c68:	d020      	beq.n	8029cac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8029c6a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029c6c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029c70:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029c72:	436f      	muls	r7, r5
 8029c74:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029c76:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029c7a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029c7c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029c80:	fb05 fa0a 	mul.w	sl, r5, sl
 8029c84:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029c88:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029c8c:	44bc      	add	ip, r7
 8029c8e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029c92:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029c96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029c9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029c9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029ca2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029ca6:	ea4c 050a 	orr.w	r5, ip, sl
 8029caa:	950e      	str	r5, [sp, #56]	; 0x38
 8029cac:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029cae:	2dff      	cmp	r5, #255	; 0xff
 8029cb0:	d020      	beq.n	8029cf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8029cb2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029cb4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029cb8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029cba:	436f      	muls	r7, r5
 8029cbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029cbe:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029cc2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029cc4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029cc8:	fb05 fa0a 	mul.w	sl, r5, sl
 8029ccc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029cd0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029cd4:	44bc      	add	ip, r7
 8029cd6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029cda:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029cde:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029ce2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029ce6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029cea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029cee:	ea4c 050a 	orr.w	r5, ip, sl
 8029cf2:	9509      	str	r5, [sp, #36]	; 0x24
 8029cf4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029cf6:	2dff      	cmp	r5, #255	; 0xff
 8029cf8:	d020      	beq.n	8029d3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8029cfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029cfc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029d00:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029d02:	436f      	muls	r7, r5
 8029d04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029d06:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029d0a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029d0c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029d10:	fb05 fa0a 	mul.w	sl, r5, sl
 8029d14:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029d18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029d1c:	44bc      	add	ip, r7
 8029d1e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029d22:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029d26:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029d2a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029d2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029d32:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029d36:	ea4c 050a 	orr.w	r5, ip, sl
 8029d3a:	950f      	str	r5, [sp, #60]	; 0x3c
 8029d3c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029d3e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029d42:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029d44:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8029d48:	fb0e f707 	mul.w	r7, lr, r7
 8029d4c:	fb02 770c 	mla	r7, r2, ip, r7
 8029d50:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029d54:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029d56:	fb00 770c 	mla	r7, r0, ip, r7
 8029d5a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029d5e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029d60:	fb08 770c 	mla	r7, r8, ip, r7
 8029d64:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029d68:	fb0e fe0c 	mul.w	lr, lr, ip
 8029d6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029d70:	fb02 e303 	mla	r3, r2, r3, lr
 8029d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029d76:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029d78:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8029d7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029d7e:	fb00 330a 	mla	r3, r0, sl, r3
 8029d82:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8029d86:	fb08 3c0c 	mla	ip, r8, ip, r3
 8029d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029d8c:	f8b9 0000 	ldrh.w	r0, [r9]
 8029d90:	4359      	muls	r1, r3
 8029d92:	0a3f      	lsrs	r7, r7, #8
 8029d94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029d98:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8029d9c:	1c4b      	adds	r3, r1, #1
 8029d9e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8029da2:	ea47 070c 	orr.w	r7, r7, ip
 8029da6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029daa:	1202      	asrs	r2, r0, #8
 8029dac:	0c3b      	lsrs	r3, r7, #16
 8029dae:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8029db2:	b2c9      	uxtb	r1, r1
 8029db4:	fb13 f305 	smulbb	r3, r3, r5
 8029db8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8029dbc:	fb02 3201 	mla	r2, r2, r1, r3
 8029dc0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8029dc4:	10c3      	asrs	r3, r0, #3
 8029dc6:	b2ff      	uxtb	r7, r7
 8029dc8:	00c0      	lsls	r0, r0, #3
 8029dca:	b2c0      	uxtb	r0, r0
 8029dcc:	fb17 f705 	smulbb	r7, r7, r5
 8029dd0:	fb00 7001 	mla	r0, r0, r1, r7
 8029dd4:	b292      	uxth	r2, r2
 8029dd6:	fb1c fc05 	smulbb	ip, ip, r5
 8029dda:	b280      	uxth	r0, r0
 8029ddc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8029de0:	fb03 c301 	mla	r3, r3, r1, ip
 8029de4:	1c51      	adds	r1, r2, #1
 8029de6:	f100 0c01 	add.w	ip, r0, #1
 8029dea:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029dee:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8029df2:	b29b      	uxth	r3, r3
 8029df4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8029df8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8029dfc:	ea4c 0202 	orr.w	r2, ip, r2
 8029e00:	f103 0c01 	add.w	ip, r3, #1
 8029e04:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8029e08:	095b      	lsrs	r3, r3, #5
 8029e0a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029e0e:	431a      	orrs	r2, r3
 8029e10:	f8a9 2000 	strh.w	r2, [r9]
 8029e14:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8029e16:	441c      	add	r4, r3
 8029e18:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8029e1a:	f109 0902 	add.w	r9, r9, #2
 8029e1e:	441e      	add	r6, r3
 8029e20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029e24:	e647      	b.n	8029ab6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8029e26:	2800      	cmp	r0, #0
 8029e28:	f43f aedf 	beq.w	8029bea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8029e2c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8029e30:	9109      	str	r1, [sp, #36]	; 0x24
 8029e32:	0e09      	lsrs	r1, r1, #24
 8029e34:	9112      	str	r1, [sp, #72]	; 0x48
 8029e36:	e6d8      	b.n	8029bea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8029e38:	b01d      	add	sp, #116	; 0x74
 8029e3a:	ecbd 8b08 	vpop	{d8-d11}
 8029e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08029e44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8029e44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029e48:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8029e4c:	fb04 5603 	mla	r6, r4, r3, r5
 8029e50:	2c00      	cmp	r4, #0
 8029e52:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8029e56:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8029e5a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8029e5e:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8029e62:	db37      	blt.n	8029ed4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8029e64:	45a6      	cmp	lr, r4
 8029e66:	dd35      	ble.n	8029ed4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8029e68:	2d00      	cmp	r5, #0
 8029e6a:	db31      	blt.n	8029ed0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029e6c:	42ab      	cmp	r3, r5
 8029e6e:	dd2f      	ble.n	8029ed0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029e70:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8029e74:	1c6e      	adds	r6, r5, #1
 8029e76:	d430      	bmi.n	8029eda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8029e78:	42b3      	cmp	r3, r6
 8029e7a:	dd2e      	ble.n	8029eda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8029e7c:	b378      	cbz	r0, 8029ede <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 8029e7e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8029e82:	3401      	adds	r4, #1
 8029e84:	d42f      	bmi.n	8029ee6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8029e86:	45a6      	cmp	lr, r4
 8029e88:	dd2d      	ble.n	8029ee6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8029e8a:	b37f      	cbz	r7, 8029eec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 8029e8c:	2d00      	cmp	r5, #0
 8029e8e:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 8029e92:	db26      	blt.n	8029ee2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8029e94:	42ab      	cmp	r3, r5
 8029e96:	dd24      	ble.n	8029ee2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8029e98:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8029e9c:	3501      	adds	r5, #1
 8029e9e:	d428      	bmi.n	8029ef2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8029ea0:	42ab      	cmp	r3, r5
 8029ea2:	dd26      	ble.n	8029ef2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8029ea4:	b338      	cbz	r0, 8029ef6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 8029ea6:	f8de 3004 	ldr.w	r3, [lr, #4]
 8029eaa:	280f      	cmp	r0, #15
 8029eac:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8029eb0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8029eb4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8029eb8:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8029ebc:	d801      	bhi.n	8029ec2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 8029ebe:	2f0f      	cmp	r7, #15
 8029ec0:	d91b      	bls.n	8029efa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 8029ec2:	4b87      	ldr	r3, [pc, #540]	; (802a0e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8029ec4:	4a87      	ldr	r2, [pc, #540]	; (802a0e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8029ec6:	4888      	ldr	r0, [pc, #544]	; (802a0e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8029ec8:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8029ecc:	f003 fff8 	bl	802dec0 <__assert_func>
 8029ed0:	2200      	movs	r2, #0
 8029ed2:	e7cf      	b.n	8029e74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 8029ed4:	2600      	movs	r6, #0
 8029ed6:	4632      	mov	r2, r6
 8029ed8:	e7d3      	b.n	8029e82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8029eda:	2600      	movs	r6, #0
 8029edc:	e7d1      	b.n	8029e82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8029ede:	4606      	mov	r6, r0
 8029ee0:	e7cf      	b.n	8029e82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8029ee2:	2400      	movs	r4, #0
 8029ee4:	e7da      	b.n	8029e9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 8029ee6:	2300      	movs	r3, #0
 8029ee8:	461c      	mov	r4, r3
 8029eea:	e7de      	b.n	8029eaa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8029eec:	463b      	mov	r3, r7
 8029eee:	463c      	mov	r4, r7
 8029ef0:	e7db      	b.n	8029eaa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8029ef2:	2300      	movs	r3, #0
 8029ef4:	e7d9      	b.n	8029eaa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8029ef6:	4603      	mov	r3, r0
 8029ef8:	e7d7      	b.n	8029eaa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8029efa:	b280      	uxth	r0, r0
 8029efc:	b2bf      	uxth	r7, r7
 8029efe:	fb07 fe00 	mul.w	lr, r7, r0
 8029f02:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8029f06:	0100      	lsls	r0, r0, #4
 8029f08:	eba0 0c0e 	sub.w	ip, r0, lr
 8029f0c:	b2bf      	uxth	r7, r7
 8029f0e:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8029f12:	fa1f fc8c 	uxth.w	ip, ip
 8029f16:	1bed      	subs	r5, r5, r7
 8029f18:	b2ad      	uxth	r5, r5
 8029f1a:	fb0c f00a 	mul.w	r0, ip, sl
 8029f1e:	fb0b 0005 	mla	r0, fp, r5, r0
 8029f22:	fb07 0009 	mla	r0, r7, r9, r0
 8029f26:	fb0e 0008 	mla	r0, lr, r8, r0
 8029f2a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8029f2e:	9001      	str	r0, [sp, #4]
 8029f30:	2800      	cmp	r0, #0
 8029f32:	f000 80d1 	beq.w	802a0d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 8029f36:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8029f3a:	d018      	beq.n	8029f6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 8029f3c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8029f40:	fb0b f000 	mul.w	r0, fp, r0
 8029f44:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029f48:	fb0b fb02 	mul.w	fp, fp, r2
 8029f4c:	0a02      	lsrs	r2, r0, #8
 8029f4e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029f52:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8029f56:	4402      	add	r2, r0
 8029f58:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8029f5c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029f60:	0a12      	lsrs	r2, r2, #8
 8029f62:	0a00      	lsrs	r0, r0, #8
 8029f64:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029f68:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8029f6c:	4302      	orrs	r2, r0
 8029f6e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8029f72:	d01a      	beq.n	8029faa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 8029f74:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8029f78:	fb0a f000 	mul.w	r0, sl, r0
 8029f7c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8029f80:	fb0a fa06 	mul.w	sl, sl, r6
 8029f84:	0a06      	lsrs	r6, r0, #8
 8029f86:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8029f8a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8029f8e:	4406      	add	r6, r0
 8029f90:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8029f94:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8029f98:	0a36      	lsrs	r6, r6, #8
 8029f9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029f9e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8029fa2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029fa6:	ea46 060a 	orr.w	r6, r6, sl
 8029faa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8029fae:	d01b      	beq.n	8029fe8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 8029fb0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8029fb4:	fb09 fa0a 	mul.w	sl, r9, sl
 8029fb8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8029fbc:	fb09 f004 	mul.w	r0, r9, r4
 8029fc0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8029fc4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8029fc8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029fcc:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8029fd0:	4454      	add	r4, sl
 8029fd2:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8029fd6:	0a24      	lsrs	r4, r4, #8
 8029fd8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029fdc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8029fe0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8029fe4:	ea44 0409 	orr.w	r4, r4, r9
 8029fe8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8029fec:	d01b      	beq.n	802a026 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 8029fee:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8029ff2:	fb08 f909 	mul.w	r9, r8, r9
 8029ff6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029ffa:	fb08 f003 	mul.w	r0, r8, r3
 8029ffe:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802a002:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a006:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802a00a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802a00e:	444b      	add	r3, r9
 802a010:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 802a014:	0a1b      	lsrs	r3, r3, #8
 802a016:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802a01a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a01e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802a022:	ea43 0308 	orr.w	r3, r3, r8
 802a026:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802a02a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802a02e:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 802a032:	fb0c f808 	mul.w	r8, ip, r8
 802a036:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a03a:	fb0c f606 	mul.w	r6, ip, r6
 802a03e:	fb05 8909 	mla	r9, r5, r9, r8
 802a042:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802a046:	fb05 6502 	mla	r5, r5, r2, r6
 802a04a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802a04e:	fb07 9908 	mla	r9, r7, r8, r9
 802a052:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802a056:	fb07 5704 	mla	r7, r7, r4, r5
 802a05a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a05e:	8808      	ldrh	r0, [r1, #0]
 802a060:	fb0e 9808 	mla	r8, lr, r8, r9
 802a064:	fb0e 7e03 	mla	lr, lr, r3, r7
 802a068:	9b01      	ldr	r3, [sp, #4]
 802a06a:	43da      	mvns	r2, r3
 802a06c:	1203      	asrs	r3, r0, #8
 802a06e:	b2d2      	uxtb	r2, r2
 802a070:	10c4      	asrs	r4, r0, #3
 802a072:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802a076:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a07a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802a07e:	00c0      	lsls	r0, r0, #3
 802a080:	4353      	muls	r3, r2
 802a082:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802a086:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802a08a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802a08e:	b2c0      	uxtb	r0, r0
 802a090:	ea48 0e0e 	orr.w	lr, r8, lr
 802a094:	4354      	muls	r4, r2
 802a096:	4350      	muls	r0, r2
 802a098:	1c5a      	adds	r2, r3, #1
 802a09a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802a09e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 802a0a2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a0a6:	1c62      	adds	r2, r4, #1
 802a0a8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802a0ac:	ea4f 221e 	mov.w	r2, lr, lsr #8
 802a0b0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802a0b4:	021b      	lsls	r3, r3, #8
 802a0b6:	00d2      	lsls	r2, r2, #3
 802a0b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a0bc:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802a0c0:	4313      	orrs	r3, r2
 802a0c2:	1c42      	adds	r2, r0, #1
 802a0c4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a0c8:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 802a0cc:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 802a0d0:	ea4e 0e03 	orr.w	lr, lr, r3
 802a0d4:	f8a1 e000 	strh.w	lr, [r1]
 802a0d8:	b003      	add	sp, #12
 802a0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a0de:	bf00      	nop
 802a0e0:	08032be1 	.word	0x08032be1
 802a0e4:	080331ae 	.word	0x080331ae
 802a0e8:	08032c65 	.word	0x08032c65

0802a0ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a0f0:	ed2d 8b08 	vpush	{d8-d11}
 802a0f4:	b09b      	sub	sp, #108	; 0x6c
 802a0f6:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 802a0fa:	9218      	str	r2, [sp, #96]	; 0x60
 802a0fc:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802a0fe:	9116      	str	r1, [sp, #88]	; 0x58
 802a100:	9307      	str	r3, [sp, #28]
 802a102:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802a106:	9019      	str	r0, [sp, #100]	; 0x64
 802a108:	6850      	ldr	r0, [r2, #4]
 802a10a:	6812      	ldr	r2, [r2, #0]
 802a10c:	fb00 1303 	mla	r3, r0, r3, r1
 802a110:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802a114:	930a      	str	r3, [sp, #40]	; 0x28
 802a116:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a118:	681b      	ldr	r3, [r3, #0]
 802a11a:	930f      	str	r3, [sp, #60]	; 0x3c
 802a11c:	eeb0 aa40 	vmov.f32	s20, s0
 802a120:	eef0 9a60 	vmov.f32	s19, s1
 802a124:	eeb0 9a41 	vmov.f32	s18, s2
 802a128:	eeb0 8a62 	vmov.f32	s16, s5
 802a12c:	eef0 8a43 	vmov.f32	s17, s6
 802a130:	eef0 ba44 	vmov.f32	s23, s8
 802a134:	eeb0 ba64 	vmov.f32	s22, s9
 802a138:	eef0 aa45 	vmov.f32	s21, s10
 802a13c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a13e:	2b00      	cmp	r3, #0
 802a140:	dc03      	bgt.n	802a14a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802a142:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802a144:	2b00      	cmp	r3, #0
 802a146:	f340 8386 	ble.w	802a856 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76a>
 802a14a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a14c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a150:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a154:	1e48      	subs	r0, r1, #1
 802a156:	1e57      	subs	r7, r2, #1
 802a158:	9b07      	ldr	r3, [sp, #28]
 802a15a:	2b00      	cmp	r3, #0
 802a15c:	f340 8166 	ble.w	802a42c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 802a160:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802a164:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a168:	d406      	bmi.n	802a178 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802a16a:	4584      	cmp	ip, r0
 802a16c:	da04      	bge.n	802a178 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802a16e:	2b00      	cmp	r3, #0
 802a170:	db02      	blt.n	802a178 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802a172:	42bb      	cmp	r3, r7
 802a174:	f2c0 815b 	blt.w	802a42e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802a178:	f11c 0c01 	adds.w	ip, ip, #1
 802a17c:	f100 814b 	bmi.w	802a416 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a180:	4561      	cmp	r1, ip
 802a182:	f2c0 8148 	blt.w	802a416 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a186:	3301      	adds	r3, #1
 802a188:	f100 8145 	bmi.w	802a416 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a18c:	429a      	cmp	r2, r3
 802a18e:	f2c0 8142 	blt.w	802a416 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a192:	9b07      	ldr	r3, [sp, #28]
 802a194:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802a196:	9317      	str	r3, [sp, #92]	; 0x5c
 802a198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a19a:	2b00      	cmp	r3, #0
 802a19c:	f340 8165 	ble.w	802a46a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802a1a0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 802a1a2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a1a4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802a1a8:	689b      	ldr	r3, [r3, #8]
 802a1aa:	1422      	asrs	r2, r4, #16
 802a1ac:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802a1b0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802a1b4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a1b8:	f100 81d5 	bmi.w	802a566 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a1bc:	f103 38ff 	add.w	r8, r3, #4294967295
 802a1c0:	4542      	cmp	r2, r8
 802a1c2:	f280 81d0 	bge.w	802a566 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a1c6:	f1bc 0f00 	cmp.w	ip, #0
 802a1ca:	f2c0 81cc 	blt.w	802a566 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a1ce:	f10e 38ff 	add.w	r8, lr, #4294967295
 802a1d2:	45c4      	cmp	ip, r8
 802a1d4:	f280 81c7 	bge.w	802a566 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a1d8:	b21b      	sxth	r3, r3
 802a1da:	fb0c 2203 	mla	r2, ip, r3, r2
 802a1de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a1e0:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802a1e4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802a1e8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802a1ec:	2900      	cmp	r1, #0
 802a1ee:	f000 8182 	beq.w	802a4f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 802a1f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802a1f6:	950b      	str	r5, [sp, #44]	; 0x2c
 802a1f8:	0e2d      	lsrs	r5, r5, #24
 802a1fa:	9512      	str	r5, [sp, #72]	; 0x48
 802a1fc:	b180      	cbz	r0, 802a220 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802a1fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802a202:	3b01      	subs	r3, #1
 802a204:	009b      	lsls	r3, r3, #2
 802a206:	3304      	adds	r3, #4
 802a208:	eb08 0c03 	add.w	ip, r8, r3
 802a20c:	f858 3003 	ldr.w	r3, [r8, r3]
 802a210:	9308      	str	r3, [sp, #32]
 802a212:	0e1b      	lsrs	r3, r3, #24
 802a214:	9310      	str	r3, [sp, #64]	; 0x40
 802a216:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802a21a:	930c      	str	r3, [sp, #48]	; 0x30
 802a21c:	0e1b      	lsrs	r3, r3, #24
 802a21e:	9313      	str	r3, [sp, #76]	; 0x4c
 802a220:	b289      	uxth	r1, r1
 802a222:	b280      	uxth	r0, r0
 802a224:	fb01 f900 	mul.w	r9, r1, r0
 802a228:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802a22c:	0109      	lsls	r1, r1, #4
 802a22e:	eba1 0809 	sub.w	r8, r1, r9
 802a232:	b280      	uxth	r0, r0
 802a234:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802a238:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802a23a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a23c:	fa1f f888 	uxth.w	r8, r8
 802a240:	1a09      	subs	r1, r1, r0
 802a242:	b289      	uxth	r1, r1
 802a244:	fb08 f303 	mul.w	r3, r8, r3
 802a248:	fb01 330e 	mla	r3, r1, lr, r3
 802a24c:	fb00 3305 	mla	r3, r0, r5, r3
 802a250:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a252:	fb09 3305 	mla	r3, r9, r5, r3
 802a256:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a25a:	2b00      	cmp	r3, #0
 802a25c:	f000 80d2 	beq.w	802a404 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a260:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802a264:	d01b      	beq.n	802a29e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 802a266:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802a26a:	fb0e fa0a 	mul.w	sl, lr, sl
 802a26e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a272:	fb0e fe02 	mul.w	lr, lr, r2
 802a276:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802a27a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a27e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802a282:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802a286:	4452      	add	r2, sl
 802a288:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802a28c:	0a12      	lsrs	r2, r2, #8
 802a28e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a292:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a296:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802a29a:	ea42 020c 	orr.w	r2, r2, ip
 802a29e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a2a0:	2dff      	cmp	r5, #255	; 0xff
 802a2a2:	d021      	beq.n	802a2e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802a2a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a2a6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a2aa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a2ac:	fb05 fb0b 	mul.w	fp, r5, fp
 802a2b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a2b2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a2b6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a2b8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a2bc:	fb05 fa0a 	mul.w	sl, r5, sl
 802a2c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a2c4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a2c8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a2cc:	44de      	add	lr, fp
 802a2ce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a2d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a2d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a2da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a2de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a2e2:	ea4e 050a 	orr.w	r5, lr, sl
 802a2e6:	950b      	str	r5, [sp, #44]	; 0x2c
 802a2e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a2ea:	2dff      	cmp	r5, #255	; 0xff
 802a2ec:	d021      	beq.n	802a332 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802a2ee:	9d08      	ldr	r5, [sp, #32]
 802a2f0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a2f4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a2f6:	fb05 fb0b 	mul.w	fp, r5, fp
 802a2fa:	9d08      	ldr	r5, [sp, #32]
 802a2fc:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802a300:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a302:	fb05 fa0e 	mul.w	sl, r5, lr
 802a306:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a30a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a30e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a312:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a316:	44de      	add	lr, fp
 802a318:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a31c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a320:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a324:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a328:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a32c:	ea4e 050a 	orr.w	r5, lr, sl
 802a330:	9508      	str	r5, [sp, #32]
 802a332:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a334:	2dff      	cmp	r5, #255	; 0xff
 802a336:	d021      	beq.n	802a37c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802a338:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a33a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a33e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a340:	fb05 fb0b 	mul.w	fp, r5, fp
 802a344:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a346:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a34a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a34c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a350:	fb05 fa0a 	mul.w	sl, r5, sl
 802a354:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a358:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a35c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a360:	44de      	add	lr, fp
 802a362:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a366:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a36a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a36e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a372:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a376:	ea4e 050a 	orr.w	r5, lr, sl
 802a37a:	950c      	str	r5, [sp, #48]	; 0x30
 802a37c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a37e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a382:	9d08      	ldr	r5, [sp, #32]
 802a384:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802a388:	fb08 fc0c 	mul.w	ip, r8, ip
 802a38c:	fb01 cc0e 	mla	ip, r1, lr, ip
 802a390:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802a394:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a396:	fb00 cc0e 	mla	ip, r0, lr, ip
 802a39a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802a39e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a3a0:	fb09 cc0e 	mla	ip, r9, lr, ip
 802a3a4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802a3a8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a3ac:	fb08 f80e 	mul.w	r8, r8, lr
 802a3b0:	fb01 8202 	mla	r2, r1, r2, r8
 802a3b4:	9908      	ldr	r1, [sp, #32]
 802a3b6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802a3ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a3bc:	fb00 220a 	mla	r2, r0, sl, r2
 802a3c0:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802a3c4:	fb09 2900 	mla	r9, r9, r0, r2
 802a3c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a3cc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a3d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a3d4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802a3d8:	ea4c 0c09 	orr.w	ip, ip, r9
 802a3dc:	2bff      	cmp	r3, #255	; 0xff
 802a3de:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802a3e2:	f040 8091 	bne.w	802a508 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802a3e6:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802a3ea:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802a3ee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a3f2:	f022 0207 	bic.w	r2, r2, #7
 802a3f6:	431a      	orrs	r2, r3
 802a3f8:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802a3fc:	ea4c 0c02 	orr.w	ip, ip, r2
 802a400:	f8a7 c000 	strh.w	ip, [r7]
 802a404:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802a406:	441c      	add	r4, r3
 802a408:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a40a:	441e      	add	r6, r3
 802a40c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a40e:	3b01      	subs	r3, #1
 802a410:	3702      	adds	r7, #2
 802a412:	9317      	str	r3, [sp, #92]	; 0x5c
 802a414:	e6c0      	b.n	802a198 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 802a416:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802a418:	441c      	add	r4, r3
 802a41a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a41c:	441e      	add	r6, r3
 802a41e:	9b07      	ldr	r3, [sp, #28]
 802a420:	3b01      	subs	r3, #1
 802a422:	9307      	str	r3, [sp, #28]
 802a424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a426:	3302      	adds	r3, #2
 802a428:	930a      	str	r3, [sp, #40]	; 0x28
 802a42a:	e695      	b.n	802a158 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802a42c:	d024      	beq.n	802a478 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 802a42e:	9b07      	ldr	r3, [sp, #28]
 802a430:	982f      	ldr	r0, [sp, #188]	; 0xbc
 802a432:	3b01      	subs	r3, #1
 802a434:	fb00 4003 	mla	r0, r0, r3, r4
 802a438:	1400      	asrs	r0, r0, #16
 802a43a:	f53f aeaa 	bmi.w	802a192 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a43e:	3901      	subs	r1, #1
 802a440:	4288      	cmp	r0, r1
 802a442:	f6bf aea6 	bge.w	802a192 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a446:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802a448:	fb01 6303 	mla	r3, r1, r3, r6
 802a44c:	141b      	asrs	r3, r3, #16
 802a44e:	f53f aea0 	bmi.w	802a192 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a452:	3a01      	subs	r2, #1
 802a454:	4293      	cmp	r3, r2
 802a456:	f6bf ae9c 	bge.w	802a192 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a45a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802a45e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802a462:	f1bb 0f00 	cmp.w	fp, #0
 802a466:	f300 809a 	bgt.w	802a59e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 802a46a:	9b07      	ldr	r3, [sp, #28]
 802a46c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802a470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a472:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802a476:	930a      	str	r3, [sp, #40]	; 0x28
 802a478:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a47a:	2b00      	cmp	r3, #0
 802a47c:	f340 81eb 	ble.w	802a856 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76a>
 802a480:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802a484:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a488:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802a48c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a48e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802a492:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802a496:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802a49a:	eef0 6a48 	vmov.f32	s13, s16
 802a49e:	ee69 7a27 	vmul.f32	s15, s18, s15
 802a4a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a4a6:	ee37 8a48 	vsub.f32	s16, s14, s16
 802a4aa:	ee16 4a90 	vmov	r4, s13
 802a4ae:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802a4b2:	eef0 6a68 	vmov.f32	s13, s17
 802a4b6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802a4ba:	ee18 2a10 	vmov	r2, s16
 802a4be:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802a4c2:	fb92 f3f3 	sdiv	r3, r2, r3
 802a4c6:	ee18 2a90 	vmov	r2, s17
 802a4ca:	932f      	str	r3, [sp, #188]	; 0xbc
 802a4cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a4ce:	fb92 f3f3 	sdiv	r3, r2, r3
 802a4d2:	9330      	str	r3, [sp, #192]	; 0xc0
 802a4d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a4d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802a4d8:	3b01      	subs	r3, #1
 802a4da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a4de:	9316      	str	r3, [sp, #88]	; 0x58
 802a4e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a4e2:	bf08      	it	eq
 802a4e4:	4613      	moveq	r3, r2
 802a4e6:	ee16 6a90 	vmov	r6, s13
 802a4ea:	9307      	str	r3, [sp, #28]
 802a4ec:	eef0 8a67 	vmov.f32	s17, s15
 802a4f0:	eeb0 8a47 	vmov.f32	s16, s14
 802a4f4:	e622      	b.n	802a13c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 802a4f6:	2800      	cmp	r0, #0
 802a4f8:	f43f ae92 	beq.w	802a220 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802a4fc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802a500:	9308      	str	r3, [sp, #32]
 802a502:	0e1b      	lsrs	r3, r3, #24
 802a504:	9310      	str	r3, [sp, #64]	; 0x40
 802a506:	e68b      	b.n	802a220 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802a508:	8839      	ldrh	r1, [r7, #0]
 802a50a:	4dd5      	ldr	r5, [pc, #852]	; (802a860 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>)
 802a50c:	43db      	mvns	r3, r3
 802a50e:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802a512:	fa5f f883 	uxtb.w	r8, r3
 802a516:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802a51a:	fb0e fe08 	mul.w	lr, lr, r8
 802a51e:	10c8      	asrs	r0, r1, #3
 802a520:	00cb      	lsls	r3, r1, #3
 802a522:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a526:	f10e 0101 	add.w	r1, lr, #1
 802a52a:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802a52e:	fb00 f008 	mul.w	r0, r0, r8
 802a532:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802a536:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 802a53a:	f100 0e01 	add.w	lr, r0, #1
 802a53e:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802a542:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802a546:	b2db      	uxtb	r3, r3
 802a548:	b2c9      	uxtb	r1, r1
 802a54a:	00d2      	lsls	r2, r2, #3
 802a54c:	fb03 f308 	mul.w	r3, r3, r8
 802a550:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802a554:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a558:	430a      	orrs	r2, r1
 802a55a:	1c59      	adds	r1, r3, #1
 802a55c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802a560:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802a564:	e748      	b.n	802a3f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802a566:	f112 0801 	adds.w	r8, r2, #1
 802a56a:	f53f af4b 	bmi.w	802a404 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a56e:	4543      	cmp	r3, r8
 802a570:	f6ff af48 	blt.w	802a404 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a574:	f11c 0801 	adds.w	r8, ip, #1
 802a578:	f53f af44 	bmi.w	802a404 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a57c:	45c6      	cmp	lr, r8
 802a57e:	f6ff af41 	blt.w	802a404 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a582:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802a586:	fa0f f28e 	sxth.w	r2, lr
 802a58a:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802a58e:	9200      	str	r2, [sp, #0]
 802a590:	b21b      	sxth	r3, r3
 802a592:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a594:	9819      	ldr	r0, [sp, #100]	; 0x64
 802a596:	4639      	mov	r1, r7
 802a598:	f7ff fc54 	bl	8029e44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802a59c:	e732      	b.n	802a404 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a59e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a5a0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a5a2:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802a5a6:	1421      	asrs	r1, r4, #16
 802a5a8:	1433      	asrs	r3, r6, #16
 802a5aa:	fb07 1303 	mla	r3, r7, r3, r1
 802a5ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802a5b0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802a5b4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802a5b8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802a5bc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a5c0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802a5c4:	2a00      	cmp	r2, #0
 802a5c6:	f000 8107 	beq.w	802a7d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ec>
 802a5ca:	684d      	ldr	r5, [r1, #4]
 802a5cc:	950d      	str	r5, [sp, #52]	; 0x34
 802a5ce:	0e2d      	lsrs	r5, r5, #24
 802a5d0:	9514      	str	r5, [sp, #80]	; 0x50
 802a5d2:	b178      	cbz	r0, 802a5f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802a5d4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 802a5d8:	3f01      	subs	r7, #1
 802a5da:	00bf      	lsls	r7, r7, #2
 802a5dc:	3704      	adds	r7, #4
 802a5de:	eb01 0e07 	add.w	lr, r1, r7
 802a5e2:	59c9      	ldr	r1, [r1, r7]
 802a5e4:	9109      	str	r1, [sp, #36]	; 0x24
 802a5e6:	0e09      	lsrs	r1, r1, #24
 802a5e8:	9111      	str	r1, [sp, #68]	; 0x44
 802a5ea:	f8de 1004 	ldr.w	r1, [lr, #4]
 802a5ee:	910e      	str	r1, [sp, #56]	; 0x38
 802a5f0:	0e09      	lsrs	r1, r1, #24
 802a5f2:	9115      	str	r1, [sp, #84]	; 0x54
 802a5f4:	b292      	uxth	r2, r2
 802a5f6:	b280      	uxth	r0, r0
 802a5f8:	fb02 f900 	mul.w	r9, r2, r0
 802a5fc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802a600:	0112      	lsls	r2, r2, #4
 802a602:	eba2 0e09 	sub.w	lr, r2, r9
 802a606:	b280      	uxth	r0, r0
 802a608:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802a60c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802a60e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802a610:	fa1f fe8e 	uxth.w	lr, lr
 802a614:	1a09      	subs	r1, r1, r0
 802a616:	b289      	uxth	r1, r1
 802a618:	fb0e f202 	mul.w	r2, lr, r2
 802a61c:	fb01 220c 	mla	r2, r1, ip, r2
 802a620:	fb00 2205 	mla	r2, r0, r5, r2
 802a624:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a626:	fb09 2205 	mla	r2, r9, r5, r2
 802a62a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802a62e:	2a00      	cmp	r2, #0
 802a630:	f000 80c9 	beq.w	802a7c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 802a634:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802a638:	d019      	beq.n	802a66e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 802a63a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802a63e:	fb0c fa0a 	mul.w	sl, ip, sl
 802a642:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a646:	fb0c fc03 	mul.w	ip, ip, r3
 802a64a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802a64e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a652:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802a656:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802a65a:	4453      	add	r3, sl
 802a65c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802a660:	0a1b      	lsrs	r3, r3, #8
 802a662:	0a3f      	lsrs	r7, r7, #8
 802a664:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a668:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802a66c:	433b      	orrs	r3, r7
 802a66e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802a670:	2dff      	cmp	r5, #255	; 0xff
 802a672:	d020      	beq.n	802a6b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 802a674:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a676:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a67a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802a67c:	436f      	muls	r7, r5
 802a67e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a680:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a684:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802a686:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a68a:	fb05 fa0a 	mul.w	sl, r5, sl
 802a68e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a692:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a696:	44bc      	add	ip, r7
 802a698:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a69c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a6a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a6a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a6a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a6ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a6b0:	ea4c 050a 	orr.w	r5, ip, sl
 802a6b4:	950d      	str	r5, [sp, #52]	; 0x34
 802a6b6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802a6b8:	2dff      	cmp	r5, #255	; 0xff
 802a6ba:	d020      	beq.n	802a6fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 802a6bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a6be:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a6c2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802a6c4:	436f      	muls	r7, r5
 802a6c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a6c8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802a6cc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802a6ce:	fb05 fa0c 	mul.w	sl, r5, ip
 802a6d2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a6d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a6da:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a6de:	44bc      	add	ip, r7
 802a6e0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a6e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a6e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a6ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a6f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a6f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a6f8:	ea4c 050a 	orr.w	r5, ip, sl
 802a6fc:	9509      	str	r5, [sp, #36]	; 0x24
 802a6fe:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a700:	2dff      	cmp	r5, #255	; 0xff
 802a702:	d020      	beq.n	802a746 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 802a704:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a706:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a70a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a70c:	436f      	muls	r7, r5
 802a70e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a710:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a714:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a716:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a71a:	fb05 fa0a 	mul.w	sl, r5, sl
 802a71e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a722:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a726:	44bc      	add	ip, r7
 802a728:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a72c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a730:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a734:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a738:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a73c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a740:	ea4c 050a 	orr.w	r5, ip, sl
 802a744:	950e      	str	r5, [sp, #56]	; 0x38
 802a746:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a748:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a74c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a74e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802a752:	fb0e f707 	mul.w	r7, lr, r7
 802a756:	fb01 770c 	mla	r7, r1, ip, r7
 802a75a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a75e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a760:	fb00 770c 	mla	r7, r0, ip, r7
 802a764:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a768:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a76a:	fb09 770c 	mla	r7, r9, ip, r7
 802a76e:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802a772:	fb0e fe0c 	mul.w	lr, lr, ip
 802a776:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a77a:	fb01 e303 	mla	r3, r1, r3, lr
 802a77e:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a780:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802a784:	990e      	ldr	r1, [sp, #56]	; 0x38
 802a786:	fb00 330a 	mla	r3, r0, sl, r3
 802a78a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802a78e:	fb09 3c0c 	mla	ip, r9, ip, r3
 802a792:	0a3f      	lsrs	r7, r7, #8
 802a794:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a798:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802a79c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802a7a0:	ea47 070c 	orr.w	r7, r7, ip
 802a7a4:	2aff      	cmp	r2, #255	; 0xff
 802a7a6:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802a7aa:	d11e      	bne.n	802a7ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 802a7ac:	097a      	lsrs	r2, r7, #5
 802a7ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802a7b2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a7b6:	f023 0307 	bic.w	r3, r3, #7
 802a7ba:	4313      	orrs	r3, r2
 802a7bc:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802a7c0:	431f      	orrs	r7, r3
 802a7c2:	f8a8 7000 	strh.w	r7, [r8]
 802a7c6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802a7c8:	441c      	add	r4, r3
 802a7ca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a7cc:	f108 0802 	add.w	r8, r8, #2
 802a7d0:	441e      	add	r6, r3
 802a7d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a7d6:	e644      	b.n	802a462 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 802a7d8:	2800      	cmp	r0, #0
 802a7da:	f43f af0b 	beq.w	802a5f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802a7de:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802a7e2:	9109      	str	r1, [sp, #36]	; 0x24
 802a7e4:	0e09      	lsrs	r1, r1, #24
 802a7e6:	9111      	str	r1, [sp, #68]	; 0x44
 802a7e8:	e704      	b.n	802a5f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802a7ea:	f8b8 1000 	ldrh.w	r1, [r8]
 802a7ee:	43d2      	mvns	r2, r2
 802a7f0:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802a7f4:	fa5f fe82 	uxtb.w	lr, r2
 802a7f8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802a7fc:	fb0c fc0e 	mul.w	ip, ip, lr
 802a800:	10c8      	asrs	r0, r1, #3
 802a802:	00ca      	lsls	r2, r1, #3
 802a804:	f10c 0101 	add.w	r1, ip, #1
 802a808:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a80c:	0c39      	lsrs	r1, r7, #16
 802a80e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a812:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a816:	4912      	ldr	r1, [pc, #72]	; (802a860 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>)
 802a818:	fb00 f00e 	mul.w	r0, r0, lr
 802a81c:	fa5f fc8c 	uxtb.w	ip, ip
 802a820:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802a824:	b2d2      	uxtb	r2, r2
 802a826:	1c41      	adds	r1, r0, #1
 802a828:	fb02 f20e 	mul.w	r2, r2, lr
 802a82c:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802a830:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a834:	1c51      	adds	r1, r2, #1
 802a836:	00c0      	lsls	r0, r0, #3
 802a838:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802a83c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a840:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802a844:	ea4c 0c00 	orr.w	ip, ip, r0
 802a848:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802a84c:	ea47 0c0c 	orr.w	ip, r7, ip
 802a850:	f8a8 c000 	strh.w	ip, [r8]
 802a854:	e7b7      	b.n	802a7c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 802a856:	b01b      	add	sp, #108	; 0x6c
 802a858:	ecbd 8b08 	vpop	{d8-d11}
 802a85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a860:	fffff800 	.word	0xfffff800

0802a864 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802a864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a868:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802a86c:	2c00      	cmp	r4, #0
 802a86e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802a872:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802a876:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802a87a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802a87e:	fb04 ce03 	mla	lr, r4, r3, ip
 802a882:	db60      	blt.n	802a946 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802a884:	45a1      	cmp	r9, r4
 802a886:	dd5e      	ble.n	802a946 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802a888:	f1bc 0f00 	cmp.w	ip, #0
 802a88c:	db59      	blt.n	802a942 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802a88e:	45e0      	cmp	r8, ip
 802a890:	dd57      	ble.n	802a942 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802a892:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802a896:	f01e 0f01 	tst.w	lr, #1
 802a89a:	5c16      	ldrb	r6, [r2, r0]
 802a89c:	bf0c      	ite	eq
 802a89e:	f006 060f 	andeq.w	r6, r6, #15
 802a8a2:	1136      	asrne	r6, r6, #4
 802a8a4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a8a8:	b2f6      	uxtb	r6, r6
 802a8aa:	f11c 0001 	adds.w	r0, ip, #1
 802a8ae:	d44d      	bmi.n	802a94c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802a8b0:	4580      	cmp	r8, r0
 802a8b2:	dd4b      	ble.n	802a94c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802a8b4:	2d00      	cmp	r5, #0
 802a8b6:	d04b      	beq.n	802a950 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 802a8b8:	f10e 0a01 	add.w	sl, lr, #1
 802a8bc:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802a8c0:	f01a 0f01 	tst.w	sl, #1
 802a8c4:	5c10      	ldrb	r0, [r2, r0]
 802a8c6:	bf0c      	ite	eq
 802a8c8:	f000 000f 	andeq.w	r0, r0, #15
 802a8cc:	1100      	asrne	r0, r0, #4
 802a8ce:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a8d2:	b2c0      	uxtb	r0, r0
 802a8d4:	3401      	adds	r4, #1
 802a8d6:	d43f      	bmi.n	802a958 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802a8d8:	45a1      	cmp	r9, r4
 802a8da:	dd3d      	ble.n	802a958 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802a8dc:	2f00      	cmp	r7, #0
 802a8de:	f000 80a8 	beq.w	802aa32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 802a8e2:	f1bc 0f00 	cmp.w	ip, #0
 802a8e6:	db35      	blt.n	802a954 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802a8e8:	45e0      	cmp	r8, ip
 802a8ea:	dd33      	ble.n	802a954 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802a8ec:	eb03 090e 	add.w	r9, r3, lr
 802a8f0:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802a8f4:	f019 0f01 	tst.w	r9, #1
 802a8f8:	5d14      	ldrb	r4, [r2, r4]
 802a8fa:	bf0c      	ite	eq
 802a8fc:	f004 040f 	andeq.w	r4, r4, #15
 802a900:	1124      	asrne	r4, r4, #4
 802a902:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a906:	b2e4      	uxtb	r4, r4
 802a908:	f11c 0c01 	adds.w	ip, ip, #1
 802a90c:	d427      	bmi.n	802a95e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802a90e:	45e0      	cmp	r8, ip
 802a910:	dd25      	ble.n	802a95e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802a912:	b335      	cbz	r5, 802a962 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 802a914:	3301      	adds	r3, #1
 802a916:	449e      	add	lr, r3
 802a918:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a91c:	f01e 0f01 	tst.w	lr, #1
 802a920:	5cd2      	ldrb	r2, [r2, r3]
 802a922:	bf0c      	ite	eq
 802a924:	f002 020f 	andeq.w	r2, r2, #15
 802a928:	1112      	asrne	r2, r2, #4
 802a92a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a92e:	b2d3      	uxtb	r3, r2
 802a930:	2d0f      	cmp	r5, #15
 802a932:	d917      	bls.n	802a964 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 802a934:	4b42      	ldr	r3, [pc, #264]	; (802aa40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 802a936:	4a43      	ldr	r2, [pc, #268]	; (802aa44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 802a938:	4843      	ldr	r0, [pc, #268]	; (802aa48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 802a93a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802a93e:	f003 fabf 	bl	802dec0 <__assert_func>
 802a942:	2600      	movs	r6, #0
 802a944:	e7b1      	b.n	802a8aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 802a946:	2000      	movs	r0, #0
 802a948:	4606      	mov	r6, r0
 802a94a:	e7c3      	b.n	802a8d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802a94c:	2000      	movs	r0, #0
 802a94e:	e7c1      	b.n	802a8d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802a950:	4628      	mov	r0, r5
 802a952:	e7bf      	b.n	802a8d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802a954:	2400      	movs	r4, #0
 802a956:	e7d7      	b.n	802a908 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 802a958:	2300      	movs	r3, #0
 802a95a:	461c      	mov	r4, r3
 802a95c:	e7e8      	b.n	802a930 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802a95e:	2300      	movs	r3, #0
 802a960:	e7e6      	b.n	802a930 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802a962:	462b      	mov	r3, r5
 802a964:	2f0f      	cmp	r7, #15
 802a966:	d8e5      	bhi.n	802a934 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802a968:	b2ad      	uxth	r5, r5
 802a96a:	b2bf      	uxth	r7, r7
 802a96c:	fb05 fc07 	mul.w	ip, r5, r7
 802a970:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802a974:	012d      	lsls	r5, r5, #4
 802a976:	b2bf      	uxth	r7, r7
 802a978:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802a97c:	eba5 050c 	sub.w	r5, r5, ip
 802a980:	1bd2      	subs	r2, r2, r7
 802a982:	b2ad      	uxth	r5, r5
 802a984:	b292      	uxth	r2, r2
 802a986:	4368      	muls	r0, r5
 802a988:	fb06 0002 	mla	r0, r6, r2, r0
 802a98c:	fb07 0404 	mla	r4, r7, r4, r0
 802a990:	fb0c 4303 	mla	r3, ip, r3, r4
 802a994:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a998:	b1b3      	cbz	r3, 802a9c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 802a99a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 802a99e:	435a      	muls	r2, r3
 802a9a0:	1c53      	adds	r3, r2, #1
 802a9a2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a9a6:	4a29      	ldr	r2, [pc, #164]	; (802aa4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 802a9a8:	121b      	asrs	r3, r3, #8
 802a9aa:	6812      	ldr	r2, [r2, #0]
 802a9ac:	2bff      	cmp	r3, #255	; 0xff
 802a9ae:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802a9b2:	d10b      	bne.n	802a9cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 802a9b4:	4b26      	ldr	r3, [pc, #152]	; (802aa50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 802a9b6:	0950      	lsrs	r0, r2, #5
 802a9b8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a9bc:	4033      	ands	r3, r6
 802a9be:	4318      	orrs	r0, r3
 802a9c0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a9c4:	4302      	orrs	r2, r0
 802a9c6:	800a      	strh	r2, [r1, #0]
 802a9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a9cc:	880d      	ldrh	r5, [r1, #0]
 802a9ce:	b29f      	uxth	r7, r3
 802a9d0:	122c      	asrs	r4, r5, #8
 802a9d2:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802a9d6:	43db      	mvns	r3, r3
 802a9d8:	b2db      	uxtb	r3, r3
 802a9da:	fb10 f007 	smulbb	r0, r0, r7
 802a9de:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802a9e2:	fb04 0403 	mla	r4, r4, r3, r0
 802a9e6:	b2f6      	uxtb	r6, r6
 802a9e8:	10e8      	asrs	r0, r5, #3
 802a9ea:	b2d2      	uxtb	r2, r2
 802a9ec:	00ed      	lsls	r5, r5, #3
 802a9ee:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a9f2:	fb12 f207 	smulbb	r2, r2, r7
 802a9f6:	fb16 f607 	smulbb	r6, r6, r7
 802a9fa:	b2ed      	uxtb	r5, r5
 802a9fc:	b2a4      	uxth	r4, r4
 802a9fe:	fb00 6603 	mla	r6, r0, r3, r6
 802aa02:	fb05 2303 	mla	r3, r5, r3, r2
 802aa06:	b29a      	uxth	r2, r3
 802aa08:	1c63      	adds	r3, r4, #1
 802aa0a:	b2b0      	uxth	r0, r6
 802aa0c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802aa10:	1c53      	adds	r3, r2, #1
 802aa12:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802aa16:	1c42      	adds	r2, r0, #1
 802aa18:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802aa1c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802aa20:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802aa24:	0940      	lsrs	r0, r0, #5
 802aa26:	4323      	orrs	r3, r4
 802aa28:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802aa2c:	4303      	orrs	r3, r0
 802aa2e:	800b      	strh	r3, [r1, #0]
 802aa30:	e7ca      	b.n	802a9c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 802aa32:	2d0f      	cmp	r5, #15
 802aa34:	f63f af7e 	bhi.w	802a934 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802aa38:	463b      	mov	r3, r7
 802aa3a:	463c      	mov	r4, r7
 802aa3c:	e794      	b.n	802a968 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 802aa3e:	bf00      	nop
 802aa40:	08032be1 	.word	0x08032be1
 802aa44:	080331ae 	.word	0x080331ae
 802aa48:	08032c65 	.word	0x08032c65
 802aa4c:	20009784 	.word	0x20009784
 802aa50:	00fff800 	.word	0x00fff800

0802aa54 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802aa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa58:	ed2d 8b08 	vpush	{d8-d11}
 802aa5c:	b097      	sub	sp, #92	; 0x5c
 802aa5e:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 802aa62:	9214      	str	r2, [sp, #80]	; 0x50
 802aa64:	9309      	str	r3, [sp, #36]	; 0x24
 802aa66:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802aa68:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802aa6c:	910d      	str	r1, [sp, #52]	; 0x34
 802aa6e:	930f      	str	r3, [sp, #60]	; 0x3c
 802aa70:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802aa74:	9015      	str	r0, [sp, #84]	; 0x54
 802aa76:	6850      	ldr	r0, [r2, #4]
 802aa78:	6812      	ldr	r2, [r2, #0]
 802aa7a:	fb00 1303 	mla	r3, r0, r3, r1
 802aa7e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802aa82:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802aa84:	689b      	ldr	r3, [r3, #8]
 802aa86:	3301      	adds	r3, #1
 802aa88:	f023 0301 	bic.w	r3, r3, #1
 802aa8c:	930a      	str	r3, [sp, #40]	; 0x28
 802aa8e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802aa90:	681f      	ldr	r7, [r3, #0]
 802aa92:	eeb0 aa40 	vmov.f32	s20, s0
 802aa96:	eef0 9a60 	vmov.f32	s19, s1
 802aa9a:	eeb0 9a41 	vmov.f32	s18, s2
 802aa9e:	eeb0 8a62 	vmov.f32	s16, s5
 802aaa2:	eef0 8a43 	vmov.f32	s17, s6
 802aaa6:	eef0 ba44 	vmov.f32	s23, s8
 802aaaa:	eeb0 ba64 	vmov.f32	s22, s9
 802aaae:	eef0 aa45 	vmov.f32	s21, s10
 802aab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802aab4:	2b00      	cmp	r3, #0
 802aab6:	dc03      	bgt.n	802aac0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802aab8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802aaba:	2b00      	cmp	r3, #0
 802aabc:	f340 8287 	ble.w	802afce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 802aac0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802aac2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802aac6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802aaca:	1e48      	subs	r0, r1, #1
 802aacc:	f102 3cff 	add.w	ip, r2, #4294967295
 802aad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aad2:	2b00      	cmp	r3, #0
 802aad4:	f340 80c4 	ble.w	802ac60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802aad8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802aadc:	ea4f 4326 	mov.w	r3, r6, asr #16
 802aae0:	d406      	bmi.n	802aaf0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802aae2:	4586      	cmp	lr, r0
 802aae4:	da04      	bge.n	802aaf0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802aae6:	2b00      	cmp	r3, #0
 802aae8:	db02      	blt.n	802aaf0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802aaea:	4563      	cmp	r3, ip
 802aaec:	f2c0 80b9 	blt.w	802ac62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802aaf0:	f11e 0e01 	adds.w	lr, lr, #1
 802aaf4:	f100 80aa 	bmi.w	802ac4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802aaf8:	4571      	cmp	r1, lr
 802aafa:	f2c0 80a7 	blt.w	802ac4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802aafe:	3301      	adds	r3, #1
 802ab00:	f100 80a4 	bmi.w	802ac4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802ab04:	429a      	cmp	r2, r3
 802ab06:	f2c0 80a1 	blt.w	802ac4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802ab0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ab0c:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802ab10:	930e      	str	r3, [sp, #56]	; 0x38
 802ab12:	46c8      	mov	r8, r9
 802ab14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802ab16:	2b00      	cmp	r3, #0
 802ab18:	f340 80c3 	ble.w	802aca2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802ab1c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802ab1e:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802ab22:	1423      	asrs	r3, r4, #16
 802ab24:	ea4f 4026 	mov.w	r0, r6, asr #16
 802ab28:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802ab2c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802ab30:	f100 814d 	bmi.w	802adce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802ab34:	f10c 3bff 	add.w	fp, ip, #4294967295
 802ab38:	455b      	cmp	r3, fp
 802ab3a:	f280 8148 	bge.w	802adce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802ab3e:	2800      	cmp	r0, #0
 802ab40:	f2c0 8145 	blt.w	802adce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802ab44:	f10e 3bff 	add.w	fp, lr, #4294967295
 802ab48:	4558      	cmp	r0, fp
 802ab4a:	f280 8140 	bge.w	802adce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802ab4e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802ab50:	fb00 3305 	mla	r3, r0, r5, r3
 802ab54:	0858      	lsrs	r0, r3, #1
 802ab56:	07dd      	lsls	r5, r3, #31
 802ab58:	f817 c000 	ldrb.w	ip, [r7, r0]
 802ab5c:	bf54      	ite	pl
 802ab5e:	f00c 0c0f 	andpl.w	ip, ip, #15
 802ab62:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802ab66:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ab6a:	fa5f fc8c 	uxtb.w	ip, ip
 802ab6e:	2a00      	cmp	r2, #0
 802ab70:	f000 80db 	beq.w	802ad2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 802ab74:	1c58      	adds	r0, r3, #1
 802ab76:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802ab7a:	07c0      	lsls	r0, r0, #31
 802ab7c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802ab80:	bf54      	ite	pl
 802ab82:	f00e 0e0f 	andpl.w	lr, lr, #15
 802ab86:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802ab8a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802ab8e:	fa5f f08e 	uxtb.w	r0, lr
 802ab92:	9010      	str	r0, [sp, #64]	; 0x40
 802ab94:	b1c9      	cbz	r1, 802abca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802ab96:	4453      	add	r3, sl
 802ab98:	0858      	lsrs	r0, r3, #1
 802ab9a:	07dd      	lsls	r5, r3, #31
 802ab9c:	5c38      	ldrb	r0, [r7, r0]
 802ab9e:	bf54      	ite	pl
 802aba0:	f000 000f 	andpl.w	r0, r0, #15
 802aba4:	1100      	asrmi	r0, r0, #4
 802aba6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802abaa:	3301      	adds	r3, #1
 802abac:	b2c0      	uxtb	r0, r0
 802abae:	900b      	str	r0, [sp, #44]	; 0x2c
 802abb0:	0858      	lsrs	r0, r3, #1
 802abb2:	07dd      	lsls	r5, r3, #31
 802abb4:	f817 e000 	ldrb.w	lr, [r7, r0]
 802abb8:	bf54      	ite	pl
 802abba:	f00e 030f 	andpl.w	r3, lr, #15
 802abbe:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802abc2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802abc6:	b2db      	uxtb	r3, r3
 802abc8:	9311      	str	r3, [sp, #68]	; 0x44
 802abca:	b292      	uxth	r2, r2
 802abcc:	b289      	uxth	r1, r1
 802abce:	fb02 f301 	mul.w	r3, r2, r1
 802abd2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802abd6:	0112      	lsls	r2, r2, #4
 802abd8:	b289      	uxth	r1, r1
 802abda:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802abde:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802abe0:	1ad2      	subs	r2, r2, r3
 802abe2:	1a40      	subs	r0, r0, r1
 802abe4:	b292      	uxth	r2, r2
 802abe6:	436a      	muls	r2, r5
 802abe8:	b280      	uxth	r0, r0
 802abea:	fb0c 2c00 	mla	ip, ip, r0, r2
 802abee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802abf0:	fb01 c102 	mla	r1, r1, r2, ip
 802abf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802abf6:	fb03 1302 	mla	r3, r3, r2, r1
 802abfa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802abfe:	b1db      	cbz	r3, 802ac38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802ac00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802ac02:	4353      	muls	r3, r2
 802ac04:	1c5a      	adds	r2, r3, #1
 802ac06:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802ac0a:	4ac6      	ldr	r2, [pc, #792]	; (802af24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>)
 802ac0c:	121b      	asrs	r3, r3, #8
 802ac0e:	6812      	ldr	r2, [r2, #0]
 802ac10:	2bff      	cmp	r3, #255	; 0xff
 802ac12:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802ac16:	f040 8099 	bne.w	802ad4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802ac1a:	0953      	lsrs	r3, r2, #5
 802ac1c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802ac20:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802ac24:	f02c 0c07 	bic.w	ip, ip, #7
 802ac28:	ea43 0c0c 	orr.w	ip, r3, ip
 802ac2c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802ac30:	ea4c 0202 	orr.w	r2, ip, r2
 802ac34:	f8a8 2000 	strh.w	r2, [r8]
 802ac38:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802ac3a:	441c      	add	r4, r3
 802ac3c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802ac3e:	441e      	add	r6, r3
 802ac40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802ac42:	3b01      	subs	r3, #1
 802ac44:	f108 0802 	add.w	r8, r8, #2
 802ac48:	930e      	str	r3, [sp, #56]	; 0x38
 802ac4a:	e763      	b.n	802ab14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802ac4c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802ac4e:	441c      	add	r4, r3
 802ac50:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802ac52:	441e      	add	r6, r3
 802ac54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ac56:	3b01      	subs	r3, #1
 802ac58:	9309      	str	r3, [sp, #36]	; 0x24
 802ac5a:	f109 0902 	add.w	r9, r9, #2
 802ac5e:	e737      	b.n	802aad0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802ac60:	d024      	beq.n	802acac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802ac62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ac64:	982b      	ldr	r0, [sp, #172]	; 0xac
 802ac66:	3b01      	subs	r3, #1
 802ac68:	fb00 4003 	mla	r0, r0, r3, r4
 802ac6c:	1400      	asrs	r0, r0, #16
 802ac6e:	f53f af4c 	bmi.w	802ab0a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802ac72:	3901      	subs	r1, #1
 802ac74:	4288      	cmp	r0, r1
 802ac76:	f6bf af48 	bge.w	802ab0a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802ac7a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802ac7c:	fb01 6303 	mla	r3, r1, r3, r6
 802ac80:	141b      	asrs	r3, r3, #16
 802ac82:	f53f af42 	bmi.w	802ab0a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802ac86:	3a01      	subs	r2, #1
 802ac88:	4293      	cmp	r3, r2
 802ac8a:	f6bf af3e 	bge.w	802ab0a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802ac8e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802ac92:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802ac96:	930e      	str	r3, [sp, #56]	; 0x38
 802ac98:	46c8      	mov	r8, r9
 802ac9a:	f1bb 0f00 	cmp.w	fp, #0
 802ac9e:	f300 80b7 	bgt.w	802ae10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 802aca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aca4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802aca8:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802acac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802acae:	2b00      	cmp	r3, #0
 802acb0:	f340 818d 	ble.w	802afce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 802acb4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802acb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802acbc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802acc0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802acc2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802acc6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802acca:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802acce:	eef0 6a48 	vmov.f32	s13, s16
 802acd2:	ee69 7a27 	vmul.f32	s15, s18, s15
 802acd6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802acda:	ee37 8a48 	vsub.f32	s16, s14, s16
 802acde:	ee16 4a90 	vmov	r4, s13
 802ace2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802ace6:	eef0 6a68 	vmov.f32	s13, s17
 802acea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802acee:	ee18 2a10 	vmov	r2, s16
 802acf2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802acf6:	fb92 f3f3 	sdiv	r3, r2, r3
 802acfa:	ee18 2a90 	vmov	r2, s17
 802acfe:	932b      	str	r3, [sp, #172]	; 0xac
 802ad00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802ad02:	fb92 f3f3 	sdiv	r3, r2, r3
 802ad06:	932c      	str	r3, [sp, #176]	; 0xb0
 802ad08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ad0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802ad0c:	3b01      	subs	r3, #1
 802ad0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802ad12:	930d      	str	r3, [sp, #52]	; 0x34
 802ad14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802ad16:	bf08      	it	eq
 802ad18:	4613      	moveq	r3, r2
 802ad1a:	ee16 6a90 	vmov	r6, s13
 802ad1e:	9309      	str	r3, [sp, #36]	; 0x24
 802ad20:	eef0 8a67 	vmov.f32	s17, s15
 802ad24:	eeb0 8a47 	vmov.f32	s16, s14
 802ad28:	e6c3      	b.n	802aab2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802ad2a:	2900      	cmp	r1, #0
 802ad2c:	f43f af4d 	beq.w	802abca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802ad30:	eb0a 0003 	add.w	r0, sl, r3
 802ad34:	0843      	lsrs	r3, r0, #1
 802ad36:	07c0      	lsls	r0, r0, #31
 802ad38:	5cfb      	ldrb	r3, [r7, r3]
 802ad3a:	bf54      	ite	pl
 802ad3c:	f003 030f 	andpl.w	r3, r3, #15
 802ad40:	111b      	asrmi	r3, r3, #4
 802ad42:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802ad46:	b2db      	uxtb	r3, r3
 802ad48:	930b      	str	r3, [sp, #44]	; 0x2c
 802ad4a:	e73e      	b.n	802abca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802ad4c:	f8b8 e000 	ldrh.w	lr, [r8]
 802ad50:	fa1f fb83 	uxth.w	fp, r3
 802ad54:	ea4f 202e 	mov.w	r0, lr, asr #8
 802ad58:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802ad5c:	43db      	mvns	r3, r3
 802ad5e:	b2db      	uxtb	r3, r3
 802ad60:	fb11 f10b 	smulbb	r1, r1, fp
 802ad64:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802ad68:	fb00 1003 	mla	r0, r0, r3, r1
 802ad6c:	fa5f fc8c 	uxtb.w	ip, ip
 802ad70:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802ad74:	b2d2      	uxtb	r2, r2
 802ad76:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802ad7a:	b280      	uxth	r0, r0
 802ad7c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802ad80:	fb1c fc0b 	smulbb	ip, ip, fp
 802ad84:	fa5f fe8e 	uxtb.w	lr, lr
 802ad88:	fb12 fb0b 	smulbb	fp, r2, fp
 802ad8c:	fb01 cc03 	mla	ip, r1, r3, ip
 802ad90:	fb0e bb03 	mla	fp, lr, r3, fp
 802ad94:	1c43      	adds	r3, r0, #1
 802ad96:	fa1f fc8c 	uxth.w	ip, ip
 802ad9a:	fa1f fb8b 	uxth.w	fp, fp
 802ad9e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802ada2:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 802ada6:	f10c 0101 	add.w	r1, ip, #1
 802adaa:	f10b 0001 	add.w	r0, fp, #1
 802adae:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802adb2:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802adb6:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802adba:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802adbe:	4318      	orrs	r0, r3
 802adc0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802adc4:	ea40 000c 	orr.w	r0, r0, ip
 802adc8:	f8a8 0000 	strh.w	r0, [r8]
 802adcc:	e734      	b.n	802ac38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802adce:	f113 0b01 	adds.w	fp, r3, #1
 802add2:	f53f af31 	bmi.w	802ac38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802add6:	45dc      	cmp	ip, fp
 802add8:	f6ff af2e 	blt.w	802ac38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802addc:	f110 0b01 	adds.w	fp, r0, #1
 802ade0:	f53f af2a 	bmi.w	802ac38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802ade4:	45de      	cmp	lr, fp
 802ade6:	f6ff af27 	blt.w	802ac38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802adea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802adec:	9302      	str	r3, [sp, #8]
 802adee:	fa0f f38e 	sxth.w	r3, lr
 802adf2:	9301      	str	r3, [sp, #4]
 802adf4:	fa0f f38c 	sxth.w	r3, ip
 802adf8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802adfc:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802ae00:	9300      	str	r3, [sp, #0]
 802ae02:	463a      	mov	r2, r7
 802ae04:	4653      	mov	r3, sl
 802ae06:	4641      	mov	r1, r8
 802ae08:	9815      	ldr	r0, [sp, #84]	; 0x54
 802ae0a:	f7ff fd2b 	bl	802a864 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802ae0e:	e713      	b.n	802ac38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802ae10:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802ae12:	1422      	asrs	r2, r4, #16
 802ae14:	1433      	asrs	r3, r6, #16
 802ae16:	fb05 2303 	mla	r3, r5, r3, r2
 802ae1a:	085a      	lsrs	r2, r3, #1
 802ae1c:	07dd      	lsls	r5, r3, #31
 802ae1e:	5cba      	ldrb	r2, [r7, r2]
 802ae20:	bf54      	ite	pl
 802ae22:	f002 020f 	andpl.w	r2, r2, #15
 802ae26:	1112      	asrmi	r2, r2, #4
 802ae28:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802ae2c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802ae30:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802ae34:	b2d2      	uxtb	r2, r2
 802ae36:	2900      	cmp	r1, #0
 802ae38:	d076      	beq.n	802af28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 802ae3a:	f103 0e01 	add.w	lr, r3, #1
 802ae3e:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802ae42:	f01e 0f01 	tst.w	lr, #1
 802ae46:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802ae4a:	bf0c      	ite	eq
 802ae4c:	f00c 0c0f 	andeq.w	ip, ip, #15
 802ae50:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802ae54:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ae58:	fa5f f58c 	uxtb.w	r5, ip
 802ae5c:	9512      	str	r5, [sp, #72]	; 0x48
 802ae5e:	b300      	cbz	r0, 802aea2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802ae60:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802ae62:	442b      	add	r3, r5
 802ae64:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802ae68:	07dd      	lsls	r5, r3, #31
 802ae6a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802ae6e:	bf54      	ite	pl
 802ae70:	f00c 0c0f 	andpl.w	ip, ip, #15
 802ae74:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802ae78:	3301      	adds	r3, #1
 802ae7a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ae7e:	fa5f f58c 	uxtb.w	r5, ip
 802ae82:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802ae86:	950c      	str	r5, [sp, #48]	; 0x30
 802ae88:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802ae8c:	07dd      	lsls	r5, r3, #31
 802ae8e:	bf54      	ite	pl
 802ae90:	f00c 0c0f 	andpl.w	ip, ip, #15
 802ae94:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802ae98:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ae9c:	fa5f f38c 	uxtb.w	r3, ip
 802aea0:	9313      	str	r3, [sp, #76]	; 0x4c
 802aea2:	b289      	uxth	r1, r1
 802aea4:	b280      	uxth	r0, r0
 802aea6:	fb01 f300 	mul.w	r3, r1, r0
 802aeaa:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802aeae:	0109      	lsls	r1, r1, #4
 802aeb0:	b280      	uxth	r0, r0
 802aeb2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802aeb6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802aeb8:	1ac9      	subs	r1, r1, r3
 802aeba:	ebac 0c00 	sub.w	ip, ip, r0
 802aebe:	b289      	uxth	r1, r1
 802aec0:	4369      	muls	r1, r5
 802aec2:	fa1f fc8c 	uxth.w	ip, ip
 802aec6:	fb02 120c 	mla	r2, r2, ip, r1
 802aeca:	990c      	ldr	r1, [sp, #48]	; 0x30
 802aecc:	fb00 2001 	mla	r0, r0, r1, r2
 802aed0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802aed2:	fb03 0302 	mla	r3, r3, r2, r0
 802aed6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802aeda:	b1d3      	cbz	r3, 802af12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 802aedc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802aede:	4353      	muls	r3, r2
 802aee0:	1c5a      	adds	r2, r3, #1
 802aee2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802aee6:	4a0f      	ldr	r2, [pc, #60]	; (802af24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>)
 802aee8:	121b      	asrs	r3, r3, #8
 802aeea:	6812      	ldr	r2, [r2, #0]
 802aeec:	2bff      	cmp	r3, #255	; 0xff
 802aeee:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802aef2:	d12d      	bne.n	802af50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 802aef4:	0953      	lsrs	r3, r2, #5
 802aef6:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802aefa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802aefe:	f02c 0c07 	bic.w	ip, ip, #7
 802af02:	ea43 0c0c 	orr.w	ip, r3, ip
 802af06:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802af0a:	ea4c 0202 	orr.w	r2, ip, r2
 802af0e:	f8a8 2000 	strh.w	r2, [r8]
 802af12:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802af14:	441c      	add	r4, r3
 802af16:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802af18:	f108 0802 	add.w	r8, r8, #2
 802af1c:	441e      	add	r6, r3
 802af1e:	f10b 3bff 	add.w	fp, fp, #4294967295
 802af22:	e6ba      	b.n	802ac9a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802af24:	20009784 	.word	0x20009784
 802af28:	2800      	cmp	r0, #0
 802af2a:	d0ba      	beq.n	802aea2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802af2c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802af2e:	442b      	add	r3, r5
 802af30:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802af34:	07db      	lsls	r3, r3, #31
 802af36:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802af3a:	bf54      	ite	pl
 802af3c:	f00c 0c0f 	andpl.w	ip, ip, #15
 802af40:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802af44:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802af48:	fa5f f38c 	uxtb.w	r3, ip
 802af4c:	930c      	str	r3, [sp, #48]	; 0x30
 802af4e:	e7a8      	b.n	802aea2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802af50:	f8b8 e000 	ldrh.w	lr, [r8]
 802af54:	fa1f fa83 	uxth.w	sl, r3
 802af58:	ea4f 202e 	mov.w	r0, lr, asr #8
 802af5c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802af60:	43db      	mvns	r3, r3
 802af62:	b2db      	uxtb	r3, r3
 802af64:	fb11 f10a 	smulbb	r1, r1, sl
 802af68:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802af6c:	fb00 1003 	mla	r0, r0, r3, r1
 802af70:	b2d2      	uxtb	r2, r2
 802af72:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802af76:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802af7a:	fa5f fe8e 	uxtb.w	lr, lr
 802af7e:	fb12 f20a 	smulbb	r2, r2, sl
 802af82:	fb0e 2203 	mla	r2, lr, r3, r2
 802af86:	fa5f fc8c 	uxtb.w	ip, ip
 802af8a:	b280      	uxth	r0, r0
 802af8c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802af90:	b292      	uxth	r2, r2
 802af92:	fb1c fc0a 	smulbb	ip, ip, sl
 802af96:	fb01 cc03 	mla	ip, r1, r3, ip
 802af9a:	1c43      	adds	r3, r0, #1
 802af9c:	1c51      	adds	r1, r2, #1
 802af9e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802afa2:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802afa6:	fa1f fc8c 	uxth.w	ip, ip
 802afaa:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802afae:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802afb2:	4308      	orrs	r0, r1
 802afb4:	f10c 0101 	add.w	r1, ip, #1
 802afb8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802afbc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802afc0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802afc4:	ea40 000c 	orr.w	r0, r0, ip
 802afc8:	f8a8 0000 	strh.w	r0, [r8]
 802afcc:	e7a1      	b.n	802af12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 802afce:	b017      	add	sp, #92	; 0x5c
 802afd0:	ecbd 8b08 	vpop	{d8-d11}
 802afd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802afd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802afd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802afdc:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802afe0:	2c00      	cmp	r4, #0
 802afe2:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802afe6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802afea:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802afee:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802aff2:	fb04 ce03 	mla	lr, r4, r3, ip
 802aff6:	db60      	blt.n	802b0ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802aff8:	45a1      	cmp	r9, r4
 802affa:	dd5e      	ble.n	802b0ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802affc:	f1bc 0f00 	cmp.w	ip, #0
 802b000:	db59      	blt.n	802b0b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802b002:	45e0      	cmp	r8, ip
 802b004:	dd57      	ble.n	802b0b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802b006:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802b00a:	f01e 0f01 	tst.w	lr, #1
 802b00e:	5c16      	ldrb	r6, [r2, r0]
 802b010:	bf0c      	ite	eq
 802b012:	f006 060f 	andeq.w	r6, r6, #15
 802b016:	1136      	asrne	r6, r6, #4
 802b018:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802b01c:	b2f6      	uxtb	r6, r6
 802b01e:	f11c 0001 	adds.w	r0, ip, #1
 802b022:	d44d      	bmi.n	802b0c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802b024:	4580      	cmp	r8, r0
 802b026:	dd4b      	ble.n	802b0c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802b028:	2d00      	cmp	r5, #0
 802b02a:	d04b      	beq.n	802b0c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 802b02c:	f10e 0a01 	add.w	sl, lr, #1
 802b030:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802b034:	f01a 0f01 	tst.w	sl, #1
 802b038:	5c10      	ldrb	r0, [r2, r0]
 802b03a:	bf0c      	ite	eq
 802b03c:	f000 000f 	andeq.w	r0, r0, #15
 802b040:	1100      	asrne	r0, r0, #4
 802b042:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b046:	b2c0      	uxtb	r0, r0
 802b048:	3401      	adds	r4, #1
 802b04a:	d43f      	bmi.n	802b0cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802b04c:	45a1      	cmp	r9, r4
 802b04e:	dd3d      	ble.n	802b0cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802b050:	2f00      	cmp	r7, #0
 802b052:	f000 8093 	beq.w	802b17c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802b056:	f1bc 0f00 	cmp.w	ip, #0
 802b05a:	db35      	blt.n	802b0c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802b05c:	45e0      	cmp	r8, ip
 802b05e:	dd33      	ble.n	802b0c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802b060:	eb03 090e 	add.w	r9, r3, lr
 802b064:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802b068:	f019 0f01 	tst.w	r9, #1
 802b06c:	5d14      	ldrb	r4, [r2, r4]
 802b06e:	bf0c      	ite	eq
 802b070:	f004 040f 	andeq.w	r4, r4, #15
 802b074:	1124      	asrne	r4, r4, #4
 802b076:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802b07a:	b2e4      	uxtb	r4, r4
 802b07c:	f11c 0c01 	adds.w	ip, ip, #1
 802b080:	d427      	bmi.n	802b0d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802b082:	45e0      	cmp	r8, ip
 802b084:	dd25      	ble.n	802b0d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802b086:	b335      	cbz	r5, 802b0d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 802b088:	3301      	adds	r3, #1
 802b08a:	449e      	add	lr, r3
 802b08c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802b090:	f01e 0f01 	tst.w	lr, #1
 802b094:	5cd2      	ldrb	r2, [r2, r3]
 802b096:	bf0c      	ite	eq
 802b098:	f002 020f 	andeq.w	r2, r2, #15
 802b09c:	1112      	asrne	r2, r2, #4
 802b09e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802b0a2:	b2d3      	uxtb	r3, r2
 802b0a4:	2d0f      	cmp	r5, #15
 802b0a6:	d917      	bls.n	802b0d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 802b0a8:	4b37      	ldr	r3, [pc, #220]	; (802b188 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 802b0aa:	4a38      	ldr	r2, [pc, #224]	; (802b18c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 802b0ac:	4838      	ldr	r0, [pc, #224]	; (802b190 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 802b0ae:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802b0b2:	f002 ff05 	bl	802dec0 <__assert_func>
 802b0b6:	2600      	movs	r6, #0
 802b0b8:	e7b1      	b.n	802b01e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 802b0ba:	2000      	movs	r0, #0
 802b0bc:	4606      	mov	r6, r0
 802b0be:	e7c3      	b.n	802b048 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802b0c0:	2000      	movs	r0, #0
 802b0c2:	e7c1      	b.n	802b048 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802b0c4:	4628      	mov	r0, r5
 802b0c6:	e7bf      	b.n	802b048 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802b0c8:	2400      	movs	r4, #0
 802b0ca:	e7d7      	b.n	802b07c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 802b0cc:	2300      	movs	r3, #0
 802b0ce:	461c      	mov	r4, r3
 802b0d0:	e7e8      	b.n	802b0a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802b0d2:	2300      	movs	r3, #0
 802b0d4:	e7e6      	b.n	802b0a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802b0d6:	462b      	mov	r3, r5
 802b0d8:	2f0f      	cmp	r7, #15
 802b0da:	d8e5      	bhi.n	802b0a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802b0dc:	b2ad      	uxth	r5, r5
 802b0de:	b2bf      	uxth	r7, r7
 802b0e0:	fb05 fc07 	mul.w	ip, r5, r7
 802b0e4:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802b0e8:	012d      	lsls	r5, r5, #4
 802b0ea:	b2bf      	uxth	r7, r7
 802b0ec:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802b0f0:	eba5 050c 	sub.w	r5, r5, ip
 802b0f4:	1bd2      	subs	r2, r2, r7
 802b0f6:	b2ad      	uxth	r5, r5
 802b0f8:	b292      	uxth	r2, r2
 802b0fa:	4368      	muls	r0, r5
 802b0fc:	fb06 0002 	mla	r0, r6, r2, r0
 802b100:	fb07 0404 	mla	r4, r7, r4, r0
 802b104:	fb0c 4303 	mla	r3, ip, r3, r4
 802b108:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b10c:	b3a3      	cbz	r3, 802b178 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802b10e:	4a21      	ldr	r2, [pc, #132]	; (802b194 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 802b110:	880e      	ldrh	r6, [r1, #0]
 802b112:	6815      	ldr	r5, [r2, #0]
 802b114:	1234      	asrs	r4, r6, #8
 802b116:	b29a      	uxth	r2, r3
 802b118:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802b11c:	43db      	mvns	r3, r3
 802b11e:	b2db      	uxtb	r3, r3
 802b120:	fb10 f002 	smulbb	r0, r0, r2
 802b124:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802b128:	fb04 0403 	mla	r4, r4, r3, r0
 802b12c:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802b130:	10f0      	asrs	r0, r6, #3
 802b132:	b2ed      	uxtb	r5, r5
 802b134:	00f6      	lsls	r6, r6, #3
 802b136:	fb17 f702 	smulbb	r7, r7, r2
 802b13a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802b13e:	fb15 f202 	smulbb	r2, r5, r2
 802b142:	b2f6      	uxtb	r6, r6
 802b144:	b2a4      	uxth	r4, r4
 802b146:	fb00 7003 	mla	r0, r0, r3, r7
 802b14a:	fb06 2303 	mla	r3, r6, r3, r2
 802b14e:	b29a      	uxth	r2, r3
 802b150:	1c63      	adds	r3, r4, #1
 802b152:	b280      	uxth	r0, r0
 802b154:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802b158:	1c53      	adds	r3, r2, #1
 802b15a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802b15e:	1c42      	adds	r2, r0, #1
 802b160:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802b164:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802b168:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802b16c:	0940      	lsrs	r0, r0, #5
 802b16e:	4323      	orrs	r3, r4
 802b170:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802b174:	4303      	orrs	r3, r0
 802b176:	800b      	strh	r3, [r1, #0]
 802b178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b17c:	2d0f      	cmp	r5, #15
 802b17e:	d893      	bhi.n	802b0a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802b180:	463b      	mov	r3, r7
 802b182:	463c      	mov	r4, r7
 802b184:	e7aa      	b.n	802b0dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 802b186:	bf00      	nop
 802b188:	08032be1 	.word	0x08032be1
 802b18c:	080331ae 	.word	0x080331ae
 802b190:	08032c65 	.word	0x08032c65
 802b194:	20009784 	.word	0x20009784

0802b198 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b19c:	ed2d 8b08 	vpush	{d8-d11}
 802b1a0:	b093      	sub	sp, #76	; 0x4c
 802b1a2:	461d      	mov	r5, r3
 802b1a4:	920c      	str	r2, [sp, #48]	; 0x30
 802b1a6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802b1a8:	9107      	str	r1, [sp, #28]
 802b1aa:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802b1ae:	9011      	str	r0, [sp, #68]	; 0x44
 802b1b0:	6850      	ldr	r0, [r2, #4]
 802b1b2:	6812      	ldr	r2, [r2, #0]
 802b1b4:	fb00 1303 	mla	r3, r0, r3, r1
 802b1b8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802b1bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b1be:	689b      	ldr	r3, [r3, #8]
 802b1c0:	3301      	adds	r3, #1
 802b1c2:	f023 0301 	bic.w	r3, r3, #1
 802b1c6:	9306      	str	r3, [sp, #24]
 802b1c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b1ca:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802b1ce:	681f      	ldr	r7, [r3, #0]
 802b1d0:	eeb0 aa40 	vmov.f32	s20, s0
 802b1d4:	eef0 9a60 	vmov.f32	s19, s1
 802b1d8:	eeb0 9a41 	vmov.f32	s18, s2
 802b1dc:	eeb0 8a62 	vmov.f32	s16, s5
 802b1e0:	eef0 8a43 	vmov.f32	s17, s6
 802b1e4:	eef0 ba44 	vmov.f32	s23, s8
 802b1e8:	eeb0 ba64 	vmov.f32	s22, s9
 802b1ec:	eef0 aa45 	vmov.f32	s21, s10
 802b1f0:	9b07      	ldr	r3, [sp, #28]
 802b1f2:	2b00      	cmp	r3, #0
 802b1f4:	dc03      	bgt.n	802b1fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802b1f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802b1f8:	2b00      	cmp	r3, #0
 802b1fa:	f340 8267 	ble.w	802b6cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802b1fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b200:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b204:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b208:	1e48      	subs	r0, r1, #1
 802b20a:	f102 3cff 	add.w	ip, r2, #4294967295
 802b20e:	2d00      	cmp	r5, #0
 802b210:	f340 80b8 	ble.w	802b384 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802b214:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802b218:	ea4f 4326 	mov.w	r3, r6, asr #16
 802b21c:	d406      	bmi.n	802b22c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802b21e:	4586      	cmp	lr, r0
 802b220:	da04      	bge.n	802b22c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802b222:	2b00      	cmp	r3, #0
 802b224:	db02      	blt.n	802b22c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802b226:	4563      	cmp	r3, ip
 802b228:	f2c0 80ad 	blt.w	802b386 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802b22c:	f11e 0e01 	adds.w	lr, lr, #1
 802b230:	f100 80a0 	bmi.w	802b374 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802b234:	4571      	cmp	r1, lr
 802b236:	f2c0 809d 	blt.w	802b374 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802b23a:	3301      	adds	r3, #1
 802b23c:	f100 809a 	bmi.w	802b374 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802b240:	429a      	cmp	r2, r3
 802b242:	f2c0 8097 	blt.w	802b374 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802b246:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802b24a:	9509      	str	r5, [sp, #36]	; 0x24
 802b24c:	46c8      	mov	r8, r9
 802b24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b250:	2b00      	cmp	r3, #0
 802b252:	f340 80b6 	ble.w	802b3c2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802b256:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802b25a:	9308      	str	r3, [sp, #32]
 802b25c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b25e:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802b262:	1423      	asrs	r3, r4, #16
 802b264:	ea4f 4026 	mov.w	r0, r6, asr #16
 802b268:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802b26c:	f100 813e 	bmi.w	802b4ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b270:	f10c 3bff 	add.w	fp, ip, #4294967295
 802b274:	455b      	cmp	r3, fp
 802b276:	f280 8139 	bge.w	802b4ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b27a:	2800      	cmp	r0, #0
 802b27c:	f2c0 8136 	blt.w	802b4ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b280:	f10e 3bff 	add.w	fp, lr, #4294967295
 802b284:	4558      	cmp	r0, fp
 802b286:	f280 8131 	bge.w	802b4ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b28a:	9a06      	ldr	r2, [sp, #24]
 802b28c:	fb00 3302 	mla	r3, r0, r2, r3
 802b290:	0858      	lsrs	r0, r3, #1
 802b292:	07da      	lsls	r2, r3, #31
 802b294:	f817 c000 	ldrb.w	ip, [r7, r0]
 802b298:	9a08      	ldr	r2, [sp, #32]
 802b29a:	bf54      	ite	pl
 802b29c:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b2a0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b2a4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b2a8:	fa5f fc8c 	uxtb.w	ip, ip
 802b2ac:	2a00      	cmp	r2, #0
 802b2ae:	f000 80cb 	beq.w	802b448 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802b2b2:	1c58      	adds	r0, r3, #1
 802b2b4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802b2b8:	07c0      	lsls	r0, r0, #31
 802b2ba:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802b2be:	bf54      	ite	pl
 802b2c0:	f00e 0e0f 	andpl.w	lr, lr, #15
 802b2c4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802b2c8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802b2cc:	fa5f fe8e 	uxtb.w	lr, lr
 802b2d0:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802b2d4:	b1b9      	cbz	r1, 802b306 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 802b2d6:	4453      	add	r3, sl
 802b2d8:	0858      	lsrs	r0, r3, #1
 802b2da:	07da      	lsls	r2, r3, #31
 802b2dc:	5c38      	ldrb	r0, [r7, r0]
 802b2de:	bf54      	ite	pl
 802b2e0:	f000 000f 	andpl.w	r0, r0, #15
 802b2e4:	1100      	asrmi	r0, r0, #4
 802b2e6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b2ea:	b2c0      	uxtb	r0, r0
 802b2ec:	900a      	str	r0, [sp, #40]	; 0x28
 802b2ee:	1c58      	adds	r0, r3, #1
 802b2f0:	0843      	lsrs	r3, r0, #1
 802b2f2:	07c2      	lsls	r2, r0, #31
 802b2f4:	5cfb      	ldrb	r3, [r7, r3]
 802b2f6:	bf54      	ite	pl
 802b2f8:	f003 030f 	andpl.w	r3, r3, #15
 802b2fc:	111b      	asrmi	r3, r3, #4
 802b2fe:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b302:	b2db      	uxtb	r3, r3
 802b304:	930e      	str	r3, [sp, #56]	; 0x38
 802b306:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802b30a:	b289      	uxth	r1, r1
 802b30c:	fb02 f301 	mul.w	r3, r2, r1
 802b310:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802b314:	0112      	lsls	r2, r2, #4
 802b316:	b289      	uxth	r1, r1
 802b318:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802b31c:	1a40      	subs	r0, r0, r1
 802b31e:	fa1f fe80 	uxth.w	lr, r0
 802b322:	1ad2      	subs	r2, r2, r3
 802b324:	980d      	ldr	r0, [sp, #52]	; 0x34
 802b326:	b292      	uxth	r2, r2
 802b328:	4342      	muls	r2, r0
 802b32a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802b32e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802b330:	fb01 c102 	mla	r1, r1, r2, ip
 802b334:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b336:	fb03 1302 	mla	r3, r3, r2, r1
 802b33a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b33e:	2bff      	cmp	r3, #255	; 0xff
 802b340:	f040 8093 	bne.w	802b46a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 802b344:	4bbe      	ldr	r3, [pc, #760]	; (802b640 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802b346:	681a      	ldr	r2, [r3, #0]
 802b348:	4bbe      	ldr	r3, [pc, #760]	; (802b644 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802b34a:	0951      	lsrs	r1, r2, #5
 802b34c:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802b350:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802b354:	430b      	orrs	r3, r1
 802b356:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b35a:	4313      	orrs	r3, r2
 802b35c:	f8a8 3000 	strh.w	r3, [r8]
 802b360:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802b362:	441c      	add	r4, r3
 802b364:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b366:	441e      	add	r6, r3
 802b368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b36a:	3b01      	subs	r3, #1
 802b36c:	f108 0802 	add.w	r8, r8, #2
 802b370:	9309      	str	r3, [sp, #36]	; 0x24
 802b372:	e76c      	b.n	802b24e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802b374:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802b376:	441c      	add	r4, r3
 802b378:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b37a:	3d01      	subs	r5, #1
 802b37c:	441e      	add	r6, r3
 802b37e:	f109 0902 	add.w	r9, r9, #2
 802b382:	e744      	b.n	802b20e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802b384:	d021      	beq.n	802b3ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802b386:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802b388:	1e6b      	subs	r3, r5, #1
 802b38a:	fb00 4003 	mla	r0, r0, r3, r4
 802b38e:	1400      	asrs	r0, r0, #16
 802b390:	f53f af59 	bmi.w	802b246 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b394:	3901      	subs	r1, #1
 802b396:	4288      	cmp	r0, r1
 802b398:	f6bf af55 	bge.w	802b246 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b39c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802b39e:	fb01 6303 	mla	r3, r1, r3, r6
 802b3a2:	141b      	asrs	r3, r3, #16
 802b3a4:	f53f af4f 	bmi.w	802b246 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b3a8:	3a01      	subs	r2, #1
 802b3aa:	4293      	cmp	r3, r2
 802b3ac:	f6bf af4b 	bge.w	802b246 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b3b0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802b3b4:	9308      	str	r3, [sp, #32]
 802b3b6:	46a8      	mov	r8, r5
 802b3b8:	46ce      	mov	lr, r9
 802b3ba:	f1b8 0f00 	cmp.w	r8, #0
 802b3be:	f300 80b5 	bgt.w	802b52c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802b3c2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802b3c6:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802b3ca:	9b07      	ldr	r3, [sp, #28]
 802b3cc:	2b00      	cmp	r3, #0
 802b3ce:	f340 817d 	ble.w	802b6cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802b3d2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802b3d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802b3da:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802b3de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b3e0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802b3e4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802b3e8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802b3ec:	eef0 6a48 	vmov.f32	s13, s16
 802b3f0:	ee69 7a27 	vmul.f32	s15, s18, s15
 802b3f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b3f8:	ee37 8a48 	vsub.f32	s16, s14, s16
 802b3fc:	ee16 4a90 	vmov	r4, s13
 802b400:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802b404:	eef0 6a68 	vmov.f32	s13, s17
 802b408:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802b40c:	ee18 2a10 	vmov	r2, s16
 802b410:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802b414:	fb92 f3f3 	sdiv	r3, r2, r3
 802b418:	ee18 2a90 	vmov	r2, s17
 802b41c:	9327      	str	r3, [sp, #156]	; 0x9c
 802b41e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b420:	fb92 f3f3 	sdiv	r3, r2, r3
 802b424:	9328      	str	r3, [sp, #160]	; 0xa0
 802b426:	9b07      	ldr	r3, [sp, #28]
 802b428:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b42a:	3b01      	subs	r3, #1
 802b42c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b430:	9307      	str	r3, [sp, #28]
 802b432:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b434:	ee16 6a90 	vmov	r6, s13
 802b438:	bf14      	ite	ne
 802b43a:	461d      	movne	r5, r3
 802b43c:	4615      	moveq	r5, r2
 802b43e:	eef0 8a67 	vmov.f32	s17, s15
 802b442:	eeb0 8a47 	vmov.f32	s16, s14
 802b446:	e6d3      	b.n	802b1f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802b448:	2900      	cmp	r1, #0
 802b44a:	f43f af5c 	beq.w	802b306 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 802b44e:	eb0a 0003 	add.w	r0, sl, r3
 802b452:	0843      	lsrs	r3, r0, #1
 802b454:	07c0      	lsls	r0, r0, #31
 802b456:	5cfb      	ldrb	r3, [r7, r3]
 802b458:	bf54      	ite	pl
 802b45a:	f003 030f 	andpl.w	r3, r3, #15
 802b45e:	111b      	asrmi	r3, r3, #4
 802b460:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b464:	b2db      	uxtb	r3, r3
 802b466:	930a      	str	r3, [sp, #40]	; 0x28
 802b468:	e74d      	b.n	802b306 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 802b46a:	2b00      	cmp	r3, #0
 802b46c:	f43f af78 	beq.w	802b360 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b470:	4a73      	ldr	r2, [pc, #460]	; (802b640 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802b472:	f8b8 c000 	ldrh.w	ip, [r8]
 802b476:	6810      	ldr	r0, [r2, #0]
 802b478:	fa1f fe83 	uxth.w	lr, r3
 802b47c:	ea4f 212c 	mov.w	r1, ip, asr #8
 802b480:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802b484:	43db      	mvns	r3, r3
 802b486:	b2db      	uxtb	r3, r3
 802b488:	fb12 f20e 	smulbb	r2, r2, lr
 802b48c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802b490:	fb01 2103 	mla	r1, r1, r3, r2
 802b494:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802b498:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b49c:	b2c0      	uxtb	r0, r0
 802b49e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802b4a2:	fb1b fb0e 	smulbb	fp, fp, lr
 802b4a6:	b289      	uxth	r1, r1
 802b4a8:	fb10 fe0e 	smulbb	lr, r0, lr
 802b4ac:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802b4b0:	fa5f fc8c 	uxtb.w	ip, ip
 802b4b4:	fb02 b203 	mla	r2, r2, r3, fp
 802b4b8:	1c48      	adds	r0, r1, #1
 802b4ba:	fb0c e303 	mla	r3, ip, r3, lr
 802b4be:	b292      	uxth	r2, r2
 802b4c0:	b29b      	uxth	r3, r3
 802b4c2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802b4c6:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802b4ca:	f102 0b01 	add.w	fp, r2, #1
 802b4ce:	1c59      	adds	r1, r3, #1
 802b4d0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802b4d4:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802b4d8:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802b4dc:	0952      	lsrs	r2, r2, #5
 802b4de:	4301      	orrs	r1, r0
 802b4e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b4e4:	4311      	orrs	r1, r2
 802b4e6:	f8a8 1000 	strh.w	r1, [r8]
 802b4ea:	e739      	b.n	802b360 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b4ec:	f113 0b01 	adds.w	fp, r3, #1
 802b4f0:	f53f af36 	bmi.w	802b360 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b4f4:	45dc      	cmp	ip, fp
 802b4f6:	f6ff af33 	blt.w	802b360 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b4fa:	f110 0b01 	adds.w	fp, r0, #1
 802b4fe:	f53f af2f 	bmi.w	802b360 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b502:	45de      	cmp	lr, fp
 802b504:	f6ff af2c 	blt.w	802b360 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b508:	9a08      	ldr	r2, [sp, #32]
 802b50a:	9302      	str	r3, [sp, #8]
 802b50c:	fa0f f38e 	sxth.w	r3, lr
 802b510:	9301      	str	r3, [sp, #4]
 802b512:	fa0f f38c 	sxth.w	r3, ip
 802b516:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802b51a:	9105      	str	r1, [sp, #20]
 802b51c:	9300      	str	r3, [sp, #0]
 802b51e:	463a      	mov	r2, r7
 802b520:	4653      	mov	r3, sl
 802b522:	4641      	mov	r1, r8
 802b524:	9811      	ldr	r0, [sp, #68]	; 0x44
 802b526:	f7ff fd57 	bl	802afd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802b52a:	e719      	b.n	802b360 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b52c:	9906      	ldr	r1, [sp, #24]
 802b52e:	1422      	asrs	r2, r4, #16
 802b530:	1433      	asrs	r3, r6, #16
 802b532:	fb01 2303 	mla	r3, r1, r3, r2
 802b536:	085a      	lsrs	r2, r3, #1
 802b538:	07d9      	lsls	r1, r3, #31
 802b53a:	5cba      	ldrb	r2, [r7, r2]
 802b53c:	bf54      	ite	pl
 802b53e:	f002 020f 	andpl.w	r2, r2, #15
 802b542:	1112      	asrmi	r2, r2, #4
 802b544:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802b548:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802b54c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802b550:	b2d2      	uxtb	r2, r2
 802b552:	2800      	cmp	r0, #0
 802b554:	d062      	beq.n	802b61c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 802b556:	f103 0a01 	add.w	sl, r3, #1
 802b55a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802b55e:	f01a 0f01 	tst.w	sl, #1
 802b562:	5c79      	ldrb	r1, [r7, r1]
 802b564:	bf0c      	ite	eq
 802b566:	f001 010f 	andeq.w	r1, r1, #15
 802b56a:	1109      	asrne	r1, r1, #4
 802b56c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b570:	b2c9      	uxtb	r1, r1
 802b572:	910f      	str	r1, [sp, #60]	; 0x3c
 802b574:	f1bc 0f00 	cmp.w	ip, #0
 802b578:	d019      	beq.n	802b5ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 802b57a:	9908      	ldr	r1, [sp, #32]
 802b57c:	440b      	add	r3, r1
 802b57e:	0859      	lsrs	r1, r3, #1
 802b580:	f013 0f01 	tst.w	r3, #1
 802b584:	5c79      	ldrb	r1, [r7, r1]
 802b586:	bf0c      	ite	eq
 802b588:	f001 010f 	andeq.w	r1, r1, #15
 802b58c:	1109      	asrne	r1, r1, #4
 802b58e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b592:	b2c9      	uxtb	r1, r1
 802b594:	3301      	adds	r3, #1
 802b596:	910b      	str	r1, [sp, #44]	; 0x2c
 802b598:	0859      	lsrs	r1, r3, #1
 802b59a:	07db      	lsls	r3, r3, #31
 802b59c:	5c79      	ldrb	r1, [r7, r1]
 802b59e:	bf54      	ite	pl
 802b5a0:	f001 010f 	andpl.w	r1, r1, #15
 802b5a4:	1109      	asrmi	r1, r1, #4
 802b5a6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b5aa:	b2c9      	uxtb	r1, r1
 802b5ac:	9110      	str	r1, [sp, #64]	; 0x40
 802b5ae:	b280      	uxth	r0, r0
 802b5b0:	fa1f fc8c 	uxth.w	ip, ip
 802b5b4:	fb00 f30c 	mul.w	r3, r0, ip
 802b5b8:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802b5bc:	0100      	lsls	r0, r0, #4
 802b5be:	fa1f fc8c 	uxth.w	ip, ip
 802b5c2:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802b5c6:	eba1 010c 	sub.w	r1, r1, ip
 802b5ca:	fa1f fa81 	uxth.w	sl, r1
 802b5ce:	1ac0      	subs	r0, r0, r3
 802b5d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802b5d2:	b280      	uxth	r0, r0
 802b5d4:	4348      	muls	r0, r1
 802b5d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802b5d8:	fb02 020a 	mla	r2, r2, sl, r0
 802b5dc:	fb0c 2c01 	mla	ip, ip, r1, r2
 802b5e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802b5e2:	fb03 c302 	mla	r3, r3, r2, ip
 802b5e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b5ea:	2bff      	cmp	r3, #255	; 0xff
 802b5ec:	d12c      	bne.n	802b648 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802b5ee:	4b14      	ldr	r3, [pc, #80]	; (802b640 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802b5f0:	681a      	ldr	r2, [r3, #0]
 802b5f2:	4b14      	ldr	r3, [pc, #80]	; (802b644 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802b5f4:	0951      	lsrs	r1, r2, #5
 802b5f6:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802b5fa:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802b5fe:	430b      	orrs	r3, r1
 802b600:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b604:	4313      	orrs	r3, r2
 802b606:	f8ae 3000 	strh.w	r3, [lr]
 802b60a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802b60c:	441c      	add	r4, r3
 802b60e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b610:	f10e 0e02 	add.w	lr, lr, #2
 802b614:	441e      	add	r6, r3
 802b616:	f108 38ff 	add.w	r8, r8, #4294967295
 802b61a:	e6ce      	b.n	802b3ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802b61c:	f1bc 0f00 	cmp.w	ip, #0
 802b620:	d0c5      	beq.n	802b5ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 802b622:	9908      	ldr	r1, [sp, #32]
 802b624:	440b      	add	r3, r1
 802b626:	0859      	lsrs	r1, r3, #1
 802b628:	07db      	lsls	r3, r3, #31
 802b62a:	5c79      	ldrb	r1, [r7, r1]
 802b62c:	bf54      	ite	pl
 802b62e:	f001 010f 	andpl.w	r1, r1, #15
 802b632:	1109      	asrmi	r1, r1, #4
 802b634:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b638:	b2c9      	uxtb	r1, r1
 802b63a:	910b      	str	r1, [sp, #44]	; 0x2c
 802b63c:	e7b7      	b.n	802b5ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 802b63e:	bf00      	nop
 802b640:	20009784 	.word	0x20009784
 802b644:	fffff800 	.word	0xfffff800
 802b648:	2b00      	cmp	r3, #0
 802b64a:	d0de      	beq.n	802b60a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 802b64c:	4a22      	ldr	r2, [pc, #136]	; (802b6d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 802b64e:	f8be c000 	ldrh.w	ip, [lr]
 802b652:	6810      	ldr	r0, [r2, #0]
 802b654:	fa1f fa83 	uxth.w	sl, r3
 802b658:	ea4f 212c 	mov.w	r1, ip, asr #8
 802b65c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802b660:	43db      	mvns	r3, r3
 802b662:	b2db      	uxtb	r3, r3
 802b664:	fb12 f20a 	smulbb	r2, r2, sl
 802b668:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802b66c:	fb01 2103 	mla	r1, r1, r3, r2
 802b670:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802b674:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b678:	b2c0      	uxtb	r0, r0
 802b67a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802b67e:	fa5f fc8c 	uxtb.w	ip, ip
 802b682:	fb10 f00a 	smulbb	r0, r0, sl
 802b686:	fb0c 0003 	mla	r0, ip, r3, r0
 802b68a:	b289      	uxth	r1, r1
 802b68c:	fb1b fb0a 	smulbb	fp, fp, sl
 802b690:	b280      	uxth	r0, r0
 802b692:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802b696:	fb02 b203 	mla	r2, r2, r3, fp
 802b69a:	1c4b      	adds	r3, r1, #1
 802b69c:	f100 0b01 	add.w	fp, r0, #1
 802b6a0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802b6a4:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802b6a8:	b292      	uxth	r2, r2
 802b6aa:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802b6ae:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802b6b2:	ea4b 0101 	orr.w	r1, fp, r1
 802b6b6:	f102 0b01 	add.w	fp, r2, #1
 802b6ba:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802b6be:	0952      	lsrs	r2, r2, #5
 802b6c0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b6c4:	4311      	orrs	r1, r2
 802b6c6:	f8ae 1000 	strh.w	r1, [lr]
 802b6ca:	e79e      	b.n	802b60a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 802b6cc:	b013      	add	sp, #76	; 0x4c
 802b6ce:	ecbd 8b08 	vpop	{d8-d11}
 802b6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b6d6:	bf00      	nop
 802b6d8:	20009784 	.word	0x20009784

0802b6dc <CRC_Lock>:
 802b6dc:	b530      	push	{r4, r5, lr}
 802b6de:	4a20      	ldr	r2, [pc, #128]	; (802b760 <CRC_Lock+0x84>)
 802b6e0:	6813      	ldr	r3, [r2, #0]
 802b6e2:	f023 0301 	bic.w	r3, r3, #1
 802b6e6:	6013      	str	r3, [r2, #0]
 802b6e8:	4b1e      	ldr	r3, [pc, #120]	; (802b764 <CRC_Lock+0x88>)
 802b6ea:	681a      	ldr	r2, [r3, #0]
 802b6ec:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802b6f0:	4022      	ands	r2, r4
 802b6f2:	f24c 2540 	movw	r5, #49728	; 0xc240
 802b6f6:	42aa      	cmp	r2, r5
 802b6f8:	d005      	beq.n	802b706 <CRC_Lock+0x2a>
 802b6fa:	681b      	ldr	r3, [r3, #0]
 802b6fc:	f24c 2270 	movw	r2, #49776	; 0xc270
 802b700:	4023      	ands	r3, r4
 802b702:	4293      	cmp	r3, r2
 802b704:	d124      	bne.n	802b750 <CRC_Lock+0x74>
 802b706:	4b18      	ldr	r3, [pc, #96]	; (802b768 <CRC_Lock+0x8c>)
 802b708:	681b      	ldr	r3, [r3, #0]
 802b70a:	bb0b      	cbnz	r3, 802b750 <CRC_Lock+0x74>
 802b70c:	4b17      	ldr	r3, [pc, #92]	; (802b76c <CRC_Lock+0x90>)
 802b70e:	681a      	ldr	r2, [r3, #0]
 802b710:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802b714:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802b718:	d00d      	beq.n	802b736 <CRC_Lock+0x5a>
 802b71a:	681a      	ldr	r2, [r3, #0]
 802b71c:	f240 4483 	movw	r4, #1155	; 0x483
 802b720:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802b724:	42a2      	cmp	r2, r4
 802b726:	d006      	beq.n	802b736 <CRC_Lock+0x5a>
 802b728:	681b      	ldr	r3, [r3, #0]
 802b72a:	f240 4285 	movw	r2, #1157	; 0x485
 802b72e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802b732:	4293      	cmp	r3, r2
 802b734:	d10c      	bne.n	802b750 <CRC_Lock+0x74>
 802b736:	4b0e      	ldr	r3, [pc, #56]	; (802b770 <CRC_Lock+0x94>)
 802b738:	2201      	movs	r2, #1
 802b73a:	601a      	str	r2, [r3, #0]
 802b73c:	681a      	ldr	r2, [r3, #0]
 802b73e:	2a00      	cmp	r2, #0
 802b740:	d1fc      	bne.n	802b73c <CRC_Lock+0x60>
 802b742:	4b0c      	ldr	r3, [pc, #48]	; (802b774 <CRC_Lock+0x98>)
 802b744:	6018      	str	r0, [r3, #0]
 802b746:	6818      	ldr	r0, [r3, #0]
 802b748:	1a43      	subs	r3, r0, r1
 802b74a:	4258      	negs	r0, r3
 802b74c:	4158      	adcs	r0, r3
 802b74e:	bd30      	pop	{r4, r5, pc}
 802b750:	4b09      	ldr	r3, [pc, #36]	; (802b778 <CRC_Lock+0x9c>)
 802b752:	2201      	movs	r2, #1
 802b754:	601a      	str	r2, [r3, #0]
 802b756:	681a      	ldr	r2, [r3, #0]
 802b758:	2a00      	cmp	r2, #0
 802b75a:	d1fc      	bne.n	802b756 <CRC_Lock+0x7a>
 802b75c:	4b07      	ldr	r3, [pc, #28]	; (802b77c <CRC_Lock+0xa0>)
 802b75e:	e7f1      	b.n	802b744 <CRC_Lock+0x68>
 802b760:	e0002000 	.word	0xe0002000
 802b764:	e000ed00 	.word	0xe000ed00
 802b768:	e0042000 	.word	0xe0042000
 802b76c:	5c001000 	.word	0x5c001000
 802b770:	58024c08 	.word	0x58024c08
 802b774:	58024c00 	.word	0x58024c00
 802b778:	40023008 	.word	0x40023008
 802b77c:	40023000 	.word	0x40023000

0802b780 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802b780:	6101      	str	r1, [r0, #16]
 802b782:	4770      	bx	lr

0802b784 <_ZN8touchgfx8Gestures4tickEv>:
 802b784:	7b83      	ldrb	r3, [r0, #14]
 802b786:	b14b      	cbz	r3, 802b79c <_ZN8touchgfx8Gestures4tickEv+0x18>
 802b788:	8903      	ldrh	r3, [r0, #8]
 802b78a:	3301      	adds	r3, #1
 802b78c:	b29b      	uxth	r3, r3
 802b78e:	2b07      	cmp	r3, #7
 802b790:	8103      	strh	r3, [r0, #8]
 802b792:	bf81      	itttt	hi
 802b794:	2300      	movhi	r3, #0
 802b796:	8143      	strhhi	r3, [r0, #10]
 802b798:	8183      	strhhi	r3, [r0, #12]
 802b79a:	7383      	strbhi	r3, [r0, #14]
 802b79c:	4770      	bx	lr
	...

0802b7a0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802b7a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802b7a4:	4604      	mov	r4, r0
 802b7a6:	8880      	ldrh	r0, [r0, #4]
 802b7a8:	f8ad 0006 	strh.w	r0, [sp, #6]
 802b7ac:	4698      	mov	r8, r3
 802b7ae:	eba8 0000 	sub.w	r0, r8, r0
 802b7b2:	4b1c      	ldr	r3, [pc, #112]	; (802b824 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802b7b4:	9300      	str	r3, [sp, #0]
 802b7b6:	b280      	uxth	r0, r0
 802b7b8:	2300      	movs	r3, #0
 802b7ba:	f88d 3004 	strb.w	r3, [sp, #4]
 802b7be:	b203      	sxth	r3, r0
 802b7c0:	2b00      	cmp	r3, #0
 802b7c2:	bfb8      	it	lt
 802b7c4:	4240      	neglt	r0, r0
 802b7c6:	4617      	mov	r7, r2
 802b7c8:	8aa2      	ldrh	r2, [r4, #20]
 802b7ca:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802b7ce:	f8ad 800a 	strh.w	r8, [sp, #10]
 802b7d2:	bfb8      	it	lt
 802b7d4:	b203      	sxthlt	r3, r0
 802b7d6:	460e      	mov	r6, r1
 802b7d8:	4293      	cmp	r3, r2
 802b7da:	88e1      	ldrh	r1, [r4, #6]
 802b7dc:	f8ad 1008 	strh.w	r1, [sp, #8]
 802b7e0:	f8ad 500c 	strh.w	r5, [sp, #12]
 802b7e4:	dc08      	bgt.n	802b7f8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802b7e6:	1a69      	subs	r1, r5, r1
 802b7e8:	b289      	uxth	r1, r1
 802b7ea:	b20b      	sxth	r3, r1
 802b7ec:	2b00      	cmp	r3, #0
 802b7ee:	bfbc      	itt	lt
 802b7f0:	4249      	neglt	r1, r1
 802b7f2:	b20b      	sxthlt	r3, r1
 802b7f4:	429a      	cmp	r2, r3
 802b7f6:	da13      	bge.n	802b820 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802b7f8:	6920      	ldr	r0, [r4, #16]
 802b7fa:	6803      	ldr	r3, [r0, #0]
 802b7fc:	4669      	mov	r1, sp
 802b7fe:	685b      	ldr	r3, [r3, #4]
 802b800:	4798      	blx	r3
 802b802:	eba8 0606 	sub.w	r6, r8, r6
 802b806:	2300      	movs	r3, #0
 802b808:	1bef      	subs	r7, r5, r7
 802b80a:	2001      	movs	r0, #1
 802b80c:	8123      	strh	r3, [r4, #8]
 802b80e:	8166      	strh	r6, [r4, #10]
 802b810:	81a7      	strh	r7, [r4, #12]
 802b812:	f8a4 8004 	strh.w	r8, [r4, #4]
 802b816:	80e5      	strh	r5, [r4, #6]
 802b818:	73a0      	strb	r0, [r4, #14]
 802b81a:	b004      	add	sp, #16
 802b81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b820:	2000      	movs	r0, #0
 802b822:	e7fa      	b.n	802b81a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 802b824:	08032034 	.word	0x08032034

0802b828 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802b828:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b82a:	461e      	mov	r6, r3
 802b82c:	1e4b      	subs	r3, r1, #1
 802b82e:	2b01      	cmp	r3, #1
 802b830:	b085      	sub	sp, #20
 802b832:	4604      	mov	r4, r0
 802b834:	460d      	mov	r5, r1
 802b836:	4617      	mov	r7, r2
 802b838:	d84b      	bhi.n	802b8d2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802b83a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802b83e:	1cd3      	adds	r3, r2, #3
 802b840:	b29b      	uxth	r3, r3
 802b842:	2b06      	cmp	r3, #6
 802b844:	d916      	bls.n	802b874 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802b846:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802b8e8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b84a:	f8cd c004 	str.w	ip, [sp, #4]
 802b84e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b852:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b856:	6900      	ldr	r0, [r0, #16]
 802b858:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b85c:	f04f 0c00 	mov.w	ip, #0
 802b860:	f88d c008 	strb.w	ip, [sp, #8]
 802b864:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b868:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b86c:	6803      	ldr	r3, [r0, #0]
 802b86e:	a901      	add	r1, sp, #4
 802b870:	689b      	ldr	r3, [r3, #8]
 802b872:	4798      	blx	r3
 802b874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b878:	1cd3      	adds	r3, r2, #3
 802b87a:	b29b      	uxth	r3, r3
 802b87c:	2b06      	cmp	r3, #6
 802b87e:	d916      	bls.n	802b8ae <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b880:	f8df c064 	ldr.w	ip, [pc, #100]	; 802b8e8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b884:	f8cd c004 	str.w	ip, [sp, #4]
 802b888:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b88c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b890:	6920      	ldr	r0, [r4, #16]
 802b892:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b896:	f04f 0c01 	mov.w	ip, #1
 802b89a:	f88d c008 	strb.w	ip, [sp, #8]
 802b89e:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b8a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b8a6:	6803      	ldr	r3, [r0, #0]
 802b8a8:	a901      	add	r1, sp, #4
 802b8aa:	689b      	ldr	r3, [r3, #8]
 802b8ac:	4798      	blx	r3
 802b8ae:	4b0d      	ldr	r3, [pc, #52]	; (802b8e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802b8b0:	9301      	str	r3, [sp, #4]
 802b8b2:	6920      	ldr	r0, [r4, #16]
 802b8b4:	f88d 5008 	strb.w	r5, [sp, #8]
 802b8b8:	2300      	movs	r3, #0
 802b8ba:	f8ad 700a 	strh.w	r7, [sp, #10]
 802b8be:	f8ad 600c 	strh.w	r6, [sp, #12]
 802b8c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b8c6:	6803      	ldr	r3, [r0, #0]
 802b8c8:	a901      	add	r1, sp, #4
 802b8ca:	681b      	ldr	r3, [r3, #0]
 802b8cc:	4798      	blx	r3
 802b8ce:	b005      	add	sp, #20
 802b8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b8d2:	2900      	cmp	r1, #0
 802b8d4:	d1eb      	bne.n	802b8ae <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b8d6:	80a2      	strh	r2, [r4, #4]
 802b8d8:	80c6      	strh	r6, [r0, #6]
 802b8da:	60a1      	str	r1, [r4, #8]
 802b8dc:	81a1      	strh	r1, [r4, #12]
 802b8de:	73a1      	strb	r1, [r4, #14]
 802b8e0:	e7e5      	b.n	802b8ae <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b8e2:	bf00      	nop
 802b8e4:	08032020 	.word	0x08032020
 802b8e8:	08032048 	.word	0x08032048

0802b8ec <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 802b8ec:	10c9      	asrs	r1, r1, #3
 802b8ee:	2900      	cmp	r1, #0
 802b8f0:	bfb8      	it	lt
 802b8f2:	4249      	neglt	r1, r1
 802b8f4:	2801      	cmp	r0, #1
 802b8f6:	d108      	bne.n	802b90a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 802b8f8:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802b8fc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 802b900:	4601      	mov	r1, r0
 802b902:	dd02      	ble.n	802b90a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 802b904:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802b908:	4770      	bx	lr
 802b90a:	29ff      	cmp	r1, #255	; 0xff
 802b90c:	bfa8      	it	ge
 802b90e:	21ff      	movge	r1, #255	; 0xff
 802b910:	4608      	mov	r0, r1
 802b912:	4770      	bx	lr

0802b914 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 802b914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b918:	688c      	ldr	r4, [r1, #8]
 802b91a:	2c00      	cmp	r4, #0
 802b91c:	b087      	sub	sp, #28
 802b91e:	4607      	mov	r7, r0
 802b920:	db2b      	blt.n	802b97a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802b922:	6803      	ldr	r3, [r0, #0]
 802b924:	691a      	ldr	r2, [r3, #16]
 802b926:	42a2      	cmp	r2, r4
 802b928:	dd27      	ble.n	802b97a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802b92a:	685a      	ldr	r2, [r3, #4]
 802b92c:	695e      	ldr	r6, [r3, #20]
 802b92e:	68cd      	ldr	r5, [r1, #12]
 802b930:	f8d1 901c 	ldr.w	r9, [r1, #28]
 802b934:	f893 a008 	ldrb.w	sl, [r3, #8]
 802b938:	f8d1 8020 	ldr.w	r8, [r1, #32]
 802b93c:	fb06 2604 	mla	r6, r6, r4, r2
 802b940:	698a      	ldr	r2, [r1, #24]
 802b942:	9205      	str	r2, [sp, #20]
 802b944:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 802b948:	9b05      	ldr	r3, [sp, #20]
 802b94a:	6839      	ldr	r1, [r7, #0]
 802b94c:	eb03 0c02 	add.w	ip, r3, r2
 802b950:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 802b954:	68c9      	ldr	r1, [r1, #12]
 802b956:	1898      	adds	r0, r3, r2
 802b958:	4288      	cmp	r0, r1
 802b95a:	db02      	blt.n	802b962 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 802b95c:	1a8b      	subs	r3, r1, r2
 802b95e:	2b00      	cmp	r3, #0
 802b960:	dd09      	ble.n	802b976 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 802b962:	6878      	ldr	r0, [r7, #4]
 802b964:	6801      	ldr	r1, [r0, #0]
 802b966:	9400      	str	r4, [sp, #0]
 802b968:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 802b96c:	4653      	mov	r3, sl
 802b96e:	f8d1 b008 	ldr.w	fp, [r1, #8]
 802b972:	4631      	mov	r1, r6
 802b974:	47d8      	blx	fp
 802b976:	3d01      	subs	r5, #1
 802b978:	d1e4      	bne.n	802b944 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 802b97a:	b007      	add	sp, #28
 802b97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b980 <_ZN8touchgfx10Rasterizer6lineToEii>:
 802b980:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 802b984:	b90b      	cbnz	r3, 802b98a <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802b986:	f001 b999 	b.w	802ccbc <_ZN8touchgfx7Outline6lineToEii>
 802b98a:	4770      	bx	lr

0802b98c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802b98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b990:	4b90      	ldr	r3, [pc, #576]	; (802bbd4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 802b992:	4604      	mov	r4, r0
 802b994:	2600      	movs	r6, #0
 802b996:	f100 0518 	add.w	r5, r0, #24
 802b99a:	e9c0 3100 	strd	r3, r1, [r0]
 802b99e:	b086      	sub	sp, #24
 802b9a0:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802b9a4:	e9c0 6604 	strd	r6, r6, [r0, #16]
 802b9a8:	f104 0730 	add.w	r7, r4, #48	; 0x30
 802b9ac:	4628      	mov	r0, r5
 802b9ae:	4690      	mov	r8, r2
 802b9b0:	f001 fc4e 	bl	802d250 <_ZN8touchgfx15RenderingBufferC1Ev>
 802b9b4:	4638      	mov	r0, r7
 802b9b6:	f000 fb45 	bl	802c044 <_ZN8touchgfx7OutlineC1Ev>
 802b9ba:	f104 0078 	add.w	r0, r4, #120	; 0x78
 802b9be:	f001 fbef 	bl	802d1a0 <_ZN8touchgfx8ScanlineC1Ev>
 802b9c2:	2301      	movs	r3, #1
 802b9c4:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 802b9c8:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 802b9cc:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 802b9d0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802b9d4:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 802b9d8:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 802b9dc:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 802b9e0:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 802b9e4:	f001 fb8c 	bl	802d100 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 802b9e8:	b928      	cbnz	r0, 802b9f6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 802b9ea:	4b7b      	ldr	r3, [pc, #492]	; (802bbd8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 802b9ec:	4a7b      	ldr	r2, [pc, #492]	; (802bbdc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 802b9ee:	212d      	movs	r1, #45	; 0x2d
 802b9f0:	487b      	ldr	r0, [pc, #492]	; (802bbe0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802b9f2:	f002 fa65 	bl	802dec0 <__assert_func>
 802b9f6:	f9b8 2000 	ldrsh.w	r2, [r8]
 802b9fa:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802b9fe:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802ba02:	9602      	str	r6, [sp, #8]
 802ba04:	4410      	add	r0, r2
 802ba06:	b280      	uxth	r0, r0
 802ba08:	fa0f fa80 	sxth.w	sl, r0
 802ba0c:	f1ba 0f00 	cmp.w	sl, #0
 802ba10:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802ba14:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802ba18:	dd70      	ble.n	802bafc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802ba1a:	4591      	cmp	r9, r2
 802ba1c:	dd6e      	ble.n	802bafc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802ba1e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 802ba22:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802ba26:	440b      	add	r3, r1
 802ba28:	b29b      	uxth	r3, r3
 802ba2a:	b21e      	sxth	r6, r3
 802ba2c:	2e00      	cmp	r6, #0
 802ba2e:	dd65      	ble.n	802bafc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802ba30:	458e      	cmp	lr, r1
 802ba32:	dd63      	ble.n	802bafc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802ba34:	45d1      	cmp	r9, sl
 802ba36:	bfb8      	it	lt
 802ba38:	fa1f f089 	uxthlt.w	r0, r9
 802ba3c:	45b6      	cmp	lr, r6
 802ba3e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802ba42:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802ba46:	bfb8      	it	lt
 802ba48:	fa1f f38e 	uxthlt.w	r3, lr
 802ba4c:	1a80      	subs	r0, r0, r2
 802ba4e:	1a5b      	subs	r3, r3, r1
 802ba50:	f8ad 000c 	strh.w	r0, [sp, #12]
 802ba54:	f8ad 300e 	strh.w	r3, [sp, #14]
 802ba58:	f8ad 2008 	strh.w	r2, [sp, #8]
 802ba5c:	f8ad 100a 	strh.w	r1, [sp, #10]
 802ba60:	f10d 0808 	add.w	r8, sp, #8
 802ba64:	e898 0003 	ldmia.w	r8, {r0, r1}
 802ba68:	ae04      	add	r6, sp, #16
 802ba6a:	e886 0003 	stmia.w	r6, {r0, r1}
 802ba6e:	f8dc 3000 	ldr.w	r3, [ip]
 802ba72:	4660      	mov	r0, ip
 802ba74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ba76:	4631      	mov	r1, r6
 802ba78:	4798      	blx	r3
 802ba7a:	6861      	ldr	r1, [r4, #4]
 802ba7c:	4640      	mov	r0, r8
 802ba7e:	3104      	adds	r1, #4
 802ba80:	f7f0 f98a 	bl	801bd98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802ba84:	4630      	mov	r0, r6
 802ba86:	f7f0 f943 	bl	801bd10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802ba8a:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 802ba8e:	f001 fac7 	bl	802d020 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 802ba92:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 802ba96:	4638      	mov	r0, r7
 802ba98:	f000 fab0 	bl	802bffc <_ZN8touchgfx7Outline5resetEv>
 802ba9c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802baa0:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 802baa4:	015b      	lsls	r3, r3, #5
 802baa6:	60e3      	str	r3, [r4, #12]
 802baa8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802baac:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802bab0:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 802bab4:	015b      	lsls	r3, r3, #5
 802bab6:	6123      	str	r3, [r4, #16]
 802bab8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 802babc:	015b      	lsls	r3, r3, #5
 802babe:	6163      	str	r3, [r4, #20]
 802bac0:	4b48      	ldr	r3, [pc, #288]	; (802bbe4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 802bac2:	0152      	lsls	r2, r2, #5
 802bac4:	6818      	ldr	r0, [r3, #0]
 802bac6:	60a2      	str	r2, [r4, #8]
 802bac8:	6803      	ldr	r3, [r0, #0]
 802baca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802bacc:	4798      	blx	r3
 802bace:	4606      	mov	r6, r0
 802bad0:	f7e4 fa98 	bl	8010004 <_ZN8touchgfx3HAL3lcdEv>
 802bad4:	6803      	ldr	r3, [r0, #0]
 802bad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802bad8:	4798      	blx	r3
 802bada:	4607      	mov	r7, r0
 802badc:	f7e4 fa92 	bl	8010004 <_ZN8touchgfx3HAL3lcdEv>
 802bae0:	6803      	ldr	r3, [r0, #0]
 802bae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bae4:	4798      	blx	r3
 802bae6:	280d      	cmp	r0, #13
 802bae8:	d855      	bhi.n	802bb96 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x20a>
 802baea:	e8df f000 	tbb	[pc, r0]
 802baee:	564c      	.short	0x564c
 802baf0:	2b6f0a67 	.word	0x2b6f0a67
 802baf4:	6060603b 	.word	0x6060603b
 802baf8:	6f6f6060 	.word	0x6f6f6060
 802bafc:	2300      	movs	r3, #0
 802bafe:	9303      	str	r3, [sp, #12]
 802bb00:	e7ae      	b.n	802ba60 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 802bb02:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bb06:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bb0a:	2108      	movs	r1, #8
 802bb0c:	fb92 f1f1 	sdiv	r1, r2, r1
 802bb10:	fb07 1303 	mla	r3, r7, r3, r1
 802bb14:	441e      	add	r6, r3
 802bb16:	4253      	negs	r3, r2
 802bb18:	f003 0307 	and.w	r3, r3, #7
 802bb1c:	f002 0207 	and.w	r2, r2, #7
 802bb20:	bf58      	it	pl
 802bb22:	425a      	negpl	r2, r3
 802bb24:	b2d2      	uxtb	r2, r2
 802bb26:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802bb2a:	6721      	str	r1, [r4, #112]	; 0x70
 802bb2c:	e9cd 1700 	strd	r1, r7, [sp]
 802bb30:	4628      	mov	r0, r5
 802bb32:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802bb36:	4631      	mov	r1, r6
 802bb38:	f001 fb96 	bl	802d268 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 802bb3c:	4620      	mov	r0, r4
 802bb3e:	b006      	add	sp, #24
 802bb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bb44:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bb48:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bb4c:	2104      	movs	r1, #4
 802bb4e:	fb92 f1f1 	sdiv	r1, r2, r1
 802bb52:	fb07 1303 	mla	r3, r7, r3, r1
 802bb56:	441e      	add	r6, r3
 802bb58:	4253      	negs	r3, r2
 802bb5a:	f003 0303 	and.w	r3, r3, #3
 802bb5e:	f002 0203 	and.w	r2, r2, #3
 802bb62:	e7dd      	b.n	802bb20 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 802bb64:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bb68:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bb6c:	2a00      	cmp	r2, #0
 802bb6e:	f04f 0102 	mov.w	r1, #2
 802bb72:	fb92 f1f1 	sdiv	r1, r2, r1
 802bb76:	f002 0201 	and.w	r2, r2, #1
 802bb7a:	fb07 1303 	mla	r3, r7, r3, r1
 802bb7e:	441e      	add	r6, r3
 802bb80:	bfb8      	it	lt
 802bb82:	4252      	neglt	r2, r2
 802bb84:	e7ce      	b.n	802bb24 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 802bb86:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bb8a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bb8e:	437b      	muls	r3, r7
 802bb90:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802bb94:	441e      	add	r6, r3
 802bb96:	2200      	movs	r2, #0
 802bb98:	e7c5      	b.n	802bb26 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 802bb9a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bb9e:	fb07 f203 	mul.w	r2, r7, r3
 802bba2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802bba6:	2103      	movs	r1, #3
 802bba8:	fb13 2301 	smlabb	r3, r3, r1, r2
 802bbac:	e7f2      	b.n	802bb94 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802bbae:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bbb2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bbb6:	fb07 2303 	mla	r3, r7, r3, r2
 802bbba:	e7eb      	b.n	802bb94 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802bbbc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bbc0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bbc4:	437b      	muls	r3, r7
 802bbc6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802bbca:	e7e3      	b.n	802bb94 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802bbcc:	4b06      	ldr	r3, [pc, #24]	; (802bbe8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 802bbce:	4a03      	ldr	r2, [pc, #12]	; (802bbdc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 802bbd0:	216c      	movs	r1, #108	; 0x6c
 802bbd2:	e70d      	b.n	802b9f0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 802bbd4:	080334a0 	.word	0x080334a0
 802bbd8:	080333e9 	.word	0x080333e9
 802bbdc:	080334a8 	.word	0x080334a8
 802bbe0:	08033445 	.word	0x08033445
 802bbe4:	2000977c 	.word	0x2000977c
 802bbe8:	08033479 	.word	0x08033479

0802bbec <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 802bbec:	6812      	ldr	r2, [r2, #0]
 802bbee:	2a00      	cmp	r2, #0
 802bbf0:	db0b      	blt.n	802bc0a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 802bbf2:	9800      	ldr	r0, [sp, #0]
 802bbf4:	6800      	ldr	r0, [r0, #0]
 802bbf6:	4290      	cmp	r0, r2
 802bbf8:	bfd4      	ite	le
 802bbfa:	2002      	movle	r0, #2
 802bbfc:	2000      	movgt	r0, #0
 802bbfe:	680a      	ldr	r2, [r1, #0]
 802bc00:	2a00      	cmp	r2, #0
 802bc02:	da04      	bge.n	802bc0e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 802bc04:	f040 0004 	orr.w	r0, r0, #4
 802bc08:	4770      	bx	lr
 802bc0a:	2001      	movs	r0, #1
 802bc0c:	e7f7      	b.n	802bbfe <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802bc0e:	681b      	ldr	r3, [r3, #0]
 802bc10:	4293      	cmp	r3, r2
 802bc12:	bfd8      	it	le
 802bc14:	f040 0008 	orrle.w	r0, r0, #8
 802bc18:	4770      	bx	lr
	...

0802bc1c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802bc1c:	b510      	push	{r4, lr}
 802bc1e:	4b07      	ldr	r3, [pc, #28]	; (802bc3c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802bc20:	781b      	ldrb	r3, [r3, #0]
 802bc22:	2b01      	cmp	r3, #1
 802bc24:	d108      	bne.n	802bc38 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802bc26:	6843      	ldr	r3, [r0, #4]
 802bc28:	6814      	ldr	r4, [r2, #0]
 802bc2a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802bc2e:	680b      	ldr	r3, [r1, #0]
 802bc30:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802bc34:	6013      	str	r3, [r2, #0]
 802bc36:	600c      	str	r4, [r1, #0]
 802bc38:	bd10      	pop	{r4, pc}
 802bc3a:	bf00      	nop
 802bc3c:	20009774 	.word	0x20009774

0802bc40 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802bc40:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bc42:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802bc46:	b085      	sub	sp, #20
 802bc48:	4604      	mov	r4, r0
 802bc4a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802bc4e:	b33b      	cbz	r3, 802bca0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 802bc50:	aa02      	add	r2, sp, #8
 802bc52:	a903      	add	r1, sp, #12
 802bc54:	f7ff ffe2 	bl	802bc1c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802bc58:	68a3      	ldr	r3, [r4, #8]
 802bc5a:	9e03      	ldr	r6, [sp, #12]
 802bc5c:	9f02      	ldr	r7, [sp, #8]
 802bc5e:	1af6      	subs	r6, r6, r3
 802bc60:	68e3      	ldr	r3, [r4, #12]
 802bc62:	9603      	str	r6, [sp, #12]
 802bc64:	1aff      	subs	r7, r7, r3
 802bc66:	f104 0314 	add.w	r3, r4, #20
 802bc6a:	9300      	str	r3, [sp, #0]
 802bc6c:	aa02      	add	r2, sp, #8
 802bc6e:	f104 0310 	add.w	r3, r4, #16
 802bc72:	a903      	add	r1, sp, #12
 802bc74:	4620      	mov	r0, r4
 802bc76:	9702      	str	r7, [sp, #8]
 802bc78:	f7ff ffb8 	bl	802bbec <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802bc7c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 802bc80:	4605      	mov	r5, r0
 802bc82:	b97b      	cbnz	r3, 802bca4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 802bc84:	463a      	mov	r2, r7
 802bc86:	4631      	mov	r1, r6
 802bc88:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802bc8c:	f7ff fe78 	bl	802b980 <_ZN8touchgfx10Rasterizer6lineToEii>
 802bc90:	9b03      	ldr	r3, [sp, #12]
 802bc92:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802bc96:	9b02      	ldr	r3, [sp, #8]
 802bc98:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 802bc9c:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 802bca0:	b005      	add	sp, #20
 802bca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bca4:	b110      	cbz	r0, 802bcac <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802bca6:	ea13 0200 	ands.w	r2, r3, r0
 802bcaa:	d11c      	bne.n	802bce6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 802bcac:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 802bcb0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 802bcb4:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 802bcb8:	b188      	cbz	r0, 802bcde <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802bcba:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 802bcbe:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802bcc2:	b913      	cbnz	r3, 802bcca <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 802bcc4:	4630      	mov	r0, r6
 802bcc6:	f001 f829 	bl	802cd1c <_ZN8touchgfx7Outline6moveToEii>
 802bcca:	2300      	movs	r3, #0
 802bccc:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802bcd0:	2301      	movs	r3, #1
 802bcd2:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802bcd6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802bcda:	4630      	mov	r0, r6
 802bcdc:	e7d6      	b.n	802bc8c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802bcde:	4630      	mov	r0, r6
 802bce0:	f7ff fe4e 	bl	802b980 <_ZN8touchgfx10Rasterizer6lineToEii>
 802bce4:	e7f7      	b.n	802bcd6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802bce6:	4615      	mov	r5, r2
 802bce8:	e7d2      	b.n	802bc90 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802bcea <_ZN8touchgfx6Canvas5closeEv>:
 802bcea:	b538      	push	{r3, r4, r5, lr}
 802bcec:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802bcf0:	4604      	mov	r4, r0
 802bcf2:	b993      	cbnz	r3, 802bd1a <_ZN8touchgfx6Canvas5closeEv+0x30>
 802bcf4:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 802bcf8:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 802bcfc:	4213      	tst	r3, r2
 802bcfe:	d10c      	bne.n	802bd1a <_ZN8touchgfx6Canvas5closeEv+0x30>
 802bd00:	f100 0530 	add.w	r5, r0, #48	; 0x30
 802bd04:	b123      	cbz	r3, 802bd10 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802bd06:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 802bd0a:	4628      	mov	r0, r5
 802bd0c:	f7ff fe38 	bl	802b980 <_ZN8touchgfx10Rasterizer6lineToEii>
 802bd10:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 802bd14:	4628      	mov	r0, r5
 802bd16:	f7ff fe33 	bl	802b980 <_ZN8touchgfx10Rasterizer6lineToEii>
 802bd1a:	2300      	movs	r3, #0
 802bd1c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802bd20:	bd38      	pop	{r3, r4, r5, pc}

0802bd22 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802bd22:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bd24:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802bd28:	b085      	sub	sp, #20
 802bd2a:	4604      	mov	r4, r0
 802bd2c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802bd30:	b353      	cbz	r3, 802bd88 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 802bd32:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802bd36:	b90b      	cbnz	r3, 802bd3c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 802bd38:	f7ff ffd7 	bl	802bcea <_ZN8touchgfx6Canvas5closeEv>
 802bd3c:	aa02      	add	r2, sp, #8
 802bd3e:	a903      	add	r1, sp, #12
 802bd40:	4620      	mov	r0, r4
 802bd42:	f7ff ff6b 	bl	802bc1c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802bd46:	68a3      	ldr	r3, [r4, #8]
 802bd48:	9d03      	ldr	r5, [sp, #12]
 802bd4a:	9e02      	ldr	r6, [sp, #8]
 802bd4c:	1aed      	subs	r5, r5, r3
 802bd4e:	68e3      	ldr	r3, [r4, #12]
 802bd50:	9503      	str	r5, [sp, #12]
 802bd52:	1af6      	subs	r6, r6, r3
 802bd54:	f104 0314 	add.w	r3, r4, #20
 802bd58:	9300      	str	r3, [sp, #0]
 802bd5a:	aa02      	add	r2, sp, #8
 802bd5c:	f104 0310 	add.w	r3, r4, #16
 802bd60:	a903      	add	r1, sp, #12
 802bd62:	4620      	mov	r0, r4
 802bd64:	9602      	str	r6, [sp, #8]
 802bd66:	f7ff ff41 	bl	802bbec <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802bd6a:	4607      	mov	r7, r0
 802bd6c:	b170      	cbz	r0, 802bd8c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802bd6e:	2301      	movs	r3, #1
 802bd70:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802bd74:	9a03      	ldr	r2, [sp, #12]
 802bd76:	9b02      	ldr	r3, [sp, #8]
 802bd78:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 802bd7c:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 802bd80:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 802bd84:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 802bd88:	b005      	add	sp, #20
 802bd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bd8c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802bd90:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 802bd94:	b92b      	cbnz	r3, 802bda2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802bd96:	4632      	mov	r2, r6
 802bd98:	4629      	mov	r1, r5
 802bd9a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802bd9e:	f000 ffbd 	bl	802cd1c <_ZN8touchgfx7Outline6moveToEii>
 802bda2:	2300      	movs	r3, #0
 802bda4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802bda8:	2301      	movs	r3, #1
 802bdaa:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802bdae:	e7e1      	b.n	802bd74 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

0802bdb0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 802bdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bdb4:	b087      	sub	sp, #28
 802bdb6:	4604      	mov	r4, r0
 802bdb8:	9105      	str	r1, [sp, #20]
 802bdba:	f001 f8f6 	bl	802cfaa <_ZN8touchgfx7Outline8getCellsEv>
 802bdbe:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802bdc2:	4605      	mov	r5, r0
 802bdc4:	f1b9 0f00 	cmp.w	r9, #0
 802bdc8:	d103      	bne.n	802bdd2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802bdca:	2001      	movs	r0, #1
 802bdcc:	b007      	add	sp, #28
 802bdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bdd2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802bdd6:	2e00      	cmp	r6, #0
 802bdd8:	d139      	bne.n	802be4e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802bdda:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802bdde:	4640      	mov	r0, r8
 802bde0:	f001 f9c8 	bl	802d174 <_ZN8touchgfx8Scanline5resetEv>
 802bde4:	f109 33ff 	add.w	r3, r9, #4294967295
 802bde8:	f105 0708 	add.w	r7, r5, #8
 802bdec:	9303      	str	r3, [sp, #12]
 802bdee:	f9b5 b000 	ldrsh.w	fp, [r5]
 802bdf2:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802bdf6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802bdfa:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 802bdfe:	46da      	mov	sl, fp
 802be00:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 802be04:	9b03      	ldr	r3, [sp, #12]
 802be06:	9504      	str	r5, [sp, #16]
 802be08:	3b01      	subs	r3, #1
 802be0a:	9303      	str	r3, [sp, #12]
 802be0c:	3301      	adds	r3, #1
 802be0e:	4416      	add	r6, r2
 802be10:	463d      	mov	r5, r7
 802be12:	d01e      	beq.n	802be52 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 802be14:	3708      	adds	r7, #8
 802be16:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802be1a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802be1e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 802be22:	4290      	cmp	r0, r2
 802be24:	d11e      	bne.n	802be64 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802be26:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802be2a:	4411      	add	r1, r2
 802be2c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 802be30:	e7e8      	b.n	802be04 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 802be32:	1c91      	adds	r1, r2, #2
 802be34:	f04f 0301 	mov.w	r3, #1
 802be38:	65e1      	str	r1, [r4, #92]	; 0x5c
 802be3a:	8053      	strh	r3, [r2, #2]
 802be3c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802be3e:	1c91      	adds	r1, r2, #2
 802be40:	65a1      	str	r1, [r4, #88]	; 0x58
 802be42:	f8a2 b002 	strh.w	fp, [r2, #2]
 802be46:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802be48:	3201      	adds	r2, #1
 802be4a:	6562      	str	r2, [r4, #84]	; 0x54
 802be4c:	e03a      	b.n	802bec4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 802be4e:	2000      	movs	r0, #0
 802be50:	e7bc      	b.n	802bdcc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 802be52:	b951      	cbnz	r1, 802be6a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 802be54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802be56:	2b00      	cmp	r3, #0
 802be58:	d0b7      	beq.n	802bdca <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802be5a:	4641      	mov	r1, r8
 802be5c:	9805      	ldr	r0, [sp, #20]
 802be5e:	f7ff fd59 	bl	802b914 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802be62:	e7b2      	b.n	802bdca <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802be64:	2900      	cmp	r1, #0
 802be66:	d035      	beq.n	802bed4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802be68:	9504      	str	r5, [sp, #16]
 802be6a:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802be6e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802be72:	f7ff fd3b 	bl	802b8ec <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802be76:	4605      	mov	r5, r0
 802be78:	b330      	cbz	r0, 802bec8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802be7a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802be7c:	b182      	cbz	r2, 802bea0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802be7e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 802be80:	4591      	cmp	r9, r2
 802be82:	d00d      	beq.n	802bea0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802be84:	4641      	mov	r1, r8
 802be86:	9805      	ldr	r0, [sp, #20]
 802be88:	f7ff fd44 	bl	802b914 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802be8c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802be90:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 802be92:	65e2      	str	r2, [r4, #92]	; 0x5c
 802be94:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802be98:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802be9a:	65a2      	str	r2, [r4, #88]	; 0x58
 802be9c:	2300      	movs	r3, #0
 802be9e:	6563      	str	r3, [r4, #84]	; 0x54
 802bea0:	f1bb 0f00 	cmp.w	fp, #0
 802bea4:	db10      	blt.n	802bec8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802bea6:	f001 f939 	bl	802d11c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802beaa:	4583      	cmp	fp, r0
 802beac:	da0c      	bge.n	802bec8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802beae:	6e22      	ldr	r2, [r4, #96]	; 0x60
 802beb0:	f802 500b 	strb.w	r5, [r2, fp]
 802beb4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802beb6:	3201      	adds	r2, #1
 802beb8:	4593      	cmp	fp, r2
 802beba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802bebc:	d1b9      	bne.n	802be32 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802bebe:	8811      	ldrh	r1, [r2, #0]
 802bec0:	3101      	adds	r1, #1
 802bec2:	8011      	strh	r1, [r2, #0]
 802bec4:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802bec8:	9b03      	ldr	r3, [sp, #12]
 802beca:	3301      	adds	r3, #1
 802becc:	d0c2      	beq.n	802be54 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802bece:	9d04      	ldr	r5, [sp, #16]
 802bed0:	f10b 0a01 	add.w	sl, fp, #1
 802bed4:	f9b5 3000 	ldrsh.w	r3, [r5]
 802bed8:	4553      	cmp	r3, sl
 802beda:	dd88      	ble.n	802bdee <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802bedc:	01b1      	lsls	r1, r6, #6
 802bede:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802bee2:	f7ff fd03 	bl	802b8ec <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802bee6:	4683      	mov	fp, r0
 802bee8:	2800      	cmp	r0, #0
 802beea:	d080      	beq.n	802bdee <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802beec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802beee:	b183      	cbz	r3, 802bf12 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802bef0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802bef2:	4599      	cmp	r9, r3
 802bef4:	d00d      	beq.n	802bf12 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802bef6:	4641      	mov	r1, r8
 802bef8:	9805      	ldr	r0, [sp, #20]
 802befa:	f7ff fd0b 	bl	802b914 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802befe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802bf02:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802bf06:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 802bf08:	65e3      	str	r3, [r4, #92]	; 0x5c
 802bf0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802bf0c:	65a3      	str	r3, [r4, #88]	; 0x58
 802bf0e:	2300      	movs	r3, #0
 802bf10:	6563      	str	r3, [r4, #84]	; 0x54
 802bf12:	f9b5 3000 	ldrsh.w	r3, [r5]
 802bf16:	f8cd b000 	str.w	fp, [sp]
 802bf1a:	eba3 030a 	sub.w	r3, r3, sl
 802bf1e:	464a      	mov	r2, r9
 802bf20:	4651      	mov	r1, sl
 802bf22:	4640      	mov	r0, r8
 802bf24:	f001 f952 	bl	802d1cc <_ZN8touchgfx8Scanline7addSpanEiijj>
 802bf28:	e761      	b.n	802bdee <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802bf2a <_ZN8touchgfx6Canvas6renderEh>:
 802bf2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802bf2c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802bf30:	4604      	mov	r4, r0
 802bf32:	460d      	mov	r5, r1
 802bf34:	b913      	cbnz	r3, 802bf3c <_ZN8touchgfx6Canvas6renderEh+0x12>
 802bf36:	2001      	movs	r0, #1
 802bf38:	b003      	add	sp, #12
 802bf3a:	bd30      	pop	{r4, r5, pc}
 802bf3c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 802bf40:	2b00      	cmp	r3, #0
 802bf42:	d12f      	bne.n	802bfa4 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 802bf44:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 802bf48:	2b00      	cmp	r3, #0
 802bf4a:	d0f4      	beq.n	802bf36 <_ZN8touchgfx6Canvas6renderEh+0xc>
 802bf4c:	6840      	ldr	r0, [r0, #4]
 802bf4e:	6803      	ldr	r3, [r0, #0]
 802bf50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802bf52:	4798      	blx	r3
 802bf54:	fb10 f105 	smulbb	r1, r0, r5
 802bf58:	b288      	uxth	r0, r1
 802bf5a:	1c41      	adds	r1, r0, #1
 802bf5c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802bf60:	120d      	asrs	r5, r1, #8
 802bf62:	d0e8      	beq.n	802bf36 <_ZN8touchgfx6Canvas6renderEh+0xc>
 802bf64:	4620      	mov	r0, r4
 802bf66:	f7ff fec0 	bl	802bcea <_ZN8touchgfx6Canvas5closeEv>
 802bf6a:	6860      	ldr	r0, [r4, #4]
 802bf6c:	6803      	ldr	r3, [r0, #0]
 802bf6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bf70:	4798      	blx	r3
 802bf72:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 802bf76:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 802bf7a:	80c3      	strh	r3, [r0, #6]
 802bf7c:	8082      	strh	r2, [r0, #4]
 802bf7e:	6860      	ldr	r0, [r4, #4]
 802bf80:	6803      	ldr	r3, [r0, #0]
 802bf82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bf84:	4798      	blx	r3
 802bf86:	7205      	strb	r5, [r0, #8]
 802bf88:	6860      	ldr	r0, [r4, #4]
 802bf8a:	6803      	ldr	r3, [r0, #0]
 802bf8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bf8e:	4798      	blx	r3
 802bf90:	f104 0318 	add.w	r3, r4, #24
 802bf94:	e9cd 3000 	strd	r3, r0, [sp]
 802bf98:	4669      	mov	r1, sp
 802bf9a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802bf9e:	f7ff ff07 	bl	802bdb0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 802bfa2:	e7c9      	b.n	802bf38 <_ZN8touchgfx6Canvas6renderEh+0xe>
 802bfa4:	2000      	movs	r0, #0
 802bfa6:	e7c7      	b.n	802bf38 <_ZN8touchgfx6Canvas6renderEh+0xe>

0802bfa8 <_ZN8touchgfx6CanvasD1Ev>:
 802bfa8:	b538      	push	{r3, r4, r5, lr}
 802bfaa:	4605      	mov	r5, r0
 802bfac:	4b08      	ldr	r3, [pc, #32]	; (802bfd0 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802bfae:	f845 3b30 	str.w	r3, [r5], #48
 802bfb2:	4b08      	ldr	r3, [pc, #32]	; (802bfd4 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802bfb4:	4604      	mov	r4, r0
 802bfb6:	6818      	ldr	r0, [r3, #0]
 802bfb8:	6803      	ldr	r3, [r0, #0]
 802bfba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bfbc:	4798      	blx	r3
 802bfbe:	4628      	mov	r0, r5
 802bfc0:	f000 f814 	bl	802bfec <_ZN8touchgfx7OutlineD1Ev>
 802bfc4:	f104 0018 	add.w	r0, r4, #24
 802bfc8:	f001 f939 	bl	802d23e <_ZN8touchgfx15RenderingBufferD1Ev>
 802bfcc:	4620      	mov	r0, r4
 802bfce:	bd38      	pop	{r3, r4, r5, pc}
 802bfd0:	080334a0 	.word	0x080334a0
 802bfd4:	2000977c 	.word	0x2000977c

0802bfd8 <_ZN8touchgfx6CanvasD0Ev>:
 802bfd8:	b510      	push	{r4, lr}
 802bfda:	4604      	mov	r4, r0
 802bfdc:	f7ff ffe4 	bl	802bfa8 <_ZN8touchgfx6CanvasD1Ev>
 802bfe0:	4620      	mov	r0, r4
 802bfe2:	21bc      	movs	r1, #188	; 0xbc
 802bfe4:	f001 f94d 	bl	802d282 <_ZdlPvj>
 802bfe8:	4620      	mov	r0, r4
 802bfea:	bd10      	pop	{r4, pc}

0802bfec <_ZN8touchgfx7OutlineD1Ev>:
 802bfec:	4770      	bx	lr

0802bfee <_ZN8touchgfx7OutlineD0Ev>:
 802bfee:	b510      	push	{r4, lr}
 802bff0:	2148      	movs	r1, #72	; 0x48
 802bff2:	4604      	mov	r4, r0
 802bff4:	f001 f945 	bl	802d282 <_ZdlPvj>
 802bff8:	4620      	mov	r0, r4
 802bffa:	bd10      	pop	{r4, pc}

0802bffc <_ZN8touchgfx7Outline5resetEv>:
 802bffc:	b510      	push	{r4, lr}
 802bffe:	4604      	mov	r4, r0
 802c000:	f001 f8a4 	bl	802d14c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 802c004:	60e0      	str	r0, [r4, #12]
 802c006:	f001 f8a7 	bl	802d158 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802c00a:	68e3      	ldr	r3, [r4, #12]
 802c00c:	6123      	str	r3, [r4, #16]
 802c00e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802c012:	82a3      	strh	r3, [r4, #20]
 802c014:	82e3      	strh	r3, [r4, #22]
 802c016:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802c018:	f023 0301 	bic.w	r3, r3, #1
 802c01c:	f043 0302 	orr.w	r3, r3, #2
 802c020:	63e3      	str	r3, [r4, #60]	; 0x3c
 802c022:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802c026:	2200      	movs	r2, #0
 802c028:	08c0      	lsrs	r0, r0, #3
 802c02a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802c02e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802c032:	6060      	str	r0, [r4, #4]
 802c034:	60a2      	str	r2, [r4, #8]
 802c036:	8322      	strh	r2, [r4, #24]
 802c038:	8362      	strh	r2, [r4, #26]
 802c03a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802c03e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c042:	bd10      	pop	{r4, pc}

0802c044 <_ZN8touchgfx7OutlineC1Ev>:
 802c044:	b510      	push	{r4, lr}
 802c046:	4b0f      	ldr	r3, [pc, #60]	; (802c084 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802c048:	6003      	str	r3, [r0, #0]
 802c04a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802c04e:	2300      	movs	r3, #0
 802c050:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802c054:	4604      	mov	r4, r0
 802c056:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802c05a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802c05e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802c062:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802c066:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802c06a:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802c06e:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802c072:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802c076:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802c07a:	f7ff ffbf 	bl	802bffc <_ZN8touchgfx7Outline5resetEv>
 802c07e:	4620      	mov	r0, r4
 802c080:	bd10      	pop	{r4, pc}
 802c082:	bf00      	nop
 802c084:	08033570 	.word	0x08033570

0802c088 <_ZN8touchgfx7Outline10renderLineEiiii>:
 802c088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c08c:	b095      	sub	sp, #84	; 0x54
 802c08e:	4604      	mov	r4, r0
 802c090:	981e      	ldr	r0, [sp, #120]	; 0x78
 802c092:	9304      	str	r3, [sp, #16]
 802c094:	1153      	asrs	r3, r2, #5
 802c096:	9300      	str	r3, [sp, #0]
 802c098:	1143      	asrs	r3, r0, #5
 802c09a:	930c      	str	r3, [sp, #48]	; 0x30
 802c09c:	f000 031f 	and.w	r3, r0, #31
 802c0a0:	9303      	str	r3, [sp, #12]
 802c0a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802c0a4:	1155      	asrs	r5, r2, #5
 802c0a6:	42ab      	cmp	r3, r5
 802c0a8:	bfc4      	itt	gt
 802c0aa:	462b      	movgt	r3, r5
 802c0ac:	6323      	strgt	r3, [r4, #48]	; 0x30
 802c0ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802c0b0:	1155      	asrs	r5, r2, #5
 802c0b2:	42ab      	cmp	r3, r5
 802c0b4:	bfde      	ittt	le
 802c0b6:	462b      	movle	r3, r5
 802c0b8:	3301      	addle	r3, #1
 802c0ba:	63a3      	strle	r3, [r4, #56]	; 0x38
 802c0bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802c0be:	1145      	asrs	r5, r0, #5
 802c0c0:	42ab      	cmp	r3, r5
 802c0c2:	bfc4      	itt	gt
 802c0c4:	462b      	movgt	r3, r5
 802c0c6:	6323      	strgt	r3, [r4, #48]	; 0x30
 802c0c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802c0ca:	1145      	asrs	r5, r0, #5
 802c0cc:	42ab      	cmp	r3, r5
 802c0ce:	bfde      	ittt	le
 802c0d0:	462b      	movle	r3, r5
 802c0d2:	3301      	addle	r3, #1
 802c0d4:	63a3      	strle	r3, [r4, #56]	; 0x38
 802c0d6:	9b04      	ldr	r3, [sp, #16]
 802c0d8:	1157      	asrs	r7, r2, #5
 802c0da:	eba3 0a01 	sub.w	sl, r3, r1
 802c0de:	1143      	asrs	r3, r0, #5
 802c0e0:	429f      	cmp	r7, r3
 802c0e2:	f002 061f 	and.w	r6, r2, #31
 802c0e6:	ea4f 1561 	mov.w	r5, r1, asr #5
 802c0ea:	f040 8122 	bne.w	802c332 <_ZN8touchgfx7Outline10renderLineEiiii+0x2aa>
 802c0ee:	9b04      	ldr	r3, [sp, #16]
 802c0f0:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802c0f4:	9b03      	ldr	r3, [sp, #12]
 802c0f6:	429e      	cmp	r6, r3
 802c0f8:	d131      	bne.n	802c15e <_ZN8touchgfx7Outline10renderLineEiiii+0xd6>
 802c0fa:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802c0fe:	f9bd 2000 	ldrsh.w	r2, [sp]
 802c102:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802c106:	fa0f fb8b 	sxth.w	fp, fp
 802c10a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802c10e:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 802c112:	4281      	cmp	r1, r0
 802c114:	f000 80eb 	beq.w	802c2ee <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802c118:	8b60      	ldrh	r0, [r4, #26]
 802c11a:	8b21      	ldrh	r1, [r4, #24]
 802c11c:	4301      	orrs	r1, r0
 802c11e:	d00b      	beq.n	802c138 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802c120:	2b00      	cmp	r3, #0
 802c122:	db09      	blt.n	802c138 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802c124:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c126:	428b      	cmp	r3, r1
 802c128:	da06      	bge.n	802c138 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802c12a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802c12e:	4299      	cmp	r1, r3
 802c130:	d308      	bcc.n	802c144 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc>
 802c132:	2301      	movs	r3, #1
 802c134:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802c138:	f8a4 b014 	strh.w	fp, [r4, #20]
 802c13c:	2300      	movs	r3, #0
 802c13e:	82e2      	strh	r2, [r4, #22]
 802c140:	8323      	strh	r3, [r4, #24]
 802c142:	e01f      	b.n	802c184 <_ZN8touchgfx7Outline10renderLineEiiii+0xfc>
 802c144:	f104 0314 	add.w	r3, r4, #20
 802c148:	cb03      	ldmia	r3!, {r0, r1}
 802c14a:	6925      	ldr	r5, [r4, #16]
 802c14c:	6028      	str	r0, [r5, #0]
 802c14e:	6069      	str	r1, [r5, #4]
 802c150:	6923      	ldr	r3, [r4, #16]
 802c152:	3308      	adds	r3, #8
 802c154:	6123      	str	r3, [r4, #16]
 802c156:	68a3      	ldr	r3, [r4, #8]
 802c158:	3301      	adds	r3, #1
 802c15a:	60a3      	str	r3, [r4, #8]
 802c15c:	e7ec      	b.n	802c138 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802c15e:	9b04      	ldr	r3, [sp, #16]
 802c160:	8b20      	ldrh	r0, [r4, #24]
 802c162:	8b62      	ldrh	r2, [r4, #26]
 802c164:	f003 031f 	and.w	r3, r3, #31
 802c168:	9305      	str	r3, [sp, #20]
 802c16a:	9b03      	ldr	r3, [sp, #12]
 802c16c:	45ab      	cmp	fp, r5
 802c16e:	f001 011f 	and.w	r1, r1, #31
 802c172:	eba3 0306 	sub.w	r3, r3, r6
 802c176:	d107      	bne.n	802c188 <_ZN8touchgfx7Outline10renderLineEiiii+0x100>
 802c178:	4418      	add	r0, r3
 802c17a:	8320      	strh	r0, [r4, #24]
 802c17c:	9805      	ldr	r0, [sp, #20]
 802c17e:	4401      	add	r1, r0
 802c180:	fb03 2301 	mla	r3, r3, r1, r2
 802c184:	8363      	strh	r3, [r4, #26]
 802c186:	e0b2      	b.n	802c2ee <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802c188:	f1ba 0f00 	cmp.w	sl, #0
 802c18c:	db35      	blt.n	802c1fa <_ZN8touchgfx7Outline10renderLineEiiii+0x172>
 802c18e:	2701      	movs	r7, #1
 802c190:	f1c1 0c20 	rsb	ip, r1, #32
 802c194:	9702      	str	r7, [sp, #8]
 802c196:	fb03 f30c 	mul.w	r3, r3, ip
 802c19a:	2720      	movs	r7, #32
 802c19c:	9701      	str	r7, [sp, #4]
 802c19e:	fb93 fcfa 	sdiv	ip, r3, sl
 802c1a2:	9f01      	ldr	r7, [sp, #4]
 802c1a4:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802c1a8:	fb0a 331c 	mls	r3, sl, ip, r3
 802c1ac:	2b00      	cmp	r3, #0
 802c1ae:	bfb8      	it	lt
 802c1b0:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802c1b4:	4439      	add	r1, r7
 802c1b6:	fb0c 2101 	mla	r1, ip, r1, r2
 802c1ba:	9a02      	ldr	r2, [sp, #8]
 802c1bc:	4415      	add	r5, r2
 802c1be:	f9bd 2000 	ldrsh.w	r2, [sp]
 802c1c2:	9200      	str	r2, [sp, #0]
 802c1c4:	ea4f 4702 	mov.w	r7, r2, lsl #16
 802c1c8:	9704      	str	r7, [sp, #16]
 802c1ca:	9a04      	ldr	r2, [sp, #16]
 802c1cc:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 802c1d0:	fa0f fe85 	sxth.w	lr, r5
 802c1d4:	4460      	add	r0, ip
 802c1d6:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 802c1da:	eb0e 0902 	add.w	r9, lr, r2
 802c1de:	bfb8      	it	lt
 802c1e0:	4453      	addlt	r3, sl
 802c1e2:	b200      	sxth	r0, r0
 802c1e4:	b209      	sxth	r1, r1
 802c1e6:	454f      	cmp	r7, r9
 802c1e8:	8320      	strh	r0, [r4, #24]
 802c1ea:	8361      	strh	r1, [r4, #26]
 802c1ec:	d10d      	bne.n	802c20a <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 802c1ee:	4ba1      	ldr	r3, [pc, #644]	; (802c474 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ec>)
 802c1f0:	4aa1      	ldr	r2, [pc, #644]	; (802c478 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f0>)
 802c1f2:	48a2      	ldr	r0, [pc, #648]	; (802c47c <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 802c1f4:	2177      	movs	r1, #119	; 0x77
 802c1f6:	f001 fe63 	bl	802dec0 <__assert_func>
 802c1fa:	f04f 37ff 	mov.w	r7, #4294967295
 802c1fe:	9702      	str	r7, [sp, #8]
 802c200:	434b      	muls	r3, r1
 802c202:	f1ca 0a00 	rsb	sl, sl, #0
 802c206:	2700      	movs	r7, #0
 802c208:	e7c8      	b.n	802c19c <_ZN8touchgfx7Outline10renderLineEiiii+0x114>
 802c20a:	ea50 0201 	orrs.w	r2, r0, r1
 802c20e:	d00c      	beq.n	802c22a <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802c210:	f1b8 0f00 	cmp.w	r8, #0
 802c214:	db09      	blt.n	802c22a <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802c216:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c218:	4588      	cmp	r8, r1
 802c21a:	da06      	bge.n	802c22a <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802c21c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c220:	4288      	cmp	r0, r1
 802c222:	d367      	bcc.n	802c2f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x26c>
 802c224:	2101      	movs	r1, #1
 802c226:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c22a:	2100      	movs	r1, #0
 802c22c:	9a00      	ldr	r2, [sp, #0]
 802c22e:	f8a4 e014 	strh.w	lr, [r4, #20]
 802c232:	45ab      	cmp	fp, r5
 802c234:	82e2      	strh	r2, [r4, #22]
 802c236:	8321      	strh	r1, [r4, #24]
 802c238:	8361      	strh	r1, [r4, #26]
 802c23a:	4466      	add	r6, ip
 802c23c:	d04e      	beq.n	802c2dc <_ZN8touchgfx7Outline10renderLineEiiii+0x254>
 802c23e:	9a03      	ldr	r2, [sp, #12]
 802c240:	1b91      	subs	r1, r2, r6
 802c242:	448c      	add	ip, r1
 802c244:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802c248:	fb9c f7fa 	sdiv	r7, ip, sl
 802c24c:	fb0a cc17 	mls	ip, sl, r7, ip
 802c250:	f1bc 0f00 	cmp.w	ip, #0
 802c254:	bfb8      	it	lt
 802c256:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802c25a:	f107 0201 	add.w	r2, r7, #1
 802c25e:	bfb8      	it	lt
 802c260:	44d4      	addlt	ip, sl
 802c262:	eba3 030a 	sub.w	r3, r3, sl
 802c266:	9207      	str	r2, [sp, #28]
 802c268:	f04f 0800 	mov.w	r8, #0
 802c26c:	eb13 030c 	adds.w	r3, r3, ip
 802c270:	bf58      	it	pl
 802c272:	9807      	ldrpl	r0, [sp, #28]
 802c274:	9a02      	ldr	r2, [sp, #8]
 802c276:	bf48      	it	mi
 802c278:	4638      	movmi	r0, r7
 802c27a:	fa0f fe80 	sxth.w	lr, r0
 802c27e:	ea4f 1140 	mov.w	r1, r0, lsl #5
 802c282:	4415      	add	r5, r2
 802c284:	4406      	add	r6, r0
 802c286:	9a04      	ldr	r2, [sp, #16]
 802c288:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802c28c:	f8a4 e018 	strh.w	lr, [r4, #24]
 802c290:	fa0f f985 	sxth.w	r9, r5
 802c294:	4410      	add	r0, r2
 802c296:	444a      	add	r2, r9
 802c298:	bf58      	it	pl
 802c29a:	eba3 030a 	subpl.w	r3, r3, sl
 802c29e:	b209      	sxth	r1, r1
 802c2a0:	4290      	cmp	r0, r2
 802c2a2:	8361      	strh	r1, [r4, #26]
 802c2a4:	d0a3      	beq.n	802c1ee <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c2a6:	ea5e 0201 	orrs.w	r2, lr, r1
 802c2aa:	d00d      	beq.n	802c2c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802c2ac:	9a00      	ldr	r2, [sp, #0]
 802c2ae:	2a00      	cmp	r2, #0
 802c2b0:	db0a      	blt.n	802c2c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802c2b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c2b4:	428a      	cmp	r2, r1
 802c2b6:	da07      	bge.n	802c2c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802c2b8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c2bc:	4288      	cmp	r0, r1
 802c2be:	d329      	bcc.n	802c314 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 802c2c0:	f04f 0201 	mov.w	r2, #1
 802c2c4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c2c8:	9a00      	ldr	r2, [sp, #0]
 802c2ca:	f8a4 9014 	strh.w	r9, [r4, #20]
 802c2ce:	45ab      	cmp	fp, r5
 802c2d0:	82e2      	strh	r2, [r4, #22]
 802c2d2:	f8a4 8018 	strh.w	r8, [r4, #24]
 802c2d6:	f8a4 801a 	strh.w	r8, [r4, #26]
 802c2da:	d1c7      	bne.n	802c26c <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 802c2dc:	9b03      	ldr	r3, [sp, #12]
 802c2de:	9a01      	ldr	r2, [sp, #4]
 802c2e0:	1b9e      	subs	r6, r3, r6
 802c2e2:	9b05      	ldr	r3, [sp, #20]
 802c2e4:	8326      	strh	r6, [r4, #24]
 802c2e6:	3320      	adds	r3, #32
 802c2e8:	1a9b      	subs	r3, r3, r2
 802c2ea:	435e      	muls	r6, r3
 802c2ec:	8366      	strh	r6, [r4, #26]
 802c2ee:	b015      	add	sp, #84	; 0x54
 802c2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c2f4:	f104 0714 	add.w	r7, r4, #20
 802c2f8:	cf03      	ldmia	r7!, {r0, r1}
 802c2fa:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802c2fe:	f8c8 0000 	str.w	r0, [r8]
 802c302:	f8c8 1004 	str.w	r1, [r8, #4]
 802c306:	6921      	ldr	r1, [r4, #16]
 802c308:	3108      	adds	r1, #8
 802c30a:	6121      	str	r1, [r4, #16]
 802c30c:	68a1      	ldr	r1, [r4, #8]
 802c30e:	3101      	adds	r1, #1
 802c310:	60a1      	str	r1, [r4, #8]
 802c312:	e78a      	b.n	802c22a <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802c314:	f104 0e14 	add.w	lr, r4, #20
 802c318:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802c31c:	6922      	ldr	r2, [r4, #16]
 802c31e:	9206      	str	r2, [sp, #24]
 802c320:	6010      	str	r0, [r2, #0]
 802c322:	6051      	str	r1, [r2, #4]
 802c324:	6921      	ldr	r1, [r4, #16]
 802c326:	3108      	adds	r1, #8
 802c328:	6121      	str	r1, [r4, #16]
 802c32a:	68a1      	ldr	r1, [r4, #8]
 802c32c:	3101      	adds	r1, #1
 802c32e:	60a1      	str	r1, [r4, #8]
 802c330:	e7ca      	b.n	802c2c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802c332:	eba0 0b02 	sub.w	fp, r0, r2
 802c336:	f1ba 0f00 	cmp.w	sl, #0
 802c33a:	f040 80a1 	bne.w	802c480 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>
 802c33e:	f1bb 0f00 	cmp.w	fp, #0
 802c342:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802c346:	8b62      	ldrh	r2, [r4, #26]
 802c348:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802c34c:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 802c350:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 802c354:	bfa8      	it	ge
 802c356:	f04f 0a20 	movge.w	sl, #32
 802c35a:	8b21      	ldrh	r1, [r4, #24]
 802c35c:	ebaa 0606 	sub.w	r6, sl, r6
 802c360:	4431      	add	r1, r6
 802c362:	fb06 2603 	mla	r6, r6, r3, r2
 802c366:	9a00      	ldr	r2, [sp, #0]
 802c368:	bfb4      	ite	lt
 802c36a:	f04f 39ff 	movlt.w	r9, #4294967295
 802c36e:	f04f 0901 	movge.w	r9, #1
 802c372:	444a      	add	r2, r9
 802c374:	b22d      	sxth	r5, r5
 802c376:	b217      	sxth	r7, r2
 802c378:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 802c37c:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 802c380:	b209      	sxth	r1, r1
 802c382:	b236      	sxth	r6, r6
 802c384:	45f4      	cmp	ip, lr
 802c386:	8321      	strh	r1, [r4, #24]
 802c388:	8366      	strh	r6, [r4, #26]
 802c38a:	f43f af30 	beq.w	802c1ee <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c38e:	4331      	orrs	r1, r6
 802c390:	d00b      	beq.n	802c3aa <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802c392:	2800      	cmp	r0, #0
 802c394:	db09      	blt.n	802c3aa <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802c396:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c398:	4288      	cmp	r0, r1
 802c39a:	da06      	bge.n	802c3aa <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802c39c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c3a0:	4288      	cmp	r0, r1
 802c3a2:	d33b      	bcc.n	802c41c <_ZN8touchgfx7Outline10renderLineEiiii+0x394>
 802c3a4:	2101      	movs	r1, #1
 802c3a6:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c3aa:	f1aa 0610 	sub.w	r6, sl, #16
 802c3ae:	0076      	lsls	r6, r6, #1
 802c3b0:	fb06 fc03 	mul.w	ip, r6, r3
 802c3b4:	fa0f fc8c 	sxth.w	ip, ip
 802c3b8:	b236      	sxth	r6, r6
 802c3ba:	82e7      	strh	r7, [r4, #22]
 802c3bc:	ea46 010c 	orr.w	r1, r6, ip
 802c3c0:	2700      	movs	r7, #0
 802c3c2:	82a5      	strh	r5, [r4, #20]
 802c3c4:	8327      	strh	r7, [r4, #24]
 802c3c6:	8367      	strh	r7, [r4, #26]
 802c3c8:	9100      	str	r1, [sp, #0]
 802c3ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 802c3cc:	428a      	cmp	r2, r1
 802c3ce:	d046      	beq.n	802c45e <_ZN8touchgfx7Outline10renderLineEiiii+0x3d6>
 802c3d0:	444a      	add	r2, r9
 802c3d2:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802c3d6:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802c3da:	8326      	strh	r6, [r4, #24]
 802c3dc:	fa0f f882 	sxth.w	r8, r2
 802c3e0:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802c3e4:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 802c3e8:	4570      	cmp	r0, lr
 802c3ea:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802c3ee:	f43f aefe 	beq.w	802c1ee <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c3f2:	9800      	ldr	r0, [sp, #0]
 802c3f4:	b160      	cbz	r0, 802c410 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802c3f6:	2900      	cmp	r1, #0
 802c3f8:	db0a      	blt.n	802c410 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802c3fa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802c3fc:	4281      	cmp	r1, r0
 802c3fe:	da07      	bge.n	802c410 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802c400:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c404:	4288      	cmp	r0, r1
 802c406:	d319      	bcc.n	802c43c <_ZN8touchgfx7Outline10renderLineEiiii+0x3b4>
 802c408:	f04f 0101 	mov.w	r1, #1
 802c40c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c410:	82a5      	strh	r5, [r4, #20]
 802c412:	f8a4 8016 	strh.w	r8, [r4, #22]
 802c416:	8327      	strh	r7, [r4, #24]
 802c418:	8367      	strh	r7, [r4, #26]
 802c41a:	e7d6      	b.n	802c3ca <_ZN8touchgfx7Outline10renderLineEiiii+0x342>
 802c41c:	f104 0614 	add.w	r6, r4, #20
 802c420:	ce03      	ldmia	r6!, {r0, r1}
 802c422:	f8d4 c010 	ldr.w	ip, [r4, #16]
 802c426:	f8cc 0000 	str.w	r0, [ip]
 802c42a:	f8cc 1004 	str.w	r1, [ip, #4]
 802c42e:	6921      	ldr	r1, [r4, #16]
 802c430:	3108      	adds	r1, #8
 802c432:	6121      	str	r1, [r4, #16]
 802c434:	68a1      	ldr	r1, [r4, #8]
 802c436:	3101      	adds	r1, #1
 802c438:	60a1      	str	r1, [r4, #8]
 802c43a:	e7b6      	b.n	802c3aa <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802c43c:	f104 0e14 	add.w	lr, r4, #20
 802c440:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802c444:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802c448:	f8cb 0000 	str.w	r0, [fp]
 802c44c:	f8cb 1004 	str.w	r1, [fp, #4]
 802c450:	6921      	ldr	r1, [r4, #16]
 802c452:	3108      	adds	r1, #8
 802c454:	6121      	str	r1, [r4, #16]
 802c456:	68a1      	ldr	r1, [r4, #8]
 802c458:	3101      	adds	r1, #1
 802c45a:	60a1      	str	r1, [r4, #8]
 802c45c:	e7d8      	b.n	802c410 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802c45e:	9a03      	ldr	r2, [sp, #12]
 802c460:	8b61      	ldrh	r1, [r4, #26]
 802c462:	f1a2 0e20 	sub.w	lr, r2, #32
 802c466:	8b22      	ldrh	r2, [r4, #24]
 802c468:	44d6      	add	lr, sl
 802c46a:	4472      	add	r2, lr
 802c46c:	8322      	strh	r2, [r4, #24]
 802c46e:	fb0e 1303 	mla	r3, lr, r3, r1
 802c472:	e687      	b.n	802c184 <_ZN8touchgfx7Outline10renderLineEiiii+0xfc>
 802c474:	080334f7 	.word	0x080334f7
 802c478:	08033578 	.word	0x08033578
 802c47c:	08033528 	.word	0x08033528
 802c480:	f1bb 0f00 	cmp.w	fp, #0
 802c484:	f2c0 8124 	blt.w	802c6d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x648>
 802c488:	2201      	movs	r2, #1
 802c48a:	f1c6 0320 	rsb	r3, r6, #32
 802c48e:	920b      	str	r2, [sp, #44]	; 0x2c
 802c490:	fb0a f303 	mul.w	r3, sl, r3
 802c494:	2220      	movs	r2, #32
 802c496:	fb93 fcfb 	sdiv	ip, r3, fp
 802c49a:	fb0b 331c 	mls	r3, fp, ip, r3
 802c49e:	2b00      	cmp	r3, #0
 802c4a0:	9308      	str	r3, [sp, #32]
 802c4a2:	bfbe      	ittt	lt
 802c4a4:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802c4a8:	445b      	addlt	r3, fp
 802c4aa:	9308      	strlt	r3, [sp, #32]
 802c4ac:	eb0c 0301 	add.w	r3, ip, r1
 802c4b0:	9301      	str	r3, [sp, #4]
 802c4b2:	115b      	asrs	r3, r3, #5
 802c4b4:	9305      	str	r3, [sp, #20]
 802c4b6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802c4ba:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 802c4be:	9202      	str	r2, [sp, #8]
 802c4c0:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 802c4c4:	461f      	mov	r7, r3
 802c4c6:	9b02      	ldr	r3, [sp, #8]
 802c4c8:	42b3      	cmp	r3, r6
 802c4ca:	f040 8117 	bne.w	802c6fc <_ZN8touchgfx7Outline10renderLineEiiii+0x674>
 802c4ce:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802c4d2:	f9bd 3000 	ldrsh.w	r3, [sp]
 802c4d6:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 802c4da:	42b9      	cmp	r1, r7
 802c4dc:	d016      	beq.n	802c50c <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802c4de:	8b60      	ldrh	r0, [r4, #26]
 802c4e0:	8b21      	ldrh	r1, [r4, #24]
 802c4e2:	4301      	orrs	r1, r0
 802c4e4:	d00d      	beq.n	802c502 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802c4e6:	f1b8 0f00 	cmp.w	r8, #0
 802c4ea:	db0a      	blt.n	802c502 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802c4ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c4ee:	4541      	cmp	r1, r8
 802c4f0:	dd07      	ble.n	802c502 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802c4f2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c4f6:	4288      	cmp	r0, r1
 802c4f8:	f0c0 80f3 	bcc.w	802c6e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x65a>
 802c4fc:	2101      	movs	r1, #1
 802c4fe:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c502:	82e3      	strh	r3, [r4, #22]
 802c504:	2300      	movs	r3, #0
 802c506:	82a2      	strh	r2, [r4, #20]
 802c508:	8323      	strh	r3, [r4, #24]
 802c50a:	8363      	strh	r3, [r4, #26]
 802c50c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c50e:	9a00      	ldr	r2, [sp, #0]
 802c510:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802c514:	441a      	add	r2, r3
 802c516:	4691      	mov	r9, r2
 802c518:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802c51c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802c520:	fa0f f589 	sxth.w	r5, r9
 802c524:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802c528:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 802c52c:	4281      	cmp	r1, r0
 802c52e:	d015      	beq.n	802c55c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d4>
 802c530:	8b60      	ldrh	r0, [r4, #26]
 802c532:	8b21      	ldrh	r1, [r4, #24]
 802c534:	4301      	orrs	r1, r0
 802c536:	d00c      	beq.n	802c552 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802c538:	2a00      	cmp	r2, #0
 802c53a:	db0a      	blt.n	802c552 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802c53c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c53e:	428a      	cmp	r2, r1
 802c540:	da07      	bge.n	802c552 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802c542:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802c546:	4291      	cmp	r1, r2
 802c548:	f0c0 81b4 	bcc.w	802c8b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x82c>
 802c54c:	2201      	movs	r2, #1
 802c54e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c552:	82a3      	strh	r3, [r4, #20]
 802c554:	2300      	movs	r3, #0
 802c556:	82e5      	strh	r5, [r4, #22]
 802c558:	8323      	strh	r3, [r4, #24]
 802c55a:	8363      	strh	r3, [r4, #26]
 802c55c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c55e:	454b      	cmp	r3, r9
 802c560:	f000 808a 	beq.w	802c678 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 802c564:	ea4f 134a 	mov.w	r3, sl, lsl #5
 802c568:	fb93 f2fb 	sdiv	r2, r3, fp
 802c56c:	fb0b 3312 	mls	r3, fp, r2, r3
 802c570:	2b00      	cmp	r3, #0
 802c572:	9205      	str	r2, [sp, #20]
 802c574:	9307      	str	r3, [sp, #28]
 802c576:	da04      	bge.n	802c582 <_ZN8touchgfx7Outline10renderLineEiiii+0x4fa>
 802c578:	1e53      	subs	r3, r2, #1
 802c57a:	9305      	str	r3, [sp, #20]
 802c57c:	9b07      	ldr	r3, [sp, #28]
 802c57e:	445b      	add	r3, fp
 802c580:	9307      	str	r3, [sp, #28]
 802c582:	9b08      	ldr	r3, [sp, #32]
 802c584:	eba3 030b 	sub.w	r3, r3, fp
 802c588:	9308      	str	r3, [sp, #32]
 802c58a:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 802c58e:	f1c3 0320 	rsb	r3, r3, #32
 802c592:	930a      	str	r3, [sp, #40]	; 0x28
 802c594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802c596:	9b02      	ldr	r3, [sp, #8]
 802c598:	1a9b      	subs	r3, r3, r2
 802c59a:	9309      	str	r3, [sp, #36]	; 0x24
 802c59c:	f04f 0a00 	mov.w	sl, #0
 802c5a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802c5a4:	189b      	adds	r3, r3, r2
 802c5a6:	9308      	str	r3, [sp, #32]
 802c5a8:	bf5d      	ittte	pl
 802c5aa:	eba3 030b 	subpl.w	r3, r3, fp
 802c5ae:	9308      	strpl	r3, [sp, #32]
 802c5b0:	9b05      	ldrpl	r3, [sp, #20]
 802c5b2:	9b05      	ldrmi	r3, [sp, #20]
 802c5b4:	9902      	ldr	r1, [sp, #8]
 802c5b6:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802c5ba:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802c5be:	bf58      	it	pl
 802c5c0:	3301      	addpl	r3, #1
 802c5c2:	9300      	str	r3, [sp, #0]
 802c5c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 802c5c8:	4413      	add	r3, r2
 802c5ca:	9301      	str	r3, [sp, #4]
 802c5cc:	115b      	asrs	r3, r3, #5
 802c5ce:	9306      	str	r3, [sp, #24]
 802c5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c5d2:	428b      	cmp	r3, r1
 802c5d4:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 802c5d8:	f040 8186 	bne.w	802c8e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x860>
 802c5dc:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 802c5e0:	fa0f f389 	sxth.w	r3, r9
 802c5e4:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 802c5e8:	4541      	cmp	r1, r8
 802c5ea:	d017      	beq.n	802c61c <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802c5ec:	8b60      	ldrh	r0, [r4, #26]
 802c5ee:	8b21      	ldrh	r1, [r4, #24]
 802c5f0:	4301      	orrs	r1, r0
 802c5f2:	d00d      	beq.n	802c610 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802c5f4:	2e00      	cmp	r6, #0
 802c5f6:	db0b      	blt.n	802c610 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802c5f8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c5fa:	42b1      	cmp	r1, r6
 802c5fc:	dd08      	ble.n	802c610 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802c5fe:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c602:	4288      	cmp	r0, r1
 802c604:	f0c0 8163 	bcc.w	802c8ce <_ZN8touchgfx7Outline10renderLineEiiii+0x846>
 802c608:	f04f 0101 	mov.w	r1, #1
 802c60c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c610:	82a2      	strh	r2, [r4, #20]
 802c612:	82e3      	strh	r3, [r4, #22]
 802c614:	f8a4 a018 	strh.w	sl, [r4, #24]
 802c618:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802c61c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c61e:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802c622:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802c626:	4499      	add	r9, r3
 802c628:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802c62c:	fa0f f589 	sxth.w	r5, r9
 802c630:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802c634:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 802c638:	4281      	cmp	r1, r0
 802c63a:	f43f add8 	beq.w	802c1ee <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c63e:	8b60      	ldrh	r0, [r4, #26]
 802c640:	8b21      	ldrh	r1, [r4, #24]
 802c642:	4301      	orrs	r1, r0
 802c644:	d00d      	beq.n	802c662 <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802c646:	2a00      	cmp	r2, #0
 802c648:	db0b      	blt.n	802c662 <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802c64a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c64c:	428a      	cmp	r2, r1
 802c64e:	da08      	bge.n	802c662 <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802c650:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802c654:	4291      	cmp	r1, r2
 802c656:	f0c0 8230 	bcc.w	802caba <_ZN8touchgfx7Outline10renderLineEiiii+0xa32>
 802c65a:	f04f 0201 	mov.w	r2, #1
 802c65e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c662:	82a3      	strh	r3, [r4, #20]
 802c664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c666:	82e5      	strh	r5, [r4, #22]
 802c668:	454b      	cmp	r3, r9
 802c66a:	f8a4 a018 	strh.w	sl, [r4, #24]
 802c66e:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802c672:	f8dd c004 	ldr.w	ip, [sp, #4]
 802c676:	d193      	bne.n	802c5a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x518>
 802c678:	9b02      	ldr	r3, [sp, #8]
 802c67a:	f1c3 0e20 	rsb	lr, r3, #32
 802c67e:	9b04      	ldr	r3, [sp, #16]
 802c680:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802c684:	9b03      	ldr	r3, [sp, #12]
 802c686:	459e      	cmp	lr, r3
 802c688:	f040 8231 	bne.w	802caee <_ZN8touchgfx7Outline10renderLineEiiii+0xa66>
 802c68c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802c690:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802c694:	fa0f f58b 	sxth.w	r5, fp
 802c698:	fa0f f289 	sxth.w	r2, r9
 802c69c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802c6a0:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 802c6a4:	4281      	cmp	r1, r0
 802c6a6:	f43f ae22 	beq.w	802c2ee <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802c6aa:	8b60      	ldrh	r0, [r4, #26]
 802c6ac:	8b21      	ldrh	r1, [r4, #24]
 802c6ae:	4301      	orrs	r1, r0
 802c6b0:	d00c      	beq.n	802c6cc <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802c6b2:	2b00      	cmp	r3, #0
 802c6b4:	db0a      	blt.n	802c6cc <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802c6b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c6b8:	428b      	cmp	r3, r1
 802c6ba:	da07      	bge.n	802c6cc <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802c6bc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802c6c0:	4299      	cmp	r1, r3
 802c6c2:	f0c0 8207 	bcc.w	802cad4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa4c>
 802c6c6:	2301      	movs	r3, #1
 802c6c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802c6cc:	82a5      	strh	r5, [r4, #20]
 802c6ce:	e535      	b.n	802c13c <_ZN8touchgfx7Outline10renderLineEiiii+0xb4>
 802c6d0:	f04f 32ff 	mov.w	r2, #4294967295
 802c6d4:	920b      	str	r2, [sp, #44]	; 0x2c
 802c6d6:	fb0a f306 	mul.w	r3, sl, r6
 802c6da:	f1cb 0b00 	rsb	fp, fp, #0
 802c6de:	2200      	movs	r2, #0
 802c6e0:	e6d9      	b.n	802c496 <_ZN8touchgfx7Outline10renderLineEiiii+0x40e>
 802c6e2:	f104 0514 	add.w	r5, r4, #20
 802c6e6:	cd03      	ldmia	r5!, {r0, r1}
 802c6e8:	6926      	ldr	r6, [r4, #16]
 802c6ea:	6030      	str	r0, [r6, #0]
 802c6ec:	6071      	str	r1, [r6, #4]
 802c6ee:	6921      	ldr	r1, [r4, #16]
 802c6f0:	3108      	adds	r1, #8
 802c6f2:	6121      	str	r1, [r4, #16]
 802c6f4:	68a1      	ldr	r1, [r4, #8]
 802c6f6:	3101      	adds	r1, #1
 802c6f8:	60a1      	str	r1, [r4, #8]
 802c6fa:	e702      	b.n	802c502 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802c6fc:	9b01      	ldr	r3, [sp, #4]
 802c6fe:	8b20      	ldrh	r0, [r4, #24]
 802c700:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802c704:	f003 031f 	and.w	r3, r3, #31
 802c708:	930d      	str	r3, [sp, #52]	; 0x34
 802c70a:	9b02      	ldr	r3, [sp, #8]
 802c70c:	1b9a      	subs	r2, r3, r6
 802c70e:	9b05      	ldr	r3, [sp, #20]
 802c710:	42ab      	cmp	r3, r5
 802c712:	f001 011f 	and.w	r1, r1, #31
 802c716:	d107      	bne.n	802c728 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a0>
 802c718:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c71a:	4419      	add	r1, r3
 802c71c:	4410      	add	r0, r2
 802c71e:	fb02 9201 	mla	r2, r2, r1, r9
 802c722:	8320      	strh	r0, [r4, #24]
 802c724:	8362      	strh	r2, [r4, #26]
 802c726:	e6f1      	b.n	802c50c <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802c728:	f1bc 0f00 	cmp.w	ip, #0
 802c72c:	f2c0 8099 	blt.w	802c862 <_ZN8touchgfx7Outline10renderLineEiiii+0x7da>
 802c730:	f1c1 0320 	rsb	r3, r1, #32
 802c734:	435a      	muls	r2, r3
 802c736:	2301      	movs	r3, #1
 802c738:	9309      	str	r3, [sp, #36]	; 0x24
 802c73a:	2320      	movs	r3, #32
 802c73c:	9307      	str	r3, [sp, #28]
 802c73e:	fb92 fefc 	sdiv	lr, r2, ip
 802c742:	9b07      	ldr	r3, [sp, #28]
 802c744:	fb0c 221e 	mls	r2, ip, lr, r2
 802c748:	2a00      	cmp	r2, #0
 802c74a:	bfb8      	it	lt
 802c74c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802c750:	4419      	add	r1, r3
 802c752:	fb0e 9101 	mla	r1, lr, r1, r9
 802c756:	b20b      	sxth	r3, r1
 802c758:	9909      	ldr	r1, [sp, #36]	; 0x24
 802c75a:	8363      	strh	r3, [r4, #26]
 802c75c:	440d      	add	r5, r1
 802c75e:	f9bd 1000 	ldrsh.w	r1, [sp]
 802c762:	9106      	str	r1, [sp, #24]
 802c764:	fa0f f985 	sxth.w	r9, r5
 802c768:	ea4f 4101 	mov.w	r1, r1, lsl #16
 802c76c:	4470      	add	r0, lr
 802c76e:	910a      	str	r1, [sp, #40]	; 0x28
 802c770:	4449      	add	r1, r9
 802c772:	bfb8      	it	lt
 802c774:	4462      	addlt	r2, ip
 802c776:	b200      	sxth	r0, r0
 802c778:	42b9      	cmp	r1, r7
 802c77a:	8320      	strh	r0, [r4, #24]
 802c77c:	f43f ad37 	beq.w	802c1ee <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c780:	4303      	orrs	r3, r0
 802c782:	d00c      	beq.n	802c79e <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802c784:	f1b8 0f00 	cmp.w	r8, #0
 802c788:	db09      	blt.n	802c79e <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802c78a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802c78c:	4543      	cmp	r3, r8
 802c78e:	dd06      	ble.n	802c79e <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802c790:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802c794:	4299      	cmp	r1, r3
 802c796:	d36c      	bcc.n	802c872 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ea>
 802c798:	2301      	movs	r3, #1
 802c79a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802c79e:	9b06      	ldr	r3, [sp, #24]
 802c7a0:	82e3      	strh	r3, [r4, #22]
 802c7a2:	2300      	movs	r3, #0
 802c7a4:	8323      	strh	r3, [r4, #24]
 802c7a6:	8363      	strh	r3, [r4, #26]
 802c7a8:	9b05      	ldr	r3, [sp, #20]
 802c7aa:	f8a4 9014 	strh.w	r9, [r4, #20]
 802c7ae:	42ab      	cmp	r3, r5
 802c7b0:	4476      	add	r6, lr
 802c7b2:	d04c      	beq.n	802c84e <_ZN8touchgfx7Outline10renderLineEiiii+0x7c6>
 802c7b4:	9b02      	ldr	r3, [sp, #8]
 802c7b6:	1b9b      	subs	r3, r3, r6
 802c7b8:	4473      	add	r3, lr
 802c7ba:	015b      	lsls	r3, r3, #5
 802c7bc:	fb93 f8fc 	sdiv	r8, r3, ip
 802c7c0:	fb0c 3318 	mls	r3, ip, r8, r3
 802c7c4:	2b00      	cmp	r3, #0
 802c7c6:	bfb8      	it	lt
 802c7c8:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802c7cc:	f108 0101 	add.w	r1, r8, #1
 802c7d0:	bfb8      	it	lt
 802c7d2:	4463      	addlt	r3, ip
 802c7d4:	eba2 020c 	sub.w	r2, r2, ip
 802c7d8:	910f      	str	r1, [sp, #60]	; 0x3c
 802c7da:	18d2      	adds	r2, r2, r3
 802c7dc:	bf58      	it	pl
 802c7de:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 802c7e0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802c7e2:	bf48      	it	mi
 802c7e4:	4640      	movmi	r0, r8
 802c7e6:	fa0f fe80 	sxth.w	lr, r0
 802c7ea:	ea4f 1140 	mov.w	r1, r0, lsl #5
 802c7ee:	4406      	add	r6, r0
 802c7f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 802c7f2:	f8a4 e018 	strh.w	lr, [r4, #24]
 802c7f6:	4405      	add	r5, r0
 802c7f8:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802c7fc:	fa0f f985 	sxth.w	r9, r5
 802c800:	4438      	add	r0, r7
 802c802:	444f      	add	r7, r9
 802c804:	bf58      	it	pl
 802c806:	eba2 020c 	subpl.w	r2, r2, ip
 802c80a:	b209      	sxth	r1, r1
 802c80c:	42b8      	cmp	r0, r7
 802c80e:	8361      	strh	r1, [r4, #26]
 802c810:	f43f aced 	beq.w	802c1ee <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c814:	ea5e 0101 	orrs.w	r1, lr, r1
 802c818:	d00e      	beq.n	802c838 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802c81a:	9906      	ldr	r1, [sp, #24]
 802c81c:	2900      	cmp	r1, #0
 802c81e:	db0b      	blt.n	802c838 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802c820:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c822:	9806      	ldr	r0, [sp, #24]
 802c824:	4288      	cmp	r0, r1
 802c826:	da07      	bge.n	802c838 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802c828:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c82c:	4288      	cmp	r0, r1
 802c82e:	d330      	bcc.n	802c892 <_ZN8touchgfx7Outline10renderLineEiiii+0x80a>
 802c830:	f04f 0101 	mov.w	r1, #1
 802c834:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c838:	9906      	ldr	r1, [sp, #24]
 802c83a:	82e1      	strh	r1, [r4, #22]
 802c83c:	f04f 0100 	mov.w	r1, #0
 802c840:	8321      	strh	r1, [r4, #24]
 802c842:	8361      	strh	r1, [r4, #26]
 802c844:	9905      	ldr	r1, [sp, #20]
 802c846:	f8a4 9014 	strh.w	r9, [r4, #20]
 802c84a:	42a9      	cmp	r1, r5
 802c84c:	d1c5      	bne.n	802c7da <_ZN8touchgfx7Outline10renderLineEiiii+0x752>
 802c84e:	9b02      	ldr	r3, [sp, #8]
 802c850:	990d      	ldr	r1, [sp, #52]	; 0x34
 802c852:	1b9e      	subs	r6, r3, r6
 802c854:	9b07      	ldr	r3, [sp, #28]
 802c856:	8326      	strh	r6, [r4, #24]
 802c858:	3120      	adds	r1, #32
 802c85a:	1ac9      	subs	r1, r1, r3
 802c85c:	434e      	muls	r6, r1
 802c85e:	8366      	strh	r6, [r4, #26]
 802c860:	e654      	b.n	802c50c <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802c862:	f04f 33ff 	mov.w	r3, #4294967295
 802c866:	9309      	str	r3, [sp, #36]	; 0x24
 802c868:	434a      	muls	r2, r1
 802c86a:	f1cc 0c00 	rsb	ip, ip, #0
 802c86e:	2300      	movs	r3, #0
 802c870:	e764      	b.n	802c73c <_ZN8touchgfx7Outline10renderLineEiiii+0x6b4>
 802c872:	f104 0314 	add.w	r3, r4, #20
 802c876:	cb03      	ldmia	r3!, {r0, r1}
 802c878:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802c87c:	f8c8 0000 	str.w	r0, [r8]
 802c880:	f8c8 1004 	str.w	r1, [r8, #4]
 802c884:	6923      	ldr	r3, [r4, #16]
 802c886:	3308      	adds	r3, #8
 802c888:	6123      	str	r3, [r4, #16]
 802c88a:	68a3      	ldr	r3, [r4, #8]
 802c88c:	3301      	adds	r3, #1
 802c88e:	60a3      	str	r3, [r4, #8]
 802c890:	e785      	b.n	802c79e <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802c892:	6921      	ldr	r1, [r4, #16]
 802c894:	910e      	str	r1, [sp, #56]	; 0x38
 802c896:	f104 0e14 	add.w	lr, r4, #20
 802c89a:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802c89e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802c8a0:	6038      	str	r0, [r7, #0]
 802c8a2:	6079      	str	r1, [r7, #4]
 802c8a4:	6921      	ldr	r1, [r4, #16]
 802c8a6:	3108      	adds	r1, #8
 802c8a8:	6121      	str	r1, [r4, #16]
 802c8aa:	68a1      	ldr	r1, [r4, #8]
 802c8ac:	3101      	adds	r1, #1
 802c8ae:	4638      	mov	r0, r7
 802c8b0:	60a1      	str	r1, [r4, #8]
 802c8b2:	e7c1      	b.n	802c838 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802c8b4:	f104 0214 	add.w	r2, r4, #20
 802c8b8:	ca03      	ldmia	r2!, {r0, r1}
 802c8ba:	6926      	ldr	r6, [r4, #16]
 802c8bc:	6030      	str	r0, [r6, #0]
 802c8be:	6071      	str	r1, [r6, #4]
 802c8c0:	6922      	ldr	r2, [r4, #16]
 802c8c2:	3208      	adds	r2, #8
 802c8c4:	6122      	str	r2, [r4, #16]
 802c8c6:	68a2      	ldr	r2, [r4, #8]
 802c8c8:	3201      	adds	r2, #1
 802c8ca:	60a2      	str	r2, [r4, #8]
 802c8cc:	e641      	b.n	802c552 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802c8ce:	f104 0514 	add.w	r5, r4, #20
 802c8d2:	cd03      	ldmia	r5!, {r0, r1}
 802c8d4:	6926      	ldr	r6, [r4, #16]
 802c8d6:	6030      	str	r0, [r6, #0]
 802c8d8:	6071      	str	r1, [r6, #4]
 802c8da:	6921      	ldr	r1, [r4, #16]
 802c8dc:	3108      	adds	r1, #8
 802c8de:	6121      	str	r1, [r4, #16]
 802c8e0:	68a1      	ldr	r1, [r4, #8]
 802c8e2:	3101      	adds	r1, #1
 802c8e4:	60a1      	str	r1, [r4, #8]
 802c8e6:	e693      	b.n	802c610 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802c8e8:	9b01      	ldr	r3, [sp, #4]
 802c8ea:	8b20      	ldrh	r0, [r4, #24]
 802c8ec:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 802c8f0:	f003 031f 	and.w	r3, r3, #31
 802c8f4:	9310      	str	r3, [sp, #64]	; 0x40
 802c8f6:	9b06      	ldr	r3, [sp, #24]
 802c8f8:	ea4f 176c 	mov.w	r7, ip, asr #5
 802c8fc:	429f      	cmp	r7, r3
 802c8fe:	f00c 0c1f 	and.w	ip, ip, #31
 802c902:	d10a      	bne.n	802c91a <_ZN8touchgfx7Outline10renderLineEiiii+0x892>
 802c904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c906:	4418      	add	r0, r3
 802c908:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802c90a:	8320      	strh	r0, [r4, #24]
 802c90c:	449c      	add	ip, r3
 802c90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c910:	fb03 ee0c 	mla	lr, r3, ip, lr
 802c914:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802c918:	e680      	b.n	802c61c <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802c91a:	9b00      	ldr	r3, [sp, #0]
 802c91c:	2b00      	cmp	r3, #0
 802c91e:	f2c0 80a2 	blt.w	802ca66 <_ZN8touchgfx7Outline10renderLineEiiii+0x9de>
 802c922:	9909      	ldr	r1, [sp, #36]	; 0x24
 802c924:	f1cc 0320 	rsb	r3, ip, #32
 802c928:	434b      	muls	r3, r1
 802c92a:	2101      	movs	r1, #1
 802c92c:	910e      	str	r1, [sp, #56]	; 0x38
 802c92e:	2120      	movs	r1, #32
 802c930:	9a00      	ldr	r2, [sp, #0]
 802c932:	910d      	str	r1, [sp, #52]	; 0x34
 802c934:	fb93 f5f2 	sdiv	r5, r3, r2
 802c938:	990d      	ldr	r1, [sp, #52]	; 0x34
 802c93a:	fb02 3315 	mls	r3, r2, r5, r3
 802c93e:	2b00      	cmp	r3, #0
 802c940:	bfbc      	itt	lt
 802c942:	f105 35ff 	addlt.w	r5, r5, #4294967295
 802c946:	189b      	addlt	r3, r3, r2
 802c948:	448c      	add	ip, r1
 802c94a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802c94c:	fb05 ec0c 	mla	ip, r5, ip, lr
 802c950:	fa0f f18c 	sxth.w	r1, ip
 802c954:	4417      	add	r7, r2
 802c956:	fa0f fc89 	sxth.w	ip, r9
 802c95a:	ea4f 420c 	mov.w	r2, ip, lsl #16
 802c95e:	fa0f fe87 	sxth.w	lr, r7
 802c962:	4428      	add	r0, r5
 802c964:	920f      	str	r2, [sp, #60]	; 0x3c
 802c966:	4472      	add	r2, lr
 802c968:	b200      	sxth	r0, r0
 802c96a:	4542      	cmp	r2, r8
 802c96c:	8320      	strh	r0, [r4, #24]
 802c96e:	8361      	strh	r1, [r4, #26]
 802c970:	f43f ac3d 	beq.w	802c1ee <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c974:	ea50 0201 	orrs.w	r2, r0, r1
 802c978:	d00c      	beq.n	802c994 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802c97a:	2e00      	cmp	r6, #0
 802c97c:	db0a      	blt.n	802c994 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802c97e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c980:	42b1      	cmp	r1, r6
 802c982:	dd07      	ble.n	802c994 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802c984:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c988:	4288      	cmp	r0, r1
 802c98a:	d377      	bcc.n	802ca7c <_ZN8touchgfx7Outline10renderLineEiiii+0x9f4>
 802c98c:	f04f 0201 	mov.w	r2, #1
 802c990:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802c996:	f8a4 e014 	strh.w	lr, [r4, #20]
 802c99a:	1956      	adds	r6, r2, r5
 802c99c:	9a06      	ldr	r2, [sp, #24]
 802c99e:	f8a4 c016 	strh.w	ip, [r4, #22]
 802c9a2:	42ba      	cmp	r2, r7
 802c9a4:	f8a4 a018 	strh.w	sl, [r4, #24]
 802c9a8:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802c9ac:	d04e      	beq.n	802ca4c <_ZN8touchgfx7Outline10renderLineEiiii+0x9c4>
 802c9ae:	9a02      	ldr	r2, [sp, #8]
 802c9b0:	1b91      	subs	r1, r2, r6
 802c9b2:	440d      	add	r5, r1
 802c9b4:	9a00      	ldr	r2, [sp, #0]
 802c9b6:	016d      	lsls	r5, r5, #5
 802c9b8:	fb95 fef2 	sdiv	lr, r5, r2
 802c9bc:	fb02 551e 	mls	r5, r2, lr, r5
 802c9c0:	2d00      	cmp	r5, #0
 802c9c2:	bfb8      	it	lt
 802c9c4:	18ad      	addlt	r5, r5, r2
 802c9c6:	9a00      	ldr	r2, [sp, #0]
 802c9c8:	bfb8      	it	lt
 802c9ca:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802c9ce:	1a9b      	subs	r3, r3, r2
 802c9d0:	f10e 0201 	add.w	r2, lr, #1
 802c9d4:	9213      	str	r2, [sp, #76]	; 0x4c
 802c9d6:	195b      	adds	r3, r3, r5
 802c9d8:	bf5e      	ittt	pl
 802c9da:	9a00      	ldrpl	r2, [sp, #0]
 802c9dc:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 802c9de:	1a9b      	subpl	r3, r3, r2
 802c9e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802c9e2:	4417      	add	r7, r2
 802c9e4:	bf48      	it	mi
 802c9e6:	4670      	movmi	r0, lr
 802c9e8:	b23a      	sxth	r2, r7
 802c9ea:	fa0f f880 	sxth.w	r8, r0
 802c9ee:	0141      	lsls	r1, r0, #5
 802c9f0:	9211      	str	r2, [sp, #68]	; 0x44
 802c9f2:	4406      	add	r6, r0
 802c9f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802c9f6:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802c9fa:	f8a4 8018 	strh.w	r8, [r4, #24]
 802c9fe:	1882      	adds	r2, r0, r2
 802ca00:	9212      	str	r2, [sp, #72]	; 0x48
 802ca02:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802ca04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802ca06:	4402      	add	r2, r0
 802ca08:	9812      	ldr	r0, [sp, #72]	; 0x48
 802ca0a:	b209      	sxth	r1, r1
 802ca0c:	4290      	cmp	r0, r2
 802ca0e:	8361      	strh	r1, [r4, #26]
 802ca10:	f43f abed 	beq.w	802c1ee <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802ca14:	ea58 0201 	orrs.w	r2, r8, r1
 802ca18:	d00d      	beq.n	802ca36 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802ca1a:	f1bc 0f00 	cmp.w	ip, #0
 802ca1e:	db0a      	blt.n	802ca36 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802ca20:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ca22:	458c      	cmp	ip, r1
 802ca24:	da07      	bge.n	802ca36 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802ca26:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802ca2a:	4288      	cmp	r0, r1
 802ca2c:	d336      	bcc.n	802ca9c <_ZN8touchgfx7Outline10renderLineEiiii+0xa14>
 802ca2e:	f04f 0201 	mov.w	r2, #1
 802ca32:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802ca36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802ca38:	82a2      	strh	r2, [r4, #20]
 802ca3a:	9a06      	ldr	r2, [sp, #24]
 802ca3c:	f8a4 c016 	strh.w	ip, [r4, #22]
 802ca40:	42ba      	cmp	r2, r7
 802ca42:	f8a4 a018 	strh.w	sl, [r4, #24]
 802ca46:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802ca4a:	d1c4      	bne.n	802c9d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x94e>
 802ca4c:	9b02      	ldr	r3, [sp, #8]
 802ca4e:	1b9e      	subs	r6, r3, r6
 802ca50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802ca52:	8326      	strh	r6, [r4, #24]
 802ca54:	f103 0c20 	add.w	ip, r3, #32
 802ca58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ca5a:	ebac 0c03 	sub.w	ip, ip, r3
 802ca5e:	fb06 f60c 	mul.w	r6, r6, ip
 802ca62:	8366      	strh	r6, [r4, #26]
 802ca64:	e5da      	b.n	802c61c <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802ca66:	9a00      	ldr	r2, [sp, #0]
 802ca68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ca6a:	f04f 31ff 	mov.w	r1, #4294967295
 802ca6e:	4252      	negs	r2, r2
 802ca70:	910e      	str	r1, [sp, #56]	; 0x38
 802ca72:	fb03 f30c 	mul.w	r3, r3, ip
 802ca76:	9200      	str	r2, [sp, #0]
 802ca78:	2100      	movs	r1, #0
 802ca7a:	e759      	b.n	802c930 <_ZN8touchgfx7Outline10renderLineEiiii+0x8a8>
 802ca7c:	f104 0614 	add.w	r6, r4, #20
 802ca80:	ce03      	ldmia	r6!, {r0, r1}
 802ca82:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802ca86:	f8c8 0000 	str.w	r0, [r8]
 802ca8a:	f8c8 1004 	str.w	r1, [r8, #4]
 802ca8e:	6921      	ldr	r1, [r4, #16]
 802ca90:	3108      	adds	r1, #8
 802ca92:	6121      	str	r1, [r4, #16]
 802ca94:	68a1      	ldr	r1, [r4, #8]
 802ca96:	3101      	adds	r1, #1
 802ca98:	60a1      	str	r1, [r4, #8]
 802ca9a:	e77b      	b.n	802c994 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802ca9c:	f104 0814 	add.w	r8, r4, #20
 802caa0:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802caa4:	6922      	ldr	r2, [r4, #16]
 802caa6:	9212      	str	r2, [sp, #72]	; 0x48
 802caa8:	6010      	str	r0, [r2, #0]
 802caaa:	6051      	str	r1, [r2, #4]
 802caac:	6921      	ldr	r1, [r4, #16]
 802caae:	3108      	adds	r1, #8
 802cab0:	6121      	str	r1, [r4, #16]
 802cab2:	68a1      	ldr	r1, [r4, #8]
 802cab4:	3101      	adds	r1, #1
 802cab6:	60a1      	str	r1, [r4, #8]
 802cab8:	e7bd      	b.n	802ca36 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802caba:	f104 0214 	add.w	r2, r4, #20
 802cabe:	ca03      	ldmia	r2!, {r0, r1}
 802cac0:	6926      	ldr	r6, [r4, #16]
 802cac2:	6030      	str	r0, [r6, #0]
 802cac4:	6071      	str	r1, [r6, #4]
 802cac6:	6922      	ldr	r2, [r4, #16]
 802cac8:	3208      	adds	r2, #8
 802caca:	6122      	str	r2, [r4, #16]
 802cacc:	68a2      	ldr	r2, [r4, #8]
 802cace:	3201      	adds	r2, #1
 802cad0:	60a2      	str	r2, [r4, #8]
 802cad2:	e5c6      	b.n	802c662 <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802cad4:	f104 0314 	add.w	r3, r4, #20
 802cad8:	cb03      	ldmia	r3!, {r0, r1}
 802cada:	6926      	ldr	r6, [r4, #16]
 802cadc:	6030      	str	r0, [r6, #0]
 802cade:	6071      	str	r1, [r6, #4]
 802cae0:	6923      	ldr	r3, [r4, #16]
 802cae2:	3308      	adds	r3, #8
 802cae4:	6123      	str	r3, [r4, #16]
 802cae6:	68a3      	ldr	r3, [r4, #8]
 802cae8:	3301      	adds	r3, #1
 802caea:	60a3      	str	r3, [r4, #8]
 802caec:	e5ee      	b.n	802c6cc <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802caee:	9b01      	ldr	r3, [sp, #4]
 802caf0:	8b20      	ldrh	r0, [r4, #24]
 802caf2:	8b66      	ldrh	r6, [r4, #26]
 802caf4:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802caf8:	f003 021f 	and.w	r2, r3, #31
 802cafc:	9b04      	ldr	r3, [sp, #16]
 802cafe:	f003 031f 	and.w	r3, r3, #31
 802cb02:	9305      	str	r3, [sp, #20]
 802cb04:	9b03      	ldr	r3, [sp, #12]
 802cb06:	45dc      	cmp	ip, fp
 802cb08:	eba3 050e 	sub.w	r5, r3, lr
 802cb0c:	d108      	bne.n	802cb20 <_ZN8touchgfx7Outline10renderLineEiiii+0xa98>
 802cb0e:	9b05      	ldr	r3, [sp, #20]
 802cb10:	441a      	add	r2, r3
 802cb12:	4428      	add	r0, r5
 802cb14:	fb05 6502 	mla	r5, r5, r2, r6
 802cb18:	8320      	strh	r0, [r4, #24]
 802cb1a:	8365      	strh	r5, [r4, #26]
 802cb1c:	f7ff bbe7 	b.w	802c2ee <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802cb20:	9b04      	ldr	r3, [sp, #16]
 802cb22:	9901      	ldr	r1, [sp, #4]
 802cb24:	1a5b      	subs	r3, r3, r1
 802cb26:	9300      	str	r3, [sp, #0]
 802cb28:	f100 809f 	bmi.w	802cc6a <_ZN8touchgfx7Outline10renderLineEiiii+0xbe2>
 802cb2c:	f1c2 0120 	rsb	r1, r2, #32
 802cb30:	434d      	muls	r5, r1
 802cb32:	2101      	movs	r1, #1
 802cb34:	9102      	str	r1, [sp, #8]
 802cb36:	2120      	movs	r1, #32
 802cb38:	9b00      	ldr	r3, [sp, #0]
 802cb3a:	9101      	str	r1, [sp, #4]
 802cb3c:	fb95 f7f3 	sdiv	r7, r5, r3
 802cb40:	9901      	ldr	r1, [sp, #4]
 802cb42:	fb03 5517 	mls	r5, r3, r7, r5
 802cb46:	2d00      	cmp	r5, #0
 802cb48:	bfb8      	it	lt
 802cb4a:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802cb4e:	440a      	add	r2, r1
 802cb50:	fb07 6202 	mla	r2, r7, r2, r6
 802cb54:	b211      	sxth	r1, r2
 802cb56:	9a02      	ldr	r2, [sp, #8]
 802cb58:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802cb5c:	8361      	strh	r1, [r4, #26]
 802cb5e:	4494      	add	ip, r2
 802cb60:	fa0f f289 	sxth.w	r2, r9
 802cb64:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802cb68:	bfb8      	it	lt
 802cb6a:	18ed      	addlt	r5, r5, r3
 802cb6c:	fa0f f88c 	sxth.w	r8, ip
 802cb70:	0413      	lsls	r3, r2, #16
 802cb72:	4438      	add	r0, r7
 802cb74:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 802cb78:	eb08 0a03 	add.w	sl, r8, r3
 802cb7c:	b200      	sxth	r0, r0
 802cb7e:	45d1      	cmp	r9, sl
 802cb80:	8320      	strh	r0, [r4, #24]
 802cb82:	9304      	str	r3, [sp, #16]
 802cb84:	f43f ab33 	beq.w	802c1ee <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802cb88:	ea50 0301 	orrs.w	r3, r0, r1
 802cb8c:	d00b      	beq.n	802cba6 <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802cb8e:	2e00      	cmp	r6, #0
 802cb90:	db09      	blt.n	802cba6 <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802cb92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802cb94:	428e      	cmp	r6, r1
 802cb96:	da06      	bge.n	802cba6 <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802cb98:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802cb9c:	4288      	cmp	r0, r1
 802cb9e:	d36d      	bcc.n	802cc7c <_ZN8touchgfx7Outline10renderLineEiiii+0xbf4>
 802cba0:	2101      	movs	r1, #1
 802cba2:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802cba6:	2100      	movs	r1, #0
 802cba8:	45e3      	cmp	fp, ip
 802cbaa:	f8a4 8014 	strh.w	r8, [r4, #20]
 802cbae:	82e2      	strh	r2, [r4, #22]
 802cbb0:	8321      	strh	r1, [r4, #24]
 802cbb2:	8361      	strh	r1, [r4, #26]
 802cbb4:	44be      	add	lr, r7
 802cbb6:	d049      	beq.n	802cc4c <_ZN8touchgfx7Outline10renderLineEiiii+0xbc4>
 802cbb8:	9b03      	ldr	r3, [sp, #12]
 802cbba:	eba3 060e 	sub.w	r6, r3, lr
 802cbbe:	443e      	add	r6, r7
 802cbc0:	9b00      	ldr	r3, [sp, #0]
 802cbc2:	0176      	lsls	r6, r6, #5
 802cbc4:	fb96 f7f3 	sdiv	r7, r6, r3
 802cbc8:	fb03 6617 	mls	r6, r3, r7, r6
 802cbcc:	428e      	cmp	r6, r1
 802cbce:	bfb8      	it	lt
 802cbd0:	18f6      	addlt	r6, r6, r3
 802cbd2:	9b00      	ldr	r3, [sp, #0]
 802cbd4:	bfb8      	it	lt
 802cbd6:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802cbda:	1aed      	subs	r5, r5, r3
 802cbdc:	1c7b      	adds	r3, r7, #1
 802cbde:	9307      	str	r3, [sp, #28]
 802cbe0:	f04f 0900 	mov.w	r9, #0
 802cbe4:	19ad      	adds	r5, r5, r6
 802cbe6:	bf5e      	ittt	pl
 802cbe8:	9b00      	ldrpl	r3, [sp, #0]
 802cbea:	9807      	ldrpl	r0, [sp, #28]
 802cbec:	1aed      	subpl	r5, r5, r3
 802cbee:	9b02      	ldr	r3, [sp, #8]
 802cbf0:	bf48      	it	mi
 802cbf2:	4638      	movmi	r0, r7
 802cbf4:	fa0f f880 	sxth.w	r8, r0
 802cbf8:	0141      	lsls	r1, r0, #5
 802cbfa:	449c      	add	ip, r3
 802cbfc:	4486      	add	lr, r0
 802cbfe:	9b04      	ldr	r3, [sp, #16]
 802cc00:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802cc04:	f8a4 8018 	strh.w	r8, [r4, #24]
 802cc08:	fa0f fa8c 	sxth.w	sl, ip
 802cc0c:	4418      	add	r0, r3
 802cc0e:	4453      	add	r3, sl
 802cc10:	b209      	sxth	r1, r1
 802cc12:	4298      	cmp	r0, r3
 802cc14:	8361      	strh	r1, [r4, #26]
 802cc16:	f43f aaea 	beq.w	802c1ee <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802cc1a:	ea58 0301 	orrs.w	r3, r8, r1
 802cc1e:	d00c      	beq.n	802cc3a <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802cc20:	2a00      	cmp	r2, #0
 802cc22:	db0a      	blt.n	802cc3a <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802cc24:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802cc26:	428a      	cmp	r2, r1
 802cc28:	da07      	bge.n	802cc3a <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802cc2a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802cc2e:	4288      	cmp	r0, r1
 802cc30:	d334      	bcc.n	802cc9c <_ZN8touchgfx7Outline10renderLineEiiii+0xc14>
 802cc32:	f04f 0301 	mov.w	r3, #1
 802cc36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802cc3a:	45e3      	cmp	fp, ip
 802cc3c:	f8a4 a014 	strh.w	sl, [r4, #20]
 802cc40:	82e2      	strh	r2, [r4, #22]
 802cc42:	f8a4 9018 	strh.w	r9, [r4, #24]
 802cc46:	f8a4 901a 	strh.w	r9, [r4, #26]
 802cc4a:	d1cb      	bne.n	802cbe4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb5c>
 802cc4c:	9b03      	ldr	r3, [sp, #12]
 802cc4e:	9e05      	ldr	r6, [sp, #20]
 802cc50:	eba3 0e0e 	sub.w	lr, r3, lr
 802cc54:	9b01      	ldr	r3, [sp, #4]
 802cc56:	f8a4 e018 	strh.w	lr, [r4, #24]
 802cc5a:	3620      	adds	r6, #32
 802cc5c:	1af6      	subs	r6, r6, r3
 802cc5e:	fb0e fe06 	mul.w	lr, lr, r6
 802cc62:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802cc66:	f7ff bb42 	b.w	802c2ee <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802cc6a:	9b00      	ldr	r3, [sp, #0]
 802cc6c:	f04f 31ff 	mov.w	r1, #4294967295
 802cc70:	425b      	negs	r3, r3
 802cc72:	9102      	str	r1, [sp, #8]
 802cc74:	4355      	muls	r5, r2
 802cc76:	9300      	str	r3, [sp, #0]
 802cc78:	2100      	movs	r1, #0
 802cc7a:	e75d      	b.n	802cb38 <_ZN8touchgfx7Outline10renderLineEiiii+0xab0>
 802cc7c:	f104 0614 	add.w	r6, r4, #20
 802cc80:	ce03      	ldmia	r6!, {r0, r1}
 802cc82:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802cc86:	f8c9 0000 	str.w	r0, [r9]
 802cc8a:	f8c9 1004 	str.w	r1, [r9, #4]
 802cc8e:	6921      	ldr	r1, [r4, #16]
 802cc90:	3108      	adds	r1, #8
 802cc92:	6121      	str	r1, [r4, #16]
 802cc94:	68a1      	ldr	r1, [r4, #8]
 802cc96:	3101      	adds	r1, #1
 802cc98:	60a1      	str	r1, [r4, #8]
 802cc9a:	e784      	b.n	802cba6 <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802cc9c:	f104 0814 	add.w	r8, r4, #20
 802cca0:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802cca4:	6923      	ldr	r3, [r4, #16]
 802cca6:	9306      	str	r3, [sp, #24]
 802cca8:	6018      	str	r0, [r3, #0]
 802ccaa:	6059      	str	r1, [r3, #4]
 802ccac:	6921      	ldr	r1, [r4, #16]
 802ccae:	3108      	adds	r1, #8
 802ccb0:	6121      	str	r1, [r4, #16]
 802ccb2:	68a1      	ldr	r1, [r4, #8]
 802ccb4:	3101      	adds	r1, #1
 802ccb6:	60a1      	str	r1, [r4, #8]
 802ccb8:	e7bf      	b.n	802cc3a <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802ccba:	bf00      	nop

0802ccbc <_ZN8touchgfx7Outline6lineToEii>:
 802ccbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802ccbe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802ccc0:	079b      	lsls	r3, r3, #30
 802ccc2:	4604      	mov	r4, r0
 802ccc4:	460d      	mov	r5, r1
 802ccc6:	4616      	mov	r6, r2
 802ccc8:	d526      	bpl.n	802cd18 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802ccca:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802ccce:	ea85 0001 	eor.w	r0, r5, r1
 802ccd2:	ea86 0302 	eor.w	r3, r6, r2
 802ccd6:	4303      	orrs	r3, r0
 802ccd8:	d01e      	beq.n	802cd18 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802ccda:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802ccdc:	9600      	str	r6, [sp, #0]
 802ccde:	114b      	asrs	r3, r1, #5
 802cce0:	4283      	cmp	r3, r0
 802cce2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802cce4:	bfb8      	it	lt
 802cce6:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802cce8:	3301      	adds	r3, #1
 802ccea:	4283      	cmp	r3, r0
 802ccec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802ccee:	bfc8      	it	gt
 802ccf0:	6363      	strgt	r3, [r4, #52]	; 0x34
 802ccf2:	116b      	asrs	r3, r5, #5
 802ccf4:	4283      	cmp	r3, r0
 802ccf6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802ccf8:	bfb8      	it	lt
 802ccfa:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802ccfc:	3301      	adds	r3, #1
 802ccfe:	4283      	cmp	r3, r0
 802cd00:	bfc8      	it	gt
 802cd02:	6363      	strgt	r3, [r4, #52]	; 0x34
 802cd04:	4620      	mov	r0, r4
 802cd06:	462b      	mov	r3, r5
 802cd08:	f7ff f9be 	bl	802c088 <_ZN8touchgfx7Outline10renderLineEiiii>
 802cd0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802cd0e:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802cd12:	f043 0301 	orr.w	r3, r3, #1
 802cd16:	63e3      	str	r3, [r4, #60]	; 0x3c
 802cd18:	b002      	add	sp, #8
 802cd1a:	bd70      	pop	{r4, r5, r6, pc}

0802cd1c <_ZN8touchgfx7Outline6moveToEii>:
 802cd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cd1e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802cd20:	4615      	mov	r5, r2
 802cd22:	079a      	lsls	r2, r3, #30
 802cd24:	4604      	mov	r4, r0
 802cd26:	460e      	mov	r6, r1
 802cd28:	d401      	bmi.n	802cd2e <_ZN8touchgfx7Outline6moveToEii+0x12>
 802cd2a:	f7ff f967 	bl	802bffc <_ZN8touchgfx7Outline5resetEv>
 802cd2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802cd30:	07db      	lsls	r3, r3, #31
 802cd32:	d504      	bpl.n	802cd3e <_ZN8touchgfx7Outline6moveToEii+0x22>
 802cd34:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802cd38:	4620      	mov	r0, r4
 802cd3a:	f7ff ffbf 	bl	802ccbc <_ZN8touchgfx7Outline6lineToEii>
 802cd3e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802cd42:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802cd46:	f346 1c4f 	sbfx	ip, r6, #5, #16
 802cd4a:	f345 174f 	sbfx	r7, r5, #5, #16
 802cd4e:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802cd52:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802cd56:	428a      	cmp	r2, r1
 802cd58:	d015      	beq.n	802cd86 <_ZN8touchgfx7Outline6moveToEii+0x6a>
 802cd5a:	8b61      	ldrh	r1, [r4, #26]
 802cd5c:	8b22      	ldrh	r2, [r4, #24]
 802cd5e:	430a      	orrs	r2, r1
 802cd60:	d00b      	beq.n	802cd7a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802cd62:	2b00      	cmp	r3, #0
 802cd64:	db09      	blt.n	802cd7a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802cd66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802cd68:	4293      	cmp	r3, r2
 802cd6a:	da06      	bge.n	802cd7a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802cd6c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802cd70:	429a      	cmp	r2, r3
 802cd72:	d30d      	bcc.n	802cd90 <_ZN8touchgfx7Outline6moveToEii+0x74>
 802cd74:	2301      	movs	r3, #1
 802cd76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802cd7a:	2300      	movs	r3, #0
 802cd7c:	f8a4 c014 	strh.w	ip, [r4, #20]
 802cd80:	82e7      	strh	r7, [r4, #22]
 802cd82:	8323      	strh	r3, [r4, #24]
 802cd84:	8363      	strh	r3, [r4, #26]
 802cd86:	61e6      	str	r6, [r4, #28]
 802cd88:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802cd8c:	62a5      	str	r5, [r4, #40]	; 0x28
 802cd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802cd90:	f104 0314 	add.w	r3, r4, #20
 802cd94:	cb03      	ldmia	r3!, {r0, r1}
 802cd96:	6922      	ldr	r2, [r4, #16]
 802cd98:	6010      	str	r0, [r2, #0]
 802cd9a:	6051      	str	r1, [r2, #4]
 802cd9c:	6923      	ldr	r3, [r4, #16]
 802cd9e:	3308      	adds	r3, #8
 802cda0:	6123      	str	r3, [r4, #16]
 802cda2:	68a3      	ldr	r3, [r4, #8]
 802cda4:	3301      	adds	r3, #1
 802cda6:	60a3      	str	r3, [r4, #8]
 802cda8:	e7e7      	b.n	802cd7a <_ZN8touchgfx7Outline6moveToEii+0x5e>

0802cdaa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802cdaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cdae:	b0d1      	sub	sp, #324	; 0x144
 802cdb0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 802cdb4:	466c      	mov	r4, sp
 802cdb6:	1a0d      	subs	r5, r1, r0
 802cdb8:	2d48      	cmp	r5, #72	; 0x48
 802cdba:	f100 0208 	add.w	r2, r0, #8
 802cdbe:	f340 80bb 	ble.w	802cf38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18e>
 802cdc2:	112d      	asrs	r5, r5, #4
 802cdc4:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802cdc8:	f9b0 8000 	ldrsh.w	r8, [r0]
 802cdcc:	681e      	ldr	r6, [r3, #0]
 802cdce:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802cdd2:	6006      	str	r6, [r0, #0]
 802cdd4:	685e      	ldr	r6, [r3, #4]
 802cdd6:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 802cdda:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802cdde:	6046      	str	r6, [r0, #4]
 802cde0:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 802cde4:	f8a3 e002 	strh.w	lr, [r3, #2]
 802cde8:	f8a3 c004 	strh.w	ip, [r3, #4]
 802cdec:	80df      	strh	r7, [r3, #6]
 802cdee:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802cdf2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802cdf6:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802cdfa:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802cdfe:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802ce02:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802ce06:	4565      	cmp	r5, ip
 802ce08:	f1a1 0308 	sub.w	r3, r1, #8
 802ce0c:	da0f      	bge.n	802ce2e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802ce0e:	681d      	ldr	r5, [r3, #0]
 802ce10:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 802ce14:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802ce18:	6015      	str	r5, [r2, #0]
 802ce1a:	685d      	ldr	r5, [r3, #4]
 802ce1c:	6055      	str	r5, [r2, #4]
 802ce1e:	f821 7c08 	strh.w	r7, [r1, #-8]
 802ce22:	f821 6c06 	strh.w	r6, [r1, #-6]
 802ce26:	f821 ec04 	strh.w	lr, [r1, #-4]
 802ce2a:	f821 cc02 	strh.w	ip, [r1, #-2]
 802ce2e:	f9b0 7000 	ldrsh.w	r7, [r0]
 802ce32:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802ce36:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 802ce3a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802ce3e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802ce42:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802ce46:	45ac      	cmp	ip, r5
 802ce48:	da0d      	bge.n	802ce66 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802ce4a:	6815      	ldr	r5, [r2, #0]
 802ce4c:	6005      	str	r5, [r0, #0]
 802ce4e:	6855      	ldr	r5, [r2, #4]
 802ce50:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802ce54:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802ce58:	8107      	strh	r7, [r0, #8]
 802ce5a:	6045      	str	r5, [r0, #4]
 802ce5c:	8146      	strh	r6, [r0, #10]
 802ce5e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 802ce62:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802ce66:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802ce6a:	f9b0 7000 	ldrsh.w	r7, [r0]
 802ce6e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802ce72:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802ce76:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802ce7a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802ce7e:	4565      	cmp	r5, ip
 802ce80:	da0f      	bge.n	802cea2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802ce82:	681d      	ldr	r5, [r3, #0]
 802ce84:	6005      	str	r5, [r0, #0]
 802ce86:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802ce8a:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802ce8e:	685d      	ldr	r5, [r3, #4]
 802ce90:	6045      	str	r5, [r0, #4]
 802ce92:	f821 7c08 	strh.w	r7, [r1, #-8]
 802ce96:	f821 6c06 	strh.w	r6, [r1, #-6]
 802ce9a:	f821 ec04 	strh.w	lr, [r1, #-4]
 802ce9e:	f821 cc02 	strh.w	ip, [r1, #-2]
 802cea2:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802cea6:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802ceaa:	f9b0 e000 	ldrsh.w	lr, [r0]
 802ceae:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802ceb2:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 802ceb6:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802ceba:	f102 0508 	add.w	r5, r2, #8
 802cebe:	4556      	cmp	r6, sl
 802cec0:	462f      	mov	r7, r5
 802cec2:	db18      	blt.n	802cef6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 802cec4:	3b08      	subs	r3, #8
 802cec6:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802ceca:	f9b3 6000 	ldrsh.w	r6, [r3]
 802cece:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802ced2:	45b2      	cmp	sl, r6
 802ced4:	dbf6      	blt.n	802cec4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802ced6:	42ab      	cmp	r3, r5
 802ced8:	681e      	ldr	r6, [r3, #0]
 802ceda:	d30e      	bcc.n	802cefa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 802cedc:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802cee0:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 802cee4:	602e      	str	r6, [r5, #0]
 802cee6:	685e      	ldr	r6, [r3, #4]
 802cee8:	606e      	str	r6, [r5, #4]
 802ceea:	f8a3 9000 	strh.w	r9, [r3]
 802ceee:	f8a3 8002 	strh.w	r8, [r3, #2]
 802cef2:	809f      	strh	r7, [r3, #4]
 802cef4:	80da      	strh	r2, [r3, #6]
 802cef6:	462a      	mov	r2, r5
 802cef8:	e7d3      	b.n	802cea2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802cefa:	6006      	str	r6, [r0, #0]
 802cefc:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802cf00:	685e      	ldr	r6, [r3, #4]
 802cf02:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802cf06:	6046      	str	r6, [r0, #4]
 802cf08:	80da      	strh	r2, [r3, #6]
 802cf0a:	1b4a      	subs	r2, r1, r5
 802cf0c:	1a1e      	subs	r6, r3, r0
 802cf0e:	10d2      	asrs	r2, r2, #3
 802cf10:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 802cf14:	bfb8      	it	lt
 802cf16:	e9c4 0300 	strdlt	r0, r3, [r4]
 802cf1a:	f8a3 e000 	strh.w	lr, [r3]
 802cf1e:	f8a3 c002 	strh.w	ip, [r3, #2]
 802cf22:	f8a3 8004 	strh.w	r8, [r3, #4]
 802cf26:	bfaa      	itet	ge
 802cf28:	4607      	movge	r7, r0
 802cf2a:	460b      	movlt	r3, r1
 802cf2c:	e9c4 5100 	strdge	r5, r1, [r4]
 802cf30:	4638      	mov	r0, r7
 802cf32:	3408      	adds	r4, #8
 802cf34:	4619      	mov	r1, r3
 802cf36:	e73e      	b.n	802cdb6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802cf38:	4291      	cmp	r1, r2
 802cf3a:	d926      	bls.n	802cf8a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e0>
 802cf3c:	f1a2 0310 	sub.w	r3, r2, #16
 802cf40:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802cf44:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802cf48:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 802cf4c:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802cf50:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802cf54:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802cf58:	42ae      	cmp	r6, r5
 802cf5a:	da14      	bge.n	802cf86 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802cf5c:	461d      	mov	r5, r3
 802cf5e:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 802cf62:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802cf66:	611e      	str	r6, [r3, #16]
 802cf68:	686e      	ldr	r6, [r5, #4]
 802cf6a:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 802cf6e:	f8a3 c008 	strh.w	ip, [r3, #8]
 802cf72:	42a8      	cmp	r0, r5
 802cf74:	615e      	str	r6, [r3, #20]
 802cf76:	815f      	strh	r7, [r3, #10]
 802cf78:	f8a3 800c 	strh.w	r8, [r3, #12]
 802cf7c:	f8a3 e00e 	strh.w	lr, [r3, #14]
 802cf80:	f1a3 0308 	sub.w	r3, r3, #8
 802cf84:	d1dc      	bne.n	802cf40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x196>
 802cf86:	3208      	adds	r2, #8
 802cf88:	e7d6      	b.n	802cf38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18e>
 802cf8a:	466b      	mov	r3, sp
 802cf8c:	429c      	cmp	r4, r3
 802cf8e:	d903      	bls.n	802cf98 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ee>
 802cf90:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802cf94:	3c08      	subs	r4, #8
 802cf96:	e70e      	b.n	802cdb6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802cf98:	b051      	add	sp, #324	; 0x144
 802cf9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802cf9e <_ZN8touchgfx7Outline9sortCellsEv>:
 802cf9e:	6881      	ldr	r1, [r0, #8]
 802cfa0:	b111      	cbz	r1, 802cfa8 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802cfa2:	68c0      	ldr	r0, [r0, #12]
 802cfa4:	f7ff bf01 	b.w	802cdaa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 802cfa8:	4770      	bx	lr

0802cfaa <_ZN8touchgfx7Outline8getCellsEv>:
 802cfaa:	b510      	push	{r4, lr}
 802cfac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802cfae:	07da      	lsls	r2, r3, #31
 802cfb0:	4604      	mov	r4, r0
 802cfb2:	d507      	bpl.n	802cfc4 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 802cfb4:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 802cfb8:	f7ff fe80 	bl	802ccbc <_ZN8touchgfx7Outline6lineToEii>
 802cfbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802cfbe:	f023 0301 	bic.w	r3, r3, #1
 802cfc2:	63e3      	str	r3, [r4, #60]	; 0x3c
 802cfc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802cfc6:	079b      	lsls	r3, r3, #30
 802cfc8:	d51a      	bpl.n	802d000 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802cfca:	8b62      	ldrh	r2, [r4, #26]
 802cfcc:	8b23      	ldrh	r3, [r4, #24]
 802cfce:	4313      	orrs	r3, r2
 802cfd0:	d00d      	beq.n	802cfee <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802cfd2:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802cfd6:	2b00      	cmp	r3, #0
 802cfd8:	db09      	blt.n	802cfee <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802cfda:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802cfdc:	4293      	cmp	r3, r2
 802cfde:	da06      	bge.n	802cfee <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802cfe0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802cfe4:	429a      	cmp	r2, r3
 802cfe6:	d80d      	bhi.n	802d004 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 802cfe8:	2301      	movs	r3, #1
 802cfea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802cfee:	68a0      	ldr	r0, [r4, #8]
 802cff0:	b138      	cbz	r0, 802d002 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802cff2:	4620      	mov	r0, r4
 802cff4:	f7ff ffd3 	bl	802cf9e <_ZN8touchgfx7Outline9sortCellsEv>
 802cff8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802cffa:	f023 0302 	bic.w	r3, r3, #2
 802cffe:	63e3      	str	r3, [r4, #60]	; 0x3c
 802d000:	68e0      	ldr	r0, [r4, #12]
 802d002:	bd10      	pop	{r4, pc}
 802d004:	f104 0314 	add.w	r3, r4, #20
 802d008:	cb03      	ldmia	r3!, {r0, r1}
 802d00a:	6922      	ldr	r2, [r4, #16]
 802d00c:	6010      	str	r0, [r2, #0]
 802d00e:	6051      	str	r1, [r2, #4]
 802d010:	6923      	ldr	r3, [r4, #16]
 802d012:	3308      	adds	r3, #8
 802d014:	6123      	str	r3, [r4, #16]
 802d016:	68a3      	ldr	r3, [r4, #8]
 802d018:	3301      	adds	r3, #1
 802d01a:	60a3      	str	r3, [r4, #8]
 802d01c:	e7e7      	b.n	802cfee <_ZN8touchgfx7Outline8getCellsEv+0x44>
	...

0802d020 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 802d020:	b538      	push	{r3, r4, r5, lr}
 802d022:	4c2b      	ldr	r4, [pc, #172]	; (802d0d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 802d024:	4b2b      	ldr	r3, [pc, #172]	; (802d0d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 802d026:	6821      	ldr	r1, [r4, #0]
 802d028:	681a      	ldr	r2, [r3, #0]
 802d02a:	4d2b      	ldr	r5, [pc, #172]	; (802d0d8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 802d02c:	4281      	cmp	r1, r0
 802d02e:	492b      	ldr	r1, [pc, #172]	; (802d0dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 802d030:	d108      	bne.n	802d044 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 802d032:	682b      	ldr	r3, [r5, #0]
 802d034:	4293      	cmp	r3, r2
 802d036:	d105      	bne.n	802d044 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 802d038:	6808      	ldr	r0, [r1, #0]
 802d03a:	280f      	cmp	r0, #15
 802d03c:	bf94      	ite	ls
 802d03e:	2000      	movls	r0, #0
 802d040:	2001      	movhi	r0, #1
 802d042:	bd38      	pop	{r3, r4, r5, pc}
 802d044:	4b26      	ldr	r3, [pc, #152]	; (802d0e0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 802d046:	6020      	str	r0, [r4, #0]
 802d048:	681b      	ldr	r3, [r3, #0]
 802d04a:	602a      	str	r2, [r5, #0]
 802d04c:	4298      	cmp	r0, r3
 802d04e:	d905      	bls.n	802d05c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 802d050:	4b24      	ldr	r3, [pc, #144]	; (802d0e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802d052:	4a25      	ldr	r2, [pc, #148]	; (802d0e8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802d054:	2137      	movs	r1, #55	; 0x37
 802d056:	4825      	ldr	r0, [pc, #148]	; (802d0ec <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 802d058:	f000 ff32 	bl	802dec0 <__assert_func>
 802d05c:	f010 0403 	ands.w	r4, r0, #3
 802d060:	bf1f      	itttt	ne
 802d062:	f1c4 0504 	rsbne	r5, r4, #4
 802d066:	3b04      	subne	r3, #4
 802d068:	1952      	addne	r2, r2, r5
 802d06a:	191b      	addne	r3, r3, r4
 802d06c:	4402      	add	r2, r0
 802d06e:	1a1b      	subs	r3, r3, r0
 802d070:	3001      	adds	r0, #1
 802d072:	f020 0401 	bic.w	r4, r0, #1
 802d076:	4d1e      	ldr	r5, [pc, #120]	; (802d0f0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 802d078:	42a3      	cmp	r3, r4
 802d07a:	602a      	str	r2, [r5, #0]
 802d07c:	d203      	bcs.n	802d086 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 802d07e:	4b19      	ldr	r3, [pc, #100]	; (802d0e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802d080:	4a19      	ldr	r2, [pc, #100]	; (802d0e8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802d082:	214a      	movs	r1, #74	; 0x4a
 802d084:	e7e7      	b.n	802d056 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802d086:	f010 0002 	ands.w	r0, r0, #2
 802d08a:	bf1f      	itttt	ne
 802d08c:	f1c0 0504 	rsbne	r5, r0, #4
 802d090:	1952      	addne	r2, r2, r5
 802d092:	1f05      	subne	r5, r0, #4
 802d094:	195b      	addne	r3, r3, r5
 802d096:	1b1b      	subs	r3, r3, r4
 802d098:	4d16      	ldr	r5, [pc, #88]	; (802d0f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 802d09a:	4422      	add	r2, r4
 802d09c:	429c      	cmp	r4, r3
 802d09e:	602a      	str	r2, [r5, #0]
 802d0a0:	d903      	bls.n	802d0aa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 802d0a2:	4b10      	ldr	r3, [pc, #64]	; (802d0e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802d0a4:	4a10      	ldr	r2, [pc, #64]	; (802d0e8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802d0a6:	215d      	movs	r1, #93	; 0x5d
 802d0a8:	e7d5      	b.n	802d056 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802d0aa:	b120      	cbz	r0, 802d0b6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 802d0ac:	f1c0 0504 	rsb	r5, r0, #4
 802d0b0:	3804      	subs	r0, #4
 802d0b2:	442a      	add	r2, r5
 802d0b4:	4403      	add	r3, r0
 802d0b6:	1b1b      	subs	r3, r3, r4
 802d0b8:	480f      	ldr	r0, [pc, #60]	; (802d0f8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 802d0ba:	600b      	str	r3, [r1, #0]
 802d0bc:	4422      	add	r2, r4
 802d0be:	2b0f      	cmp	r3, #15
 802d0c0:	6002      	str	r2, [r0, #0]
 802d0c2:	d803      	bhi.n	802d0cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 802d0c4:	4b0d      	ldr	r3, [pc, #52]	; (802d0fc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 802d0c6:	4a08      	ldr	r2, [pc, #32]	; (802d0e8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802d0c8:	2170      	movs	r1, #112	; 0x70
 802d0ca:	e7c4      	b.n	802d056 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802d0cc:	2001      	movs	r0, #1
 802d0ce:	e7b8      	b.n	802d042 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 802d0d0:	20009880 	.word	0x20009880
 802d0d4:	20009878 	.word	0x20009878
 802d0d8:	20009888 	.word	0x20009888
 802d0dc:	20009890 	.word	0x20009890
 802d0e0:	2000988c 	.word	0x2000988c
 802d0e4:	080335a8 	.word	0x080335a8
 802d0e8:	08033670 	.word	0x08033670
 802d0ec:	080335e1 	.word	0x080335e1
 802d0f0:	20009894 	.word	0x20009894
 802d0f4:	20009884 	.word	0x20009884
 802d0f8:	2000987c 	.word	0x2000987c
 802d0fc:	0803362b 	.word	0x0803362b

0802d100 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 802d100:	4b04      	ldr	r3, [pc, #16]	; (802d114 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 802d102:	6818      	ldr	r0, [r3, #0]
 802d104:	b120      	cbz	r0, 802d110 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 802d106:	4b04      	ldr	r3, [pc, #16]	; (802d118 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 802d108:	6818      	ldr	r0, [r3, #0]
 802d10a:	3000      	adds	r0, #0
 802d10c:	bf18      	it	ne
 802d10e:	2001      	movne	r0, #1
 802d110:	4770      	bx	lr
 802d112:	bf00      	nop
 802d114:	20009878 	.word	0x20009878
 802d118:	2000988c 	.word	0x2000988c

0802d11c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 802d11c:	4b01      	ldr	r3, [pc, #4]	; (802d124 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 802d11e:	6818      	ldr	r0, [r3, #0]
 802d120:	4770      	bx	lr
 802d122:	bf00      	nop
 802d124:	20009880 	.word	0x20009880

0802d128 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 802d128:	4b01      	ldr	r3, [pc, #4]	; (802d130 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 802d12a:	6818      	ldr	r0, [r3, #0]
 802d12c:	4770      	bx	lr
 802d12e:	bf00      	nop
 802d130:	20009888 	.word	0x20009888

0802d134 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 802d134:	4b01      	ldr	r3, [pc, #4]	; (802d13c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 802d136:	6818      	ldr	r0, [r3, #0]
 802d138:	4770      	bx	lr
 802d13a:	bf00      	nop
 802d13c:	20009894 	.word	0x20009894

0802d140 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 802d140:	4b01      	ldr	r3, [pc, #4]	; (802d148 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 802d142:	6818      	ldr	r0, [r3, #0]
 802d144:	4770      	bx	lr
 802d146:	bf00      	nop
 802d148:	20009884 	.word	0x20009884

0802d14c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 802d14c:	4b01      	ldr	r3, [pc, #4]	; (802d154 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 802d14e:	6818      	ldr	r0, [r3, #0]
 802d150:	4770      	bx	lr
 802d152:	bf00      	nop
 802d154:	2000987c 	.word	0x2000987c

0802d158 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 802d158:	4b01      	ldr	r3, [pc, #4]	; (802d160 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 802d15a:	6818      	ldr	r0, [r3, #0]
 802d15c:	4770      	bx	lr
 802d15e:	bf00      	nop
 802d160:	20009890 	.word	0x20009890

0802d164 <_ZN8touchgfx8ScanlineD1Ev>:
 802d164:	4770      	bx	lr

0802d166 <_ZN8touchgfx8ScanlineD0Ev>:
 802d166:	b510      	push	{r4, lr}
 802d168:	2124      	movs	r1, #36	; 0x24
 802d16a:	4604      	mov	r4, r0
 802d16c:	f000 f889 	bl	802d282 <_ZdlPvj>
 802d170:	4620      	mov	r0, r4
 802d172:	bd10      	pop	{r4, pc}

0802d174 <_ZN8touchgfx8Scanline5resetEv>:
 802d174:	b510      	push	{r4, lr}
 802d176:	4604      	mov	r4, r0
 802d178:	f7ff ffd6 	bl	802d128 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802d17c:	61a0      	str	r0, [r4, #24]
 802d17e:	f7ff ffd9 	bl	802d134 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802d182:	61e0      	str	r0, [r4, #28]
 802d184:	f7ff ffdc 	bl	802d140 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802d188:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802d18c:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802d190:	69e3      	ldr	r3, [r4, #28]
 802d192:	6123      	str	r3, [r4, #16]
 802d194:	2300      	movs	r3, #0
 802d196:	6220      	str	r0, [r4, #32]
 802d198:	6160      	str	r0, [r4, #20]
 802d19a:	60e3      	str	r3, [r4, #12]
 802d19c:	bd10      	pop	{r4, pc}
	...

0802d1a0 <_ZN8touchgfx8ScanlineC1Ev>:
 802d1a0:	b510      	push	{r4, lr}
 802d1a2:	4b09      	ldr	r3, [pc, #36]	; (802d1c8 <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 802d1a4:	6003      	str	r3, [r0, #0]
 802d1a6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802d1aa:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802d1ae:	2300      	movs	r3, #0
 802d1b0:	4604      	mov	r4, r0
 802d1b2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802d1b6:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802d1ba:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802d1be:	f7ff ffd9 	bl	802d174 <_ZN8touchgfx8Scanline5resetEv>
 802d1c2:	4620      	mov	r0, r4
 802d1c4:	bd10      	pop	{r4, pc}
 802d1c6:	bf00      	nop
 802d1c8:	080336c4 	.word	0x080336c4

0802d1cc <_ZN8touchgfx8Scanline7addSpanEiijj>:
 802d1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d1d0:	1e0c      	subs	r4, r1, #0
 802d1d2:	4605      	mov	r5, r0
 802d1d4:	4617      	mov	r7, r2
 802d1d6:	461e      	mov	r6, r3
 802d1d8:	da03      	bge.n	802d1e2 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802d1da:	4426      	add	r6, r4
 802d1dc:	2e01      	cmp	r6, #1
 802d1de:	d421      	bmi.n	802d224 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802d1e0:	2400      	movs	r4, #0
 802d1e2:	f7ff ff9b 	bl	802d11c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802d1e6:	42a0      	cmp	r0, r4
 802d1e8:	dd1c      	ble.n	802d224 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802d1ea:	f7ff ff97 	bl	802d11c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802d1ee:	eb04 0806 	add.w	r8, r4, r6
 802d1f2:	4580      	cmp	r8, r0
 802d1f4:	d902      	bls.n	802d1fc <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802d1f6:	f7ff ff91 	bl	802d11c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802d1fa:	1b06      	subs	r6, r0, r4
 802d1fc:	69a8      	ldr	r0, [r5, #24]
 802d1fe:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802d202:	4632      	mov	r2, r6
 802d204:	4420      	add	r0, r4
 802d206:	f7f0 f83d 	bl	801d284 <_ZN8touchgfx6memsetEPvhm>
 802d20a:	686b      	ldr	r3, [r5, #4]
 802d20c:	3301      	adds	r3, #1
 802d20e:	42a3      	cmp	r3, r4
 802d210:	b2b2      	uxth	r2, r6
 802d212:	696b      	ldr	r3, [r5, #20]
 802d214:	d108      	bne.n	802d228 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802d216:	8819      	ldrh	r1, [r3, #0]
 802d218:	440a      	add	r2, r1
 802d21a:	801a      	strh	r2, [r3, #0]
 802d21c:	3c01      	subs	r4, #1
 802d21e:	4434      	add	r4, r6
 802d220:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802d224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d228:	1c99      	adds	r1, r3, #2
 802d22a:	6169      	str	r1, [r5, #20]
 802d22c:	805a      	strh	r2, [r3, #2]
 802d22e:	692b      	ldr	r3, [r5, #16]
 802d230:	1c9a      	adds	r2, r3, #2
 802d232:	612a      	str	r2, [r5, #16]
 802d234:	805c      	strh	r4, [r3, #2]
 802d236:	68eb      	ldr	r3, [r5, #12]
 802d238:	3301      	adds	r3, #1
 802d23a:	60eb      	str	r3, [r5, #12]
 802d23c:	e7ee      	b.n	802d21c <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802d23e <_ZN8touchgfx15RenderingBufferD1Ev>:
 802d23e:	4770      	bx	lr

0802d240 <_ZN8touchgfx15RenderingBufferD0Ev>:
 802d240:	b510      	push	{r4, lr}
 802d242:	2118      	movs	r1, #24
 802d244:	4604      	mov	r4, r0
 802d246:	f000 f81c 	bl	802d282 <_ZdlPvj>
 802d24a:	4620      	mov	r0, r4
 802d24c:	bd10      	pop	{r4, pc}
	...

0802d250 <_ZN8touchgfx15RenderingBufferC1Ev>:
 802d250:	4a04      	ldr	r2, [pc, #16]	; (802d264 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 802d252:	6002      	str	r2, [r0, #0]
 802d254:	2200      	movs	r2, #0
 802d256:	6042      	str	r2, [r0, #4]
 802d258:	7202      	strb	r2, [r0, #8]
 802d25a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 802d25e:	6142      	str	r2, [r0, #20]
 802d260:	4770      	bx	lr
 802d262:	bf00      	nop
 802d264:	080336d4 	.word	0x080336d4

0802d268 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802d268:	60c3      	str	r3, [r0, #12]
 802d26a:	9b00      	ldr	r3, [sp, #0]
 802d26c:	6103      	str	r3, [r0, #16]
 802d26e:	9b01      	ldr	r3, [sp, #4]
 802d270:	6041      	str	r1, [r0, #4]
 802d272:	7202      	strb	r2, [r0, #8]
 802d274:	6143      	str	r3, [r0, #20]
 802d276:	4770      	bx	lr

0802d278 <__aeabi_atexit>:
 802d278:	460b      	mov	r3, r1
 802d27a:	4601      	mov	r1, r0
 802d27c:	4618      	mov	r0, r3
 802d27e:	f000 be4b 	b.w	802df18 <__cxa_atexit>

0802d282 <_ZdlPvj>:
 802d282:	f000 b812 	b.w	802d2aa <_ZdlPv>

0802d286 <__cxa_guard_acquire>:
 802d286:	6803      	ldr	r3, [r0, #0]
 802d288:	07db      	lsls	r3, r3, #31
 802d28a:	d406      	bmi.n	802d29a <__cxa_guard_acquire+0x14>
 802d28c:	7843      	ldrb	r3, [r0, #1]
 802d28e:	b103      	cbz	r3, 802d292 <__cxa_guard_acquire+0xc>
 802d290:	deff      	udf	#255	; 0xff
 802d292:	2301      	movs	r3, #1
 802d294:	7043      	strb	r3, [r0, #1]
 802d296:	4618      	mov	r0, r3
 802d298:	4770      	bx	lr
 802d29a:	2000      	movs	r0, #0
 802d29c:	4770      	bx	lr

0802d29e <__cxa_guard_release>:
 802d29e:	2301      	movs	r3, #1
 802d2a0:	6003      	str	r3, [r0, #0]
 802d2a2:	4770      	bx	lr

0802d2a4 <__cxa_pure_virtual>:
 802d2a4:	b508      	push	{r3, lr}
 802d2a6:	f000 f80f 	bl	802d2c8 <_ZSt9terminatev>

0802d2aa <_ZdlPv>:
 802d2aa:	f000 bf81 	b.w	802e1b0 <free>

0802d2ae <_ZN10__cxxabiv111__terminateEPFvvE>:
 802d2ae:	b508      	push	{r3, lr}
 802d2b0:	4780      	blx	r0
 802d2b2:	f000 fdfd 	bl	802deb0 <abort>
	...

0802d2b8 <_ZSt13get_terminatev>:
 802d2b8:	4b02      	ldr	r3, [pc, #8]	; (802d2c4 <_ZSt13get_terminatev+0xc>)
 802d2ba:	6818      	ldr	r0, [r3, #0]
 802d2bc:	f3bf 8f5b 	dmb	ish
 802d2c0:	4770      	bx	lr
 802d2c2:	bf00      	nop
 802d2c4:	20000094 	.word	0x20000094

0802d2c8 <_ZSt9terminatev>:
 802d2c8:	b508      	push	{r3, lr}
 802d2ca:	f7ff fff5 	bl	802d2b8 <_ZSt13get_terminatev>
 802d2ce:	f7ff ffee 	bl	802d2ae <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0802d2d4 <ceilf>:
 802d2d4:	ee10 3a10 	vmov	r3, s0
 802d2d8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802d2dc:	3a7f      	subs	r2, #127	; 0x7f
 802d2de:	2a16      	cmp	r2, #22
 802d2e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802d2e4:	dc2a      	bgt.n	802d33c <ceilf+0x68>
 802d2e6:	2a00      	cmp	r2, #0
 802d2e8:	da11      	bge.n	802d30e <ceilf+0x3a>
 802d2ea:	eddf 7a19 	vldr	s15, [pc, #100]	; 802d350 <ceilf+0x7c>
 802d2ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d2f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d2fa:	dd05      	ble.n	802d308 <ceilf+0x34>
 802d2fc:	2b00      	cmp	r3, #0
 802d2fe:	db23      	blt.n	802d348 <ceilf+0x74>
 802d300:	2900      	cmp	r1, #0
 802d302:	bf18      	it	ne
 802d304:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 802d308:	ee00 3a10 	vmov	s0, r3
 802d30c:	4770      	bx	lr
 802d30e:	4911      	ldr	r1, [pc, #68]	; (802d354 <ceilf+0x80>)
 802d310:	4111      	asrs	r1, r2
 802d312:	420b      	tst	r3, r1
 802d314:	d0fa      	beq.n	802d30c <ceilf+0x38>
 802d316:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802d350 <ceilf+0x7c>
 802d31a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d31e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d326:	ddef      	ble.n	802d308 <ceilf+0x34>
 802d328:	2b00      	cmp	r3, #0
 802d32a:	bfc2      	ittt	gt
 802d32c:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 802d330:	fa40 f202 	asrgt.w	r2, r0, r2
 802d334:	189b      	addgt	r3, r3, r2
 802d336:	ea23 0301 	bic.w	r3, r3, r1
 802d33a:	e7e5      	b.n	802d308 <ceilf+0x34>
 802d33c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802d340:	d3e4      	bcc.n	802d30c <ceilf+0x38>
 802d342:	ee30 0a00 	vadd.f32	s0, s0, s0
 802d346:	4770      	bx	lr
 802d348:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802d34c:	e7dc      	b.n	802d308 <ceilf+0x34>
 802d34e:	bf00      	nop
 802d350:	7149f2ca 	.word	0x7149f2ca
 802d354:	007fffff 	.word	0x007fffff

0802d358 <cosf>:
 802d358:	ee10 3a10 	vmov	r3, s0
 802d35c:	b507      	push	{r0, r1, r2, lr}
 802d35e:	4a1c      	ldr	r2, [pc, #112]	; (802d3d0 <cosf+0x78>)
 802d360:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802d364:	4293      	cmp	r3, r2
 802d366:	dc04      	bgt.n	802d372 <cosf+0x1a>
 802d368:	eddf 0a1a 	vldr	s1, [pc, #104]	; 802d3d4 <cosf+0x7c>
 802d36c:	f000 f9f4 	bl	802d758 <__kernel_cosf>
 802d370:	e004      	b.n	802d37c <cosf+0x24>
 802d372:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802d376:	db04      	blt.n	802d382 <cosf+0x2a>
 802d378:	ee30 0a40 	vsub.f32	s0, s0, s0
 802d37c:	b003      	add	sp, #12
 802d37e:	f85d fb04 	ldr.w	pc, [sp], #4
 802d382:	4668      	mov	r0, sp
 802d384:	f000 f8ac 	bl	802d4e0 <__ieee754_rem_pio2f>
 802d388:	f000 0003 	and.w	r0, r0, #3
 802d38c:	2801      	cmp	r0, #1
 802d38e:	d007      	beq.n	802d3a0 <cosf+0x48>
 802d390:	2802      	cmp	r0, #2
 802d392:	d00e      	beq.n	802d3b2 <cosf+0x5a>
 802d394:	b9a0      	cbnz	r0, 802d3c0 <cosf+0x68>
 802d396:	eddd 0a01 	vldr	s1, [sp, #4]
 802d39a:	ed9d 0a00 	vldr	s0, [sp]
 802d39e:	e7e5      	b.n	802d36c <cosf+0x14>
 802d3a0:	eddd 0a01 	vldr	s1, [sp, #4]
 802d3a4:	ed9d 0a00 	vldr	s0, [sp]
 802d3a8:	f000 fcc0 	bl	802dd2c <__kernel_sinf>
 802d3ac:	eeb1 0a40 	vneg.f32	s0, s0
 802d3b0:	e7e4      	b.n	802d37c <cosf+0x24>
 802d3b2:	eddd 0a01 	vldr	s1, [sp, #4]
 802d3b6:	ed9d 0a00 	vldr	s0, [sp]
 802d3ba:	f000 f9cd 	bl	802d758 <__kernel_cosf>
 802d3be:	e7f5      	b.n	802d3ac <cosf+0x54>
 802d3c0:	eddd 0a01 	vldr	s1, [sp, #4]
 802d3c4:	ed9d 0a00 	vldr	s0, [sp]
 802d3c8:	2001      	movs	r0, #1
 802d3ca:	f000 fcaf 	bl	802dd2c <__kernel_sinf>
 802d3ce:	e7d5      	b.n	802d37c <cosf+0x24>
 802d3d0:	3f490fd8 	.word	0x3f490fd8
 802d3d4:	00000000 	.word	0x00000000

0802d3d8 <floorf>:
 802d3d8:	ee10 3a10 	vmov	r3, s0
 802d3dc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802d3e0:	3a7f      	subs	r2, #127	; 0x7f
 802d3e2:	2a16      	cmp	r2, #22
 802d3e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802d3e8:	dc2a      	bgt.n	802d440 <floorf+0x68>
 802d3ea:	2a00      	cmp	r2, #0
 802d3ec:	da11      	bge.n	802d412 <floorf+0x3a>
 802d3ee:	eddf 7a18 	vldr	s15, [pc, #96]	; 802d450 <floorf+0x78>
 802d3f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d3f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d3fe:	dd05      	ble.n	802d40c <floorf+0x34>
 802d400:	2b00      	cmp	r3, #0
 802d402:	da23      	bge.n	802d44c <floorf+0x74>
 802d404:	4a13      	ldr	r2, [pc, #76]	; (802d454 <floorf+0x7c>)
 802d406:	2900      	cmp	r1, #0
 802d408:	bf18      	it	ne
 802d40a:	4613      	movne	r3, r2
 802d40c:	ee00 3a10 	vmov	s0, r3
 802d410:	4770      	bx	lr
 802d412:	4911      	ldr	r1, [pc, #68]	; (802d458 <floorf+0x80>)
 802d414:	4111      	asrs	r1, r2
 802d416:	420b      	tst	r3, r1
 802d418:	d0fa      	beq.n	802d410 <floorf+0x38>
 802d41a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802d450 <floorf+0x78>
 802d41e:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d422:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d42a:	ddef      	ble.n	802d40c <floorf+0x34>
 802d42c:	2b00      	cmp	r3, #0
 802d42e:	bfbe      	ittt	lt
 802d430:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802d434:	fa40 f202 	asrlt.w	r2, r0, r2
 802d438:	189b      	addlt	r3, r3, r2
 802d43a:	ea23 0301 	bic.w	r3, r3, r1
 802d43e:	e7e5      	b.n	802d40c <floorf+0x34>
 802d440:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802d444:	d3e4      	bcc.n	802d410 <floorf+0x38>
 802d446:	ee30 0a00 	vadd.f32	s0, s0, s0
 802d44a:	4770      	bx	lr
 802d44c:	2300      	movs	r3, #0
 802d44e:	e7dd      	b.n	802d40c <floorf+0x34>
 802d450:	7149f2ca 	.word	0x7149f2ca
 802d454:	bf800000 	.word	0xbf800000
 802d458:	007fffff 	.word	0x007fffff

0802d45c <sinf>:
 802d45c:	ee10 3a10 	vmov	r3, s0
 802d460:	b507      	push	{r0, r1, r2, lr}
 802d462:	4a1d      	ldr	r2, [pc, #116]	; (802d4d8 <sinf+0x7c>)
 802d464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802d468:	4293      	cmp	r3, r2
 802d46a:	dc05      	bgt.n	802d478 <sinf+0x1c>
 802d46c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 802d4dc <sinf+0x80>
 802d470:	2000      	movs	r0, #0
 802d472:	f000 fc5b 	bl	802dd2c <__kernel_sinf>
 802d476:	e004      	b.n	802d482 <sinf+0x26>
 802d478:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802d47c:	db04      	blt.n	802d488 <sinf+0x2c>
 802d47e:	ee30 0a40 	vsub.f32	s0, s0, s0
 802d482:	b003      	add	sp, #12
 802d484:	f85d fb04 	ldr.w	pc, [sp], #4
 802d488:	4668      	mov	r0, sp
 802d48a:	f000 f829 	bl	802d4e0 <__ieee754_rem_pio2f>
 802d48e:	f000 0003 	and.w	r0, r0, #3
 802d492:	2801      	cmp	r0, #1
 802d494:	d008      	beq.n	802d4a8 <sinf+0x4c>
 802d496:	2802      	cmp	r0, #2
 802d498:	d00d      	beq.n	802d4b6 <sinf+0x5a>
 802d49a:	b9b0      	cbnz	r0, 802d4ca <sinf+0x6e>
 802d49c:	eddd 0a01 	vldr	s1, [sp, #4]
 802d4a0:	ed9d 0a00 	vldr	s0, [sp]
 802d4a4:	2001      	movs	r0, #1
 802d4a6:	e7e4      	b.n	802d472 <sinf+0x16>
 802d4a8:	eddd 0a01 	vldr	s1, [sp, #4]
 802d4ac:	ed9d 0a00 	vldr	s0, [sp]
 802d4b0:	f000 f952 	bl	802d758 <__kernel_cosf>
 802d4b4:	e7e5      	b.n	802d482 <sinf+0x26>
 802d4b6:	eddd 0a01 	vldr	s1, [sp, #4]
 802d4ba:	ed9d 0a00 	vldr	s0, [sp]
 802d4be:	2001      	movs	r0, #1
 802d4c0:	f000 fc34 	bl	802dd2c <__kernel_sinf>
 802d4c4:	eeb1 0a40 	vneg.f32	s0, s0
 802d4c8:	e7db      	b.n	802d482 <sinf+0x26>
 802d4ca:	eddd 0a01 	vldr	s1, [sp, #4]
 802d4ce:	ed9d 0a00 	vldr	s0, [sp]
 802d4d2:	f000 f941 	bl	802d758 <__kernel_cosf>
 802d4d6:	e7f5      	b.n	802d4c4 <sinf+0x68>
 802d4d8:	3f490fd8 	.word	0x3f490fd8
 802d4dc:	00000000 	.word	0x00000000

0802d4e0 <__ieee754_rem_pio2f>:
 802d4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d4e2:	ee10 6a10 	vmov	r6, s0
 802d4e6:	4b8e      	ldr	r3, [pc, #568]	; (802d720 <__ieee754_rem_pio2f+0x240>)
 802d4e8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802d4ec:	429d      	cmp	r5, r3
 802d4ee:	b087      	sub	sp, #28
 802d4f0:	eef0 7a40 	vmov.f32	s15, s0
 802d4f4:	4604      	mov	r4, r0
 802d4f6:	dc05      	bgt.n	802d504 <__ieee754_rem_pio2f+0x24>
 802d4f8:	2300      	movs	r3, #0
 802d4fa:	ed80 0a00 	vstr	s0, [r0]
 802d4fe:	6043      	str	r3, [r0, #4]
 802d500:	2000      	movs	r0, #0
 802d502:	e01a      	b.n	802d53a <__ieee754_rem_pio2f+0x5a>
 802d504:	4b87      	ldr	r3, [pc, #540]	; (802d724 <__ieee754_rem_pio2f+0x244>)
 802d506:	429d      	cmp	r5, r3
 802d508:	dc46      	bgt.n	802d598 <__ieee754_rem_pio2f+0xb8>
 802d50a:	2e00      	cmp	r6, #0
 802d50c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 802d728 <__ieee754_rem_pio2f+0x248>
 802d510:	4b86      	ldr	r3, [pc, #536]	; (802d72c <__ieee754_rem_pio2f+0x24c>)
 802d512:	f025 050f 	bic.w	r5, r5, #15
 802d516:	dd1f      	ble.n	802d558 <__ieee754_rem_pio2f+0x78>
 802d518:	429d      	cmp	r5, r3
 802d51a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802d51e:	d00e      	beq.n	802d53e <__ieee754_rem_pio2f+0x5e>
 802d520:	ed9f 7a83 	vldr	s14, [pc, #524]	; 802d730 <__ieee754_rem_pio2f+0x250>
 802d524:	ee37 0ac7 	vsub.f32	s0, s15, s14
 802d528:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802d52c:	ed80 0a00 	vstr	s0, [r0]
 802d530:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d534:	2001      	movs	r0, #1
 802d536:	edc4 7a01 	vstr	s15, [r4, #4]
 802d53a:	b007      	add	sp, #28
 802d53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d53e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 802d734 <__ieee754_rem_pio2f+0x254>
 802d542:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 802d738 <__ieee754_rem_pio2f+0x258>
 802d546:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802d54a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802d54e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802d552:	edc0 6a00 	vstr	s13, [r0]
 802d556:	e7eb      	b.n	802d530 <__ieee754_rem_pio2f+0x50>
 802d558:	429d      	cmp	r5, r3
 802d55a:	ee77 7a80 	vadd.f32	s15, s15, s0
 802d55e:	d00e      	beq.n	802d57e <__ieee754_rem_pio2f+0x9e>
 802d560:	ed9f 7a73 	vldr	s14, [pc, #460]	; 802d730 <__ieee754_rem_pio2f+0x250>
 802d564:	ee37 0a87 	vadd.f32	s0, s15, s14
 802d568:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802d56c:	ed80 0a00 	vstr	s0, [r0]
 802d570:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d574:	f04f 30ff 	mov.w	r0, #4294967295
 802d578:	edc4 7a01 	vstr	s15, [r4, #4]
 802d57c:	e7dd      	b.n	802d53a <__ieee754_rem_pio2f+0x5a>
 802d57e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 802d734 <__ieee754_rem_pio2f+0x254>
 802d582:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 802d738 <__ieee754_rem_pio2f+0x258>
 802d586:	ee77 7a80 	vadd.f32	s15, s15, s0
 802d58a:	ee77 6a87 	vadd.f32	s13, s15, s14
 802d58e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802d592:	edc0 6a00 	vstr	s13, [r0]
 802d596:	e7eb      	b.n	802d570 <__ieee754_rem_pio2f+0x90>
 802d598:	4b68      	ldr	r3, [pc, #416]	; (802d73c <__ieee754_rem_pio2f+0x25c>)
 802d59a:	429d      	cmp	r5, r3
 802d59c:	dc72      	bgt.n	802d684 <__ieee754_rem_pio2f+0x1a4>
 802d59e:	f000 fc0d 	bl	802ddbc <fabsf>
 802d5a2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802d740 <__ieee754_rem_pio2f+0x260>
 802d5a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802d5aa:	eee0 7a07 	vfma.f32	s15, s0, s14
 802d5ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d5b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802d5b6:	ee17 0a90 	vmov	r0, s15
 802d5ba:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802d728 <__ieee754_rem_pio2f+0x248>
 802d5be:	eea7 0a67 	vfms.f32	s0, s14, s15
 802d5c2:	281f      	cmp	r0, #31
 802d5c4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802d730 <__ieee754_rem_pio2f+0x250>
 802d5c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d5cc:	eeb1 6a47 	vneg.f32	s12, s14
 802d5d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 802d5d4:	ee16 2a90 	vmov	r2, s13
 802d5d8:	dc1c      	bgt.n	802d614 <__ieee754_rem_pio2f+0x134>
 802d5da:	495a      	ldr	r1, [pc, #360]	; (802d744 <__ieee754_rem_pio2f+0x264>)
 802d5dc:	1e47      	subs	r7, r0, #1
 802d5de:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 802d5e2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802d5e6:	428b      	cmp	r3, r1
 802d5e8:	d014      	beq.n	802d614 <__ieee754_rem_pio2f+0x134>
 802d5ea:	6022      	str	r2, [r4, #0]
 802d5ec:	ed94 7a00 	vldr	s14, [r4]
 802d5f0:	ee30 0a47 	vsub.f32	s0, s0, s14
 802d5f4:	2e00      	cmp	r6, #0
 802d5f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 802d5fa:	ed84 0a01 	vstr	s0, [r4, #4]
 802d5fe:	da9c      	bge.n	802d53a <__ieee754_rem_pio2f+0x5a>
 802d600:	eeb1 7a47 	vneg.f32	s14, s14
 802d604:	eeb1 0a40 	vneg.f32	s0, s0
 802d608:	ed84 7a00 	vstr	s14, [r4]
 802d60c:	ed84 0a01 	vstr	s0, [r4, #4]
 802d610:	4240      	negs	r0, r0
 802d612:	e792      	b.n	802d53a <__ieee754_rem_pio2f+0x5a>
 802d614:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802d618:	15eb      	asrs	r3, r5, #23
 802d61a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 802d61e:	2d08      	cmp	r5, #8
 802d620:	dde3      	ble.n	802d5ea <__ieee754_rem_pio2f+0x10a>
 802d622:	eddf 7a44 	vldr	s15, [pc, #272]	; 802d734 <__ieee754_rem_pio2f+0x254>
 802d626:	eef0 6a40 	vmov.f32	s13, s0
 802d62a:	eee6 6a27 	vfma.f32	s13, s12, s15
 802d62e:	ee30 0a66 	vsub.f32	s0, s0, s13
 802d632:	eea6 0a27 	vfma.f32	s0, s12, s15
 802d636:	eddf 7a40 	vldr	s15, [pc, #256]	; 802d738 <__ieee754_rem_pio2f+0x258>
 802d63a:	ee97 0a27 	vfnms.f32	s0, s14, s15
 802d63e:	ee76 5ac0 	vsub.f32	s11, s13, s0
 802d642:	eef0 7a40 	vmov.f32	s15, s0
 802d646:	ee15 2a90 	vmov	r2, s11
 802d64a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802d64e:	1a5b      	subs	r3, r3, r1
 802d650:	2b19      	cmp	r3, #25
 802d652:	dc04      	bgt.n	802d65e <__ieee754_rem_pio2f+0x17e>
 802d654:	edc4 5a00 	vstr	s11, [r4]
 802d658:	eeb0 0a66 	vmov.f32	s0, s13
 802d65c:	e7c6      	b.n	802d5ec <__ieee754_rem_pio2f+0x10c>
 802d65e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 802d748 <__ieee754_rem_pio2f+0x268>
 802d662:	eeb0 0a66 	vmov.f32	s0, s13
 802d666:	eea6 0a25 	vfma.f32	s0, s12, s11
 802d66a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802d66e:	eddf 6a37 	vldr	s13, [pc, #220]	; 802d74c <__ieee754_rem_pio2f+0x26c>
 802d672:	eee6 7a25 	vfma.f32	s15, s12, s11
 802d676:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802d67a:	ee30 7a67 	vsub.f32	s14, s0, s15
 802d67e:	ed84 7a00 	vstr	s14, [r4]
 802d682:	e7b3      	b.n	802d5ec <__ieee754_rem_pio2f+0x10c>
 802d684:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 802d688:	db06      	blt.n	802d698 <__ieee754_rem_pio2f+0x1b8>
 802d68a:	ee70 7a40 	vsub.f32	s15, s0, s0
 802d68e:	edc0 7a01 	vstr	s15, [r0, #4]
 802d692:	edc0 7a00 	vstr	s15, [r0]
 802d696:	e733      	b.n	802d500 <__ieee754_rem_pio2f+0x20>
 802d698:	15ea      	asrs	r2, r5, #23
 802d69a:	3a86      	subs	r2, #134	; 0x86
 802d69c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802d6a0:	ee07 3a90 	vmov	s15, r3
 802d6a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802d6a8:	eddf 6a29 	vldr	s13, [pc, #164]	; 802d750 <__ieee754_rem_pio2f+0x270>
 802d6ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802d6b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d6b4:	ed8d 7a03 	vstr	s14, [sp, #12]
 802d6b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802d6bc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802d6c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802d6c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d6c8:	ed8d 7a04 	vstr	s14, [sp, #16]
 802d6cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802d6d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 802d6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d6d8:	edcd 7a05 	vstr	s15, [sp, #20]
 802d6dc:	d11e      	bne.n	802d71c <__ieee754_rem_pio2f+0x23c>
 802d6de:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802d6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d6e6:	bf14      	ite	ne
 802d6e8:	2302      	movne	r3, #2
 802d6ea:	2301      	moveq	r3, #1
 802d6ec:	4919      	ldr	r1, [pc, #100]	; (802d754 <__ieee754_rem_pio2f+0x274>)
 802d6ee:	9101      	str	r1, [sp, #4]
 802d6f0:	2102      	movs	r1, #2
 802d6f2:	9100      	str	r1, [sp, #0]
 802d6f4:	a803      	add	r0, sp, #12
 802d6f6:	4621      	mov	r1, r4
 802d6f8:	f000 f88e 	bl	802d818 <__kernel_rem_pio2f>
 802d6fc:	2e00      	cmp	r6, #0
 802d6fe:	f6bf af1c 	bge.w	802d53a <__ieee754_rem_pio2f+0x5a>
 802d702:	edd4 7a00 	vldr	s15, [r4]
 802d706:	eef1 7a67 	vneg.f32	s15, s15
 802d70a:	edc4 7a00 	vstr	s15, [r4]
 802d70e:	edd4 7a01 	vldr	s15, [r4, #4]
 802d712:	eef1 7a67 	vneg.f32	s15, s15
 802d716:	edc4 7a01 	vstr	s15, [r4, #4]
 802d71a:	e779      	b.n	802d610 <__ieee754_rem_pio2f+0x130>
 802d71c:	2303      	movs	r3, #3
 802d71e:	e7e5      	b.n	802d6ec <__ieee754_rem_pio2f+0x20c>
 802d720:	3f490fd8 	.word	0x3f490fd8
 802d724:	4016cbe3 	.word	0x4016cbe3
 802d728:	3fc90f80 	.word	0x3fc90f80
 802d72c:	3fc90fd0 	.word	0x3fc90fd0
 802d730:	37354443 	.word	0x37354443
 802d734:	37354400 	.word	0x37354400
 802d738:	2e85a308 	.word	0x2e85a308
 802d73c:	43490f80 	.word	0x43490f80
 802d740:	3f22f984 	.word	0x3f22f984
 802d744:	080336dc 	.word	0x080336dc
 802d748:	2e85a300 	.word	0x2e85a300
 802d74c:	248d3132 	.word	0x248d3132
 802d750:	43800000 	.word	0x43800000
 802d754:	0803375c 	.word	0x0803375c

0802d758 <__kernel_cosf>:
 802d758:	ee10 3a10 	vmov	r3, s0
 802d75c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802d760:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802d764:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 802d768:	da05      	bge.n	802d776 <__kernel_cosf+0x1e>
 802d76a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802d76e:	ee17 2a90 	vmov	r2, s15
 802d772:	2a00      	cmp	r2, #0
 802d774:	d03d      	beq.n	802d7f2 <__kernel_cosf+0x9a>
 802d776:	ee60 5a00 	vmul.f32	s11, s0, s0
 802d77a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802d7f8 <__kernel_cosf+0xa0>
 802d77e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 802d7fc <__kernel_cosf+0xa4>
 802d782:	eddf 6a1f 	vldr	s13, [pc, #124]	; 802d800 <__kernel_cosf+0xa8>
 802d786:	4a1f      	ldr	r2, [pc, #124]	; (802d804 <__kernel_cosf+0xac>)
 802d788:	eea5 7aa7 	vfma.f32	s14, s11, s15
 802d78c:	4293      	cmp	r3, r2
 802d78e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802d808 <__kernel_cosf+0xb0>
 802d792:	eee7 7a25 	vfma.f32	s15, s14, s11
 802d796:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 802d80c <__kernel_cosf+0xb4>
 802d79a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802d79e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 802d810 <__kernel_cosf+0xb8>
 802d7a2:	eee7 7a25 	vfma.f32	s15, s14, s11
 802d7a6:	eeb0 7a66 	vmov.f32	s14, s13
 802d7aa:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802d7ae:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 802d7b2:	ee65 7aa6 	vmul.f32	s15, s11, s13
 802d7b6:	ee67 6a25 	vmul.f32	s13, s14, s11
 802d7ba:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 802d7be:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802d7c2:	dc04      	bgt.n	802d7ce <__kernel_cosf+0x76>
 802d7c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 802d7c8:	ee36 0a47 	vsub.f32	s0, s12, s14
 802d7cc:	4770      	bx	lr
 802d7ce:	4a11      	ldr	r2, [pc, #68]	; (802d814 <__kernel_cosf+0xbc>)
 802d7d0:	4293      	cmp	r3, r2
 802d7d2:	bfda      	itte	le
 802d7d4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802d7d8:	ee06 3a90 	vmovle	s13, r3
 802d7dc:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 802d7e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802d7e4:	ee36 0a66 	vsub.f32	s0, s12, s13
 802d7e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d7ec:	ee30 0a67 	vsub.f32	s0, s0, s15
 802d7f0:	4770      	bx	lr
 802d7f2:	eeb0 0a46 	vmov.f32	s0, s12
 802d7f6:	4770      	bx	lr
 802d7f8:	ad47d74e 	.word	0xad47d74e
 802d7fc:	310f74f6 	.word	0x310f74f6
 802d800:	3d2aaaab 	.word	0x3d2aaaab
 802d804:	3e999999 	.word	0x3e999999
 802d808:	b493f27c 	.word	0xb493f27c
 802d80c:	37d00d01 	.word	0x37d00d01
 802d810:	bab60b61 	.word	0xbab60b61
 802d814:	3f480000 	.word	0x3f480000

0802d818 <__kernel_rem_pio2f>:
 802d818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d81c:	ed2d 8b04 	vpush	{d8-d9}
 802d820:	b0d7      	sub	sp, #348	; 0x15c
 802d822:	4616      	mov	r6, r2
 802d824:	4698      	mov	r8, r3
 802d826:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802d828:	4bbb      	ldr	r3, [pc, #748]	; (802db18 <__kernel_rem_pio2f+0x300>)
 802d82a:	9001      	str	r0, [sp, #4]
 802d82c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 802d830:	1d33      	adds	r3, r6, #4
 802d832:	460d      	mov	r5, r1
 802d834:	f108 39ff 	add.w	r9, r8, #4294967295
 802d838:	db29      	blt.n	802d88e <__kernel_rem_pio2f+0x76>
 802d83a:	1ef1      	subs	r1, r6, #3
 802d83c:	bf48      	it	mi
 802d83e:	1d31      	addmi	r1, r6, #4
 802d840:	10c9      	asrs	r1, r1, #3
 802d842:	1c4c      	adds	r4, r1, #1
 802d844:	00e3      	lsls	r3, r4, #3
 802d846:	9302      	str	r3, [sp, #8]
 802d848:	9b65      	ldr	r3, [sp, #404]	; 0x194
 802d84a:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 802db28 <__kernel_rem_pio2f+0x310>
 802d84e:	eba1 0009 	sub.w	r0, r1, r9
 802d852:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 802d856:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 802d85a:	eb07 0c09 	add.w	ip, r7, r9
 802d85e:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 802d862:	2300      	movs	r3, #0
 802d864:	4563      	cmp	r3, ip
 802d866:	dd14      	ble.n	802d892 <__kernel_rem_pio2f+0x7a>
 802d868:	ab1a      	add	r3, sp, #104	; 0x68
 802d86a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 802d86e:	46cc      	mov	ip, r9
 802d870:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 802d874:	f1c8 0b01 	rsb	fp, r8, #1
 802d878:	eb0b 020c 	add.w	r2, fp, ip
 802d87c:	4297      	cmp	r7, r2
 802d87e:	db27      	blt.n	802d8d0 <__kernel_rem_pio2f+0xb8>
 802d880:	f8dd e004 	ldr.w	lr, [sp, #4]
 802d884:	eddf 7aa8 	vldr	s15, [pc, #672]	; 802db28 <__kernel_rem_pio2f+0x310>
 802d888:	4618      	mov	r0, r3
 802d88a:	2200      	movs	r2, #0
 802d88c:	e016      	b.n	802d8bc <__kernel_rem_pio2f+0xa4>
 802d88e:	2100      	movs	r1, #0
 802d890:	e7d7      	b.n	802d842 <__kernel_rem_pio2f+0x2a>
 802d892:	42d8      	cmn	r0, r3
 802d894:	bf5d      	ittte	pl
 802d896:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 802d89a:	ee07 2a90 	vmovpl	s15, r2
 802d89e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802d8a2:	eef0 7a47 	vmovmi.f32	s15, s14
 802d8a6:	ecea 7a01 	vstmia	sl!, {s15}
 802d8aa:	3301      	adds	r3, #1
 802d8ac:	e7da      	b.n	802d864 <__kernel_rem_pio2f+0x4c>
 802d8ae:	ecfe 6a01 	vldmia	lr!, {s13}
 802d8b2:	ed90 7a00 	vldr	s14, [r0]
 802d8b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 802d8ba:	3201      	adds	r2, #1
 802d8bc:	454a      	cmp	r2, r9
 802d8be:	f1a0 0004 	sub.w	r0, r0, #4
 802d8c2:	ddf4      	ble.n	802d8ae <__kernel_rem_pio2f+0x96>
 802d8c4:	ecea 7a01 	vstmia	sl!, {s15}
 802d8c8:	3304      	adds	r3, #4
 802d8ca:	f10c 0c01 	add.w	ip, ip, #1
 802d8ce:	e7d3      	b.n	802d878 <__kernel_rem_pio2f+0x60>
 802d8d0:	ab06      	add	r3, sp, #24
 802d8d2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 802d8d6:	9304      	str	r3, [sp, #16]
 802d8d8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 802d8da:	eddf 8a92 	vldr	s17, [pc, #584]	; 802db24 <__kernel_rem_pio2f+0x30c>
 802d8de:	ed9f 9a90 	vldr	s18, [pc, #576]	; 802db20 <__kernel_rem_pio2f+0x308>
 802d8e2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 802d8e6:	9303      	str	r3, [sp, #12]
 802d8e8:	46ba      	mov	sl, r7
 802d8ea:	ab56      	add	r3, sp, #344	; 0x158
 802d8ec:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 802d8f0:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 802d8f4:	ab06      	add	r3, sp, #24
 802d8f6:	4618      	mov	r0, r3
 802d8f8:	4652      	mov	r2, sl
 802d8fa:	2a00      	cmp	r2, #0
 802d8fc:	dc51      	bgt.n	802d9a2 <__kernel_rem_pio2f+0x18a>
 802d8fe:	4620      	mov	r0, r4
 802d900:	9305      	str	r3, [sp, #20]
 802d902:	f000 fa63 	bl	802ddcc <scalbnf>
 802d906:	eeb0 8a40 	vmov.f32	s16, s0
 802d90a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802d90e:	ee28 0a00 	vmul.f32	s0, s16, s0
 802d912:	f7ff fd61 	bl	802d3d8 <floorf>
 802d916:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802d91a:	eea0 8a67 	vfms.f32	s16, s0, s15
 802d91e:	2c00      	cmp	r4, #0
 802d920:	9b05      	ldr	r3, [sp, #20]
 802d922:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802d926:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 802d92a:	edcd 7a00 	vstr	s15, [sp]
 802d92e:	ee38 8a40 	vsub.f32	s16, s16, s0
 802d932:	dd4b      	ble.n	802d9cc <__kernel_rem_pio2f+0x1b4>
 802d934:	f10a 3cff 	add.w	ip, sl, #4294967295
 802d938:	aa06      	add	r2, sp, #24
 802d93a:	f1c4 0e08 	rsb	lr, r4, #8
 802d93e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802d942:	ee17 1a90 	vmov	r1, s15
 802d946:	fa42 f00e 	asr.w	r0, r2, lr
 802d94a:	4401      	add	r1, r0
 802d94c:	9100      	str	r1, [sp, #0]
 802d94e:	fa00 f00e 	lsl.w	r0, r0, lr
 802d952:	a906      	add	r1, sp, #24
 802d954:	1a12      	subs	r2, r2, r0
 802d956:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 802d95a:	f1c4 0007 	rsb	r0, r4, #7
 802d95e:	fa42 fb00 	asr.w	fp, r2, r0
 802d962:	f1bb 0f00 	cmp.w	fp, #0
 802d966:	dd43      	ble.n	802d9f0 <__kernel_rem_pio2f+0x1d8>
 802d968:	9a00      	ldr	r2, [sp, #0]
 802d96a:	f04f 0e00 	mov.w	lr, #0
 802d96e:	3201      	adds	r2, #1
 802d970:	9200      	str	r2, [sp, #0]
 802d972:	4670      	mov	r0, lr
 802d974:	45f2      	cmp	sl, lr
 802d976:	dc6c      	bgt.n	802da52 <__kernel_rem_pio2f+0x23a>
 802d978:	2c00      	cmp	r4, #0
 802d97a:	dd04      	ble.n	802d986 <__kernel_rem_pio2f+0x16e>
 802d97c:	2c01      	cmp	r4, #1
 802d97e:	d079      	beq.n	802da74 <__kernel_rem_pio2f+0x25c>
 802d980:	2c02      	cmp	r4, #2
 802d982:	f000 8082 	beq.w	802da8a <__kernel_rem_pio2f+0x272>
 802d986:	f1bb 0f02 	cmp.w	fp, #2
 802d98a:	d131      	bne.n	802d9f0 <__kernel_rem_pio2f+0x1d8>
 802d98c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802d990:	ee30 8a48 	vsub.f32	s16, s0, s16
 802d994:	b360      	cbz	r0, 802d9f0 <__kernel_rem_pio2f+0x1d8>
 802d996:	4620      	mov	r0, r4
 802d998:	f000 fa18 	bl	802ddcc <scalbnf>
 802d99c:	ee38 8a40 	vsub.f32	s16, s16, s0
 802d9a0:	e026      	b.n	802d9f0 <__kernel_rem_pio2f+0x1d8>
 802d9a2:	ee60 7a28 	vmul.f32	s15, s0, s17
 802d9a6:	3a01      	subs	r2, #1
 802d9a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d9ac:	a942      	add	r1, sp, #264	; 0x108
 802d9ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d9b2:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 802d9b6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802d9ba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802d9be:	eca0 0a01 	vstmia	r0!, {s0}
 802d9c2:	ed9c 0a00 	vldr	s0, [ip]
 802d9c6:	ee37 0a80 	vadd.f32	s0, s15, s0
 802d9ca:	e796      	b.n	802d8fa <__kernel_rem_pio2f+0xe2>
 802d9cc:	d107      	bne.n	802d9de <__kernel_rem_pio2f+0x1c6>
 802d9ce:	f10a 32ff 	add.w	r2, sl, #4294967295
 802d9d2:	a906      	add	r1, sp, #24
 802d9d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802d9d8:	ea4f 2b22 	mov.w	fp, r2, asr #8
 802d9dc:	e7c1      	b.n	802d962 <__kernel_rem_pio2f+0x14a>
 802d9de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802d9e2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802d9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d9ea:	da2f      	bge.n	802da4c <__kernel_rem_pio2f+0x234>
 802d9ec:	f04f 0b00 	mov.w	fp, #0
 802d9f0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802d9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d9f8:	f040 8098 	bne.w	802db2c <__kernel_rem_pio2f+0x314>
 802d9fc:	f10a 33ff 	add.w	r3, sl, #4294967295
 802da00:	469c      	mov	ip, r3
 802da02:	2200      	movs	r2, #0
 802da04:	45bc      	cmp	ip, r7
 802da06:	da48      	bge.n	802da9a <__kernel_rem_pio2f+0x282>
 802da08:	2a00      	cmp	r2, #0
 802da0a:	d05f      	beq.n	802dacc <__kernel_rem_pio2f+0x2b4>
 802da0c:	aa06      	add	r2, sp, #24
 802da0e:	3c08      	subs	r4, #8
 802da10:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802da14:	2900      	cmp	r1, #0
 802da16:	d07d      	beq.n	802db14 <__kernel_rem_pio2f+0x2fc>
 802da18:	4620      	mov	r0, r4
 802da1a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802da1e:	9301      	str	r3, [sp, #4]
 802da20:	f000 f9d4 	bl	802ddcc <scalbnf>
 802da24:	9b01      	ldr	r3, [sp, #4]
 802da26:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 802db24 <__kernel_rem_pio2f+0x30c>
 802da2a:	4619      	mov	r1, r3
 802da2c:	2900      	cmp	r1, #0
 802da2e:	f280 80af 	bge.w	802db90 <__kernel_rem_pio2f+0x378>
 802da32:	4618      	mov	r0, r3
 802da34:	2400      	movs	r4, #0
 802da36:	2800      	cmp	r0, #0
 802da38:	f2c0 80d0 	blt.w	802dbdc <__kernel_rem_pio2f+0x3c4>
 802da3c:	a942      	add	r1, sp, #264	; 0x108
 802da3e:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 802da42:	4a36      	ldr	r2, [pc, #216]	; (802db1c <__kernel_rem_pio2f+0x304>)
 802da44:	eddf 7a38 	vldr	s15, [pc, #224]	; 802db28 <__kernel_rem_pio2f+0x310>
 802da48:	2100      	movs	r1, #0
 802da4a:	e0bb      	b.n	802dbc4 <__kernel_rem_pio2f+0x3ac>
 802da4c:	f04f 0b02 	mov.w	fp, #2
 802da50:	e78a      	b.n	802d968 <__kernel_rem_pio2f+0x150>
 802da52:	681a      	ldr	r2, [r3, #0]
 802da54:	b948      	cbnz	r0, 802da6a <__kernel_rem_pio2f+0x252>
 802da56:	b11a      	cbz	r2, 802da60 <__kernel_rem_pio2f+0x248>
 802da58:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802da5c:	601a      	str	r2, [r3, #0]
 802da5e:	2201      	movs	r2, #1
 802da60:	f10e 0e01 	add.w	lr, lr, #1
 802da64:	3304      	adds	r3, #4
 802da66:	4610      	mov	r0, r2
 802da68:	e784      	b.n	802d974 <__kernel_rem_pio2f+0x15c>
 802da6a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 802da6e:	601a      	str	r2, [r3, #0]
 802da70:	4602      	mov	r2, r0
 802da72:	e7f5      	b.n	802da60 <__kernel_rem_pio2f+0x248>
 802da74:	f10a 3cff 	add.w	ip, sl, #4294967295
 802da78:	ab06      	add	r3, sp, #24
 802da7a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802da7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802da82:	aa06      	add	r2, sp, #24
 802da84:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 802da88:	e77d      	b.n	802d986 <__kernel_rem_pio2f+0x16e>
 802da8a:	f10a 3cff 	add.w	ip, sl, #4294967295
 802da8e:	ab06      	add	r3, sp, #24
 802da90:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802da94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802da98:	e7f3      	b.n	802da82 <__kernel_rem_pio2f+0x26a>
 802da9a:	a906      	add	r1, sp, #24
 802da9c:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 802daa0:	f10c 3cff 	add.w	ip, ip, #4294967295
 802daa4:	4302      	orrs	r2, r0
 802daa6:	e7ad      	b.n	802da04 <__kernel_rem_pio2f+0x1ec>
 802daa8:	3001      	adds	r0, #1
 802daaa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802daae:	2a00      	cmp	r2, #0
 802dab0:	d0fa      	beq.n	802daa8 <__kernel_rem_pio2f+0x290>
 802dab2:	a91a      	add	r1, sp, #104	; 0x68
 802dab4:	eb0a 0208 	add.w	r2, sl, r8
 802dab8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 802dabc:	f10a 0301 	add.w	r3, sl, #1
 802dac0:	eb0a 0100 	add.w	r1, sl, r0
 802dac4:	4299      	cmp	r1, r3
 802dac6:	da04      	bge.n	802dad2 <__kernel_rem_pio2f+0x2ba>
 802dac8:	468a      	mov	sl, r1
 802daca:	e70e      	b.n	802d8ea <__kernel_rem_pio2f+0xd2>
 802dacc:	9b04      	ldr	r3, [sp, #16]
 802dace:	2001      	movs	r0, #1
 802dad0:	e7eb      	b.n	802daaa <__kernel_rem_pio2f+0x292>
 802dad2:	9803      	ldr	r0, [sp, #12]
 802dad4:	f8dd c004 	ldr.w	ip, [sp, #4]
 802dad8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802dadc:	9000      	str	r0, [sp, #0]
 802dade:	ee07 0a90 	vmov	s15, r0
 802dae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802dae6:	2000      	movs	r0, #0
 802dae8:	ece2 7a01 	vstmia	r2!, {s15}
 802daec:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802db28 <__kernel_rem_pio2f+0x310>
 802daf0:	4696      	mov	lr, r2
 802daf2:	4548      	cmp	r0, r9
 802daf4:	dd06      	ble.n	802db04 <__kernel_rem_pio2f+0x2ec>
 802daf6:	a842      	add	r0, sp, #264	; 0x108
 802daf8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 802dafc:	edc0 7a00 	vstr	s15, [r0]
 802db00:	3301      	adds	r3, #1
 802db02:	e7df      	b.n	802dac4 <__kernel_rem_pio2f+0x2ac>
 802db04:	ecfc 6a01 	vldmia	ip!, {s13}
 802db08:	ed3e 7a01 	vldmdb	lr!, {s14}
 802db0c:	3001      	adds	r0, #1
 802db0e:	eee6 7a87 	vfma.f32	s15, s13, s14
 802db12:	e7ee      	b.n	802daf2 <__kernel_rem_pio2f+0x2da>
 802db14:	3b01      	subs	r3, #1
 802db16:	e779      	b.n	802da0c <__kernel_rem_pio2f+0x1f4>
 802db18:	08033aa0 	.word	0x08033aa0
 802db1c:	08033a74 	.word	0x08033a74
 802db20:	43800000 	.word	0x43800000
 802db24:	3b800000 	.word	0x3b800000
 802db28:	00000000 	.word	0x00000000
 802db2c:	9b02      	ldr	r3, [sp, #8]
 802db2e:	eeb0 0a48 	vmov.f32	s0, s16
 802db32:	1b98      	subs	r0, r3, r6
 802db34:	f000 f94a 	bl	802ddcc <scalbnf>
 802db38:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 802db20 <__kernel_rem_pio2f+0x308>
 802db3c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802db40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802db44:	db1b      	blt.n	802db7e <__kernel_rem_pio2f+0x366>
 802db46:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 802db24 <__kernel_rem_pio2f+0x30c>
 802db4a:	ee60 7a27 	vmul.f32	s15, s0, s15
 802db4e:	aa06      	add	r2, sp, #24
 802db50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802db54:	a906      	add	r1, sp, #24
 802db56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802db5a:	3408      	adds	r4, #8
 802db5c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802db60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802db64:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802db68:	ee10 3a10 	vmov	r3, s0
 802db6c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 802db70:	ee17 2a90 	vmov	r2, s15
 802db74:	f10a 0301 	add.w	r3, sl, #1
 802db78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802db7c:	e74c      	b.n	802da18 <__kernel_rem_pio2f+0x200>
 802db7e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802db82:	aa06      	add	r2, sp, #24
 802db84:	ee10 3a10 	vmov	r3, s0
 802db88:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 802db8c:	4653      	mov	r3, sl
 802db8e:	e743      	b.n	802da18 <__kernel_rem_pio2f+0x200>
 802db90:	aa42      	add	r2, sp, #264	; 0x108
 802db92:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 802db96:	aa06      	add	r2, sp, #24
 802db98:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 802db9c:	9201      	str	r2, [sp, #4]
 802db9e:	ee07 2a90 	vmov	s15, r2
 802dba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802dba6:	3901      	subs	r1, #1
 802dba8:	ee67 7a80 	vmul.f32	s15, s15, s0
 802dbac:	ee20 0a07 	vmul.f32	s0, s0, s14
 802dbb0:	edc0 7a00 	vstr	s15, [r0]
 802dbb4:	e73a      	b.n	802da2c <__kernel_rem_pio2f+0x214>
 802dbb6:	ecf2 6a01 	vldmia	r2!, {s13}
 802dbba:	ecb6 7a01 	vldmia	r6!, {s14}
 802dbbe:	eee6 7a87 	vfma.f32	s15, s13, s14
 802dbc2:	3101      	adds	r1, #1
 802dbc4:	42b9      	cmp	r1, r7
 802dbc6:	dc01      	bgt.n	802dbcc <__kernel_rem_pio2f+0x3b4>
 802dbc8:	428c      	cmp	r4, r1
 802dbca:	daf4      	bge.n	802dbb6 <__kernel_rem_pio2f+0x39e>
 802dbcc:	aa56      	add	r2, sp, #344	; 0x158
 802dbce:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 802dbd2:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 802dbd6:	3801      	subs	r0, #1
 802dbd8:	3401      	adds	r4, #1
 802dbda:	e72c      	b.n	802da36 <__kernel_rem_pio2f+0x21e>
 802dbdc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802dbde:	2a02      	cmp	r2, #2
 802dbe0:	dc0a      	bgt.n	802dbf8 <__kernel_rem_pio2f+0x3e0>
 802dbe2:	2a00      	cmp	r2, #0
 802dbe4:	dc61      	bgt.n	802dcaa <__kernel_rem_pio2f+0x492>
 802dbe6:	d03c      	beq.n	802dc62 <__kernel_rem_pio2f+0x44a>
 802dbe8:	9b00      	ldr	r3, [sp, #0]
 802dbea:	f003 0007 	and.w	r0, r3, #7
 802dbee:	b057      	add	sp, #348	; 0x15c
 802dbf0:	ecbd 8b04 	vpop	{d8-d9}
 802dbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802dbf8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802dbfa:	2a03      	cmp	r2, #3
 802dbfc:	d1f4      	bne.n	802dbe8 <__kernel_rem_pio2f+0x3d0>
 802dbfe:	aa2e      	add	r2, sp, #184	; 0xb8
 802dc00:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802dc04:	4608      	mov	r0, r1
 802dc06:	461c      	mov	r4, r3
 802dc08:	2c00      	cmp	r4, #0
 802dc0a:	f1a0 0004 	sub.w	r0, r0, #4
 802dc0e:	dc59      	bgt.n	802dcc4 <__kernel_rem_pio2f+0x4ac>
 802dc10:	4618      	mov	r0, r3
 802dc12:	2801      	cmp	r0, #1
 802dc14:	f1a1 0104 	sub.w	r1, r1, #4
 802dc18:	dc64      	bgt.n	802dce4 <__kernel_rem_pio2f+0x4cc>
 802dc1a:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 802db28 <__kernel_rem_pio2f+0x310>
 802dc1e:	2b01      	cmp	r3, #1
 802dc20:	dc70      	bgt.n	802dd04 <__kernel_rem_pio2f+0x4ec>
 802dc22:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 802dc26:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 802dc2a:	f1bb 0f00 	cmp.w	fp, #0
 802dc2e:	d172      	bne.n	802dd16 <__kernel_rem_pio2f+0x4fe>
 802dc30:	edc5 6a00 	vstr	s13, [r5]
 802dc34:	ed85 7a01 	vstr	s14, [r5, #4]
 802dc38:	edc5 7a02 	vstr	s15, [r5, #8]
 802dc3c:	e7d4      	b.n	802dbe8 <__kernel_rem_pio2f+0x3d0>
 802dc3e:	aa2e      	add	r2, sp, #184	; 0xb8
 802dc40:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802dc44:	ed91 7a00 	vldr	s14, [r1]
 802dc48:	ee77 7a87 	vadd.f32	s15, s15, s14
 802dc4c:	3b01      	subs	r3, #1
 802dc4e:	2b00      	cmp	r3, #0
 802dc50:	daf5      	bge.n	802dc3e <__kernel_rem_pio2f+0x426>
 802dc52:	f1bb 0f00 	cmp.w	fp, #0
 802dc56:	d001      	beq.n	802dc5c <__kernel_rem_pio2f+0x444>
 802dc58:	eef1 7a67 	vneg.f32	s15, s15
 802dc5c:	edc5 7a00 	vstr	s15, [r5]
 802dc60:	e7c2      	b.n	802dbe8 <__kernel_rem_pio2f+0x3d0>
 802dc62:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 802db28 <__kernel_rem_pio2f+0x310>
 802dc66:	e7f2      	b.n	802dc4e <__kernel_rem_pio2f+0x436>
 802dc68:	aa2e      	add	r2, sp, #184	; 0xb8
 802dc6a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 802dc6e:	edd0 7a00 	vldr	s15, [r0]
 802dc72:	ee37 7a27 	vadd.f32	s14, s14, s15
 802dc76:	3901      	subs	r1, #1
 802dc78:	2900      	cmp	r1, #0
 802dc7a:	daf5      	bge.n	802dc68 <__kernel_rem_pio2f+0x450>
 802dc7c:	f1bb 0f00 	cmp.w	fp, #0
 802dc80:	d017      	beq.n	802dcb2 <__kernel_rem_pio2f+0x49a>
 802dc82:	eef1 7a47 	vneg.f32	s15, s14
 802dc86:	edc5 7a00 	vstr	s15, [r5]
 802dc8a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 802dc8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802dc92:	a82f      	add	r0, sp, #188	; 0xbc
 802dc94:	2101      	movs	r1, #1
 802dc96:	428b      	cmp	r3, r1
 802dc98:	da0e      	bge.n	802dcb8 <__kernel_rem_pio2f+0x4a0>
 802dc9a:	f1bb 0f00 	cmp.w	fp, #0
 802dc9e:	d001      	beq.n	802dca4 <__kernel_rem_pio2f+0x48c>
 802dca0:	eef1 7a67 	vneg.f32	s15, s15
 802dca4:	edc5 7a01 	vstr	s15, [r5, #4]
 802dca8:	e79e      	b.n	802dbe8 <__kernel_rem_pio2f+0x3d0>
 802dcaa:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 802db28 <__kernel_rem_pio2f+0x310>
 802dcae:	4619      	mov	r1, r3
 802dcb0:	e7e2      	b.n	802dc78 <__kernel_rem_pio2f+0x460>
 802dcb2:	eef0 7a47 	vmov.f32	s15, s14
 802dcb6:	e7e6      	b.n	802dc86 <__kernel_rem_pio2f+0x46e>
 802dcb8:	ecb0 7a01 	vldmia	r0!, {s14}
 802dcbc:	3101      	adds	r1, #1
 802dcbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 802dcc2:	e7e8      	b.n	802dc96 <__kernel_rem_pio2f+0x47e>
 802dcc4:	edd0 7a00 	vldr	s15, [r0]
 802dcc8:	edd0 6a01 	vldr	s13, [r0, #4]
 802dccc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802dcd0:	3c01      	subs	r4, #1
 802dcd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802dcd6:	ed80 7a00 	vstr	s14, [r0]
 802dcda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802dcde:	edc0 7a01 	vstr	s15, [r0, #4]
 802dce2:	e791      	b.n	802dc08 <__kernel_rem_pio2f+0x3f0>
 802dce4:	edd1 7a00 	vldr	s15, [r1]
 802dce8:	edd1 6a01 	vldr	s13, [r1, #4]
 802dcec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802dcf0:	3801      	subs	r0, #1
 802dcf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802dcf6:	ed81 7a00 	vstr	s14, [r1]
 802dcfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802dcfe:	edc1 7a01 	vstr	s15, [r1, #4]
 802dd02:	e786      	b.n	802dc12 <__kernel_rem_pio2f+0x3fa>
 802dd04:	aa2e      	add	r2, sp, #184	; 0xb8
 802dd06:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802dd0a:	ed91 7a00 	vldr	s14, [r1]
 802dd0e:	3b01      	subs	r3, #1
 802dd10:	ee77 7a87 	vadd.f32	s15, s15, s14
 802dd14:	e783      	b.n	802dc1e <__kernel_rem_pio2f+0x406>
 802dd16:	eef1 6a66 	vneg.f32	s13, s13
 802dd1a:	eeb1 7a47 	vneg.f32	s14, s14
 802dd1e:	edc5 6a00 	vstr	s13, [r5]
 802dd22:	ed85 7a01 	vstr	s14, [r5, #4]
 802dd26:	eef1 7a67 	vneg.f32	s15, s15
 802dd2a:	e785      	b.n	802dc38 <__kernel_rem_pio2f+0x420>

0802dd2c <__kernel_sinf>:
 802dd2c:	ee10 3a10 	vmov	r3, s0
 802dd30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802dd34:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802dd38:	da04      	bge.n	802dd44 <__kernel_sinf+0x18>
 802dd3a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802dd3e:	ee17 3a90 	vmov	r3, s15
 802dd42:	b35b      	cbz	r3, 802dd9c <__kernel_sinf+0x70>
 802dd44:	ee20 7a00 	vmul.f32	s14, s0, s0
 802dd48:	eddf 7a15 	vldr	s15, [pc, #84]	; 802dda0 <__kernel_sinf+0x74>
 802dd4c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802dda4 <__kernel_sinf+0x78>
 802dd50:	eea7 6a27 	vfma.f32	s12, s14, s15
 802dd54:	eddf 7a14 	vldr	s15, [pc, #80]	; 802dda8 <__kernel_sinf+0x7c>
 802dd58:	eee6 7a07 	vfma.f32	s15, s12, s14
 802dd5c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 802ddac <__kernel_sinf+0x80>
 802dd60:	eea7 6a87 	vfma.f32	s12, s15, s14
 802dd64:	eddf 7a12 	vldr	s15, [pc, #72]	; 802ddb0 <__kernel_sinf+0x84>
 802dd68:	ee60 6a07 	vmul.f32	s13, s0, s14
 802dd6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 802dd70:	b930      	cbnz	r0, 802dd80 <__kernel_sinf+0x54>
 802dd72:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802ddb4 <__kernel_sinf+0x88>
 802dd76:	eea7 6a27 	vfma.f32	s12, s14, s15
 802dd7a:	eea6 0a26 	vfma.f32	s0, s12, s13
 802dd7e:	4770      	bx	lr
 802dd80:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802dd84:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802dd88:	eee0 7a86 	vfma.f32	s15, s1, s12
 802dd8c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802dd90:	eddf 7a09 	vldr	s15, [pc, #36]	; 802ddb8 <__kernel_sinf+0x8c>
 802dd94:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802dd98:	ee30 0a60 	vsub.f32	s0, s0, s1
 802dd9c:	4770      	bx	lr
 802dd9e:	bf00      	nop
 802dda0:	2f2ec9d3 	.word	0x2f2ec9d3
 802dda4:	b2d72f34 	.word	0xb2d72f34
 802dda8:	3638ef1b 	.word	0x3638ef1b
 802ddac:	b9500d01 	.word	0xb9500d01
 802ddb0:	3c088889 	.word	0x3c088889
 802ddb4:	be2aaaab 	.word	0xbe2aaaab
 802ddb8:	3e2aaaab 	.word	0x3e2aaaab

0802ddbc <fabsf>:
 802ddbc:	ee10 3a10 	vmov	r3, s0
 802ddc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802ddc4:	ee00 3a10 	vmov	s0, r3
 802ddc8:	4770      	bx	lr
	...

0802ddcc <scalbnf>:
 802ddcc:	ee10 3a10 	vmov	r3, s0
 802ddd0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802ddd4:	d025      	beq.n	802de22 <scalbnf+0x56>
 802ddd6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802ddda:	d302      	bcc.n	802dde2 <scalbnf+0x16>
 802dddc:	ee30 0a00 	vadd.f32	s0, s0, s0
 802dde0:	4770      	bx	lr
 802dde2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802dde6:	d122      	bne.n	802de2e <scalbnf+0x62>
 802dde8:	4b2a      	ldr	r3, [pc, #168]	; (802de94 <scalbnf+0xc8>)
 802ddea:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802de98 <scalbnf+0xcc>
 802ddee:	4298      	cmp	r0, r3
 802ddf0:	ee20 0a27 	vmul.f32	s0, s0, s15
 802ddf4:	db16      	blt.n	802de24 <scalbnf+0x58>
 802ddf6:	ee10 3a10 	vmov	r3, s0
 802ddfa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802ddfe:	3a19      	subs	r2, #25
 802de00:	4402      	add	r2, r0
 802de02:	2afe      	cmp	r2, #254	; 0xfe
 802de04:	dd15      	ble.n	802de32 <scalbnf+0x66>
 802de06:	ee10 3a10 	vmov	r3, s0
 802de0a:	eddf 7a24 	vldr	s15, [pc, #144]	; 802de9c <scalbnf+0xd0>
 802de0e:	eddf 6a24 	vldr	s13, [pc, #144]	; 802dea0 <scalbnf+0xd4>
 802de12:	2b00      	cmp	r3, #0
 802de14:	eeb0 7a67 	vmov.f32	s14, s15
 802de18:	bfb8      	it	lt
 802de1a:	eef0 7a66 	vmovlt.f32	s15, s13
 802de1e:	ee27 0a27 	vmul.f32	s0, s14, s15
 802de22:	4770      	bx	lr
 802de24:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802dea4 <scalbnf+0xd8>
 802de28:	ee20 0a27 	vmul.f32	s0, s0, s15
 802de2c:	4770      	bx	lr
 802de2e:	0dd2      	lsrs	r2, r2, #23
 802de30:	e7e6      	b.n	802de00 <scalbnf+0x34>
 802de32:	2a00      	cmp	r2, #0
 802de34:	dd06      	ble.n	802de44 <scalbnf+0x78>
 802de36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802de3a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802de3e:	ee00 3a10 	vmov	s0, r3
 802de42:	4770      	bx	lr
 802de44:	f112 0f16 	cmn.w	r2, #22
 802de48:	da1a      	bge.n	802de80 <scalbnf+0xb4>
 802de4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 802de4e:	4298      	cmp	r0, r3
 802de50:	ee10 3a10 	vmov	r3, s0
 802de54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802de58:	dd0a      	ble.n	802de70 <scalbnf+0xa4>
 802de5a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 802de9c <scalbnf+0xd0>
 802de5e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 802dea0 <scalbnf+0xd4>
 802de62:	eef0 7a40 	vmov.f32	s15, s0
 802de66:	2b00      	cmp	r3, #0
 802de68:	bf18      	it	ne
 802de6a:	eeb0 0a47 	vmovne.f32	s0, s14
 802de6e:	e7db      	b.n	802de28 <scalbnf+0x5c>
 802de70:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 802dea4 <scalbnf+0xd8>
 802de74:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 802dea8 <scalbnf+0xdc>
 802de78:	eef0 7a40 	vmov.f32	s15, s0
 802de7c:	2b00      	cmp	r3, #0
 802de7e:	e7f3      	b.n	802de68 <scalbnf+0x9c>
 802de80:	3219      	adds	r2, #25
 802de82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802de86:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802de8a:	eddf 7a08 	vldr	s15, [pc, #32]	; 802deac <scalbnf+0xe0>
 802de8e:	ee07 3a10 	vmov	s14, r3
 802de92:	e7c4      	b.n	802de1e <scalbnf+0x52>
 802de94:	ffff3cb0 	.word	0xffff3cb0
 802de98:	4c000000 	.word	0x4c000000
 802de9c:	7149f2ca 	.word	0x7149f2ca
 802dea0:	f149f2ca 	.word	0xf149f2ca
 802dea4:	0da24260 	.word	0x0da24260
 802dea8:	8da24260 	.word	0x8da24260
 802deac:	33000000 	.word	0x33000000

0802deb0 <abort>:
 802deb0:	b508      	push	{r3, lr}
 802deb2:	2006      	movs	r0, #6
 802deb4:	f000 fde4 	bl	802ea80 <raise>
 802deb8:	2001      	movs	r0, #1
 802deba:	f7d6 f9a5 	bl	8004208 <_exit>
	...

0802dec0 <__assert_func>:
 802dec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802dec2:	4614      	mov	r4, r2
 802dec4:	461a      	mov	r2, r3
 802dec6:	4b09      	ldr	r3, [pc, #36]	; (802deec <__assert_func+0x2c>)
 802dec8:	681b      	ldr	r3, [r3, #0]
 802deca:	4605      	mov	r5, r0
 802decc:	68d8      	ldr	r0, [r3, #12]
 802dece:	b14c      	cbz	r4, 802dee4 <__assert_func+0x24>
 802ded0:	4b07      	ldr	r3, [pc, #28]	; (802def0 <__assert_func+0x30>)
 802ded2:	9100      	str	r1, [sp, #0]
 802ded4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802ded8:	4906      	ldr	r1, [pc, #24]	; (802def4 <__assert_func+0x34>)
 802deda:	462b      	mov	r3, r5
 802dedc:	f000 f906 	bl	802e0ec <fiprintf>
 802dee0:	f7ff ffe6 	bl	802deb0 <abort>
 802dee4:	4b04      	ldr	r3, [pc, #16]	; (802def8 <__assert_func+0x38>)
 802dee6:	461c      	mov	r4, r3
 802dee8:	e7f3      	b.n	802ded2 <__assert_func+0x12>
 802deea:	bf00      	nop
 802deec:	20000098 	.word	0x20000098
 802def0:	08033aac 	.word	0x08033aac
 802def4:	08033ab9 	.word	0x08033ab9
 802def8:	08033ae7 	.word	0x08033ae7

0802defc <atexit>:
 802defc:	2300      	movs	r3, #0
 802defe:	4601      	mov	r1, r0
 802df00:	461a      	mov	r2, r3
 802df02:	4618      	mov	r0, r3
 802df04:	f000 bef6 	b.w	802ecf4 <__register_exitproc>

0802df08 <calloc>:
 802df08:	4b02      	ldr	r3, [pc, #8]	; (802df14 <calloc+0xc>)
 802df0a:	460a      	mov	r2, r1
 802df0c:	4601      	mov	r1, r0
 802df0e:	6818      	ldr	r0, [r3, #0]
 802df10:	f000 b96c 	b.w	802e1ec <_calloc_r>
 802df14:	20000098 	.word	0x20000098

0802df18 <__cxa_atexit>:
 802df18:	b510      	push	{r4, lr}
 802df1a:	4c05      	ldr	r4, [pc, #20]	; (802df30 <__cxa_atexit+0x18>)
 802df1c:	4613      	mov	r3, r2
 802df1e:	b12c      	cbz	r4, 802df2c <__cxa_atexit+0x14>
 802df20:	460a      	mov	r2, r1
 802df22:	4601      	mov	r1, r0
 802df24:	2002      	movs	r0, #2
 802df26:	f000 fee5 	bl	802ecf4 <__register_exitproc>
 802df2a:	bd10      	pop	{r4, pc}
 802df2c:	4620      	mov	r0, r4
 802df2e:	e7fc      	b.n	802df2a <__cxa_atexit+0x12>
 802df30:	0802ecf5 	.word	0x0802ecf5

0802df34 <__errno>:
 802df34:	4b01      	ldr	r3, [pc, #4]	; (802df3c <__errno+0x8>)
 802df36:	6818      	ldr	r0, [r3, #0]
 802df38:	4770      	bx	lr
 802df3a:	bf00      	nop
 802df3c:	20000098 	.word	0x20000098

0802df40 <std>:
 802df40:	2300      	movs	r3, #0
 802df42:	b510      	push	{r4, lr}
 802df44:	4604      	mov	r4, r0
 802df46:	e9c0 3300 	strd	r3, r3, [r0]
 802df4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802df4e:	6083      	str	r3, [r0, #8]
 802df50:	8181      	strh	r1, [r0, #12]
 802df52:	6643      	str	r3, [r0, #100]	; 0x64
 802df54:	81c2      	strh	r2, [r0, #14]
 802df56:	6183      	str	r3, [r0, #24]
 802df58:	4619      	mov	r1, r3
 802df5a:	2208      	movs	r2, #8
 802df5c:	305c      	adds	r0, #92	; 0x5c
 802df5e:	f000 f93d 	bl	802e1dc <memset>
 802df62:	4b05      	ldr	r3, [pc, #20]	; (802df78 <std+0x38>)
 802df64:	6263      	str	r3, [r4, #36]	; 0x24
 802df66:	4b05      	ldr	r3, [pc, #20]	; (802df7c <std+0x3c>)
 802df68:	62a3      	str	r3, [r4, #40]	; 0x28
 802df6a:	4b05      	ldr	r3, [pc, #20]	; (802df80 <std+0x40>)
 802df6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802df6e:	4b05      	ldr	r3, [pc, #20]	; (802df84 <std+0x44>)
 802df70:	6224      	str	r4, [r4, #32]
 802df72:	6323      	str	r3, [r4, #48]	; 0x30
 802df74:	bd10      	pop	{r4, pc}
 802df76:	bf00      	nop
 802df78:	0802eab9 	.word	0x0802eab9
 802df7c:	0802eadb 	.word	0x0802eadb
 802df80:	0802eb13 	.word	0x0802eb13
 802df84:	0802eb37 	.word	0x0802eb37

0802df88 <_cleanup_r>:
 802df88:	4901      	ldr	r1, [pc, #4]	; (802df90 <_cleanup_r+0x8>)
 802df8a:	f000 b8c1 	b.w	802e110 <_fwalk_reent>
 802df8e:	bf00      	nop
 802df90:	0802eee5 	.word	0x0802eee5

0802df94 <__sfmoreglue>:
 802df94:	b570      	push	{r4, r5, r6, lr}
 802df96:	1e4a      	subs	r2, r1, #1
 802df98:	2568      	movs	r5, #104	; 0x68
 802df9a:	4355      	muls	r5, r2
 802df9c:	460e      	mov	r6, r1
 802df9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802dfa2:	f000 f983 	bl	802e2ac <_malloc_r>
 802dfa6:	4604      	mov	r4, r0
 802dfa8:	b140      	cbz	r0, 802dfbc <__sfmoreglue+0x28>
 802dfaa:	2100      	movs	r1, #0
 802dfac:	e9c0 1600 	strd	r1, r6, [r0]
 802dfb0:	300c      	adds	r0, #12
 802dfb2:	60a0      	str	r0, [r4, #8]
 802dfb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802dfb8:	f000 f910 	bl	802e1dc <memset>
 802dfbc:	4620      	mov	r0, r4
 802dfbe:	bd70      	pop	{r4, r5, r6, pc}

0802dfc0 <__sfp_lock_acquire>:
 802dfc0:	4801      	ldr	r0, [pc, #4]	; (802dfc8 <__sfp_lock_acquire+0x8>)
 802dfc2:	f000 b8ea 	b.w	802e19a <__retarget_lock_acquire_recursive>
 802dfc6:	bf00      	nop
 802dfc8:	2000b5f8 	.word	0x2000b5f8

0802dfcc <__sfp_lock_release>:
 802dfcc:	4801      	ldr	r0, [pc, #4]	; (802dfd4 <__sfp_lock_release+0x8>)
 802dfce:	f000 b8e6 	b.w	802e19e <__retarget_lock_release_recursive>
 802dfd2:	bf00      	nop
 802dfd4:	2000b5f8 	.word	0x2000b5f8

0802dfd8 <__sinit_lock_acquire>:
 802dfd8:	4801      	ldr	r0, [pc, #4]	; (802dfe0 <__sinit_lock_acquire+0x8>)
 802dfda:	f000 b8de 	b.w	802e19a <__retarget_lock_acquire_recursive>
 802dfde:	bf00      	nop
 802dfe0:	2000b5f3 	.word	0x2000b5f3

0802dfe4 <__sinit_lock_release>:
 802dfe4:	4801      	ldr	r0, [pc, #4]	; (802dfec <__sinit_lock_release+0x8>)
 802dfe6:	f000 b8da 	b.w	802e19e <__retarget_lock_release_recursive>
 802dfea:	bf00      	nop
 802dfec:	2000b5f3 	.word	0x2000b5f3

0802dff0 <__sinit>:
 802dff0:	b510      	push	{r4, lr}
 802dff2:	4604      	mov	r4, r0
 802dff4:	f7ff fff0 	bl	802dfd8 <__sinit_lock_acquire>
 802dff8:	69a3      	ldr	r3, [r4, #24]
 802dffa:	b11b      	cbz	r3, 802e004 <__sinit+0x14>
 802dffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e000:	f7ff bff0 	b.w	802dfe4 <__sinit_lock_release>
 802e004:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802e008:	6523      	str	r3, [r4, #80]	; 0x50
 802e00a:	4b13      	ldr	r3, [pc, #76]	; (802e058 <__sinit+0x68>)
 802e00c:	4a13      	ldr	r2, [pc, #76]	; (802e05c <__sinit+0x6c>)
 802e00e:	681b      	ldr	r3, [r3, #0]
 802e010:	62a2      	str	r2, [r4, #40]	; 0x28
 802e012:	42a3      	cmp	r3, r4
 802e014:	bf04      	itt	eq
 802e016:	2301      	moveq	r3, #1
 802e018:	61a3      	streq	r3, [r4, #24]
 802e01a:	4620      	mov	r0, r4
 802e01c:	f000 f820 	bl	802e060 <__sfp>
 802e020:	6060      	str	r0, [r4, #4]
 802e022:	4620      	mov	r0, r4
 802e024:	f000 f81c 	bl	802e060 <__sfp>
 802e028:	60a0      	str	r0, [r4, #8]
 802e02a:	4620      	mov	r0, r4
 802e02c:	f000 f818 	bl	802e060 <__sfp>
 802e030:	2200      	movs	r2, #0
 802e032:	60e0      	str	r0, [r4, #12]
 802e034:	2104      	movs	r1, #4
 802e036:	6860      	ldr	r0, [r4, #4]
 802e038:	f7ff ff82 	bl	802df40 <std>
 802e03c:	68a0      	ldr	r0, [r4, #8]
 802e03e:	2201      	movs	r2, #1
 802e040:	2109      	movs	r1, #9
 802e042:	f7ff ff7d 	bl	802df40 <std>
 802e046:	68e0      	ldr	r0, [r4, #12]
 802e048:	2202      	movs	r2, #2
 802e04a:	2112      	movs	r1, #18
 802e04c:	f7ff ff78 	bl	802df40 <std>
 802e050:	2301      	movs	r3, #1
 802e052:	61a3      	str	r3, [r4, #24]
 802e054:	e7d2      	b.n	802dffc <__sinit+0xc>
 802e056:	bf00      	nop
 802e058:	08033b48 	.word	0x08033b48
 802e05c:	0802df89 	.word	0x0802df89

0802e060 <__sfp>:
 802e060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e062:	4607      	mov	r7, r0
 802e064:	f7ff ffac 	bl	802dfc0 <__sfp_lock_acquire>
 802e068:	4b1e      	ldr	r3, [pc, #120]	; (802e0e4 <__sfp+0x84>)
 802e06a:	681e      	ldr	r6, [r3, #0]
 802e06c:	69b3      	ldr	r3, [r6, #24]
 802e06e:	b913      	cbnz	r3, 802e076 <__sfp+0x16>
 802e070:	4630      	mov	r0, r6
 802e072:	f7ff ffbd 	bl	802dff0 <__sinit>
 802e076:	3648      	adds	r6, #72	; 0x48
 802e078:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802e07c:	3b01      	subs	r3, #1
 802e07e:	d503      	bpl.n	802e088 <__sfp+0x28>
 802e080:	6833      	ldr	r3, [r6, #0]
 802e082:	b30b      	cbz	r3, 802e0c8 <__sfp+0x68>
 802e084:	6836      	ldr	r6, [r6, #0]
 802e086:	e7f7      	b.n	802e078 <__sfp+0x18>
 802e088:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802e08c:	b9d5      	cbnz	r5, 802e0c4 <__sfp+0x64>
 802e08e:	4b16      	ldr	r3, [pc, #88]	; (802e0e8 <__sfp+0x88>)
 802e090:	60e3      	str	r3, [r4, #12]
 802e092:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802e096:	6665      	str	r5, [r4, #100]	; 0x64
 802e098:	f000 f87e 	bl	802e198 <__retarget_lock_init_recursive>
 802e09c:	f7ff ff96 	bl	802dfcc <__sfp_lock_release>
 802e0a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802e0a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802e0a8:	6025      	str	r5, [r4, #0]
 802e0aa:	61a5      	str	r5, [r4, #24]
 802e0ac:	2208      	movs	r2, #8
 802e0ae:	4629      	mov	r1, r5
 802e0b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802e0b4:	f000 f892 	bl	802e1dc <memset>
 802e0b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802e0bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802e0c0:	4620      	mov	r0, r4
 802e0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e0c4:	3468      	adds	r4, #104	; 0x68
 802e0c6:	e7d9      	b.n	802e07c <__sfp+0x1c>
 802e0c8:	2104      	movs	r1, #4
 802e0ca:	4638      	mov	r0, r7
 802e0cc:	f7ff ff62 	bl	802df94 <__sfmoreglue>
 802e0d0:	4604      	mov	r4, r0
 802e0d2:	6030      	str	r0, [r6, #0]
 802e0d4:	2800      	cmp	r0, #0
 802e0d6:	d1d5      	bne.n	802e084 <__sfp+0x24>
 802e0d8:	f7ff ff78 	bl	802dfcc <__sfp_lock_release>
 802e0dc:	230c      	movs	r3, #12
 802e0de:	603b      	str	r3, [r7, #0]
 802e0e0:	e7ee      	b.n	802e0c0 <__sfp+0x60>
 802e0e2:	bf00      	nop
 802e0e4:	08033b48 	.word	0x08033b48
 802e0e8:	ffff0001 	.word	0xffff0001

0802e0ec <fiprintf>:
 802e0ec:	b40e      	push	{r1, r2, r3}
 802e0ee:	b503      	push	{r0, r1, lr}
 802e0f0:	4601      	mov	r1, r0
 802e0f2:	ab03      	add	r3, sp, #12
 802e0f4:	4805      	ldr	r0, [pc, #20]	; (802e10c <fiprintf+0x20>)
 802e0f6:	f853 2b04 	ldr.w	r2, [r3], #4
 802e0fa:	6800      	ldr	r0, [r0, #0]
 802e0fc:	9301      	str	r3, [sp, #4]
 802e0fe:	f000 f959 	bl	802e3b4 <_vfiprintf_r>
 802e102:	b002      	add	sp, #8
 802e104:	f85d eb04 	ldr.w	lr, [sp], #4
 802e108:	b003      	add	sp, #12
 802e10a:	4770      	bx	lr
 802e10c:	20000098 	.word	0x20000098

0802e110 <_fwalk_reent>:
 802e110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e114:	4606      	mov	r6, r0
 802e116:	4688      	mov	r8, r1
 802e118:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802e11c:	2700      	movs	r7, #0
 802e11e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802e122:	f1b9 0901 	subs.w	r9, r9, #1
 802e126:	d505      	bpl.n	802e134 <_fwalk_reent+0x24>
 802e128:	6824      	ldr	r4, [r4, #0]
 802e12a:	2c00      	cmp	r4, #0
 802e12c:	d1f7      	bne.n	802e11e <_fwalk_reent+0xe>
 802e12e:	4638      	mov	r0, r7
 802e130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e134:	89ab      	ldrh	r3, [r5, #12]
 802e136:	2b01      	cmp	r3, #1
 802e138:	d907      	bls.n	802e14a <_fwalk_reent+0x3a>
 802e13a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802e13e:	3301      	adds	r3, #1
 802e140:	d003      	beq.n	802e14a <_fwalk_reent+0x3a>
 802e142:	4629      	mov	r1, r5
 802e144:	4630      	mov	r0, r6
 802e146:	47c0      	blx	r8
 802e148:	4307      	orrs	r7, r0
 802e14a:	3568      	adds	r5, #104	; 0x68
 802e14c:	e7e9      	b.n	802e122 <_fwalk_reent+0x12>
	...

0802e150 <__libc_init_array>:
 802e150:	b570      	push	{r4, r5, r6, lr}
 802e152:	4d0d      	ldr	r5, [pc, #52]	; (802e188 <__libc_init_array+0x38>)
 802e154:	4c0d      	ldr	r4, [pc, #52]	; (802e18c <__libc_init_array+0x3c>)
 802e156:	1b64      	subs	r4, r4, r5
 802e158:	10a4      	asrs	r4, r4, #2
 802e15a:	2600      	movs	r6, #0
 802e15c:	42a6      	cmp	r6, r4
 802e15e:	d109      	bne.n	802e174 <__libc_init_array+0x24>
 802e160:	4d0b      	ldr	r5, [pc, #44]	; (802e190 <__libc_init_array+0x40>)
 802e162:	4c0c      	ldr	r4, [pc, #48]	; (802e194 <__libc_init_array+0x44>)
 802e164:	f000 ffb0 	bl	802f0c8 <_init>
 802e168:	1b64      	subs	r4, r4, r5
 802e16a:	10a4      	asrs	r4, r4, #2
 802e16c:	2600      	movs	r6, #0
 802e16e:	42a6      	cmp	r6, r4
 802e170:	d105      	bne.n	802e17e <__libc_init_array+0x2e>
 802e172:	bd70      	pop	{r4, r5, r6, pc}
 802e174:	f855 3b04 	ldr.w	r3, [r5], #4
 802e178:	4798      	blx	r3
 802e17a:	3601      	adds	r6, #1
 802e17c:	e7ee      	b.n	802e15c <__libc_init_array+0xc>
 802e17e:	f855 3b04 	ldr.w	r3, [r5], #4
 802e182:	4798      	blx	r3
 802e184:	3601      	adds	r6, #1
 802e186:	e7f2      	b.n	802e16e <__libc_init_array+0x1e>
 802e188:	080edcd0 	.word	0x080edcd0
 802e18c:	080edcd0 	.word	0x080edcd0
 802e190:	080edcd0 	.word	0x080edcd0
 802e194:	080edce4 	.word	0x080edce4

0802e198 <__retarget_lock_init_recursive>:
 802e198:	4770      	bx	lr

0802e19a <__retarget_lock_acquire_recursive>:
 802e19a:	4770      	bx	lr

0802e19c <__retarget_lock_release>:
 802e19c:	4770      	bx	lr

0802e19e <__retarget_lock_release_recursive>:
 802e19e:	4770      	bx	lr

0802e1a0 <malloc>:
 802e1a0:	4b02      	ldr	r3, [pc, #8]	; (802e1ac <malloc+0xc>)
 802e1a2:	4601      	mov	r1, r0
 802e1a4:	6818      	ldr	r0, [r3, #0]
 802e1a6:	f000 b881 	b.w	802e2ac <_malloc_r>
 802e1aa:	bf00      	nop
 802e1ac:	20000098 	.word	0x20000098

0802e1b0 <free>:
 802e1b0:	4b02      	ldr	r3, [pc, #8]	; (802e1bc <free+0xc>)
 802e1b2:	4601      	mov	r1, r0
 802e1b4:	6818      	ldr	r0, [r3, #0]
 802e1b6:	f000 b829 	b.w	802e20c <_free_r>
 802e1ba:	bf00      	nop
 802e1bc:	20000098 	.word	0x20000098

0802e1c0 <memcpy>:
 802e1c0:	440a      	add	r2, r1
 802e1c2:	4291      	cmp	r1, r2
 802e1c4:	f100 33ff 	add.w	r3, r0, #4294967295
 802e1c8:	d100      	bne.n	802e1cc <memcpy+0xc>
 802e1ca:	4770      	bx	lr
 802e1cc:	b510      	push	{r4, lr}
 802e1ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e1d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e1d6:	4291      	cmp	r1, r2
 802e1d8:	d1f9      	bne.n	802e1ce <memcpy+0xe>
 802e1da:	bd10      	pop	{r4, pc}

0802e1dc <memset>:
 802e1dc:	4402      	add	r2, r0
 802e1de:	4603      	mov	r3, r0
 802e1e0:	4293      	cmp	r3, r2
 802e1e2:	d100      	bne.n	802e1e6 <memset+0xa>
 802e1e4:	4770      	bx	lr
 802e1e6:	f803 1b01 	strb.w	r1, [r3], #1
 802e1ea:	e7f9      	b.n	802e1e0 <memset+0x4>

0802e1ec <_calloc_r>:
 802e1ec:	b513      	push	{r0, r1, r4, lr}
 802e1ee:	434a      	muls	r2, r1
 802e1f0:	4611      	mov	r1, r2
 802e1f2:	9201      	str	r2, [sp, #4]
 802e1f4:	f000 f85a 	bl	802e2ac <_malloc_r>
 802e1f8:	4604      	mov	r4, r0
 802e1fa:	b118      	cbz	r0, 802e204 <_calloc_r+0x18>
 802e1fc:	9a01      	ldr	r2, [sp, #4]
 802e1fe:	2100      	movs	r1, #0
 802e200:	f7ff ffec 	bl	802e1dc <memset>
 802e204:	4620      	mov	r0, r4
 802e206:	b002      	add	sp, #8
 802e208:	bd10      	pop	{r4, pc}
	...

0802e20c <_free_r>:
 802e20c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802e20e:	2900      	cmp	r1, #0
 802e210:	d048      	beq.n	802e2a4 <_free_r+0x98>
 802e212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e216:	9001      	str	r0, [sp, #4]
 802e218:	2b00      	cmp	r3, #0
 802e21a:	f1a1 0404 	sub.w	r4, r1, #4
 802e21e:	bfb8      	it	lt
 802e220:	18e4      	addlt	r4, r4, r3
 802e222:	f000 ff11 	bl	802f048 <__malloc_lock>
 802e226:	4a20      	ldr	r2, [pc, #128]	; (802e2a8 <_free_r+0x9c>)
 802e228:	9801      	ldr	r0, [sp, #4]
 802e22a:	6813      	ldr	r3, [r2, #0]
 802e22c:	4615      	mov	r5, r2
 802e22e:	b933      	cbnz	r3, 802e23e <_free_r+0x32>
 802e230:	6063      	str	r3, [r4, #4]
 802e232:	6014      	str	r4, [r2, #0]
 802e234:	b003      	add	sp, #12
 802e236:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e23a:	f000 bf0b 	b.w	802f054 <__malloc_unlock>
 802e23e:	42a3      	cmp	r3, r4
 802e240:	d90b      	bls.n	802e25a <_free_r+0x4e>
 802e242:	6821      	ldr	r1, [r4, #0]
 802e244:	1862      	adds	r2, r4, r1
 802e246:	4293      	cmp	r3, r2
 802e248:	bf04      	itt	eq
 802e24a:	681a      	ldreq	r2, [r3, #0]
 802e24c:	685b      	ldreq	r3, [r3, #4]
 802e24e:	6063      	str	r3, [r4, #4]
 802e250:	bf04      	itt	eq
 802e252:	1852      	addeq	r2, r2, r1
 802e254:	6022      	streq	r2, [r4, #0]
 802e256:	602c      	str	r4, [r5, #0]
 802e258:	e7ec      	b.n	802e234 <_free_r+0x28>
 802e25a:	461a      	mov	r2, r3
 802e25c:	685b      	ldr	r3, [r3, #4]
 802e25e:	b10b      	cbz	r3, 802e264 <_free_r+0x58>
 802e260:	42a3      	cmp	r3, r4
 802e262:	d9fa      	bls.n	802e25a <_free_r+0x4e>
 802e264:	6811      	ldr	r1, [r2, #0]
 802e266:	1855      	adds	r5, r2, r1
 802e268:	42a5      	cmp	r5, r4
 802e26a:	d10b      	bne.n	802e284 <_free_r+0x78>
 802e26c:	6824      	ldr	r4, [r4, #0]
 802e26e:	4421      	add	r1, r4
 802e270:	1854      	adds	r4, r2, r1
 802e272:	42a3      	cmp	r3, r4
 802e274:	6011      	str	r1, [r2, #0]
 802e276:	d1dd      	bne.n	802e234 <_free_r+0x28>
 802e278:	681c      	ldr	r4, [r3, #0]
 802e27a:	685b      	ldr	r3, [r3, #4]
 802e27c:	6053      	str	r3, [r2, #4]
 802e27e:	4421      	add	r1, r4
 802e280:	6011      	str	r1, [r2, #0]
 802e282:	e7d7      	b.n	802e234 <_free_r+0x28>
 802e284:	d902      	bls.n	802e28c <_free_r+0x80>
 802e286:	230c      	movs	r3, #12
 802e288:	6003      	str	r3, [r0, #0]
 802e28a:	e7d3      	b.n	802e234 <_free_r+0x28>
 802e28c:	6825      	ldr	r5, [r4, #0]
 802e28e:	1961      	adds	r1, r4, r5
 802e290:	428b      	cmp	r3, r1
 802e292:	bf04      	itt	eq
 802e294:	6819      	ldreq	r1, [r3, #0]
 802e296:	685b      	ldreq	r3, [r3, #4]
 802e298:	6063      	str	r3, [r4, #4]
 802e29a:	bf04      	itt	eq
 802e29c:	1949      	addeq	r1, r1, r5
 802e29e:	6021      	streq	r1, [r4, #0]
 802e2a0:	6054      	str	r4, [r2, #4]
 802e2a2:	e7c7      	b.n	802e234 <_free_r+0x28>
 802e2a4:	b003      	add	sp, #12
 802e2a6:	bd30      	pop	{r4, r5, pc}
 802e2a8:	20009898 	.word	0x20009898

0802e2ac <_malloc_r>:
 802e2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e2ae:	1ccd      	adds	r5, r1, #3
 802e2b0:	f025 0503 	bic.w	r5, r5, #3
 802e2b4:	3508      	adds	r5, #8
 802e2b6:	2d0c      	cmp	r5, #12
 802e2b8:	bf38      	it	cc
 802e2ba:	250c      	movcc	r5, #12
 802e2bc:	2d00      	cmp	r5, #0
 802e2be:	4606      	mov	r6, r0
 802e2c0:	db01      	blt.n	802e2c6 <_malloc_r+0x1a>
 802e2c2:	42a9      	cmp	r1, r5
 802e2c4:	d903      	bls.n	802e2ce <_malloc_r+0x22>
 802e2c6:	230c      	movs	r3, #12
 802e2c8:	6033      	str	r3, [r6, #0]
 802e2ca:	2000      	movs	r0, #0
 802e2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e2ce:	f000 febb 	bl	802f048 <__malloc_lock>
 802e2d2:	4921      	ldr	r1, [pc, #132]	; (802e358 <_malloc_r+0xac>)
 802e2d4:	680a      	ldr	r2, [r1, #0]
 802e2d6:	4614      	mov	r4, r2
 802e2d8:	b99c      	cbnz	r4, 802e302 <_malloc_r+0x56>
 802e2da:	4f20      	ldr	r7, [pc, #128]	; (802e35c <_malloc_r+0xb0>)
 802e2dc:	683b      	ldr	r3, [r7, #0]
 802e2de:	b923      	cbnz	r3, 802e2ea <_malloc_r+0x3e>
 802e2e0:	4621      	mov	r1, r4
 802e2e2:	4630      	mov	r0, r6
 802e2e4:	f000 fb94 	bl	802ea10 <_sbrk_r>
 802e2e8:	6038      	str	r0, [r7, #0]
 802e2ea:	4629      	mov	r1, r5
 802e2ec:	4630      	mov	r0, r6
 802e2ee:	f000 fb8f 	bl	802ea10 <_sbrk_r>
 802e2f2:	1c43      	adds	r3, r0, #1
 802e2f4:	d123      	bne.n	802e33e <_malloc_r+0x92>
 802e2f6:	230c      	movs	r3, #12
 802e2f8:	6033      	str	r3, [r6, #0]
 802e2fa:	4630      	mov	r0, r6
 802e2fc:	f000 feaa 	bl	802f054 <__malloc_unlock>
 802e300:	e7e3      	b.n	802e2ca <_malloc_r+0x1e>
 802e302:	6823      	ldr	r3, [r4, #0]
 802e304:	1b5b      	subs	r3, r3, r5
 802e306:	d417      	bmi.n	802e338 <_malloc_r+0x8c>
 802e308:	2b0b      	cmp	r3, #11
 802e30a:	d903      	bls.n	802e314 <_malloc_r+0x68>
 802e30c:	6023      	str	r3, [r4, #0]
 802e30e:	441c      	add	r4, r3
 802e310:	6025      	str	r5, [r4, #0]
 802e312:	e004      	b.n	802e31e <_malloc_r+0x72>
 802e314:	6863      	ldr	r3, [r4, #4]
 802e316:	42a2      	cmp	r2, r4
 802e318:	bf0c      	ite	eq
 802e31a:	600b      	streq	r3, [r1, #0]
 802e31c:	6053      	strne	r3, [r2, #4]
 802e31e:	4630      	mov	r0, r6
 802e320:	f000 fe98 	bl	802f054 <__malloc_unlock>
 802e324:	f104 000b 	add.w	r0, r4, #11
 802e328:	1d23      	adds	r3, r4, #4
 802e32a:	f020 0007 	bic.w	r0, r0, #7
 802e32e:	1ac2      	subs	r2, r0, r3
 802e330:	d0cc      	beq.n	802e2cc <_malloc_r+0x20>
 802e332:	1a1b      	subs	r3, r3, r0
 802e334:	50a3      	str	r3, [r4, r2]
 802e336:	e7c9      	b.n	802e2cc <_malloc_r+0x20>
 802e338:	4622      	mov	r2, r4
 802e33a:	6864      	ldr	r4, [r4, #4]
 802e33c:	e7cc      	b.n	802e2d8 <_malloc_r+0x2c>
 802e33e:	1cc4      	adds	r4, r0, #3
 802e340:	f024 0403 	bic.w	r4, r4, #3
 802e344:	42a0      	cmp	r0, r4
 802e346:	d0e3      	beq.n	802e310 <_malloc_r+0x64>
 802e348:	1a21      	subs	r1, r4, r0
 802e34a:	4630      	mov	r0, r6
 802e34c:	f000 fb60 	bl	802ea10 <_sbrk_r>
 802e350:	3001      	adds	r0, #1
 802e352:	d1dd      	bne.n	802e310 <_malloc_r+0x64>
 802e354:	e7cf      	b.n	802e2f6 <_malloc_r+0x4a>
 802e356:	bf00      	nop
 802e358:	20009898 	.word	0x20009898
 802e35c:	2000989c 	.word	0x2000989c

0802e360 <__sfputc_r>:
 802e360:	6893      	ldr	r3, [r2, #8]
 802e362:	3b01      	subs	r3, #1
 802e364:	2b00      	cmp	r3, #0
 802e366:	b410      	push	{r4}
 802e368:	6093      	str	r3, [r2, #8]
 802e36a:	da08      	bge.n	802e37e <__sfputc_r+0x1e>
 802e36c:	6994      	ldr	r4, [r2, #24]
 802e36e:	42a3      	cmp	r3, r4
 802e370:	db01      	blt.n	802e376 <__sfputc_r+0x16>
 802e372:	290a      	cmp	r1, #10
 802e374:	d103      	bne.n	802e37e <__sfputc_r+0x1e>
 802e376:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e37a:	f000 bbe9 	b.w	802eb50 <__swbuf_r>
 802e37e:	6813      	ldr	r3, [r2, #0]
 802e380:	1c58      	adds	r0, r3, #1
 802e382:	6010      	str	r0, [r2, #0]
 802e384:	7019      	strb	r1, [r3, #0]
 802e386:	4608      	mov	r0, r1
 802e388:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e38c:	4770      	bx	lr

0802e38e <__sfputs_r>:
 802e38e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e390:	4606      	mov	r6, r0
 802e392:	460f      	mov	r7, r1
 802e394:	4614      	mov	r4, r2
 802e396:	18d5      	adds	r5, r2, r3
 802e398:	42ac      	cmp	r4, r5
 802e39a:	d101      	bne.n	802e3a0 <__sfputs_r+0x12>
 802e39c:	2000      	movs	r0, #0
 802e39e:	e007      	b.n	802e3b0 <__sfputs_r+0x22>
 802e3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e3a4:	463a      	mov	r2, r7
 802e3a6:	4630      	mov	r0, r6
 802e3a8:	f7ff ffda 	bl	802e360 <__sfputc_r>
 802e3ac:	1c43      	adds	r3, r0, #1
 802e3ae:	d1f3      	bne.n	802e398 <__sfputs_r+0xa>
 802e3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802e3b4 <_vfiprintf_r>:
 802e3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e3b8:	460d      	mov	r5, r1
 802e3ba:	b09d      	sub	sp, #116	; 0x74
 802e3bc:	4614      	mov	r4, r2
 802e3be:	4698      	mov	r8, r3
 802e3c0:	4606      	mov	r6, r0
 802e3c2:	b118      	cbz	r0, 802e3cc <_vfiprintf_r+0x18>
 802e3c4:	6983      	ldr	r3, [r0, #24]
 802e3c6:	b90b      	cbnz	r3, 802e3cc <_vfiprintf_r+0x18>
 802e3c8:	f7ff fe12 	bl	802dff0 <__sinit>
 802e3cc:	4b89      	ldr	r3, [pc, #548]	; (802e5f4 <_vfiprintf_r+0x240>)
 802e3ce:	429d      	cmp	r5, r3
 802e3d0:	d11b      	bne.n	802e40a <_vfiprintf_r+0x56>
 802e3d2:	6875      	ldr	r5, [r6, #4]
 802e3d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e3d6:	07d9      	lsls	r1, r3, #31
 802e3d8:	d405      	bmi.n	802e3e6 <_vfiprintf_r+0x32>
 802e3da:	89ab      	ldrh	r3, [r5, #12]
 802e3dc:	059a      	lsls	r2, r3, #22
 802e3de:	d402      	bmi.n	802e3e6 <_vfiprintf_r+0x32>
 802e3e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e3e2:	f7ff feda 	bl	802e19a <__retarget_lock_acquire_recursive>
 802e3e6:	89ab      	ldrh	r3, [r5, #12]
 802e3e8:	071b      	lsls	r3, r3, #28
 802e3ea:	d501      	bpl.n	802e3f0 <_vfiprintf_r+0x3c>
 802e3ec:	692b      	ldr	r3, [r5, #16]
 802e3ee:	b9eb      	cbnz	r3, 802e42c <_vfiprintf_r+0x78>
 802e3f0:	4629      	mov	r1, r5
 802e3f2:	4630      	mov	r0, r6
 802e3f4:	f000 fc10 	bl	802ec18 <__swsetup_r>
 802e3f8:	b1c0      	cbz	r0, 802e42c <_vfiprintf_r+0x78>
 802e3fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e3fc:	07dc      	lsls	r4, r3, #31
 802e3fe:	d50e      	bpl.n	802e41e <_vfiprintf_r+0x6a>
 802e400:	f04f 30ff 	mov.w	r0, #4294967295
 802e404:	b01d      	add	sp, #116	; 0x74
 802e406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e40a:	4b7b      	ldr	r3, [pc, #492]	; (802e5f8 <_vfiprintf_r+0x244>)
 802e40c:	429d      	cmp	r5, r3
 802e40e:	d101      	bne.n	802e414 <_vfiprintf_r+0x60>
 802e410:	68b5      	ldr	r5, [r6, #8]
 802e412:	e7df      	b.n	802e3d4 <_vfiprintf_r+0x20>
 802e414:	4b79      	ldr	r3, [pc, #484]	; (802e5fc <_vfiprintf_r+0x248>)
 802e416:	429d      	cmp	r5, r3
 802e418:	bf08      	it	eq
 802e41a:	68f5      	ldreq	r5, [r6, #12]
 802e41c:	e7da      	b.n	802e3d4 <_vfiprintf_r+0x20>
 802e41e:	89ab      	ldrh	r3, [r5, #12]
 802e420:	0598      	lsls	r0, r3, #22
 802e422:	d4ed      	bmi.n	802e400 <_vfiprintf_r+0x4c>
 802e424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e426:	f7ff feba 	bl	802e19e <__retarget_lock_release_recursive>
 802e42a:	e7e9      	b.n	802e400 <_vfiprintf_r+0x4c>
 802e42c:	2300      	movs	r3, #0
 802e42e:	9309      	str	r3, [sp, #36]	; 0x24
 802e430:	2320      	movs	r3, #32
 802e432:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802e436:	f8cd 800c 	str.w	r8, [sp, #12]
 802e43a:	2330      	movs	r3, #48	; 0x30
 802e43c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802e600 <_vfiprintf_r+0x24c>
 802e440:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802e444:	f04f 0901 	mov.w	r9, #1
 802e448:	4623      	mov	r3, r4
 802e44a:	469a      	mov	sl, r3
 802e44c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e450:	b10a      	cbz	r2, 802e456 <_vfiprintf_r+0xa2>
 802e452:	2a25      	cmp	r2, #37	; 0x25
 802e454:	d1f9      	bne.n	802e44a <_vfiprintf_r+0x96>
 802e456:	ebba 0b04 	subs.w	fp, sl, r4
 802e45a:	d00b      	beq.n	802e474 <_vfiprintf_r+0xc0>
 802e45c:	465b      	mov	r3, fp
 802e45e:	4622      	mov	r2, r4
 802e460:	4629      	mov	r1, r5
 802e462:	4630      	mov	r0, r6
 802e464:	f7ff ff93 	bl	802e38e <__sfputs_r>
 802e468:	3001      	adds	r0, #1
 802e46a:	f000 80aa 	beq.w	802e5c2 <_vfiprintf_r+0x20e>
 802e46e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e470:	445a      	add	r2, fp
 802e472:	9209      	str	r2, [sp, #36]	; 0x24
 802e474:	f89a 3000 	ldrb.w	r3, [sl]
 802e478:	2b00      	cmp	r3, #0
 802e47a:	f000 80a2 	beq.w	802e5c2 <_vfiprintf_r+0x20e>
 802e47e:	2300      	movs	r3, #0
 802e480:	f04f 32ff 	mov.w	r2, #4294967295
 802e484:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802e488:	f10a 0a01 	add.w	sl, sl, #1
 802e48c:	9304      	str	r3, [sp, #16]
 802e48e:	9307      	str	r3, [sp, #28]
 802e490:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802e494:	931a      	str	r3, [sp, #104]	; 0x68
 802e496:	4654      	mov	r4, sl
 802e498:	2205      	movs	r2, #5
 802e49a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e49e:	4858      	ldr	r0, [pc, #352]	; (802e600 <_vfiprintf_r+0x24c>)
 802e4a0:	f7d1 feae 	bl	8000200 <memchr>
 802e4a4:	9a04      	ldr	r2, [sp, #16]
 802e4a6:	b9d8      	cbnz	r0, 802e4e0 <_vfiprintf_r+0x12c>
 802e4a8:	06d1      	lsls	r1, r2, #27
 802e4aa:	bf44      	itt	mi
 802e4ac:	2320      	movmi	r3, #32
 802e4ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e4b2:	0713      	lsls	r3, r2, #28
 802e4b4:	bf44      	itt	mi
 802e4b6:	232b      	movmi	r3, #43	; 0x2b
 802e4b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e4bc:	f89a 3000 	ldrb.w	r3, [sl]
 802e4c0:	2b2a      	cmp	r3, #42	; 0x2a
 802e4c2:	d015      	beq.n	802e4f0 <_vfiprintf_r+0x13c>
 802e4c4:	9a07      	ldr	r2, [sp, #28]
 802e4c6:	4654      	mov	r4, sl
 802e4c8:	2000      	movs	r0, #0
 802e4ca:	f04f 0c0a 	mov.w	ip, #10
 802e4ce:	4621      	mov	r1, r4
 802e4d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e4d4:	3b30      	subs	r3, #48	; 0x30
 802e4d6:	2b09      	cmp	r3, #9
 802e4d8:	d94e      	bls.n	802e578 <_vfiprintf_r+0x1c4>
 802e4da:	b1b0      	cbz	r0, 802e50a <_vfiprintf_r+0x156>
 802e4dc:	9207      	str	r2, [sp, #28]
 802e4de:	e014      	b.n	802e50a <_vfiprintf_r+0x156>
 802e4e0:	eba0 0308 	sub.w	r3, r0, r8
 802e4e4:	fa09 f303 	lsl.w	r3, r9, r3
 802e4e8:	4313      	orrs	r3, r2
 802e4ea:	9304      	str	r3, [sp, #16]
 802e4ec:	46a2      	mov	sl, r4
 802e4ee:	e7d2      	b.n	802e496 <_vfiprintf_r+0xe2>
 802e4f0:	9b03      	ldr	r3, [sp, #12]
 802e4f2:	1d19      	adds	r1, r3, #4
 802e4f4:	681b      	ldr	r3, [r3, #0]
 802e4f6:	9103      	str	r1, [sp, #12]
 802e4f8:	2b00      	cmp	r3, #0
 802e4fa:	bfbb      	ittet	lt
 802e4fc:	425b      	neglt	r3, r3
 802e4fe:	f042 0202 	orrlt.w	r2, r2, #2
 802e502:	9307      	strge	r3, [sp, #28]
 802e504:	9307      	strlt	r3, [sp, #28]
 802e506:	bfb8      	it	lt
 802e508:	9204      	strlt	r2, [sp, #16]
 802e50a:	7823      	ldrb	r3, [r4, #0]
 802e50c:	2b2e      	cmp	r3, #46	; 0x2e
 802e50e:	d10c      	bne.n	802e52a <_vfiprintf_r+0x176>
 802e510:	7863      	ldrb	r3, [r4, #1]
 802e512:	2b2a      	cmp	r3, #42	; 0x2a
 802e514:	d135      	bne.n	802e582 <_vfiprintf_r+0x1ce>
 802e516:	9b03      	ldr	r3, [sp, #12]
 802e518:	1d1a      	adds	r2, r3, #4
 802e51a:	681b      	ldr	r3, [r3, #0]
 802e51c:	9203      	str	r2, [sp, #12]
 802e51e:	2b00      	cmp	r3, #0
 802e520:	bfb8      	it	lt
 802e522:	f04f 33ff 	movlt.w	r3, #4294967295
 802e526:	3402      	adds	r4, #2
 802e528:	9305      	str	r3, [sp, #20]
 802e52a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802e610 <_vfiprintf_r+0x25c>
 802e52e:	7821      	ldrb	r1, [r4, #0]
 802e530:	2203      	movs	r2, #3
 802e532:	4650      	mov	r0, sl
 802e534:	f7d1 fe64 	bl	8000200 <memchr>
 802e538:	b140      	cbz	r0, 802e54c <_vfiprintf_r+0x198>
 802e53a:	2340      	movs	r3, #64	; 0x40
 802e53c:	eba0 000a 	sub.w	r0, r0, sl
 802e540:	fa03 f000 	lsl.w	r0, r3, r0
 802e544:	9b04      	ldr	r3, [sp, #16]
 802e546:	4303      	orrs	r3, r0
 802e548:	3401      	adds	r4, #1
 802e54a:	9304      	str	r3, [sp, #16]
 802e54c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e550:	482c      	ldr	r0, [pc, #176]	; (802e604 <_vfiprintf_r+0x250>)
 802e552:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802e556:	2206      	movs	r2, #6
 802e558:	f7d1 fe52 	bl	8000200 <memchr>
 802e55c:	2800      	cmp	r0, #0
 802e55e:	d03f      	beq.n	802e5e0 <_vfiprintf_r+0x22c>
 802e560:	4b29      	ldr	r3, [pc, #164]	; (802e608 <_vfiprintf_r+0x254>)
 802e562:	bb1b      	cbnz	r3, 802e5ac <_vfiprintf_r+0x1f8>
 802e564:	9b03      	ldr	r3, [sp, #12]
 802e566:	3307      	adds	r3, #7
 802e568:	f023 0307 	bic.w	r3, r3, #7
 802e56c:	3308      	adds	r3, #8
 802e56e:	9303      	str	r3, [sp, #12]
 802e570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e572:	443b      	add	r3, r7
 802e574:	9309      	str	r3, [sp, #36]	; 0x24
 802e576:	e767      	b.n	802e448 <_vfiprintf_r+0x94>
 802e578:	fb0c 3202 	mla	r2, ip, r2, r3
 802e57c:	460c      	mov	r4, r1
 802e57e:	2001      	movs	r0, #1
 802e580:	e7a5      	b.n	802e4ce <_vfiprintf_r+0x11a>
 802e582:	2300      	movs	r3, #0
 802e584:	3401      	adds	r4, #1
 802e586:	9305      	str	r3, [sp, #20]
 802e588:	4619      	mov	r1, r3
 802e58a:	f04f 0c0a 	mov.w	ip, #10
 802e58e:	4620      	mov	r0, r4
 802e590:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e594:	3a30      	subs	r2, #48	; 0x30
 802e596:	2a09      	cmp	r2, #9
 802e598:	d903      	bls.n	802e5a2 <_vfiprintf_r+0x1ee>
 802e59a:	2b00      	cmp	r3, #0
 802e59c:	d0c5      	beq.n	802e52a <_vfiprintf_r+0x176>
 802e59e:	9105      	str	r1, [sp, #20]
 802e5a0:	e7c3      	b.n	802e52a <_vfiprintf_r+0x176>
 802e5a2:	fb0c 2101 	mla	r1, ip, r1, r2
 802e5a6:	4604      	mov	r4, r0
 802e5a8:	2301      	movs	r3, #1
 802e5aa:	e7f0      	b.n	802e58e <_vfiprintf_r+0x1da>
 802e5ac:	ab03      	add	r3, sp, #12
 802e5ae:	9300      	str	r3, [sp, #0]
 802e5b0:	462a      	mov	r2, r5
 802e5b2:	4b16      	ldr	r3, [pc, #88]	; (802e60c <_vfiprintf_r+0x258>)
 802e5b4:	a904      	add	r1, sp, #16
 802e5b6:	4630      	mov	r0, r6
 802e5b8:	f3af 8000 	nop.w
 802e5bc:	4607      	mov	r7, r0
 802e5be:	1c78      	adds	r0, r7, #1
 802e5c0:	d1d6      	bne.n	802e570 <_vfiprintf_r+0x1bc>
 802e5c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e5c4:	07d9      	lsls	r1, r3, #31
 802e5c6:	d405      	bmi.n	802e5d4 <_vfiprintf_r+0x220>
 802e5c8:	89ab      	ldrh	r3, [r5, #12]
 802e5ca:	059a      	lsls	r2, r3, #22
 802e5cc:	d402      	bmi.n	802e5d4 <_vfiprintf_r+0x220>
 802e5ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e5d0:	f7ff fde5 	bl	802e19e <__retarget_lock_release_recursive>
 802e5d4:	89ab      	ldrh	r3, [r5, #12]
 802e5d6:	065b      	lsls	r3, r3, #25
 802e5d8:	f53f af12 	bmi.w	802e400 <_vfiprintf_r+0x4c>
 802e5dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e5de:	e711      	b.n	802e404 <_vfiprintf_r+0x50>
 802e5e0:	ab03      	add	r3, sp, #12
 802e5e2:	9300      	str	r3, [sp, #0]
 802e5e4:	462a      	mov	r2, r5
 802e5e6:	4b09      	ldr	r3, [pc, #36]	; (802e60c <_vfiprintf_r+0x258>)
 802e5e8:	a904      	add	r1, sp, #16
 802e5ea:	4630      	mov	r0, r6
 802e5ec:	f000 f880 	bl	802e6f0 <_printf_i>
 802e5f0:	e7e4      	b.n	802e5bc <_vfiprintf_r+0x208>
 802e5f2:	bf00      	nop
 802e5f4:	08033b08 	.word	0x08033b08
 802e5f8:	08033b28 	.word	0x08033b28
 802e5fc:	08033ae8 	.word	0x08033ae8
 802e600:	08033b4c 	.word	0x08033b4c
 802e604:	08033b56 	.word	0x08033b56
 802e608:	00000000 	.word	0x00000000
 802e60c:	0802e38f 	.word	0x0802e38f
 802e610:	08033b52 	.word	0x08033b52

0802e614 <_printf_common>:
 802e614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e618:	4616      	mov	r6, r2
 802e61a:	4699      	mov	r9, r3
 802e61c:	688a      	ldr	r2, [r1, #8]
 802e61e:	690b      	ldr	r3, [r1, #16]
 802e620:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802e624:	4293      	cmp	r3, r2
 802e626:	bfb8      	it	lt
 802e628:	4613      	movlt	r3, r2
 802e62a:	6033      	str	r3, [r6, #0]
 802e62c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802e630:	4607      	mov	r7, r0
 802e632:	460c      	mov	r4, r1
 802e634:	b10a      	cbz	r2, 802e63a <_printf_common+0x26>
 802e636:	3301      	adds	r3, #1
 802e638:	6033      	str	r3, [r6, #0]
 802e63a:	6823      	ldr	r3, [r4, #0]
 802e63c:	0699      	lsls	r1, r3, #26
 802e63e:	bf42      	ittt	mi
 802e640:	6833      	ldrmi	r3, [r6, #0]
 802e642:	3302      	addmi	r3, #2
 802e644:	6033      	strmi	r3, [r6, #0]
 802e646:	6825      	ldr	r5, [r4, #0]
 802e648:	f015 0506 	ands.w	r5, r5, #6
 802e64c:	d106      	bne.n	802e65c <_printf_common+0x48>
 802e64e:	f104 0a19 	add.w	sl, r4, #25
 802e652:	68e3      	ldr	r3, [r4, #12]
 802e654:	6832      	ldr	r2, [r6, #0]
 802e656:	1a9b      	subs	r3, r3, r2
 802e658:	42ab      	cmp	r3, r5
 802e65a:	dc26      	bgt.n	802e6aa <_printf_common+0x96>
 802e65c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802e660:	1e13      	subs	r3, r2, #0
 802e662:	6822      	ldr	r2, [r4, #0]
 802e664:	bf18      	it	ne
 802e666:	2301      	movne	r3, #1
 802e668:	0692      	lsls	r2, r2, #26
 802e66a:	d42b      	bmi.n	802e6c4 <_printf_common+0xb0>
 802e66c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802e670:	4649      	mov	r1, r9
 802e672:	4638      	mov	r0, r7
 802e674:	47c0      	blx	r8
 802e676:	3001      	adds	r0, #1
 802e678:	d01e      	beq.n	802e6b8 <_printf_common+0xa4>
 802e67a:	6823      	ldr	r3, [r4, #0]
 802e67c:	68e5      	ldr	r5, [r4, #12]
 802e67e:	6832      	ldr	r2, [r6, #0]
 802e680:	f003 0306 	and.w	r3, r3, #6
 802e684:	2b04      	cmp	r3, #4
 802e686:	bf08      	it	eq
 802e688:	1aad      	subeq	r5, r5, r2
 802e68a:	68a3      	ldr	r3, [r4, #8]
 802e68c:	6922      	ldr	r2, [r4, #16]
 802e68e:	bf0c      	ite	eq
 802e690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802e694:	2500      	movne	r5, #0
 802e696:	4293      	cmp	r3, r2
 802e698:	bfc4      	itt	gt
 802e69a:	1a9b      	subgt	r3, r3, r2
 802e69c:	18ed      	addgt	r5, r5, r3
 802e69e:	2600      	movs	r6, #0
 802e6a0:	341a      	adds	r4, #26
 802e6a2:	42b5      	cmp	r5, r6
 802e6a4:	d11a      	bne.n	802e6dc <_printf_common+0xc8>
 802e6a6:	2000      	movs	r0, #0
 802e6a8:	e008      	b.n	802e6bc <_printf_common+0xa8>
 802e6aa:	2301      	movs	r3, #1
 802e6ac:	4652      	mov	r2, sl
 802e6ae:	4649      	mov	r1, r9
 802e6b0:	4638      	mov	r0, r7
 802e6b2:	47c0      	blx	r8
 802e6b4:	3001      	adds	r0, #1
 802e6b6:	d103      	bne.n	802e6c0 <_printf_common+0xac>
 802e6b8:	f04f 30ff 	mov.w	r0, #4294967295
 802e6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e6c0:	3501      	adds	r5, #1
 802e6c2:	e7c6      	b.n	802e652 <_printf_common+0x3e>
 802e6c4:	18e1      	adds	r1, r4, r3
 802e6c6:	1c5a      	adds	r2, r3, #1
 802e6c8:	2030      	movs	r0, #48	; 0x30
 802e6ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802e6ce:	4422      	add	r2, r4
 802e6d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802e6d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802e6d8:	3302      	adds	r3, #2
 802e6da:	e7c7      	b.n	802e66c <_printf_common+0x58>
 802e6dc:	2301      	movs	r3, #1
 802e6de:	4622      	mov	r2, r4
 802e6e0:	4649      	mov	r1, r9
 802e6e2:	4638      	mov	r0, r7
 802e6e4:	47c0      	blx	r8
 802e6e6:	3001      	adds	r0, #1
 802e6e8:	d0e6      	beq.n	802e6b8 <_printf_common+0xa4>
 802e6ea:	3601      	adds	r6, #1
 802e6ec:	e7d9      	b.n	802e6a2 <_printf_common+0x8e>
	...

0802e6f0 <_printf_i>:
 802e6f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802e6f4:	460c      	mov	r4, r1
 802e6f6:	4691      	mov	r9, r2
 802e6f8:	7e27      	ldrb	r7, [r4, #24]
 802e6fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 802e6fc:	2f78      	cmp	r7, #120	; 0x78
 802e6fe:	4680      	mov	r8, r0
 802e700:	469a      	mov	sl, r3
 802e702:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802e706:	d807      	bhi.n	802e718 <_printf_i+0x28>
 802e708:	2f62      	cmp	r7, #98	; 0x62
 802e70a:	d80a      	bhi.n	802e722 <_printf_i+0x32>
 802e70c:	2f00      	cmp	r7, #0
 802e70e:	f000 80d8 	beq.w	802e8c2 <_printf_i+0x1d2>
 802e712:	2f58      	cmp	r7, #88	; 0x58
 802e714:	f000 80a3 	beq.w	802e85e <_printf_i+0x16e>
 802e718:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802e71c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802e720:	e03a      	b.n	802e798 <_printf_i+0xa8>
 802e722:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802e726:	2b15      	cmp	r3, #21
 802e728:	d8f6      	bhi.n	802e718 <_printf_i+0x28>
 802e72a:	a001      	add	r0, pc, #4	; (adr r0, 802e730 <_printf_i+0x40>)
 802e72c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802e730:	0802e789 	.word	0x0802e789
 802e734:	0802e79d 	.word	0x0802e79d
 802e738:	0802e719 	.word	0x0802e719
 802e73c:	0802e719 	.word	0x0802e719
 802e740:	0802e719 	.word	0x0802e719
 802e744:	0802e719 	.word	0x0802e719
 802e748:	0802e79d 	.word	0x0802e79d
 802e74c:	0802e719 	.word	0x0802e719
 802e750:	0802e719 	.word	0x0802e719
 802e754:	0802e719 	.word	0x0802e719
 802e758:	0802e719 	.word	0x0802e719
 802e75c:	0802e8a9 	.word	0x0802e8a9
 802e760:	0802e7cd 	.word	0x0802e7cd
 802e764:	0802e88b 	.word	0x0802e88b
 802e768:	0802e719 	.word	0x0802e719
 802e76c:	0802e719 	.word	0x0802e719
 802e770:	0802e8cb 	.word	0x0802e8cb
 802e774:	0802e719 	.word	0x0802e719
 802e778:	0802e7cd 	.word	0x0802e7cd
 802e77c:	0802e719 	.word	0x0802e719
 802e780:	0802e719 	.word	0x0802e719
 802e784:	0802e893 	.word	0x0802e893
 802e788:	680b      	ldr	r3, [r1, #0]
 802e78a:	1d1a      	adds	r2, r3, #4
 802e78c:	681b      	ldr	r3, [r3, #0]
 802e78e:	600a      	str	r2, [r1, #0]
 802e790:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802e794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802e798:	2301      	movs	r3, #1
 802e79a:	e0a3      	b.n	802e8e4 <_printf_i+0x1f4>
 802e79c:	6825      	ldr	r5, [r4, #0]
 802e79e:	6808      	ldr	r0, [r1, #0]
 802e7a0:	062e      	lsls	r6, r5, #24
 802e7a2:	f100 0304 	add.w	r3, r0, #4
 802e7a6:	d50a      	bpl.n	802e7be <_printf_i+0xce>
 802e7a8:	6805      	ldr	r5, [r0, #0]
 802e7aa:	600b      	str	r3, [r1, #0]
 802e7ac:	2d00      	cmp	r5, #0
 802e7ae:	da03      	bge.n	802e7b8 <_printf_i+0xc8>
 802e7b0:	232d      	movs	r3, #45	; 0x2d
 802e7b2:	426d      	negs	r5, r5
 802e7b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e7b8:	485e      	ldr	r0, [pc, #376]	; (802e934 <_printf_i+0x244>)
 802e7ba:	230a      	movs	r3, #10
 802e7bc:	e019      	b.n	802e7f2 <_printf_i+0x102>
 802e7be:	f015 0f40 	tst.w	r5, #64	; 0x40
 802e7c2:	6805      	ldr	r5, [r0, #0]
 802e7c4:	600b      	str	r3, [r1, #0]
 802e7c6:	bf18      	it	ne
 802e7c8:	b22d      	sxthne	r5, r5
 802e7ca:	e7ef      	b.n	802e7ac <_printf_i+0xbc>
 802e7cc:	680b      	ldr	r3, [r1, #0]
 802e7ce:	6825      	ldr	r5, [r4, #0]
 802e7d0:	1d18      	adds	r0, r3, #4
 802e7d2:	6008      	str	r0, [r1, #0]
 802e7d4:	0628      	lsls	r0, r5, #24
 802e7d6:	d501      	bpl.n	802e7dc <_printf_i+0xec>
 802e7d8:	681d      	ldr	r5, [r3, #0]
 802e7da:	e002      	b.n	802e7e2 <_printf_i+0xf2>
 802e7dc:	0669      	lsls	r1, r5, #25
 802e7de:	d5fb      	bpl.n	802e7d8 <_printf_i+0xe8>
 802e7e0:	881d      	ldrh	r5, [r3, #0]
 802e7e2:	4854      	ldr	r0, [pc, #336]	; (802e934 <_printf_i+0x244>)
 802e7e4:	2f6f      	cmp	r7, #111	; 0x6f
 802e7e6:	bf0c      	ite	eq
 802e7e8:	2308      	moveq	r3, #8
 802e7ea:	230a      	movne	r3, #10
 802e7ec:	2100      	movs	r1, #0
 802e7ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802e7f2:	6866      	ldr	r6, [r4, #4]
 802e7f4:	60a6      	str	r6, [r4, #8]
 802e7f6:	2e00      	cmp	r6, #0
 802e7f8:	bfa2      	ittt	ge
 802e7fa:	6821      	ldrge	r1, [r4, #0]
 802e7fc:	f021 0104 	bicge.w	r1, r1, #4
 802e800:	6021      	strge	r1, [r4, #0]
 802e802:	b90d      	cbnz	r5, 802e808 <_printf_i+0x118>
 802e804:	2e00      	cmp	r6, #0
 802e806:	d04d      	beq.n	802e8a4 <_printf_i+0x1b4>
 802e808:	4616      	mov	r6, r2
 802e80a:	fbb5 f1f3 	udiv	r1, r5, r3
 802e80e:	fb03 5711 	mls	r7, r3, r1, r5
 802e812:	5dc7      	ldrb	r7, [r0, r7]
 802e814:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802e818:	462f      	mov	r7, r5
 802e81a:	42bb      	cmp	r3, r7
 802e81c:	460d      	mov	r5, r1
 802e81e:	d9f4      	bls.n	802e80a <_printf_i+0x11a>
 802e820:	2b08      	cmp	r3, #8
 802e822:	d10b      	bne.n	802e83c <_printf_i+0x14c>
 802e824:	6823      	ldr	r3, [r4, #0]
 802e826:	07df      	lsls	r7, r3, #31
 802e828:	d508      	bpl.n	802e83c <_printf_i+0x14c>
 802e82a:	6923      	ldr	r3, [r4, #16]
 802e82c:	6861      	ldr	r1, [r4, #4]
 802e82e:	4299      	cmp	r1, r3
 802e830:	bfde      	ittt	le
 802e832:	2330      	movle	r3, #48	; 0x30
 802e834:	f806 3c01 	strble.w	r3, [r6, #-1]
 802e838:	f106 36ff 	addle.w	r6, r6, #4294967295
 802e83c:	1b92      	subs	r2, r2, r6
 802e83e:	6122      	str	r2, [r4, #16]
 802e840:	f8cd a000 	str.w	sl, [sp]
 802e844:	464b      	mov	r3, r9
 802e846:	aa03      	add	r2, sp, #12
 802e848:	4621      	mov	r1, r4
 802e84a:	4640      	mov	r0, r8
 802e84c:	f7ff fee2 	bl	802e614 <_printf_common>
 802e850:	3001      	adds	r0, #1
 802e852:	d14c      	bne.n	802e8ee <_printf_i+0x1fe>
 802e854:	f04f 30ff 	mov.w	r0, #4294967295
 802e858:	b004      	add	sp, #16
 802e85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e85e:	4835      	ldr	r0, [pc, #212]	; (802e934 <_printf_i+0x244>)
 802e860:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802e864:	6823      	ldr	r3, [r4, #0]
 802e866:	680e      	ldr	r6, [r1, #0]
 802e868:	061f      	lsls	r7, r3, #24
 802e86a:	f856 5b04 	ldr.w	r5, [r6], #4
 802e86e:	600e      	str	r6, [r1, #0]
 802e870:	d514      	bpl.n	802e89c <_printf_i+0x1ac>
 802e872:	07d9      	lsls	r1, r3, #31
 802e874:	bf44      	itt	mi
 802e876:	f043 0320 	orrmi.w	r3, r3, #32
 802e87a:	6023      	strmi	r3, [r4, #0]
 802e87c:	b91d      	cbnz	r5, 802e886 <_printf_i+0x196>
 802e87e:	6823      	ldr	r3, [r4, #0]
 802e880:	f023 0320 	bic.w	r3, r3, #32
 802e884:	6023      	str	r3, [r4, #0]
 802e886:	2310      	movs	r3, #16
 802e888:	e7b0      	b.n	802e7ec <_printf_i+0xfc>
 802e88a:	6823      	ldr	r3, [r4, #0]
 802e88c:	f043 0320 	orr.w	r3, r3, #32
 802e890:	6023      	str	r3, [r4, #0]
 802e892:	2378      	movs	r3, #120	; 0x78
 802e894:	4828      	ldr	r0, [pc, #160]	; (802e938 <_printf_i+0x248>)
 802e896:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802e89a:	e7e3      	b.n	802e864 <_printf_i+0x174>
 802e89c:	065e      	lsls	r6, r3, #25
 802e89e:	bf48      	it	mi
 802e8a0:	b2ad      	uxthmi	r5, r5
 802e8a2:	e7e6      	b.n	802e872 <_printf_i+0x182>
 802e8a4:	4616      	mov	r6, r2
 802e8a6:	e7bb      	b.n	802e820 <_printf_i+0x130>
 802e8a8:	680b      	ldr	r3, [r1, #0]
 802e8aa:	6826      	ldr	r6, [r4, #0]
 802e8ac:	6960      	ldr	r0, [r4, #20]
 802e8ae:	1d1d      	adds	r5, r3, #4
 802e8b0:	600d      	str	r5, [r1, #0]
 802e8b2:	0635      	lsls	r5, r6, #24
 802e8b4:	681b      	ldr	r3, [r3, #0]
 802e8b6:	d501      	bpl.n	802e8bc <_printf_i+0x1cc>
 802e8b8:	6018      	str	r0, [r3, #0]
 802e8ba:	e002      	b.n	802e8c2 <_printf_i+0x1d2>
 802e8bc:	0671      	lsls	r1, r6, #25
 802e8be:	d5fb      	bpl.n	802e8b8 <_printf_i+0x1c8>
 802e8c0:	8018      	strh	r0, [r3, #0]
 802e8c2:	2300      	movs	r3, #0
 802e8c4:	6123      	str	r3, [r4, #16]
 802e8c6:	4616      	mov	r6, r2
 802e8c8:	e7ba      	b.n	802e840 <_printf_i+0x150>
 802e8ca:	680b      	ldr	r3, [r1, #0]
 802e8cc:	1d1a      	adds	r2, r3, #4
 802e8ce:	600a      	str	r2, [r1, #0]
 802e8d0:	681e      	ldr	r6, [r3, #0]
 802e8d2:	6862      	ldr	r2, [r4, #4]
 802e8d4:	2100      	movs	r1, #0
 802e8d6:	4630      	mov	r0, r6
 802e8d8:	f7d1 fc92 	bl	8000200 <memchr>
 802e8dc:	b108      	cbz	r0, 802e8e2 <_printf_i+0x1f2>
 802e8de:	1b80      	subs	r0, r0, r6
 802e8e0:	6060      	str	r0, [r4, #4]
 802e8e2:	6863      	ldr	r3, [r4, #4]
 802e8e4:	6123      	str	r3, [r4, #16]
 802e8e6:	2300      	movs	r3, #0
 802e8e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e8ec:	e7a8      	b.n	802e840 <_printf_i+0x150>
 802e8ee:	6923      	ldr	r3, [r4, #16]
 802e8f0:	4632      	mov	r2, r6
 802e8f2:	4649      	mov	r1, r9
 802e8f4:	4640      	mov	r0, r8
 802e8f6:	47d0      	blx	sl
 802e8f8:	3001      	adds	r0, #1
 802e8fa:	d0ab      	beq.n	802e854 <_printf_i+0x164>
 802e8fc:	6823      	ldr	r3, [r4, #0]
 802e8fe:	079b      	lsls	r3, r3, #30
 802e900:	d413      	bmi.n	802e92a <_printf_i+0x23a>
 802e902:	68e0      	ldr	r0, [r4, #12]
 802e904:	9b03      	ldr	r3, [sp, #12]
 802e906:	4298      	cmp	r0, r3
 802e908:	bfb8      	it	lt
 802e90a:	4618      	movlt	r0, r3
 802e90c:	e7a4      	b.n	802e858 <_printf_i+0x168>
 802e90e:	2301      	movs	r3, #1
 802e910:	4632      	mov	r2, r6
 802e912:	4649      	mov	r1, r9
 802e914:	4640      	mov	r0, r8
 802e916:	47d0      	blx	sl
 802e918:	3001      	adds	r0, #1
 802e91a:	d09b      	beq.n	802e854 <_printf_i+0x164>
 802e91c:	3501      	adds	r5, #1
 802e91e:	68e3      	ldr	r3, [r4, #12]
 802e920:	9903      	ldr	r1, [sp, #12]
 802e922:	1a5b      	subs	r3, r3, r1
 802e924:	42ab      	cmp	r3, r5
 802e926:	dcf2      	bgt.n	802e90e <_printf_i+0x21e>
 802e928:	e7eb      	b.n	802e902 <_printf_i+0x212>
 802e92a:	2500      	movs	r5, #0
 802e92c:	f104 0619 	add.w	r6, r4, #25
 802e930:	e7f5      	b.n	802e91e <_printf_i+0x22e>
 802e932:	bf00      	nop
 802e934:	08033b5d 	.word	0x08033b5d
 802e938:	08033b6e 	.word	0x08033b6e

0802e93c <cleanup_glue>:
 802e93c:	b538      	push	{r3, r4, r5, lr}
 802e93e:	460c      	mov	r4, r1
 802e940:	6809      	ldr	r1, [r1, #0]
 802e942:	4605      	mov	r5, r0
 802e944:	b109      	cbz	r1, 802e94a <cleanup_glue+0xe>
 802e946:	f7ff fff9 	bl	802e93c <cleanup_glue>
 802e94a:	4621      	mov	r1, r4
 802e94c:	4628      	mov	r0, r5
 802e94e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e952:	f7ff bc5b 	b.w	802e20c <_free_r>
	...

0802e958 <_reclaim_reent>:
 802e958:	4b2c      	ldr	r3, [pc, #176]	; (802ea0c <_reclaim_reent+0xb4>)
 802e95a:	681b      	ldr	r3, [r3, #0]
 802e95c:	4283      	cmp	r3, r0
 802e95e:	b570      	push	{r4, r5, r6, lr}
 802e960:	4604      	mov	r4, r0
 802e962:	d051      	beq.n	802ea08 <_reclaim_reent+0xb0>
 802e964:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802e966:	b143      	cbz	r3, 802e97a <_reclaim_reent+0x22>
 802e968:	68db      	ldr	r3, [r3, #12]
 802e96a:	2b00      	cmp	r3, #0
 802e96c:	d14a      	bne.n	802ea04 <_reclaim_reent+0xac>
 802e96e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802e970:	6819      	ldr	r1, [r3, #0]
 802e972:	b111      	cbz	r1, 802e97a <_reclaim_reent+0x22>
 802e974:	4620      	mov	r0, r4
 802e976:	f7ff fc49 	bl	802e20c <_free_r>
 802e97a:	6961      	ldr	r1, [r4, #20]
 802e97c:	b111      	cbz	r1, 802e984 <_reclaim_reent+0x2c>
 802e97e:	4620      	mov	r0, r4
 802e980:	f7ff fc44 	bl	802e20c <_free_r>
 802e984:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802e986:	b111      	cbz	r1, 802e98e <_reclaim_reent+0x36>
 802e988:	4620      	mov	r0, r4
 802e98a:	f7ff fc3f 	bl	802e20c <_free_r>
 802e98e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802e990:	b111      	cbz	r1, 802e998 <_reclaim_reent+0x40>
 802e992:	4620      	mov	r0, r4
 802e994:	f7ff fc3a 	bl	802e20c <_free_r>
 802e998:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802e99a:	b111      	cbz	r1, 802e9a2 <_reclaim_reent+0x4a>
 802e99c:	4620      	mov	r0, r4
 802e99e:	f7ff fc35 	bl	802e20c <_free_r>
 802e9a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802e9a4:	b111      	cbz	r1, 802e9ac <_reclaim_reent+0x54>
 802e9a6:	4620      	mov	r0, r4
 802e9a8:	f7ff fc30 	bl	802e20c <_free_r>
 802e9ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802e9ae:	b111      	cbz	r1, 802e9b6 <_reclaim_reent+0x5e>
 802e9b0:	4620      	mov	r0, r4
 802e9b2:	f7ff fc2b 	bl	802e20c <_free_r>
 802e9b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802e9b8:	b111      	cbz	r1, 802e9c0 <_reclaim_reent+0x68>
 802e9ba:	4620      	mov	r0, r4
 802e9bc:	f7ff fc26 	bl	802e20c <_free_r>
 802e9c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e9c2:	b111      	cbz	r1, 802e9ca <_reclaim_reent+0x72>
 802e9c4:	4620      	mov	r0, r4
 802e9c6:	f7ff fc21 	bl	802e20c <_free_r>
 802e9ca:	69a3      	ldr	r3, [r4, #24]
 802e9cc:	b1e3      	cbz	r3, 802ea08 <_reclaim_reent+0xb0>
 802e9ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802e9d0:	4620      	mov	r0, r4
 802e9d2:	4798      	blx	r3
 802e9d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802e9d6:	b1b9      	cbz	r1, 802ea08 <_reclaim_reent+0xb0>
 802e9d8:	4620      	mov	r0, r4
 802e9da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802e9de:	f7ff bfad 	b.w	802e93c <cleanup_glue>
 802e9e2:	5949      	ldr	r1, [r1, r5]
 802e9e4:	b941      	cbnz	r1, 802e9f8 <_reclaim_reent+0xa0>
 802e9e6:	3504      	adds	r5, #4
 802e9e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802e9ea:	2d80      	cmp	r5, #128	; 0x80
 802e9ec:	68d9      	ldr	r1, [r3, #12]
 802e9ee:	d1f8      	bne.n	802e9e2 <_reclaim_reent+0x8a>
 802e9f0:	4620      	mov	r0, r4
 802e9f2:	f7ff fc0b 	bl	802e20c <_free_r>
 802e9f6:	e7ba      	b.n	802e96e <_reclaim_reent+0x16>
 802e9f8:	680e      	ldr	r6, [r1, #0]
 802e9fa:	4620      	mov	r0, r4
 802e9fc:	f7ff fc06 	bl	802e20c <_free_r>
 802ea00:	4631      	mov	r1, r6
 802ea02:	e7ef      	b.n	802e9e4 <_reclaim_reent+0x8c>
 802ea04:	2500      	movs	r5, #0
 802ea06:	e7ef      	b.n	802e9e8 <_reclaim_reent+0x90>
 802ea08:	bd70      	pop	{r4, r5, r6, pc}
 802ea0a:	bf00      	nop
 802ea0c:	20000098 	.word	0x20000098

0802ea10 <_sbrk_r>:
 802ea10:	b538      	push	{r3, r4, r5, lr}
 802ea12:	4d06      	ldr	r5, [pc, #24]	; (802ea2c <_sbrk_r+0x1c>)
 802ea14:	2300      	movs	r3, #0
 802ea16:	4604      	mov	r4, r0
 802ea18:	4608      	mov	r0, r1
 802ea1a:	602b      	str	r3, [r5, #0]
 802ea1c:	f7d5 fc6c 	bl	80042f8 <_sbrk>
 802ea20:	1c43      	adds	r3, r0, #1
 802ea22:	d102      	bne.n	802ea2a <_sbrk_r+0x1a>
 802ea24:	682b      	ldr	r3, [r5, #0]
 802ea26:	b103      	cbz	r3, 802ea2a <_sbrk_r+0x1a>
 802ea28:	6023      	str	r3, [r4, #0]
 802ea2a:	bd38      	pop	{r3, r4, r5, pc}
 802ea2c:	2000b5fc 	.word	0x2000b5fc

0802ea30 <_raise_r>:
 802ea30:	291f      	cmp	r1, #31
 802ea32:	b538      	push	{r3, r4, r5, lr}
 802ea34:	4604      	mov	r4, r0
 802ea36:	460d      	mov	r5, r1
 802ea38:	d904      	bls.n	802ea44 <_raise_r+0x14>
 802ea3a:	2316      	movs	r3, #22
 802ea3c:	6003      	str	r3, [r0, #0]
 802ea3e:	f04f 30ff 	mov.w	r0, #4294967295
 802ea42:	bd38      	pop	{r3, r4, r5, pc}
 802ea44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802ea46:	b112      	cbz	r2, 802ea4e <_raise_r+0x1e>
 802ea48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802ea4c:	b94b      	cbnz	r3, 802ea62 <_raise_r+0x32>
 802ea4e:	4620      	mov	r0, r4
 802ea50:	f000 f830 	bl	802eab4 <_getpid_r>
 802ea54:	462a      	mov	r2, r5
 802ea56:	4601      	mov	r1, r0
 802ea58:	4620      	mov	r0, r4
 802ea5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ea5e:	f000 b817 	b.w	802ea90 <_kill_r>
 802ea62:	2b01      	cmp	r3, #1
 802ea64:	d00a      	beq.n	802ea7c <_raise_r+0x4c>
 802ea66:	1c59      	adds	r1, r3, #1
 802ea68:	d103      	bne.n	802ea72 <_raise_r+0x42>
 802ea6a:	2316      	movs	r3, #22
 802ea6c:	6003      	str	r3, [r0, #0]
 802ea6e:	2001      	movs	r0, #1
 802ea70:	e7e7      	b.n	802ea42 <_raise_r+0x12>
 802ea72:	2400      	movs	r4, #0
 802ea74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802ea78:	4628      	mov	r0, r5
 802ea7a:	4798      	blx	r3
 802ea7c:	2000      	movs	r0, #0
 802ea7e:	e7e0      	b.n	802ea42 <_raise_r+0x12>

0802ea80 <raise>:
 802ea80:	4b02      	ldr	r3, [pc, #8]	; (802ea8c <raise+0xc>)
 802ea82:	4601      	mov	r1, r0
 802ea84:	6818      	ldr	r0, [r3, #0]
 802ea86:	f7ff bfd3 	b.w	802ea30 <_raise_r>
 802ea8a:	bf00      	nop
 802ea8c:	20000098 	.word	0x20000098

0802ea90 <_kill_r>:
 802ea90:	b538      	push	{r3, r4, r5, lr}
 802ea92:	4d07      	ldr	r5, [pc, #28]	; (802eab0 <_kill_r+0x20>)
 802ea94:	2300      	movs	r3, #0
 802ea96:	4604      	mov	r4, r0
 802ea98:	4608      	mov	r0, r1
 802ea9a:	4611      	mov	r1, r2
 802ea9c:	602b      	str	r3, [r5, #0]
 802ea9e:	f7d5 fba3 	bl	80041e8 <_kill>
 802eaa2:	1c43      	adds	r3, r0, #1
 802eaa4:	d102      	bne.n	802eaac <_kill_r+0x1c>
 802eaa6:	682b      	ldr	r3, [r5, #0]
 802eaa8:	b103      	cbz	r3, 802eaac <_kill_r+0x1c>
 802eaaa:	6023      	str	r3, [r4, #0]
 802eaac:	bd38      	pop	{r3, r4, r5, pc}
 802eaae:	bf00      	nop
 802eab0:	2000b5fc 	.word	0x2000b5fc

0802eab4 <_getpid_r>:
 802eab4:	f7d5 bb90 	b.w	80041d8 <_getpid>

0802eab8 <__sread>:
 802eab8:	b510      	push	{r4, lr}
 802eaba:	460c      	mov	r4, r1
 802eabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802eac0:	f000 face 	bl	802f060 <_read_r>
 802eac4:	2800      	cmp	r0, #0
 802eac6:	bfab      	itete	ge
 802eac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802eaca:	89a3      	ldrhlt	r3, [r4, #12]
 802eacc:	181b      	addge	r3, r3, r0
 802eace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802ead2:	bfac      	ite	ge
 802ead4:	6563      	strge	r3, [r4, #84]	; 0x54
 802ead6:	81a3      	strhlt	r3, [r4, #12]
 802ead8:	bd10      	pop	{r4, pc}

0802eada <__swrite>:
 802eada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802eade:	461f      	mov	r7, r3
 802eae0:	898b      	ldrh	r3, [r1, #12]
 802eae2:	05db      	lsls	r3, r3, #23
 802eae4:	4605      	mov	r5, r0
 802eae6:	460c      	mov	r4, r1
 802eae8:	4616      	mov	r6, r2
 802eaea:	d505      	bpl.n	802eaf8 <__swrite+0x1e>
 802eaec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802eaf0:	2302      	movs	r3, #2
 802eaf2:	2200      	movs	r2, #0
 802eaf4:	f000 fa32 	bl	802ef5c <_lseek_r>
 802eaf8:	89a3      	ldrh	r3, [r4, #12]
 802eafa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802eafe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802eb02:	81a3      	strh	r3, [r4, #12]
 802eb04:	4632      	mov	r2, r6
 802eb06:	463b      	mov	r3, r7
 802eb08:	4628      	mov	r0, r5
 802eb0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802eb0e:	f000 b871 	b.w	802ebf4 <_write_r>

0802eb12 <__sseek>:
 802eb12:	b510      	push	{r4, lr}
 802eb14:	460c      	mov	r4, r1
 802eb16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802eb1a:	f000 fa1f 	bl	802ef5c <_lseek_r>
 802eb1e:	1c43      	adds	r3, r0, #1
 802eb20:	89a3      	ldrh	r3, [r4, #12]
 802eb22:	bf15      	itete	ne
 802eb24:	6560      	strne	r0, [r4, #84]	; 0x54
 802eb26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802eb2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802eb2e:	81a3      	strheq	r3, [r4, #12]
 802eb30:	bf18      	it	ne
 802eb32:	81a3      	strhne	r3, [r4, #12]
 802eb34:	bd10      	pop	{r4, pc}

0802eb36 <__sclose>:
 802eb36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802eb3a:	f000 b93d 	b.w	802edb8 <_close_r>

0802eb3e <strcpy>:
 802eb3e:	4603      	mov	r3, r0
 802eb40:	f811 2b01 	ldrb.w	r2, [r1], #1
 802eb44:	f803 2b01 	strb.w	r2, [r3], #1
 802eb48:	2a00      	cmp	r2, #0
 802eb4a:	d1f9      	bne.n	802eb40 <strcpy+0x2>
 802eb4c:	4770      	bx	lr
	...

0802eb50 <__swbuf_r>:
 802eb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802eb52:	460e      	mov	r6, r1
 802eb54:	4614      	mov	r4, r2
 802eb56:	4605      	mov	r5, r0
 802eb58:	b118      	cbz	r0, 802eb62 <__swbuf_r+0x12>
 802eb5a:	6983      	ldr	r3, [r0, #24]
 802eb5c:	b90b      	cbnz	r3, 802eb62 <__swbuf_r+0x12>
 802eb5e:	f7ff fa47 	bl	802dff0 <__sinit>
 802eb62:	4b21      	ldr	r3, [pc, #132]	; (802ebe8 <__swbuf_r+0x98>)
 802eb64:	429c      	cmp	r4, r3
 802eb66:	d12b      	bne.n	802ebc0 <__swbuf_r+0x70>
 802eb68:	686c      	ldr	r4, [r5, #4]
 802eb6a:	69a3      	ldr	r3, [r4, #24]
 802eb6c:	60a3      	str	r3, [r4, #8]
 802eb6e:	89a3      	ldrh	r3, [r4, #12]
 802eb70:	071a      	lsls	r2, r3, #28
 802eb72:	d52f      	bpl.n	802ebd4 <__swbuf_r+0x84>
 802eb74:	6923      	ldr	r3, [r4, #16]
 802eb76:	b36b      	cbz	r3, 802ebd4 <__swbuf_r+0x84>
 802eb78:	6923      	ldr	r3, [r4, #16]
 802eb7a:	6820      	ldr	r0, [r4, #0]
 802eb7c:	1ac0      	subs	r0, r0, r3
 802eb7e:	6963      	ldr	r3, [r4, #20]
 802eb80:	b2f6      	uxtb	r6, r6
 802eb82:	4283      	cmp	r3, r0
 802eb84:	4637      	mov	r7, r6
 802eb86:	dc04      	bgt.n	802eb92 <__swbuf_r+0x42>
 802eb88:	4621      	mov	r1, r4
 802eb8a:	4628      	mov	r0, r5
 802eb8c:	f000 f9aa 	bl	802eee4 <_fflush_r>
 802eb90:	bb30      	cbnz	r0, 802ebe0 <__swbuf_r+0x90>
 802eb92:	68a3      	ldr	r3, [r4, #8]
 802eb94:	3b01      	subs	r3, #1
 802eb96:	60a3      	str	r3, [r4, #8]
 802eb98:	6823      	ldr	r3, [r4, #0]
 802eb9a:	1c5a      	adds	r2, r3, #1
 802eb9c:	6022      	str	r2, [r4, #0]
 802eb9e:	701e      	strb	r6, [r3, #0]
 802eba0:	6963      	ldr	r3, [r4, #20]
 802eba2:	3001      	adds	r0, #1
 802eba4:	4283      	cmp	r3, r0
 802eba6:	d004      	beq.n	802ebb2 <__swbuf_r+0x62>
 802eba8:	89a3      	ldrh	r3, [r4, #12]
 802ebaa:	07db      	lsls	r3, r3, #31
 802ebac:	d506      	bpl.n	802ebbc <__swbuf_r+0x6c>
 802ebae:	2e0a      	cmp	r6, #10
 802ebb0:	d104      	bne.n	802ebbc <__swbuf_r+0x6c>
 802ebb2:	4621      	mov	r1, r4
 802ebb4:	4628      	mov	r0, r5
 802ebb6:	f000 f995 	bl	802eee4 <_fflush_r>
 802ebba:	b988      	cbnz	r0, 802ebe0 <__swbuf_r+0x90>
 802ebbc:	4638      	mov	r0, r7
 802ebbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ebc0:	4b0a      	ldr	r3, [pc, #40]	; (802ebec <__swbuf_r+0x9c>)
 802ebc2:	429c      	cmp	r4, r3
 802ebc4:	d101      	bne.n	802ebca <__swbuf_r+0x7a>
 802ebc6:	68ac      	ldr	r4, [r5, #8]
 802ebc8:	e7cf      	b.n	802eb6a <__swbuf_r+0x1a>
 802ebca:	4b09      	ldr	r3, [pc, #36]	; (802ebf0 <__swbuf_r+0xa0>)
 802ebcc:	429c      	cmp	r4, r3
 802ebce:	bf08      	it	eq
 802ebd0:	68ec      	ldreq	r4, [r5, #12]
 802ebd2:	e7ca      	b.n	802eb6a <__swbuf_r+0x1a>
 802ebd4:	4621      	mov	r1, r4
 802ebd6:	4628      	mov	r0, r5
 802ebd8:	f000 f81e 	bl	802ec18 <__swsetup_r>
 802ebdc:	2800      	cmp	r0, #0
 802ebde:	d0cb      	beq.n	802eb78 <__swbuf_r+0x28>
 802ebe0:	f04f 37ff 	mov.w	r7, #4294967295
 802ebe4:	e7ea      	b.n	802ebbc <__swbuf_r+0x6c>
 802ebe6:	bf00      	nop
 802ebe8:	08033b08 	.word	0x08033b08
 802ebec:	08033b28 	.word	0x08033b28
 802ebf0:	08033ae8 	.word	0x08033ae8

0802ebf4 <_write_r>:
 802ebf4:	b538      	push	{r3, r4, r5, lr}
 802ebf6:	4d07      	ldr	r5, [pc, #28]	; (802ec14 <_write_r+0x20>)
 802ebf8:	4604      	mov	r4, r0
 802ebfa:	4608      	mov	r0, r1
 802ebfc:	4611      	mov	r1, r2
 802ebfe:	2200      	movs	r2, #0
 802ec00:	602a      	str	r2, [r5, #0]
 802ec02:	461a      	mov	r2, r3
 802ec04:	f7d5 fb27 	bl	8004256 <_write>
 802ec08:	1c43      	adds	r3, r0, #1
 802ec0a:	d102      	bne.n	802ec12 <_write_r+0x1e>
 802ec0c:	682b      	ldr	r3, [r5, #0]
 802ec0e:	b103      	cbz	r3, 802ec12 <_write_r+0x1e>
 802ec10:	6023      	str	r3, [r4, #0]
 802ec12:	bd38      	pop	{r3, r4, r5, pc}
 802ec14:	2000b5fc 	.word	0x2000b5fc

0802ec18 <__swsetup_r>:
 802ec18:	4b32      	ldr	r3, [pc, #200]	; (802ece4 <__swsetup_r+0xcc>)
 802ec1a:	b570      	push	{r4, r5, r6, lr}
 802ec1c:	681d      	ldr	r5, [r3, #0]
 802ec1e:	4606      	mov	r6, r0
 802ec20:	460c      	mov	r4, r1
 802ec22:	b125      	cbz	r5, 802ec2e <__swsetup_r+0x16>
 802ec24:	69ab      	ldr	r3, [r5, #24]
 802ec26:	b913      	cbnz	r3, 802ec2e <__swsetup_r+0x16>
 802ec28:	4628      	mov	r0, r5
 802ec2a:	f7ff f9e1 	bl	802dff0 <__sinit>
 802ec2e:	4b2e      	ldr	r3, [pc, #184]	; (802ece8 <__swsetup_r+0xd0>)
 802ec30:	429c      	cmp	r4, r3
 802ec32:	d10f      	bne.n	802ec54 <__swsetup_r+0x3c>
 802ec34:	686c      	ldr	r4, [r5, #4]
 802ec36:	89a3      	ldrh	r3, [r4, #12]
 802ec38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ec3c:	0719      	lsls	r1, r3, #28
 802ec3e:	d42c      	bmi.n	802ec9a <__swsetup_r+0x82>
 802ec40:	06dd      	lsls	r5, r3, #27
 802ec42:	d411      	bmi.n	802ec68 <__swsetup_r+0x50>
 802ec44:	2309      	movs	r3, #9
 802ec46:	6033      	str	r3, [r6, #0]
 802ec48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802ec4c:	81a3      	strh	r3, [r4, #12]
 802ec4e:	f04f 30ff 	mov.w	r0, #4294967295
 802ec52:	e03e      	b.n	802ecd2 <__swsetup_r+0xba>
 802ec54:	4b25      	ldr	r3, [pc, #148]	; (802ecec <__swsetup_r+0xd4>)
 802ec56:	429c      	cmp	r4, r3
 802ec58:	d101      	bne.n	802ec5e <__swsetup_r+0x46>
 802ec5a:	68ac      	ldr	r4, [r5, #8]
 802ec5c:	e7eb      	b.n	802ec36 <__swsetup_r+0x1e>
 802ec5e:	4b24      	ldr	r3, [pc, #144]	; (802ecf0 <__swsetup_r+0xd8>)
 802ec60:	429c      	cmp	r4, r3
 802ec62:	bf08      	it	eq
 802ec64:	68ec      	ldreq	r4, [r5, #12]
 802ec66:	e7e6      	b.n	802ec36 <__swsetup_r+0x1e>
 802ec68:	0758      	lsls	r0, r3, #29
 802ec6a:	d512      	bpl.n	802ec92 <__swsetup_r+0x7a>
 802ec6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802ec6e:	b141      	cbz	r1, 802ec82 <__swsetup_r+0x6a>
 802ec70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802ec74:	4299      	cmp	r1, r3
 802ec76:	d002      	beq.n	802ec7e <__swsetup_r+0x66>
 802ec78:	4630      	mov	r0, r6
 802ec7a:	f7ff fac7 	bl	802e20c <_free_r>
 802ec7e:	2300      	movs	r3, #0
 802ec80:	6363      	str	r3, [r4, #52]	; 0x34
 802ec82:	89a3      	ldrh	r3, [r4, #12]
 802ec84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802ec88:	81a3      	strh	r3, [r4, #12]
 802ec8a:	2300      	movs	r3, #0
 802ec8c:	6063      	str	r3, [r4, #4]
 802ec8e:	6923      	ldr	r3, [r4, #16]
 802ec90:	6023      	str	r3, [r4, #0]
 802ec92:	89a3      	ldrh	r3, [r4, #12]
 802ec94:	f043 0308 	orr.w	r3, r3, #8
 802ec98:	81a3      	strh	r3, [r4, #12]
 802ec9a:	6923      	ldr	r3, [r4, #16]
 802ec9c:	b94b      	cbnz	r3, 802ecb2 <__swsetup_r+0x9a>
 802ec9e:	89a3      	ldrh	r3, [r4, #12]
 802eca0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802eca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802eca8:	d003      	beq.n	802ecb2 <__swsetup_r+0x9a>
 802ecaa:	4621      	mov	r1, r4
 802ecac:	4630      	mov	r0, r6
 802ecae:	f000 f98b 	bl	802efc8 <__smakebuf_r>
 802ecb2:	89a0      	ldrh	r0, [r4, #12]
 802ecb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ecb8:	f010 0301 	ands.w	r3, r0, #1
 802ecbc:	d00a      	beq.n	802ecd4 <__swsetup_r+0xbc>
 802ecbe:	2300      	movs	r3, #0
 802ecc0:	60a3      	str	r3, [r4, #8]
 802ecc2:	6963      	ldr	r3, [r4, #20]
 802ecc4:	425b      	negs	r3, r3
 802ecc6:	61a3      	str	r3, [r4, #24]
 802ecc8:	6923      	ldr	r3, [r4, #16]
 802ecca:	b943      	cbnz	r3, 802ecde <__swsetup_r+0xc6>
 802eccc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802ecd0:	d1ba      	bne.n	802ec48 <__swsetup_r+0x30>
 802ecd2:	bd70      	pop	{r4, r5, r6, pc}
 802ecd4:	0781      	lsls	r1, r0, #30
 802ecd6:	bf58      	it	pl
 802ecd8:	6963      	ldrpl	r3, [r4, #20]
 802ecda:	60a3      	str	r3, [r4, #8]
 802ecdc:	e7f4      	b.n	802ecc8 <__swsetup_r+0xb0>
 802ecde:	2000      	movs	r0, #0
 802ece0:	e7f7      	b.n	802ecd2 <__swsetup_r+0xba>
 802ece2:	bf00      	nop
 802ece4:	20000098 	.word	0x20000098
 802ece8:	08033b08 	.word	0x08033b08
 802ecec:	08033b28 	.word	0x08033b28
 802ecf0:	08033ae8 	.word	0x08033ae8

0802ecf4 <__register_exitproc>:
 802ecf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ecf8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802edb4 <__register_exitproc+0xc0>
 802ecfc:	4606      	mov	r6, r0
 802ecfe:	f8d8 0000 	ldr.w	r0, [r8]
 802ed02:	461f      	mov	r7, r3
 802ed04:	460d      	mov	r5, r1
 802ed06:	4691      	mov	r9, r2
 802ed08:	f7ff fa47 	bl	802e19a <__retarget_lock_acquire_recursive>
 802ed0c:	4b25      	ldr	r3, [pc, #148]	; (802eda4 <__register_exitproc+0xb0>)
 802ed0e:	681c      	ldr	r4, [r3, #0]
 802ed10:	b934      	cbnz	r4, 802ed20 <__register_exitproc+0x2c>
 802ed12:	4c25      	ldr	r4, [pc, #148]	; (802eda8 <__register_exitproc+0xb4>)
 802ed14:	601c      	str	r4, [r3, #0]
 802ed16:	4b25      	ldr	r3, [pc, #148]	; (802edac <__register_exitproc+0xb8>)
 802ed18:	b113      	cbz	r3, 802ed20 <__register_exitproc+0x2c>
 802ed1a:	681b      	ldr	r3, [r3, #0]
 802ed1c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802ed20:	6863      	ldr	r3, [r4, #4]
 802ed22:	2b1f      	cmp	r3, #31
 802ed24:	dd07      	ble.n	802ed36 <__register_exitproc+0x42>
 802ed26:	f8d8 0000 	ldr.w	r0, [r8]
 802ed2a:	f7ff fa38 	bl	802e19e <__retarget_lock_release_recursive>
 802ed2e:	f04f 30ff 	mov.w	r0, #4294967295
 802ed32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ed36:	b34e      	cbz	r6, 802ed8c <__register_exitproc+0x98>
 802ed38:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802ed3c:	b988      	cbnz	r0, 802ed62 <__register_exitproc+0x6e>
 802ed3e:	4b1c      	ldr	r3, [pc, #112]	; (802edb0 <__register_exitproc+0xbc>)
 802ed40:	b923      	cbnz	r3, 802ed4c <__register_exitproc+0x58>
 802ed42:	f8d8 0000 	ldr.w	r0, [r8]
 802ed46:	f7ff fa29 	bl	802e19c <__retarget_lock_release>
 802ed4a:	e7f0      	b.n	802ed2e <__register_exitproc+0x3a>
 802ed4c:	f44f 7084 	mov.w	r0, #264	; 0x108
 802ed50:	f7ff fa26 	bl	802e1a0 <malloc>
 802ed54:	2800      	cmp	r0, #0
 802ed56:	d0f4      	beq.n	802ed42 <__register_exitproc+0x4e>
 802ed58:	2300      	movs	r3, #0
 802ed5a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802ed5e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802ed62:	6863      	ldr	r3, [r4, #4]
 802ed64:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802ed68:	2201      	movs	r2, #1
 802ed6a:	409a      	lsls	r2, r3
 802ed6c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802ed70:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802ed74:	4313      	orrs	r3, r2
 802ed76:	2e02      	cmp	r6, #2
 802ed78:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802ed7c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802ed80:	bf02      	ittt	eq
 802ed82:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802ed86:	431a      	orreq	r2, r3
 802ed88:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 802ed8c:	6863      	ldr	r3, [r4, #4]
 802ed8e:	f8d8 0000 	ldr.w	r0, [r8]
 802ed92:	1c5a      	adds	r2, r3, #1
 802ed94:	3302      	adds	r3, #2
 802ed96:	6062      	str	r2, [r4, #4]
 802ed98:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802ed9c:	f7ff f9ff 	bl	802e19e <__retarget_lock_release_recursive>
 802eda0:	2000      	movs	r0, #0
 802eda2:	e7c6      	b.n	802ed32 <__register_exitproc+0x3e>
 802eda4:	20009a34 	.word	0x20009a34
 802eda8:	200099a8 	.word	0x200099a8
 802edac:	08033b80 	.word	0x08033b80
 802edb0:	0802e1a1 	.word	0x0802e1a1
 802edb4:	200000fc 	.word	0x200000fc

0802edb8 <_close_r>:
 802edb8:	b538      	push	{r3, r4, r5, lr}
 802edba:	4d06      	ldr	r5, [pc, #24]	; (802edd4 <_close_r+0x1c>)
 802edbc:	2300      	movs	r3, #0
 802edbe:	4604      	mov	r4, r0
 802edc0:	4608      	mov	r0, r1
 802edc2:	602b      	str	r3, [r5, #0]
 802edc4:	f7d5 fa63 	bl	800428e <_close>
 802edc8:	1c43      	adds	r3, r0, #1
 802edca:	d102      	bne.n	802edd2 <_close_r+0x1a>
 802edcc:	682b      	ldr	r3, [r5, #0]
 802edce:	b103      	cbz	r3, 802edd2 <_close_r+0x1a>
 802edd0:	6023      	str	r3, [r4, #0]
 802edd2:	bd38      	pop	{r3, r4, r5, pc}
 802edd4:	2000b5fc 	.word	0x2000b5fc

0802edd8 <__sflush_r>:
 802edd8:	898a      	ldrh	r2, [r1, #12]
 802edda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802edde:	4605      	mov	r5, r0
 802ede0:	0710      	lsls	r0, r2, #28
 802ede2:	460c      	mov	r4, r1
 802ede4:	d458      	bmi.n	802ee98 <__sflush_r+0xc0>
 802ede6:	684b      	ldr	r3, [r1, #4]
 802ede8:	2b00      	cmp	r3, #0
 802edea:	dc05      	bgt.n	802edf8 <__sflush_r+0x20>
 802edec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802edee:	2b00      	cmp	r3, #0
 802edf0:	dc02      	bgt.n	802edf8 <__sflush_r+0x20>
 802edf2:	2000      	movs	r0, #0
 802edf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802edf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802edfa:	2e00      	cmp	r6, #0
 802edfc:	d0f9      	beq.n	802edf2 <__sflush_r+0x1a>
 802edfe:	2300      	movs	r3, #0
 802ee00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802ee04:	682f      	ldr	r7, [r5, #0]
 802ee06:	602b      	str	r3, [r5, #0]
 802ee08:	d032      	beq.n	802ee70 <__sflush_r+0x98>
 802ee0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802ee0c:	89a3      	ldrh	r3, [r4, #12]
 802ee0e:	075a      	lsls	r2, r3, #29
 802ee10:	d505      	bpl.n	802ee1e <__sflush_r+0x46>
 802ee12:	6863      	ldr	r3, [r4, #4]
 802ee14:	1ac0      	subs	r0, r0, r3
 802ee16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802ee18:	b10b      	cbz	r3, 802ee1e <__sflush_r+0x46>
 802ee1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802ee1c:	1ac0      	subs	r0, r0, r3
 802ee1e:	2300      	movs	r3, #0
 802ee20:	4602      	mov	r2, r0
 802ee22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802ee24:	6a21      	ldr	r1, [r4, #32]
 802ee26:	4628      	mov	r0, r5
 802ee28:	47b0      	blx	r6
 802ee2a:	1c43      	adds	r3, r0, #1
 802ee2c:	89a3      	ldrh	r3, [r4, #12]
 802ee2e:	d106      	bne.n	802ee3e <__sflush_r+0x66>
 802ee30:	6829      	ldr	r1, [r5, #0]
 802ee32:	291d      	cmp	r1, #29
 802ee34:	d82c      	bhi.n	802ee90 <__sflush_r+0xb8>
 802ee36:	4a2a      	ldr	r2, [pc, #168]	; (802eee0 <__sflush_r+0x108>)
 802ee38:	40ca      	lsrs	r2, r1
 802ee3a:	07d6      	lsls	r6, r2, #31
 802ee3c:	d528      	bpl.n	802ee90 <__sflush_r+0xb8>
 802ee3e:	2200      	movs	r2, #0
 802ee40:	6062      	str	r2, [r4, #4]
 802ee42:	04d9      	lsls	r1, r3, #19
 802ee44:	6922      	ldr	r2, [r4, #16]
 802ee46:	6022      	str	r2, [r4, #0]
 802ee48:	d504      	bpl.n	802ee54 <__sflush_r+0x7c>
 802ee4a:	1c42      	adds	r2, r0, #1
 802ee4c:	d101      	bne.n	802ee52 <__sflush_r+0x7a>
 802ee4e:	682b      	ldr	r3, [r5, #0]
 802ee50:	b903      	cbnz	r3, 802ee54 <__sflush_r+0x7c>
 802ee52:	6560      	str	r0, [r4, #84]	; 0x54
 802ee54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802ee56:	602f      	str	r7, [r5, #0]
 802ee58:	2900      	cmp	r1, #0
 802ee5a:	d0ca      	beq.n	802edf2 <__sflush_r+0x1a>
 802ee5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802ee60:	4299      	cmp	r1, r3
 802ee62:	d002      	beq.n	802ee6a <__sflush_r+0x92>
 802ee64:	4628      	mov	r0, r5
 802ee66:	f7ff f9d1 	bl	802e20c <_free_r>
 802ee6a:	2000      	movs	r0, #0
 802ee6c:	6360      	str	r0, [r4, #52]	; 0x34
 802ee6e:	e7c1      	b.n	802edf4 <__sflush_r+0x1c>
 802ee70:	6a21      	ldr	r1, [r4, #32]
 802ee72:	2301      	movs	r3, #1
 802ee74:	4628      	mov	r0, r5
 802ee76:	47b0      	blx	r6
 802ee78:	1c41      	adds	r1, r0, #1
 802ee7a:	d1c7      	bne.n	802ee0c <__sflush_r+0x34>
 802ee7c:	682b      	ldr	r3, [r5, #0]
 802ee7e:	2b00      	cmp	r3, #0
 802ee80:	d0c4      	beq.n	802ee0c <__sflush_r+0x34>
 802ee82:	2b1d      	cmp	r3, #29
 802ee84:	d001      	beq.n	802ee8a <__sflush_r+0xb2>
 802ee86:	2b16      	cmp	r3, #22
 802ee88:	d101      	bne.n	802ee8e <__sflush_r+0xb6>
 802ee8a:	602f      	str	r7, [r5, #0]
 802ee8c:	e7b1      	b.n	802edf2 <__sflush_r+0x1a>
 802ee8e:	89a3      	ldrh	r3, [r4, #12]
 802ee90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ee94:	81a3      	strh	r3, [r4, #12]
 802ee96:	e7ad      	b.n	802edf4 <__sflush_r+0x1c>
 802ee98:	690f      	ldr	r7, [r1, #16]
 802ee9a:	2f00      	cmp	r7, #0
 802ee9c:	d0a9      	beq.n	802edf2 <__sflush_r+0x1a>
 802ee9e:	0793      	lsls	r3, r2, #30
 802eea0:	680e      	ldr	r6, [r1, #0]
 802eea2:	bf08      	it	eq
 802eea4:	694b      	ldreq	r3, [r1, #20]
 802eea6:	600f      	str	r7, [r1, #0]
 802eea8:	bf18      	it	ne
 802eeaa:	2300      	movne	r3, #0
 802eeac:	eba6 0807 	sub.w	r8, r6, r7
 802eeb0:	608b      	str	r3, [r1, #8]
 802eeb2:	f1b8 0f00 	cmp.w	r8, #0
 802eeb6:	dd9c      	ble.n	802edf2 <__sflush_r+0x1a>
 802eeb8:	6a21      	ldr	r1, [r4, #32]
 802eeba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802eebc:	4643      	mov	r3, r8
 802eebe:	463a      	mov	r2, r7
 802eec0:	4628      	mov	r0, r5
 802eec2:	47b0      	blx	r6
 802eec4:	2800      	cmp	r0, #0
 802eec6:	dc06      	bgt.n	802eed6 <__sflush_r+0xfe>
 802eec8:	89a3      	ldrh	r3, [r4, #12]
 802eeca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802eece:	81a3      	strh	r3, [r4, #12]
 802eed0:	f04f 30ff 	mov.w	r0, #4294967295
 802eed4:	e78e      	b.n	802edf4 <__sflush_r+0x1c>
 802eed6:	4407      	add	r7, r0
 802eed8:	eba8 0800 	sub.w	r8, r8, r0
 802eedc:	e7e9      	b.n	802eeb2 <__sflush_r+0xda>
 802eede:	bf00      	nop
 802eee0:	20400001 	.word	0x20400001

0802eee4 <_fflush_r>:
 802eee4:	b538      	push	{r3, r4, r5, lr}
 802eee6:	690b      	ldr	r3, [r1, #16]
 802eee8:	4605      	mov	r5, r0
 802eeea:	460c      	mov	r4, r1
 802eeec:	b913      	cbnz	r3, 802eef4 <_fflush_r+0x10>
 802eeee:	2500      	movs	r5, #0
 802eef0:	4628      	mov	r0, r5
 802eef2:	bd38      	pop	{r3, r4, r5, pc}
 802eef4:	b118      	cbz	r0, 802eefe <_fflush_r+0x1a>
 802eef6:	6983      	ldr	r3, [r0, #24]
 802eef8:	b90b      	cbnz	r3, 802eefe <_fflush_r+0x1a>
 802eefa:	f7ff f879 	bl	802dff0 <__sinit>
 802eefe:	4b14      	ldr	r3, [pc, #80]	; (802ef50 <_fflush_r+0x6c>)
 802ef00:	429c      	cmp	r4, r3
 802ef02:	d11b      	bne.n	802ef3c <_fflush_r+0x58>
 802ef04:	686c      	ldr	r4, [r5, #4]
 802ef06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ef0a:	2b00      	cmp	r3, #0
 802ef0c:	d0ef      	beq.n	802eeee <_fflush_r+0xa>
 802ef0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802ef10:	07d0      	lsls	r0, r2, #31
 802ef12:	d404      	bmi.n	802ef1e <_fflush_r+0x3a>
 802ef14:	0599      	lsls	r1, r3, #22
 802ef16:	d402      	bmi.n	802ef1e <_fflush_r+0x3a>
 802ef18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802ef1a:	f7ff f93e 	bl	802e19a <__retarget_lock_acquire_recursive>
 802ef1e:	4628      	mov	r0, r5
 802ef20:	4621      	mov	r1, r4
 802ef22:	f7ff ff59 	bl	802edd8 <__sflush_r>
 802ef26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802ef28:	07da      	lsls	r2, r3, #31
 802ef2a:	4605      	mov	r5, r0
 802ef2c:	d4e0      	bmi.n	802eef0 <_fflush_r+0xc>
 802ef2e:	89a3      	ldrh	r3, [r4, #12]
 802ef30:	059b      	lsls	r3, r3, #22
 802ef32:	d4dd      	bmi.n	802eef0 <_fflush_r+0xc>
 802ef34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802ef36:	f7ff f932 	bl	802e19e <__retarget_lock_release_recursive>
 802ef3a:	e7d9      	b.n	802eef0 <_fflush_r+0xc>
 802ef3c:	4b05      	ldr	r3, [pc, #20]	; (802ef54 <_fflush_r+0x70>)
 802ef3e:	429c      	cmp	r4, r3
 802ef40:	d101      	bne.n	802ef46 <_fflush_r+0x62>
 802ef42:	68ac      	ldr	r4, [r5, #8]
 802ef44:	e7df      	b.n	802ef06 <_fflush_r+0x22>
 802ef46:	4b04      	ldr	r3, [pc, #16]	; (802ef58 <_fflush_r+0x74>)
 802ef48:	429c      	cmp	r4, r3
 802ef4a:	bf08      	it	eq
 802ef4c:	68ec      	ldreq	r4, [r5, #12]
 802ef4e:	e7da      	b.n	802ef06 <_fflush_r+0x22>
 802ef50:	08033b08 	.word	0x08033b08
 802ef54:	08033b28 	.word	0x08033b28
 802ef58:	08033ae8 	.word	0x08033ae8

0802ef5c <_lseek_r>:
 802ef5c:	b538      	push	{r3, r4, r5, lr}
 802ef5e:	4d07      	ldr	r5, [pc, #28]	; (802ef7c <_lseek_r+0x20>)
 802ef60:	4604      	mov	r4, r0
 802ef62:	4608      	mov	r0, r1
 802ef64:	4611      	mov	r1, r2
 802ef66:	2200      	movs	r2, #0
 802ef68:	602a      	str	r2, [r5, #0]
 802ef6a:	461a      	mov	r2, r3
 802ef6c:	f7d5 f9b6 	bl	80042dc <_lseek>
 802ef70:	1c43      	adds	r3, r0, #1
 802ef72:	d102      	bne.n	802ef7a <_lseek_r+0x1e>
 802ef74:	682b      	ldr	r3, [r5, #0]
 802ef76:	b103      	cbz	r3, 802ef7a <_lseek_r+0x1e>
 802ef78:	6023      	str	r3, [r4, #0]
 802ef7a:	bd38      	pop	{r3, r4, r5, pc}
 802ef7c:	2000b5fc 	.word	0x2000b5fc

0802ef80 <__swhatbuf_r>:
 802ef80:	b570      	push	{r4, r5, r6, lr}
 802ef82:	460e      	mov	r6, r1
 802ef84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ef88:	2900      	cmp	r1, #0
 802ef8a:	b096      	sub	sp, #88	; 0x58
 802ef8c:	4614      	mov	r4, r2
 802ef8e:	461d      	mov	r5, r3
 802ef90:	da07      	bge.n	802efa2 <__swhatbuf_r+0x22>
 802ef92:	2300      	movs	r3, #0
 802ef94:	602b      	str	r3, [r5, #0]
 802ef96:	89b3      	ldrh	r3, [r6, #12]
 802ef98:	061a      	lsls	r2, r3, #24
 802ef9a:	d410      	bmi.n	802efbe <__swhatbuf_r+0x3e>
 802ef9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802efa0:	e00e      	b.n	802efc0 <__swhatbuf_r+0x40>
 802efa2:	466a      	mov	r2, sp
 802efa4:	f000 f86e 	bl	802f084 <_fstat_r>
 802efa8:	2800      	cmp	r0, #0
 802efaa:	dbf2      	blt.n	802ef92 <__swhatbuf_r+0x12>
 802efac:	9a01      	ldr	r2, [sp, #4]
 802efae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802efb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802efb6:	425a      	negs	r2, r3
 802efb8:	415a      	adcs	r2, r3
 802efba:	602a      	str	r2, [r5, #0]
 802efbc:	e7ee      	b.n	802ef9c <__swhatbuf_r+0x1c>
 802efbe:	2340      	movs	r3, #64	; 0x40
 802efc0:	2000      	movs	r0, #0
 802efc2:	6023      	str	r3, [r4, #0]
 802efc4:	b016      	add	sp, #88	; 0x58
 802efc6:	bd70      	pop	{r4, r5, r6, pc}

0802efc8 <__smakebuf_r>:
 802efc8:	898b      	ldrh	r3, [r1, #12]
 802efca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802efcc:	079d      	lsls	r5, r3, #30
 802efce:	4606      	mov	r6, r0
 802efd0:	460c      	mov	r4, r1
 802efd2:	d507      	bpl.n	802efe4 <__smakebuf_r+0x1c>
 802efd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802efd8:	6023      	str	r3, [r4, #0]
 802efda:	6123      	str	r3, [r4, #16]
 802efdc:	2301      	movs	r3, #1
 802efde:	6163      	str	r3, [r4, #20]
 802efe0:	b002      	add	sp, #8
 802efe2:	bd70      	pop	{r4, r5, r6, pc}
 802efe4:	ab01      	add	r3, sp, #4
 802efe6:	466a      	mov	r2, sp
 802efe8:	f7ff ffca 	bl	802ef80 <__swhatbuf_r>
 802efec:	9900      	ldr	r1, [sp, #0]
 802efee:	4605      	mov	r5, r0
 802eff0:	4630      	mov	r0, r6
 802eff2:	f7ff f95b 	bl	802e2ac <_malloc_r>
 802eff6:	b948      	cbnz	r0, 802f00c <__smakebuf_r+0x44>
 802eff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802effc:	059a      	lsls	r2, r3, #22
 802effe:	d4ef      	bmi.n	802efe0 <__smakebuf_r+0x18>
 802f000:	f023 0303 	bic.w	r3, r3, #3
 802f004:	f043 0302 	orr.w	r3, r3, #2
 802f008:	81a3      	strh	r3, [r4, #12]
 802f00a:	e7e3      	b.n	802efd4 <__smakebuf_r+0xc>
 802f00c:	4b0d      	ldr	r3, [pc, #52]	; (802f044 <__smakebuf_r+0x7c>)
 802f00e:	62b3      	str	r3, [r6, #40]	; 0x28
 802f010:	89a3      	ldrh	r3, [r4, #12]
 802f012:	6020      	str	r0, [r4, #0]
 802f014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802f018:	81a3      	strh	r3, [r4, #12]
 802f01a:	9b00      	ldr	r3, [sp, #0]
 802f01c:	6163      	str	r3, [r4, #20]
 802f01e:	9b01      	ldr	r3, [sp, #4]
 802f020:	6120      	str	r0, [r4, #16]
 802f022:	b15b      	cbz	r3, 802f03c <__smakebuf_r+0x74>
 802f024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802f028:	4630      	mov	r0, r6
 802f02a:	f000 f83d 	bl	802f0a8 <_isatty_r>
 802f02e:	b128      	cbz	r0, 802f03c <__smakebuf_r+0x74>
 802f030:	89a3      	ldrh	r3, [r4, #12]
 802f032:	f023 0303 	bic.w	r3, r3, #3
 802f036:	f043 0301 	orr.w	r3, r3, #1
 802f03a:	81a3      	strh	r3, [r4, #12]
 802f03c:	89a0      	ldrh	r0, [r4, #12]
 802f03e:	4305      	orrs	r5, r0
 802f040:	81a5      	strh	r5, [r4, #12]
 802f042:	e7cd      	b.n	802efe0 <__smakebuf_r+0x18>
 802f044:	0802df89 	.word	0x0802df89

0802f048 <__malloc_lock>:
 802f048:	4801      	ldr	r0, [pc, #4]	; (802f050 <__malloc_lock+0x8>)
 802f04a:	f7ff b8a6 	b.w	802e19a <__retarget_lock_acquire_recursive>
 802f04e:	bf00      	nop
 802f050:	2000b5f4 	.word	0x2000b5f4

0802f054 <__malloc_unlock>:
 802f054:	4801      	ldr	r0, [pc, #4]	; (802f05c <__malloc_unlock+0x8>)
 802f056:	f7ff b8a2 	b.w	802e19e <__retarget_lock_release_recursive>
 802f05a:	bf00      	nop
 802f05c:	2000b5f4 	.word	0x2000b5f4

0802f060 <_read_r>:
 802f060:	b538      	push	{r3, r4, r5, lr}
 802f062:	4d07      	ldr	r5, [pc, #28]	; (802f080 <_read_r+0x20>)
 802f064:	4604      	mov	r4, r0
 802f066:	4608      	mov	r0, r1
 802f068:	4611      	mov	r1, r2
 802f06a:	2200      	movs	r2, #0
 802f06c:	602a      	str	r2, [r5, #0]
 802f06e:	461a      	mov	r2, r3
 802f070:	f7d5 f8d4 	bl	800421c <_read>
 802f074:	1c43      	adds	r3, r0, #1
 802f076:	d102      	bne.n	802f07e <_read_r+0x1e>
 802f078:	682b      	ldr	r3, [r5, #0]
 802f07a:	b103      	cbz	r3, 802f07e <_read_r+0x1e>
 802f07c:	6023      	str	r3, [r4, #0]
 802f07e:	bd38      	pop	{r3, r4, r5, pc}
 802f080:	2000b5fc 	.word	0x2000b5fc

0802f084 <_fstat_r>:
 802f084:	b538      	push	{r3, r4, r5, lr}
 802f086:	4d07      	ldr	r5, [pc, #28]	; (802f0a4 <_fstat_r+0x20>)
 802f088:	2300      	movs	r3, #0
 802f08a:	4604      	mov	r4, r0
 802f08c:	4608      	mov	r0, r1
 802f08e:	4611      	mov	r1, r2
 802f090:	602b      	str	r3, [r5, #0]
 802f092:	f7d5 f908 	bl	80042a6 <_fstat>
 802f096:	1c43      	adds	r3, r0, #1
 802f098:	d102      	bne.n	802f0a0 <_fstat_r+0x1c>
 802f09a:	682b      	ldr	r3, [r5, #0]
 802f09c:	b103      	cbz	r3, 802f0a0 <_fstat_r+0x1c>
 802f09e:	6023      	str	r3, [r4, #0]
 802f0a0:	bd38      	pop	{r3, r4, r5, pc}
 802f0a2:	bf00      	nop
 802f0a4:	2000b5fc 	.word	0x2000b5fc

0802f0a8 <_isatty_r>:
 802f0a8:	b538      	push	{r3, r4, r5, lr}
 802f0aa:	4d06      	ldr	r5, [pc, #24]	; (802f0c4 <_isatty_r+0x1c>)
 802f0ac:	2300      	movs	r3, #0
 802f0ae:	4604      	mov	r4, r0
 802f0b0:	4608      	mov	r0, r1
 802f0b2:	602b      	str	r3, [r5, #0]
 802f0b4:	f7d5 f907 	bl	80042c6 <_isatty>
 802f0b8:	1c43      	adds	r3, r0, #1
 802f0ba:	d102      	bne.n	802f0c2 <_isatty_r+0x1a>
 802f0bc:	682b      	ldr	r3, [r5, #0]
 802f0be:	b103      	cbz	r3, 802f0c2 <_isatty_r+0x1a>
 802f0c0:	6023      	str	r3, [r4, #0]
 802f0c2:	bd38      	pop	{r3, r4, r5, pc}
 802f0c4:	2000b5fc 	.word	0x2000b5fc

0802f0c8 <_init>:
 802f0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f0ca:	bf00      	nop
 802f0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f0ce:	bc08      	pop	{r3}
 802f0d0:	469e      	mov	lr, r3
 802f0d2:	4770      	bx	lr

0802f0d4 <_fini>:
 802f0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f0d6:	bf00      	nop
 802f0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f0da:	bc08      	pop	{r3}
 802f0dc:	469e      	mov	lr, r3
 802f0de:	4770      	bx	lr
