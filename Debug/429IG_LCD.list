
429IG_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002df58  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004ac8  0802e108  0802e108  0003e108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00009178  08032bd0  08032bd0  00042bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000008  0803bd48  0803bd48  0004bd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 IntFlashSection 000689cc  0803bd50  0803bd50  0004bd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000140  080a471c  080a471c  000b471c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080a485c  080a485c  000c00fc  2**0
                  CONTENTS
  8 .ARM          00000008  080a485c  080a485c  000b485c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080a4864  080a4864  000c00fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080a4864  080a4864  000b4864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080a4878  080a4878  000b4878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000fc  20000000  080a4880  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0000981c  200000fc  080a497c  000c00fc  2**2
                  ALLOC
 14 ._user_heap_stack 00000c00  20009918  080a497c  000c9918  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000c00fc  2**0
                  CONTENTS, READONLY
 16 .debug_info   0009ea16  00000000  00000000  000c012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000118a5  00000000  00000000  0015eb42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003d58  00000000  00000000  001703e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003830  00000000  00000000  00174140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003499b  00000000  00000000  00177970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004abaa  00000000  00000000  001ac30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0011272b  00000000  00000000  001f6eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  003095e0  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00010cac  00000000  00000000  003096b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0802e0f0 	.word	0x0802e0f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000100 	.word	0x20000100
 80001ec:	0802e0f0 	.word	0x0802e0f0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
        : color(col)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	601a      	str	r2, [r3, #0]
    {
    }
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4618      	mov	r0, r3
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
    {
        return color;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
    }
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <_ZN13BMPFileLoader8readFileEPvPhm>:
#include <touchgfx/Color.hpp>
#include <stdio.h>
#include <stdlib.h>

int BMPFileLoader::readFile(FileHdl hdl, uint8_t* const buffer, uint32_t length)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b086      	sub	sp, #24
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	60f8      	str	r0, [r7, #12]
 80005c6:	60b9      	str	r1, [r7, #8]
 80005c8:	607a      	str	r2, [r7, #4]
    uint32_t r = fread(buffer, 1, length, (FILE*)hdl);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	2101      	movs	r1, #1
 80005d0:	68b8      	ldr	r0, [r7, #8]
 80005d2:	f02c fa1d 	bl	802ca10 <fread>
 80005d6:	6178      	str	r0, [r7, #20]
    if (r != length)
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d001      	beq.n	80005e4 <_ZN13BMPFileLoader8readFileEPvPhm+0x26>
    {
        return 1;
 80005e0:	2301      	movs	r3, #1
 80005e2:	e000      	b.n	80005e6 <_ZN13BMPFileLoader8readFileEPvPhm+0x28>
    }
    return 0;
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_ZN13BMPFileLoader8seekFileEPvm>:

void BMPFileLoader::seekFile(FileHdl hdl, uint32_t offset)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
 80005f6:	6039      	str	r1, [r7, #0]
    fseek((FILE*)hdl, offset, SEEK_SET);
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	2200      	movs	r2, #0
 80005fc:	4619      	mov	r1, r3
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f02c fa14 	bl	802ca2c <fseek>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <_ZN13BMPFileLoader18getBMP24DimensionsEPvRtS1_>:

void BMPFileLoader::getBMP24Dimensions(FileHdl fileHandle, uint16_t& width, uint16_t& height)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b092      	sub	sp, #72	; 0x48
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
    uint8_t data[50];
    seekFile(fileHandle, 0);
 8000618:	2100      	movs	r1, #0
 800061a:	68f8      	ldr	r0, [r7, #12]
 800061c:	f7ff ffe7 	bl	80005ee <_ZN13BMPFileLoader8seekFileEPvm>
    readFile(fileHandle, data, 26); //read first part of header.
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	221a      	movs	r2, #26
 8000626:	4619      	mov	r1, r3
 8000628:	68f8      	ldr	r0, [r7, #12]
 800062a:	f7ff ffc8 	bl	80005be <_ZN13BMPFileLoader8readFileEPvPhm>

    width = data[18] | (data[19] << 8) | (data[20] << 16) | (data[21] << 24);
 800062e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000632:	b21a      	sxth	r2, r3
 8000634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000638:	021b      	lsls	r3, r3, #8
 800063a:	b21b      	sxth	r3, r3
 800063c:	4313      	orrs	r3, r2
 800063e:	b21a      	sxth	r2, r3
 8000640:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	b21b      	sxth	r3, r3
 8000648:	4313      	orrs	r3, r2
 800064a:	b21a      	sxth	r2, r3
 800064c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000650:	061b      	lsls	r3, r3, #24
 8000652:	b21b      	sxth	r3, r3
 8000654:	4313      	orrs	r3, r2
 8000656:	b21b      	sxth	r3, r3
 8000658:	b29a      	uxth	r2, r3
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	801a      	strh	r2, [r3, #0]
    height = data[22] | (data[23] << 8) | (data[24] << 16) | (data[25] << 24);
 800065e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000662:	b21a      	sxth	r2, r3
 8000664:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000668:	021b      	lsls	r3, r3, #8
 800066a:	b21b      	sxth	r3, r3
 800066c:	4313      	orrs	r3, r2
 800066e:	b21a      	sxth	r2, r3
 8000670:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000674:	041b      	lsls	r3, r3, #16
 8000676:	b21b      	sxth	r3, r3
 8000678:	4313      	orrs	r3, r2
 800067a:	b21a      	sxth	r2, r3
 800067c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000680:	061b      	lsls	r3, r3, #24
 8000682:	b21b      	sxth	r3, r3
 8000684:	4313      	orrs	r3, r2
 8000686:	b21b      	sxth	r3, r3
 8000688:	b29a      	uxth	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	801a      	strh	r2, [r3, #0]
}
 800068e:	bf00      	nop
 8000690:	3748      	adds	r7, #72	; 0x48
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <Mount_SD>:
DWORD fre_clust;
uint32_t total, free_space;


void Mount_SD (const TCHAR* path)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <Mount_SD+0x24>)
 80006a6:	f009 fdc1 	bl	800a22c <f_mount>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <Mount_SD+0x28>)
 80006b0:	701a      	strb	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20006aa8 	.word	0x20006aa8
 80006c0:	20007af4 	.word	0x20007af4

080006c4 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80006cc:	2201      	movs	r2, #1
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	2000      	movs	r0, #0
 80006d2:	f009 fdab 	bl	800a22c <f_mount>
 80006d6:	4603      	mov	r3, r0
 80006d8:	461a      	mov	r2, r3
 80006da:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <Unmount_SD+0x24>)
 80006dc:	701a      	strb	r2, [r3, #0]
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20007af4 	.word	0x20007af4

080006ec <Read_File>:
	    return fresult;
	}
}

FRESULT Read_File (char *name)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80006f4:	494c      	ldr	r1, [pc, #304]	; (8000828 <Read_File+0x13c>)
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f00a f9b2 	bl	800aa60 <f_stat>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	4b4a      	ldr	r3, [pc, #296]	; (800082c <Read_File+0x140>)
 8000702:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000704:	4b49      	ldr	r3, [pc, #292]	; (800082c <Read_File+0x140>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d00f      	beq.n	800072c <Read_File+0x40>
	{
		char *buf = malloc(100*sizeof(char));
 800070c:	2064      	movs	r0, #100	; 0x64
 800070e:	f02c fb6d 	bl	802cdec <malloc>
 8000712:	4603      	mov	r3, r0
 8000714:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	4945      	ldr	r1, [pc, #276]	; (8000830 <Read_File+0x144>)
 800071a:	68b8      	ldr	r0, [r7, #8]
 800071c:	f02d f876 	bl	802d80c <siprintf>
		free(buf);
 8000720:	68b8      	ldr	r0, [r7, #8]
 8000722:	f02c fb6b 	bl	802cdfc <free>
	    return fresult;
 8000726:	4b41      	ldr	r3, [pc, #260]	; (800082c <Read_File+0x140>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	e078      	b.n	800081e <Read_File+0x132>
	}

	else
	{
		/* Open file to read */
		fresult = f_open(&fil, name, FA_READ);
 800072c:	2201      	movs	r2, #1
 800072e:	6879      	ldr	r1, [r7, #4]
 8000730:	4840      	ldr	r0, [pc, #256]	; (8000834 <Read_File+0x148>)
 8000732:	f009 fddf 	bl	800a2f4 <f_open>
 8000736:	4603      	mov	r3, r0
 8000738:	461a      	mov	r2, r3
 800073a:	4b3c      	ldr	r3, [pc, #240]	; (800082c <Read_File+0x140>)
 800073c:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 800073e:	4b3b      	ldr	r3, [pc, #236]	; (800082c <Read_File+0x140>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d012      	beq.n	800076c <Read_File+0x80>
		{
			char *buf = malloc(100*sizeof(char));
 8000746:	2064      	movs	r0, #100	; 0x64
 8000748:	f02c fb50 	bl	802cdec <malloc>
 800074c:	4603      	mov	r3, r0
 800074e:	60fb      	str	r3, [r7, #12]
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000750:	4b36      	ldr	r3, [pc, #216]	; (800082c <Read_File+0x140>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4937      	ldr	r1, [pc, #220]	; (8000838 <Read_File+0x14c>)
 800075a:	68f8      	ldr	r0, [r7, #12]
 800075c:	f02d f856 	bl	802d80c <siprintf>
		    free(buf);
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f02c fb4b 	bl	802cdfc <free>
		    return fresult;
 8000766:	4b31      	ldr	r3, [pc, #196]	; (800082c <Read_File+0x140>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	e058      	b.n	800081e <Read_File+0x132>
		}

		/* Read data from the file
		* see the function details for the arguments */

		char *buffer = malloc(sizeof(f_size(&fil)));
 800076c:	2004      	movs	r0, #4
 800076e:	f02c fb3d 	bl	802cdec <malloc>
 8000772:	4603      	mov	r3, r0
 8000774:	61fb      	str	r3, [r7, #28]

		fresult = f_read (&fil, buffer, f_size(&fil), &br);
 8000776:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <Read_File+0x148>)
 8000778:	68da      	ldr	r2, [r3, #12]
 800077a:	4b30      	ldr	r3, [pc, #192]	; (800083c <Read_File+0x150>)
 800077c:	69f9      	ldr	r1, [r7, #28]
 800077e:	482d      	ldr	r0, [pc, #180]	; (8000834 <Read_File+0x148>)
 8000780:	f009 ff73 	bl	800a66a <f_read>
 8000784:	4603      	mov	r3, r0
 8000786:	461a      	mov	r2, r3
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <Read_File+0x140>)
 800078a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800078c:	4b27      	ldr	r3, [pc, #156]	; (800082c <Read_File+0x140>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d013      	beq.n	80007bc <Read_File+0xd0>
		{
			char *buf = malloc(100*sizeof(char));
 8000794:	2064      	movs	r0, #100	; 0x64
 8000796:	f02c fb29 	bl	802cdec <malloc>
 800079a:	4603      	mov	r3, r0
 800079c:	613b      	str	r3, [r7, #16]
			free(buffer);
 800079e:	69f8      	ldr	r0, [r7, #28]
 80007a0:	f02c fb2c 	bl	802cdfc <free>
		 	sprintf (buf, "ERROR!!! No. %d in reading file *%s*\n\n", fresult, name);
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <Read_File+0x140>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4924      	ldr	r1, [pc, #144]	; (8000840 <Read_File+0x154>)
 80007ae:	6938      	ldr	r0, [r7, #16]
 80007b0:	f02d f82c 	bl	802d80c <siprintf>
		  	free(buf);
 80007b4:	6938      	ldr	r0, [r7, #16]
 80007b6:	f02c fb21 	bl	802cdfc <free>
 80007ba:	e02e      	b.n	800081a <Read_File+0x12e>
		}

		else
		{
			FileBuffer = (FILE *)&fil;
 80007bc:	4b21      	ldr	r3, [pc, #132]	; (8000844 <Read_File+0x158>)
 80007be:	4a1d      	ldr	r2, [pc, #116]	; (8000834 <Read_File+0x148>)
 80007c0:	601a      	str	r2, [r3, #0]
			//memcpy( buffer , FileBuffer , sizeof(f_size(&fil)) );
			free(buffer);
 80007c2:	69f8      	ldr	r0, [r7, #28]
 80007c4:	f02c fb1a 	bl	802cdfc <free>

			/* Close file */
			fresult = f_close(&fil);
 80007c8:	481a      	ldr	r0, [pc, #104]	; (8000834 <Read_File+0x148>)
 80007ca:	f00a f91a 	bl	800aa02 <f_close>
 80007ce:	4603      	mov	r3, r0
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <Read_File+0x140>)
 80007d4:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <Read_File+0x140>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d010      	beq.n	8000800 <Read_File+0x114>
			{
				char *buf = malloc(100*sizeof(char));
 80007de:	2064      	movs	r0, #100	; 0x64
 80007e0:	f02c fb04 	bl	802cdec <malloc>
 80007e4:	4603      	mov	r3, r0
 80007e6:	617b      	str	r3, [r7, #20]
				sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <Read_File+0x140>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4915      	ldr	r1, [pc, #84]	; (8000848 <Read_File+0x15c>)
 80007f2:	6978      	ldr	r0, [r7, #20]
 80007f4:	f02d f80a 	bl	802d80c <siprintf>
				free(buf);
 80007f8:	6978      	ldr	r0, [r7, #20]
 80007fa:	f02c faff 	bl	802cdfc <free>
 80007fe:	e00c      	b.n	800081a <Read_File+0x12e>
			}
			else
			{
				char *buf = malloc(100*sizeof(char));
 8000800:	2064      	movs	r0, #100	; 0x64
 8000802:	f02c faf3 	bl	802cdec <malloc>
 8000806:	4603      	mov	r3, r0
 8000808:	61bb      	str	r3, [r7, #24]
				sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	490f      	ldr	r1, [pc, #60]	; (800084c <Read_File+0x160>)
 800080e:	69b8      	ldr	r0, [r7, #24]
 8000810:	f02c fffc 	bl	802d80c <siprintf>
				free(buf);
 8000814:	69b8      	ldr	r0, [r7, #24]
 8000816:	f02c faf1 	bl	802cdfc <free>
			}
		}
	    return fresult;
 800081a:	4b04      	ldr	r3, [pc, #16]	; (800082c <Read_File+0x140>)
 800081c:	781b      	ldrb	r3, [r3, #0]
	}
}
 800081e:	4618      	mov	r0, r3
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20006a90 	.word	0x20006a90
 800082c:	20007af4 	.word	0x20007af4
 8000830:	0802e220 	.word	0x0802e220
 8000834:	20007afc 	.word	0x20007afc
 8000838:	0802e15c 	.word	0x0802e15c
 800083c:	20007ae0 	.word	0x20007ae0
 8000840:	0802e244 	.word	0x0802e244
 8000844:	20007ae4 	.word	0x20007ae4
 8000848:	0802e26c 	.word	0x0802e26c
 800084c:	0802e294 	.word	0x0802e294

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	BufferIsSet = 0;
 8000854:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <main+0x88>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085a:	f001 fb9b 	bl	8001f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085e:	f000 f851 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000862:	f000 fb4d 	bl	8000f00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000866:	f000 fac5 	bl	8000df4 <MX_DMA_Init>
  MX_LTDC_Init();
 800086a:	f000 f957 	bl	8000b1c <MX_LTDC_Init>
  MX_TIM4_Init();
 800086e:	f000 fa3f 	bl	8000cf0 <MX_TIM4_Init>
  MX_DMA2D_Init();
 8000872:	f000 f8cb 	bl	8000a0c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000876:	f000 fae5 	bl	8000e44 <MX_FMC_Init>
  MX_CRC_Init();
 800087a:	f000 f8b3 	bl	80009e4 <MX_CRC_Init>
  MX_FATFS_Init();
 800087e:	f007 fbe3 	bl	8008048 <MX_FATFS_Init>
  MX_I2C2_Init();
 8000882:	f000 f90b 	bl	8000a9c <MX_I2C2_Init>
  MX_SPI1_Init();
 8000886:	f000 f9fd 	bl	8000c84 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800088a:	f000 fa89 	bl	8000da0 <MX_USART1_UART_Init>
  MX_SDIO_SD_Init();
 800088e:	f000 f9c9 	bl	8000c24 <MX_SDIO_SD_Init>
  MX_TouchGFX_Init();
 8000892:	f00d fe85 	bl	800e5a0 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000896:	2104      	movs	r1, #4
 8000898:	4810      	ldr	r0, [pc, #64]	; (80008dc <main+0x8c>)
 800089a:	f005 fd61 	bl	8006360 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800089e:	f00a fa05 	bl	800acac <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <main+0x90>)
 80008a4:	2100      	movs	r1, #0
 80008a6:	480f      	ldr	r0, [pc, #60]	; (80008e4 <main+0x94>)
 80008a8:	f00a fa81 	bl	800adae <osThreadNew>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <main+0x98>)
 80008b0:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <main+0x9c>)
 80008b4:	2100      	movs	r1, #0
 80008b6:	480e      	ldr	r0, [pc, #56]	; (80008f0 <main+0xa0>)
 80008b8:	f00a fa79 	bl	800adae <osThreadNew>
 80008bc:	4603      	mov	r3, r0
 80008be:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <main+0xa4>)
 80008c0:	6013      	str	r3, [r2, #0]

  /* creation of SDIOTask */
  SDIOTaskHandle = osThreadNew(SDIO_Task, NULL, &SDIOTask_attributes);
 80008c2:	4a0d      	ldr	r2, [pc, #52]	; (80008f8 <main+0xa8>)
 80008c4:	2100      	movs	r1, #0
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <main+0xac>)
 80008c8:	f00a fa71 	bl	800adae <osThreadNew>
 80008cc:	4603      	mov	r3, r0
 80008ce:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <main+0xb0>)
 80008d0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008d2:	f00a fa31 	bl	800ad38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 80008d6:	e7fe      	b.n	80008d6 <main+0x86>
 80008d8:	20007bd8 	.word	0x20007bd8
 80008dc:	20007b90 	.word	0x20007b90
 80008e0:	0802ef8c 	.word	0x0802ef8c
 80008e4:	080010e5 	.word	0x080010e5
 80008e8:	20007b8c 	.word	0x20007b8c
 80008ec:	0802efb0 	.word	0x0802efb0
 80008f0:	0800e5ad 	.word	0x0800e5ad
 80008f4:	20007d94 	.word	0x20007d94
 80008f8:	0802efd4 	.word	0x0802efd4
 80008fc:	08001251 	.word	0x08001251
 8000900:	20007ce8 	.word	0x20007ce8

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	; 0x50
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	2230      	movs	r2, #48	; 0x30
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f02c fa88 	bl	802ce28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <SystemClock_Config+0xd8>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	4a2a      	ldr	r2, [pc, #168]	; (80009dc <SystemClock_Config+0xd8>)
 8000932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000936:	6413      	str	r3, [r2, #64]	; 0x40
 8000938:	4b28      	ldr	r3, [pc, #160]	; (80009dc <SystemClock_Config+0xd8>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <SystemClock_Config+0xdc>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a24      	ldr	r2, [pc, #144]	; (80009e0 <SystemClock_Config+0xdc>)
 800094e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <SystemClock_Config+0xdc>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000960:	2302      	movs	r3, #2
 8000962:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000964:	2301      	movs	r3, #1
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000968:	2310      	movs	r3, #16
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096c:	2302      	movs	r3, #2
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000970:	2300      	movs	r3, #0
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000974:	2308      	movs	r3, #8
 8000976:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000978:	23b4      	movs	r3, #180	; 0xb4
 800097a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800097c:	2302      	movs	r3, #2
 800097e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000980:	2308      	movs	r3, #8
 8000982:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000984:	f107 0320 	add.w	r3, r7, #32
 8000988:	4618      	mov	r0, r3
 800098a:	f003 f95d 	bl	8003c48 <HAL_RCC_OscConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000994:	f000 fc84 	bl	80012a0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000998:	f003 f906 	bl	8003ba8 <HAL_PWREx_EnableOverDrive>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80009a2:	f000 fc7d 	bl	80012a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a6:	230f      	movs	r3, #15
 80009a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009aa:	2302      	movs	r3, #2
 80009ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	2105      	movs	r1, #5
 80009c4:	4618      	mov	r0, r3
 80009c6:	f003 fbb7 	bl	8004138 <HAL_RCC_ClockConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80009d0:	f000 fc66 	bl	80012a0 <Error_Handler>
  }
}
 80009d4:	bf00      	nop
 80009d6:	3750      	adds	r7, #80	; 0x50
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40007000 	.word	0x40007000

080009e4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_CRC_Init+0x20>)
 80009ea:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <MX_CRC_Init+0x24>)
 80009ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_CRC_Init+0x20>)
 80009f0:	f001 fc18 	bl	8002224 <HAL_CRC_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80009fa:	f000 fc51 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20007bdc 	.word	0x20007bdc
 8000a08:	40023000 	.word	0x40023000

08000a0c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a10:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <MX_DMA2D_Init+0x88>)
 8000a12:	4a21      	ldr	r2, [pc, #132]	; (8000a98 <MX_DMA2D_Init+0x8c>)
 8000a14:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_BLEND;
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_DMA2D_Init+0x88>)
 8000a18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a1c:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <MX_DMA2D_Init+0x88>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_DMA2D_Init+0x88>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[0].InputOffset = 0;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_DMA2D_Init+0x88>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_DMA2D_Init+0x88>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_DMA2D_Init+0x88>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  hdma2d.LayerCfg[0].InputAlpha = 0;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_DMA2D_Init+0x88>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_DMA2D_Init+0x88>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_DMA2D_Init+0x88>)
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_DMA2D_Init+0x88>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_DMA2D_Init+0x88>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a5a:	480e      	ldr	r0, [pc, #56]	; (8000a94 <MX_DMA2D_Init+0x88>)
 8000a5c:	f001 ff9c 	bl	8002998 <HAL_DMA2D_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 8000a66:	f000 fc1b 	bl	80012a0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 0) != HAL_OK)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <MX_DMA2D_Init+0x88>)
 8000a6e:	f002 f8ed 	bl	8002c4c <HAL_DMA2D_ConfigLayer>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 8000a78:	f000 fc12 	bl	80012a0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_DMA2D_Init+0x88>)
 8000a80:	f002 f8e4 	bl	8002c4c <HAL_DMA2D_ConfigLayer>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_DMA2D_Init+0x82>
  {
    Error_Handler();
 8000a8a:	f000 fc09 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20008740 	.word	0x20008740
 8000a98:	4002b000 	.word	0x4002b000

08000a9c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000aa2:	4a1c      	ldr	r2, [pc, #112]	; (8000b14 <MX_I2C2_Init+0x78>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <MX_I2C2_Init+0x7c>)
 8000aaa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000abe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000ada:	f002 fb0f 	bl	80030fc <HAL_I2C_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ae4:	f000 fbdc 	bl	80012a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4809      	ldr	r0, [pc, #36]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000aec:	f002 fc4a 	bl	8003384 <HAL_I2CEx_ConfigAnalogFilter>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000af6:	f000 fbd3 	bl	80012a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000afa:	2100      	movs	r1, #0
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_I2C2_Init+0x74>)
 8000afe:	f002 fc7d 	bl	80033fc <HAL_I2CEx_ConfigDigitalFilter>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000b08:	f000 fbca 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20007be4 	.word	0x20007be4
 8000b14:	40005800 	.word	0x40005800
 8000b18:	000186a0 	.word	0x000186a0

08000b1c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08e      	sub	sp, #56	; 0x38
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2234      	movs	r2, #52	; 0x34
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f02c f97d 	bl	802ce28 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b2e:	4b3b      	ldr	r3, [pc, #236]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000b30:	4a3b      	ldr	r2, [pc, #236]	; (8000c20 <MX_LTDC_Init+0x104>)
 8000b32:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b34:	4b39      	ldr	r3, [pc, #228]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000b36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000b3a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b3c:	4b37      	ldr	r3, [pc, #220]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000b3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b42:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b44:	4b35      	ldr	r3, [pc, #212]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b4a:	4b34      	ldr	r3, [pc, #208]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000b50:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000b56:	4b31      	ldr	r3, [pc, #196]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 80;
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000b5e:	2250      	movs	r2, #80	; 0x50
 8000b60:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 40;
 8000b62:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000b64:	2228      	movs	r2, #40	; 0x28
 8000b66:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 880;
 8000b68:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000b6a:	f44f 725c 	mov.w	r2, #880	; 0x370
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 520;
 8000b70:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000b72:	f44f 7202 	mov.w	r2, #520	; 0x208
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1080;
 8000b78:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000b7a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8000b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 542;
 8000b80:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000b82:	f240 221e 	movw	r2, #542	; 0x21e
 8000b86:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b98:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ba0:	481e      	ldr	r0, [pc, #120]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000ba2:	f002 fc6b 	bl	800347c <HAL_LTDC_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8000bac:	f000 fb78 	bl	80012a0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000bb4:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000bb8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000bbe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bc2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000bc8:	23ff      	movs	r3, #255	; 0xff
 8000bca:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000bd0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bd4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000bda:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8000be0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8000be6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_LTDC_Init+0x100>)
 8000c06:	f002 fdc1 	bl	800378c <HAL_LTDC_ConfigLayer>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8000c10:	f000 fb46 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	3738      	adds	r7, #56	; 0x38
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20007cec 	.word	0x20007cec
 8000c20:	40016800 	.word	0x40016800

08000c24 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_SDIO_SD_Init+0x58>)
 8000c2a:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <MX_SDIO_SD_Init+0x5c>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_SDIO_SD_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_SDIO_SD_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_SDIO_SD_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_SDIO_SD_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <MX_SDIO_SD_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_SDIO_SD_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

	//disk.is_initialized[0] =0;
	//hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
	if (HAL_SD_Init(&hsd) != HAL_OK) {
 8000c52:	480a      	ldr	r0, [pc, #40]	; (8000c7c <MX_SDIO_SD_Init+0x58>)
 8000c54:	f003 fe30 	bl	80048b8 <HAL_SD_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_SDIO_SD_Init+0x3e>
		Error_Handler();
 8000c5e:	f000 fb1f 	bl	80012a0 <Error_Handler>
	}

	if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK) {
 8000c62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_SDIO_SD_Init+0x58>)
 8000c68:	f004 fbfc 	bl	8005464 <HAL_SD_ConfigWideBusOperation>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_SDIO_SD_Init+0x52>
		Error_Handler();
 8000c72:	f000 fb15 	bl	80012a0 <Error_Handler>
	}
	//f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
  /* USER CODE END SDIO_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200086bc 	.word	0x200086bc
 8000c80:	40012c00 	.word	0x40012c00

08000c84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000c8a:	4a18      	ldr	r2, [pc, #96]	; (8000cec <MX_SPI1_Init+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000c90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cd0:	220a      	movs	r2, #10
 8000cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cd6:	f005 f9a1 	bl	800601c <HAL_SPI_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ce0:	f000 fade 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20008780 	.word	0x20008780
 8000cec:	40013000 	.word	0x40013000

08000cf0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]
 8000d0e:	615a      	str	r2, [r3, #20]
 8000d10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <MX_TIM4_Init+0xa8>)
 8000d14:	4a21      	ldr	r2, [pc, #132]	; (8000d9c <MX_TIM4_Init+0xac>)
 8000d16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <MX_TIM4_Init+0xa8>)
 8000d1a:	2259      	movs	r2, #89	; 0x59
 8000d1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <MX_TIM4_Init+0xa8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 250-1;
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_TIM4_Init+0xa8>)
 8000d26:	22f9      	movs	r2, #249	; 0xf9
 8000d28:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <MX_TIM4_Init+0xa8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <MX_TIM4_Init+0xa8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d36:	4818      	ldr	r0, [pc, #96]	; (8000d98 <MX_TIM4_Init+0xa8>)
 8000d38:	f005 fac2 	bl	80062c0 <HAL_TIM_PWM_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000d42:	f000 faad 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d4e:	f107 0320 	add.w	r3, r7, #32
 8000d52:	4619      	mov	r1, r3
 8000d54:	4810      	ldr	r0, [pc, #64]	; (8000d98 <MX_TIM4_Init+0xa8>)
 8000d56:	f006 f82f 	bl	8006db8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000d60:	f000 fa9e 	bl	80012a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d64:	2360      	movs	r3, #96	; 0x60
 8000d66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 8000d68:	23f9      	movs	r3, #249	; 0xf9
 8000d6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2204      	movs	r2, #4
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4807      	ldr	r0, [pc, #28]	; (8000d98 <MX_TIM4_Init+0xa8>)
 8000d7c:	f005 fcc0 	bl	8006700 <HAL_TIM_PWM_ConfigChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d86:	f000 fa8b 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d8a:	4803      	ldr	r0, [pc, #12]	; (8000d98 <MX_TIM4_Init+0xa8>)
 8000d8c:	f000 fe24 	bl	80019d8 <HAL_TIM_MspPostInit>

}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	; 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20007b90 	.word	0x20007b90
 8000d9c:	40000800 	.word	0x40000800

08000da0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <MX_USART1_UART_Init+0x50>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dd8:	f006 f87e 	bl	8006ed8 <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000de2:	f000 fa5d 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20007d98 	.word	0x20007d98
 8000df0:	40011000 	.word	0x40011000

08000df4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <MX_DMA_Init+0x4c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <MX_DMA_Init+0x4c>)
 8000e04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <MX_DMA_Init+0x4c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2105      	movs	r1, #5
 8000e1a:	203b      	movs	r0, #59	; 0x3b
 8000e1c:	f001 f9d8 	bl	80021d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e20:	203b      	movs	r0, #59	; 0x3b
 8000e22:	f001 f9f1 	bl	8002208 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2105      	movs	r1, #5
 8000e2a:	2045      	movs	r0, #69	; 0x45
 8000e2c:	f001 f9d0 	bl	80021d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e30:	2045      	movs	r0, #69	; 0x45
 8000e32:	f001 f9e9 	bl	8002208 <HAL_NVIC_EnableIRQ>

}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08c      	sub	sp, #48	; 0x30
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]
 8000e5a:	615a      	str	r2, [r3, #20]
 8000e5c:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e5e:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <MX_FMC_Init+0xb4>)
 8000e60:	4a26      	ldr	r2, [pc, #152]	; (8000efc <MX_FMC_Init+0xb8>)
 8000e62:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000e64:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <MX_FMC_Init+0xb4>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <MX_FMC_Init+0xb4>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000e70:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <MX_FMC_Init+0xb4>)
 8000e72:	2208      	movs	r2, #8
 8000e74:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000e76:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <MX_FMC_Init+0xb4>)
 8000e78:	2210      	movs	r2, #16
 8000e7a:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <MX_FMC_Init+0xb4>)
 8000e7e:	2240      	movs	r2, #64	; 0x40
 8000e80:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e82:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <MX_FMC_Init+0xb4>)
 8000e84:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000e88:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <MX_FMC_Init+0xb4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <MX_FMC_Init+0xb4>)
 8000e92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e96:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e98:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <MX_FMC_Init+0xb4>)
 8000e9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <MX_FMC_Init+0xb4>)
 8000ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8000eac:	2308      	movs	r3, #8
 8000eae:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 6;
 8000eb0:	2306      	movs	r3, #6
 8000eb2:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 5;
 8000eb8:	2305      	movs	r3, #5
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <MX_FMC_Init+0xb4>)
 8000ecc:	f005 f823 	bl	8005f16 <HAL_SDRAM_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8000ed6:	f000 f9e3 	bl	80012a0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	FMC_SDRAM_CommandTypeDef command;
	if (SDRAM_Initialization_Sequence(&hsdram1, &command) != HAL_OK) {
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	4619      	mov	r1, r3
 8000ede:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <MX_FMC_Init+0xb4>)
 8000ee0:	f000 fa00 	bl	80012e4 <SDRAM_Initialization_Sequence>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_FMC_Init+0xaa>
		Error_Handler();
 8000eea:	f000 f9d9 	bl	80012a0 <Error_Handler>
	}
  /* USER CODE END FMC_Init 2 */
}
 8000eee:	bf00      	nop
 8000ef0:	3730      	adds	r7, #48	; 0x30
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200087d8 	.word	0x200087d8
 8000efc:	a0000140 	.word	0xa0000140

08000f00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08e      	sub	sp, #56	; 0x38
 8000f04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
 8000f1a:	4b6d      	ldr	r3, [pc, #436]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a6c      	ldr	r2, [pc, #432]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b6a      	ldr	r3, [pc, #424]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	623b      	str	r3, [r7, #32]
 8000f30:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	4b66      	ldr	r3, [pc, #408]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a65      	ldr	r2, [pc, #404]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b63      	ldr	r3, [pc, #396]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f4a:	61fb      	str	r3, [r7, #28]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	4b5f      	ldr	r3, [pc, #380]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a5e      	ldr	r2, [pc, #376]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000f58:	f043 0320 	orr.w	r3, r3, #32
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b5c      	ldr	r3, [pc, #368]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	61bb      	str	r3, [r7, #24]
 8000f68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	4b58      	ldr	r3, [pc, #352]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a57      	ldr	r2, [pc, #348]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b55      	ldr	r3, [pc, #340]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a50      	ldr	r2, [pc, #320]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b4e      	ldr	r3, [pc, #312]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b4a      	ldr	r3, [pc, #296]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a49      	ldr	r2, [pc, #292]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b47      	ldr	r3, [pc, #284]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	4b43      	ldr	r3, [pc, #268]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a42      	ldr	r2, [pc, #264]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000fc8:	f043 0310 	orr.w	r3, r3, #16
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b40      	ldr	r3, [pc, #256]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0310 	and.w	r3, r3, #16
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b3c      	ldr	r3, [pc, #240]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a3b      	ldr	r2, [pc, #236]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	4b35      	ldr	r3, [pc, #212]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a34      	ldr	r2, [pc, #208]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b32      	ldr	r3, [pc, #200]	; (80010d0 <MX_GPIO_Init+0x1d0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	2108      	movs	r1, #8
 8001016:	482f      	ldr	r0, [pc, #188]	; (80010d4 <MX_GPIO_Init+0x1d4>)
 8001018:	f002 f856 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PI3_GPIO_Port, LED_PI3_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2108      	movs	r1, #8
 8001020:	482d      	ldr	r0, [pc, #180]	; (80010d8 <MX_GPIO_Init+0x1d8>)
 8001022:	f002 f851 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PD4_GPIO_Port, LED_PD4_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2110      	movs	r1, #16
 800102a:	482c      	ldr	r0, [pc, #176]	; (80010dc <MX_GPIO_Init+0x1dc>)
 800102c:	f002 f84c 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001030:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001042:	2309      	movs	r3, #9
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	4619      	mov	r1, r3
 800104c:	4824      	ldr	r0, [pc, #144]	; (80010e0 <MX_GPIO_Init+0x1e0>)
 800104e:	f001 fe8f 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001052:	2308      	movs	r3, #8
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001056:	2311      	movs	r3, #17
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001066:	4619      	mov	r1, r3
 8001068:	481a      	ldr	r0, [pc, #104]	; (80010d4 <MX_GPIO_Init+0x1d4>)
 800106a:	f001 fe81 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PI3_Pin */
  GPIO_InitStruct.Pin = LED_PI3_Pin;
 800106e:	2308      	movs	r3, #8
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_PI3_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001082:	4619      	mov	r1, r3
 8001084:	4814      	ldr	r0, [pc, #80]	; (80010d8 <MX_GPIO_Init+0x1d8>)
 8001086:	f001 fe73 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PD4_Pin */
  GPIO_InitStruct.Pin = LED_PD4_Pin;
 800108a:	2310      	movs	r3, #16
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_PD4_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	480e      	ldr	r0, [pc, #56]	; (80010dc <MX_GPIO_Init+0x1dc>)
 80010a2:	f001 fe65 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010b8:	2309      	movs	r3, #9
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4807      	ldr	r0, [pc, #28]	; (80010e0 <MX_GPIO_Init+0x1e0>)
 80010c4:	f001 fe54 	bl	8002d70 <HAL_GPIO_Init>

}
 80010c8:	bf00      	nop
 80010ca:	3738      	adds	r7, #56	; 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40021800 	.word	0x40021800
 80010d8:	40022000 	.word	0x40022000
 80010dc:	40020c00 	.word	0x40020c00
 80010e0:	40020400 	.word	0x40020400

080010e4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
//		osDelay(100);
//		HAL_GPIO_TogglePin(LED_PD4_GPIO_Port, LED_PD4_Pin);
//		osDelay(100);


		Current_Status.MAP = 10;
 80010ec:	4b57      	ldr	r3, [pc, #348]	; (800124c <StartDefaultTask+0x168>)
 80010ee:	220a      	movs	r2, #10
 80010f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		Current_Status.IAT = 10;
 80010f4:	4b55      	ldr	r3, [pc, #340]	; (800124c <StartDefaultTask+0x168>)
 80010f6:	220a      	movs	r2, #10
 80010f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		Current_Status.OILP = 10;
 80010fc:	4b53      	ldr	r3, [pc, #332]	; (800124c <StartDefaultTask+0x168>)
 80010fe:	220a      	movs	r2, #10
 8001100:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		Current_Status.FUELP = 10;
 8001104:	4b51      	ldr	r3, [pc, #324]	; (800124c <StartDefaultTask+0x168>)
 8001106:	220a      	movs	r2, #10
 8001108:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		Current_Status.BATT = 10;
 800110c:	4b4f      	ldr	r3, [pc, #316]	; (800124c <StartDefaultTask+0x168>)
 800110e:	220a      	movs	r2, #10
 8001110:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		Current_Status.BARO = 10;
 8001114:	4b4d      	ldr	r3, [pc, #308]	; (800124c <StartDefaultTask+0x168>)
 8001116:	220a      	movs	r2, #10
 8001118:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		Current_Status.TPS = 10;
 800111c:	4b4b      	ldr	r3, [pc, #300]	; (800124c <StartDefaultTask+0x168>)
 800111e:	220a      	movs	r2, #10
 8001120:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		Current_Status.LAMBDA1 = 10;
 8001124:	4b49      	ldr	r3, [pc, #292]	; (800124c <StartDefaultTask+0x168>)
 8001126:	220a      	movs	r2, #10
 8001128:	849a      	strh	r2, [r3, #36]	; 0x24
		Current_Status.LAMBDA2 = 10;
 800112a:	4b48      	ldr	r3, [pc, #288]	; (800124c <StartDefaultTask+0x168>)
 800112c:	220a      	movs	r2, #10
 800112e:	84da      	strh	r2, [r3, #38]	; 0x26

		Current_Status.RPM = Current_Status.RPM <= 8000 ? Current_Status.RPM + 25 : 0;
 8001130:	4b46      	ldr	r3, [pc, #280]	; (800124c <StartDefaultTask+0x168>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001138:	d804      	bhi.n	8001144 <StartDefaultTask+0x60>
 800113a:	4b44      	ldr	r3, [pc, #272]	; (800124c <StartDefaultTask+0x168>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	3319      	adds	r3, #25
 8001140:	b29b      	uxth	r3, r3
 8001142:	e000      	b.n	8001146 <StartDefaultTask+0x62>
 8001144:	2300      	movs	r3, #0
 8001146:	4a41      	ldr	r2, [pc, #260]	; (800124c <StartDefaultTask+0x168>)
 8001148:	8013      	strh	r3, [r2, #0]


		Current_Status.ECT = Current_Status.RPM;
 800114a:	4b40      	ldr	r3, [pc, #256]	; (800124c <StartDefaultTask+0x168>)
 800114c:	881a      	ldrh	r2, [r3, #0]
 800114e:	4b3f      	ldr	r3, [pc, #252]	; (800124c <StartDefaultTask+0x168>)
 8001150:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		Current_Status.IND_HIGH = !Current_Status.IND_HIGH;
 8001154:	4b3d      	ldr	r3, [pc, #244]	; (800124c <StartDefaultTask+0x168>)
 8001156:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800115a:	2b00      	cmp	r3, #0
 800115c:	bf0c      	ite	eq
 800115e:	2301      	moveq	r3, #1
 8001160:	2300      	movne	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	b29a      	uxth	r2, r3
 8001166:	4b39      	ldr	r3, [pc, #228]	; (800124c <StartDefaultTask+0x168>)
 8001168:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		Current_Status.IND_LOW = !Current_Status.IND_LOW;
 800116c:	4b37      	ldr	r3, [pc, #220]	; (800124c <StartDefaultTask+0x168>)
 800116e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8001172:	2b00      	cmp	r3, #0
 8001174:	bf0c      	ite	eq
 8001176:	2301      	moveq	r3, #1
 8001178:	2300      	movne	r3, #0
 800117a:	b2db      	uxtb	r3, r3
 800117c:	b29a      	uxth	r2, r3
 800117e:	4b33      	ldr	r3, [pc, #204]	; (800124c <StartDefaultTask+0x168>)
 8001180:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
		Current_Status.IND_DTC = !Current_Status.IND_DTC;
 8001184:	4b31      	ldr	r3, [pc, #196]	; (800124c <StartDefaultTask+0x168>)
 8001186:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800118a:	2b00      	cmp	r3, #0
 800118c:	bf0c      	ite	eq
 800118e:	2301      	moveq	r3, #1
 8001190:	2300      	movne	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b2d      	ldr	r3, [pc, #180]	; (800124c <StartDefaultTask+0x168>)
 8001198:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		Current_Status.IND_BATT = !Current_Status.IND_BATT;
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <StartDefaultTask+0x168>)
 800119e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bf0c      	ite	eq
 80011a6:	2301      	moveq	r3, #1
 80011a8:	2300      	movne	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	4b27      	ldr	r3, [pc, #156]	; (800124c <StartDefaultTask+0x168>)
 80011b0:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
		Current_Status.IND_FUEL = !Current_Status.IND_FUEL;
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <StartDefaultTask+0x168>)
 80011b6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bf0c      	ite	eq
 80011be:	2301      	moveq	r3, #1
 80011c0:	2300      	movne	r3, #0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <StartDefaultTask+0x168>)
 80011c8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		Current_Status.IND_OIL = !Current_Status.IND_OIL;
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <StartDefaultTask+0x168>)
 80011ce:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	bf0c      	ite	eq
 80011d6:	2301      	moveq	r3, #1
 80011d8:	2300      	movne	r3, #0
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <StartDefaultTask+0x168>)
 80011e0:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
		Current_Status.IND_PARK = !Current_Status.IND_PARK;
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <StartDefaultTask+0x168>)
 80011e6:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bf0c      	ite	eq
 80011ee:	2301      	moveq	r3, #1
 80011f0:	2300      	movne	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <StartDefaultTask+0x168>)
 80011f8:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		Current_Status.IND_ECT = !Current_Status.IND_ECT;
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <StartDefaultTask+0x168>)
 80011fe:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8001202:	2b00      	cmp	r3, #0
 8001204:	bf0c      	ite	eq
 8001206:	2301      	moveq	r3, #1
 8001208:	2300      	movne	r3, #0
 800120a:	b2db      	uxtb	r3, r3
 800120c:	b29a      	uxth	r2, r3
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <StartDefaultTask+0x168>)
 8001210:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
		Current_Status.IND_LEFT = !Current_Status.IND_LEFT;
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <StartDefaultTask+0x168>)
 8001216:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf0c      	ite	eq
 800121e:	2301      	moveq	r3, #1
 8001220:	2300      	movne	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <StartDefaultTask+0x168>)
 8001228:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
		Current_Status.IND_RIGHT = !Current_Status.IND_RIGHT;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <StartDefaultTask+0x168>)
 800122e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf0c      	ite	eq
 8001236:	2301      	moveq	r3, #1
 8001238:	2300      	movne	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	b29a      	uxth	r2, r3
 800123e:	4b03      	ldr	r3, [pc, #12]	; (800124c <StartDefaultTask+0x168>)
 8001240:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		osDelay(25);
 8001244:	2019      	movs	r0, #25
 8001246:	f009 fe65 	bl	800af14 <osDelay>
		Current_Status.MAP = 10;
 800124a:	e74f      	b.n	80010ec <StartDefaultTask+0x8>
 800124c:	20007c38 	.word	0x20007c38

08001250 <SDIO_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SDIO_Task */
void SDIO_Task(void *argument)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDIO_Task */
  /* Infinite loop */
  for(;;)
  {
	  	//DSTATUS status = SD_status();
		Mount_SD("0:/");
 8001258:	4806      	ldr	r0, [pc, #24]	; (8001274 <SDIO_Task+0x24>)
 800125a:	f7ff fa1d 	bl	8000698 <Mount_SD>
		//Format_SD();
		//Create_File("FILE1.TXT");
		//Create_File("FILE2.TXT");


		Read_File("ic5.bmp");
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <SDIO_Task+0x28>)
 8001260:	f7ff fa44 	bl	80006ec <Read_File>
		//BufferIsSet = 1;
		Unmount_SD("0:/");
 8001264:	4803      	ldr	r0, [pc, #12]	; (8001274 <SDIO_Task+0x24>)
 8001266:	f7ff fa2d 	bl	80006c4 <Unmount_SD>

    osDelay(5000);
 800126a:	f241 3088 	movw	r0, #5000	; 0x1388
 800126e:	f009 fe51 	bl	800af14 <osDelay>
		Mount_SD("0:/");
 8001272:	e7f1      	b.n	8001258 <SDIO_Task+0x8>
 8001274:	0802e4b4 	.word	0x0802e4b4
 8001278:	0802e4b8 	.word	0x0802e4b8

0800127c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d101      	bne.n	8001292 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800128e:	f000 fea3 	bl	8001fd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40002000 	.word	0x40002000

080012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
}
 80012a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012a8:	e7fe      	b.n	80012a8 <Error_Handler+0x8>
	...

080012ac <SDRAM_delay>:
#include "sdram.h"

void SDRAM_delay(__IO uint32_t nCount)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]

  for(index = (100000 * nCount); index != 0; index--);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a09      	ldr	r2, [pc, #36]	; (80012e0 <SDRAM_delay+0x34>)
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	e002      	b.n	80012ca <SDRAM_delay+0x1e>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f9      	bne.n	80012c4 <SDRAM_delay+0x18>

}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	000186a0 	.word	0x000186a0

080012e4 <SDRAM_Initialization_Sequence>:

void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]

  /* Configure a clock configuration enable command */
  Command->CommandMode 					= FMC_SDRAM_CMD_CLK_ENABLE;	// ����SDRAMʱ��
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK; 	// ѡ��Ҫ���Ƶ�����
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	2208      	movs	r2, #8
 80012fc:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	2201      	movs	r2, #1
 8001302:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 800130a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800130e:	6839      	ldr	r1, [r7, #0]
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f004 fe58 	bl	8005fc6 <HAL_SDRAM_SendCommand>
  SDRAM_delay(1);		// ��ʱ�ȴ�
 8001316:	2001      	movs	r0, #1
 8001318:	f7ff ffc8 	bl	80012ac <SDRAM_delay>

  /* Configure a PALL (precharge all) command */
  Command->CommandMode 					= FMC_SDRAM_CMD_PALL;		// Ԥ�������
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	2202      	movs	r2, #2
 8001320:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;	// ѡ��Ҫ���Ƶ�����
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	2208      	movs	r2, #8
 8001326:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	2201      	movs	r2, #1
 800132c:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);  // ���Ϳ���ָ��
 8001334:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001338:	6839      	ldr	r1, [r7, #0]
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f004 fe43 	bl	8005fc6 <HAL_SDRAM_SendCommand>

  /* Configure a Auto-Refresh command */
  Command->CommandMode 					= FMC_SDRAM_CMD_AUTOREFRESH_MODE;	// ʹ���Զ�ˢ��
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	2203      	movs	r2, #3
 8001344:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;          // ѡ��Ҫ���Ƶ�����
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	2208      	movs	r2, #8
 800134a:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber			= 8;                                // �Զ�ˢ�´���
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	2208      	movs	r2, #8
 8001350:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 8001358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800135c:	6839      	ldr	r1, [r7, #0]
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f004 fe31 	bl	8005fc6 <HAL_SDRAM_SendCommand>

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 8001364:	f240 2331 	movw	r3, #561	; 0x231
 8001368:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode					= FMC_SDRAM_CMD_LOAD_MODE;	// ����ģʽ�Ĵ�������
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2204      	movs	r2, #4
 800136e:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;	// ѡ��Ҫ���Ƶ�����
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2208      	movs	r2, #8
 8001374:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	2201      	movs	r2, #1
 800137a:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= tmpmrd;
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 8001382:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001386:	6839      	ldr	r1, [r7, #0]
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f004 fe1c 	bl	8005fc6 <HAL_SDRAM_SendCommand>

  hsdram->Instance->SDRTR |= ((uint32_t)((1386)<< 1));	// ����ˢ�¼�����
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	f443 632d 	orr.w	r3, r3, #2768	; 0xad0
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6153      	str	r3, [r2, #20]
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_MspInit+0x54>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a11      	ldr	r2, [pc, #68]	; (8001400 <HAL_MspInit+0x54>)
 80013bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_MspInit+0x54>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <HAL_MspInit+0x54>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_MspInit+0x54>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_MspInit+0x54>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	210f      	movs	r1, #15
 80013ee:	f06f 0001 	mvn.w	r0, #1
 80013f2:	f000 feed 	bl	80021d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800

08001404 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_CRC_MspInit+0x3c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d10d      	bne.n	8001432 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <HAL_CRC_MspInit+0x40>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a09      	ldr	r2, [pc, #36]	; (8001444 <HAL_CRC_MspInit+0x40>)
 8001420:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <HAL_CRC_MspInit+0x40>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40023000 	.word	0x40023000
 8001444:	40023800 	.word	0x40023800

08001448 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_DMA2D_MspInit+0x48>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d115      	bne.n	8001486 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_DMA2D_MspInit+0x4c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a0c      	ldr	r2, [pc, #48]	; (8001494 <HAL_DMA2D_MspInit+0x4c>)
 8001464:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_DMA2D_MspInit+0x4c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2105      	movs	r1, #5
 800147a:	205a      	movs	r0, #90	; 0x5a
 800147c:	f000 fea8 	bl	80021d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001480:	205a      	movs	r0, #90	; 0x5a
 8001482:	f000 fec1 	bl	8002208 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	4002b000 	.word	0x4002b000
 8001494:	40023800 	.word	0x40023800

08001498 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a19      	ldr	r2, [pc, #100]	; (800151c <HAL_I2C_MspInit+0x84>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d12b      	bne.n	8001512 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <HAL_I2C_MspInit+0x88>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a17      	ldr	r2, [pc, #92]	; (8001520 <HAL_I2C_MspInit+0x88>)
 80014c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_I2C_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014d6:	2330      	movs	r3, #48	; 0x30
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014da:	2312      	movs	r3, #18
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014de:	2301      	movs	r3, #1
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014e6:	2304      	movs	r3, #4
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <HAL_I2C_MspInit+0x8c>)
 80014f2:	f001 fc3d 	bl	8002d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_I2C_MspInit+0x88>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <HAL_I2C_MspInit+0x88>)
 8001500:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_I2C_MspInit+0x88>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40005800 	.word	0x40005800
 8001520:	40023800 	.word	0x40023800
 8001524:	40021c00 	.word	0x40021c00

08001528 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b09a      	sub	sp, #104	; 0x68
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001544:	2230      	movs	r2, #48	; 0x30
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f02b fc6d 	bl	802ce28 <memset>
  if(hltdc->Instance==LTDC)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a6d      	ldr	r2, [pc, #436]	; (8001708 <HAL_LTDC_MspInit+0x1e0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	f040 80d3 	bne.w	8001700 <HAL_LTDC_MspInit+0x1d8>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800155a:	2308      	movs	r3, #8
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800155e:	2332      	movs	r3, #50	; 0x32
 8001560:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001562:	2302      	movs	r3, #2
 8001564:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001566:	2300      	movs	r3, #0
 8001568:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156e:	4618      	mov	r0, r3
 8001570:	f002 ffe4 	bl	800453c <HAL_RCCEx_PeriphCLKConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800157a:	f7ff fe91 	bl	80012a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
 8001582:	4b62      	ldr	r3, [pc, #392]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a61      	ldr	r2, [pc, #388]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 8001588:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b5f      	ldr	r3, [pc, #380]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001596:	623b      	str	r3, [r7, #32]
 8001598:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	4b5b      	ldr	r3, [pc, #364]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a5a      	ldr	r2, [pc, #360]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 80015a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b58      	ldr	r3, [pc, #352]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
 80015ba:	4b54      	ldr	r3, [pc, #336]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a53      	ldr	r2, [pc, #332]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 80015c0:	f043 0320 	orr.w	r3, r3, #32
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b51      	ldr	r3, [pc, #324]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0320 	and.w	r3, r3, #32
 80015ce:	61bb      	str	r3, [r7, #24]
 80015d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	4b4d      	ldr	r3, [pc, #308]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a4c      	ldr	r2, [pc, #304]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b4a      	ldr	r3, [pc, #296]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b46      	ldr	r3, [pc, #280]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a45      	ldr	r2, [pc, #276]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 80015f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b43      	ldr	r3, [pc, #268]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b3f      	ldr	r3, [pc, #252]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a3e      	ldr	r2, [pc, #248]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 8001614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b3c      	ldr	r3, [pc, #240]	; (800170c <HAL_LTDC_MspInit+0x1e4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8001626:	f240 63f7 	movw	r3, #1783	; 0x6f7
 800162a:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001630:	2301      	movs	r3, #1
 8001632:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001638:	230e      	movs	r3, #14
 800163a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800163c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001640:	4619      	mov	r1, r3
 8001642:	4833      	ldr	r0, [pc, #204]	; (8001710 <HAL_LTDC_MspInit+0x1e8>)
 8001644:	f001 fb94 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800164c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001652:	2301      	movs	r3, #1
 8001654:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800165a:	230e      	movs	r3, #14
 800165c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800165e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001662:	4619      	mov	r1, r3
 8001664:	482b      	ldr	r0, [pc, #172]	; (8001714 <HAL_LTDC_MspInit+0x1ec>)
 8001666:	f001 fb83 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800166a:	2302      	movs	r3, #2
 800166c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001672:	2301      	movs	r3, #1
 8001674:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800167a:	2309      	movs	r3, #9
 800167c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001682:	4619      	mov	r1, r3
 8001684:	4824      	ldr	r0, [pc, #144]	; (8001718 <HAL_LTDC_MspInit+0x1f0>)
 8001686:	f001 fb73 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800168a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800169c:	230e      	movs	r3, #14
 800169e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016a4:	4619      	mov	r1, r3
 80016a6:	481d      	ldr	r0, [pc, #116]	; (800171c <HAL_LTDC_MspInit+0x1f4>)
 80016a8:	f001 fb62 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13
 80016ac:	f44f 436e 	mov.w	r3, #60928	; 0xee00
 80016b0:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016be:	230e      	movs	r3, #14
 80016c0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016c6:	4619      	mov	r1, r3
 80016c8:	4814      	ldr	r0, [pc, #80]	; (800171c <HAL_LTDC_MspInit+0x1f4>)
 80016ca:	f001 fb51 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80016ce:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80016d2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d8:	2301      	movs	r3, #1
 80016da:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016e0:	230e      	movs	r3, #14
 80016e2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016e8:	4619      	mov	r1, r3
 80016ea:	480d      	ldr	r0, [pc, #52]	; (8001720 <HAL_LTDC_MspInit+0x1f8>)
 80016ec:	f001 fb40 	bl	8002d70 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2105      	movs	r1, #5
 80016f4:	2058      	movs	r0, #88	; 0x58
 80016f6:	f000 fd6b 	bl	80021d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80016fa:	2058      	movs	r0, #88	; 0x58
 80016fc:	f000 fd84 	bl	8002208 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001700:	bf00      	nop
 8001702:	3768      	adds	r7, #104	; 0x68
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40016800 	.word	0x40016800
 800170c:	40023800 	.word	0x40023800
 8001710:	40022000 	.word	0x40022000
 8001714:	40021400 	.word	0x40021400
 8001718:	40020400 	.word	0x40020400
 800171c:	40021c00 	.word	0x40021c00
 8001720:	40021800 	.word	0x40021800

08001724 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a68      	ldr	r2, [pc, #416]	; (80018e4 <HAL_SD_MspInit+0x1c0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	f040 80c9 	bne.w	80018da <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	4b66      	ldr	r3, [pc, #408]	; (80018e8 <HAL_SD_MspInit+0x1c4>)
 800174e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001750:	4a65      	ldr	r2, [pc, #404]	; (80018e8 <HAL_SD_MspInit+0x1c4>)
 8001752:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001756:	6453      	str	r3, [r2, #68]	; 0x44
 8001758:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <HAL_SD_MspInit+0x1c4>)
 800175a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	4b5f      	ldr	r3, [pc, #380]	; (80018e8 <HAL_SD_MspInit+0x1c4>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	4a5e      	ldr	r2, [pc, #376]	; (80018e8 <HAL_SD_MspInit+0x1c4>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6313      	str	r3, [r2, #48]	; 0x30
 8001774:	4b5c      	ldr	r3, [pc, #368]	; (80018e8 <HAL_SD_MspInit+0x1c4>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	4b58      	ldr	r3, [pc, #352]	; (80018e8 <HAL_SD_MspInit+0x1c4>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	4a57      	ldr	r2, [pc, #348]	; (80018e8 <HAL_SD_MspInit+0x1c4>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	6313      	str	r3, [r2, #48]	; 0x30
 8001790:	4b55      	ldr	r3, [pc, #340]	; (80018e8 <HAL_SD_MspInit+0x1c4>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800179c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80017a0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80017ae:	230c      	movs	r3, #12
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	484c      	ldr	r0, [pc, #304]	; (80018ec <HAL_SD_MspInit+0x1c8>)
 80017ba:	f001 fad9 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017be:	2304      	movs	r3, #4
 80017c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80017ce:	230c      	movs	r3, #12
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	4845      	ldr	r0, [pc, #276]	; (80018f0 <HAL_SD_MspInit+0x1cc>)
 80017da:	f001 fac9 	bl	8002d70 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80017de:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <HAL_SD_MspInit+0x1d0>)
 80017e0:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <HAL_SD_MspInit+0x1d4>)
 80017e2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80017e4:	4b43      	ldr	r3, [pc, #268]	; (80018f4 <HAL_SD_MspInit+0x1d0>)
 80017e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ea:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ec:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <HAL_SD_MspInit+0x1d0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f2:	4b40      	ldr	r3, [pc, #256]	; (80018f4 <HAL_SD_MspInit+0x1d0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017f8:	4b3e      	ldr	r3, [pc, #248]	; (80018f4 <HAL_SD_MspInit+0x1d0>)
 80017fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017fe:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001800:	4b3c      	ldr	r3, [pc, #240]	; (80018f4 <HAL_SD_MspInit+0x1d0>)
 8001802:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001806:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001808:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <HAL_SD_MspInit+0x1d0>)
 800180a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800180e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001810:	4b38      	ldr	r3, [pc, #224]	; (80018f4 <HAL_SD_MspInit+0x1d0>)
 8001812:	2220      	movs	r2, #32
 8001814:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001816:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <HAL_SD_MspInit+0x1d0>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800181c:	4b35      	ldr	r3, [pc, #212]	; (80018f4 <HAL_SD_MspInit+0x1d0>)
 800181e:	2204      	movs	r2, #4
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001822:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <HAL_SD_MspInit+0x1d0>)
 8001824:	2203      	movs	r2, #3
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001828:	4b32      	ldr	r3, [pc, #200]	; (80018f4 <HAL_SD_MspInit+0x1d0>)
 800182a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001830:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <HAL_SD_MspInit+0x1d0>)
 8001832:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001838:	482e      	ldr	r0, [pc, #184]	; (80018f4 <HAL_SD_MspInit+0x1d0>)
 800183a:	f000 fd0f 	bl	800225c <HAL_DMA_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8001844:	f7ff fd2c 	bl	80012a0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a2a      	ldr	r2, [pc, #168]	; (80018f4 <HAL_SD_MspInit+0x1d0>)
 800184c:	641a      	str	r2, [r3, #64]	; 0x40
 800184e:	4a29      	ldr	r2, [pc, #164]	; (80018f4 <HAL_SD_MspInit+0x1d0>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_SD_MspInit+0x1d8>)
 8001856:	4a2a      	ldr	r2, [pc, #168]	; (8001900 <HAL_SD_MspInit+0x1dc>)
 8001858:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800185a:	4b28      	ldr	r3, [pc, #160]	; (80018fc <HAL_SD_MspInit+0x1d8>)
 800185c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001860:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <HAL_SD_MspInit+0x1d8>)
 8001864:	2240      	movs	r2, #64	; 0x40
 8001866:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <HAL_SD_MspInit+0x1d8>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_SD_MspInit+0x1d8>)
 8001870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001874:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001876:	4b21      	ldr	r3, [pc, #132]	; (80018fc <HAL_SD_MspInit+0x1d8>)
 8001878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800187c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <HAL_SD_MspInit+0x1d8>)
 8001880:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001884:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_SD_MspInit+0x1d8>)
 8001888:	2220      	movs	r2, #32
 800188a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <HAL_SD_MspInit+0x1d8>)
 800188e:	2200      	movs	r2, #0
 8001890:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <HAL_SD_MspInit+0x1d8>)
 8001894:	2204      	movs	r2, #4
 8001896:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001898:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_SD_MspInit+0x1d8>)
 800189a:	2203      	movs	r2, #3
 800189c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <HAL_SD_MspInit+0x1d8>)
 80018a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80018a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_SD_MspInit+0x1d8>)
 80018a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018ac:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80018ae:	4813      	ldr	r0, [pc, #76]	; (80018fc <HAL_SD_MspInit+0x1d8>)
 80018b0:	f000 fcd4 	bl	800225c <HAL_DMA_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80018ba:	f7ff fcf1 	bl	80012a0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <HAL_SD_MspInit+0x1d8>)
 80018c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80018c4:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <HAL_SD_MspInit+0x1d8>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2105      	movs	r1, #5
 80018ce:	2031      	movs	r0, #49	; 0x31
 80018d0:	f000 fc7e 	bl	80021d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80018d4:	2031      	movs	r0, #49	; 0x31
 80018d6:	f000 fc97 	bl	8002208 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	; 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40012c00 	.word	0x40012c00
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020800 	.word	0x40020800
 80018f0:	40020c00 	.word	0x40020c00
 80018f4:	20007b2c 	.word	0x20007b2c
 80018f8:	40026458 	.word	0x40026458
 80018fc:	2000865c 	.word	0x2000865c
 8001900:	400264a0 	.word	0x400264a0

08001904 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a19      	ldr	r2, [pc, #100]	; (8001988 <HAL_SPI_MspInit+0x84>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d12b      	bne.n	800197e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_SPI_MspInit+0x88>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a17      	ldr	r2, [pc, #92]	; (800198c <HAL_SPI_MspInit+0x88>)
 8001930:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_SPI_MspInit+0x88>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <HAL_SPI_MspInit+0x88>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a10      	ldr	r2, [pc, #64]	; (800198c <HAL_SPI_MspInit+0x88>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_SPI_MspInit+0x88>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800195e:	2338      	movs	r3, #56	; 0x38
 8001960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800196e:	2305      	movs	r3, #5
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <HAL_SPI_MspInit+0x8c>)
 800197a:	f001 f9f9 	bl	8002d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800197e:	bf00      	nop
 8001980:	3728      	adds	r7, #40	; 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40013000 	.word	0x40013000
 800198c:	40023800 	.word	0x40023800
 8001990:	40020400 	.word	0x40020400

08001994 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d10d      	bne.n	80019c2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_TIM_PWM_MspInit+0x40>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a09      	ldr	r2, [pc, #36]	; (80019d4 <HAL_TIM_PWM_MspInit+0x40>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <HAL_TIM_PWM_MspInit+0x40>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40000800 	.word	0x40000800
 80019d4:	40023800 	.word	0x40023800

080019d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <HAL_TIM_MspPostInit+0x68>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d11e      	bne.n	8001a38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_TIM_MspPostInit+0x6c>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <HAL_TIM_MspPostInit+0x6c>)
 8001a04:	f043 0308 	orr.w	r3, r3, #8
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_TIM_MspPostInit+0x6c>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	4619      	mov	r1, r3
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <HAL_TIM_MspPostInit+0x70>)
 8001a34:	f001 f99c 	bl	8002d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a38:	bf00      	nop
 8001a3a:	3720      	adds	r7, #32
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40000800 	.word	0x40000800
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020c00 	.word	0x40020c00

08001a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a19      	ldr	r2, [pc, #100]	; (8001ad0 <HAL_UART_MspInit+0x84>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d12c      	bne.n	8001ac8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a17      	ldr	r2, [pc, #92]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a78:	f043 0310 	orr.w	r3, r3, #16
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a10      	ldr	r2, [pc, #64]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001aa6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ab8:	2307      	movs	r3, #7
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <HAL_UART_MspInit+0x8c>)
 8001ac4:	f001 f954 	bl	8002d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ac8:	bf00      	nop
 8001aca:	3728      	adds	r7, #40	; 0x28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40011000 	.word	0x40011000
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020000 	.word	0x40020000

08001adc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001af0:	4b3f      	ldr	r3, [pc, #252]	; (8001bf0 <HAL_FMC_MspInit+0x114>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d177      	bne.n	8001be8 <HAL_FMC_MspInit+0x10c>
    return;
  }
  FMC_Initialized = 1;
 8001af8:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_FMC_MspInit+0x114>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	4b3c      	ldr	r3, [pc, #240]	; (8001bf4 <HAL_FMC_MspInit+0x118>)
 8001b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b06:	4a3b      	ldr	r2, [pc, #236]	; (8001bf4 <HAL_FMC_MspInit+0x118>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6393      	str	r3, [r2, #56]	; 0x38
 8001b0e:	4b39      	ldr	r3, [pc, #228]	; (8001bf4 <HAL_FMC_MspInit+0x118>)
 8001b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b1a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001b1e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b2c:	230c      	movs	r3, #12
 8001b2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	4619      	mov	r1, r3
 8001b34:	4830      	ldr	r0, [pc, #192]	; (8001bf8 <HAL_FMC_MspInit+0x11c>)
 8001b36:	f001 f91b 	bl	8002d70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b4a:	230c      	movs	r3, #12
 8001b4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	482a      	ldr	r0, [pc, #168]	; (8001bfc <HAL_FMC_MspInit+0x120>)
 8001b54:	f001 f90c 	bl	8002d70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001b58:	f248 1337 	movw	r3, #33079	; 0x8137
 8001b5c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b66:	2303      	movs	r3, #3
 8001b68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b6a:	230c      	movs	r3, #12
 8001b6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4823      	ldr	r0, [pc, #140]	; (8001c00 <HAL_FMC_MspInit+0x124>)
 8001b74:	f001 f8fc 	bl	8002d70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001b78:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001b7c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b8a:	230c      	movs	r3, #12
 8001b8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	4619      	mov	r1, r3
 8001b92:	481c      	ldr	r0, [pc, #112]	; (8001c04 <HAL_FMC_MspInit+0x128>)
 8001b94:	f001 f8ec 	bl	8002d70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b98:	23c0      	movs	r3, #192	; 0xc0
 8001b9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ba8:	230c      	movs	r3, #12
 8001baa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4815      	ldr	r0, [pc, #84]	; (8001c08 <HAL_FMC_MspInit+0x12c>)
 8001bb2:	f001 f8dd 	bl	8002d70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001bb6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001bba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bc8:	230c      	movs	r3, #12
 8001bca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480e      	ldr	r0, [pc, #56]	; (8001c0c <HAL_FMC_MspInit+0x130>)
 8001bd2:	f001 f8cd 	bl	8002d70 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 5, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2105      	movs	r1, #5
 8001bda:	2030      	movs	r0, #48	; 0x30
 8001bdc:	f000 faf8 	bl	80021d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 8001be0:	2030      	movs	r0, #48	; 0x30
 8001be2:	f000 fb11 	bl	8002208 <HAL_NVIC_EnableIRQ>
 8001be6:	e000      	b.n	8001bea <HAL_FMC_MspInit+0x10e>
    return;
 8001be8:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000118 	.word	0x20000118
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40021400 	.word	0x40021400
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40021800 	.word	0x40021800
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40021c00 	.word	0x40021c00
 8001c0c:	40020c00 	.word	0x40020c00

08001c10 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001c18:	f7ff ff60 	bl	8001adc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08c      	sub	sp, #48	; 0x30
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	202d      	movs	r0, #45	; 0x2d
 8001c3a:	f000 fac9 	bl	80021d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001c3e:	202d      	movs	r0, #45	; 0x2d
 8001c40:	f000 fae2 	bl	8002208 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <HAL_InitTick+0xa4>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	4a1e      	ldr	r2, [pc, #120]	; (8001cc8 <HAL_InitTick+0xa4>)
 8001c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c52:	6413      	str	r3, [r2, #64]	; 0x40
 8001c54:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <HAL_InitTick+0xa4>)
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c60:	f107 0210 	add.w	r2, r7, #16
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4611      	mov	r1, r2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f002 fc34 	bl	80044d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c70:	f002 fc0a 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8001c74:	4603      	mov	r3, r0
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7c:	4a13      	ldr	r2, [pc, #76]	; (8001ccc <HAL_InitTick+0xa8>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	0c9b      	lsrs	r3, r3, #18
 8001c84:	3b01      	subs	r3, #1
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <HAL_InitTick+0xac>)
 8001c8a:	4a12      	ldr	r2, [pc, #72]	; (8001cd4 <HAL_InitTick+0xb0>)
 8001c8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_InitTick+0xac>)
 8001c90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c94:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001c96:	4a0e      	ldr	r2, [pc, #56]	; (8001cd0 <HAL_InitTick+0xac>)
 8001c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <HAL_InitTick+0xac>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_InitTick+0xac>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001ca8:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <HAL_InitTick+0xac>)
 8001caa:	f004 fa40 	bl	800612e <HAL_TIM_Base_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d104      	bne.n	8001cbe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001cb4:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <HAL_InitTick+0xac>)
 8001cb6:	f004 fa93 	bl	80061e0 <HAL_TIM_Base_Start_IT>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	e000      	b.n	8001cc0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3730      	adds	r7, #48	; 0x30
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	431bde83 	.word	0x431bde83
 8001cd0:	2000880c 	.word	0x2000880c
 8001cd4:	40002000 	.word	0x40002000

08001cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <NMI_Handler+0x4>

08001cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <HardFault_Handler+0x4>

08001ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <MemManage_Handler+0x4>

08001cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cee:	e7fe      	b.n	8001cee <BusFault_Handler+0x4>

08001cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <UsageFault_Handler+0x4>

08001cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001d0a:	f004 fbf1 	bl	80064f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000880c 	.word	0x2000880c

08001d18 <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <FMC_IRQHandler+0x10>)
 8001d1e:	f004 f92e 	bl	8005f7e <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200087d8 	.word	0x200087d8

08001d2c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <SDIO_IRQHandler+0x10>)
 8001d32:	f003 f837 	bl	8004da4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200086bc 	.word	0x200086bc

08001d40 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <DMA2_Stream3_IRQHandler+0x10>)
 8001d46:	f000 fbb1 	bl	80024ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20007b2c 	.word	0x20007b2c

08001d54 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <DMA2_Stream6_IRQHandler+0x10>)
 8001d5a:	f000 fba7 	bl	80024ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000865c 	.word	0x2000865c

08001d68 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <LTDC_IRQHandler+0x10>)
 8001d6e:	f001 fc55 	bl	800361c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20007cec 	.word	0x20007cec

08001d7c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <DMA2D_IRQHandler+0x10>)
 8001d82:	f000 fe52 	bl	8002a2a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20008740 	.word	0x20008740

08001d90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
	return 1;
 8001d94:	2301      	movs	r3, #1
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_kill>:

int _kill(int pid, int sig)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001daa:	f02a fccf 	bl	802c74c <__errno>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2216      	movs	r2, #22
 8001db2:	601a      	str	r2, [r3, #0]
	return -1;
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <_exit>:

void _exit (int status)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ffe7 	bl	8001da0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dd2:	e7fe      	b.n	8001dd2 <_exit+0x12>

08001dd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	e00a      	b.n	8001dfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001de6:	f3af 8000 	nop.w
 8001dea:	4601      	mov	r1, r0
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	60ba      	str	r2, [r7, #8]
 8001df2:	b2ca      	uxtb	r2, r1
 8001df4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	dbf0      	blt.n	8001de6 <_read+0x12>
	}

return len;
 8001e04:	687b      	ldr	r3, [r7, #4]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e009      	b.n	8001e34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	60ba      	str	r2, [r7, #8]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3301      	adds	r3, #1
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	dbf1      	blt.n	8001e20 <_write+0x12>
	}
	return len;
 8001e3c:	687b      	ldr	r3, [r7, #4]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_close>:

int _close(int file)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e6e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <_isatty>:

int _isatty(int file)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
	return 1;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
	return 0;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <_sbrk+0x5c>)
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <_sbrk+0x60>)
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <_sbrk+0x64>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <_sbrk+0x68>)
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d207      	bcs.n	8001ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee0:	f02a fc34 	bl	802c74c <__errno>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e009      	b.n	8001f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <_sbrk+0x64>)
 8001f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f02:	68fb      	ldr	r3, [r7, #12]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20030000 	.word	0x20030000
 8001f10:	00000800 	.word	0x00000800
 8001f14:	2000011c 	.word	0x2000011c
 8001f18:	20009918 	.word	0x20009918

08001f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <SystemInit+0x20>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <SystemInit+0x20>)
 8001f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f78 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f44:	480d      	ldr	r0, [pc, #52]	; (8001f7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f46:	490e      	ldr	r1, [pc, #56]	; (8001f80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f48:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f4c:	e002      	b.n	8001f54 <LoopCopyDataInit>

08001f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f52:	3304      	adds	r3, #4

08001f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f58:	d3f9      	bcc.n	8001f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f5c:	4c0b      	ldr	r4, [pc, #44]	; (8001f8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f60:	e001      	b.n	8001f66 <LoopFillZerobss>

08001f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f64:	3204      	adds	r2, #4

08001f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f68:	d3fb      	bcc.n	8001f62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f6a:	f7ff ffd7 	bl	8001f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f6e:	f02a feb1 	bl	802ccd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f72:	f7fe fc6d 	bl	8000850 <main>
  bx  lr    
 8001f76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f78:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f80:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001f84:	080a4880 	.word	0x080a4880
  ldr r2, =_sbss
 8001f88:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001f8c:	20009918 	.word	0x20009918

08001f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f90:	e7fe      	b.n	8001f90 <ADC_IRQHandler>
	...

08001f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_Init+0x40>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <HAL_Init+0x40>)
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_Init+0x40>)
 8001faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_Init+0x40>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 f8fc 	bl	80021ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff fe2e 	bl	8001c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc8:	f7ff f9f0 	bl	80013ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023c00 	.word	0x40023c00

08001fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_IncTick+0x20>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_IncTick+0x24>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <HAL_IncTick+0x24>)
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	2000000c 	.word	0x2000000c
 8001ffc:	20008854 	.word	0x20008854

08002000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return uwTick;
 8002004:	4b03      	ldr	r3, [pc, #12]	; (8002014 <HAL_GetTick+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20008854 	.word	0x20008854

08002018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff ffee 	bl	8002000 <HAL_GetTick>
 8002024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d005      	beq.n	800203e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_Delay+0x44>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800203e:	bf00      	nop
 8002040:	f7ff ffde 	bl	8002000 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	429a      	cmp	r2, r3
 800204e:	d8f7      	bhi.n	8002040 <HAL_Delay+0x28>
  {
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	2000000c 	.word	0x2000000c

08002060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800207c:	4013      	ands	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800208c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002092:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	60d3      	str	r3, [r2, #12]
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	f003 0307 	and.w	r3, r3, #7
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	db0b      	blt.n	80020ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	f003 021f 	and.w	r2, r3, #31
 80020dc:	4907      	ldr	r1, [pc, #28]	; (80020fc <__NVIC_EnableIRQ+0x38>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	2001      	movs	r0, #1
 80020e6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000e100 	.word	0xe000e100

08002100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	6039      	str	r1, [r7, #0]
 800210a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	2b00      	cmp	r3, #0
 8002112:	db0a      	blt.n	800212a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	490c      	ldr	r1, [pc, #48]	; (800214c <__NVIC_SetPriority+0x4c>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	0112      	lsls	r2, r2, #4
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	440b      	add	r3, r1
 8002124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002128:	e00a      	b.n	8002140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4908      	ldr	r1, [pc, #32]	; (8002150 <__NVIC_SetPriority+0x50>)
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	3b04      	subs	r3, #4
 8002138:	0112      	lsls	r2, r2, #4
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	440b      	add	r3, r1
 800213e:	761a      	strb	r2, [r3, #24]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000e100 	.word	0xe000e100
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	; 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f1c3 0307 	rsb	r3, r3, #7
 800216e:	2b04      	cmp	r3, #4
 8002170:	bf28      	it	cs
 8002172:	2304      	movcs	r3, #4
 8002174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3304      	adds	r3, #4
 800217a:	2b06      	cmp	r3, #6
 800217c:	d902      	bls.n	8002184 <NVIC_EncodePriority+0x30>
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3b03      	subs	r3, #3
 8002182:	e000      	b.n	8002186 <NVIC_EncodePriority+0x32>
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	f04f 32ff 	mov.w	r2, #4294967295
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43da      	mvns	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	401a      	ands	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800219c:	f04f 31ff 	mov.w	r1, #4294967295
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	43d9      	mvns	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	4313      	orrs	r3, r2
         );
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3724      	adds	r7, #36	; 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ff4c 	bl	8002060 <__NVIC_SetPriorityGrouping>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e2:	f7ff ff61 	bl	80020a8 <__NVIC_GetPriorityGrouping>
 80021e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68b9      	ldr	r1, [r7, #8]
 80021ec:	6978      	ldr	r0, [r7, #20]
 80021ee:	f7ff ffb1 	bl	8002154 <NVIC_EncodePriority>
 80021f2:	4602      	mov	r2, r0
 80021f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ff80 	bl	8002100 <__NVIC_SetPriority>
}
 8002200:	bf00      	nop
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff54 	bl	80020c4 <__NVIC_EnableIRQ>
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e00e      	b.n	8002254 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	795b      	ldrb	r3, [r3, #5]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d105      	bne.n	800224c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff f8dc 	bl	8001404 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002268:	f7ff feca 	bl	8002000 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e099      	b.n	80023ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0201 	bic.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002298:	e00f      	b.n	80022ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800229a:	f7ff feb1 	bl	8002000 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b05      	cmp	r3, #5
 80022a6:	d908      	bls.n	80022ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2220      	movs	r2, #32
 80022ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2203      	movs	r2, #3
 80022b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e078      	b.n	80023ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1e8      	bne.n	800229a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4b38      	ldr	r3, [pc, #224]	; (80023b4 <HAL_DMA_Init+0x158>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4313      	orrs	r3, r2
 800230a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	2b04      	cmp	r3, #4
 8002312:	d107      	bne.n	8002324 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	4313      	orrs	r3, r2
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4313      	orrs	r3, r2
 8002322:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f023 0307 	bic.w	r3, r3, #7
 800233a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	4313      	orrs	r3, r2
 8002344:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	2b04      	cmp	r3, #4
 800234c:	d117      	bne.n	800237e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00e      	beq.n	800237e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fa9d 	bl	80028a0 <DMA_CheckFifoParam>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2240      	movs	r2, #64	; 0x40
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800237a:	2301      	movs	r3, #1
 800237c:	e016      	b.n	80023ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 fa54 	bl	8002834 <DMA_CalcBaseAndBitshift>
 800238c:	4603      	mov	r3, r0
 800238e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002394:	223f      	movs	r2, #63	; 0x3f
 8002396:	409a      	lsls	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	f010803f 	.word	0xf010803f

080023b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_DMA_Start_IT+0x26>
 80023da:	2302      	movs	r3, #2
 80023dc:	e040      	b.n	8002460 <HAL_DMA_Start_IT+0xa8>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d12f      	bne.n	8002452 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2202      	movs	r2, #2
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 f9e6 	bl	80027d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	223f      	movs	r2, #63	; 0x3f
 8002412:	409a      	lsls	r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0216 	orr.w	r2, r2, #22
 8002426:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d007      	beq.n	8002440 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0208 	orr.w	r2, r2, #8
 800243e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	e005      	b.n	800245e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800245a:	2302      	movs	r3, #2
 800245c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800245e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d004      	beq.n	8002486 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e00c      	b.n	80024a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2205      	movs	r2, #5
 800248a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0201 	bic.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024b8:	4b92      	ldr	r3, [pc, #584]	; (8002704 <HAL_DMA_IRQHandler+0x258>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a92      	ldr	r2, [pc, #584]	; (8002708 <HAL_DMA_IRQHandler+0x25c>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	0a9b      	lsrs	r3, r3, #10
 80024c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	2208      	movs	r2, #8
 80024d8:	409a      	lsls	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01a      	beq.n	8002518 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d013      	beq.n	8002518 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0204 	bic.w	r2, r2, #4
 80024fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	2208      	movs	r2, #8
 8002506:	409a      	lsls	r2, r3
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	f043 0201 	orr.w	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251c:	2201      	movs	r2, #1
 800251e:	409a      	lsls	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d012      	beq.n	800254e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253a:	2201      	movs	r2, #1
 800253c:	409a      	lsls	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002546:	f043 0202 	orr.w	r2, r3, #2
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002552:	2204      	movs	r2, #4
 8002554:	409a      	lsls	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d012      	beq.n	8002584 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00b      	beq.n	8002584 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	2204      	movs	r2, #4
 8002572:	409a      	lsls	r2, r3
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257c:	f043 0204 	orr.w	r2, r3, #4
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	2210      	movs	r2, #16
 800258a:	409a      	lsls	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d043      	beq.n	800261c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d03c      	beq.n	800261c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	2210      	movs	r2, #16
 80025a8:	409a      	lsls	r2, r3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d018      	beq.n	80025ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d108      	bne.n	80025dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d024      	beq.n	800261c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	4798      	blx	r3
 80025da:	e01f      	b.n	800261c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01b      	beq.n	800261c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	4798      	blx	r3
 80025ec:	e016      	b.n	800261c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d107      	bne.n	800260c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0208 	bic.w	r2, r2, #8
 800260a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002620:	2220      	movs	r2, #32
 8002622:	409a      	lsls	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 808e 	beq.w	800274a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 8086 	beq.w	800274a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	2220      	movs	r2, #32
 8002644:	409a      	lsls	r2, r3
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b05      	cmp	r3, #5
 8002654:	d136      	bne.n	80026c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0216 	bic.w	r2, r2, #22
 8002664:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002674:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d103      	bne.n	8002686 <HAL_DMA_IRQHandler+0x1da>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002682:	2b00      	cmp	r3, #0
 8002684:	d007      	beq.n	8002696 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0208 	bic.w	r2, r2, #8
 8002694:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269a:	223f      	movs	r2, #63	; 0x3f
 800269c:	409a      	lsls	r2, r3
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d07d      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	4798      	blx	r3
        }
        return;
 80026c2:	e078      	b.n	80027b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d01c      	beq.n	800270c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d108      	bne.n	80026f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d030      	beq.n	800274a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	4798      	blx	r3
 80026f0:	e02b      	b.n	800274a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d027      	beq.n	800274a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4798      	blx	r3
 8002702:	e022      	b.n	800274a <HAL_DMA_IRQHandler+0x29e>
 8002704:	20000004 	.word	0x20000004
 8002708:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10f      	bne.n	800273a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0210 	bic.w	r2, r2, #16
 8002728:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274e:	2b00      	cmp	r3, #0
 8002750:	d032      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d022      	beq.n	80027a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2205      	movs	r2, #5
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0201 	bic.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	3301      	adds	r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	429a      	cmp	r2, r3
 8002780:	d307      	bcc.n	8002792 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f2      	bne.n	8002776 <HAL_DMA_IRQHandler+0x2ca>
 8002790:	e000      	b.n	8002794 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002792:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	4798      	blx	r3
 80027b4:	e000      	b.n	80027b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80027b6:	bf00      	nop
    }
  }
}
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop

080027c0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	d108      	bne.n	8002818 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002816:	e007      	b.n	8002828 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	60da      	str	r2, [r3, #12]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	3b10      	subs	r3, #16
 8002844:	4a14      	ldr	r2, [pc, #80]	; (8002898 <DMA_CalcBaseAndBitshift+0x64>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800284e:	4a13      	ldr	r2, [pc, #76]	; (800289c <DMA_CalcBaseAndBitshift+0x68>)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4413      	add	r3, r2
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b03      	cmp	r3, #3
 8002860:	d909      	bls.n	8002876 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800286a:	f023 0303 	bic.w	r3, r3, #3
 800286e:	1d1a      	adds	r2, r3, #4
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	659a      	str	r2, [r3, #88]	; 0x58
 8002874:	e007      	b.n	8002886 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800287e:	f023 0303 	bic.w	r3, r3, #3
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	aaaaaaab 	.word	0xaaaaaaab
 800289c:	0802f010 	.word	0x0802f010

080028a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d11f      	bne.n	80028fa <DMA_CheckFifoParam+0x5a>
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d856      	bhi.n	800296e <DMA_CheckFifoParam+0xce>
 80028c0:	a201      	add	r2, pc, #4	; (adr r2, 80028c8 <DMA_CheckFifoParam+0x28>)
 80028c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c6:	bf00      	nop
 80028c8:	080028d9 	.word	0x080028d9
 80028cc:	080028eb 	.word	0x080028eb
 80028d0:	080028d9 	.word	0x080028d9
 80028d4:	0800296f 	.word	0x0800296f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d046      	beq.n	8002972 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e8:	e043      	b.n	8002972 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028f2:	d140      	bne.n	8002976 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f8:	e03d      	b.n	8002976 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002902:	d121      	bne.n	8002948 <DMA_CheckFifoParam+0xa8>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d837      	bhi.n	800297a <DMA_CheckFifoParam+0xda>
 800290a:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <DMA_CheckFifoParam+0x70>)
 800290c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002910:	08002921 	.word	0x08002921
 8002914:	08002927 	.word	0x08002927
 8002918:	08002921 	.word	0x08002921
 800291c:	08002939 	.word	0x08002939
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
      break;
 8002924:	e030      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d025      	beq.n	800297e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002936:	e022      	b.n	800297e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002940:	d11f      	bne.n	8002982 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002946:	e01c      	b.n	8002982 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d903      	bls.n	8002956 <DMA_CheckFifoParam+0xb6>
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d003      	beq.n	800295c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002954:	e018      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	73fb      	strb	r3, [r7, #15]
      break;
 800295a:	e015      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00e      	beq.n	8002986 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
      break;
 800296c:	e00b      	b.n	8002986 <DMA_CheckFifoParam+0xe6>
      break;
 800296e:	bf00      	nop
 8002970:	e00a      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
      break;
 8002972:	bf00      	nop
 8002974:	e008      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
      break;
 8002976:	bf00      	nop
 8002978:	e006      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
      break;
 800297a:	bf00      	nop
 800297c:	e004      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
      break;
 800297e:	bf00      	nop
 8002980:	e002      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
      break;   
 8002982:	bf00      	nop
 8002984:	e000      	b.n	8002988 <DMA_CheckFifoParam+0xe8>
      break;
 8002986:	bf00      	nop
    }
  } 
  
  return status; 
 8002988:	7bfb      	ldrb	r3, [r7, #15]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop

08002998 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e03b      	b.n	8002a22 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fe fd42 	bl	8001448 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e8:	f023 0107 	bic.w	r1, r3, #7
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68d1      	ldr	r1, [r2, #12]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	430b      	orrs	r3, r1
 8002a10:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b084      	sub	sp, #16
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d026      	beq.n	8002a9a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d021      	beq.n	8002a9a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a64:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	f043 0201 	orr.w	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2201      	movs	r2, #1
 8002a78:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d026      	beq.n	8002af2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d021      	beq.n	8002af2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002abc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	f043 0202 	orr.w	r2, r3, #2
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d026      	beq.n	8002b4a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d021      	beq.n	8002b4a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b14:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b22:	f043 0204 	orr.w	r2, r3, #4
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d013      	beq.n	8002b7c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00e      	beq.n	8002b7c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b6c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2204      	movs	r2, #4
 8002b74:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f853 	bl	8002c22 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d024      	beq.n	8002bd0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01f      	beq.n	8002bd0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b9e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01f      	beq.n	8002c1a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01a      	beq.n	8002c1a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2210      	movs	r2, #16
 8002bfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f80e 	bl	8002c36 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_DMA2D_ConfigLayer+0x20>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e079      	b.n	8002d60 <HAL_DMA2D_ConfigLayer+0x114>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	3318      	adds	r3, #24
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	4313      	orrs	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002c96:	4b35      	ldr	r3, [pc, #212]	; (8002d6c <HAL_DMA2D_ConfigLayer+0x120>)
 8002c98:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b0a      	cmp	r3, #10
 8002ca0:	d003      	beq.n	8002caa <HAL_DMA2D_ConfigLayer+0x5e>
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b09      	cmp	r3, #9
 8002ca8:	d107      	bne.n	8002cba <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e005      	b.n	8002cc6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	061b      	lsls	r3, r3, #24
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d120      	bne.n	8002d0e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	ea02 0103 	and.w	r1, r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b0a      	cmp	r3, #10
 8002cf4:	d003      	beq.n	8002cfe <HAL_DMA2D_ConfigLayer+0xb2>
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b09      	cmp	r3, #9
 8002cfc:	d127      	bne.n	8002d4e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d0c:	e01f      	b.n	8002d4e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69da      	ldr	r2, [r3, #28]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	ea02 0103 	and.w	r1, r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b0a      	cmp	r3, #10
 8002d36:	d003      	beq.n	8002d40 <HAL_DMA2D_ConfigLayer+0xf4>
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b09      	cmp	r3, #9
 8002d3e:	d106      	bne.n	8002d4e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002d4c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	ff03000f 	.word	0xff03000f

08002d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	; 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	e177      	b.n	800307c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	f040 8166 	bne.w	8003076 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d005      	beq.n	8002dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d130      	bne.n	8002e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	2203      	movs	r2, #3
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df8:	2201      	movs	r2, #1
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 0201 	and.w	r2, r3, #1
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d017      	beq.n	8002e60 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d123      	bne.n	8002eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	08da      	lsrs	r2, r3, #3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3208      	adds	r2, #8
 8002e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	220f      	movs	r2, #15
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3208      	adds	r2, #8
 8002eae:	69b9      	ldr	r1, [r7, #24]
 8002eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0203 	and.w	r2, r3, #3
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80c0 	beq.w	8003076 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	4b66      	ldr	r3, [pc, #408]	; (8003094 <HAL_GPIO_Init+0x324>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	4a65      	ldr	r2, [pc, #404]	; (8003094 <HAL_GPIO_Init+0x324>)
 8002f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f04:	6453      	str	r3, [r2, #68]	; 0x44
 8002f06:	4b63      	ldr	r3, [pc, #396]	; (8003094 <HAL_GPIO_Init+0x324>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f12:	4a61      	ldr	r2, [pc, #388]	; (8003098 <HAL_GPIO_Init+0x328>)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3302      	adds	r3, #2
 8002f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a58      	ldr	r2, [pc, #352]	; (800309c <HAL_GPIO_Init+0x32c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d037      	beq.n	8002fae <HAL_GPIO_Init+0x23e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a57      	ldr	r2, [pc, #348]	; (80030a0 <HAL_GPIO_Init+0x330>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d031      	beq.n	8002faa <HAL_GPIO_Init+0x23a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a56      	ldr	r2, [pc, #344]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d02b      	beq.n	8002fa6 <HAL_GPIO_Init+0x236>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a55      	ldr	r2, [pc, #340]	; (80030a8 <HAL_GPIO_Init+0x338>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d025      	beq.n	8002fa2 <HAL_GPIO_Init+0x232>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a54      	ldr	r2, [pc, #336]	; (80030ac <HAL_GPIO_Init+0x33c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01f      	beq.n	8002f9e <HAL_GPIO_Init+0x22e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a53      	ldr	r2, [pc, #332]	; (80030b0 <HAL_GPIO_Init+0x340>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d019      	beq.n	8002f9a <HAL_GPIO_Init+0x22a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a52      	ldr	r2, [pc, #328]	; (80030b4 <HAL_GPIO_Init+0x344>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <HAL_GPIO_Init+0x226>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a51      	ldr	r2, [pc, #324]	; (80030b8 <HAL_GPIO_Init+0x348>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00d      	beq.n	8002f92 <HAL_GPIO_Init+0x222>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a50      	ldr	r2, [pc, #320]	; (80030bc <HAL_GPIO_Init+0x34c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <HAL_GPIO_Init+0x21e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4f      	ldr	r2, [pc, #316]	; (80030c0 <HAL_GPIO_Init+0x350>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <HAL_GPIO_Init+0x21a>
 8002f86:	2309      	movs	r3, #9
 8002f88:	e012      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f8a:	230a      	movs	r3, #10
 8002f8c:	e010      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f8e:	2308      	movs	r3, #8
 8002f90:	e00e      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f92:	2307      	movs	r3, #7
 8002f94:	e00c      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f96:	2306      	movs	r3, #6
 8002f98:	e00a      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f9a:	2305      	movs	r3, #5
 8002f9c:	e008      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f9e:	2304      	movs	r3, #4
 8002fa0:	e006      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e004      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e002      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	f002 0203 	and.w	r2, r2, #3
 8002fb6:	0092      	lsls	r2, r2, #2
 8002fb8:	4093      	lsls	r3, r2
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fc0:	4935      	ldr	r1, [pc, #212]	; (8003098 <HAL_GPIO_Init+0x328>)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	089b      	lsrs	r3, r3, #2
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fce:	4b3d      	ldr	r3, [pc, #244]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff2:	4a34      	ldr	r2, [pc, #208]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ff8:	4b32      	ldr	r3, [pc, #200]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800301c:	4a29      	ldr	r2, [pc, #164]	; (80030c4 <HAL_GPIO_Init+0x354>)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003022:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003046:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_GPIO_Init+0x354>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003070:	4a14      	ldr	r2, [pc, #80]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3301      	adds	r3, #1
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b0f      	cmp	r3, #15
 8003080:	f67f ae84 	bls.w	8002d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	3724      	adds	r7, #36	; 0x24
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	40013800 	.word	0x40013800
 800309c:	40020000 	.word	0x40020000
 80030a0:	40020400 	.word	0x40020400
 80030a4:	40020800 	.word	0x40020800
 80030a8:	40020c00 	.word	0x40020c00
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40021400 	.word	0x40021400
 80030b4:	40021800 	.word	0x40021800
 80030b8:	40021c00 	.word	0x40021c00
 80030bc:	40022000 	.word	0x40022000
 80030c0:	40022400 	.word	0x40022400
 80030c4:	40013c00 	.word	0x40013c00

080030c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
 80030d4:	4613      	mov	r3, r2
 80030d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030d8:	787b      	ldrb	r3, [r7, #1]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030de:	887a      	ldrh	r2, [r7, #2]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030e4:	e003      	b.n	80030ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030e6:	887b      	ldrh	r3, [r7, #2]
 80030e8:	041a      	lsls	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	619a      	str	r2, [r3, #24]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e12b      	b.n	8003366 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fe f9b8 	bl	8001498 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2224      	movs	r2, #36	; 0x24
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800314e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800315e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003160:	f001 f992 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8003164:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4a81      	ldr	r2, [pc, #516]	; (8003370 <HAL_I2C_Init+0x274>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d807      	bhi.n	8003180 <HAL_I2C_Init+0x84>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4a80      	ldr	r2, [pc, #512]	; (8003374 <HAL_I2C_Init+0x278>)
 8003174:	4293      	cmp	r3, r2
 8003176:	bf94      	ite	ls
 8003178:	2301      	movls	r3, #1
 800317a:	2300      	movhi	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	e006      	b.n	800318e <HAL_I2C_Init+0x92>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a7d      	ldr	r2, [pc, #500]	; (8003378 <HAL_I2C_Init+0x27c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	bf94      	ite	ls
 8003188:	2301      	movls	r3, #1
 800318a:	2300      	movhi	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0e7      	b.n	8003366 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4a78      	ldr	r2, [pc, #480]	; (800337c <HAL_I2C_Init+0x280>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	0c9b      	lsrs	r3, r3, #18
 80031a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a6a      	ldr	r2, [pc, #424]	; (8003370 <HAL_I2C_Init+0x274>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d802      	bhi.n	80031d0 <HAL_I2C_Init+0xd4>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	3301      	adds	r3, #1
 80031ce:	e009      	b.n	80031e4 <HAL_I2C_Init+0xe8>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	4a69      	ldr	r2, [pc, #420]	; (8003380 <HAL_I2C_Init+0x284>)
 80031dc:	fba2 2303 	umull	r2, r3, r2, r3
 80031e0:	099b      	lsrs	r3, r3, #6
 80031e2:	3301      	adds	r3, #1
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	430b      	orrs	r3, r1
 80031ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	495c      	ldr	r1, [pc, #368]	; (8003370 <HAL_I2C_Init+0x274>)
 8003200:	428b      	cmp	r3, r1
 8003202:	d819      	bhi.n	8003238 <HAL_I2C_Init+0x13c>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1e59      	subs	r1, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003212:	1c59      	adds	r1, r3, #1
 8003214:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003218:	400b      	ands	r3, r1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_I2C_Init+0x138>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1e59      	subs	r1, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	fbb1 f3f3 	udiv	r3, r1, r3
 800322c:	3301      	adds	r3, #1
 800322e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003232:	e051      	b.n	80032d8 <HAL_I2C_Init+0x1dc>
 8003234:	2304      	movs	r3, #4
 8003236:	e04f      	b.n	80032d8 <HAL_I2C_Init+0x1dc>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d111      	bne.n	8003264 <HAL_I2C_Init+0x168>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1e58      	subs	r0, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	440b      	add	r3, r1
 800324e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	e012      	b.n	800328a <HAL_I2C_Init+0x18e>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1e58      	subs	r0, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	0099      	lsls	r1, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	fbb0 f3f3 	udiv	r3, r0, r3
 800327a:	3301      	adds	r3, #1
 800327c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_Init+0x196>
 800328e:	2301      	movs	r3, #1
 8003290:	e022      	b.n	80032d8 <HAL_I2C_Init+0x1dc>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10e      	bne.n	80032b8 <HAL_I2C_Init+0x1bc>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1e58      	subs	r0, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6859      	ldr	r1, [r3, #4]
 80032a2:	460b      	mov	r3, r1
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	440b      	add	r3, r1
 80032a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b6:	e00f      	b.n	80032d8 <HAL_I2C_Init+0x1dc>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1e58      	subs	r0, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	0099      	lsls	r1, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ce:	3301      	adds	r3, #1
 80032d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	6809      	ldr	r1, [r1, #0]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69da      	ldr	r2, [r3, #28]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003306:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6911      	ldr	r1, [r2, #16]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68d2      	ldr	r2, [r2, #12]
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	430b      	orrs	r3, r1
 800331a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	000186a0 	.word	0x000186a0
 8003374:	001e847f 	.word	0x001e847f
 8003378:	003d08ff 	.word	0x003d08ff
 800337c:	431bde83 	.word	0x431bde83
 8003380:	10624dd3 	.word	0x10624dd3

08003384 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b20      	cmp	r3, #32
 8003398:	d129      	bne.n	80033ee <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2224      	movs	r2, #36	; 0x24
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0201 	bic.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0210 	bic.w	r2, r2, #16
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0201 	orr.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	e000      	b.n	80033f0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80033ee:	2302      	movs	r3, #2
  }
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b20      	cmp	r3, #32
 8003414:	d12a      	bne.n	800346c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2224      	movs	r2, #36	; 0x24
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0201 	bic.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003436:	89fb      	ldrh	r3, [r7, #14]
 8003438:	f023 030f 	bic.w	r3, r3, #15
 800343c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	b29a      	uxth	r2, r3
 8003442:	89fb      	ldrh	r3, [r7, #14]
 8003444:	4313      	orrs	r3, r2
 8003446:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	89fa      	ldrh	r2, [r7, #14]
 800344e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e0bf      	b.n	800360e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fe f840 	bl	8001528 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80034be:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6999      	ldr	r1, [r3, #24]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034d4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6899      	ldr	r1, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	4b4a      	ldr	r3, [pc, #296]	; (8003618 <HAL_LTDC_Init+0x19c>)
 80034f0:	400b      	ands	r3, r1
 80034f2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	041b      	lsls	r3, r3, #16
 80034fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6899      	ldr	r1, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68d9      	ldr	r1, [r3, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4b3e      	ldr	r3, [pc, #248]	; (8003618 <HAL_LTDC_Init+0x19c>)
 800351e:	400b      	ands	r3, r1
 8003520:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	041b      	lsls	r3, r3, #16
 8003528:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68d9      	ldr	r1, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1a      	ldr	r2, [r3, #32]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6919      	ldr	r1, [r3, #16]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	4b33      	ldr	r3, [pc, #204]	; (8003618 <HAL_LTDC_Init+0x19c>)
 800354c:	400b      	ands	r3, r1
 800354e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	041b      	lsls	r3, r3, #16
 8003556:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6919      	ldr	r1, [r3, #16]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6959      	ldr	r1, [r3, #20]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b27      	ldr	r3, [pc, #156]	; (8003618 <HAL_LTDC_Init+0x19c>)
 800357a:	400b      	ands	r3, r1
 800357c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	041b      	lsls	r3, r3, #16
 8003584:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6959      	ldr	r1, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035a2:	021b      	lsls	r3, r3, #8
 80035a4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80035ac:	041b      	lsls	r3, r3, #16
 80035ae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0206 	orr.w	r2, r2, #6
 80035ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	f000f800 	.word	0xf000f800

0800361c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003632:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b00      	cmp	r3, #0
 800363c:	d023      	beq.n	8003686 <HAL_LTDC_IRQHandler+0x6a>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01e      	beq.n	8003686 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0204 	bic.w	r2, r2, #4
 8003656:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2204      	movs	r2, #4
 800365e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003666:	f043 0201 	orr.w	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2204      	movs	r2, #4
 8003674:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f86f 	bl	8003764 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d023      	beq.n	80036d8 <HAL_LTDC_IRQHandler+0xbc>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01e      	beq.n	80036d8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0202 	bic.w	r2, r2, #2
 80036a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2202      	movs	r2, #2
 80036b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036b8:	f043 0202 	orr.w	r2, r3, #2
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2204      	movs	r2, #4
 80036c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f846 	bl	8003764 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01b      	beq.n	800371a <HAL_LTDC_IRQHandler+0xfe>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d016      	beq.n	800371a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2201      	movs	r2, #1
 8003702:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f012 f92f 	bl	8015978 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01b      	beq.n	800375c <HAL_LTDC_IRQHandler+0x140>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d016      	beq.n	800375c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0208 	bic.w	r2, r2, #8
 800373c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2208      	movs	r2, #8
 8003744:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f80e 	bl	8003778 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800378c:	b5b0      	push	{r4, r5, r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_LTDC_ConfigLayer+0x1a>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e02c      	b.n	8003800 <HAL_LTDC_ConfigLayer+0x74>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2134      	movs	r1, #52	; 0x34
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	4413      	add	r3, r2
 80037c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4614      	mov	r4, r2
 80037ca:	461d      	mov	r5, r3
 80037cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f849 	bl	8003878 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2201      	movs	r2, #1
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bdb0      	pop	{r4, r5, r7, pc}

08003808 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_LTDC_ProgramLineEvent+0x18>
 800381c:	2302      	movs	r3, #2
 800381e:	e023      	b.n	8003868 <HAL_LTDC_ProgramLineEvent+0x60>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8003840:	4a0c      	ldr	r2, [pc, #48]	; (8003874 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0201 	orr.w	r2, r2, #1
 8003854:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40016800 	.word	0x40016800

08003878 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003878:	b480      	push	{r7}
 800387a:	b089      	sub	sp, #36	; 0x24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	0c1b      	lsrs	r3, r3, #16
 8003890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003894:	4413      	add	r3, r2
 8003896:	041b      	lsls	r3, r3, #16
 8003898:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	01db      	lsls	r3, r3, #7
 80038a4:	4413      	add	r3, r2
 80038a6:	3384      	adds	r3, #132	; 0x84
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	4611      	mov	r1, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	01d2      	lsls	r2, r2, #7
 80038b4:	440a      	add	r2, r1
 80038b6:	3284      	adds	r2, #132	; 0x84
 80038b8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80038bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	0c1b      	lsrs	r3, r3, #16
 80038ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ce:	4413      	add	r3, r2
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4619      	mov	r1, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	01db      	lsls	r3, r3, #7
 80038dc:	440b      	add	r3, r1
 80038de:	3384      	adds	r3, #132	; 0x84
 80038e0:	4619      	mov	r1, r3
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038f6:	4413      	add	r3, r2
 80038f8:	041b      	lsls	r3, r3, #16
 80038fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	01db      	lsls	r3, r3, #7
 8003906:	4413      	add	r3, r2
 8003908:	3384      	adds	r3, #132	; 0x84
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	4611      	mov	r1, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	01d2      	lsls	r2, r2, #7
 8003916:	440a      	add	r2, r1
 8003918:	3284      	adds	r2, #132	; 0x84
 800391a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800391e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800392e:	4413      	add	r3, r2
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4619      	mov	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	01db      	lsls	r3, r3, #7
 800393c:	440b      	add	r3, r1
 800393e:	3384      	adds	r3, #132	; 0x84
 8003940:	4619      	mov	r1, r3
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4313      	orrs	r3, r2
 8003946:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	01db      	lsls	r3, r3, #7
 8003952:	4413      	add	r3, r2
 8003954:	3384      	adds	r3, #132	; 0x84
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	4611      	mov	r1, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	01d2      	lsls	r2, r2, #7
 8003962:	440a      	add	r2, r1
 8003964:	3284      	adds	r2, #132	; 0x84
 8003966:	f023 0307 	bic.w	r3, r3, #7
 800396a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	461a      	mov	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	01db      	lsls	r3, r3, #7
 8003976:	4413      	add	r3, r2
 8003978:	3384      	adds	r3, #132	; 0x84
 800397a:	461a      	mov	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003992:	041b      	lsls	r3, r3, #16
 8003994:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	061b      	lsls	r3, r3, #24
 800399c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	01db      	lsls	r3, r3, #7
 80039a8:	4413      	add	r3, r2
 80039aa:	3384      	adds	r3, #132	; 0x84
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	01db      	lsls	r3, r3, #7
 80039b8:	4413      	add	r3, r2
 80039ba:	3384      	adds	r3, #132	; 0x84
 80039bc:	461a      	mov	r2, r3
 80039be:	2300      	movs	r3, #0
 80039c0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039c8:	461a      	mov	r2, r3
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	431a      	orrs	r2, r3
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4619      	mov	r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	01db      	lsls	r3, r3, #7
 80039dc:	440b      	add	r3, r1
 80039de:	3384      	adds	r3, #132	; 0x84
 80039e0:	4619      	mov	r1, r3
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	01db      	lsls	r3, r3, #7
 80039f2:	4413      	add	r3, r2
 80039f4:	3384      	adds	r3, #132	; 0x84
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	4611      	mov	r1, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	01d2      	lsls	r2, r2, #7
 8003a02:	440a      	add	r2, r1
 8003a04:	3284      	adds	r2, #132	; 0x84
 8003a06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a0a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	01db      	lsls	r3, r3, #7
 8003a16:	4413      	add	r3, r2
 8003a18:	3384      	adds	r3, #132	; 0x84
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	01db      	lsls	r3, r3, #7
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3384      	adds	r3, #132	; 0x84
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	4611      	mov	r1, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	01d2      	lsls	r2, r2, #7
 8003a3c:	440a      	add	r2, r1
 8003a3e:	3284      	adds	r2, #132	; 0x84
 8003a40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a44:	f023 0307 	bic.w	r3, r3, #7
 8003a48:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	69da      	ldr	r2, [r3, #28]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	68f9      	ldr	r1, [r7, #12]
 8003a54:	6809      	ldr	r1, [r1, #0]
 8003a56:	4608      	mov	r0, r1
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	01c9      	lsls	r1, r1, #7
 8003a5c:	4401      	add	r1, r0
 8003a5e:	3184      	adds	r1, #132	; 0x84
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	01db      	lsls	r3, r3, #7
 8003a6e:	4413      	add	r3, r2
 8003a70:	3384      	adds	r3, #132	; 0x84
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	01db      	lsls	r3, r3, #7
 8003a7e:	4413      	add	r3, r2
 8003a80:	3384      	adds	r3, #132	; 0x84
 8003a82:	461a      	mov	r2, r3
 8003a84:	2300      	movs	r3, #0
 8003a86:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	01db      	lsls	r3, r3, #7
 8003a92:	4413      	add	r3, r2
 8003a94:	3384      	adds	r3, #132	; 0x84
 8003a96:	461a      	mov	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d102      	bne.n	8003aac <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	e01b      	b.n	8003ae4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d102      	bne.n	8003aba <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	e014      	b.n	8003ae4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d00b      	beq.n	8003ada <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d007      	beq.n	8003ada <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d003      	beq.n	8003ada <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003ad6:	2b07      	cmp	r3, #7
 8003ad8:	d102      	bne.n	8003ae0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003ada:	2302      	movs	r3, #2
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	e001      	b.n	8003ae4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	01db      	lsls	r3, r3, #7
 8003aee:	4413      	add	r3, r2
 8003af0:	3384      	adds	r3, #132	; 0x84
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	4611      	mov	r1, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	01d2      	lsls	r2, r2, #7
 8003afe:	440a      	add	r2, r1
 8003b00:	3284      	adds	r2, #132	; 0x84
 8003b02:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003b06:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	041a      	lsls	r2, r3, #16
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	1acb      	subs	r3, r1, r3
 8003b1e:	69f9      	ldr	r1, [r7, #28]
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	3303      	adds	r3, #3
 8003b26:	68f9      	ldr	r1, [r7, #12]
 8003b28:	6809      	ldr	r1, [r1, #0]
 8003b2a:	4608      	mov	r0, r1
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	01c9      	lsls	r1, r1, #7
 8003b30:	4401      	add	r1, r0
 8003b32:	3184      	adds	r1, #132	; 0x84
 8003b34:	4313      	orrs	r3, r2
 8003b36:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	01db      	lsls	r3, r3, #7
 8003b42:	4413      	add	r3, r2
 8003b44:	3384      	adds	r3, #132	; 0x84
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	01d2      	lsls	r2, r2, #7
 8003b52:	440a      	add	r2, r1
 8003b54:	3284      	adds	r2, #132	; 0x84
 8003b56:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b5a:	f023 0307 	bic.w	r3, r3, #7
 8003b5e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	01db      	lsls	r3, r3, #7
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3384      	adds	r3, #132	; 0x84
 8003b6e:	461a      	mov	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	01db      	lsls	r3, r3, #7
 8003b80:	4413      	add	r3, r2
 8003b82:	3384      	adds	r3, #132	; 0x84
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	01d2      	lsls	r2, r2, #7
 8003b90:	440a      	add	r2, r1
 8003b92:	3284      	adds	r2, #132	; 0x84
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6013      	str	r3, [r2, #0]
}
 8003b9a:	bf00      	nop
 8003b9c:	3724      	adds	r7, #36	; 0x24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	603b      	str	r3, [r7, #0]
 8003bb6:	4b20      	ldr	r3, [pc, #128]	; (8003c38 <HAL_PWREx_EnableOverDrive+0x90>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	4a1f      	ldr	r2, [pc, #124]	; (8003c38 <HAL_PWREx_EnableOverDrive+0x90>)
 8003bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc2:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <HAL_PWREx_EnableOverDrive+0x90>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bce:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <HAL_PWREx_EnableOverDrive+0x94>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bd4:	f7fe fa14 	bl	8002000 <HAL_GetTick>
 8003bd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bda:	e009      	b.n	8003bf0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bdc:	f7fe fa10 	bl	8002000 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bea:	d901      	bls.n	8003bf0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e01f      	b.n	8003c30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bf0:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bfc:	d1ee      	bne.n	8003bdc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003bfe:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c04:	f7fe f9fc 	bl	8002000 <HAL_GetTick>
 8003c08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c0a:	e009      	b.n	8003c20 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c0c:	f7fe f9f8 	bl	8002000 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c1a:	d901      	bls.n	8003c20 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e007      	b.n	8003c30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c20:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c2c:	d1ee      	bne.n	8003c0c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	420e0040 	.word	0x420e0040
 8003c40:	40007000 	.word	0x40007000
 8003c44:	420e0044 	.word	0x420e0044

08003c48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e264      	b.n	8004124 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d075      	beq.n	8003d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c66:	4ba3      	ldr	r3, [pc, #652]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d00c      	beq.n	8003c8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c72:	4ba0      	ldr	r3, [pc, #640]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d112      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c7e:	4b9d      	ldr	r3, [pc, #628]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c8a:	d10b      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	4b99      	ldr	r3, [pc, #612]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d05b      	beq.n	8003d50 <HAL_RCC_OscConfig+0x108>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d157      	bne.n	8003d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e23f      	b.n	8004124 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cac:	d106      	bne.n	8003cbc <HAL_RCC_OscConfig+0x74>
 8003cae:	4b91      	ldr	r3, [pc, #580]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a90      	ldr	r2, [pc, #576]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e01d      	b.n	8003cf8 <HAL_RCC_OscConfig+0xb0>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x98>
 8003cc6:	4b8b      	ldr	r3, [pc, #556]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a8a      	ldr	r2, [pc, #552]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	4b88      	ldr	r3, [pc, #544]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a87      	ldr	r2, [pc, #540]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCC_OscConfig+0xb0>
 8003ce0:	4b84      	ldr	r3, [pc, #528]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a83      	ldr	r2, [pc, #524]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	4b81      	ldr	r3, [pc, #516]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a80      	ldr	r2, [pc, #512]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d013      	beq.n	8003d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7fe f97e 	bl	8002000 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d08:	f7fe f97a 	bl	8002000 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b64      	cmp	r3, #100	; 0x64
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e204      	b.n	8004124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	4b76      	ldr	r3, [pc, #472]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0xc0>
 8003d26:	e014      	b.n	8003d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fe f96a 	bl	8002000 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d30:	f7fe f966 	bl	8002000 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	; 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e1f0      	b.n	8004124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d42:	4b6c      	ldr	r3, [pc, #432]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0xe8>
 8003d4e:	e000      	b.n	8003d52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d063      	beq.n	8003e26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d5e:	4b65      	ldr	r3, [pc, #404]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00b      	beq.n	8003d82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d6a:	4b62      	ldr	r3, [pc, #392]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d11c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d76:	4b5f      	ldr	r3, [pc, #380]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d116      	bne.n	8003db0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d82:	4b5c      	ldr	r3, [pc, #368]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_RCC_OscConfig+0x152>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d001      	beq.n	8003d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e1c4      	b.n	8004124 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9a:	4b56      	ldr	r3, [pc, #344]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4952      	ldr	r1, [pc, #328]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dae:	e03a      	b.n	8003e26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d020      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db8:	4b4f      	ldr	r3, [pc, #316]	; (8003ef8 <HAL_RCC_OscConfig+0x2b0>)
 8003dba:	2201      	movs	r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbe:	f7fe f91f 	bl	8002000 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc6:	f7fe f91b 	bl	8002000 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e1a5      	b.n	8004124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd8:	4b46      	ldr	r3, [pc, #280]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de4:	4b43      	ldr	r3, [pc, #268]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4940      	ldr	r1, [pc, #256]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	600b      	str	r3, [r1, #0]
 8003df8:	e015      	b.n	8003e26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfa:	4b3f      	ldr	r3, [pc, #252]	; (8003ef8 <HAL_RCC_OscConfig+0x2b0>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fe f8fe 	bl	8002000 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e08:	f7fe f8fa 	bl	8002000 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e184      	b.n	8004124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1a:	4b36      	ldr	r3, [pc, #216]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d030      	beq.n	8003e94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d016      	beq.n	8003e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3a:	4b30      	ldr	r3, [pc, #192]	; (8003efc <HAL_RCC_OscConfig+0x2b4>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e40:	f7fe f8de 	bl	8002000 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e48:	f7fe f8da 	bl	8002000 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e164      	b.n	8004124 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5a:	4b26      	ldr	r3, [pc, #152]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0x200>
 8003e66:	e015      	b.n	8003e94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e68:	4b24      	ldr	r3, [pc, #144]	; (8003efc <HAL_RCC_OscConfig+0x2b4>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6e:	f7fe f8c7 	bl	8002000 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e76:	f7fe f8c3 	bl	8002000 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e14d      	b.n	8004124 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e88:	4b1a      	ldr	r3, [pc, #104]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f0      	bne.n	8003e76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 80a0 	beq.w	8003fe2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ea6:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10f      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	4a0e      	ldr	r2, [pc, #56]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec2:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_RCC_OscConfig+0x2b8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d121      	bne.n	8003f22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ede:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <HAL_RCC_OscConfig+0x2b8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <HAL_RCC_OscConfig+0x2b8>)
 8003ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eea:	f7fe f889 	bl	8002000 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef0:	e011      	b.n	8003f16 <HAL_RCC_OscConfig+0x2ce>
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	42470000 	.word	0x42470000
 8003efc:	42470e80 	.word	0x42470e80
 8003f00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f04:	f7fe f87c 	bl	8002000 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e106      	b.n	8004124 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f16:	4b85      	ldr	r3, [pc, #532]	; (800412c <HAL_RCC_OscConfig+0x4e4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d106      	bne.n	8003f38 <HAL_RCC_OscConfig+0x2f0>
 8003f2a:	4b81      	ldr	r3, [pc, #516]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	4a80      	ldr	r2, [pc, #512]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	6713      	str	r3, [r2, #112]	; 0x70
 8003f36:	e01c      	b.n	8003f72 <HAL_RCC_OscConfig+0x32a>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b05      	cmp	r3, #5
 8003f3e:	d10c      	bne.n	8003f5a <HAL_RCC_OscConfig+0x312>
 8003f40:	4b7b      	ldr	r3, [pc, #492]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	4a7a      	ldr	r2, [pc, #488]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8003f46:	f043 0304 	orr.w	r3, r3, #4
 8003f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4c:	4b78      	ldr	r3, [pc, #480]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	4a77      	ldr	r2, [pc, #476]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8003f52:	f043 0301 	orr.w	r3, r3, #1
 8003f56:	6713      	str	r3, [r2, #112]	; 0x70
 8003f58:	e00b      	b.n	8003f72 <HAL_RCC_OscConfig+0x32a>
 8003f5a:	4b75      	ldr	r3, [pc, #468]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5e:	4a74      	ldr	r2, [pc, #464]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	6713      	str	r3, [r2, #112]	; 0x70
 8003f66:	4b72      	ldr	r3, [pc, #456]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6a:	4a71      	ldr	r2, [pc, #452]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8003f6c:	f023 0304 	bic.w	r3, r3, #4
 8003f70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d015      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7a:	f7fe f841 	bl	8002000 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f80:	e00a      	b.n	8003f98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f82:	f7fe f83d 	bl	8002000 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e0c5      	b.n	8004124 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f98:	4b65      	ldr	r3, [pc, #404]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0ee      	beq.n	8003f82 <HAL_RCC_OscConfig+0x33a>
 8003fa4:	e014      	b.n	8003fd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa6:	f7fe f82b 	bl	8002000 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fe f827 	bl	8002000 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e0af      	b.n	8004124 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc4:	4b5a      	ldr	r3, [pc, #360]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1ee      	bne.n	8003fae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d105      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd6:	4b56      	ldr	r3, [pc, #344]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	4a55      	ldr	r2, [pc, #340]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8003fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 809b 	beq.w	8004122 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fec:	4b50      	ldr	r3, [pc, #320]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 030c 	and.w	r3, r3, #12
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d05c      	beq.n	80040b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d141      	bne.n	8004084 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004000:	4b4c      	ldr	r3, [pc, #304]	; (8004134 <HAL_RCC_OscConfig+0x4ec>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004006:	f7fd fffb 	bl	8002000 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400e:	f7fd fff7 	bl	8002000 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e081      	b.n	8004124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004020:	4b43      	ldr	r3, [pc, #268]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f0      	bne.n	800400e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	019b      	lsls	r3, r3, #6
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	3b01      	subs	r3, #1
 8004046:	041b      	lsls	r3, r3, #16
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	061b      	lsls	r3, r3, #24
 8004050:	4937      	ldr	r1, [pc, #220]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8004052:	4313      	orrs	r3, r2
 8004054:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004056:	4b37      	ldr	r3, [pc, #220]	; (8004134 <HAL_RCC_OscConfig+0x4ec>)
 8004058:	2201      	movs	r2, #1
 800405a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405c:	f7fd ffd0 	bl	8002000 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004064:	f7fd ffcc 	bl	8002000 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e056      	b.n	8004124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004076:	4b2e      	ldr	r3, [pc, #184]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0x41c>
 8004082:	e04e      	b.n	8004122 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004084:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <HAL_RCC_OscConfig+0x4ec>)
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408a:	f7fd ffb9 	bl	8002000 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004092:	f7fd ffb5 	bl	8002000 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e03f      	b.n	8004124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a4:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f0      	bne.n	8004092 <HAL_RCC_OscConfig+0x44a>
 80040b0:	e037      	b.n	8004122 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e032      	b.n	8004124 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040be:	4b1c      	ldr	r3, [pc, #112]	; (8004130 <HAL_RCC_OscConfig+0x4e8>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d028      	beq.n	800411e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d121      	bne.n	800411e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d11a      	bne.n	800411e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040ee:	4013      	ands	r3, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d111      	bne.n	800411e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	3b01      	subs	r3, #1
 8004108:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800410a:	429a      	cmp	r2, r3
 800410c:	d107      	bne.n	800411e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800411a:	429a      	cmp	r2, r3
 800411c:	d001      	beq.n	8004122 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40007000 	.word	0x40007000
 8004130:	40023800 	.word	0x40023800
 8004134:	42470060 	.word	0x42470060

08004138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0cc      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800414c:	4b68      	ldr	r3, [pc, #416]	; (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d90c      	bls.n	8004174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b65      	ldr	r3, [pc, #404]	; (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004162:	4b63      	ldr	r3, [pc, #396]	; (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0b8      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d020      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800418c:	4b59      	ldr	r3, [pc, #356]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a58      	ldr	r2, [pc, #352]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a4:	4b53      	ldr	r3, [pc, #332]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	4a52      	ldr	r2, [pc, #328]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b0:	4b50      	ldr	r3, [pc, #320]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	494d      	ldr	r1, [pc, #308]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d044      	beq.n	8004258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d107      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d6:	4b47      	ldr	r3, [pc, #284]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d119      	bne.n	8004216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e07f      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d003      	beq.n	80041f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d107      	bne.n	8004206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f6:	4b3f      	ldr	r3, [pc, #252]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e06f      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004206:	4b3b      	ldr	r3, [pc, #236]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e067      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004216:	4b37      	ldr	r3, [pc, #220]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f023 0203 	bic.w	r2, r3, #3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	4934      	ldr	r1, [pc, #208]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	4313      	orrs	r3, r2
 8004226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004228:	f7fd feea 	bl	8002000 <HAL_GetTick>
 800422c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	e00a      	b.n	8004246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004230:	f7fd fee6 	bl	8002000 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f241 3288 	movw	r2, #5000	; 0x1388
 800423e:	4293      	cmp	r3, r2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e04f      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004246:	4b2b      	ldr	r3, [pc, #172]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 020c 	and.w	r2, r3, #12
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	429a      	cmp	r2, r3
 8004256:	d1eb      	bne.n	8004230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004258:	4b25      	ldr	r3, [pc, #148]	; (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d20c      	bcs.n	8004280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004266:	4b22      	ldr	r3, [pc, #136]	; (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426e:	4b20      	ldr	r3, [pc, #128]	; (80042f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e032      	b.n	80042e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800428c:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4916      	ldr	r1, [pc, #88]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	490e      	ldr	r1, [pc, #56]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042be:	f000 f821 	bl	8004304 <HAL_RCC_GetSysClockFreq>
 80042c2:	4602      	mov	r2, r0
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	490a      	ldr	r1, [pc, #40]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 80042d0:	5ccb      	ldrb	r3, [r1, r3]
 80042d2:	fa22 f303 	lsr.w	r3, r2, r3
 80042d6:	4a09      	ldr	r2, [pc, #36]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80042d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042da:	4b09      	ldr	r3, [pc, #36]	; (8004300 <HAL_RCC_ClockConfig+0x1c8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fd fca0 	bl	8001c24 <HAL_InitTick>

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40023c00 	.word	0x40023c00
 80042f4:	40023800 	.word	0x40023800
 80042f8:	0802eff8 	.word	0x0802eff8
 80042fc:	20000004 	.word	0x20000004
 8004300:	20000008 	.word	0x20000008

08004304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004304:	b5b0      	push	{r4, r5, r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800430a:	2100      	movs	r1, #0
 800430c:	6079      	str	r1, [r7, #4]
 800430e:	2100      	movs	r1, #0
 8004310:	60f9      	str	r1, [r7, #12]
 8004312:	2100      	movs	r1, #0
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004316:	2100      	movs	r1, #0
 8004318:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800431a:	4952      	ldr	r1, [pc, #328]	; (8004464 <HAL_RCC_GetSysClockFreq+0x160>)
 800431c:	6889      	ldr	r1, [r1, #8]
 800431e:	f001 010c 	and.w	r1, r1, #12
 8004322:	2908      	cmp	r1, #8
 8004324:	d00d      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0x3e>
 8004326:	2908      	cmp	r1, #8
 8004328:	f200 8094 	bhi.w	8004454 <HAL_RCC_GetSysClockFreq+0x150>
 800432c:	2900      	cmp	r1, #0
 800432e:	d002      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0x32>
 8004330:	2904      	cmp	r1, #4
 8004332:	d003      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x38>
 8004334:	e08e      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004336:	4b4c      	ldr	r3, [pc, #304]	; (8004468 <HAL_RCC_GetSysClockFreq+0x164>)
 8004338:	60bb      	str	r3, [r7, #8]
       break;
 800433a:	e08e      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800433c:	4b4b      	ldr	r3, [pc, #300]	; (800446c <HAL_RCC_GetSysClockFreq+0x168>)
 800433e:	60bb      	str	r3, [r7, #8]
      break;
 8004340:	e08b      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004342:	4948      	ldr	r1, [pc, #288]	; (8004464 <HAL_RCC_GetSysClockFreq+0x160>)
 8004344:	6849      	ldr	r1, [r1, #4]
 8004346:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800434a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800434c:	4945      	ldr	r1, [pc, #276]	; (8004464 <HAL_RCC_GetSysClockFreq+0x160>)
 800434e:	6849      	ldr	r1, [r1, #4]
 8004350:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004354:	2900      	cmp	r1, #0
 8004356:	d024      	beq.n	80043a2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004358:	4942      	ldr	r1, [pc, #264]	; (8004464 <HAL_RCC_GetSysClockFreq+0x160>)
 800435a:	6849      	ldr	r1, [r1, #4]
 800435c:	0989      	lsrs	r1, r1, #6
 800435e:	4608      	mov	r0, r1
 8004360:	f04f 0100 	mov.w	r1, #0
 8004364:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004368:	f04f 0500 	mov.w	r5, #0
 800436c:	ea00 0204 	and.w	r2, r0, r4
 8004370:	ea01 0305 	and.w	r3, r1, r5
 8004374:	493d      	ldr	r1, [pc, #244]	; (800446c <HAL_RCC_GetSysClockFreq+0x168>)
 8004376:	fb01 f003 	mul.w	r0, r1, r3
 800437a:	2100      	movs	r1, #0
 800437c:	fb01 f102 	mul.w	r1, r1, r2
 8004380:	1844      	adds	r4, r0, r1
 8004382:	493a      	ldr	r1, [pc, #232]	; (800446c <HAL_RCC_GetSysClockFreq+0x168>)
 8004384:	fba2 0101 	umull	r0, r1, r2, r1
 8004388:	1863      	adds	r3, r4, r1
 800438a:	4619      	mov	r1, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	461a      	mov	r2, r3
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	f7fb ff7c 	bl	8000290 <__aeabi_uldivmod>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4613      	mov	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	e04a      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a2:	4b30      	ldr	r3, [pc, #192]	; (8004464 <HAL_RCC_GetSysClockFreq+0x160>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	099b      	lsrs	r3, r3, #6
 80043a8:	461a      	mov	r2, r3
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	ea02 0400 	and.w	r4, r2, r0
 80043ba:	ea03 0501 	and.w	r5, r3, r1
 80043be:	4620      	mov	r0, r4
 80043c0:	4629      	mov	r1, r5
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	014b      	lsls	r3, r1, #5
 80043cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043d0:	0142      	lsls	r2, r0, #5
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	1b00      	subs	r0, r0, r4
 80043d8:	eb61 0105 	sbc.w	r1, r1, r5
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	018b      	lsls	r3, r1, #6
 80043e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043ea:	0182      	lsls	r2, r0, #6
 80043ec:	1a12      	subs	r2, r2, r0
 80043ee:	eb63 0301 	sbc.w	r3, r3, r1
 80043f2:	f04f 0000 	mov.w	r0, #0
 80043f6:	f04f 0100 	mov.w	r1, #0
 80043fa:	00d9      	lsls	r1, r3, #3
 80043fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004400:	00d0      	lsls	r0, r2, #3
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	1912      	adds	r2, r2, r4
 8004408:	eb45 0303 	adc.w	r3, r5, r3
 800440c:	f04f 0000 	mov.w	r0, #0
 8004410:	f04f 0100 	mov.w	r1, #0
 8004414:	0299      	lsls	r1, r3, #10
 8004416:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800441a:	0290      	lsls	r0, r2, #10
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4610      	mov	r0, r2
 8004422:	4619      	mov	r1, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	461a      	mov	r2, r3
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	f7fb ff30 	bl	8000290 <__aeabi_uldivmod>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4613      	mov	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004438:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <HAL_RCC_GetSysClockFreq+0x160>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	0c1b      	lsrs	r3, r3, #16
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	3301      	adds	r3, #1
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	60bb      	str	r3, [r7, #8]
      break;
 8004452:	e002      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004454:	4b04      	ldr	r3, [pc, #16]	; (8004468 <HAL_RCC_GetSysClockFreq+0x164>)
 8004456:	60bb      	str	r3, [r7, #8]
      break;
 8004458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800445a:	68bb      	ldr	r3, [r7, #8]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bdb0      	pop	{r4, r5, r7, pc}
 8004464:	40023800 	.word	0x40023800
 8004468:	00f42400 	.word	0x00f42400
 800446c:	017d7840 	.word	0x017d7840

08004470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004474:	4b03      	ldr	r3, [pc, #12]	; (8004484 <HAL_RCC_GetHCLKFreq+0x14>)
 8004476:	681b      	ldr	r3, [r3, #0]
}
 8004478:	4618      	mov	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000004 	.word	0x20000004

08004488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800448c:	f7ff fff0 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	0a9b      	lsrs	r3, r3, #10
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4903      	ldr	r1, [pc, #12]	; (80044ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40023800 	.word	0x40023800
 80044ac:	0802f008 	.word	0x0802f008

080044b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044b4:	f7ff ffdc 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	0b5b      	lsrs	r3, r3, #13
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4903      	ldr	r1, [pc, #12]	; (80044d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40023800 	.word	0x40023800
 80044d4:	0802f008 	.word	0x0802f008

080044d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	220f      	movs	r2, #15
 80044e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044e8:	4b12      	ldr	r3, [pc, #72]	; (8004534 <HAL_RCC_GetClockConfig+0x5c>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 0203 	and.w	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044f4:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <HAL_RCC_GetClockConfig+0x5c>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <HAL_RCC_GetClockConfig+0x5c>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800450c:	4b09      	ldr	r3, [pc, #36]	; (8004534 <HAL_RCC_GetClockConfig+0x5c>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	08db      	lsrs	r3, r3, #3
 8004512:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800451a:	4b07      	ldr	r3, [pc, #28]	; (8004538 <HAL_RCC_GetClockConfig+0x60>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 020f 	and.w	r2, r3, #15
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	601a      	str	r2, [r3, #0]
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800
 8004538:	40023c00 	.word	0x40023c00

0800453c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10b      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004560:	2b00      	cmp	r3, #0
 8004562:	d105      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800456c:	2b00      	cmp	r3, #0
 800456e:	d075      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004570:	4bad      	ldr	r3, [pc, #692]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004576:	f7fd fd43 	bl	8002000 <HAL_GetTick>
 800457a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800457c:	e008      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800457e:	f7fd fd3f 	bl	8002000 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e18b      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004590:	4ba6      	ldr	r3, [pc, #664]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1f0      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d009      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	019a      	lsls	r2, r3, #6
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	071b      	lsls	r3, r3, #28
 80045b4:	499d      	ldr	r1, [pc, #628]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d01f      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045c8:	4b98      	ldr	r3, [pc, #608]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ce:	0f1b      	lsrs	r3, r3, #28
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	019a      	lsls	r2, r3, #6
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	061b      	lsls	r3, r3, #24
 80045e2:	431a      	orrs	r2, r3
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	071b      	lsls	r3, r3, #28
 80045e8:	4990      	ldr	r1, [pc, #576]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045f0:	4b8e      	ldr	r3, [pc, #568]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f6:	f023 021f 	bic.w	r2, r3, #31
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	3b01      	subs	r3, #1
 8004600:	498a      	ldr	r1, [pc, #552]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	019a      	lsls	r2, r3, #6
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	061b      	lsls	r3, r3, #24
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	071b      	lsls	r3, r3, #28
 8004628:	4980      	ldr	r1, [pc, #512]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004630:	4b7d      	ldr	r3, [pc, #500]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004632:	2201      	movs	r2, #1
 8004634:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004636:	f7fd fce3 	bl	8002000 <HAL_GetTick>
 800463a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800463c:	e008      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800463e:	f7fd fcdf 	bl	8002000 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e12b      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004650:	4b76      	ldr	r3, [pc, #472]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d105      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004670:	2b00      	cmp	r3, #0
 8004672:	d079      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004674:	4b6e      	ldr	r3, [pc, #440]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800467a:	f7fd fcc1 	bl	8002000 <HAL_GetTick>
 800467e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004680:	e008      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004682:	f7fd fcbd 	bl	8002000 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e109      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004694:	4b65      	ldr	r3, [pc, #404]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800469c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046a0:	d0ef      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d020      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046ae:	4b5f      	ldr	r3, [pc, #380]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b4:	0f1b      	lsrs	r3, r3, #28
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	019a      	lsls	r2, r3, #6
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	061b      	lsls	r3, r3, #24
 80046c8:	431a      	orrs	r2, r3
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	071b      	lsls	r3, r3, #28
 80046ce:	4957      	ldr	r1, [pc, #348]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046d6:	4b55      	ldr	r3, [pc, #340]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	4950      	ldr	r1, [pc, #320]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01e      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046fc:	4b4b      	ldr	r3, [pc, #300]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004702:	0e1b      	lsrs	r3, r3, #24
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	019a      	lsls	r2, r3, #6
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	061b      	lsls	r3, r3, #24
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	071b      	lsls	r3, r3, #28
 800471c:	4943      	ldr	r1, [pc, #268]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004724:	4b41      	ldr	r3, [pc, #260]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800472a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	493e      	ldr	r1, [pc, #248]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800473a:	4b3d      	ldr	r3, [pc, #244]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800473c:	2201      	movs	r2, #1
 800473e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004740:	f7fd fc5e 	bl	8002000 <HAL_GetTick>
 8004744:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004746:	e008      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004748:	f7fd fc5a 	bl	8002000 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e0a6      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800475a:	4b34      	ldr	r3, [pc, #208]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004766:	d1ef      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 808d 	beq.w	8004890 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	4b2c      	ldr	r3, [pc, #176]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	4a2b      	ldr	r2, [pc, #172]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004784:	6413      	str	r3, [r2, #64]	; 0x40
 8004786:	4b29      	ldr	r3, [pc, #164]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004792:	4b28      	ldr	r3, [pc, #160]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a27      	ldr	r2, [pc, #156]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800479e:	f7fd fc2f 	bl	8002000 <HAL_GetTick>
 80047a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047a4:	e008      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047a6:	f7fd fc2b 	bl	8002000 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e077      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047b8:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0f0      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047c4:	4b19      	ldr	r3, [pc, #100]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d039      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d032      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047e2:	4b12      	ldr	r3, [pc, #72]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047ec:	4b12      	ldr	r3, [pc, #72]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80047ee:	2201      	movs	r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047f2:	4b11      	ldr	r3, [pc, #68]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047f8:	4a0c      	ldr	r2, [pc, #48]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047fe:	4b0b      	ldr	r3, [pc, #44]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d11e      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800480a:	f7fd fbf9 	bl	8002000 <HAL_GetTick>
 800480e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004810:	e014      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7fd fbf5 	bl	8002000 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d90b      	bls.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e03f      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8004828:	42470068 	.word	0x42470068
 800482c:	40023800 	.word	0x40023800
 8004830:	42470070 	.word	0x42470070
 8004834:	40007000 	.word	0x40007000
 8004838:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483c:	4b1c      	ldr	r3, [pc, #112]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0e4      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004854:	d10d      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004856:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486a:	4911      	ldr	r1, [pc, #68]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800486c:	4313      	orrs	r3, r2
 800486e:	608b      	str	r3, [r1, #8]
 8004870:	e005      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004872:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	4a0e      	ldr	r2, [pc, #56]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004878:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800487c:	6093      	str	r3, [r2, #8]
 800487e:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004880:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488a:	4909      	ldr	r1, [pc, #36]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800488c:	4313      	orrs	r3, r2
 800488e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80048a2:	4b04      	ldr	r3, [pc, #16]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80048a4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40023800 	.word	0x40023800
 80048b4:	424711e0 	.word	0x424711e0

080048b8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e022      	b.n	8004910 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d105      	bne.n	80048e2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7fc ff21 	bl	8001724 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2203      	movs	r2, #3
 80048e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f814 	bl	8004918 <HAL_SD_InitCard>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e00a      	b.n	8004910 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004918:	b5b0      	push	{r4, r5, r7, lr}
 800491a:	b08e      	sub	sp, #56	; 0x38
 800491c:	af04      	add	r7, sp, #16
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004920:	2300      	movs	r3, #0
 8004922:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004930:	2300      	movs	r3, #0
 8004932:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004934:	2376      	movs	r3, #118	; 0x76
 8004936:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681d      	ldr	r5, [r3, #0]
 800493c:	466c      	mov	r4, sp
 800493e:	f107 0314 	add.w	r3, r7, #20
 8004942:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004946:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800494a:	f107 0308 	add.w	r3, r7, #8
 800494e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004950:	4628      	mov	r0, r5
 8004952:	f002 fe05 	bl	8007560 <SDIO_Init>
 8004956:	4603      	mov	r3, r0
 8004958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800495c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e04c      	b.n	8004a02 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004968:	4b28      	ldr	r3, [pc, #160]	; (8004a0c <HAL_SD_InitCard+0xf4>)
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f002 fe3d 	bl	80075f2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004978:	4b24      	ldr	r3, [pc, #144]	; (8004a0c <HAL_SD_InitCard+0xf4>)
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f001 f804 	bl	800598c <SD_PowerON>
 8004984:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00b      	beq.n	80049a4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e02e      	b.n	8004a02 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 ff25 	bl	80057f4 <SD_InitCard>
 80049aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e01b      	b.n	8004a02 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049d2:	4618      	mov	r0, r3
 80049d4:	f002 fea0 	bl	8007718 <SDMMC_CmdBlockLength>
 80049d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00f      	beq.n	8004a00 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a0a      	ldr	r2, [pc, #40]	; (8004a10 <HAL_SD_InitCard+0xf8>)
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3728      	adds	r7, #40	; 0x28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bdb0      	pop	{r4, r5, r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	422580a0 	.word	0x422580a0
 8004a10:	004005ff 	.word	0x004005ff

08004a14 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08c      	sub	sp, #48	; 0x30
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d107      	bne.n	8004a3c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0c0      	b.n	8004bbe <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	f040 80b9 	bne.w	8004bbc <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	441a      	add	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d907      	bls.n	8004a6e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e0a7      	b.n	8004bbe <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2203      	movs	r2, #3
 8004a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004a8c:	f043 0302 	orr.w	r3, r3, #2
 8004a90:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	4a4c      	ldr	r2, [pc, #304]	; (8004bc8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004a98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	4a4b      	ldr	r2, [pc, #300]	; (8004bcc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004aa0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	2200      	movs	r2, #0
 8004ab0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3380      	adds	r3, #128	; 0x80
 8004ad8:	4619      	mov	r1, r3
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	025b      	lsls	r3, r3, #9
 8004ae0:	089b      	lsrs	r3, r3, #2
 8004ae2:	f7fd fc69 	bl	80023b8 <HAL_DMA_Start_IT>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d017      	beq.n	8004b1c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004afa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a33      	ldr	r2, [pc, #204]	; (8004bd0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004b02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e050      	b.n	8004bbe <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004b1c:	4b2d      	ldr	r3, [pc, #180]	; (8004bd4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d002      	beq.n	8004b30 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	025b      	lsls	r3, r3, #9
 8004b2e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b30:	f04f 33ff 	mov.w	r3, #4294967295
 8004b34:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	025b      	lsls	r3, r3, #9
 8004b3a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004b3c:	2390      	movs	r3, #144	; 0x90
 8004b3e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004b40:	2302      	movs	r3, #2
 8004b42:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f107 0210 	add.w	r2, r7, #16
 8004b54:	4611      	mov	r1, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f002 fdb2 	bl	80076c0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d90a      	bls.n	8004b78 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2282      	movs	r2, #130	; 0x82
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f002 fe16 	bl	80077a0 <SDMMC_CmdReadMultiBlock>
 8004b74:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004b76:	e009      	b.n	8004b8c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2281      	movs	r2, #129	; 0x81
 8004b7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b84:	4618      	mov	r0, r3
 8004b86:	f002 fde9 	bl	800775c <SDMMC_CmdReadSingleBlock>
 8004b8a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d012      	beq.n	8004bb8 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a0e      	ldr	r2, [pc, #56]	; (8004bd0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004b98:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e002      	b.n	8004bbe <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e000      	b.n	8004bbe <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3730      	adds	r7, #48	; 0x30
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	08005603 	.word	0x08005603
 8004bcc:	08005675 	.word	0x08005675
 8004bd0:	004005ff 	.word	0x004005ff
 8004bd4:	4225858c 	.word	0x4225858c

08004bd8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08c      	sub	sp, #48	; 0x30
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d107      	bne.n	8004c00 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0c5      	b.n	8004d8c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	f040 80be 	bne.w	8004d8a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	441a      	add	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d907      	bls.n	8004c32 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e0ac      	b.n	8004d8c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2203      	movs	r2, #3
 8004c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004c50:	f043 0302 	orr.w	r3, r3, #2
 8004c54:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5a:	4a4e      	ldr	r2, [pc, #312]	; (8004d94 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004c5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c62:	4a4d      	ldr	r2, [pc, #308]	; (8004d98 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004c64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d002      	beq.n	8004c7c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c78:	025b      	lsls	r3, r3, #9
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d90a      	bls.n	8004c98 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	22a0      	movs	r2, #160	; 0xa0
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f002 fdca 	bl	8007828 <SDMMC_CmdWriteMultiBlock>
 8004c94:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004c96:	e009      	b.n	8004cac <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2290      	movs	r2, #144	; 0x90
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f002 fd9d 	bl	80077e4 <SDMMC_CmdWriteSingleBlock>
 8004caa:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d012      	beq.n	8004cd8 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a39      	ldr	r2, [pc, #228]	; (8004d9c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004cb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e059      	b.n	8004d8c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004cd8:	4b31      	ldr	r3, [pc, #196]	; (8004da0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	2240      	movs	r2, #64	; 0x40
 8004ce4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3380      	adds	r3, #128	; 0x80
 8004d0e:	461a      	mov	r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	025b      	lsls	r3, r3, #9
 8004d14:	089b      	lsrs	r3, r3, #2
 8004d16:	f7fd fb4f 	bl	80023b8 <HAL_DMA_Start_IT>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01c      	beq.n	8004d5a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004d2e:	f023 0302 	bic.w	r3, r3, #2
 8004d32:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a18      	ldr	r2, [pc, #96]	; (8004d9c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e018      	b.n	8004d8c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	025b      	lsls	r3, r3, #9
 8004d64:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004d66:	2390      	movs	r3, #144	; 0x90
 8004d68:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004d72:	2301      	movs	r3, #1
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f107 0210 	add.w	r2, r7, #16
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f002 fc9d 	bl	80076c0 <SDIO_ConfigData>

      return HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	e000      	b.n	8004d8c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004d8a:	2302      	movs	r3, #2
  }
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3730      	adds	r7, #48	; 0x30
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	080055d9 	.word	0x080055d9
 8004d98:	08005675 	.word	0x08005675
 8004d9c:	004005ff 	.word	0x004005ff
 8004da0:	4225858c 	.word	0x4225858c

08004da4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <HAL_SD_IRQHandler+0x2e>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fffd 	bl	8005dca <SD_Read_IT>
 8004dd0:	e165      	b.n	800509e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 808f 	beq.w	8004f00 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dea:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8004dfa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004dfe:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0201 	bic.w	r2, r2, #1
 8004e0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d039      	beq.n	8004e8e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d104      	bne.n	8004e2e <HAL_SD_IRQHandler+0x8a>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d011      	beq.n	8004e52 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f002 fd1a 	bl	800786c <SDMMC_CmdStopTransfer>
 8004e38:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d008      	beq.n	8004e52 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f92f 	bl	80050b0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d104      	bne.n	8004e7e <HAL_SD_IRQHandler+0xda>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f003 f988 	bl	8008194 <HAL_SD_RxCpltCallback>
 8004e84:	e10b      	b.n	800509e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f003 f97a 	bl	8008180 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e8c:	e107      	b.n	800509e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 8102 	beq.w	800509e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d011      	beq.n	8004ec8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f002 fcdf 	bl	800786c <SDMMC_CmdStopTransfer>
 8004eae:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d008      	beq.n	8004ec8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f8f4 	bl	80050b0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f040 80e5 	bne.w	800509e <HAL_SD_IRQHandler+0x2fa>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f040 80df 	bne.w	800509e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0208 	bic.w	r2, r2, #8
 8004eee:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f003 f941 	bl	8008180 <HAL_SD_TxCpltCallback>
}
 8004efe:	e0ce      	b.n	800509e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d008      	beq.n	8004f20 <HAL_SD_IRQHandler+0x17c>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f003 0308 	and.w	r3, r3, #8
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 ffa7 	bl	8005e6c <SD_Write_IT>
 8004f1e:	e0be      	b.n	800509e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f26:	f240 233a 	movw	r3, #570	; 0x23a
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 80b6 	beq.w	800509e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	f043 0202 	orr.w	r2, r3, #2
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	f043 0208 	orr.w	r2, r3, #8
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	f043 0220 	orr.w	r2, r3, #32
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d005      	beq.n	8004f9a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	f043 0210 	orr.w	r2, r3, #16
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	f043 0208 	orr.w	r2, r3, #8
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f240 723a 	movw	r2, #1850	; 0x73a
 8004fbc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004fcc:	f023 0302 	bic.w	r3, r3, #2
 8004fd0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f002 fc48 	bl	800786c <SDMMC_CmdStopTransfer>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f855 	bl	80050b0 <HAL_SD_ErrorCallback>
}
 8005006:	e04a      	b.n	800509e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500e:	2b00      	cmp	r3, #0
 8005010:	d045      	beq.n	800509e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	2b00      	cmp	r3, #0
 800501a:	d104      	bne.n	8005026 <HAL_SD_IRQHandler+0x282>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b00      	cmp	r3, #0
 8005024:	d011      	beq.n	800504a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502a:	4a1f      	ldr	r2, [pc, #124]	; (80050a8 <HAL_SD_IRQHandler+0x304>)
 800502c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005032:	4618      	mov	r0, r3
 8005034:	f7fd fa18 	bl	8002468 <HAL_DMA_Abort_IT>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d02f      	beq.n	800509e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fb68 	bl	8005718 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005048:	e029      	b.n	800509e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d104      	bne.n	800505e <HAL_SD_IRQHandler+0x2ba>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d011      	beq.n	8005082 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	4a12      	ldr	r2, [pc, #72]	; (80050ac <HAL_SD_IRQHandler+0x308>)
 8005064:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	4618      	mov	r0, r3
 800506c:	f7fd f9fc 	bl	8002468 <HAL_DMA_Abort_IT>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d013      	beq.n	800509e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fb83 	bl	8005786 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005080:	e00d      	b.n	800509e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f003 f868 	bl	800816c <HAL_SD_AbortCallback>
}
 800509c:	e7ff      	b.n	800509e <HAL_SD_IRQHandler+0x2fa>
 800509e:	bf00      	nop
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	08005719 	.word	0x08005719
 80050ac:	08005787 	.word	0x08005787

080050b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d2:	0f9b      	lsrs	r3, r3, #30
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050de:	0e9b      	lsrs	r3, r3, #26
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f0:	0e1b      	lsrs	r3, r3, #24
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005102:	0c1b      	lsrs	r3, r3, #16
 8005104:	b2da      	uxtb	r2, r3
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800510e:	0a1b      	lsrs	r3, r3, #8
 8005110:	b2da      	uxtb	r2, r3
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800511a:	b2da      	uxtb	r2, r3
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005124:	0d1b      	lsrs	r3, r3, #20
 8005126:	b29a      	uxth	r2, r3
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005130:	0c1b      	lsrs	r3, r3, #16
 8005132:	b2db      	uxtb	r3, r3
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	b2da      	uxtb	r2, r3
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005142:	0bdb      	lsrs	r3, r3, #15
 8005144:	b2db      	uxtb	r3, r3
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	b2da      	uxtb	r2, r3
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005154:	0b9b      	lsrs	r3, r3, #14
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	b2da      	uxtb	r2, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005166:	0b5b      	lsrs	r3, r3, #13
 8005168:	b2db      	uxtb	r3, r3
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	b2da      	uxtb	r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005178:	0b1b      	lsrs	r3, r3, #12
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	b2da      	uxtb	r2, r3
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2200      	movs	r2, #0
 800518a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005190:	2b00      	cmp	r3, #0
 8005192:	d163      	bne.n	800525c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005198:	009a      	lsls	r2, r3, #2
 800519a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800519e:	4013      	ands	r3, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80051a4:	0f92      	lsrs	r2, r2, #30
 80051a6:	431a      	orrs	r2, r3
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b0:	0edb      	lsrs	r3, r3, #27
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051c2:	0e1b      	lsrs	r3, r3, #24
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d4:	0d5b      	lsrs	r3, r3, #21
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051e6:	0c9b      	lsrs	r3, r3, #18
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051f8:	0bdb      	lsrs	r3, r3, #15
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	b2da      	uxtb	r2, r3
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	7e1b      	ldrb	r3, [r3, #24]
 8005214:	b2db      	uxtb	r3, r3
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	3302      	adds	r3, #2
 800521c:	2201      	movs	r2, #1
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005226:	fb02 f203 	mul.w	r2, r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	7a1b      	ldrb	r3, [r3, #8]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f003 030f 	and.w	r3, r3, #15
 8005238:	2201      	movs	r2, #1
 800523a:	409a      	lsls	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005248:	0a52      	lsrs	r2, r2, #9
 800524a:	fb02 f203 	mul.w	r2, r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005258:	661a      	str	r2, [r3, #96]	; 0x60
 800525a:	e031      	b.n	80052c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005260:	2b01      	cmp	r3, #1
 8005262:	d11d      	bne.n	80052a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005268:	041b      	lsls	r3, r3, #16
 800526a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005272:	0c1b      	lsrs	r3, r3, #16
 8005274:	431a      	orrs	r2, r3
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	3301      	adds	r3, #1
 8005280:	029a      	lsls	r2, r3, #10
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005294:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	661a      	str	r2, [r3, #96]	; 0x60
 800529e:	e00f      	b.n	80052c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a58      	ldr	r2, [pc, #352]	; (8005408 <HAL_SD_GetCardCSD+0x344>)
 80052a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e09d      	b.n	80053fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c4:	0b9b      	lsrs	r3, r3, #14
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d6:	09db      	lsrs	r3, r3, #7
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f8:	0fdb      	lsrs	r3, r3, #31
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005304:	0f5b      	lsrs	r3, r3, #29
 8005306:	b2db      	uxtb	r3, r3
 8005308:	f003 0303 	and.w	r3, r3, #3
 800530c:	b2da      	uxtb	r2, r3
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005316:	0e9b      	lsrs	r3, r3, #26
 8005318:	b2db      	uxtb	r3, r3
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	b2da      	uxtb	r2, r3
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005328:	0d9b      	lsrs	r3, r3, #22
 800532a:	b2db      	uxtb	r3, r3
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	b2da      	uxtb	r2, r3
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533a:	0d5b      	lsrs	r3, r3, #21
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	b2da      	uxtb	r2, r3
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005356:	0c1b      	lsrs	r3, r3, #16
 8005358:	b2db      	uxtb	r3, r3
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	b2da      	uxtb	r2, r3
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536a:	0bdb      	lsrs	r3, r3, #15
 800536c:	b2db      	uxtb	r3, r3
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	b2da      	uxtb	r2, r3
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	0b9b      	lsrs	r3, r3, #14
 8005380:	b2db      	uxtb	r3, r3
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	b2da      	uxtb	r2, r3
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005392:	0b5b      	lsrs	r3, r3, #13
 8005394:	b2db      	uxtb	r3, r3
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	b2da      	uxtb	r2, r3
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a6:	0b1b      	lsrs	r3, r3, #12
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ba:	0a9b      	lsrs	r3, r3, #10
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e2:	085b      	lsrs	r3, r3, #1
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	004005ff 	.word	0x004005ff

0800540c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005464:	b5b0      	push	{r4, r5, r7, lr}
 8005466:	b08e      	sub	sp, #56	; 0x38
 8005468:	af04      	add	r7, sp, #16
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2203      	movs	r2, #3
 8005478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005480:	2b03      	cmp	r3, #3
 8005482:	d02e      	beq.n	80054e2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548a:	d106      	bne.n	800549a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005490:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	639a      	str	r2, [r3, #56]	; 0x38
 8005498:	e029      	b.n	80054ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054a0:	d10a      	bne.n	80054b8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fb28 	bl	8005af8 <SD_WideBus_Enable>
 80054a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	639a      	str	r2, [r3, #56]	; 0x38
 80054b6:	e01a      	b.n	80054ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10a      	bne.n	80054d4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fb65 	bl	8005b8e <SD_WideBus_Disable>
 80054c4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	639a      	str	r2, [r3, #56]	; 0x38
 80054d2:	e00c      	b.n	80054ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
 80054e0:	e005      	b.n	80054ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00b      	beq.n	800550e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a26      	ldr	r2, [pc, #152]	; (8005594 <HAL_SD_ConfigWideBusOperation+0x130>)
 80054fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800550c:	e01f      	b.n	800554e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681d      	ldr	r5, [r3, #0]
 8005534:	466c      	mov	r4, sp
 8005536:	f107 0314 	add.w	r3, r7, #20
 800553a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800553e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005542:	f107 0308 	add.w	r3, r7, #8
 8005546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005548:	4628      	mov	r0, r5
 800554a:	f002 f809 	bl	8007560 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005556:	4618      	mov	r0, r3
 8005558:	f002 f8de 	bl	8007718 <SDMMC_CmdBlockLength>
 800555c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00c      	beq.n	800557e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a0a      	ldr	r2, [pc, #40]	; (8005594 <HAL_SD_ConfigWideBusOperation+0x130>)
 800556a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005586:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800558a:	4618      	mov	r0, r3
 800558c:	3728      	adds	r7, #40	; 0x28
 800558e:	46bd      	mov	sp, r7
 8005590:	bdb0      	pop	{r4, r5, r7, pc}
 8005592:	bf00      	nop
 8005594:	004005ff 	.word	0x004005ff

08005598 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80055a0:	2300      	movs	r3, #0
 80055a2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80055a4:	f107 030c 	add.w	r3, r7, #12
 80055a8:	4619      	mov	r1, r3
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fa7c 	bl	8005aa8 <SD_SendStatus>
 80055b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d005      	beq.n	80055c4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	0a5b      	lsrs	r3, r3, #9
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80055ce:	693b      	ldr	r3, [r7, #16]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	2b82      	cmp	r3, #130	; 0x82
 8005616:	d111      	bne.n	800563c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4618      	mov	r0, r3
 800561e:	f002 f925 	bl	800786c <SDMMC_CmdStopTransfer>
 8005622:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d008      	beq.n	800563c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	431a      	orrs	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f7ff fd3a 	bl	80050b0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0208 	bic.w	r2, r2, #8
 800564a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f240 523a 	movw	r2, #1338	; 0x53a
 8005654:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f002 fd95 	bl	8008194 <HAL_SD_RxCpltCallback>
#endif
}
 800566a:	bf00      	nop
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fd f89c 	bl	80027c0 <HAL_DMA_GetError>
 8005688:	4603      	mov	r3, r0
 800568a:	2b02      	cmp	r3, #2
 800568c:	d03e      	beq.n	800570c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005694:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d002      	beq.n	80056aa <SD_DMAError+0x36>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d12d      	bne.n	8005706 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a19      	ldr	r2, [pc, #100]	; (8005714 <SD_DMAError+0xa0>)
 80056b0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80056c0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80056ce:	6978      	ldr	r0, [r7, #20]
 80056d0:	f7ff ff62 	bl	8005598 <HAL_SD_GetCardState>
 80056d4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b06      	cmp	r3, #6
 80056da:	d002      	beq.n	80056e2 <SD_DMAError+0x6e>
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b05      	cmp	r3, #5
 80056e0:	d10a      	bne.n	80056f8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f002 f8c0 	bl	800786c <SDMMC_CmdStopTransfer>
 80056ec:	4602      	mov	r2, r0
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f2:	431a      	orrs	r2, r3
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2200      	movs	r2, #0
 8005704:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005706:	6978      	ldr	r0, [r7, #20]
 8005708:	f7ff fcd2 	bl	80050b0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800570c:	bf00      	nop
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	004005ff 	.word	0x004005ff

08005718 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005724:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f240 523a 	movw	r2, #1338	; 0x53a
 800572e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f7ff ff31 	bl	8005598 <HAL_SD_GetCardState>
 8005736:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2b06      	cmp	r3, #6
 800574a:	d002      	beq.n	8005752 <SD_DMATxAbort+0x3a>
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b05      	cmp	r3, #5
 8005750:	d10a      	bne.n	8005768 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f002 f888 	bl	800786c <SDMMC_CmdStopTransfer>
 800575c:	4602      	mov	r2, r0
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005762:	431a      	orrs	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	2b00      	cmp	r3, #0
 800576e:	d103      	bne.n	8005778 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f002 fcfb 	bl	800816c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005776:	e002      	b.n	800577e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f7ff fc99 	bl	80050b0 <HAL_SD_ErrorCallback>
}
 800577e:	bf00      	nop
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f240 523a 	movw	r2, #1338	; 0x53a
 800579c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f7ff fefa 	bl	8005598 <HAL_SD_GetCardState>
 80057a4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b06      	cmp	r3, #6
 80057b8:	d002      	beq.n	80057c0 <SD_DMARxAbort+0x3a>
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b05      	cmp	r3, #5
 80057be:	d10a      	bne.n	80057d6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f002 f851 	bl	800786c <SDMMC_CmdStopTransfer>
 80057ca:	4602      	mov	r2, r0
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	431a      	orrs	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d103      	bne.n	80057e6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f002 fcc4 	bl	800816c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80057e4:	e002      	b.n	80057ec <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f7ff fc62 	bl	80050b0 <HAL_SD_ErrorCallback>
}
 80057ec:	bf00      	nop
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80057f4:	b5b0      	push	{r4, r5, r7, lr}
 80057f6:	b094      	sub	sp, #80	; 0x50
 80057f8:	af04      	add	r7, sp, #16
 80057fa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80057fc:	2301      	movs	r3, #1
 80057fe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4618      	mov	r0, r3
 8005806:	f001 ff03 	bl	8007610 <SDIO_GetPowerState>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d102      	bne.n	8005816 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005810:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005814:	e0b6      	b.n	8005984 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581a:	2b03      	cmp	r3, #3
 800581c:	d02f      	beq.n	800587e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f002 f92c 	bl	8007a80 <SDMMC_CmdSendCID>
 8005828:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800582a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <SD_InitCard+0x40>
    {
      return errorstate;
 8005830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005832:	e0a7      	b.n	8005984 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2100      	movs	r1, #0
 800583a:	4618      	mov	r0, r3
 800583c:	f001 ff2d 	bl	800769a <SDIO_GetResponse>
 8005840:	4602      	mov	r2, r0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2104      	movs	r1, #4
 800584c:	4618      	mov	r0, r3
 800584e:	f001 ff24 	bl	800769a <SDIO_GetResponse>
 8005852:	4602      	mov	r2, r0
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2108      	movs	r1, #8
 800585e:	4618      	mov	r0, r3
 8005860:	f001 ff1b 	bl	800769a <SDIO_GetResponse>
 8005864:	4602      	mov	r2, r0
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	210c      	movs	r1, #12
 8005870:	4618      	mov	r0, r3
 8005872:	f001 ff12 	bl	800769a <SDIO_GetResponse>
 8005876:	4602      	mov	r2, r0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005882:	2b03      	cmp	r3, #3
 8005884:	d00d      	beq.n	80058a2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f107 020e 	add.w	r2, r7, #14
 800588e:	4611      	mov	r1, r2
 8005890:	4618      	mov	r0, r3
 8005892:	f002 f932 	bl	8007afa <SDMMC_CmdSetRelAdd>
 8005896:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <SD_InitCard+0xae>
    {
      return errorstate;
 800589e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a0:	e070      	b.n	8005984 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d036      	beq.n	8005918 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80058aa:	89fb      	ldrh	r3, [r7, #14]
 80058ac:	461a      	mov	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ba:	041b      	lsls	r3, r3, #16
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f002 f8fc 	bl	8007abc <SDMMC_CmdSendCSD>
 80058c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80058c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80058cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ce:	e059      	b.n	8005984 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2100      	movs	r1, #0
 80058d6:	4618      	mov	r0, r3
 80058d8:	f001 fedf 	bl	800769a <SDIO_GetResponse>
 80058dc:	4602      	mov	r2, r0
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2104      	movs	r1, #4
 80058e8:	4618      	mov	r0, r3
 80058ea:	f001 fed6 	bl	800769a <SDIO_GetResponse>
 80058ee:	4602      	mov	r2, r0
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2108      	movs	r1, #8
 80058fa:	4618      	mov	r0, r3
 80058fc:	f001 fecd 	bl	800769a <SDIO_GetResponse>
 8005900:	4602      	mov	r2, r0
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	210c      	movs	r1, #12
 800590c:	4618      	mov	r0, r3
 800590e:	f001 fec4 	bl	800769a <SDIO_GetResponse>
 8005912:	4602      	mov	r2, r0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2104      	movs	r1, #4
 800591e:	4618      	mov	r0, r3
 8005920:	f001 febb 	bl	800769a <SDIO_GetResponse>
 8005924:	4603      	mov	r3, r0
 8005926:	0d1a      	lsrs	r2, r3, #20
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800592c:	f107 0310 	add.w	r3, r7, #16
 8005930:	4619      	mov	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7ff fbc6 	bl	80050c4 <HAL_SD_GetCardCSD>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800593e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005942:	e01f      	b.n	8005984 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6819      	ldr	r1, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594c:	041b      	lsls	r3, r3, #16
 800594e:	461a      	mov	r2, r3
 8005950:	f04f 0300 	mov.w	r3, #0
 8005954:	4608      	mov	r0, r1
 8005956:	f001 ffab 	bl	80078b0 <SDMMC_CmdSelDesel>
 800595a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800595c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <SD_InitCard+0x172>
  {
    return errorstate;
 8005962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005964:	e00e      	b.n	8005984 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681d      	ldr	r5, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	466c      	mov	r4, sp
 800596e:	f103 0210 	add.w	r2, r3, #16
 8005972:	ca07      	ldmia	r2, {r0, r1, r2}
 8005974:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005978:	3304      	adds	r3, #4
 800597a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800597c:	4628      	mov	r0, r5
 800597e:	f001 fdef 	bl	8007560 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3740      	adds	r7, #64	; 0x40
 8005988:	46bd      	mov	sp, r7
 800598a:	bdb0      	pop	{r4, r5, r7, pc}

0800598c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	2300      	movs	r3, #0
 800599e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 ffa6 	bl	80078f6 <SDMMC_CmdGoIdleState>
 80059aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	e072      	b.n	8005a9c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f001 ffb9 	bl	8007932 <SDMMC_CmdOperCond>
 80059c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00d      	beq.n	80059e4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f001 ff8f 	bl	80078f6 <SDMMC_CmdGoIdleState>
 80059d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d004      	beq.n	80059ea <SD_PowerON+0x5e>
    {
      return errorstate;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	e05b      	b.n	8005a9c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d137      	bne.n	8005a62 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2100      	movs	r1, #0
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 ffb9 	bl	8007970 <SDMMC_CmdAppCommand>
 80059fe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d02d      	beq.n	8005a62 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a0a:	e047      	b.n	8005a9c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2100      	movs	r1, #0
 8005a12:	4618      	mov	r0, r3
 8005a14:	f001 ffac 	bl	8007970 <SDMMC_CmdAppCommand>
 8005a18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <SD_PowerON+0x98>
    {
      return errorstate;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	e03b      	b.n	8005a9c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	491e      	ldr	r1, [pc, #120]	; (8005aa4 <SD_PowerON+0x118>)
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f001 ffc2 	bl	80079b4 <SDMMC_CmdAppOperCommand>
 8005a30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a3c:	e02e      	b.n	8005a9c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2100      	movs	r1, #0
 8005a44:	4618      	mov	r0, r3
 8005a46:	f001 fe28 	bl	800769a <SDIO_GetResponse>
 8005a4a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	0fdb      	lsrs	r3, r3, #31
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <SD_PowerON+0xcc>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e000      	b.n	8005a5a <SD_PowerON+0xce>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	613b      	str	r3, [r7, #16]

    count++;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d802      	bhi.n	8005a72 <SD_PowerON+0xe6>
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0cc      	beq.n	8005a0c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d902      	bls.n	8005a82 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a80:	e00c      	b.n	8005a9c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	645a      	str	r2, [r3, #68]	; 0x44
 8005a92:	e002      	b.n	8005a9a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	c1100000 	.word	0xc1100000

08005aa8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d102      	bne.n	8005abe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005ab8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005abc:	e018      	b.n	8005af0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac6:	041b      	lsls	r3, r3, #16
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4610      	mov	r0, r2
 8005acc:	f002 f836 	bl	8007b3c <SDMMC_CmdSendStatus>
 8005ad0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <SD_SendStatus+0x34>
  {
    return errorstate;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	e009      	b.n	8005af0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f001 fdd9 	bl	800769a <SDIO_GetResponse>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005b00:	2300      	movs	r3, #0
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	2300      	movs	r3, #0
 8005b06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f001 fdc3 	bl	800769a <SDIO_GetResponse>
 8005b14:	4603      	mov	r3, r0
 8005b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b1e:	d102      	bne.n	8005b26 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005b20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b24:	e02f      	b.n	8005b86 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005b26:	f107 030c 	add.w	r3, r7, #12
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f879 	bl	8005c24 <SD_FindSCR>
 8005b32:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	e023      	b.n	8005b86 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01c      	beq.n	8005b82 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b50:	041b      	lsls	r3, r3, #16
 8005b52:	4619      	mov	r1, r3
 8005b54:	4610      	mov	r0, r2
 8005b56:	f001 ff0b 	bl	8007970 <SDMMC_CmdAppCommand>
 8005b5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	e00f      	b.n	8005b86 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2102      	movs	r1, #2
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f001 ff44 	bl	80079fa <SDMMC_CmdBusWidth>
 8005b72:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	e003      	b.n	8005b86 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e001      	b.n	8005b86 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005b82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b086      	sub	sp, #24
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f001 fd78 	bl	800769a <SDIO_GetResponse>
 8005baa:	4603      	mov	r3, r0
 8005bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bb4:	d102      	bne.n	8005bbc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005bb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bba:	e02f      	b.n	8005c1c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005bbc:	f107 030c 	add.w	r3, r7, #12
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f82e 	bl	8005c24 <SD_FindSCR>
 8005bc8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	e023      	b.n	8005c1c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d01c      	beq.n	8005c18 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	4619      	mov	r1, r3
 8005bea:	4610      	mov	r0, r2
 8005bec:	f001 fec0 	bl	8007970 <SDMMC_CmdAppCommand>
 8005bf0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	e00f      	b.n	8005c1c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2100      	movs	r1, #0
 8005c02:	4618      	mov	r0, r3
 8005c04:	f001 fef9 	bl	80079fa <SDMMC_CmdBusWidth>
 8005c08:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	e003      	b.n	8005c1c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005c14:	2300      	movs	r3, #0
 8005c16:	e001      	b.n	8005c1c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005c24:	b590      	push	{r4, r7, lr}
 8005c26:	b08f      	sub	sp, #60	; 0x3c
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005c2e:	f7fc f9e7 	bl	8002000 <HAL_GetTick>
 8005c32:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60bb      	str	r3, [r7, #8]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2108      	movs	r1, #8
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f001 fd64 	bl	8007718 <SDMMC_CmdBlockLength>
 8005c50:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <SD_FindSCR+0x38>
  {
    return errorstate;
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	e0b2      	b.n	8005dc2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c64:	041b      	lsls	r3, r3, #16
 8005c66:	4619      	mov	r1, r3
 8005c68:	4610      	mov	r0, r2
 8005c6a:	f001 fe81 	bl	8007970 <SDMMC_CmdAppCommand>
 8005c6e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <SD_FindSCR+0x56>
  {
    return errorstate;
 8005c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c78:	e0a3      	b.n	8005dc2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005c80:	2308      	movs	r3, #8
 8005c82:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005c84:	2330      	movs	r3, #48	; 0x30
 8005c86:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005c88:	2302      	movs	r3, #2
 8005c8a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f107 0210 	add.w	r2, r7, #16
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 fd0e 	bl	80076c0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f001 fec8 	bl	8007a3e <SDMMC_CmdSendSCR>
 8005cae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d02a      	beq.n	8005d0c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	e083      	b.n	8005dc2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00f      	beq.n	8005ce8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6819      	ldr	r1, [r3, #0]
 8005ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	f107 0208 	add.w	r2, r7, #8
 8005cd4:	18d4      	adds	r4, r2, r3
 8005cd6:	4608      	mov	r0, r1
 8005cd8:	f001 fc6d 	bl	80075b6 <SDIO_ReadFIFO>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	6023      	str	r3, [r4, #0]
      index++;
 8005ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ce6:	e006      	b.n	8005cf6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d012      	beq.n	8005d1c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005cf6:	f7fc f983 	bl	8002000 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d04:	d102      	bne.n	8005d0c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005d06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d0a:	e05a      	b.n	8005dc2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d12:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d0cf      	beq.n	8005cba <SD_FindSCR+0x96>
 8005d1a:	e000      	b.n	8005d1e <SD_FindSCR+0xfa>
      break;
 8005d1c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d24:	f003 0308 	and.w	r3, r3, #8
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d005      	beq.n	8005d38 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2208      	movs	r2, #8
 8005d32:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005d34:	2308      	movs	r3, #8
 8005d36:	e044      	b.n	8005dc2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d005      	beq.n	8005d52 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e037      	b.n	8005dc2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d58:	f003 0320 	and.w	r3, r3, #32
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d005      	beq.n	8005d6c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2220      	movs	r2, #32
 8005d66:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005d68:	2320      	movs	r3, #32
 8005d6a:	e02a      	b.n	8005dc2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f240 523a 	movw	r2, #1338	; 0x53a
 8005d74:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	061a      	lsls	r2, r3, #24
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	021b      	lsls	r3, r3, #8
 8005d7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d82:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	0a1b      	lsrs	r3, r3, #8
 8005d88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d8c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	0e1b      	lsrs	r3, r3, #24
 8005d92:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	601a      	str	r2, [r3, #0]
    scr++;
 8005d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	061a      	lsls	r2, r3, #24
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005daa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	0a1b      	lsrs	r3, r3, #8
 8005db0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005db4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	0e1b      	lsrs	r3, r3, #24
 8005dba:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbe:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	373c      	adds	r7, #60	; 0x3c
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd90      	pop	{r4, r7, pc}

08005dca <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b086      	sub	sp, #24
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d03f      	beq.n	8005e64 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005de4:	2300      	movs	r3, #0
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	e033      	b.n	8005e52 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 fbe1 	bl	80075b6 <SDIO_ReadFIFO>
 8005df4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3301      	adds	r3, #1
 8005e02:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	0a1b      	lsrs	r3, r3, #8
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3301      	adds	r3, #1
 8005e18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	0c1b      	lsrs	r3, r3, #16
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	0e1b      	lsrs	r3, r3, #24
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3301      	adds	r3, #1
 8005e44:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b07      	cmp	r3, #7
 8005e56:	d9c8      	bls.n	8005dea <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005e64:	bf00      	nop
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d043      	beq.n	8005f0e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	e037      	b.n	8005efc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3301      	adds	r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	021a      	lsls	r2, r3, #8
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3301      	adds	r3, #1
 8005eae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	041a      	lsls	r2, r3, #16
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	061a      	lsls	r2, r3, #24
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3301      	adds	r3, #1
 8005ede:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f107 0208 	add.w	r2, r7, #8
 8005eee:	4611      	mov	r1, r2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 fb6d 	bl	80075d0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2b07      	cmp	r3, #7
 8005f00:	d9c4      	bls.n	8005e8c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005f0e:	bf00      	nop
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b082      	sub	sp, #8
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e025      	b.n	8005f76 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d106      	bne.n	8005f44 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fb fe66 	bl	8001c10 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3304      	adds	r3, #4
 8005f54:	4619      	mov	r1, r3
 8005f56:	4610      	mov	r0, r2
 8005f58:	f001 f9d4 	bl	8007304 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6818      	ldr	r0, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	461a      	mov	r2, r3
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	f001 fa3f 	bl	80073ea <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
*/
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b082      	sub	sp, #8
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if(__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d10a      	bne.n	8005faa <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f80c 	bl	8005fb2 <HAL_SDRAM_RefreshErrorCallback>
#endif

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	695a      	ldr	r2, [r3, #20]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0201 	orr.w	r2, r2, #1
 8005fa8:	615a      	str	r2, [r3, #20]
  }
}
 8005faa:	bf00      	nop
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module. 
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */ 
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d101      	bne.n	8005fe2 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e018      	b.n	8006014 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	68b9      	ldr	r1, [r7, #8]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f001 fa78 	bl	80074e8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d104      	bne.n	800600a <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2205      	movs	r2, #5
 8006004:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006008:	e003      	b.n	8006012 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e07b      	b.n	8006126 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	2b00      	cmp	r3, #0
 8006034:	d108      	bne.n	8006048 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800603e:	d009      	beq.n	8006054 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	61da      	str	r2, [r3, #28]
 8006046:	e005      	b.n	8006054 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7fb fc48 	bl	8001904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800608a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800609c:	431a      	orrs	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	431a      	orrs	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d8:	ea42 0103 	orr.w	r1, r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	0c1b      	lsrs	r3, r3, #16
 80060f2:	f003 0104 	and.w	r1, r3, #4
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	f003 0210 	and.w	r2, r3, #16
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69da      	ldr	r2, [r3, #28]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006114:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e041      	b.n	80061c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d106      	bne.n	800615a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f839 	bl	80061cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2202      	movs	r2, #2
 800615e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3304      	adds	r3, #4
 800616a:	4619      	mov	r1, r3
 800616c:	4610      	mov	r0, r2
 800616e:	f000 fbad 	bl	80068cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d001      	beq.n	80061f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e04e      	b.n	8006296 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a23      	ldr	r2, [pc, #140]	; (80062a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d022      	beq.n	8006260 <HAL_TIM_Base_Start_IT+0x80>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006222:	d01d      	beq.n	8006260 <HAL_TIM_Base_Start_IT+0x80>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1f      	ldr	r2, [pc, #124]	; (80062a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d018      	beq.n	8006260 <HAL_TIM_Base_Start_IT+0x80>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a1e      	ldr	r2, [pc, #120]	; (80062ac <HAL_TIM_Base_Start_IT+0xcc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d013      	beq.n	8006260 <HAL_TIM_Base_Start_IT+0x80>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1c      	ldr	r2, [pc, #112]	; (80062b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00e      	beq.n	8006260 <HAL_TIM_Base_Start_IT+0x80>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a1b      	ldr	r2, [pc, #108]	; (80062b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d009      	beq.n	8006260 <HAL_TIM_Base_Start_IT+0x80>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a19      	ldr	r2, [pc, #100]	; (80062b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d004      	beq.n	8006260 <HAL_TIM_Base_Start_IT+0x80>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a18      	ldr	r2, [pc, #96]	; (80062bc <HAL_TIM_Base_Start_IT+0xdc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d111      	bne.n	8006284 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b06      	cmp	r3, #6
 8006270:	d010      	beq.n	8006294 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f042 0201 	orr.w	r2, r2, #1
 8006280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006282:	e007      	b.n	8006294 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0201 	orr.w	r2, r2, #1
 8006292:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40010000 	.word	0x40010000
 80062a8:	40000400 	.word	0x40000400
 80062ac:	40000800 	.word	0x40000800
 80062b0:	40000c00 	.word	0x40000c00
 80062b4:	40010400 	.word	0x40010400
 80062b8:	40014000 	.word	0x40014000
 80062bc:	40001800 	.word	0x40001800

080062c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e041      	b.n	8006356 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fb fb54 	bl	8001994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3304      	adds	r3, #4
 80062fc:	4619      	mov	r1, r3
 80062fe:	4610      	mov	r0, r2
 8006300:	f000 fae4 	bl	80068cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d109      	bne.n	8006384 <HAL_TIM_PWM_Start+0x24>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b01      	cmp	r3, #1
 800637a:	bf14      	ite	ne
 800637c:	2301      	movne	r3, #1
 800637e:	2300      	moveq	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	e022      	b.n	80063ca <HAL_TIM_PWM_Start+0x6a>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	2b04      	cmp	r3, #4
 8006388:	d109      	bne.n	800639e <HAL_TIM_PWM_Start+0x3e>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b01      	cmp	r3, #1
 8006394:	bf14      	ite	ne
 8006396:	2301      	movne	r3, #1
 8006398:	2300      	moveq	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	e015      	b.n	80063ca <HAL_TIM_PWM_Start+0x6a>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d109      	bne.n	80063b8 <HAL_TIM_PWM_Start+0x58>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	bf14      	ite	ne
 80063b0:	2301      	movne	r3, #1
 80063b2:	2300      	moveq	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	e008      	b.n	80063ca <HAL_TIM_PWM_Start+0x6a>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	bf14      	ite	ne
 80063c4:	2301      	movne	r3, #1
 80063c6:	2300      	moveq	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e07c      	b.n	80064cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d104      	bne.n	80063e2 <HAL_TIM_PWM_Start+0x82>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063e0:	e013      	b.n	800640a <HAL_TIM_PWM_Start+0xaa>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d104      	bne.n	80063f2 <HAL_TIM_PWM_Start+0x92>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063f0:	e00b      	b.n	800640a <HAL_TIM_PWM_Start+0xaa>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d104      	bne.n	8006402 <HAL_TIM_PWM_Start+0xa2>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006400:	e003      	b.n	800640a <HAL_TIM_PWM_Start+0xaa>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2202      	movs	r2, #2
 8006406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2201      	movs	r2, #1
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fcaa 	bl	8006d6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a2d      	ldr	r2, [pc, #180]	; (80064d4 <HAL_TIM_PWM_Start+0x174>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d004      	beq.n	800642c <HAL_TIM_PWM_Start+0xcc>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a2c      	ldr	r2, [pc, #176]	; (80064d8 <HAL_TIM_PWM_Start+0x178>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d101      	bne.n	8006430 <HAL_TIM_PWM_Start+0xd0>
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <HAL_TIM_PWM_Start+0xd2>
 8006430:	2300      	movs	r3, #0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d007      	beq.n	8006446 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006444:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a22      	ldr	r2, [pc, #136]	; (80064d4 <HAL_TIM_PWM_Start+0x174>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d022      	beq.n	8006496 <HAL_TIM_PWM_Start+0x136>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006458:	d01d      	beq.n	8006496 <HAL_TIM_PWM_Start+0x136>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a1f      	ldr	r2, [pc, #124]	; (80064dc <HAL_TIM_PWM_Start+0x17c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d018      	beq.n	8006496 <HAL_TIM_PWM_Start+0x136>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1d      	ldr	r2, [pc, #116]	; (80064e0 <HAL_TIM_PWM_Start+0x180>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <HAL_TIM_PWM_Start+0x136>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a1c      	ldr	r2, [pc, #112]	; (80064e4 <HAL_TIM_PWM_Start+0x184>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00e      	beq.n	8006496 <HAL_TIM_PWM_Start+0x136>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a16      	ldr	r2, [pc, #88]	; (80064d8 <HAL_TIM_PWM_Start+0x178>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d009      	beq.n	8006496 <HAL_TIM_PWM_Start+0x136>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a18      	ldr	r2, [pc, #96]	; (80064e8 <HAL_TIM_PWM_Start+0x188>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_TIM_PWM_Start+0x136>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a16      	ldr	r2, [pc, #88]	; (80064ec <HAL_TIM_PWM_Start+0x18c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d111      	bne.n	80064ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f003 0307 	and.w	r3, r3, #7
 80064a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b06      	cmp	r3, #6
 80064a6:	d010      	beq.n	80064ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0201 	orr.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064b8:	e007      	b.n	80064ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f042 0201 	orr.w	r2, r2, #1
 80064c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	40010000 	.word	0x40010000
 80064d8:	40010400 	.word	0x40010400
 80064dc:	40000400 	.word	0x40000400
 80064e0:	40000800 	.word	0x40000800
 80064e4:	40000c00 	.word	0x40000c00
 80064e8:	40014000 	.word	0x40014000
 80064ec:	40001800 	.word	0x40001800

080064f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b02      	cmp	r3, #2
 8006504:	d122      	bne.n	800654c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b02      	cmp	r3, #2
 8006512:	d11b      	bne.n	800654c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f06f 0202 	mvn.w	r2, #2
 800651c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f9ac 	bl	8006890 <HAL_TIM_IC_CaptureCallback>
 8006538:	e005      	b.n	8006546 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f99e 	bl	800687c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f9af 	bl	80068a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b04      	cmp	r3, #4
 8006558:	d122      	bne.n	80065a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b04      	cmp	r3, #4
 8006566:	d11b      	bne.n	80065a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0204 	mvn.w	r2, #4
 8006570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2202      	movs	r2, #2
 8006576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f982 	bl	8006890 <HAL_TIM_IC_CaptureCallback>
 800658c:	e005      	b.n	800659a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f974 	bl	800687c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f985 	bl	80068a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f003 0308 	and.w	r3, r3, #8
 80065aa:	2b08      	cmp	r3, #8
 80065ac:	d122      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d11b      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f06f 0208 	mvn.w	r2, #8
 80065c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2204      	movs	r2, #4
 80065ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f958 	bl	8006890 <HAL_TIM_IC_CaptureCallback>
 80065e0:	e005      	b.n	80065ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f94a 	bl	800687c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f95b 	bl	80068a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f003 0310 	and.w	r3, r3, #16
 80065fe:	2b10      	cmp	r3, #16
 8006600:	d122      	bne.n	8006648 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f003 0310 	and.w	r3, r3, #16
 800660c:	2b10      	cmp	r3, #16
 800660e:	d11b      	bne.n	8006648 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0210 	mvn.w	r2, #16
 8006618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2208      	movs	r2, #8
 800661e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f92e 	bl	8006890 <HAL_TIM_IC_CaptureCallback>
 8006634:	e005      	b.n	8006642 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f920 	bl	800687c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f931 	bl	80068a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b01      	cmp	r3, #1
 8006654:	d10e      	bne.n	8006674 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b01      	cmp	r3, #1
 8006662:	d107      	bne.n	8006674 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f06f 0201 	mvn.w	r2, #1
 800666c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fa fe04 	bl	800127c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667e:	2b80      	cmp	r3, #128	; 0x80
 8006680:	d10e      	bne.n	80066a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668c:	2b80      	cmp	r3, #128	; 0x80
 800668e:	d107      	bne.n	80066a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fc12 	bl	8006ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066aa:	2b40      	cmp	r3, #64	; 0x40
 80066ac:	d10e      	bne.n	80066cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b8:	2b40      	cmp	r3, #64	; 0x40
 80066ba:	d107      	bne.n	80066cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f8f6 	bl	80068b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	d10e      	bne.n	80066f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d107      	bne.n	80066f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f06f 0220 	mvn.w	r2, #32
 80066f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fbdc 	bl	8006eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066f8:	bf00      	nop
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006712:	2b01      	cmp	r3, #1
 8006714:	d101      	bne.n	800671a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006716:	2302      	movs	r3, #2
 8006718:	e0ac      	b.n	8006874 <HAL_TIM_PWM_ConfigChannel+0x174>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b0c      	cmp	r3, #12
 8006726:	f200 809f 	bhi.w	8006868 <HAL_TIM_PWM_ConfigChannel+0x168>
 800672a:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	08006765 	.word	0x08006765
 8006734:	08006869 	.word	0x08006869
 8006738:	08006869 	.word	0x08006869
 800673c:	08006869 	.word	0x08006869
 8006740:	080067a5 	.word	0x080067a5
 8006744:	08006869 	.word	0x08006869
 8006748:	08006869 	.word	0x08006869
 800674c:	08006869 	.word	0x08006869
 8006750:	080067e7 	.word	0x080067e7
 8006754:	08006869 	.word	0x08006869
 8006758:	08006869 	.word	0x08006869
 800675c:	08006869 	.word	0x08006869
 8006760:	08006827 	.word	0x08006827
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 f94e 	bl	8006a0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699a      	ldr	r2, [r3, #24]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0208 	orr.w	r2, r2, #8
 800677e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0204 	bic.w	r2, r2, #4
 800678e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6999      	ldr	r1, [r3, #24]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	691a      	ldr	r2, [r3, #16]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	619a      	str	r2, [r3, #24]
      break;
 80067a2:	e062      	b.n	800686a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 f99e 	bl	8006aec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	699a      	ldr	r2, [r3, #24]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6999      	ldr	r1, [r3, #24]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	021a      	lsls	r2, r3, #8
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	619a      	str	r2, [r3, #24]
      break;
 80067e4:	e041      	b.n	800686a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68b9      	ldr	r1, [r7, #8]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 f9f3 	bl	8006bd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69da      	ldr	r2, [r3, #28]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f042 0208 	orr.w	r2, r2, #8
 8006800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69da      	ldr	r2, [r3, #28]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0204 	bic.w	r2, r2, #4
 8006810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69d9      	ldr	r1, [r3, #28]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	691a      	ldr	r2, [r3, #16]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	61da      	str	r2, [r3, #28]
      break;
 8006824:	e021      	b.n	800686a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68b9      	ldr	r1, [r7, #8]
 800682c:	4618      	mov	r0, r3
 800682e:	f000 fa47 	bl	8006cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69da      	ldr	r2, [r3, #28]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69da      	ldr	r2, [r3, #28]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69d9      	ldr	r1, [r3, #28]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	021a      	lsls	r2, r3, #8
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	61da      	str	r2, [r3, #28]
      break;
 8006866:	e000      	b.n	800686a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006868:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a40      	ldr	r2, [pc, #256]	; (80069e0 <TIM_Base_SetConfig+0x114>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d013      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ea:	d00f      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a3d      	ldr	r2, [pc, #244]	; (80069e4 <TIM_Base_SetConfig+0x118>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00b      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a3c      	ldr	r2, [pc, #240]	; (80069e8 <TIM_Base_SetConfig+0x11c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d007      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a3b      	ldr	r2, [pc, #236]	; (80069ec <TIM_Base_SetConfig+0x120>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d003      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a3a      	ldr	r2, [pc, #232]	; (80069f0 <TIM_Base_SetConfig+0x124>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d108      	bne.n	800691e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a2f      	ldr	r2, [pc, #188]	; (80069e0 <TIM_Base_SetConfig+0x114>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d02b      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692c:	d027      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a2c      	ldr	r2, [pc, #176]	; (80069e4 <TIM_Base_SetConfig+0x118>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d023      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a2b      	ldr	r2, [pc, #172]	; (80069e8 <TIM_Base_SetConfig+0x11c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d01f      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a2a      	ldr	r2, [pc, #168]	; (80069ec <TIM_Base_SetConfig+0x120>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d01b      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a29      	ldr	r2, [pc, #164]	; (80069f0 <TIM_Base_SetConfig+0x124>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d017      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a28      	ldr	r2, [pc, #160]	; (80069f4 <TIM_Base_SetConfig+0x128>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d013      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a27      	ldr	r2, [pc, #156]	; (80069f8 <TIM_Base_SetConfig+0x12c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00f      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a26      	ldr	r2, [pc, #152]	; (80069fc <TIM_Base_SetConfig+0x130>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00b      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a25      	ldr	r2, [pc, #148]	; (8006a00 <TIM_Base_SetConfig+0x134>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d007      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a24      	ldr	r2, [pc, #144]	; (8006a04 <TIM_Base_SetConfig+0x138>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d003      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a23      	ldr	r2, [pc, #140]	; (8006a08 <TIM_Base_SetConfig+0x13c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d108      	bne.n	8006990 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	4313      	orrs	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a0a      	ldr	r2, [pc, #40]	; (80069e0 <TIM_Base_SetConfig+0x114>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d003      	beq.n	80069c4 <TIM_Base_SetConfig+0xf8>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a0c      	ldr	r2, [pc, #48]	; (80069f0 <TIM_Base_SetConfig+0x124>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d103      	bne.n	80069cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	691a      	ldr	r2, [r3, #16]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	615a      	str	r2, [r3, #20]
}
 80069d2:	bf00      	nop
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40010000 	.word	0x40010000
 80069e4:	40000400 	.word	0x40000400
 80069e8:	40000800 	.word	0x40000800
 80069ec:	40000c00 	.word	0x40000c00
 80069f0:	40010400 	.word	0x40010400
 80069f4:	40014000 	.word	0x40014000
 80069f8:	40014400 	.word	0x40014400
 80069fc:	40014800 	.word	0x40014800
 8006a00:	40001800 	.word	0x40001800
 8006a04:	40001c00 	.word	0x40001c00
 8006a08:	40002000 	.word	0x40002000

08006a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f023 0201 	bic.w	r2, r3, #1
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 0303 	bic.w	r3, r3, #3
 8006a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f023 0302 	bic.w	r3, r3, #2
 8006a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a20      	ldr	r2, [pc, #128]	; (8006ae4 <TIM_OC1_SetConfig+0xd8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_OC1_SetConfig+0x64>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a1f      	ldr	r2, [pc, #124]	; (8006ae8 <TIM_OC1_SetConfig+0xdc>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d10c      	bne.n	8006a8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f023 0308 	bic.w	r3, r3, #8
 8006a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f023 0304 	bic.w	r3, r3, #4
 8006a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a15      	ldr	r2, [pc, #84]	; (8006ae4 <TIM_OC1_SetConfig+0xd8>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d003      	beq.n	8006a9a <TIM_OC1_SetConfig+0x8e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a14      	ldr	r2, [pc, #80]	; (8006ae8 <TIM_OC1_SetConfig+0xdc>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d111      	bne.n	8006abe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	621a      	str	r2, [r3, #32]
}
 8006ad8:	bf00      	nop
 8006ada:	371c      	adds	r7, #28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40010400 	.word	0x40010400

08006aec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f023 0210 	bic.w	r2, r3, #16
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	021b      	lsls	r3, r3, #8
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f023 0320 	bic.w	r3, r3, #32
 8006b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a22      	ldr	r2, [pc, #136]	; (8006bd0 <TIM_OC2_SetConfig+0xe4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d003      	beq.n	8006b54 <TIM_OC2_SetConfig+0x68>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a21      	ldr	r2, [pc, #132]	; (8006bd4 <TIM_OC2_SetConfig+0xe8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d10d      	bne.n	8006b70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a17      	ldr	r2, [pc, #92]	; (8006bd0 <TIM_OC2_SetConfig+0xe4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d003      	beq.n	8006b80 <TIM_OC2_SetConfig+0x94>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a16      	ldr	r2, [pc, #88]	; (8006bd4 <TIM_OC2_SetConfig+0xe8>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d113      	bne.n	8006ba8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40010400 	.word	0x40010400

08006bd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f023 0303 	bic.w	r3, r3, #3
 8006c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a21      	ldr	r2, [pc, #132]	; (8006cb8 <TIM_OC3_SetConfig+0xe0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d003      	beq.n	8006c3e <TIM_OC3_SetConfig+0x66>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a20      	ldr	r2, [pc, #128]	; (8006cbc <TIM_OC3_SetConfig+0xe4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d10d      	bne.n	8006c5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	021b      	lsls	r3, r3, #8
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a16      	ldr	r2, [pc, #88]	; (8006cb8 <TIM_OC3_SetConfig+0xe0>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d003      	beq.n	8006c6a <TIM_OC3_SetConfig+0x92>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a15      	ldr	r2, [pc, #84]	; (8006cbc <TIM_OC3_SetConfig+0xe4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d113      	bne.n	8006c92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	621a      	str	r2, [r3, #32]
}
 8006cac:	bf00      	nop
 8006cae:	371c      	adds	r7, #28
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	40010000 	.word	0x40010000
 8006cbc:	40010400 	.word	0x40010400

08006cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	021b      	lsls	r3, r3, #8
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	031b      	lsls	r3, r3, #12
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a12      	ldr	r2, [pc, #72]	; (8006d64 <TIM_OC4_SetConfig+0xa4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d003      	beq.n	8006d28 <TIM_OC4_SetConfig+0x68>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a11      	ldr	r2, [pc, #68]	; (8006d68 <TIM_OC4_SetConfig+0xa8>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d109      	bne.n	8006d3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	019b      	lsls	r3, r3, #6
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	621a      	str	r2, [r3, #32]
}
 8006d56:	bf00      	nop
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40010400 	.word	0x40010400

08006d6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f003 031f 	and.w	r3, r3, #31
 8006d7e:	2201      	movs	r2, #1
 8006d80:	fa02 f303 	lsl.w	r3, r2, r3
 8006d84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6a1a      	ldr	r2, [r3, #32]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	401a      	ands	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a1a      	ldr	r2, [r3, #32]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f003 031f 	and.w	r3, r3, #31
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	fa01 f303 	lsl.w	r3, r1, r3
 8006da4:	431a      	orrs	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	621a      	str	r2, [r3, #32]
}
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
	...

08006db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d101      	bne.n	8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	e05a      	b.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a21      	ldr	r2, [pc, #132]	; (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d022      	beq.n	8006e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e1c:	d01d      	beq.n	8006e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a1d      	ldr	r2, [pc, #116]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d018      	beq.n	8006e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a1b      	ldr	r2, [pc, #108]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d013      	beq.n	8006e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a1a      	ldr	r2, [pc, #104]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d00e      	beq.n	8006e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a18      	ldr	r2, [pc, #96]	; (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d009      	beq.n	8006e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a17      	ldr	r2, [pc, #92]	; (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d004      	beq.n	8006e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a15      	ldr	r2, [pc, #84]	; (8006eac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d10c      	bne.n	8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40010000 	.word	0x40010000
 8006e98:	40000400 	.word	0x40000400
 8006e9c:	40000800 	.word	0x40000800
 8006ea0:	40000c00 	.word	0x40000c00
 8006ea4:	40010400 	.word	0x40010400
 8006ea8:	40014000 	.word	0x40014000
 8006eac:	40001800 	.word	0x40001800

08006eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e03f      	b.n	8006f6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d106      	bne.n	8006f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7fa fda4 	bl	8001a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2224      	movs	r2, #36	; 0x24
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f829 	bl	8006f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	691a      	ldr	r2, [r3, #16]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	695a      	ldr	r2, [r3, #20]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f78:	b09f      	sub	sp, #124	; 0x7c
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f8a:	68d9      	ldr	r1, [r3, #12]
 8006f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	ea40 0301 	orr.w	r3, r0, r1
 8006f94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006fb8:	f021 010c 	bic.w	r1, r1, #12
 8006fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fc2:	430b      	orrs	r3, r1
 8006fc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd2:	6999      	ldr	r1, [r3, #24]
 8006fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	ea40 0301 	orr.w	r3, r0, r1
 8006fdc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	4bc5      	ldr	r3, [pc, #788]	; (80072f8 <UART_SetConfig+0x384>)
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d004      	beq.n	8006ff2 <UART_SetConfig+0x7e>
 8006fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	4bc3      	ldr	r3, [pc, #780]	; (80072fc <UART_SetConfig+0x388>)
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d103      	bne.n	8006ffa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ff2:	f7fd fa5d 	bl	80044b0 <HAL_RCC_GetPCLK2Freq>
 8006ff6:	6778      	str	r0, [r7, #116]	; 0x74
 8006ff8:	e002      	b.n	8007000 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ffa:	f7fd fa45 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8006ffe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007008:	f040 80b6 	bne.w	8007178 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800700c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800700e:	461c      	mov	r4, r3
 8007010:	f04f 0500 	mov.w	r5, #0
 8007014:	4622      	mov	r2, r4
 8007016:	462b      	mov	r3, r5
 8007018:	1891      	adds	r1, r2, r2
 800701a:	6439      	str	r1, [r7, #64]	; 0x40
 800701c:	415b      	adcs	r3, r3
 800701e:	647b      	str	r3, [r7, #68]	; 0x44
 8007020:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007024:	1912      	adds	r2, r2, r4
 8007026:	eb45 0303 	adc.w	r3, r5, r3
 800702a:	f04f 0000 	mov.w	r0, #0
 800702e:	f04f 0100 	mov.w	r1, #0
 8007032:	00d9      	lsls	r1, r3, #3
 8007034:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007038:	00d0      	lsls	r0, r2, #3
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	1911      	adds	r1, r2, r4
 8007040:	6639      	str	r1, [r7, #96]	; 0x60
 8007042:	416b      	adcs	r3, r5
 8007044:	667b      	str	r3, [r7, #100]	; 0x64
 8007046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	461a      	mov	r2, r3
 800704c:	f04f 0300 	mov.w	r3, #0
 8007050:	1891      	adds	r1, r2, r2
 8007052:	63b9      	str	r1, [r7, #56]	; 0x38
 8007054:	415b      	adcs	r3, r3
 8007056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007058:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800705c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007060:	f7f9 f916 	bl	8000290 <__aeabi_uldivmod>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4ba5      	ldr	r3, [pc, #660]	; (8007300 <UART_SetConfig+0x38c>)
 800706a:	fba3 2302 	umull	r2, r3, r3, r2
 800706e:	095b      	lsrs	r3, r3, #5
 8007070:	011e      	lsls	r6, r3, #4
 8007072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007074:	461c      	mov	r4, r3
 8007076:	f04f 0500 	mov.w	r5, #0
 800707a:	4622      	mov	r2, r4
 800707c:	462b      	mov	r3, r5
 800707e:	1891      	adds	r1, r2, r2
 8007080:	6339      	str	r1, [r7, #48]	; 0x30
 8007082:	415b      	adcs	r3, r3
 8007084:	637b      	str	r3, [r7, #52]	; 0x34
 8007086:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800708a:	1912      	adds	r2, r2, r4
 800708c:	eb45 0303 	adc.w	r3, r5, r3
 8007090:	f04f 0000 	mov.w	r0, #0
 8007094:	f04f 0100 	mov.w	r1, #0
 8007098:	00d9      	lsls	r1, r3, #3
 800709a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800709e:	00d0      	lsls	r0, r2, #3
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	1911      	adds	r1, r2, r4
 80070a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80070a8:	416b      	adcs	r3, r5
 80070aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	461a      	mov	r2, r3
 80070b2:	f04f 0300 	mov.w	r3, #0
 80070b6:	1891      	adds	r1, r2, r2
 80070b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80070ba:	415b      	adcs	r3, r3
 80070bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80070c6:	f7f9 f8e3 	bl	8000290 <__aeabi_uldivmod>
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	4b8c      	ldr	r3, [pc, #560]	; (8007300 <UART_SetConfig+0x38c>)
 80070d0:	fba3 1302 	umull	r1, r3, r3, r2
 80070d4:	095b      	lsrs	r3, r3, #5
 80070d6:	2164      	movs	r1, #100	; 0x64
 80070d8:	fb01 f303 	mul.w	r3, r1, r3
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	3332      	adds	r3, #50	; 0x32
 80070e2:	4a87      	ldr	r2, [pc, #540]	; (8007300 <UART_SetConfig+0x38c>)
 80070e4:	fba2 2303 	umull	r2, r3, r2, r3
 80070e8:	095b      	lsrs	r3, r3, #5
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070f0:	441e      	add	r6, r3
 80070f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070f4:	4618      	mov	r0, r3
 80070f6:	f04f 0100 	mov.w	r1, #0
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	1894      	adds	r4, r2, r2
 8007100:	623c      	str	r4, [r7, #32]
 8007102:	415b      	adcs	r3, r3
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
 8007106:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800710a:	1812      	adds	r2, r2, r0
 800710c:	eb41 0303 	adc.w	r3, r1, r3
 8007110:	f04f 0400 	mov.w	r4, #0
 8007114:	f04f 0500 	mov.w	r5, #0
 8007118:	00dd      	lsls	r5, r3, #3
 800711a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800711e:	00d4      	lsls	r4, r2, #3
 8007120:	4622      	mov	r2, r4
 8007122:	462b      	mov	r3, r5
 8007124:	1814      	adds	r4, r2, r0
 8007126:	653c      	str	r4, [r7, #80]	; 0x50
 8007128:	414b      	adcs	r3, r1
 800712a:	657b      	str	r3, [r7, #84]	; 0x54
 800712c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	461a      	mov	r2, r3
 8007132:	f04f 0300 	mov.w	r3, #0
 8007136:	1891      	adds	r1, r2, r2
 8007138:	61b9      	str	r1, [r7, #24]
 800713a:	415b      	adcs	r3, r3
 800713c:	61fb      	str	r3, [r7, #28]
 800713e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007142:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007146:	f7f9 f8a3 	bl	8000290 <__aeabi_uldivmod>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4b6c      	ldr	r3, [pc, #432]	; (8007300 <UART_SetConfig+0x38c>)
 8007150:	fba3 1302 	umull	r1, r3, r3, r2
 8007154:	095b      	lsrs	r3, r3, #5
 8007156:	2164      	movs	r1, #100	; 0x64
 8007158:	fb01 f303 	mul.w	r3, r1, r3
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	3332      	adds	r3, #50	; 0x32
 8007162:	4a67      	ldr	r2, [pc, #412]	; (8007300 <UART_SetConfig+0x38c>)
 8007164:	fba2 2303 	umull	r2, r3, r2, r3
 8007168:	095b      	lsrs	r3, r3, #5
 800716a:	f003 0207 	and.w	r2, r3, #7
 800716e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4432      	add	r2, r6
 8007174:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007176:	e0b9      	b.n	80072ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800717a:	461c      	mov	r4, r3
 800717c:	f04f 0500 	mov.w	r5, #0
 8007180:	4622      	mov	r2, r4
 8007182:	462b      	mov	r3, r5
 8007184:	1891      	adds	r1, r2, r2
 8007186:	6139      	str	r1, [r7, #16]
 8007188:	415b      	adcs	r3, r3
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007190:	1912      	adds	r2, r2, r4
 8007192:	eb45 0303 	adc.w	r3, r5, r3
 8007196:	f04f 0000 	mov.w	r0, #0
 800719a:	f04f 0100 	mov.w	r1, #0
 800719e:	00d9      	lsls	r1, r3, #3
 80071a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071a4:	00d0      	lsls	r0, r2, #3
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	eb12 0804 	adds.w	r8, r2, r4
 80071ae:	eb43 0905 	adc.w	r9, r3, r5
 80071b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f04f 0100 	mov.w	r1, #0
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	f04f 0300 	mov.w	r3, #0
 80071c4:	008b      	lsls	r3, r1, #2
 80071c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80071ca:	0082      	lsls	r2, r0, #2
 80071cc:	4640      	mov	r0, r8
 80071ce:	4649      	mov	r1, r9
 80071d0:	f7f9 f85e 	bl	8000290 <__aeabi_uldivmod>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4b49      	ldr	r3, [pc, #292]	; (8007300 <UART_SetConfig+0x38c>)
 80071da:	fba3 2302 	umull	r2, r3, r3, r2
 80071de:	095b      	lsrs	r3, r3, #5
 80071e0:	011e      	lsls	r6, r3, #4
 80071e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071e4:	4618      	mov	r0, r3
 80071e6:	f04f 0100 	mov.w	r1, #0
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	1894      	adds	r4, r2, r2
 80071f0:	60bc      	str	r4, [r7, #8]
 80071f2:	415b      	adcs	r3, r3
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071fa:	1812      	adds	r2, r2, r0
 80071fc:	eb41 0303 	adc.w	r3, r1, r3
 8007200:	f04f 0400 	mov.w	r4, #0
 8007204:	f04f 0500 	mov.w	r5, #0
 8007208:	00dd      	lsls	r5, r3, #3
 800720a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800720e:	00d4      	lsls	r4, r2, #3
 8007210:	4622      	mov	r2, r4
 8007212:	462b      	mov	r3, r5
 8007214:	1814      	adds	r4, r2, r0
 8007216:	64bc      	str	r4, [r7, #72]	; 0x48
 8007218:	414b      	adcs	r3, r1
 800721a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800721c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	4618      	mov	r0, r3
 8007222:	f04f 0100 	mov.w	r1, #0
 8007226:	f04f 0200 	mov.w	r2, #0
 800722a:	f04f 0300 	mov.w	r3, #0
 800722e:	008b      	lsls	r3, r1, #2
 8007230:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007234:	0082      	lsls	r2, r0, #2
 8007236:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800723a:	f7f9 f829 	bl	8000290 <__aeabi_uldivmod>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	4b2f      	ldr	r3, [pc, #188]	; (8007300 <UART_SetConfig+0x38c>)
 8007244:	fba3 1302 	umull	r1, r3, r3, r2
 8007248:	095b      	lsrs	r3, r3, #5
 800724a:	2164      	movs	r1, #100	; 0x64
 800724c:	fb01 f303 	mul.w	r3, r1, r3
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	011b      	lsls	r3, r3, #4
 8007254:	3332      	adds	r3, #50	; 0x32
 8007256:	4a2a      	ldr	r2, [pc, #168]	; (8007300 <UART_SetConfig+0x38c>)
 8007258:	fba2 2303 	umull	r2, r3, r2, r3
 800725c:	095b      	lsrs	r3, r3, #5
 800725e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007262:	441e      	add	r6, r3
 8007264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007266:	4618      	mov	r0, r3
 8007268:	f04f 0100 	mov.w	r1, #0
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	1894      	adds	r4, r2, r2
 8007272:	603c      	str	r4, [r7, #0]
 8007274:	415b      	adcs	r3, r3
 8007276:	607b      	str	r3, [r7, #4]
 8007278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800727c:	1812      	adds	r2, r2, r0
 800727e:	eb41 0303 	adc.w	r3, r1, r3
 8007282:	f04f 0400 	mov.w	r4, #0
 8007286:	f04f 0500 	mov.w	r5, #0
 800728a:	00dd      	lsls	r5, r3, #3
 800728c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007290:	00d4      	lsls	r4, r2, #3
 8007292:	4622      	mov	r2, r4
 8007294:	462b      	mov	r3, r5
 8007296:	eb12 0a00 	adds.w	sl, r2, r0
 800729a:	eb43 0b01 	adc.w	fp, r3, r1
 800729e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f04f 0100 	mov.w	r1, #0
 80072a8:	f04f 0200 	mov.w	r2, #0
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	008b      	lsls	r3, r1, #2
 80072b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80072b6:	0082      	lsls	r2, r0, #2
 80072b8:	4650      	mov	r0, sl
 80072ba:	4659      	mov	r1, fp
 80072bc:	f7f8 ffe8 	bl	8000290 <__aeabi_uldivmod>
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	4b0e      	ldr	r3, [pc, #56]	; (8007300 <UART_SetConfig+0x38c>)
 80072c6:	fba3 1302 	umull	r1, r3, r3, r2
 80072ca:	095b      	lsrs	r3, r3, #5
 80072cc:	2164      	movs	r1, #100	; 0x64
 80072ce:	fb01 f303 	mul.w	r3, r1, r3
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	011b      	lsls	r3, r3, #4
 80072d6:	3332      	adds	r3, #50	; 0x32
 80072d8:	4a09      	ldr	r2, [pc, #36]	; (8007300 <UART_SetConfig+0x38c>)
 80072da:	fba2 2303 	umull	r2, r3, r2, r3
 80072de:	095b      	lsrs	r3, r3, #5
 80072e0:	f003 020f 	and.w	r2, r3, #15
 80072e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4432      	add	r2, r6
 80072ea:	609a      	str	r2, [r3, #8]
}
 80072ec:	bf00      	nop
 80072ee:	377c      	adds	r7, #124	; 0x7c
 80072f0:	46bd      	mov	sp, r7
 80072f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f6:	bf00      	nop
 80072f8:	40011000 	.word	0x40011000
 80072fc:	40011400 	.word	0x40011400
 8007300:	51eb851f 	.word	0x51eb851f

08007304 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d029      	beq.n	8007372 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800732a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800732e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007338:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800733e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007344:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800734a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007350:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007356:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800735c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007362:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	e034      	b.n	80073dc <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800737e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007388:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800738e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	4313      	orrs	r3, r2
 8007394:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80073a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073a6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80073b0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80073b6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80073bc:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80073c2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80073c8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b087      	sub	sp, #28
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	60b9      	str	r1, [r7, #8]
 80073f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d02e      	beq.n	8007462 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007410:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	3b01      	subs	r3, #1
 800741e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007420:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	3b01      	subs	r3, #1
 8007428:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800742a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	3b01      	subs	r3, #1
 8007432:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007434:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	3b01      	subs	r3, #1
 800743c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800743e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	3b01      	subs	r3, #1
 8007446:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007448:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	3b01      	subs	r3, #1
 8007450:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007452:	4313      	orrs	r3, r2
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	4313      	orrs	r3, r2
 8007458:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	609a      	str	r2, [r3, #8]
 8007460:	e03b      	b.n	80074da <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800746e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007472:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	3b01      	subs	r3, #1
 800747a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	3b01      	subs	r3, #1
 8007482:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007484:	4313      	orrs	r3, r2
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	4313      	orrs	r3, r2
 800748a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007498:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	3b01      	subs	r3, #1
 80074a6:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80074a8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80074b2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	3b01      	subs	r3, #1
 80074ba:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80074bc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80074c6:	4313      	orrs	r3, r2
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	371c      	adds	r7, #28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007504:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	3b01      	subs	r3, #1
 800750c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800750e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007516:	4313      	orrs	r3, r2
 8007518:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007520:	f7fa fd6e 	bl	8002000 <HAL_GetTick>
 8007524:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007526:	e010      	b.n	800754a <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752e:	d00c      	beq.n	800754a <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d007      	beq.n	8007546 <FMC_SDRAM_SendCommand+0x5e>
 8007536:	f7fa fd63 	bl	8002000 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	429a      	cmp	r2, r3
 8007544:	d201      	bcs.n	800754a <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e006      	b.n	8007558 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	2b20      	cmp	r3, #32
 8007554:	d0e8      	beq.n	8007528 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007560:	b084      	sub	sp, #16
 8007562:	b480      	push	{r7}
 8007564:	b085      	sub	sp, #20
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	f107 001c 	add.w	r0, r7, #28
 800756e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007576:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007578:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800757a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800757e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007582:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007586:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800758a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	4313      	orrs	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800759a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	431a      	orrs	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	b004      	add	sp, #16
 80075b4:	4770      	bx	lr

080075b6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b082      	sub	sp, #8
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2203      	movs	r2, #3
 80075fe:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007600:	2002      	movs	r0, #2
 8007602:	f7fa fd09 	bl	8002018 <HAL_Delay>
  
  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0303 	and.w	r3, r3, #3
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007636:	2300      	movs	r3, #0
 8007638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800764a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007650:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007656:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007666:	f023 030f 	bic.w	r3, r3, #15
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	431a      	orrs	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	b2db      	uxtb	r3, r3
}
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800769a:	b480      	push	{r7}
 800769c:	b085      	sub	sp, #20
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	3314      	adds	r3, #20
 80076a8:	461a      	mov	r2, r3
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	4413      	add	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
}  
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80076e6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80076ec:	431a      	orrs	r2, r3
                       Data->DPSM);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80076f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fe:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	431a      	orrs	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800770a:	2300      	movs	r3, #0

}
 800770c:	4618      	mov	r0, r3
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b088      	sub	sp, #32
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007726:	2310      	movs	r3, #16
 8007728:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800772a:	2340      	movs	r3, #64	; 0x40
 800772c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800772e:	2300      	movs	r3, #0
 8007730:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007736:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007738:	f107 0308 	add.w	r3, r7, #8
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7ff ff74 	bl	800762c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007744:	f241 3288 	movw	r2, #5000	; 0x1388
 8007748:	2110      	movs	r1, #16
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fa44 	bl	8007bd8 <SDMMC_GetCmdResp1>
 8007750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007752:	69fb      	ldr	r3, [r7, #28]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3720      	adds	r7, #32
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b088      	sub	sp, #32
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800776a:	2311      	movs	r3, #17
 800776c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800776e:	2340      	movs	r3, #64	; 0x40
 8007770:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007772:	2300      	movs	r3, #0
 8007774:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800777a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800777c:	f107 0308 	add.w	r3, r7, #8
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7ff ff52 	bl	800762c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007788:	f241 3288 	movw	r2, #5000	; 0x1388
 800778c:	2111      	movs	r1, #17
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fa22 	bl	8007bd8 <SDMMC_GetCmdResp1>
 8007794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007796:	69fb      	ldr	r3, [r7, #28]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3720      	adds	r7, #32
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80077ae:	2312      	movs	r3, #18
 80077b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077b2:	2340      	movs	r3, #64	; 0x40
 80077b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077b6:	2300      	movs	r3, #0
 80077b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077c0:	f107 0308 	add.w	r3, r7, #8
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff ff30 	bl	800762c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80077cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d0:	2112      	movs	r1, #18
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fa00 	bl	8007bd8 <SDMMC_GetCmdResp1>
 80077d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077da:	69fb      	ldr	r3, [r7, #28]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3720      	adds	r7, #32
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b088      	sub	sp, #32
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80077f2:	2318      	movs	r3, #24
 80077f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077f6:	2340      	movs	r3, #64	; 0x40
 80077f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077fa:	2300      	movs	r3, #0
 80077fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007802:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007804:	f107 0308 	add.w	r3, r7, #8
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7ff ff0e 	bl	800762c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007810:	f241 3288 	movw	r2, #5000	; 0x1388
 8007814:	2118      	movs	r1, #24
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f9de 	bl	8007bd8 <SDMMC_GetCmdResp1>
 800781c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800781e:	69fb      	ldr	r3, [r7, #28]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3720      	adds	r7, #32
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b088      	sub	sp, #32
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007836:	2319      	movs	r3, #25
 8007838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800783a:	2340      	movs	r3, #64	; 0x40
 800783c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007846:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007848:	f107 0308 	add.w	r3, r7, #8
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7ff feec 	bl	800762c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007854:	f241 3288 	movw	r2, #5000	; 0x1388
 8007858:	2119      	movs	r1, #25
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f9bc 	bl	8007bd8 <SDMMC_GetCmdResp1>
 8007860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007862:	69fb      	ldr	r3, [r7, #28]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3720      	adds	r7, #32
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b088      	sub	sp, #32
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007878:	230c      	movs	r3, #12
 800787a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800787c:	2340      	movs	r3, #64	; 0x40
 800787e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007880:	2300      	movs	r3, #0
 8007882:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007888:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800788a:	f107 0308 	add.w	r3, r7, #8
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7ff fecb 	bl	800762c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007896:	4a05      	ldr	r2, [pc, #20]	; (80078ac <SDMMC_CmdStopTransfer+0x40>)
 8007898:	210c      	movs	r1, #12
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f99c 	bl	8007bd8 <SDMMC_GetCmdResp1>
 80078a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078a2:	69fb      	ldr	r3, [r7, #28]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3720      	adds	r7, #32
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	05f5e100 	.word	0x05f5e100

080078b0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08a      	sub	sp, #40	; 0x28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80078c0:	2307      	movs	r3, #7
 80078c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078c4:	2340      	movs	r3, #64	; 0x40
 80078c6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078c8:	2300      	movs	r3, #0
 80078ca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078d0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078d2:	f107 0310 	add.w	r3, r7, #16
 80078d6:	4619      	mov	r1, r3
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f7ff fea7 	bl	800762c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80078de:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e2:	2107      	movs	r1, #7
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 f977 	bl	8007bd8 <SDMMC_GetCmdResp1>
 80078ea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3728      	adds	r7, #40	; 0x28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b088      	sub	sp, #32
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007902:	2300      	movs	r3, #0
 8007904:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007906:	2300      	movs	r3, #0
 8007908:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800790a:	2300      	movs	r3, #0
 800790c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800790e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007912:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007914:	f107 0308 	add.w	r3, r7, #8
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7ff fe86 	bl	800762c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f92d 	bl	8007b80 <SDMMC_GetCmdError>
 8007926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007928:	69fb      	ldr	r3, [r7, #28]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3720      	adds	r7, #32
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b088      	sub	sp, #32
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800793a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800793e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007940:	2308      	movs	r3, #8
 8007942:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007944:	2340      	movs	r3, #64	; 0x40
 8007946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007948:	2300      	movs	r3, #0
 800794a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800794c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007950:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007952:	f107 0308 	add.w	r3, r7, #8
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7ff fe67 	bl	800762c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fb24 	bl	8007fac <SDMMC_GetCmdResp7>
 8007964:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007966:	69fb      	ldr	r3, [r7, #28]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3720      	adds	r7, #32
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b088      	sub	sp, #32
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800797e:	2337      	movs	r3, #55	; 0x37
 8007980:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007982:	2340      	movs	r3, #64	; 0x40
 8007984:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007986:	2300      	movs	r3, #0
 8007988:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800798a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800798e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007990:	f107 0308 	add.w	r3, r7, #8
 8007994:	4619      	mov	r1, r3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7ff fe48 	bl	800762c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800799c:	f241 3288 	movw	r2, #5000	; 0x1388
 80079a0:	2137      	movs	r1, #55	; 0x37
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f918 	bl	8007bd8 <SDMMC_GetCmdResp1>
 80079a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079aa:	69fb      	ldr	r3, [r7, #28]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3720      	adds	r7, #32
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b088      	sub	sp, #32
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80079ca:	2329      	movs	r3, #41	; 0x29
 80079cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079ce:	2340      	movs	r3, #64	; 0x40
 80079d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079d2:	2300      	movs	r3, #0
 80079d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079dc:	f107 0308 	add.w	r3, r7, #8
 80079e0:	4619      	mov	r1, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7ff fe22 	bl	800762c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fa2b 	bl	8007e44 <SDMMC_GetCmdResp3>
 80079ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079f0:	69fb      	ldr	r3, [r7, #28]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3720      	adds	r7, #32
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b088      	sub	sp, #32
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007a08:	2306      	movs	r3, #6
 8007a0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a0c:	2340      	movs	r3, #64	; 0x40
 8007a0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a10:	2300      	movs	r3, #0
 8007a12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a1a:	f107 0308 	add.w	r3, r7, #8
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7ff fe03 	bl	800762c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a2a:	2106      	movs	r1, #6
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f8d3 	bl	8007bd8 <SDMMC_GetCmdResp1>
 8007a32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a34:	69fb      	ldr	r3, [r7, #28]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3720      	adds	r7, #32
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b088      	sub	sp, #32
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007a4a:	2333      	movs	r3, #51	; 0x33
 8007a4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a4e:	2340      	movs	r3, #64	; 0x40
 8007a50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a5c:	f107 0308 	add.w	r3, r7, #8
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff fde2 	bl	800762c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a6c:	2133      	movs	r1, #51	; 0x33
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f8b2 	bl	8007bd8 <SDMMC_GetCmdResp1>
 8007a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a76:	69fb      	ldr	r3, [r7, #28]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3720      	adds	r7, #32
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b088      	sub	sp, #32
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007a90:	23c0      	movs	r3, #192	; 0xc0
 8007a92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a94:	2300      	movs	r3, #0
 8007a96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a9e:	f107 0308 	add.w	r3, r7, #8
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7ff fdc1 	bl	800762c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f982 	bl	8007db4 <SDMMC_GetCmdResp2>
 8007ab0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ab2:	69fb      	ldr	r3, [r7, #28]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3720      	adds	r7, #32
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007aca:	2309      	movs	r3, #9
 8007acc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007ace:	23c0      	movs	r3, #192	; 0xc0
 8007ad0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ada:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007adc:	f107 0308 	add.w	r3, r7, #8
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7ff fda2 	bl	800762c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f963 	bl	8007db4 <SDMMC_GetCmdResp2>
 8007aee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007af0:	69fb      	ldr	r3, [r7, #28]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3720      	adds	r7, #32
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b088      	sub	sp, #32
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b0c:	2340      	movs	r3, #64	; 0x40
 8007b0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b10:	2300      	movs	r3, #0
 8007b12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b1a:	f107 0308 	add.w	r3, r7, #8
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7ff fd83 	bl	800762c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	2103      	movs	r1, #3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f9c8 	bl	8007ec0 <SDMMC_GetCmdResp6>
 8007b30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b32:	69fb      	ldr	r3, [r7, #28]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3720      	adds	r7, #32
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007b4a:	230d      	movs	r3, #13
 8007b4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b4e:	2340      	movs	r3, #64	; 0x40
 8007b50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b52:	2300      	movs	r3, #0
 8007b54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b5c:	f107 0308 	add.w	r3, r7, #8
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff fd62 	bl	800762c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b6c:	210d      	movs	r1, #13
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f832 	bl	8007bd8 <SDMMC_GetCmdResp1>
 8007b74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b76:	69fb      	ldr	r3, [r7, #28]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3720      	adds	r7, #32
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b88:	4b11      	ldr	r3, [pc, #68]	; (8007bd0 <SDMMC_GetCmdError+0x50>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a11      	ldr	r2, [pc, #68]	; (8007bd4 <SDMMC_GetCmdError+0x54>)
 8007b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b92:	0a5b      	lsrs	r3, r3, #9
 8007b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b98:	fb02 f303 	mul.w	r3, r2, r3
 8007b9c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	1e5a      	subs	r2, r3, #1
 8007ba2:	60fa      	str	r2, [r7, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d102      	bne.n	8007bae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ba8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bac:	e009      	b.n	8007bc2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d0f1      	beq.n	8007b9e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	22c5      	movs	r2, #197	; 0xc5
 8007bbe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	20000004 	.word	0x20000004
 8007bd4:	10624dd3 	.word	0x10624dd3

08007bd8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b088      	sub	sp, #32
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	460b      	mov	r3, r1
 8007be2:	607a      	str	r2, [r7, #4]
 8007be4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007be6:	4b70      	ldr	r3, [pc, #448]	; (8007da8 <SDMMC_GetCmdResp1+0x1d0>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a70      	ldr	r2, [pc, #448]	; (8007dac <SDMMC_GetCmdResp1+0x1d4>)
 8007bec:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf0:	0a5a      	lsrs	r2, r3, #9
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	fb02 f303 	mul.w	r3, r2, r3
 8007bf8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	1e5a      	subs	r2, r3, #1
 8007bfe:	61fa      	str	r2, [r7, #28]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d102      	bne.n	8007c0a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c08:	e0c9      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0ef      	beq.n	8007bfa <SDMMC_GetCmdResp1+0x22>
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1ea      	bne.n	8007bfa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c28:	f003 0304 	and.w	r3, r3, #4
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d004      	beq.n	8007c3a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2204      	movs	r2, #4
 8007c34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c36:	2304      	movs	r3, #4
 8007c38:	e0b1      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d004      	beq.n	8007c50 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e0a6      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	22c5      	movs	r2, #197	; 0xc5
 8007c54:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f7ff fd12 	bl	8007680 <SDIO_GetCommandResponse>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	461a      	mov	r2, r3
 8007c60:	7afb      	ldrb	r3, [r7, #11]
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d001      	beq.n	8007c6a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e099      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f7ff fd14 	bl	800769a <SDIO_GetResponse>
 8007c72:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	4b4e      	ldr	r3, [pc, #312]	; (8007db0 <SDMMC_GetCmdResp1+0x1d8>)
 8007c78:	4013      	ands	r3, r2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e08d      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	da02      	bge.n	8007c8e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007c88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c8c:	e087      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007c98:	2340      	movs	r3, #64	; 0x40
 8007c9a:	e080      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007ca6:	2380      	movs	r3, #128	; 0x80
 8007ca8:	e079      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007cb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cb8:	e071      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cc8:	e069      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cd8:	e061      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007ce4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ce8:	e059      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d002      	beq.n	8007cfa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cf8:	e051      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d08:	e049      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007d14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d18:	e041      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d002      	beq.n	8007d2a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007d24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d28:	e039      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d38:	e031      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007d44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007d48:	e029      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007d54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d58:	e021      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007d64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007d68:	e019      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007d74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d78:	e011      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007d84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d88:	e009      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f003 0308 	and.w	r3, r3, #8
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007d94:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007d98:	e001      	b.n	8007d9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007d9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3720      	adds	r7, #32
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	20000004 	.word	0x20000004
 8007dac:	10624dd3 	.word	0x10624dd3
 8007db0:	fdffe008 	.word	0xfdffe008

08007db4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007dbc:	4b1f      	ldr	r3, [pc, #124]	; (8007e3c <SDMMC_GetCmdResp2+0x88>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a1f      	ldr	r2, [pc, #124]	; (8007e40 <SDMMC_GetCmdResp2+0x8c>)
 8007dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc6:	0a5b      	lsrs	r3, r3, #9
 8007dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dcc:	fb02 f303 	mul.w	r3, r2, r3
 8007dd0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	1e5a      	subs	r2, r3, #1
 8007dd6:	60fa      	str	r2, [r7, #12]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d102      	bne.n	8007de2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ddc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007de0:	e026      	b.n	8007e30 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d0ef      	beq.n	8007dd2 <SDMMC_GetCmdResp2+0x1e>
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1ea      	bne.n	8007dd2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e00:	f003 0304 	and.w	r3, r3, #4
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d004      	beq.n	8007e12 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2204      	movs	r2, #4
 8007e0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e0e:	2304      	movs	r3, #4
 8007e10:	e00e      	b.n	8007e30 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d004      	beq.n	8007e28 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e003      	b.n	8007e30 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	22c5      	movs	r2, #197	; 0xc5
 8007e2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	20000004 	.word	0x20000004
 8007e40:	10624dd3 	.word	0x10624dd3

08007e44 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e4c:	4b1a      	ldr	r3, [pc, #104]	; (8007eb8 <SDMMC_GetCmdResp3+0x74>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a1a      	ldr	r2, [pc, #104]	; (8007ebc <SDMMC_GetCmdResp3+0x78>)
 8007e52:	fba2 2303 	umull	r2, r3, r2, r3
 8007e56:	0a5b      	lsrs	r3, r3, #9
 8007e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e5c:	fb02 f303 	mul.w	r3, r2, r3
 8007e60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	1e5a      	subs	r2, r3, #1
 8007e66:	60fa      	str	r2, [r7, #12]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d102      	bne.n	8007e72 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e70:	e01b      	b.n	8007eaa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e76:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d0ef      	beq.n	8007e62 <SDMMC_GetCmdResp3+0x1e>
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1ea      	bne.n	8007e62 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e90:	f003 0304 	and.w	r3, r3, #4
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d004      	beq.n	8007ea2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2204      	movs	r2, #4
 8007e9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e9e:	2304      	movs	r3, #4
 8007ea0:	e003      	b.n	8007eaa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	22c5      	movs	r2, #197	; 0xc5
 8007ea6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	20000004 	.word	0x20000004
 8007ebc:	10624dd3 	.word	0x10624dd3

08007ec0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ece:	4b35      	ldr	r3, [pc, #212]	; (8007fa4 <SDMMC_GetCmdResp6+0xe4>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a35      	ldr	r2, [pc, #212]	; (8007fa8 <SDMMC_GetCmdResp6+0xe8>)
 8007ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed8:	0a5b      	lsrs	r3, r3, #9
 8007eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ede:	fb02 f303 	mul.w	r3, r2, r3
 8007ee2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	1e5a      	subs	r2, r3, #1
 8007ee8:	61fa      	str	r2, [r7, #28]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d102      	bne.n	8007ef4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007eee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ef2:	e052      	b.n	8007f9a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d0ef      	beq.n	8007ee4 <SDMMC_GetCmdResp6+0x24>
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1ea      	bne.n	8007ee4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f12:	f003 0304 	and.w	r3, r3, #4
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d004      	beq.n	8007f24 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2204      	movs	r2, #4
 8007f1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f20:	2304      	movs	r3, #4
 8007f22:	e03a      	b.n	8007f9a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d004      	beq.n	8007f3a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2201      	movs	r2, #1
 8007f34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e02f      	b.n	8007f9a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7ff fba0 	bl	8007680 <SDIO_GetCommandResponse>
 8007f40:	4603      	mov	r3, r0
 8007f42:	461a      	mov	r2, r3
 8007f44:	7afb      	ldrb	r3, [r7, #11]
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d001      	beq.n	8007f4e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e025      	b.n	8007f9a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	22c5      	movs	r2, #197	; 0xc5
 8007f52:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007f54:	2100      	movs	r1, #0
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f7ff fb9f 	bl	800769a <SDIO_GetResponse>
 8007f5c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d106      	bne.n	8007f76 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	0c1b      	lsrs	r3, r3, #16
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007f72:	2300      	movs	r3, #0
 8007f74:	e011      	b.n	8007f9a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d002      	beq.n	8007f86 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f84:	e009      	b.n	8007f9a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d002      	beq.n	8007f96 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f94:	e001      	b.n	8007f9a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007f96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3720      	adds	r7, #32
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20000004 	.word	0x20000004
 8007fa8:	10624dd3 	.word	0x10624dd3

08007fac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fb4:	4b22      	ldr	r3, [pc, #136]	; (8008040 <SDMMC_GetCmdResp7+0x94>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a22      	ldr	r2, [pc, #136]	; (8008044 <SDMMC_GetCmdResp7+0x98>)
 8007fba:	fba2 2303 	umull	r2, r3, r2, r3
 8007fbe:	0a5b      	lsrs	r3, r3, #9
 8007fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc4:	fb02 f303 	mul.w	r3, r2, r3
 8007fc8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	1e5a      	subs	r2, r3, #1
 8007fce:	60fa      	str	r2, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d102      	bne.n	8007fda <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007fd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fd8:	e02c      	b.n	8008034 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fde:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0ef      	beq.n	8007fca <SDMMC_GetCmdResp7+0x1e>
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1ea      	bne.n	8007fca <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d004      	beq.n	800800a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2204      	movs	r2, #4
 8008004:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008006:	2304      	movs	r3, #4
 8008008:	e014      	b.n	8008034 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	d004      	beq.n	8008020 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800801c:	2301      	movs	r3, #1
 800801e:	e009      	b.n	8008034 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2240      	movs	r2, #64	; 0x40
 8008030:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008032:	2300      	movs	r3, #0
  
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	20000004 	.word	0x20000004
 8008044:	10624dd3 	.word	0x10624dd3

08008048 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800804c:	4904      	ldr	r1, [pc, #16]	; (8008060 <MX_FATFS_Init+0x18>)
 800804e:	4805      	ldr	r0, [pc, #20]	; (8008064 <MX_FATFS_Init+0x1c>)
 8008050:	f002 fd92 	bl	800ab78 <FATFS_LinkDriver>
 8008054:	4603      	mov	r3, r0
 8008056:	461a      	mov	r2, r3
 8008058:	4b03      	ldr	r3, [pc, #12]	; (8008068 <MX_FATFS_Init+0x20>)
 800805a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800805c:	bf00      	nop
 800805e:	bd80      	pop	{r7, pc}
 8008060:	2000885c 	.word	0x2000885c
 8008064:	0802f018 	.word	0x0802f018
 8008068:	20008858 	.word	0x20008858

0800806c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800806c:	b480      	push	{r7}
 800806e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008070:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008072:	4618      	mov	r0, r3
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008086:	f000 f896 	bl	80081b6 <BSP_SD_IsDetected>
 800808a:	4603      	mov	r3, r0
 800808c:	2b01      	cmp	r3, #1
 800808e:	d001      	beq.n	8008094 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e012      	b.n	80080ba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008094:	480b      	ldr	r0, [pc, #44]	; (80080c4 <BSP_SD_Init+0x48>)
 8008096:	f7fc fc0f 	bl	80048b8 <HAL_SD_Init>
 800809a:	4603      	mov	r3, r0
 800809c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800809e:	79fb      	ldrb	r3, [r7, #7]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d109      	bne.n	80080b8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80080a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80080a8:	4806      	ldr	r0, [pc, #24]	; (80080c4 <BSP_SD_Init+0x48>)
 80080aa:	f7fd f9db 	bl	8005464 <HAL_SD_ConfigWideBusOperation>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80080b8:	79fb      	ldrb	r3, [r7, #7]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	200086bc 	.word	0x200086bc

080080c8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	68f9      	ldr	r1, [r7, #12]
 80080de:	4806      	ldr	r0, [pc, #24]	; (80080f8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80080e0:	f7fc fc98 	bl	8004a14 <HAL_SD_ReadBlocks_DMA>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3718      	adds	r7, #24
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	200086bc 	.word	0x200086bc

080080fc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	68f9      	ldr	r1, [r7, #12]
 8008112:	4806      	ldr	r0, [pc, #24]	; (800812c <BSP_SD_WriteBlocks_DMA+0x30>)
 8008114:	f7fc fd60 	bl	8004bd8 <HAL_SD_WriteBlocks_DMA>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008122:	7dfb      	ldrb	r3, [r7, #23]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3718      	adds	r7, #24
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	200086bc 	.word	0x200086bc

08008130 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008134:	4805      	ldr	r0, [pc, #20]	; (800814c <BSP_SD_GetCardState+0x1c>)
 8008136:	f7fd fa2f 	bl	8005598 <HAL_SD_GetCardState>
 800813a:	4603      	mov	r3, r0
 800813c:	2b04      	cmp	r3, #4
 800813e:	bf14      	ite	ne
 8008140:	2301      	movne	r3, #1
 8008142:	2300      	moveq	r3, #0
 8008144:	b2db      	uxtb	r3, r3
}
 8008146:	4618      	mov	r0, r3
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	200086bc 	.word	0x200086bc

08008150 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	4803      	ldr	r0, [pc, #12]	; (8008168 <BSP_SD_GetCardInfo+0x18>)
 800815c:	f7fd f956 	bl	800540c <HAL_SD_GetCardInfo>
}
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	200086bc 	.word	0x200086bc

0800816c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008174:	f000 f818 	bl	80081a8 <BSP_SD_AbortCallback>
}
 8008178:	bf00      	nop
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008188:	f000 f998 	bl	80084bc <BSP_SD_WriteCpltCallback>
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800819c:	f000 f9a0 	bl	80084e0 <BSP_SD_ReadCpltCallback>
}
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80081a8:	b480      	push	{r7}
 80081aa:	af00      	add	r7, sp, #0

}
 80081ac:	bf00      	nop
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b083      	sub	sp, #12
 80081ba:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80081bc:	2301      	movs	r3, #1
 80081be:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80081c0:	79fb      	ldrb	r3, [r7, #7]
 80081c2:	b2db      	uxtb	r3, r3
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80081d8:	f002 fdd4 	bl	800ad84 <osKernelGetTickCount>
 80081dc:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80081de:	e006      	b.n	80081ee <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80081e0:	f7ff ffa6 	bl	8008130 <BSP_SD_GetCardState>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80081ea:	2300      	movs	r3, #0
 80081ec:	e009      	b.n	8008202 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80081ee:	f002 fdc9 	bl	800ad84 <osKernelGetTickCount>
 80081f2:	4602      	mov	r2, r0
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d8f0      	bhi.n	80081e0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80081fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
	...

0800820c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008216:	4b0b      	ldr	r3, [pc, #44]	; (8008244 <SD_CheckStatus+0x38>)
 8008218:	2201      	movs	r2, #1
 800821a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800821c:	f7ff ff88 	bl	8008130 <BSP_SD_GetCardState>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d107      	bne.n	8008236 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008226:	4b07      	ldr	r3, [pc, #28]	; (8008244 <SD_CheckStatus+0x38>)
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	b2db      	uxtb	r3, r3
 800822c:	f023 0301 	bic.w	r3, r3, #1
 8008230:	b2da      	uxtb	r2, r3
 8008232:	4b04      	ldr	r3, [pc, #16]	; (8008244 <SD_CheckStatus+0x38>)
 8008234:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008236:	4b03      	ldr	r3, [pc, #12]	; (8008244 <SD_CheckStatus+0x38>)
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	b2db      	uxtb	r3, r3
}
 800823c:	4618      	mov	r0, r3
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	2000000d 	.word	0x2000000d

08008248 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	4603      	mov	r3, r0
 8008250:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008252:	4b1c      	ldr	r3, [pc, #112]	; (80082c4 <SD_initialize+0x7c>)
 8008254:	2201      	movs	r2, #1
 8008256:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8008258:	f002 fd4c 	bl	800acf4 <osKernelGetState>
 800825c:	4603      	mov	r3, r0
 800825e:	2b02      	cmp	r3, #2
 8008260:	d129      	bne.n	80082b6 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8008262:	f7ff ff0b 	bl	800807c <BSP_SD_Init>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d107      	bne.n	800827c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	4618      	mov	r0, r3
 8008270:	f7ff ffcc 	bl	800820c <SD_CheckStatus>
 8008274:	4603      	mov	r3, r0
 8008276:	461a      	mov	r2, r3
 8008278:	4b12      	ldr	r3, [pc, #72]	; (80082c4 <SD_initialize+0x7c>)
 800827a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800827c:	4b11      	ldr	r3, [pc, #68]	; (80082c4 <SD_initialize+0x7c>)
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b01      	cmp	r3, #1
 8008284:	d017      	beq.n	80082b6 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8008286:	4b10      	ldr	r3, [pc, #64]	; (80082c8 <SD_initialize+0x80>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d107      	bne.n	800829e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800828e:	2200      	movs	r2, #0
 8008290:	2102      	movs	r1, #2
 8008292:	200a      	movs	r0, #10
 8008294:	f002 ff9c 	bl	800b1d0 <osMessageQueueNew>
 8008298:	4603      	mov	r3, r0
 800829a:	4a0b      	ldr	r2, [pc, #44]	; (80082c8 <SD_initialize+0x80>)
 800829c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800829e:	4b0a      	ldr	r3, [pc, #40]	; (80082c8 <SD_initialize+0x80>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d107      	bne.n	80082b6 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80082a6:	4b07      	ldr	r3, [pc, #28]	; (80082c4 <SD_initialize+0x7c>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	f043 0301 	orr.w	r3, r3, #1
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	4b04      	ldr	r3, [pc, #16]	; (80082c4 <SD_initialize+0x7c>)
 80082b4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80082b6:	4b03      	ldr	r3, [pc, #12]	; (80082c4 <SD_initialize+0x7c>)
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	b2db      	uxtb	r3, r3
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	2000000d 	.word	0x2000000d
 80082c8:	20000120 	.word	0x20000120

080082cc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4603      	mov	r3, r0
 80082d4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80082d6:	79fb      	ldrb	r3, [r7, #7]
 80082d8:	4618      	mov	r0, r3
 80082da:	f7ff ff97 	bl	800820c <SD_CheckStatus>
 80082de:	4603      	mov	r3, r0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b088      	sub	sp, #32
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	607a      	str	r2, [r7, #4]
 80082f2:	603b      	str	r3, [r7, #0]
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80082fc:	f247 5030 	movw	r0, #30000	; 0x7530
 8008300:	f7ff ff66 	bl	80081d0 <SD_CheckStatusWithTimeout>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	da01      	bge.n	800830e <SD_read+0x26>
  {
    return res;
 800830a:	7ffb      	ldrb	r3, [r7, #31]
 800830c:	e02f      	b.n	800836e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	68b8      	ldr	r0, [r7, #8]
 8008314:	f7ff fed8 	bl	80080c8 <BSP_SD_ReadBlocks_DMA>
 8008318:	4603      	mov	r3, r0
 800831a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800831c:	7fbb      	ldrb	r3, [r7, #30]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d124      	bne.n	800836c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8008322:	4b15      	ldr	r3, [pc, #84]	; (8008378 <SD_read+0x90>)
 8008324:	6818      	ldr	r0, [r3, #0]
 8008326:	f107 0112 	add.w	r1, r7, #18
 800832a:	f247 5330 	movw	r3, #30000	; 0x7530
 800832e:	2200      	movs	r2, #0
 8008330:	f003 f822 	bl	800b378 <osMessageQueueGet>
 8008334:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d117      	bne.n	800836c <SD_read+0x84>
 800833c:	8a7b      	ldrh	r3, [r7, #18]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d114      	bne.n	800836c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8008342:	f002 fd1f 	bl	800ad84 <osKernelGetTickCount>
 8008346:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8008348:	e007      	b.n	800835a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800834a:	f7ff fef1 	bl	8008130 <BSP_SD_GetCardState>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d102      	bne.n	800835a <SD_read+0x72>
              {
                res = RES_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8008358:	e008      	b.n	800836c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800835a:	f002 fd13 	bl	800ad84 <osKernelGetTickCount>
 800835e:	4602      	mov	r2, r0
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	f247 522f 	movw	r2, #29999	; 0x752f
 8008368:	4293      	cmp	r3, r2
 800836a:	d9ee      	bls.n	800834a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800836c:	7ffb      	ldrb	r3, [r7, #31]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3720      	adds	r7, #32
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20000120 	.word	0x20000120

0800837c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b088      	sub	sp, #32
 8008380:	af00      	add	r7, sp, #0
 8008382:	60b9      	str	r1, [r7, #8]
 8008384:	607a      	str	r2, [r7, #4]
 8008386:	603b      	str	r3, [r7, #0]
 8008388:	4603      	mov	r3, r0
 800838a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008390:	f247 5030 	movw	r0, #30000	; 0x7530
 8008394:	f7ff ff1c 	bl	80081d0 <SD_CheckStatusWithTimeout>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	da01      	bge.n	80083a2 <SD_write+0x26>
  {
    return res;
 800839e:	7ffb      	ldrb	r3, [r7, #31]
 80083a0:	e02d      	b.n	80083fe <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	6879      	ldr	r1, [r7, #4]
 80083a6:	68b8      	ldr	r0, [r7, #8]
 80083a8:	f7ff fea8 	bl	80080fc <BSP_SD_WriteBlocks_DMA>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d124      	bne.n	80083fc <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80083b2:	4b15      	ldr	r3, [pc, #84]	; (8008408 <SD_write+0x8c>)
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	f107 0112 	add.w	r1, r7, #18
 80083ba:	f247 5330 	movw	r3, #30000	; 0x7530
 80083be:	2200      	movs	r2, #0
 80083c0:	f002 ffda 	bl	800b378 <osMessageQueueGet>
 80083c4:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d117      	bne.n	80083fc <SD_write+0x80>
 80083cc:	8a7b      	ldrh	r3, [r7, #18]
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d114      	bne.n	80083fc <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80083d2:	f002 fcd7 	bl	800ad84 <osKernelGetTickCount>
 80083d6:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80083d8:	e007      	b.n	80083ea <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80083da:	f7ff fea9 	bl	8008130 <BSP_SD_GetCardState>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d102      	bne.n	80083ea <SD_write+0x6e>
          {
            res = RES_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	77fb      	strb	r3, [r7, #31]
            break;
 80083e8:	e008      	b.n	80083fc <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80083ea:	f002 fccb 	bl	800ad84 <osKernelGetTickCount>
 80083ee:	4602      	mov	r2, r0
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	f247 522f 	movw	r2, #29999	; 0x752f
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d9ee      	bls.n	80083da <SD_write+0x5e>
    }

  }
#endif

  return res;
 80083fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3720      	adds	r7, #32
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000120 	.word	0x20000120

0800840c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08c      	sub	sp, #48	; 0x30
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	603a      	str	r2, [r7, #0]
 8008416:	71fb      	strb	r3, [r7, #7]
 8008418:	460b      	mov	r3, r1
 800841a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008422:	4b25      	ldr	r3, [pc, #148]	; (80084b8 <SD_ioctl+0xac>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	b2db      	uxtb	r3, r3
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <SD_ioctl+0x28>
 8008430:	2303      	movs	r3, #3
 8008432:	e03c      	b.n	80084ae <SD_ioctl+0xa2>

  switch (cmd)
 8008434:	79bb      	ldrb	r3, [r7, #6]
 8008436:	2b03      	cmp	r3, #3
 8008438:	d834      	bhi.n	80084a4 <SD_ioctl+0x98>
 800843a:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <SD_ioctl+0x34>)
 800843c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008440:	08008451 	.word	0x08008451
 8008444:	08008459 	.word	0x08008459
 8008448:	08008471 	.word	0x08008471
 800844c:	0800848b 	.word	0x0800848b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008456:	e028      	b.n	80084aa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008458:	f107 030c 	add.w	r3, r7, #12
 800845c:	4618      	mov	r0, r3
 800845e:	f7ff fe77 	bl	8008150 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800846e:	e01c      	b.n	80084aa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008470:	f107 030c 	add.w	r3, r7, #12
 8008474:	4618      	mov	r0, r3
 8008476:	f7ff fe6b 	bl	8008150 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	b29a      	uxth	r2, r3
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008488:	e00f      	b.n	80084aa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800848a:	f107 030c 	add.w	r3, r7, #12
 800848e:	4618      	mov	r0, r3
 8008490:	f7ff fe5e 	bl	8008150 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008496:	0a5a      	lsrs	r2, r3, #9
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80084a2:	e002      	b.n	80084aa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80084a4:	2304      	movs	r3, #4
 80084a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80084aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3730      	adds	r7, #48	; 0x30
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	2000000d 	.word	0x2000000d

080084bc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80084c2:	2302      	movs	r3, #2
 80084c4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80084c6:	4b05      	ldr	r3, [pc, #20]	; (80084dc <BSP_SD_WriteCpltCallback+0x20>)
 80084c8:	6818      	ldr	r0, [r3, #0]
 80084ca:	1db9      	adds	r1, r7, #6
 80084cc:	2300      	movs	r3, #0
 80084ce:	2200      	movs	r2, #0
 80084d0:	f002 fef2 	bl	800b2b8 <osMessageQueuePut>
#endif
}
 80084d4:	bf00      	nop
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	20000120 	.word	0x20000120

080084e0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80084e6:	2301      	movs	r3, #1
 80084e8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80084ea:	4b05      	ldr	r3, [pc, #20]	; (8008500 <BSP_SD_ReadCpltCallback+0x20>)
 80084ec:	6818      	ldr	r0, [r3, #0]
 80084ee:	1db9      	adds	r1, r7, #6
 80084f0:	2300      	movs	r3, #0
 80084f2:	2200      	movs	r2, #0
 80084f4:	f002 fee0 	bl	800b2b8 <osMessageQueuePut>
#endif
}
 80084f8:	bf00      	nop
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	20000120 	.word	0x20000120

08008504 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	4603      	mov	r3, r0
 800850c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800850e:	79fb      	ldrb	r3, [r7, #7]
 8008510:	4a08      	ldr	r2, [pc, #32]	; (8008534 <disk_status+0x30>)
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	4413      	add	r3, r2
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	79fa      	ldrb	r2, [r7, #7]
 800851c:	4905      	ldr	r1, [pc, #20]	; (8008534 <disk_status+0x30>)
 800851e:	440a      	add	r2, r1
 8008520:	7a12      	ldrb	r2, [r2, #8]
 8008522:	4610      	mov	r0, r2
 8008524:	4798      	blx	r3
 8008526:	4603      	mov	r3, r0
 8008528:	73fb      	strb	r3, [r7, #15]
  return stat;
 800852a:	7bfb      	ldrb	r3, [r7, #15]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	2000014c 	.word	0x2000014c

08008538 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	73fb      	strb	r3, [r7, #15]

    if(disk.is_initialized[pdrv] == 0)
 8008546:	79fb      	ldrb	r3, [r7, #7]
 8008548:	4a0d      	ldr	r2, [pc, #52]	; (8008580 <disk_initialize+0x48>)
 800854a:	5cd3      	ldrb	r3, [r2, r3]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d111      	bne.n	8008574 <disk_initialize+0x3c>
    {
      disk.is_initialized[pdrv] = 1;
 8008550:	79fb      	ldrb	r3, [r7, #7]
 8008552:	4a0b      	ldr	r2, [pc, #44]	; (8008580 <disk_initialize+0x48>)
 8008554:	2101      	movs	r1, #1
 8008556:	54d1      	strb	r1, [r2, r3]
      stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	4a09      	ldr	r2, [pc, #36]	; (8008580 <disk_initialize+0x48>)
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	79fa      	ldrb	r2, [r7, #7]
 8008566:	4906      	ldr	r1, [pc, #24]	; (8008580 <disk_initialize+0x48>)
 8008568:	440a      	add	r2, r1
 800856a:	7a12      	ldrb	r2, [r2, #8]
 800856c:	4610      	mov	r0, r2
 800856e:	4798      	blx	r3
 8008570:	4603      	mov	r3, r0
 8008572:	73fb      	strb	r3, [r7, #15]
    }
    return stat;
 8008574:	7bfb      	ldrb	r3, [r7, #15]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	2000014c 	.word	0x2000014c

08008584 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008584:	b590      	push	{r4, r7, lr}
 8008586:	b087      	sub	sp, #28
 8008588:	af00      	add	r7, sp, #0
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	607a      	str	r2, [r7, #4]
 800858e:	603b      	str	r3, [r7, #0]
 8008590:	4603      	mov	r3, r0
 8008592:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	4a0a      	ldr	r2, [pc, #40]	; (80085c0 <disk_read+0x3c>)
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	689c      	ldr	r4, [r3, #8]
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
 80085a2:	4a07      	ldr	r2, [pc, #28]	; (80085c0 <disk_read+0x3c>)
 80085a4:	4413      	add	r3, r2
 80085a6:	7a18      	ldrb	r0, [r3, #8]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	47a0      	blx	r4
 80085b0:	4603      	mov	r3, r0
 80085b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd90      	pop	{r4, r7, pc}
 80085be:	bf00      	nop
 80085c0:	2000014c 	.word	0x2000014c

080085c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80085c4:	b590      	push	{r4, r7, lr}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	607a      	str	r2, [r7, #4]
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	4603      	mov	r3, r0
 80085d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
 80085d6:	4a0a      	ldr	r2, [pc, #40]	; (8008600 <disk_write+0x3c>)
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	68dc      	ldr	r4, [r3, #12]
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
 80085e2:	4a07      	ldr	r2, [pc, #28]	; (8008600 <disk_write+0x3c>)
 80085e4:	4413      	add	r3, r2
 80085e6:	7a18      	ldrb	r0, [r3, #8]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	68b9      	ldr	r1, [r7, #8]
 80085ee:	47a0      	blx	r4
 80085f0:	4603      	mov	r3, r0
 80085f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	371c      	adds	r7, #28
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd90      	pop	{r4, r7, pc}
 80085fe:	bf00      	nop
 8008600:	2000014c 	.word	0x2000014c

08008604 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	603a      	str	r2, [r7, #0]
 800860e:	71fb      	strb	r3, [r7, #7]
 8008610:	460b      	mov	r3, r1
 8008612:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008614:	79fb      	ldrb	r3, [r7, #7]
 8008616:	4a09      	ldr	r2, [pc, #36]	; (800863c <disk_ioctl+0x38>)
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	79fa      	ldrb	r2, [r7, #7]
 8008622:	4906      	ldr	r1, [pc, #24]	; (800863c <disk_ioctl+0x38>)
 8008624:	440a      	add	r2, r1
 8008626:	7a10      	ldrb	r0, [r2, #8]
 8008628:	79b9      	ldrb	r1, [r7, #6]
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	4798      	blx	r3
 800862e:	4603      	mov	r3, r0
 8008630:	73fb      	strb	r3, [r7, #15]
  return res;
 8008632:	7bfb      	ldrb	r3, [r7, #15]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	2000014c 	.word	0x2000014c

08008640 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	3301      	adds	r3, #1
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008650:	89fb      	ldrh	r3, [r7, #14]
 8008652:	021b      	lsls	r3, r3, #8
 8008654:	b21a      	sxth	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	b21b      	sxth	r3, r3
 800865c:	4313      	orrs	r3, r2
 800865e:	b21b      	sxth	r3, r3
 8008660:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008662:	89fb      	ldrh	r3, [r7, #14]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	3303      	adds	r3, #3
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	021b      	lsls	r3, r3, #8
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	3202      	adds	r2, #2
 8008688:	7812      	ldrb	r2, [r2, #0]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	021b      	lsls	r3, r3, #8
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	3201      	adds	r2, #1
 8008696:	7812      	ldrb	r2, [r2, #0]
 8008698:	4313      	orrs	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	021b      	lsls	r3, r3, #8
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	7812      	ldrb	r2, [r2, #0]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80086a8:	68fb      	ldr	r3, [r7, #12]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80086b6:	b480      	push	{r7}
 80086b8:	b083      	sub	sp, #12
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	460b      	mov	r3, r1
 80086c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	1c5a      	adds	r2, r3, #1
 80086c6:	607a      	str	r2, [r7, #4]
 80086c8:	887a      	ldrh	r2, [r7, #2]
 80086ca:	b2d2      	uxtb	r2, r2
 80086cc:	701a      	strb	r2, [r3, #0]
 80086ce:	887b      	ldrh	r3, [r7, #2]
 80086d0:	0a1b      	lsrs	r3, r3, #8
 80086d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	1c5a      	adds	r2, r3, #1
 80086d8:	607a      	str	r2, [r7, #4]
 80086da:	887a      	ldrh	r2, [r7, #2]
 80086dc:	b2d2      	uxtb	r2, r2
 80086de:	701a      	strb	r2, [r3, #0]
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	607a      	str	r2, [r7, #4]
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	b2d2      	uxtb	r2, r2
 8008700:	701a      	strb	r2, [r3, #0]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	0a1b      	lsrs	r3, r3, #8
 8008706:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	607a      	str	r2, [r7, #4]
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	b2d2      	uxtb	r2, r2
 8008712:	701a      	strb	r2, [r3, #0]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	0a1b      	lsrs	r3, r3, #8
 8008718:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	607a      	str	r2, [r7, #4]
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	b2d2      	uxtb	r2, r2
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	0a1b      	lsrs	r3, r3, #8
 800872a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	607a      	str	r2, [r7, #4]
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	b2d2      	uxtb	r2, r2
 8008736:	701a      	strb	r2, [r3, #0]
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00d      	beq.n	800877a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	1c53      	adds	r3, r2, #1
 8008762:	613b      	str	r3, [r7, #16]
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	1c59      	adds	r1, r3, #1
 8008768:	6179      	str	r1, [r7, #20]
 800876a:	7812      	ldrb	r2, [r2, #0]
 800876c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3b01      	subs	r3, #1
 8008772:	607b      	str	r3, [r7, #4]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1f1      	bne.n	800875e <mem_cpy+0x1a>
	}
}
 800877a:	bf00      	nop
 800877c:	371c      	adds	r7, #28
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008786:	b480      	push	{r7}
 8008788:	b087      	sub	sp, #28
 800878a:	af00      	add	r7, sp, #0
 800878c:	60f8      	str	r0, [r7, #12]
 800878e:	60b9      	str	r1, [r7, #8]
 8008790:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	1c5a      	adds	r2, r3, #1
 800879a:	617a      	str	r2, [r7, #20]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	b2d2      	uxtb	r2, r2
 80087a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	607b      	str	r3, [r7, #4]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1f3      	bne.n	8008796 <mem_set+0x10>
}
 80087ae:	bf00      	nop
 80087b0:	bf00      	nop
 80087b2:	371c      	adds	r7, #28
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80087bc:	b480      	push	{r7}
 80087be:	b089      	sub	sp, #36	; 0x24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	61fb      	str	r3, [r7, #28]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	61fa      	str	r2, [r7, #28]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	4619      	mov	r1, r3
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	61ba      	str	r2, [r7, #24]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	1acb      	subs	r3, r1, r3
 80087e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	3b01      	subs	r3, #1
 80087ee:	607b      	str	r3, [r7, #4]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d002      	beq.n	80087fc <mem_cmp+0x40>
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0eb      	beq.n	80087d4 <mem_cmp+0x18>

	return r;
 80087fc:	697b      	ldr	r3, [r7, #20]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3724      	adds	r7, #36	; 0x24
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800880a:	b480      	push	{r7}
 800880c:	b083      	sub	sp, #12
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008814:	e002      	b.n	800881c <chk_chr+0x12>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	3301      	adds	r3, #1
 800881a:	607b      	str	r3, [r7, #4]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d005      	beq.n	8008830 <chk_chr+0x26>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	461a      	mov	r2, r3
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	4293      	cmp	r3, r2
 800882e:	d1f2      	bne.n	8008816 <chk_chr+0xc>
	return *str;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	781b      	ldrb	r3, [r3, #0]
}
 8008834:	4618      	mov	r0, r3
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d009      	beq.n	8008862 <lock_fs+0x22>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	4618      	mov	r0, r3
 8008854:	f002 f9c6 	bl	800abe4 <ff_req_grant>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <lock_fs+0x22>
 800885e:	2301      	movs	r3, #1
 8008860:	e000      	b.n	8008864 <lock_fs+0x24>
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00d      	beq.n	800889a <unlock_fs+0x2e>
 800887e:	78fb      	ldrb	r3, [r7, #3]
 8008880:	2b0c      	cmp	r3, #12
 8008882:	d00a      	beq.n	800889a <unlock_fs+0x2e>
 8008884:	78fb      	ldrb	r3, [r7, #3]
 8008886:	2b0b      	cmp	r3, #11
 8008888:	d007      	beq.n	800889a <unlock_fs+0x2e>
 800888a:	78fb      	ldrb	r3, [r7, #3]
 800888c:	2b0f      	cmp	r3, #15
 800888e:	d004      	beq.n	800889a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	4618      	mov	r0, r3
 8008896:	f002 f9ba 	bl	800ac0e <ff_rel_grant>
	}
}
 800889a:	bf00      	nop
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80088ae:	2300      	movs	r3, #0
 80088b0:	60bb      	str	r3, [r7, #8]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	60fb      	str	r3, [r7, #12]
 80088b6:	e029      	b.n	800890c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80088b8:	4a27      	ldr	r2, [pc, #156]	; (8008958 <chk_lock+0xb4>)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	011b      	lsls	r3, r3, #4
 80088be:	4413      	add	r3, r2
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01d      	beq.n	8008902 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80088c6:	4a24      	ldr	r2, [pc, #144]	; (8008958 <chk_lock+0xb4>)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	011b      	lsls	r3, r3, #4
 80088cc:	4413      	add	r3, r2
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d116      	bne.n	8008906 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80088d8:	4a1f      	ldr	r2, [pc, #124]	; (8008958 <chk_lock+0xb4>)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	011b      	lsls	r3, r3, #4
 80088de:	4413      	add	r3, r2
 80088e0:	3304      	adds	r3, #4
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d10c      	bne.n	8008906 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80088ec:	4a1a      	ldr	r2, [pc, #104]	; (8008958 <chk_lock+0xb4>)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	011b      	lsls	r3, r3, #4
 80088f2:	4413      	add	r3, r2
 80088f4:	3308      	adds	r3, #8
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d102      	bne.n	8008906 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008900:	e007      	b.n	8008912 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008902:	2301      	movs	r3, #1
 8008904:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	3301      	adds	r3, #1
 800890a:	60fb      	str	r3, [r7, #12]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d9d2      	bls.n	80088b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b02      	cmp	r3, #2
 8008916:	d109      	bne.n	800892c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d102      	bne.n	8008924 <chk_lock+0x80>
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2b02      	cmp	r3, #2
 8008922:	d101      	bne.n	8008928 <chk_lock+0x84>
 8008924:	2300      	movs	r3, #0
 8008926:	e010      	b.n	800894a <chk_lock+0xa6>
 8008928:	2312      	movs	r3, #18
 800892a:	e00e      	b.n	800894a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d108      	bne.n	8008944 <chk_lock+0xa0>
 8008932:	4a09      	ldr	r2, [pc, #36]	; (8008958 <chk_lock+0xb4>)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	011b      	lsls	r3, r3, #4
 8008938:	4413      	add	r3, r2
 800893a:	330c      	adds	r3, #12
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008942:	d101      	bne.n	8008948 <chk_lock+0xa4>
 8008944:	2310      	movs	r3, #16
 8008946:	e000      	b.n	800894a <chk_lock+0xa6>
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3714      	adds	r7, #20
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	2000012c 	.word	0x2000012c

0800895c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008962:	2300      	movs	r3, #0
 8008964:	607b      	str	r3, [r7, #4]
 8008966:	e002      	b.n	800896e <enq_lock+0x12>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	3301      	adds	r3, #1
 800896c:	607b      	str	r3, [r7, #4]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d806      	bhi.n	8008982 <enq_lock+0x26>
 8008974:	4a09      	ldr	r2, [pc, #36]	; (800899c <enq_lock+0x40>)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	011b      	lsls	r3, r3, #4
 800897a:	4413      	add	r3, r2
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1f2      	bne.n	8008968 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b02      	cmp	r3, #2
 8008986:	bf14      	ite	ne
 8008988:	2301      	movne	r3, #1
 800898a:	2300      	moveq	r3, #0
 800898c:	b2db      	uxtb	r3, r3
}
 800898e:	4618      	mov	r0, r3
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	2000012c 	.word	0x2000012c

080089a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80089aa:	2300      	movs	r3, #0
 80089ac:	60fb      	str	r3, [r7, #12]
 80089ae:	e01f      	b.n	80089f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80089b0:	4a41      	ldr	r2, [pc, #260]	; (8008ab8 <inc_lock+0x118>)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	011b      	lsls	r3, r3, #4
 80089b6:	4413      	add	r3, r2
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d113      	bne.n	80089ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80089c2:	4a3d      	ldr	r2, [pc, #244]	; (8008ab8 <inc_lock+0x118>)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	011b      	lsls	r3, r3, #4
 80089c8:	4413      	add	r3, r2
 80089ca:	3304      	adds	r3, #4
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d109      	bne.n	80089ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80089d6:	4a38      	ldr	r2, [pc, #224]	; (8008ab8 <inc_lock+0x118>)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	011b      	lsls	r3, r3, #4
 80089dc:	4413      	add	r3, r2
 80089de:	3308      	adds	r3, #8
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d006      	beq.n	80089f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3301      	adds	r3, #1
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d9dc      	bls.n	80089b0 <inc_lock+0x10>
 80089f6:	e000      	b.n	80089fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80089f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d132      	bne.n	8008a66 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	e002      	b.n	8008a0c <inc_lock+0x6c>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d806      	bhi.n	8008a20 <inc_lock+0x80>
 8008a12:	4a29      	ldr	r2, [pc, #164]	; (8008ab8 <inc_lock+0x118>)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	011b      	lsls	r3, r3, #4
 8008a18:	4413      	add	r3, r2
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1f2      	bne.n	8008a06 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d101      	bne.n	8008a2a <inc_lock+0x8a>
 8008a26:	2300      	movs	r3, #0
 8008a28:	e040      	b.n	8008aac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	4922      	ldr	r1, [pc, #136]	; (8008ab8 <inc_lock+0x118>)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	011b      	lsls	r3, r3, #4
 8008a34:	440b      	add	r3, r1
 8008a36:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689a      	ldr	r2, [r3, #8]
 8008a3c:	491e      	ldr	r1, [pc, #120]	; (8008ab8 <inc_lock+0x118>)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	011b      	lsls	r3, r3, #4
 8008a42:	440b      	add	r3, r1
 8008a44:	3304      	adds	r3, #4
 8008a46:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	695a      	ldr	r2, [r3, #20]
 8008a4c:	491a      	ldr	r1, [pc, #104]	; (8008ab8 <inc_lock+0x118>)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	011b      	lsls	r3, r3, #4
 8008a52:	440b      	add	r3, r1
 8008a54:	3308      	adds	r3, #8
 8008a56:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008a58:	4a17      	ldr	r2, [pc, #92]	; (8008ab8 <inc_lock+0x118>)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	011b      	lsls	r3, r3, #4
 8008a5e:	4413      	add	r3, r2
 8008a60:	330c      	adds	r3, #12
 8008a62:	2200      	movs	r2, #0
 8008a64:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d009      	beq.n	8008a80 <inc_lock+0xe0>
 8008a6c:	4a12      	ldr	r2, [pc, #72]	; (8008ab8 <inc_lock+0x118>)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	011b      	lsls	r3, r3, #4
 8008a72:	4413      	add	r3, r2
 8008a74:	330c      	adds	r3, #12
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <inc_lock+0xe0>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	e015      	b.n	8008aac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d108      	bne.n	8008a98 <inc_lock+0xf8>
 8008a86:	4a0c      	ldr	r2, [pc, #48]	; (8008ab8 <inc_lock+0x118>)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	011b      	lsls	r3, r3, #4
 8008a8c:	4413      	add	r3, r2
 8008a8e:	330c      	adds	r3, #12
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	3301      	adds	r3, #1
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	e001      	b.n	8008a9c <inc_lock+0xfc>
 8008a98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a9c:	4906      	ldr	r1, [pc, #24]	; (8008ab8 <inc_lock+0x118>)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	011b      	lsls	r3, r3, #4
 8008aa2:	440b      	add	r3, r1
 8008aa4:	330c      	adds	r3, #12
 8008aa6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	3301      	adds	r3, #1
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr
 8008ab8:	2000012c 	.word	0x2000012c

08008abc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	607b      	str	r3, [r7, #4]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d825      	bhi.n	8008b1c <dec_lock+0x60>
		n = Files[i].ctr;
 8008ad0:	4a17      	ldr	r2, [pc, #92]	; (8008b30 <dec_lock+0x74>)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	011b      	lsls	r3, r3, #4
 8008ad6:	4413      	add	r3, r2
 8008ad8:	330c      	adds	r3, #12
 8008ada:	881b      	ldrh	r3, [r3, #0]
 8008adc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008ade:	89fb      	ldrh	r3, [r7, #14]
 8008ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ae4:	d101      	bne.n	8008aea <dec_lock+0x2e>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008aea:	89fb      	ldrh	r3, [r7, #14]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <dec_lock+0x3a>
 8008af0:	89fb      	ldrh	r3, [r7, #14]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008af6:	4a0e      	ldr	r2, [pc, #56]	; (8008b30 <dec_lock+0x74>)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	011b      	lsls	r3, r3, #4
 8008afc:	4413      	add	r3, r2
 8008afe:	330c      	adds	r3, #12
 8008b00:	89fa      	ldrh	r2, [r7, #14]
 8008b02:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008b04:	89fb      	ldrh	r3, [r7, #14]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d105      	bne.n	8008b16 <dec_lock+0x5a>
 8008b0a:	4a09      	ldr	r2, [pc, #36]	; (8008b30 <dec_lock+0x74>)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	011b      	lsls	r3, r3, #4
 8008b10:	4413      	add	r3, r2
 8008b12:	2200      	movs	r2, #0
 8008b14:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	737b      	strb	r3, [r7, #13]
 8008b1a:	e001      	b.n	8008b20 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008b20:	7b7b      	ldrb	r3, [r7, #13]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	2000012c 	.word	0x2000012c

08008b34 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	60fb      	str	r3, [r7, #12]
 8008b40:	e010      	b.n	8008b64 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008b42:	4a0d      	ldr	r2, [pc, #52]	; (8008b78 <clear_lock+0x44>)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	011b      	lsls	r3, r3, #4
 8008b48:	4413      	add	r3, r2
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d105      	bne.n	8008b5e <clear_lock+0x2a>
 8008b52:	4a09      	ldr	r2, [pc, #36]	; (8008b78 <clear_lock+0x44>)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	011b      	lsls	r3, r3, #4
 8008b58:	4413      	add	r3, r2
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3301      	adds	r3, #1
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d9eb      	bls.n	8008b42 <clear_lock+0xe>
	}
}
 8008b6a:	bf00      	nop
 8008b6c:	bf00      	nop
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	2000012c 	.word	0x2000012c

08008b7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	78db      	ldrb	r3, [r3, #3]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d034      	beq.n	8008bfa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b94:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	7858      	ldrb	r0, [r3, #1]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	f7ff fd0e 	bl	80085c4 <disk_write>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d002      	beq.n	8008bb4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	73fb      	strb	r3, [r7, #15]
 8008bb2:	e022      	b.n	8008bfa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	1ad2      	subs	r2, r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d217      	bcs.n	8008bfa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	789b      	ldrb	r3, [r3, #2]
 8008bce:	613b      	str	r3, [r7, #16]
 8008bd0:	e010      	b.n	8008bf4 <sync_window+0x78>
					wsect += fs->fsize;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	4413      	add	r3, r2
 8008bda:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	7858      	ldrb	r0, [r3, #1]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008be6:	2301      	movs	r3, #1
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	f7ff fceb 	bl	80085c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	613b      	str	r3, [r7, #16]
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d8eb      	bhi.n	8008bd2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d01b      	beq.n	8008c54 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7ff ffad 	bl	8008b7c <sync_window>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d113      	bne.n	8008c54 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	7858      	ldrb	r0, [r3, #1]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008c36:	2301      	movs	r3, #1
 8008c38:	683a      	ldr	r2, [r7, #0]
 8008c3a:	f7ff fca3 	bl	8008584 <disk_read>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d004      	beq.n	8008c4e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008c44:	f04f 33ff 	mov.w	r3, #4294967295
 8008c48:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
	...

08008c60 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff ff87 	bl	8008b7c <sync_window>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d159      	bne.n	8008d2c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	d149      	bne.n	8008d14 <sync_fs+0xb4>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	791b      	ldrb	r3, [r3, #4]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d145      	bne.n	8008d14 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	899b      	ldrh	r3, [r3, #12]
 8008c92:	461a      	mov	r2, r3
 8008c94:	2100      	movs	r1, #0
 8008c96:	f7ff fd76 	bl	8008786 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3338      	adds	r3, #56	; 0x38
 8008c9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ca2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7ff fd05 	bl	80086b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3338      	adds	r3, #56	; 0x38
 8008cb0:	4921      	ldr	r1, [pc, #132]	; (8008d38 <sync_fs+0xd8>)
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7ff fd1a 	bl	80086ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3338      	adds	r3, #56	; 0x38
 8008cbc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008cc0:	491e      	ldr	r1, [pc, #120]	; (8008d3c <sync_fs+0xdc>)
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff fd12 	bl	80086ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3338      	adds	r3, #56	; 0x38
 8008ccc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	f7ff fd08 	bl	80086ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3338      	adds	r3, #56	; 0x38
 8008ce0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	4619      	mov	r1, r3
 8008cea:	4610      	mov	r0, r2
 8008cec:	f7ff fcfe 	bl	80086ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf4:	1c5a      	adds	r2, r3, #1
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	7858      	ldrb	r0, [r3, #1]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d08:	2301      	movs	r3, #1
 8008d0a:	f7ff fc5b 	bl	80085c4 <disk_write>
			fs->fsi_flag = 0;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	785b      	ldrb	r3, [r3, #1]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7ff fc71 	bl	8008604 <disk_ioctl>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <sync_fs+0xcc>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	41615252 	.word	0x41615252
 8008d3c:	61417272 	.word	0x61417272

08008d40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	3b02      	subs	r3, #2
 8008d4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	3b02      	subs	r3, #2
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d301      	bcc.n	8008d60 <clust2sect+0x20>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	e008      	b.n	8008d72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	895b      	ldrh	r3, [r3, #10]
 8008d64:	461a      	mov	r2, r3
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	fb03 f202 	mul.w	r2, r3, r2
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d70:	4413      	add	r3, r2
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b086      	sub	sp, #24
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d904      	bls.n	8008d9e <get_fat+0x20>
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	683a      	ldr	r2, [r7, #0]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d302      	bcc.n	8008da4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008d9e:	2301      	movs	r3, #1
 8008da0:	617b      	str	r3, [r7, #20]
 8008da2:	e0bb      	b.n	8008f1c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008da4:	f04f 33ff 	mov.w	r3, #4294967295
 8008da8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	f000 8083 	beq.w	8008eba <get_fat+0x13c>
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	f300 80a7 	bgt.w	8008f08 <get_fat+0x18a>
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d002      	beq.n	8008dc4 <get_fat+0x46>
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d056      	beq.n	8008e70 <get_fat+0xf2>
 8008dc2:	e0a1      	b.n	8008f08 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	60fb      	str	r3, [r7, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	085b      	lsrs	r3, r3, #1
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	4413      	add	r3, r2
 8008dd0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	899b      	ldrh	r3, [r3, #12]
 8008dda:	4619      	mov	r1, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8008de2:	4413      	add	r3, r2
 8008de4:	4619      	mov	r1, r3
 8008de6:	6938      	ldr	r0, [r7, #16]
 8008de8:	f7ff ff0c 	bl	8008c04 <move_window>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f040 808d 	bne.w	8008f0e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	60fa      	str	r2, [r7, #12]
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	8992      	ldrh	r2, [r2, #12]
 8008dfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e02:	fb02 f201 	mul.w	r2, r2, r1
 8008e06:	1a9b      	subs	r3, r3, r2
 8008e08:	693a      	ldr	r2, [r7, #16]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e10:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	899b      	ldrh	r3, [r3, #12]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e22:	4413      	add	r3, r2
 8008e24:	4619      	mov	r1, r3
 8008e26:	6938      	ldr	r0, [r7, #16]
 8008e28:	f7ff feec 	bl	8008c04 <move_window>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d16f      	bne.n	8008f12 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	899b      	ldrh	r3, [r3, #12]
 8008e36:	461a      	mov	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e3e:	fb02 f201 	mul.w	r2, r2, r1
 8008e42:	1a9b      	subs	r3, r3, r2
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	4413      	add	r3, r2
 8008e48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e4c:	021b      	lsls	r3, r3, #8
 8008e4e:	461a      	mov	r2, r3
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	f003 0301 	and.w	r3, r3, #1
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <get_fat+0xe8>
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	091b      	lsrs	r3, r3, #4
 8008e64:	e002      	b.n	8008e6c <get_fat+0xee>
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e6c:	617b      	str	r3, [r7, #20]
			break;
 8008e6e:	e055      	b.n	8008f1c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	899b      	ldrh	r3, [r3, #12]
 8008e78:	085b      	lsrs	r3, r3, #1
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e84:	4413      	add	r3, r2
 8008e86:	4619      	mov	r1, r3
 8008e88:	6938      	ldr	r0, [r7, #16]
 8008e8a:	f7ff febb 	bl	8008c04 <move_window>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d140      	bne.n	8008f16 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	005b      	lsls	r3, r3, #1
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	8992      	ldrh	r2, [r2, #12]
 8008ea2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ea6:	fb02 f200 	mul.w	r2, r2, r0
 8008eaa:	1a9b      	subs	r3, r3, r2
 8008eac:	440b      	add	r3, r1
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7ff fbc6 	bl	8008640 <ld_word>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	617b      	str	r3, [r7, #20]
			break;
 8008eb8:	e030      	b.n	8008f1c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	899b      	ldrh	r3, [r3, #12]
 8008ec2:	089b      	lsrs	r3, r3, #2
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ece:	4413      	add	r3, r2
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6938      	ldr	r0, [r7, #16]
 8008ed4:	f7ff fe96 	bl	8008c04 <move_window>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d11d      	bne.n	8008f1a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	8992      	ldrh	r2, [r2, #12]
 8008eec:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ef0:	fb02 f200 	mul.w	r2, r2, r0
 8008ef4:	1a9b      	subs	r3, r3, r2
 8008ef6:	440b      	add	r3, r1
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff fbb9 	bl	8008670 <ld_dword>
 8008efe:	4603      	mov	r3, r0
 8008f00:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008f04:	617b      	str	r3, [r7, #20]
			break;
 8008f06:	e009      	b.n	8008f1c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008f08:	2301      	movs	r3, #1
 8008f0a:	617b      	str	r3, [r7, #20]
 8008f0c:	e006      	b.n	8008f1c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f0e:	bf00      	nop
 8008f10:	e004      	b.n	8008f1c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f12:	bf00      	nop
 8008f14:	e002      	b.n	8008f1c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008f16:	bf00      	nop
 8008f18:	e000      	b.n	8008f1c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008f1a:	bf00      	nop
		}
	}

	return val;
 8008f1c:	697b      	ldr	r3, [r7, #20]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008f26:	b590      	push	{r4, r7, lr}
 8008f28:	b089      	sub	sp, #36	; 0x24
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008f32:	2302      	movs	r3, #2
 8008f34:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	f240 8102 	bls.w	8009142 <put_fat+0x21c>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	f080 80fc 	bcs.w	8009142 <put_fat+0x21c>
		switch (fs->fs_type) {
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	f000 80b6 	beq.w	80090c0 <put_fat+0x19a>
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	f300 80fd 	bgt.w	8009154 <put_fat+0x22e>
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d003      	beq.n	8008f66 <put_fat+0x40>
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	f000 8083 	beq.w	800906a <put_fat+0x144>
 8008f64:	e0f6      	b.n	8009154 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	61bb      	str	r3, [r7, #24]
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	085b      	lsrs	r3, r3, #1
 8008f6e:	69ba      	ldr	r2, [r7, #24]
 8008f70:	4413      	add	r3, r2
 8008f72:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	899b      	ldrh	r3, [r3, #12]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f84:	4413      	add	r3, r2
 8008f86:	4619      	mov	r1, r3
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f7ff fe3b 	bl	8008c04 <move_window>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f92:	7ffb      	ldrb	r3, [r7, #31]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f040 80d6 	bne.w	8009146 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	1c5a      	adds	r2, r3, #1
 8008fa4:	61ba      	str	r2, [r7, #24]
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	8992      	ldrh	r2, [r2, #12]
 8008faa:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fae:	fb02 f200 	mul.w	r2, r2, r0
 8008fb2:	1a9b      	subs	r3, r3, r2
 8008fb4:	440b      	add	r3, r1
 8008fb6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00d      	beq.n	8008fde <put_fat+0xb8>
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	b25b      	sxtb	r3, r3
 8008fc8:	f003 030f 	and.w	r3, r3, #15
 8008fcc:	b25a      	sxtb	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	011b      	lsls	r3, r3, #4
 8008fd4:	b25b      	sxtb	r3, r3
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	b25b      	sxtb	r3, r3
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	e001      	b.n	8008fe2 <put_fat+0xbc>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	899b      	ldrh	r3, [r3, #12]
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ffc:	4413      	add	r3, r2
 8008ffe:	4619      	mov	r1, r3
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f7ff fdff 	bl	8008c04 <move_window>
 8009006:	4603      	mov	r3, r0
 8009008:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800900a:	7ffb      	ldrb	r3, [r7, #31]
 800900c:	2b00      	cmp	r3, #0
 800900e:	f040 809c 	bne.w	800914a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	899b      	ldrh	r3, [r3, #12]
 800901c:	461a      	mov	r2, r3
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	fbb3 f0f2 	udiv	r0, r3, r2
 8009024:	fb02 f200 	mul.w	r2, r2, r0
 8009028:	1a9b      	subs	r3, r3, r2
 800902a:	440b      	add	r3, r1
 800902c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	2b00      	cmp	r3, #0
 8009036:	d003      	beq.n	8009040 <put_fat+0x11a>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	091b      	lsrs	r3, r3, #4
 800903c:	b2db      	uxtb	r3, r3
 800903e:	e00e      	b.n	800905e <put_fat+0x138>
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	b25b      	sxtb	r3, r3
 8009046:	f023 030f 	bic.w	r3, r3, #15
 800904a:	b25a      	sxtb	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	0a1b      	lsrs	r3, r3, #8
 8009050:	b25b      	sxtb	r3, r3
 8009052:	f003 030f 	and.w	r3, r3, #15
 8009056:	b25b      	sxtb	r3, r3
 8009058:	4313      	orrs	r3, r2
 800905a:	b25b      	sxtb	r3, r3
 800905c:	b2db      	uxtb	r3, r3
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2201      	movs	r2, #1
 8009066:	70da      	strb	r2, [r3, #3]
			break;
 8009068:	e074      	b.n	8009154 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	899b      	ldrh	r3, [r3, #12]
 8009072:	085b      	lsrs	r3, r3, #1
 8009074:	b29b      	uxth	r3, r3
 8009076:	4619      	mov	r1, r3
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	fbb3 f3f1 	udiv	r3, r3, r1
 800907e:	4413      	add	r3, r2
 8009080:	4619      	mov	r1, r3
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f7ff fdbe 	bl	8008c04 <move_window>
 8009088:	4603      	mov	r3, r0
 800908a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800908c:	7ffb      	ldrb	r3, [r7, #31]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d15d      	bne.n	800914e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	005b      	lsls	r3, r3, #1
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	8992      	ldrh	r2, [r2, #12]
 80090a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80090a4:	fb02 f200 	mul.w	r2, r2, r0
 80090a8:	1a9b      	subs	r3, r3, r2
 80090aa:	440b      	add	r3, r1
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	b292      	uxth	r2, r2
 80090b0:	4611      	mov	r1, r2
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff faff 	bl	80086b6 <st_word>
			fs->wflag = 1;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2201      	movs	r2, #1
 80090bc:	70da      	strb	r2, [r3, #3]
			break;
 80090be:	e049      	b.n	8009154 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	899b      	ldrh	r3, [r3, #12]
 80090c8:	089b      	lsrs	r3, r3, #2
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	4619      	mov	r1, r3
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80090d4:	4413      	add	r3, r2
 80090d6:	4619      	mov	r1, r3
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f7ff fd93 	bl	8008c04 <move_window>
 80090de:	4603      	mov	r3, r0
 80090e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80090e2:	7ffb      	ldrb	r3, [r7, #31]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d134      	bne.n	8009152 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	8992      	ldrh	r2, [r2, #12]
 80090fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8009100:	fb02 f200 	mul.w	r2, r2, r0
 8009104:	1a9b      	subs	r3, r3, r2
 8009106:	440b      	add	r3, r1
 8009108:	4618      	mov	r0, r3
 800910a:	f7ff fab1 	bl	8008670 <ld_dword>
 800910e:	4603      	mov	r3, r0
 8009110:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009114:	4323      	orrs	r3, r4
 8009116:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	8992      	ldrh	r2, [r2, #12]
 8009126:	fbb3 f0f2 	udiv	r0, r3, r2
 800912a:	fb02 f200 	mul.w	r2, r2, r0
 800912e:	1a9b      	subs	r3, r3, r2
 8009130:	440b      	add	r3, r1
 8009132:	6879      	ldr	r1, [r7, #4]
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff fad9 	bl	80086ec <st_dword>
			fs->wflag = 1;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2201      	movs	r2, #1
 800913e:	70da      	strb	r2, [r3, #3]
			break;
 8009140:	e008      	b.n	8009154 <put_fat+0x22e>
		}
	}
 8009142:	bf00      	nop
 8009144:	e006      	b.n	8009154 <put_fat+0x22e>
			if (res != FR_OK) break;
 8009146:	bf00      	nop
 8009148:	e004      	b.n	8009154 <put_fat+0x22e>
			if (res != FR_OK) break;
 800914a:	bf00      	nop
 800914c:	e002      	b.n	8009154 <put_fat+0x22e>
			if (res != FR_OK) break;
 800914e:	bf00      	nop
 8009150:	e000      	b.n	8009154 <put_fat+0x22e>
			if (res != FR_OK) break;
 8009152:	bf00      	nop
	return res;
 8009154:	7ffb      	ldrb	r3, [r7, #31]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3724      	adds	r7, #36	; 0x24
 800915a:	46bd      	mov	sp, r7
 800915c:	bd90      	pop	{r4, r7, pc}

0800915e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b088      	sub	sp, #32
 8009162:	af00      	add	r7, sp, #0
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	60b9      	str	r1, [r7, #8]
 8009168:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d904      	bls.n	8009184 <remove_chain+0x26>
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	69db      	ldr	r3, [r3, #28]
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	429a      	cmp	r2, r3
 8009182:	d301      	bcc.n	8009188 <remove_chain+0x2a>
 8009184:	2302      	movs	r3, #2
 8009186:	e04b      	b.n	8009220 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00c      	beq.n	80091a8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800918e:	f04f 32ff 	mov.w	r2, #4294967295
 8009192:	6879      	ldr	r1, [r7, #4]
 8009194:	69b8      	ldr	r0, [r7, #24]
 8009196:	f7ff fec6 	bl	8008f26 <put_fat>
 800919a:	4603      	mov	r3, r0
 800919c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800919e:	7ffb      	ldrb	r3, [r7, #31]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <remove_chain+0x4a>
 80091a4:	7ffb      	ldrb	r3, [r7, #31]
 80091a6:	e03b      	b.n	8009220 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80091a8:	68b9      	ldr	r1, [r7, #8]
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f7ff fde7 	bl	8008d7e <get_fat>
 80091b0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d031      	beq.n	800921c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d101      	bne.n	80091c2 <remove_chain+0x64>
 80091be:	2302      	movs	r3, #2
 80091c0:	e02e      	b.n	8009220 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c8:	d101      	bne.n	80091ce <remove_chain+0x70>
 80091ca:	2301      	movs	r3, #1
 80091cc:	e028      	b.n	8009220 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80091ce:	2200      	movs	r2, #0
 80091d0:	68b9      	ldr	r1, [r7, #8]
 80091d2:	69b8      	ldr	r0, [r7, #24]
 80091d4:	f7ff fea7 	bl	8008f26 <put_fat>
 80091d8:	4603      	mov	r3, r0
 80091da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80091dc:	7ffb      	ldrb	r3, [r7, #31]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <remove_chain+0x88>
 80091e2:	7ffb      	ldrb	r3, [r7, #31]
 80091e4:	e01c      	b.n	8009220 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	699a      	ldr	r2, [r3, #24]
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	3b02      	subs	r3, #2
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d20b      	bcs.n	800920c <remove_chain+0xae>
			fs->free_clst++;
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	791b      	ldrb	r3, [r3, #4]
 8009202:	f043 0301 	orr.w	r3, r3, #1
 8009206:	b2da      	uxtb	r2, r3
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	429a      	cmp	r2, r3
 8009218:	d3c6      	bcc.n	80091a8 <remove_chain+0x4a>
 800921a:	e000      	b.n	800921e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800921c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3720      	adds	r7, #32
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10d      	bne.n	800925a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d004      	beq.n	8009254 <create_chain+0x2c>
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	429a      	cmp	r2, r3
 8009252:	d31b      	bcc.n	800928c <create_chain+0x64>
 8009254:	2301      	movs	r3, #1
 8009256:	61bb      	str	r3, [r7, #24]
 8009258:	e018      	b.n	800928c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7ff fd8e 	bl	8008d7e <get_fat>
 8009262:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d801      	bhi.n	800926e <create_chain+0x46>
 800926a:	2301      	movs	r3, #1
 800926c:	e070      	b.n	8009350 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009274:	d101      	bne.n	800927a <create_chain+0x52>
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	e06a      	b.n	8009350 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	429a      	cmp	r2, r3
 8009282:	d201      	bcs.n	8009288 <create_chain+0x60>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	e063      	b.n	8009350 <create_chain+0x128>
		scl = clst;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	3301      	adds	r3, #1
 8009294:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	69db      	ldr	r3, [r3, #28]
 800929a:	69fa      	ldr	r2, [r7, #28]
 800929c:	429a      	cmp	r2, r3
 800929e:	d307      	bcc.n	80092b0 <create_chain+0x88>
				ncl = 2;
 80092a0:	2302      	movs	r3, #2
 80092a2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80092a4:	69fa      	ldr	r2, [r7, #28]
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d901      	bls.n	80092b0 <create_chain+0x88>
 80092ac:	2300      	movs	r3, #0
 80092ae:	e04f      	b.n	8009350 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80092b0:	69f9      	ldr	r1, [r7, #28]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7ff fd63 	bl	8008d7e <get_fat>
 80092b8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00e      	beq.n	80092de <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d003      	beq.n	80092ce <create_chain+0xa6>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092cc:	d101      	bne.n	80092d2 <create_chain+0xaa>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	e03e      	b.n	8009350 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80092d2:	69fa      	ldr	r2, [r7, #28]
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d1da      	bne.n	8009290 <create_chain+0x68>
 80092da:	2300      	movs	r3, #0
 80092dc:	e038      	b.n	8009350 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80092de:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80092e0:	f04f 32ff 	mov.w	r2, #4294967295
 80092e4:	69f9      	ldr	r1, [r7, #28]
 80092e6:	6938      	ldr	r0, [r7, #16]
 80092e8:	f7ff fe1d 	bl	8008f26 <put_fat>
 80092ec:	4603      	mov	r3, r0
 80092ee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80092f0:	7dfb      	ldrb	r3, [r7, #23]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d109      	bne.n	800930a <create_chain+0xe2>
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d006      	beq.n	800930a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80092fc:	69fa      	ldr	r2, [r7, #28]
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6938      	ldr	r0, [r7, #16]
 8009302:	f7ff fe10 	bl	8008f26 <put_fat>
 8009306:	4603      	mov	r3, r0
 8009308:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d116      	bne.n	800933e <create_chain+0x116>
		fs->last_clst = ncl;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	69fa      	ldr	r2, [r7, #28]
 8009314:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	699a      	ldr	r2, [r3, #24]
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	3b02      	subs	r3, #2
 8009320:	429a      	cmp	r2, r3
 8009322:	d804      	bhi.n	800932e <create_chain+0x106>
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	699b      	ldr	r3, [r3, #24]
 8009328:	1e5a      	subs	r2, r3, #1
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	791b      	ldrb	r3, [r3, #4]
 8009332:	f043 0301 	orr.w	r3, r3, #1
 8009336:	b2da      	uxtb	r2, r3
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	711a      	strb	r2, [r3, #4]
 800933c:	e007      	b.n	800934e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800933e:	7dfb      	ldrb	r3, [r7, #23]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d102      	bne.n	800934a <create_chain+0x122>
 8009344:	f04f 33ff 	mov.w	r3, #4294967295
 8009348:	e000      	b.n	800934c <create_chain+0x124>
 800934a:	2301      	movs	r3, #1
 800934c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800934e:	69fb      	ldr	r3, [r7, #28]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3720      	adds	r7, #32
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009358:	b480      	push	{r7}
 800935a:	b087      	sub	sp, #28
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936c:	3304      	adds	r3, #4
 800936e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	899b      	ldrh	r3, [r3, #12]
 8009374:	461a      	mov	r2, r3
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	fbb3 f3f2 	udiv	r3, r3, r2
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	8952      	ldrh	r2, [r2, #10]
 8009380:	fbb3 f3f2 	udiv	r3, r3, r2
 8009384:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	1d1a      	adds	r2, r3, #4
 800938a:	613a      	str	r2, [r7, #16]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <clmt_clust+0x42>
 8009396:	2300      	movs	r3, #0
 8009398:	e010      	b.n	80093bc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d307      	bcc.n	80093b2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	617b      	str	r3, [r7, #20]
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	3304      	adds	r3, #4
 80093ae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80093b0:	e7e9      	b.n	8009386 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80093b2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	4413      	add	r3, r2
}
 80093bc:	4618      	mov	r0, r3
 80093be:	371c      	adds	r7, #28
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093de:	d204      	bcs.n	80093ea <dir_sdi+0x22>
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	f003 031f 	and.w	r3, r3, #31
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <dir_sdi+0x26>
		return FR_INT_ERR;
 80093ea:	2302      	movs	r3, #2
 80093ec:	e071      	b.n	80094d2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	683a      	ldr	r2, [r7, #0]
 80093f2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d106      	bne.n	800940e <dir_sdi+0x46>
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	2b02      	cmp	r3, #2
 8009406:	d902      	bls.n	800940e <dir_sdi+0x46>
		clst = fs->dirbase;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10c      	bne.n	800942e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	095b      	lsrs	r3, r3, #5
 8009418:	693a      	ldr	r2, [r7, #16]
 800941a:	8912      	ldrh	r2, [r2, #8]
 800941c:	4293      	cmp	r3, r2
 800941e:	d301      	bcc.n	8009424 <dir_sdi+0x5c>
 8009420:	2302      	movs	r3, #2
 8009422:	e056      	b.n	80094d2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	61da      	str	r2, [r3, #28]
 800942c:	e02d      	b.n	800948a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	895b      	ldrh	r3, [r3, #10]
 8009432:	461a      	mov	r2, r3
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	899b      	ldrh	r3, [r3, #12]
 8009438:	fb03 f302 	mul.w	r3, r3, r2
 800943c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800943e:	e019      	b.n	8009474 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6979      	ldr	r1, [r7, #20]
 8009444:	4618      	mov	r0, r3
 8009446:	f7ff fc9a 	bl	8008d7e <get_fat>
 800944a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009452:	d101      	bne.n	8009458 <dir_sdi+0x90>
 8009454:	2301      	movs	r3, #1
 8009456:	e03c      	b.n	80094d2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d904      	bls.n	8009468 <dir_sdi+0xa0>
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	697a      	ldr	r2, [r7, #20]
 8009464:	429a      	cmp	r2, r3
 8009466:	d301      	bcc.n	800946c <dir_sdi+0xa4>
 8009468:	2302      	movs	r3, #2
 800946a:	e032      	b.n	80094d2 <dir_sdi+0x10a>
			ofs -= csz;
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	429a      	cmp	r2, r3
 800947a:	d2e1      	bcs.n	8009440 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800947c:	6979      	ldr	r1, [r7, #20]
 800947e:	6938      	ldr	r0, [r7, #16]
 8009480:	f7ff fc5e 	bl	8008d40 <clust2sect>
 8009484:	4602      	mov	r2, r0
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	69db      	ldr	r3, [r3, #28]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <dir_sdi+0xd4>
 8009498:	2302      	movs	r3, #2
 800949a:	e01a      	b.n	80094d2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	69da      	ldr	r2, [r3, #28]
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	899b      	ldrh	r3, [r3, #12]
 80094a4:	4619      	mov	r1, r3
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80094ac:	441a      	add	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	899b      	ldrh	r3, [r3, #12]
 80094bc:	461a      	mov	r2, r3
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80094c4:	fb02 f200 	mul.w	r2, r2, r0
 80094c8:	1a9b      	subs	r3, r3, r2
 80094ca:	18ca      	adds	r2, r1, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3718      	adds	r7, #24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b086      	sub	sp, #24
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	3320      	adds	r3, #32
 80094f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <dir_next+0x28>
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009500:	d301      	bcc.n	8009506 <dir_next+0x2c>
 8009502:	2304      	movs	r3, #4
 8009504:	e0bb      	b.n	800967e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	899b      	ldrh	r3, [r3, #12]
 800950a:	461a      	mov	r2, r3
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009512:	fb02 f201 	mul.w	r2, r2, r1
 8009516:	1a9b      	subs	r3, r3, r2
 8009518:	2b00      	cmp	r3, #0
 800951a:	f040 809d 	bne.w	8009658 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	1c5a      	adds	r2, r3, #1
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10b      	bne.n	8009548 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	095b      	lsrs	r3, r3, #5
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	8912      	ldrh	r2, [r2, #8]
 8009538:	4293      	cmp	r3, r2
 800953a:	f0c0 808d 	bcc.w	8009658 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	61da      	str	r2, [r3, #28]
 8009544:	2304      	movs	r3, #4
 8009546:	e09a      	b.n	800967e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	899b      	ldrh	r3, [r3, #12]
 800954c:	461a      	mov	r2, r3
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	fbb3 f3f2 	udiv	r3, r3, r2
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	8952      	ldrh	r2, [r2, #10]
 8009558:	3a01      	subs	r2, #1
 800955a:	4013      	ands	r3, r2
 800955c:	2b00      	cmp	r3, #0
 800955e:	d17b      	bne.n	8009658 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	4619      	mov	r1, r3
 8009568:	4610      	mov	r0, r2
 800956a:	f7ff fc08 	bl	8008d7e <get_fat>
 800956e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d801      	bhi.n	800957a <dir_next+0xa0>
 8009576:	2302      	movs	r3, #2
 8009578:	e081      	b.n	800967e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009580:	d101      	bne.n	8009586 <dir_next+0xac>
 8009582:	2301      	movs	r3, #1
 8009584:	e07b      	b.n	800967e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	429a      	cmp	r2, r3
 800958e:	d359      	bcc.n	8009644 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d104      	bne.n	80095a0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	61da      	str	r2, [r3, #28]
 800959c:	2304      	movs	r3, #4
 800959e:	e06e      	b.n	800967e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	4619      	mov	r1, r3
 80095a8:	4610      	mov	r0, r2
 80095aa:	f7ff fe3d 	bl	8009228 <create_chain>
 80095ae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d101      	bne.n	80095ba <dir_next+0xe0>
 80095b6:	2307      	movs	r3, #7
 80095b8:	e061      	b.n	800967e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d101      	bne.n	80095c4 <dir_next+0xea>
 80095c0:	2302      	movs	r3, #2
 80095c2:	e05c      	b.n	800967e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ca:	d101      	bne.n	80095d0 <dir_next+0xf6>
 80095cc:	2301      	movs	r3, #1
 80095ce:	e056      	b.n	800967e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f7ff fad3 	bl	8008b7c <sync_window>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <dir_next+0x106>
 80095dc:	2301      	movs	r3, #1
 80095de:	e04e      	b.n	800967e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	899b      	ldrh	r3, [r3, #12]
 80095ea:	461a      	mov	r2, r3
 80095ec:	2100      	movs	r1, #0
 80095ee:	f7ff f8ca 	bl	8008786 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80095f2:	2300      	movs	r3, #0
 80095f4:	613b      	str	r3, [r7, #16]
 80095f6:	6979      	ldr	r1, [r7, #20]
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f7ff fba1 	bl	8008d40 <clust2sect>
 80095fe:	4602      	mov	r2, r0
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	635a      	str	r2, [r3, #52]	; 0x34
 8009604:	e012      	b.n	800962c <dir_next+0x152>
						fs->wflag = 1;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2201      	movs	r2, #1
 800960a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f7ff fab5 	bl	8008b7c <sync_window>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <dir_next+0x142>
 8009618:	2301      	movs	r3, #1
 800961a:	e030      	b.n	800967e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	3301      	adds	r3, #1
 8009620:	613b      	str	r3, [r7, #16]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009626:	1c5a      	adds	r2, r3, #1
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	635a      	str	r2, [r3, #52]	; 0x34
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	895b      	ldrh	r3, [r3, #10]
 8009630:	461a      	mov	r2, r3
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	4293      	cmp	r3, r2
 8009636:	d3e6      	bcc.n	8009606 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	1ad2      	subs	r2, r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800964a:	6979      	ldr	r1, [r7, #20]
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f7ff fb77 	bl	8008d40 <clust2sect>
 8009652:	4602      	mov	r2, r0
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	899b      	ldrh	r3, [r3, #12]
 8009668:	461a      	mov	r2, r3
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009670:	fb02 f200 	mul.w	r2, r2, r0
 8009674:	1a9b      	subs	r3, r3, r2
 8009676:	18ca      	adds	r2, r1, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b086      	sub	sp, #24
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009696:	2100      	movs	r1, #0
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7ff fe95 	bl	80093c8 <dir_sdi>
 800969e:	4603      	mov	r3, r0
 80096a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80096a2:	7dfb      	ldrb	r3, [r7, #23]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d12b      	bne.n	8009700 <dir_alloc+0x7a>
		n = 0;
 80096a8:	2300      	movs	r3, #0
 80096aa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	69db      	ldr	r3, [r3, #28]
 80096b0:	4619      	mov	r1, r3
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f7ff faa6 	bl	8008c04 <move_window>
 80096b8:	4603      	mov	r3, r0
 80096ba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d11d      	bne.n	80096fe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	2be5      	cmp	r3, #229	; 0xe5
 80096ca:	d004      	beq.n	80096d6 <dir_alloc+0x50>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a1b      	ldr	r3, [r3, #32]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d107      	bne.n	80096e6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	3301      	adds	r3, #1
 80096da:	613b      	str	r3, [r7, #16]
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d102      	bne.n	80096ea <dir_alloc+0x64>
 80096e4:	e00c      	b.n	8009700 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80096e6:	2300      	movs	r3, #0
 80096e8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80096ea:	2101      	movs	r1, #1
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f7ff fef4 	bl	80094da <dir_next>
 80096f2:	4603      	mov	r3, r0
 80096f4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80096f6:	7dfb      	ldrb	r3, [r7, #23]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d0d7      	beq.n	80096ac <dir_alloc+0x26>
 80096fc:	e000      	b.n	8009700 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80096fe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009700:	7dfb      	ldrb	r3, [r7, #23]
 8009702:	2b04      	cmp	r3, #4
 8009704:	d101      	bne.n	800970a <dir_alloc+0x84>
 8009706:	2307      	movs	r3, #7
 8009708:	75fb      	strb	r3, [r7, #23]
	return res;
 800970a:	7dfb      	ldrb	r3, [r7, #23]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	331a      	adds	r3, #26
 8009722:	4618      	mov	r0, r3
 8009724:	f7fe ff8c 	bl	8008640 <ld_word>
 8009728:	4603      	mov	r3, r0
 800972a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	2b03      	cmp	r3, #3
 8009732:	d109      	bne.n	8009748 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	3314      	adds	r3, #20
 8009738:	4618      	mov	r0, r3
 800973a:	f7fe ff81 	bl	8008640 <ld_word>
 800973e:	4603      	mov	r3, r0
 8009740:	041b      	lsls	r3, r3, #16
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	4313      	orrs	r3, r2
 8009746:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009748:	68fb      	ldr	r3, [r7, #12]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b084      	sub	sp, #16
 8009756:	af00      	add	r7, sp, #0
 8009758:	60f8      	str	r0, [r7, #12]
 800975a:	60b9      	str	r1, [r7, #8]
 800975c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	331a      	adds	r3, #26
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	b292      	uxth	r2, r2
 8009766:	4611      	mov	r1, r2
 8009768:	4618      	mov	r0, r3
 800976a:	f7fe ffa4 	bl	80086b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	2b03      	cmp	r3, #3
 8009774:	d109      	bne.n	800978a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	f103 0214 	add.w	r2, r3, #20
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	0c1b      	lsrs	r3, r3, #16
 8009780:	b29b      	uxth	r3, r3
 8009782:	4619      	mov	r1, r3
 8009784:	4610      	mov	r0, r2
 8009786:	f7fe ff96 	bl	80086b6 <st_word>
	}
}
 800978a:	bf00      	nop
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b086      	sub	sp, #24
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80097a0:	2100      	movs	r1, #0
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7ff fe10 	bl	80093c8 <dir_sdi>
 80097a8:	4603      	mov	r3, r0
 80097aa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80097ac:	7dfb      	ldrb	r3, [r7, #23]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d001      	beq.n	80097b6 <dir_find+0x24>
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
 80097b4:	e03e      	b.n	8009834 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	69db      	ldr	r3, [r3, #28]
 80097ba:	4619      	mov	r1, r3
 80097bc:	6938      	ldr	r0, [r7, #16]
 80097be:	f7ff fa21 	bl	8008c04 <move_window>
 80097c2:	4603      	mov	r3, r0
 80097c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80097c6:	7dfb      	ldrb	r3, [r7, #23]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d12f      	bne.n	800982c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a1b      	ldr	r3, [r3, #32]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d102      	bne.n	80097e0 <dir_find+0x4e>
 80097da:	2304      	movs	r3, #4
 80097dc:	75fb      	strb	r3, [r7, #23]
 80097de:	e028      	b.n	8009832 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a1b      	ldr	r3, [r3, #32]
 80097e4:	330b      	adds	r3, #11
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097ec:	b2da      	uxtb	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	330b      	adds	r3, #11
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	f003 0308 	and.w	r3, r3, #8
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10a      	bne.n	8009818 <dir_find+0x86>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a18      	ldr	r0, [r3, #32]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	3324      	adds	r3, #36	; 0x24
 800980a:	220b      	movs	r2, #11
 800980c:	4619      	mov	r1, r3
 800980e:	f7fe ffd5 	bl	80087bc <mem_cmp>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00b      	beq.n	8009830 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009818:	2100      	movs	r1, #0
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7ff fe5d 	bl	80094da <dir_next>
 8009820:	4603      	mov	r3, r0
 8009822:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009824:	7dfb      	ldrb	r3, [r7, #23]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d0c5      	beq.n	80097b6 <dir_find+0x24>
 800982a:	e002      	b.n	8009832 <dir_find+0xa0>
		if (res != FR_OK) break;
 800982c:	bf00      	nop
 800982e:	e000      	b.n	8009832 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009830:	bf00      	nop

	return res;
 8009832:	7dfb      	ldrb	r3, [r7, #23]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3718      	adds	r7, #24
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800984a:	2101      	movs	r1, #1
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff ff1a 	bl	8009686 <dir_alloc>
 8009852:	4603      	mov	r3, r0
 8009854:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009856:	7bfb      	ldrb	r3, [r7, #15]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d11c      	bne.n	8009896 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	69db      	ldr	r3, [r3, #28]
 8009860:	4619      	mov	r1, r3
 8009862:	68b8      	ldr	r0, [r7, #8]
 8009864:	f7ff f9ce 	bl	8008c04 <move_window>
 8009868:	4603      	mov	r3, r0
 800986a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800986c:	7bfb      	ldrb	r3, [r7, #15]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d111      	bne.n	8009896 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a1b      	ldr	r3, [r3, #32]
 8009876:	2220      	movs	r2, #32
 8009878:	2100      	movs	r1, #0
 800987a:	4618      	mov	r0, r3
 800987c:	f7fe ff83 	bl	8008786 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a18      	ldr	r0, [r3, #32]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	3324      	adds	r3, #36	; 0x24
 8009888:	220b      	movs	r2, #11
 800988a:	4619      	mov	r1, r3
 800988c:	f7fe ff5a 	bl	8008744 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	2201      	movs	r2, #1
 8009894:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009896:	7bfb      	ldrb	r3, [r7, #15]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2200      	movs	r2, #0
 80098ae:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	69db      	ldr	r3, [r3, #28]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d04e      	beq.n	8009956 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80098b8:	2300      	movs	r3, #0
 80098ba:	613b      	str	r3, [r7, #16]
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80098c0:	e021      	b.n	8009906 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a1a      	ldr	r2, [r3, #32]
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	1c59      	adds	r1, r3, #1
 80098ca:	6179      	str	r1, [r7, #20]
 80098cc:	4413      	add	r3, r2
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
 80098d4:	2b20      	cmp	r3, #32
 80098d6:	d100      	bne.n	80098da <get_fileinfo+0x3a>
 80098d8:	e015      	b.n	8009906 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	2b05      	cmp	r3, #5
 80098de:	d101      	bne.n	80098e4 <get_fileinfo+0x44>
 80098e0:	23e5      	movs	r3, #229	; 0xe5
 80098e2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	2b09      	cmp	r3, #9
 80098e8:	d106      	bne.n	80098f8 <get_fileinfo+0x58>
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	1c5a      	adds	r2, r3, #1
 80098ee:	613a      	str	r2, [r7, #16]
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	4413      	add	r3, r2
 80098f4:	222e      	movs	r2, #46	; 0x2e
 80098f6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	613a      	str	r2, [r7, #16]
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	4413      	add	r3, r2
 8009902:	7bfa      	ldrb	r2, [r7, #15]
 8009904:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	2b0a      	cmp	r3, #10
 800990a:	d9da      	bls.n	80098c2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800990c:	683a      	ldr	r2, [r7, #0]
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	4413      	add	r3, r2
 8009912:	3309      	adds	r3, #9
 8009914:	2200      	movs	r2, #0
 8009916:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a1b      	ldr	r3, [r3, #32]
 800991c:	7ada      	ldrb	r2, [r3, #11]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	331c      	adds	r3, #28
 8009928:	4618      	mov	r0, r3
 800992a:	f7fe fea1 	bl	8008670 <ld_dword>
 800992e:	4602      	mov	r2, r0
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a1b      	ldr	r3, [r3, #32]
 8009938:	3316      	adds	r3, #22
 800993a:	4618      	mov	r0, r3
 800993c:	f7fe fe98 	bl	8008670 <ld_dword>
 8009940:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	b29a      	uxth	r2, r3
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	80da      	strh	r2, [r3, #6]
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	0c1b      	lsrs	r3, r3, #16
 800994e:	b29a      	uxth	r2, r3
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	809a      	strh	r2, [r3, #4]
 8009954:	e000      	b.n	8009958 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009956:	bf00      	nop
}
 8009958:	3718      	adds	r7, #24
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
	...

08009960 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b088      	sub	sp, #32
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	60fb      	str	r3, [r7, #12]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	3324      	adds	r3, #36	; 0x24
 8009974:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009976:	220b      	movs	r2, #11
 8009978:	2120      	movs	r1, #32
 800997a:	68b8      	ldr	r0, [r7, #8]
 800997c:	f7fe ff03 	bl	8008786 <mem_set>
	si = i = 0; ni = 8;
 8009980:	2300      	movs	r3, #0
 8009982:	613b      	str	r3, [r7, #16]
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	61fb      	str	r3, [r7, #28]
 8009988:	2308      	movs	r3, #8
 800998a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	61fa      	str	r2, [r7, #28]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	4413      	add	r3, r2
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800999a:	7efb      	ldrb	r3, [r7, #27]
 800999c:	2b20      	cmp	r3, #32
 800999e:	d94b      	bls.n	8009a38 <create_name+0xd8>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80099a0:	7efb      	ldrb	r3, [r7, #27]
 80099a2:	2b2f      	cmp	r3, #47	; 0x2f
 80099a4:	d006      	beq.n	80099b4 <create_name+0x54>
 80099a6:	7efb      	ldrb	r3, [r7, #27]
 80099a8:	2b5c      	cmp	r3, #92	; 0x5c
 80099aa:	d110      	bne.n	80099ce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80099ac:	e002      	b.n	80099b4 <create_name+0x54>
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	3301      	adds	r3, #1
 80099b2:	61fb      	str	r3, [r7, #28]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	4413      	add	r3, r2
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	2b2f      	cmp	r3, #47	; 0x2f
 80099be:	d0f6      	beq.n	80099ae <create_name+0x4e>
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	4413      	add	r3, r2
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b5c      	cmp	r3, #92	; 0x5c
 80099ca:	d0f0      	beq.n	80099ae <create_name+0x4e>
			break;
 80099cc:	e035      	b.n	8009a3a <create_name+0xda>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80099ce:	7efb      	ldrb	r3, [r7, #27]
 80099d0:	2b2e      	cmp	r3, #46	; 0x2e
 80099d2:	d003      	beq.n	80099dc <create_name+0x7c>
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d30c      	bcc.n	80099f6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	2b0b      	cmp	r3, #11
 80099e0:	d002      	beq.n	80099e8 <create_name+0x88>
 80099e2:	7efb      	ldrb	r3, [r7, #27]
 80099e4:	2b2e      	cmp	r3, #46	; 0x2e
 80099e6:	d001      	beq.n	80099ec <create_name+0x8c>
 80099e8:	2306      	movs	r3, #6
 80099ea:	e041      	b.n	8009a70 <create_name+0x110>
			i = 8; ni = 11;				/* Goto extension */
 80099ec:	2308      	movs	r3, #8
 80099ee:	613b      	str	r3, [r7, #16]
 80099f0:	230b      	movs	r3, #11
 80099f2:	617b      	str	r3, [r7, #20]
			continue;
 80099f4:	e01f      	b.n	8009a36 <create_name+0xd6>
		}
		if (c >= 0x80) {				/* Extended character? */
 80099f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	da01      	bge.n	8009a02 <create_name+0xa2>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
#else
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
 80099fe:	2306      	movs	r3, #6
 8009a00:	e036      	b.n	8009a70 <create_name+0x110>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009a02:	7efb      	ldrb	r3, [r7, #27]
 8009a04:	4619      	mov	r1, r3
 8009a06:	481c      	ldr	r0, [pc, #112]	; (8009a78 <create_name+0x118>)
 8009a08:	f7fe feff 	bl	800880a <chk_chr>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d001      	beq.n	8009a16 <create_name+0xb6>
 8009a12:	2306      	movs	r3, #6
 8009a14:	e02c      	b.n	8009a70 <create_name+0x110>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009a16:	7efb      	ldrb	r3, [r7, #27]
 8009a18:	2b60      	cmp	r3, #96	; 0x60
 8009a1a:	d905      	bls.n	8009a28 <create_name+0xc8>
 8009a1c:	7efb      	ldrb	r3, [r7, #27]
 8009a1e:	2b7a      	cmp	r3, #122	; 0x7a
 8009a20:	d802      	bhi.n	8009a28 <create_name+0xc8>
 8009a22:	7efb      	ldrb	r3, [r7, #27]
 8009a24:	3b20      	subs	r3, #32
 8009a26:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	1c5a      	adds	r2, r3, #1
 8009a2c:	613a      	str	r2, [r7, #16]
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	4413      	add	r3, r2
 8009a32:	7efa      	ldrb	r2, [r7, #27]
 8009a34:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009a36:	e7a9      	b.n	800998c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009a38:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009a3a:	68fa      	ldr	r2, [r7, #12]
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	441a      	add	r2, r3
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d101      	bne.n	8009a4e <create_name+0xee>
 8009a4a:	2306      	movs	r3, #6
 8009a4c:	e010      	b.n	8009a70 <create_name+0x110>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	2be5      	cmp	r3, #229	; 0xe5
 8009a54:	d102      	bne.n	8009a5c <create_name+0xfc>
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	2205      	movs	r2, #5
 8009a5a:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009a5c:	7efb      	ldrb	r3, [r7, #27]
 8009a5e:	2b20      	cmp	r3, #32
 8009a60:	d801      	bhi.n	8009a66 <create_name+0x106>
 8009a62:	2204      	movs	r2, #4
 8009a64:	e000      	b.n	8009a68 <create_name+0x108>
 8009a66:	2200      	movs	r2, #0
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	330b      	adds	r3, #11
 8009a6c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009a6e:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3720      	adds	r7, #32
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	0802e4c0 	.word	0x0802e4c0

08009a7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b086      	sub	sp, #24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009a90:	e002      	b.n	8009a98 <follow_path+0x1c>
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	3301      	adds	r3, #1
 8009a96:	603b      	str	r3, [r7, #0]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	2b2f      	cmp	r3, #47	; 0x2f
 8009a9e:	d0f8      	beq.n	8009a92 <follow_path+0x16>
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	2b5c      	cmp	r3, #92	; 0x5c
 8009aa6:	d0f4      	beq.n	8009a92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	2b1f      	cmp	r3, #31
 8009ab4:	d80a      	bhi.n	8009acc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2280      	movs	r2, #128	; 0x80
 8009aba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009abe:	2100      	movs	r1, #0
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7ff fc81 	bl	80093c8 <dir_sdi>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	75fb      	strb	r3, [r7, #23]
 8009aca:	e048      	b.n	8009b5e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009acc:	463b      	mov	r3, r7
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f7ff ff45 	bl	8009960 <create_name>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d139      	bne.n	8009b54 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7ff fe56 	bl	8009792 <dir_find>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009af0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009af2:	7dfb      	ldrb	r3, [r7, #23]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00a      	beq.n	8009b0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009af8:	7dfb      	ldrb	r3, [r7, #23]
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d12c      	bne.n	8009b58 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009afe:	7afb      	ldrb	r3, [r7, #11]
 8009b00:	f003 0304 	and.w	r3, r3, #4
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d127      	bne.n	8009b58 <follow_path+0xdc>
 8009b08:	2305      	movs	r3, #5
 8009b0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009b0c:	e024      	b.n	8009b58 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009b0e:	7afb      	ldrb	r3, [r7, #11]
 8009b10:	f003 0304 	and.w	r3, r3, #4
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d121      	bne.n	8009b5c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	799b      	ldrb	r3, [r3, #6]
 8009b1c:	f003 0310 	and.w	r3, r3, #16
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d102      	bne.n	8009b2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009b24:	2305      	movs	r3, #5
 8009b26:	75fb      	strb	r3, [r7, #23]
 8009b28:	e019      	b.n	8009b5e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	8992      	ldrh	r2, [r2, #12]
 8009b38:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b3c:	fb02 f200 	mul.w	r2, r2, r0
 8009b40:	1a9b      	subs	r3, r3, r2
 8009b42:	440b      	add	r3, r1
 8009b44:	4619      	mov	r1, r3
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f7ff fde4 	bl	8009714 <ld_clust>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009b52:	e7bb      	b.n	8009acc <follow_path+0x50>
			if (res != FR_OK) break;
 8009b54:	bf00      	nop
 8009b56:	e002      	b.n	8009b5e <follow_path+0xe2>
				break;
 8009b58:	bf00      	nop
 8009b5a:	e000      	b.n	8009b5e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009b5c:	bf00      	nop
			}
		}
	}

	return res;
 8009b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b087      	sub	sp, #28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009b70:	f04f 33ff 	mov.w	r3, #4294967295
 8009b74:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d031      	beq.n	8009be2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	617b      	str	r3, [r7, #20]
 8009b84:	e002      	b.n	8009b8c <get_ldnumber+0x24>
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	617b      	str	r3, [r7, #20]
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	2b20      	cmp	r3, #32
 8009b92:	d903      	bls.n	8009b9c <get_ldnumber+0x34>
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b3a      	cmp	r3, #58	; 0x3a
 8009b9a:	d1f4      	bne.n	8009b86 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	2b3a      	cmp	r3, #58	; 0x3a
 8009ba2:	d11c      	bne.n	8009bde <get_ldnumber+0x76>
			tp = *path;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	1c5a      	adds	r2, r3, #1
 8009bae:	60fa      	str	r2, [r7, #12]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	3b30      	subs	r3, #48	; 0x30
 8009bb4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	2b09      	cmp	r3, #9
 8009bba:	d80e      	bhi.n	8009bda <get_ldnumber+0x72>
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d10a      	bne.n	8009bda <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d107      	bne.n	8009bda <get_ldnumber+0x72>
					vol = (int)i;
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	617b      	str	r3, [r7, #20]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	697a      	ldr	r2, [r7, #20]
 8009bd8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	e002      	b.n	8009be4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009bde:	2300      	movs	r3, #0
 8009be0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009be2:	693b      	ldr	r3, [r7, #16]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	371c      	adds	r7, #28
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	70da      	strb	r2, [r3, #3]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f04f 32ff 	mov.w	r2, #4294967295
 8009c06:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7fe fffa 	bl	8008c04 <move_window>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d001      	beq.n	8009c1a <check_fs+0x2a>
 8009c16:	2304      	movs	r3, #4
 8009c18:	e038      	b.n	8009c8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	3338      	adds	r3, #56	; 0x38
 8009c1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fe fd0c 	bl	8008640 <ld_word>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d001      	beq.n	8009c38 <check_fs+0x48>
 8009c34:	2303      	movs	r3, #3
 8009c36:	e029      	b.n	8009c8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009c3e:	2be9      	cmp	r3, #233	; 0xe9
 8009c40:	d009      	beq.n	8009c56 <check_fs+0x66>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009c48:	2beb      	cmp	r3, #235	; 0xeb
 8009c4a:	d11e      	bne.n	8009c8a <check_fs+0x9a>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009c52:	2b90      	cmp	r3, #144	; 0x90
 8009c54:	d119      	bne.n	8009c8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	3338      	adds	r3, #56	; 0x38
 8009c5a:	3336      	adds	r3, #54	; 0x36
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fe fd07 	bl	8008670 <ld_dword>
 8009c62:	4603      	mov	r3, r0
 8009c64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009c68:	4a0a      	ldr	r2, [pc, #40]	; (8009c94 <check_fs+0xa4>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d101      	bne.n	8009c72 <check_fs+0x82>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	e00c      	b.n	8009c8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	3338      	adds	r3, #56	; 0x38
 8009c76:	3352      	adds	r3, #82	; 0x52
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7fe fcf9 	bl	8008670 <ld_dword>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	4a05      	ldr	r2, [pc, #20]	; (8009c98 <check_fs+0xa8>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d101      	bne.n	8009c8a <check_fs+0x9a>
 8009c86:	2300      	movs	r3, #0
 8009c88:	e000      	b.n	8009c8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009c8a:	2302      	movs	r3, #2
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	00544146 	.word	0x00544146
 8009c98:	33544146 	.word	0x33544146

08009c9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b096      	sub	sp, #88	; 0x58
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2200      	movs	r2, #0
 8009cae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f7ff ff59 	bl	8009b68 <get_ldnumber>
 8009cb6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	da01      	bge.n	8009cc2 <find_volume+0x26>
 8009cbe:	230b      	movs	r3, #11
 8009cc0:	e262      	b.n	800a188 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009cc2:	4aa4      	ldr	r2, [pc, #656]	; (8009f54 <find_volume+0x2b8>)
 8009cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d101      	bne.n	8009cd6 <find_volume+0x3a>
 8009cd2:	230c      	movs	r3, #12
 8009cd4:	e258      	b.n	800a188 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
 8009cd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009cd8:	f7fe fdb2 	bl	8008840 <lock_fs>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d101      	bne.n	8009ce6 <find_volume+0x4a>
 8009ce2:	230f      	movs	r3, #15
 8009ce4:	e250      	b.n	800a188 <find_volume+0x4ec>
	*rfs = fs;							/* Return pointer to the file system object */
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009cec:	79fb      	ldrb	r3, [r7, #7]
 8009cee:	f023 0301 	bic.w	r3, r3, #1
 8009cf2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d01a      	beq.n	8009d32 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfe:	785b      	ldrb	r3, [r3, #1]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fe fbff 	bl	8008504 <disk_status>
 8009d06:	4603      	mov	r3, r0
 8009d08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009d0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d10:	f003 0301 	and.w	r3, r3, #1
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10c      	bne.n	8009d32 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009d18:	79fb      	ldrb	r3, [r7, #7]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d007      	beq.n	8009d2e <find_volume+0x92>
 8009d1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d22:	f003 0304 	and.w	r3, r3, #4
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d001      	beq.n	8009d2e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8009d2a:	230a      	movs	r3, #10
 8009d2c:	e22c      	b.n	800a188 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8009d2e:	2300      	movs	r3, #0
 8009d30:	e22a      	b.n	800a188 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d34:	2200      	movs	r2, #0
 8009d36:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d3a:	b2da      	uxtb	r2, r3
 8009d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d42:	785b      	ldrb	r3, [r3, #1]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7fe fbf7 	bl	8008538 <disk_initialize>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009d50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d001      	beq.n	8009d60 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e213      	b.n	800a188 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009d60:	79fb      	ldrb	r3, [r7, #7]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d007      	beq.n	8009d76 <find_volume+0xda>
 8009d66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d6a:	f003 0304 	and.w	r3, r3, #4
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009d72:	230a      	movs	r3, #10
 8009d74:	e208      	b.n	800a188 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d78:	7858      	ldrb	r0, [r3, #1]
 8009d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7c:	330c      	adds	r3, #12
 8009d7e:	461a      	mov	r2, r3
 8009d80:	2102      	movs	r1, #2
 8009d82:	f7fe fc3f 	bl	8008604 <disk_ioctl>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <find_volume+0xf4>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e1fb      	b.n	800a188 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d92:	899b      	ldrh	r3, [r3, #12]
 8009d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d98:	d80d      	bhi.n	8009db6 <find_volume+0x11a>
 8009d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9c:	899b      	ldrh	r3, [r3, #12]
 8009d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009da2:	d308      	bcc.n	8009db6 <find_volume+0x11a>
 8009da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da6:	899b      	ldrh	r3, [r3, #12]
 8009da8:	461a      	mov	r2, r3
 8009daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dac:	899b      	ldrh	r3, [r3, #12]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	4013      	ands	r3, r2
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d001      	beq.n	8009dba <find_volume+0x11e>
 8009db6:	2301      	movs	r3, #1
 8009db8:	e1e6      	b.n	800a188 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009dbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009dc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009dc2:	f7ff ff15 	bl	8009bf0 <check_fs>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d14b      	bne.n	8009e6c <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8009dd8:	e01f      	b.n	8009e1a <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ddc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009de2:	011b      	lsls	r3, r3, #4
 8009de4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009de8:	4413      	add	r3, r2
 8009dea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dee:	3304      	adds	r3, #4
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d006      	beq.n	8009e04 <find_volume+0x168>
 8009df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df8:	3308      	adds	r3, #8
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fe fc38 	bl	8008670 <ld_dword>
 8009e00:	4602      	mov	r2, r0
 8009e02:	e000      	b.n	8009e06 <find_volume+0x16a>
 8009e04:	2200      	movs	r2, #0
 8009e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009e0e:	440b      	add	r3, r1
 8009e10:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e16:	3301      	adds	r3, #1
 8009e18:	643b      	str	r3, [r7, #64]	; 0x40
 8009e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e1c:	2b03      	cmp	r3, #3
 8009e1e:	d9dc      	bls.n	8009dda <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009e20:	2300      	movs	r3, #0
 8009e22:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d002      	beq.n	8009e30 <find_volume+0x194>
 8009e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009e38:	4413      	add	r3, r2
 8009e3a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009e3e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d005      	beq.n	8009e52 <find_volume+0x1b6>
 8009e46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e4a:	f7ff fed1 	bl	8009bf0 <check_fs>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	e000      	b.n	8009e54 <find_volume+0x1b8>
 8009e52:	2303      	movs	r3, #3
 8009e54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009e58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d905      	bls.n	8009e6c <find_volume+0x1d0>
 8009e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e62:	3301      	adds	r3, #1
 8009e64:	643b      	str	r3, [r7, #64]	; 0x40
 8009e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e68:	2b03      	cmp	r3, #3
 8009e6a:	d9e1      	bls.n	8009e30 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009e6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d101      	bne.n	8009e78 <find_volume+0x1dc>
 8009e74:	2301      	movs	r3, #1
 8009e76:	e187      	b.n	800a188 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009e78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d901      	bls.n	8009e84 <find_volume+0x1e8>
 8009e80:	230d      	movs	r3, #13
 8009e82:	e181      	b.n	800a188 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e86:	3338      	adds	r3, #56	; 0x38
 8009e88:	330b      	adds	r3, #11
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fe fbd8 	bl	8008640 <ld_word>
 8009e90:	4603      	mov	r3, r0
 8009e92:	461a      	mov	r2, r3
 8009e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e96:	899b      	ldrh	r3, [r3, #12]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d001      	beq.n	8009ea0 <find_volume+0x204>
 8009e9c:	230d      	movs	r3, #13
 8009e9e:	e173      	b.n	800a188 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea2:	3338      	adds	r3, #56	; 0x38
 8009ea4:	3316      	adds	r3, #22
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe fbca 	bl	8008640 <ld_word>
 8009eac:	4603      	mov	r3, r0
 8009eae:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d106      	bne.n	8009ec4 <find_volume+0x228>
 8009eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb8:	3338      	adds	r3, #56	; 0x38
 8009eba:	3324      	adds	r3, #36	; 0x24
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7fe fbd7 	bl	8008670 <ld_dword>
 8009ec2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ec8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ecc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed6:	789b      	ldrb	r3, [r3, #2]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d005      	beq.n	8009ee8 <find_volume+0x24c>
 8009edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ede:	789b      	ldrb	r3, [r3, #2]
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d001      	beq.n	8009ee8 <find_volume+0x24c>
 8009ee4:	230d      	movs	r3, #13
 8009ee6:	e14f      	b.n	800a188 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eea:	789b      	ldrb	r3, [r3, #2]
 8009eec:	461a      	mov	r2, r3
 8009eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ef0:	fb02 f303 	mul.w	r3, r2, r3
 8009ef4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f04:	895b      	ldrh	r3, [r3, #10]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d008      	beq.n	8009f1c <find_volume+0x280>
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0c:	895b      	ldrh	r3, [r3, #10]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f12:	895b      	ldrh	r3, [r3, #10]
 8009f14:	3b01      	subs	r3, #1
 8009f16:	4013      	ands	r3, r2
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d001      	beq.n	8009f20 <find_volume+0x284>
 8009f1c:	230d      	movs	r3, #13
 8009f1e:	e133      	b.n	800a188 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f22:	3338      	adds	r3, #56	; 0x38
 8009f24:	3311      	adds	r3, #17
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe fb8a 	bl	8008640 <ld_word>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	461a      	mov	r2, r3
 8009f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f32:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f36:	891b      	ldrh	r3, [r3, #8]
 8009f38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f3a:	8992      	ldrh	r2, [r2, #12]
 8009f3c:	0952      	lsrs	r2, r2, #5
 8009f3e:	b292      	uxth	r2, r2
 8009f40:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f44:	fb02 f201 	mul.w	r2, r2, r1
 8009f48:	1a9b      	subs	r3, r3, r2
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d003      	beq.n	8009f58 <find_volume+0x2bc>
 8009f50:	230d      	movs	r3, #13
 8009f52:	e119      	b.n	800a188 <find_volume+0x4ec>
 8009f54:	20000124 	.word	0x20000124

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5a:	3338      	adds	r3, #56	; 0x38
 8009f5c:	3313      	adds	r3, #19
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fe fb6e 	bl	8008640 <ld_word>
 8009f64:	4603      	mov	r3, r0
 8009f66:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d106      	bne.n	8009f7c <find_volume+0x2e0>
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f70:	3338      	adds	r3, #56	; 0x38
 8009f72:	3320      	adds	r3, #32
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fe fb7b 	bl	8008670 <ld_dword>
 8009f7a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7e:	3338      	adds	r3, #56	; 0x38
 8009f80:	330e      	adds	r3, #14
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe fb5c 	bl	8008640 <ld_word>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009f8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d101      	bne.n	8009f96 <find_volume+0x2fa>
 8009f92:	230d      	movs	r3, #13
 8009f94:	e0f8      	b.n	800a188 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009f96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f9a:	4413      	add	r3, r2
 8009f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f9e:	8911      	ldrh	r1, [r2, #8]
 8009fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fa2:	8992      	ldrh	r2, [r2, #12]
 8009fa4:	0952      	lsrs	r2, r2, #5
 8009fa6:	b292      	uxth	r2, r2
 8009fa8:	fbb1 f2f2 	udiv	r2, r1, r2
 8009fac:	b292      	uxth	r2, r2
 8009fae:	4413      	add	r3, r2
 8009fb0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d201      	bcs.n	8009fbe <find_volume+0x322>
 8009fba:	230d      	movs	r3, #13
 8009fbc:	e0e4      	b.n	800a188 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fc6:	8952      	ldrh	r2, [r2, #10]
 8009fc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fcc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <find_volume+0x33c>
 8009fd4:	230d      	movs	r3, #13
 8009fd6:	e0d7      	b.n	800a188 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d802      	bhi.n	8009fee <find_volume+0x352>
 8009fe8:	2302      	movs	r3, #2
 8009fea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d802      	bhi.n	8009ffe <find_volume+0x362>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	1c9a      	adds	r2, r3, #2
 800a002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a004:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a008:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a00a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a00c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a00e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a010:	441a      	add	r2, r3
 800a012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a014:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a016:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01a:	441a      	add	r2, r3
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a020:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a024:	2b03      	cmp	r3, #3
 800a026:	d11e      	bne.n	800a066 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02a:	3338      	adds	r3, #56	; 0x38
 800a02c:	332a      	adds	r3, #42	; 0x2a
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fe fb06 	bl	8008640 <ld_word>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d001      	beq.n	800a03e <find_volume+0x3a2>
 800a03a:	230d      	movs	r3, #13
 800a03c:	e0a4      	b.n	800a188 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a040:	891b      	ldrh	r3, [r3, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d001      	beq.n	800a04a <find_volume+0x3ae>
 800a046:	230d      	movs	r3, #13
 800a048:	e09e      	b.n	800a188 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	3338      	adds	r3, #56	; 0x38
 800a04e:	332c      	adds	r3, #44	; 0x2c
 800a050:	4618      	mov	r0, r3
 800a052:	f7fe fb0d 	bl	8008670 <ld_dword>
 800a056:	4602      	mov	r2, r0
 800a058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05e:	69db      	ldr	r3, [r3, #28]
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	647b      	str	r3, [r7, #68]	; 0x44
 800a064:	e01f      	b.n	800a0a6 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a068:	891b      	ldrh	r3, [r3, #8]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d101      	bne.n	800a072 <find_volume+0x3d6>
 800a06e:	230d      	movs	r3, #13
 800a070:	e08a      	b.n	800a188 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a078:	441a      	add	r2, r3
 800a07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a07e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a082:	2b02      	cmp	r3, #2
 800a084:	d103      	bne.n	800a08e <find_volume+0x3f2>
 800a086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	005b      	lsls	r3, r3, #1
 800a08c:	e00a      	b.n	800a0a4 <find_volume+0x408>
 800a08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a090:	69da      	ldr	r2, [r3, #28]
 800a092:	4613      	mov	r3, r2
 800a094:	005b      	lsls	r3, r3, #1
 800a096:	4413      	add	r3, r2
 800a098:	085a      	lsrs	r2, r3, #1
 800a09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09c:	69db      	ldr	r3, [r3, #28]
 800a09e:	f003 0301 	and.w	r3, r3, #1
 800a0a2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a0a4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a8:	6a1a      	ldr	r2, [r3, #32]
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ac:	899b      	ldrh	r3, [r3, #12]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0b2:	440b      	add	r3, r1
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0b8:	8989      	ldrh	r1, [r1, #12]
 800a0ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d201      	bcs.n	800a0c6 <find_volume+0x42a>
 800a0c2:	230d      	movs	r3, #13
 800a0c4:	e060      	b.n	800a188 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0cc:	619a      	str	r2, [r3, #24]
 800a0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d0:	699a      	ldr	r2, [r3, #24]
 800a0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d8:	2280      	movs	r2, #128	; 0x80
 800a0da:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a0dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0e0:	2b03      	cmp	r3, #3
 800a0e2:	d13f      	bne.n	800a164 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e6:	3338      	adds	r3, #56	; 0x38
 800a0e8:	3330      	adds	r3, #48	; 0x30
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fe faa8 	bl	8008640 <ld_word>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d136      	bne.n	800a164 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0fe:	f7fe fd81 	bl	8008c04 <move_window>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d12d      	bne.n	800a164 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10a:	2200      	movs	r2, #0
 800a10c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a110:	3338      	adds	r3, #56	; 0x38
 800a112:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a116:	4618      	mov	r0, r3
 800a118:	f7fe fa92 	bl	8008640 <ld_word>
 800a11c:	4603      	mov	r3, r0
 800a11e:	461a      	mov	r2, r3
 800a120:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a124:	429a      	cmp	r2, r3
 800a126:	d11d      	bne.n	800a164 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12a:	3338      	adds	r3, #56	; 0x38
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fe fa9f 	bl	8008670 <ld_dword>
 800a132:	4603      	mov	r3, r0
 800a134:	4a16      	ldr	r2, [pc, #88]	; (800a190 <find_volume+0x4f4>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d114      	bne.n	800a164 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13c:	3338      	adds	r3, #56	; 0x38
 800a13e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a142:	4618      	mov	r0, r3
 800a144:	f7fe fa94 	bl	8008670 <ld_dword>
 800a148:	4603      	mov	r3, r0
 800a14a:	4a12      	ldr	r2, [pc, #72]	; (800a194 <find_volume+0x4f8>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d109      	bne.n	800a164 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a152:	3338      	adds	r3, #56	; 0x38
 800a154:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fe fa89 	bl	8008670 <ld_dword>
 800a15e:	4602      	mov	r2, r0
 800a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a162:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a166:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a16a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a16c:	4b0a      	ldr	r3, [pc, #40]	; (800a198 <find_volume+0x4fc>)
 800a16e:	881b      	ldrh	r3, [r3, #0]
 800a170:	3301      	adds	r3, #1
 800a172:	b29a      	uxth	r2, r3
 800a174:	4b08      	ldr	r3, [pc, #32]	; (800a198 <find_volume+0x4fc>)
 800a176:	801a      	strh	r2, [r3, #0]
 800a178:	4b07      	ldr	r3, [pc, #28]	; (800a198 <find_volume+0x4fc>)
 800a17a:	881a      	ldrh	r2, [r3, #0]
 800a17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a180:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a182:	f7fe fcd7 	bl	8008b34 <clear_lock>
#endif
	return FR_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3758      	adds	r7, #88	; 0x58
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	41615252 	.word	0x41615252
 800a194:	61417272 	.word	0x61417272
 800a198:	20000128 	.word	0x20000128

0800a19c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a1a6:	2309      	movs	r3, #9
 800a1a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d02e      	beq.n	800a20e <validate+0x72>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d02a      	beq.n	800a20e <validate+0x72>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d025      	beq.n	800a20e <validate+0x72>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	889a      	ldrh	r2, [r3, #4]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	88db      	ldrh	r3, [r3, #6]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d11e      	bne.n	800a20e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7fe fb33 	bl	8008840 <lock_fs>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d014      	beq.n	800a20a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	785b      	ldrb	r3, [r3, #1]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fe f98c 	bl	8008504 <disk_status>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d102      	bne.n	800a1fc <validate+0x60>
				res = FR_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	73fb      	strb	r3, [r7, #15]
 800a1fa:	e008      	b.n	800a20e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2100      	movs	r1, #0
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe fb32 	bl	800886c <unlock_fs>
 800a208:	e001      	b.n	800a20e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800a20a:	230f      	movs	r3, #15
 800a20c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d102      	bne.n	800a21a <validate+0x7e>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	e000      	b.n	800a21c <validate+0x80>
 800a21a:	2300      	movs	r3, #0
 800a21c:	683a      	ldr	r2, [r7, #0]
 800a21e:	6013      	str	r3, [r2, #0]
	return res;
 800a220:	7bfb      	ldrb	r3, [r7, #15]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
	...

0800a22c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b088      	sub	sp, #32
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	4613      	mov	r3, r2
 800a238:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a23e:	f107 0310 	add.w	r3, r7, #16
 800a242:	4618      	mov	r0, r3
 800a244:	f7ff fc90 	bl	8009b68 <get_ldnumber>
 800a248:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	da01      	bge.n	800a254 <f_mount+0x28>
 800a250:	230b      	movs	r3, #11
 800a252:	e048      	b.n	800a2e6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a254:	4a26      	ldr	r2, [pc, #152]	; (800a2f0 <f_mount+0xc4>)
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a25c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00f      	beq.n	800a284 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a264:	69b8      	ldr	r0, [r7, #24]
 800a266:	f7fe fc65 	bl	8008b34 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 fcac 	bl	800abcc <ff_del_syncobj>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d101      	bne.n	800a27e <f_mount+0x52>
 800a27a:	2302      	movs	r3, #2
 800a27c:	e033      	b.n	800a2e6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	2200      	movs	r2, #0
 800a282:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00f      	beq.n	800a2aa <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	b2da      	uxtb	r2, r3
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	3310      	adds	r3, #16
 800a298:	4619      	mov	r1, r3
 800a29a:	4610      	mov	r0, r2
 800a29c:	f000 fc7b 	bl	800ab96 <ff_cre_syncobj>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <f_mount+0x7e>
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	e01d      	b.n	800a2e6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	4910      	ldr	r1, [pc, #64]	; (800a2f0 <f_mount+0xc4>)
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d002      	beq.n	800a2c0 <f_mount+0x94>
 800a2ba:	79fb      	ldrb	r3, [r7, #7]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d001      	beq.n	800a2c4 <f_mount+0x98>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	e010      	b.n	800a2e6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a2c4:	f107 010c 	add.w	r1, r7, #12
 800a2c8:	f107 0308 	add.w	r3, r7, #8
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7ff fce4 	bl	8009c9c <find_volume>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	7dfa      	ldrb	r2, [r7, #23]
 800a2dc:	4611      	mov	r1, r2
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fe fac4 	bl	800886c <unlock_fs>
 800a2e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3720      	adds	r7, #32
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20000124 	.word	0x20000124

0800a2f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b098      	sub	sp, #96	; 0x60
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	4613      	mov	r3, r2
 800a300:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d101      	bne.n	800a30c <f_open+0x18>
 800a308:	2309      	movs	r3, #9
 800a30a:	e1aa      	b.n	800a662 <f_open+0x36e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a30c:	79fb      	ldrb	r3, [r7, #7]
 800a30e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a312:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a314:	79fa      	ldrb	r2, [r7, #7]
 800a316:	f107 0110 	add.w	r1, r7, #16
 800a31a:	f107 0308 	add.w	r3, r7, #8
 800a31e:	4618      	mov	r0, r3
 800a320:	f7ff fcbc 	bl	8009c9c <find_volume>
 800a324:	4603      	mov	r3, r0
 800a326:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a32a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f040 8187 	bne.w	800a642 <f_open+0x34e>
		dj.obj.fs = fs;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	f107 0314 	add.w	r3, r7, #20
 800a33e:	4611      	mov	r1, r2
 800a340:	4618      	mov	r0, r3
 800a342:	f7ff fb9b 	bl	8009a7c <follow_path>
 800a346:	4603      	mov	r3, r0
 800a348:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a34c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a350:	2b00      	cmp	r3, #0
 800a352:	d11a      	bne.n	800a38a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a354:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a358:	b25b      	sxtb	r3, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	da03      	bge.n	800a366 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a35e:	2306      	movs	r3, #6
 800a360:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a364:	e011      	b.n	800a38a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a366:	79fb      	ldrb	r3, [r7, #7]
 800a368:	f023 0301 	bic.w	r3, r3, #1
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	bf14      	ite	ne
 800a370:	2301      	movne	r3, #1
 800a372:	2300      	moveq	r3, #0
 800a374:	b2db      	uxtb	r3, r3
 800a376:	461a      	mov	r2, r3
 800a378:	f107 0314 	add.w	r3, r7, #20
 800a37c:	4611      	mov	r1, r2
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fe fa90 	bl	80088a4 <chk_lock>
 800a384:	4603      	mov	r3, r0
 800a386:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a38a:	79fb      	ldrb	r3, [r7, #7]
 800a38c:	f003 031c 	and.w	r3, r3, #28
 800a390:	2b00      	cmp	r3, #0
 800a392:	d07f      	beq.n	800a494 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d017      	beq.n	800a3cc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a39c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3a0:	2b04      	cmp	r3, #4
 800a3a2:	d10e      	bne.n	800a3c2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a3a4:	f7fe fada 	bl	800895c <enq_lock>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d006      	beq.n	800a3bc <f_open+0xc8>
 800a3ae:	f107 0314 	add.w	r3, r7, #20
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7ff fa42 	bl	800983c <dir_register>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	e000      	b.n	800a3be <f_open+0xca>
 800a3bc:	2312      	movs	r3, #18
 800a3be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a3c2:	79fb      	ldrb	r3, [r7, #7]
 800a3c4:	f043 0308 	orr.w	r3, r3, #8
 800a3c8:	71fb      	strb	r3, [r7, #7]
 800a3ca:	e010      	b.n	800a3ee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a3cc:	7ebb      	ldrb	r3, [r7, #26]
 800a3ce:	f003 0311 	and.w	r3, r3, #17
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d003      	beq.n	800a3de <f_open+0xea>
					res = FR_DENIED;
 800a3d6:	2307      	movs	r3, #7
 800a3d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a3dc:	e007      	b.n	800a3ee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a3de:	79fb      	ldrb	r3, [r7, #7]
 800a3e0:	f003 0304 	and.w	r3, r3, #4
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <f_open+0xfa>
 800a3e8:	2308      	movs	r3, #8
 800a3ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a3ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d168      	bne.n	800a4c8 <f_open+0x1d4>
 800a3f6:	79fb      	ldrb	r3, [r7, #7]
 800a3f8:	f003 0308 	and.w	r3, r3, #8
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d063      	beq.n	800a4c8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a400:	f7fd fe34 	bl	800806c <get_fattime>
 800a404:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a408:	330e      	adds	r3, #14
 800a40a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7fe f96d 	bl	80086ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a414:	3316      	adds	r3, #22
 800a416:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a418:	4618      	mov	r0, r3
 800a41a:	f7fe f967 	bl	80086ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a420:	330b      	adds	r3, #11
 800a422:	2220      	movs	r2, #32
 800a424:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a42a:	4611      	mov	r1, r2
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7ff f971 	bl	8009714 <ld_clust>
 800a432:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a438:	2200      	movs	r2, #0
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7ff f989 	bl	8009752 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a442:	331c      	adds	r3, #28
 800a444:	2100      	movs	r1, #0
 800a446:	4618      	mov	r0, r3
 800a448:	f7fe f950 	bl	80086ec <st_dword>
					fs->wflag = 1;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	2201      	movs	r2, #1
 800a450:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a454:	2b00      	cmp	r3, #0
 800a456:	d037      	beq.n	800a4c8 <f_open+0x1d4>
						dw = fs->winsect;
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a45c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a45e:	f107 0314 	add.w	r3, r7, #20
 800a462:	2200      	movs	r2, #0
 800a464:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a466:	4618      	mov	r0, r3
 800a468:	f7fe fe79 	bl	800915e <remove_chain>
 800a46c:	4603      	mov	r3, r0
 800a46e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a472:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a476:	2b00      	cmp	r3, #0
 800a478:	d126      	bne.n	800a4c8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fe fbc0 	bl	8008c04 <move_window>
 800a484:	4603      	mov	r3, r0
 800a486:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a48e:	3a01      	subs	r2, #1
 800a490:	615a      	str	r2, [r3, #20]
 800a492:	e019      	b.n	800a4c8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a494:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d115      	bne.n	800a4c8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a49c:	7ebb      	ldrb	r3, [r7, #26]
 800a49e:	f003 0310 	and.w	r3, r3, #16
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d003      	beq.n	800a4ae <f_open+0x1ba>
					res = FR_NO_FILE;
 800a4a6:	2304      	movs	r3, #4
 800a4a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a4ac:	e00c      	b.n	800a4c8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a4ae:	79fb      	ldrb	r3, [r7, #7]
 800a4b0:	f003 0302 	and.w	r3, r3, #2
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d007      	beq.n	800a4c8 <f_open+0x1d4>
 800a4b8:	7ebb      	ldrb	r3, [r7, #26]
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d002      	beq.n	800a4c8 <f_open+0x1d4>
						res = FR_DENIED;
 800a4c2:	2307      	movs	r3, #7
 800a4c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a4c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d128      	bne.n	800a522 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a4d0:	79fb      	ldrb	r3, [r7, #7]
 800a4d2:	f003 0308 	and.w	r3, r3, #8
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d003      	beq.n	800a4e2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a4da:	79fb      	ldrb	r3, [r7, #7]
 800a4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a4ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a4f0:	79fb      	ldrb	r3, [r7, #7]
 800a4f2:	f023 0301 	bic.w	r3, r3, #1
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	bf14      	ite	ne
 800a4fa:	2301      	movne	r3, #1
 800a4fc:	2300      	moveq	r3, #0
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	461a      	mov	r2, r3
 800a502:	f107 0314 	add.w	r3, r7, #20
 800a506:	4611      	mov	r1, r2
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fe fa49 	bl	80089a0 <inc_lock>
 800a50e:	4602      	mov	r2, r0
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d102      	bne.n	800a522 <f_open+0x22e>
 800a51c:	2302      	movs	r3, #2
 800a51e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a522:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a526:	2b00      	cmp	r3, #0
 800a528:	f040 808b 	bne.w	800a642 <f_open+0x34e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a530:	4611      	mov	r1, r2
 800a532:	4618      	mov	r0, r3
 800a534:	f7ff f8ee 	bl	8009714 <ld_clust>
 800a538:	4602      	mov	r2, r0
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a540:	331c      	adds	r3, #28
 800a542:	4618      	mov	r0, r3
 800a544:	f7fe f894 	bl	8008670 <ld_dword>
 800a548:	4602      	mov	r2, r0
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a554:	693a      	ldr	r2, [r7, #16]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	88da      	ldrh	r2, [r3, #6]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	79fa      	ldrb	r2, [r7, #7]
 800a566:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	f003 0320 	and.w	r3, r3, #32
 800a580:	2b00      	cmp	r3, #0
 800a582:	d05e      	beq.n	800a642 <f_open+0x34e>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d05a      	beq.n	800a642 <f_open+0x34e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	68da      	ldr	r2, [r3, #12]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	895b      	ldrh	r3, [r3, #10]
 800a598:	461a      	mov	r2, r3
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	899b      	ldrh	r3, [r3, #12]
 800a59e:	fb03 f302 	mul.w	r3, r3, r2
 800a5a2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	657b      	str	r3, [r7, #84]	; 0x54
 800a5b0:	e016      	b.n	800a5e0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7fe fbe1 	bl	8008d7e <get_fat>
 800a5bc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a5be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d802      	bhi.n	800a5ca <f_open+0x2d6>
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a5ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d0:	d102      	bne.n	800a5d8 <f_open+0x2e4>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a5d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	657b      	str	r3, [r7, #84]	; 0x54
 800a5e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d103      	bne.n	800a5f0 <f_open+0x2fc>
 800a5e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d8e0      	bhi.n	800a5b2 <f_open+0x2be>
				}
				fp->clust = clst;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5f4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a5f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d121      	bne.n	800a642 <f_open+0x34e>
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	899b      	ldrh	r3, [r3, #12]
 800a602:	461a      	mov	r2, r3
 800a604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a606:	fbb3 f1f2 	udiv	r1, r3, r2
 800a60a:	fb02 f201 	mul.w	r2, r2, r1
 800a60e:	1a9b      	subs	r3, r3, r2
 800a610:	2b00      	cmp	r3, #0
 800a612:	d016      	beq.n	800a642 <f_open+0x34e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a618:	4618      	mov	r0, r3
 800a61a:	f7fe fb91 	bl	8008d40 <clust2sect>
 800a61e:	6478      	str	r0, [r7, #68]	; 0x44
 800a620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a622:	2b00      	cmp	r3, #0
 800a624:	d103      	bne.n	800a62e <f_open+0x33a>
						res = FR_INT_ERR;
 800a626:	2302      	movs	r3, #2
 800a628:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a62c:	e009      	b.n	800a642 <f_open+0x34e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	899b      	ldrh	r3, [r3, #12]
 800a632:	461a      	mov	r2, r3
 800a634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a636:	fbb3 f2f2 	udiv	r2, r3, r2
 800a63a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a63c:	441a      	add	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	621a      	str	r2, [r3, #32]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a642:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a646:	2b00      	cmp	r3, #0
 800a648:	d002      	beq.n	800a650 <f_open+0x35c>
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2200      	movs	r2, #0
 800a64e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800a656:	4611      	mov	r1, r2
 800a658:	4618      	mov	r0, r3
 800a65a:	f7fe f907 	bl	800886c <unlock_fs>
 800a65e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a662:	4618      	mov	r0, r3
 800a664:	3760      	adds	r7, #96	; 0x60
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b08e      	sub	sp, #56	; 0x38
 800a66e:	af00      	add	r7, sp, #0
 800a670:	60f8      	str	r0, [r7, #12]
 800a672:	60b9      	str	r1, [r7, #8]
 800a674:	607a      	str	r2, [r7, #4]
 800a676:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	2200      	movs	r2, #0
 800a680:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f107 0214 	add.w	r2, r7, #20
 800a688:	4611      	mov	r1, r2
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7ff fd86 	bl	800a19c <validate>
 800a690:	4603      	mov	r3, r0
 800a692:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a696:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d107      	bne.n	800a6ae <f_read+0x44>
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	7d5b      	ldrb	r3, [r3, #21]
 800a6a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a6a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d009      	beq.n	800a6c2 <f_read+0x58>
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7fe f8d8 	bl	800886c <unlock_fs>
 800a6bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6c0:	e132      	b.n	800a928 <f_read+0x2be>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	7d1b      	ldrb	r3, [r3, #20]
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d106      	bne.n	800a6dc <f_read+0x72>
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	2107      	movs	r1, #7
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fe f8ca 	bl	800886c <unlock_fs>
 800a6d8:	2307      	movs	r3, #7
 800a6da:	e125      	b.n	800a928 <f_read+0x2be>
	remain = fp->obj.objsize - fp->fptr;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	68da      	ldr	r2, [r3, #12]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	699b      	ldr	r3, [r3, #24]
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	6a3b      	ldr	r3, [r7, #32]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	f240 8111 	bls.w	800a914 <f_read+0x2aa>
 800a6f2:	6a3b      	ldr	r3, [r7, #32]
 800a6f4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a6f6:	e10d      	b.n	800a914 <f_read+0x2aa>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	699b      	ldr	r3, [r3, #24]
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	8992      	ldrh	r2, [r2, #12]
 800a700:	fbb3 f1f2 	udiv	r1, r3, r2
 800a704:	fb02 f201 	mul.w	r2, r2, r1
 800a708:	1a9b      	subs	r3, r3, r2
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f040 80b4 	bne.w	800a878 <f_read+0x20e>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	699b      	ldr	r3, [r3, #24]
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	8992      	ldrh	r2, [r2, #12]
 800a718:	fbb3 f3f2 	udiv	r3, r3, r2
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	8952      	ldrh	r2, [r2, #10]
 800a720:	3a01      	subs	r2, #1
 800a722:	4013      	ands	r3, r2
 800a724:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d139      	bne.n	800a7a0 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	699b      	ldr	r3, [r3, #24]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d103      	bne.n	800a73c <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	633b      	str	r3, [r7, #48]	; 0x30
 800a73a:	e013      	b.n	800a764 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a740:	2b00      	cmp	r3, #0
 800a742:	d007      	beq.n	800a754 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	4619      	mov	r1, r3
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f7fe fe04 	bl	8009358 <clmt_clust>
 800a750:	6338      	str	r0, [r7, #48]	; 0x30
 800a752:	e007      	b.n	800a764 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	69db      	ldr	r3, [r3, #28]
 800a75a:	4619      	mov	r1, r3
 800a75c:	4610      	mov	r0, r2
 800a75e:	f7fe fb0e 	bl	8008d7e <get_fat>
 800a762:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a766:	2b01      	cmp	r3, #1
 800a768:	d809      	bhi.n	800a77e <f_read+0x114>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2202      	movs	r2, #2
 800a76e:	755a      	strb	r2, [r3, #21]
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	2102      	movs	r1, #2
 800a774:	4618      	mov	r0, r3
 800a776:	f7fe f879 	bl	800886c <unlock_fs>
 800a77a:	2302      	movs	r3, #2
 800a77c:	e0d4      	b.n	800a928 <f_read+0x2be>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a784:	d109      	bne.n	800a79a <f_read+0x130>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2201      	movs	r2, #1
 800a78a:	755a      	strb	r2, [r3, #21]
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	2101      	movs	r1, #1
 800a790:	4618      	mov	r0, r3
 800a792:	f7fe f86b 	bl	800886c <unlock_fs>
 800a796:	2301      	movs	r3, #1
 800a798:	e0c6      	b.n	800a928 <f_read+0x2be>
				fp->clust = clst;				/* Update current cluster */
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a79e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a7a0:	697a      	ldr	r2, [r7, #20]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	69db      	ldr	r3, [r3, #28]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	f7fe fac9 	bl	8008d40 <clust2sect>
 800a7ae:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d109      	bne.n	800a7ca <f_read+0x160>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2202      	movs	r2, #2
 800a7ba:	755a      	strb	r2, [r3, #21]
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	2102      	movs	r1, #2
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7fe f853 	bl	800886c <unlock_fs>
 800a7c6:	2302      	movs	r3, #2
 800a7c8:	e0ae      	b.n	800a928 <f_read+0x2be>
			sect += csect;
 800a7ca:	69ba      	ldr	r2, [r7, #24]
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	899b      	ldrh	r3, [r3, #12]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7de:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d045      	beq.n	800a872 <f_read+0x208>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a7e6:	69fa      	ldr	r2, [r7, #28]
 800a7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ea:	4413      	add	r3, r2
 800a7ec:	697a      	ldr	r2, [r7, #20]
 800a7ee:	8952      	ldrh	r2, [r2, #10]
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d905      	bls.n	800a800 <f_read+0x196>
					cc = fs->csize - csect;
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	895b      	ldrh	r3, [r3, #10]
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	7858      	ldrb	r0, [r3, #1]
 800a804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a806:	69ba      	ldr	r2, [r7, #24]
 800a808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a80a:	f7fd febb 	bl	8008584 <disk_read>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d009      	beq.n	800a828 <f_read+0x1be>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2201      	movs	r2, #1
 800a818:	755a      	strb	r2, [r3, #21]
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	2101      	movs	r1, #1
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fe f824 	bl	800886c <unlock_fs>
 800a824:	2301      	movs	r3, #1
 800a826:	e07f      	b.n	800a928 <f_read+0x2be>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	78db      	ldrb	r3, [r3, #3]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d018      	beq.n	800a862 <f_read+0x1f8>
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d911      	bls.n	800a862 <f_read+0x1f8>
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	697a      	ldr	r2, [r7, #20]
 800a848:	8992      	ldrh	r2, [r2, #12]
 800a84a:	fb02 f303 	mul.w	r3, r2, r3
 800a84e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a850:	18d0      	adds	r0, r2, r3
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	899b      	ldrh	r3, [r3, #12]
 800a85c:	461a      	mov	r2, r3
 800a85e:	f7fd ff71 	bl	8008744 <mem_cpy>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	899b      	ldrh	r3, [r3, #12]
 800a866:	461a      	mov	r2, r3
 800a868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86a:	fb02 f303 	mul.w	r3, r2, r3
 800a86e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a870:	e03c      	b.n	800a8ec <f_read+0x282>
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
			}
#endif
			fp->sect = sect;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	69ba      	ldr	r2, [r7, #24]
 800a876:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	899b      	ldrh	r3, [r3, #12]
 800a87c:	4618      	mov	r0, r3
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	697a      	ldr	r2, [r7, #20]
 800a884:	8992      	ldrh	r2, [r2, #12]
 800a886:	fbb3 f1f2 	udiv	r1, r3, r2
 800a88a:	fb02 f201 	mul.w	r2, r2, r1
 800a88e:	1a9b      	subs	r3, r3, r2
 800a890:	1ac3      	subs	r3, r0, r3
 800a892:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d901      	bls.n	800a8a0 <f_read+0x236>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 800a8a0:	697a      	ldr	r2, [r7, #20]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6a1b      	ldr	r3, [r3, #32]
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	f7fe f9ab 	bl	8008c04 <move_window>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d009      	beq.n	800a8c8 <f_read+0x25e>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	755a      	strb	r2, [r3, #21]
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	2101      	movs	r1, #1
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7fd ffd4 	bl	800886c <unlock_fs>
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e02f      	b.n	800a928 <f_read+0x2be>
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	697a      	ldr	r2, [r7, #20]
 800a8d4:	8992      	ldrh	r2, [r2, #12]
 800a8d6:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8da:	fb02 f200 	mul.w	r2, r2, r0
 800a8de:	1a9b      	subs	r3, r3, r2
 800a8e0:	440b      	add	r3, r1
 800a8e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8e8:	f7fd ff2c 	bl	8008744 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a8ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f0:	4413      	add	r3, r2
 800a8f2:	627b      	str	r3, [r7, #36]	; 0x24
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	699a      	ldr	r2, [r3, #24]
 800a8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8fa:	441a      	add	r2, r3
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	619a      	str	r2, [r3, #24]
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a906:	441a      	add	r2, r3
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	601a      	str	r2, [r3, #0]
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	f47f aeee 	bne.w	800a6f8 <f_read+0x8e>
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	2100      	movs	r1, #0
 800a920:	4618      	mov	r0, r3
 800a922:	f7fd ffa3 	bl	800886c <unlock_fs>
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3738      	adds	r7, #56	; 0x38
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b086      	sub	sp, #24
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f107 0208 	add.w	r2, r7, #8
 800a93e:	4611      	mov	r1, r2
 800a940:	4618      	mov	r0, r3
 800a942:	f7ff fc2b 	bl	800a19c <validate>
 800a946:	4603      	mov	r3, r0
 800a948:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a94a:	7dfb      	ldrb	r3, [r7, #23]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d14d      	bne.n	800a9ec <f_sync+0xbc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	7d1b      	ldrb	r3, [r3, #20]
 800a954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d047      	beq.n	800a9ec <f_sync+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a95c:	f7fd fb86 	bl	800806c <get_fattime>
 800a960:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a968:	4619      	mov	r1, r3
 800a96a:	4610      	mov	r0, r2
 800a96c:	f7fe f94a 	bl	8008c04 <move_window>
 800a970:	4603      	mov	r3, r0
 800a972:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a974:	7dfb      	ldrb	r3, [r7, #23]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d138      	bne.n	800a9ec <f_sync+0xbc>
					dir = fp->dir_ptr;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a97e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	330b      	adds	r3, #11
 800a984:	781a      	ldrb	r2, [r3, #0]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	330b      	adds	r3, #11
 800a98a:	f042 0220 	orr.w	r2, r2, #32
 800a98e:	b2d2      	uxtb	r2, r2
 800a990:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6818      	ldr	r0, [r3, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	461a      	mov	r2, r3
 800a99c:	68f9      	ldr	r1, [r7, #12]
 800a99e:	f7fe fed8 	bl	8009752 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f103 021c 	add.w	r2, r3, #28
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	4610      	mov	r0, r2
 800a9b0:	f7fd fe9c 	bl	80086ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	3316      	adds	r3, #22
 800a9b8:	6939      	ldr	r1, [r7, #16]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fd fe96 	bl	80086ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	3312      	adds	r3, #18
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fd fe75 	bl	80086b6 <st_word>
					fs->wflag = 1;
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7fe f943 	bl	8008c60 <sync_fs>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	7d1b      	ldrb	r3, [r3, #20]
 800a9e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9e6:	b2da      	uxtb	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	7dfa      	ldrb	r2, [r7, #23]
 800a9f0:	4611      	mov	r1, r2
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fd ff3a 	bl	800886c <unlock_fs>
 800a9f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3718      	adds	r7, #24
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b084      	sub	sp, #16
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f7ff ff90 	bl	800a930 <f_sync>
 800aa10:	4603      	mov	r3, r0
 800aa12:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800aa14:	7bfb      	ldrb	r3, [r7, #15]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d11d      	bne.n	800aa56 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f107 0208 	add.w	r2, r7, #8
 800aa20:	4611      	mov	r1, r2
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7ff fbba 	bl	800a19c <validate>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aa2c:	7bfb      	ldrb	r3, [r7, #15]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d111      	bne.n	800aa56 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fe f840 	bl	8008abc <dec_lock>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d102      	bne.n	800aa4c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	2100      	movs	r1, #0
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7fd ff0b 	bl	800886c <unlock_fs>
#endif
		}
	}
	return res;
 800aa56:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b090      	sub	sp, #64	; 0x40
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800aa6a:	f107 010c 	add.w	r1, r7, #12
 800aa6e:	1d3b      	adds	r3, r7, #4
 800aa70:	2200      	movs	r2, #0
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7ff f912 	bl	8009c9c <find_volume>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800aa7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d11f      	bne.n	800aac6 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	f107 030c 	add.w	r3, r7, #12
 800aa8c:	4611      	mov	r1, r2
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fe fff4 	bl	8009a7c <follow_path>
 800aa94:	4603      	mov	r3, r0
 800aa96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800aa9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d111      	bne.n	800aac6 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800aaa2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aaa6:	b25b      	sxtb	r3, r3
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	da03      	bge.n	800aab4 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800aaac:	2306      	movs	r3, #6
 800aaae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800aab2:	e008      	b.n	800aac6 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d005      	beq.n	800aac6 <f_stat+0x66>
 800aaba:	f107 030c 	add.w	r3, r7, #12
 800aabe:	6839      	ldr	r1, [r7, #0]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fe feed 	bl	80098a0 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800aacc:	4611      	mov	r1, r2
 800aace:	4618      	mov	r0, r3
 800aad0:	f7fd fecc 	bl	800886c <unlock_fs>
 800aad4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3740      	adds	r7, #64	; 0x40
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b087      	sub	sp, #28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	4613      	mov	r3, r2
 800aaec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aaf6:	4b1f      	ldr	r3, [pc, #124]	; (800ab74 <FATFS_LinkDriverEx+0x94>)
 800aaf8:	7a5b      	ldrb	r3, [r3, #9]
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d131      	bne.n	800ab64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ab00:	4b1c      	ldr	r3, [pc, #112]	; (800ab74 <FATFS_LinkDriverEx+0x94>)
 800ab02:	7a5b      	ldrb	r3, [r3, #9]
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	461a      	mov	r2, r3
 800ab08:	4b1a      	ldr	r3, [pc, #104]	; (800ab74 <FATFS_LinkDriverEx+0x94>)
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ab0e:	4b19      	ldr	r3, [pc, #100]	; (800ab74 <FATFS_LinkDriverEx+0x94>)
 800ab10:	7a5b      	ldrb	r3, [r3, #9]
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	4a17      	ldr	r2, [pc, #92]	; (800ab74 <FATFS_LinkDriverEx+0x94>)
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	4413      	add	r3, r2
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ab1e:	4b15      	ldr	r3, [pc, #84]	; (800ab74 <FATFS_LinkDriverEx+0x94>)
 800ab20:	7a5b      	ldrb	r3, [r3, #9]
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	461a      	mov	r2, r3
 800ab26:	4b13      	ldr	r3, [pc, #76]	; (800ab74 <FATFS_LinkDriverEx+0x94>)
 800ab28:	4413      	add	r3, r2
 800ab2a:	79fa      	ldrb	r2, [r7, #7]
 800ab2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ab2e:	4b11      	ldr	r3, [pc, #68]	; (800ab74 <FATFS_LinkDriverEx+0x94>)
 800ab30:	7a5b      	ldrb	r3, [r3, #9]
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	1c5a      	adds	r2, r3, #1
 800ab36:	b2d1      	uxtb	r1, r2
 800ab38:	4a0e      	ldr	r2, [pc, #56]	; (800ab74 <FATFS_LinkDriverEx+0x94>)
 800ab3a:	7251      	strb	r1, [r2, #9]
 800ab3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ab3e:	7dbb      	ldrb	r3, [r7, #22]
 800ab40:	3330      	adds	r3, #48	; 0x30
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	223a      	movs	r2, #58	; 0x3a
 800ab4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	3302      	adds	r3, #2
 800ab54:	222f      	movs	r2, #47	; 0x2f
 800ab56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	3303      	adds	r3, #3
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ab60:	2300      	movs	r3, #0
 800ab62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ab64:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	371c      	adds	r7, #28
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	2000014c 	.word	0x2000014c

0800ab78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ab82:	2200      	movs	r2, #0
 800ab84:	6839      	ldr	r1, [r7, #0]
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f7ff ffaa 	bl	800aae0 <FATFS_LinkDriverEx>
 800ab8c:	4603      	mov	r3, r0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b084      	sub	sp, #16
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	6039      	str	r1, [r7, #0]
 800aba0:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800aba2:	2200      	movs	r2, #0
 800aba4:	2101      	movs	r1, #1
 800aba6:	2001      	movs	r0, #1
 800aba8:	f000 f9cf 	bl	800af4a <osSemaphoreNew>
 800abac:	4602      	mov	r2, r0
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	bf14      	ite	ne
 800abba:	2301      	movne	r3, #1
 800abbc:	2300      	moveq	r3, #0
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	60fb      	str	r3, [r7, #12]

    return ret;
 800abc2:	68fb      	ldr	r3, [r7, #12]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3710      	adds	r7, #16
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fad7 	bl	800b188 <osSemaphoreDelete>
#endif
    return 1;
 800abda:	2301      	movs	r3, #1
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800abec:	2300      	movs	r3, #0
 800abee:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800abf0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 fa31 	bl	800b05c <osSemaphoreAcquire>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d101      	bne.n	800ac04 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800ac00:	2301      	movs	r3, #1
 800ac02:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ac04:	68fb      	ldr	r3, [r7, #12]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b082      	sub	sp, #8
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fa72 	bl	800b100 <osSemaphoreRelease>
#endif
}
 800ac1c:	bf00      	nop
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <__NVIC_SetPriority>:
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	6039      	str	r1, [r7, #0]
 800ac2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	db0a      	blt.n	800ac4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	490c      	ldr	r1, [pc, #48]	; (800ac70 <__NVIC_SetPriority+0x4c>)
 800ac3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac42:	0112      	lsls	r2, r2, #4
 800ac44:	b2d2      	uxtb	r2, r2
 800ac46:	440b      	add	r3, r1
 800ac48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ac4c:	e00a      	b.n	800ac64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	b2da      	uxtb	r2, r3
 800ac52:	4908      	ldr	r1, [pc, #32]	; (800ac74 <__NVIC_SetPriority+0x50>)
 800ac54:	79fb      	ldrb	r3, [r7, #7]
 800ac56:	f003 030f 	and.w	r3, r3, #15
 800ac5a:	3b04      	subs	r3, #4
 800ac5c:	0112      	lsls	r2, r2, #4
 800ac5e:	b2d2      	uxtb	r2, r2
 800ac60:	440b      	add	r3, r1
 800ac62:	761a      	strb	r2, [r3, #24]
}
 800ac64:	bf00      	nop
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	e000e100 	.word	0xe000e100
 800ac74:	e000ed00 	.word	0xe000ed00

0800ac78 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ac7c:	4b05      	ldr	r3, [pc, #20]	; (800ac94 <SysTick_Handler+0x1c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ac80:	f002 ff62 	bl	800db48 <xTaskGetSchedulerState>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d001      	beq.n	800ac8e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ac8a:	f001 f865 	bl	800bd58 <xPortSysTickHandler>
  }
}
 800ac8e:	bf00      	nop
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	e000e010 	.word	0xe000e010

0800ac98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	f06f 0004 	mvn.w	r0, #4
 800aca2:	f7ff ffbf 	bl	800ac24 <__NVIC_SetPriority>
#endif
}
 800aca6:	bf00      	nop
 800aca8:	bd80      	pop	{r7, pc}
	...

0800acac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acb2:	f3ef 8305 	mrs	r3, IPSR
 800acb6:	603b      	str	r3, [r7, #0]
  return(result);
 800acb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d003      	beq.n	800acc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800acbe:	f06f 0305 	mvn.w	r3, #5
 800acc2:	607b      	str	r3, [r7, #4]
 800acc4:	e00c      	b.n	800ace0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800acc6:	4b0a      	ldr	r3, [pc, #40]	; (800acf0 <osKernelInitialize+0x44>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d105      	bne.n	800acda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800acce:	4b08      	ldr	r3, [pc, #32]	; (800acf0 <osKernelInitialize+0x44>)
 800acd0:	2201      	movs	r2, #1
 800acd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800acd4:	2300      	movs	r3, #0
 800acd6:	607b      	str	r3, [r7, #4]
 800acd8:	e002      	b.n	800ace0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800acda:	f04f 33ff 	mov.w	r3, #4294967295
 800acde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ace0:	687b      	ldr	r3, [r7, #4]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	370c      	adds	r7, #12
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	20000158 	.word	0x20000158

0800acf4 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800acfa:	f002 ff25 	bl	800db48 <xTaskGetSchedulerState>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d004      	beq.n	800ad0e <osKernelGetState+0x1a>
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	d105      	bne.n	800ad14 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800ad08:	2302      	movs	r3, #2
 800ad0a:	607b      	str	r3, [r7, #4]
      break;
 800ad0c:	e00c      	b.n	800ad28 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	607b      	str	r3, [r7, #4]
      break;
 800ad12:	e009      	b.n	800ad28 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800ad14:	4b07      	ldr	r3, [pc, #28]	; (800ad34 <osKernelGetState+0x40>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d102      	bne.n	800ad22 <osKernelGetState+0x2e>
        state = osKernelReady;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800ad20:	e001      	b.n	800ad26 <osKernelGetState+0x32>
        state = osKernelInactive;
 800ad22:	2300      	movs	r3, #0
 800ad24:	607b      	str	r3, [r7, #4]
      break;
 800ad26:	bf00      	nop
  }

  return (state);
 800ad28:	687b      	ldr	r3, [r7, #4]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	20000158 	.word	0x20000158

0800ad38 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad3e:	f3ef 8305 	mrs	r3, IPSR
 800ad42:	603b      	str	r3, [r7, #0]
  return(result);
 800ad44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d003      	beq.n	800ad52 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ad4a:	f06f 0305 	mvn.w	r3, #5
 800ad4e:	607b      	str	r3, [r7, #4]
 800ad50:	e010      	b.n	800ad74 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ad52:	4b0b      	ldr	r3, [pc, #44]	; (800ad80 <osKernelStart+0x48>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d109      	bne.n	800ad6e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ad5a:	f7ff ff9d 	bl	800ac98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ad5e:	4b08      	ldr	r3, [pc, #32]	; (800ad80 <osKernelStart+0x48>)
 800ad60:	2202      	movs	r2, #2
 800ad62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ad64:	f002 fa82 	bl	800d26c <vTaskStartScheduler>
      stat = osOK;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	607b      	str	r3, [r7, #4]
 800ad6c:	e002      	b.n	800ad74 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ad6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad74:	687b      	ldr	r3, [r7, #4]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	20000158 	.word	0x20000158

0800ad84 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad8a:	f3ef 8305 	mrs	r3, IPSR
 800ad8e:	603b      	str	r3, [r7, #0]
  return(result);
 800ad90:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d003      	beq.n	800ad9e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ad96:	f002 fb95 	bl	800d4c4 <xTaskGetTickCountFromISR>
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	e002      	b.n	800ada4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800ad9e:	f002 fb81 	bl	800d4a4 <xTaskGetTickCount>
 800ada2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ada4:	687b      	ldr	r3, [r7, #4]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800adae:	b580      	push	{r7, lr}
 800adb0:	b08e      	sub	sp, #56	; 0x38
 800adb2:	af04      	add	r7, sp, #16
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	60b9      	str	r1, [r7, #8]
 800adb8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800adba:	2300      	movs	r3, #0
 800adbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adbe:	f3ef 8305 	mrs	r3, IPSR
 800adc2:	617b      	str	r3, [r7, #20]
  return(result);
 800adc4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d17e      	bne.n	800aec8 <osThreadNew+0x11a>
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d07b      	beq.n	800aec8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800add0:	2380      	movs	r3, #128	; 0x80
 800add2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800add4:	2318      	movs	r3, #24
 800add6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800add8:	2300      	movs	r3, #0
 800adda:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800addc:	f04f 33ff 	mov.w	r3, #4294967295
 800ade0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d045      	beq.n	800ae74 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d002      	beq.n	800adf6 <osThreadNew+0x48>
        name = attr->name;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d002      	beq.n	800ae04 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d008      	beq.n	800ae1c <osThreadNew+0x6e>
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	2b38      	cmp	r3, #56	; 0x38
 800ae0e:	d805      	bhi.n	800ae1c <osThreadNew+0x6e>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	f003 0301 	and.w	r3, r3, #1
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d001      	beq.n	800ae20 <osThreadNew+0x72>
        return (NULL);
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	e054      	b.n	800aeca <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d003      	beq.n	800ae30 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	695b      	ldr	r3, [r3, #20]
 800ae2c:	089b      	lsrs	r3, r3, #2
 800ae2e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00e      	beq.n	800ae56 <osThreadNew+0xa8>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	2bbb      	cmp	r3, #187	; 0xbb
 800ae3e:	d90a      	bls.n	800ae56 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d006      	beq.n	800ae56 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	695b      	ldr	r3, [r3, #20]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <osThreadNew+0xa8>
        mem = 1;
 800ae50:	2301      	movs	r3, #1
 800ae52:	61bb      	str	r3, [r7, #24]
 800ae54:	e010      	b.n	800ae78 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10c      	bne.n	800ae78 <osThreadNew+0xca>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d108      	bne.n	800ae78 <osThreadNew+0xca>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d104      	bne.n	800ae78 <osThreadNew+0xca>
          mem = 0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	61bb      	str	r3, [r7, #24]
 800ae72:	e001      	b.n	800ae78 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ae74:	2300      	movs	r3, #0
 800ae76:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d110      	bne.n	800aea0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae86:	9202      	str	r2, [sp, #8]
 800ae88:	9301      	str	r3, [sp, #4]
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	9300      	str	r3, [sp, #0]
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	6a3a      	ldr	r2, [r7, #32]
 800ae92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f001 fffd 	bl	800ce94 <xTaskCreateStatic>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	613b      	str	r3, [r7, #16]
 800ae9e:	e013      	b.n	800aec8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d110      	bne.n	800aec8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aea6:	6a3b      	ldr	r3, [r7, #32]
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	f107 0310 	add.w	r3, r7, #16
 800aeae:	9301      	str	r3, [sp, #4]
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	9300      	str	r3, [sp, #0]
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f002 f848 	bl	800cf4e <xTaskCreate>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d001      	beq.n	800aec8 <osThreadNew+0x11a>
            hTask = NULL;
 800aec4:	2300      	movs	r3, #0
 800aec6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aec8:	693b      	ldr	r3, [r7, #16]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3728      	adds	r7, #40	; 0x28
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
	...

0800aed4 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeda:	f3ef 8305 	mrs	r3, IPSR
 800aede:	603b      	str	r3, [r7, #0]
  return(result);
 800aee0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d003      	beq.n	800aeee <osThreadYield+0x1a>
    stat = osErrorISR;
 800aee6:	f06f 0305 	mvn.w	r3, #5
 800aeea:	607b      	str	r3, [r7, #4]
 800aeec:	e009      	b.n	800af02 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800aeee:	2300      	movs	r3, #0
 800aef0:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800aef2:	4b07      	ldr	r3, [pc, #28]	; (800af10 <osThreadYield+0x3c>)
 800aef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800af02:	687b      	ldr	r3, [r7, #4]
}
 800af04:	4618      	mov	r0, r3
 800af06:	370c      	adds	r7, #12
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr
 800af10:	e000ed04 	.word	0xe000ed04

0800af14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af1c:	f3ef 8305 	mrs	r3, IPSR
 800af20:	60bb      	str	r3, [r7, #8]
  return(result);
 800af22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af24:	2b00      	cmp	r3, #0
 800af26:	d003      	beq.n	800af30 <osDelay+0x1c>
    stat = osErrorISR;
 800af28:	f06f 0305 	mvn.w	r3, #5
 800af2c:	60fb      	str	r3, [r7, #12]
 800af2e:	e007      	b.n	800af40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800af30:	2300      	movs	r3, #0
 800af32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d002      	beq.n	800af40 <osDelay+0x2c>
      vTaskDelay(ticks);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f002 f962 	bl	800d204 <vTaskDelay>
    }
  }

  return (stat);
 800af40:	68fb      	ldr	r3, [r7, #12]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b08a      	sub	sp, #40	; 0x28
 800af4e:	af02      	add	r7, sp, #8
 800af50:	60f8      	str	r0, [r7, #12]
 800af52:	60b9      	str	r1, [r7, #8]
 800af54:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800af56:	2300      	movs	r3, #0
 800af58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af5a:	f3ef 8305 	mrs	r3, IPSR
 800af5e:	613b      	str	r3, [r7, #16]
  return(result);
 800af60:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800af62:	2b00      	cmp	r3, #0
 800af64:	d175      	bne.n	800b052 <osSemaphoreNew+0x108>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d072      	beq.n	800b052 <osSemaphoreNew+0x108>
 800af6c:	68ba      	ldr	r2, [r7, #8]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	429a      	cmp	r2, r3
 800af72:	d86e      	bhi.n	800b052 <osSemaphoreNew+0x108>
    mem = -1;
 800af74:	f04f 33ff 	mov.w	r3, #4294967295
 800af78:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d015      	beq.n	800afac <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d006      	beq.n	800af96 <osSemaphoreNew+0x4c>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	2b4f      	cmp	r3, #79	; 0x4f
 800af8e:	d902      	bls.n	800af96 <osSemaphoreNew+0x4c>
        mem = 1;
 800af90:	2301      	movs	r3, #1
 800af92:	61bb      	str	r3, [r7, #24]
 800af94:	e00c      	b.n	800afb0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d108      	bne.n	800afb0 <osSemaphoreNew+0x66>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d104      	bne.n	800afb0 <osSemaphoreNew+0x66>
          mem = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	61bb      	str	r3, [r7, #24]
 800afaa:	e001      	b.n	800afb0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800afac:	2300      	movs	r3, #0
 800afae:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb6:	d04c      	beq.n	800b052 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d128      	bne.n	800b010 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d10a      	bne.n	800afda <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	2203      	movs	r2, #3
 800afca:	9200      	str	r2, [sp, #0]
 800afcc:	2200      	movs	r2, #0
 800afce:	2100      	movs	r1, #0
 800afd0:	2001      	movs	r0, #1
 800afd2:	f000 ffb9 	bl	800bf48 <xQueueGenericCreateStatic>
 800afd6:	61f8      	str	r0, [r7, #28]
 800afd8:	e005      	b.n	800afe6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800afda:	2203      	movs	r2, #3
 800afdc:	2100      	movs	r1, #0
 800afde:	2001      	movs	r0, #1
 800afe0:	f001 f82a 	bl	800c038 <xQueueGenericCreate>
 800afe4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d022      	beq.n	800b032 <osSemaphoreNew+0xe8>
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d01f      	beq.n	800b032 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800aff2:	2300      	movs	r3, #0
 800aff4:	2200      	movs	r2, #0
 800aff6:	2100      	movs	r1, #0
 800aff8:	69f8      	ldr	r0, [r7, #28]
 800affa:	f001 f8e5 	bl	800c1c8 <xQueueGenericSend>
 800affe:	4603      	mov	r3, r0
 800b000:	2b01      	cmp	r3, #1
 800b002:	d016      	beq.n	800b032 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b004:	69f8      	ldr	r0, [r7, #28]
 800b006:	f001 fd71 	bl	800caec <vQueueDelete>
            hSemaphore = NULL;
 800b00a:	2300      	movs	r3, #0
 800b00c:	61fb      	str	r3, [r7, #28]
 800b00e:	e010      	b.n	800b032 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	2b01      	cmp	r3, #1
 800b014:	d108      	bne.n	800b028 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	461a      	mov	r2, r3
 800b01c:	68b9      	ldr	r1, [r7, #8]
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f001 f867 	bl	800c0f2 <xQueueCreateCountingSemaphoreStatic>
 800b024:	61f8      	str	r0, [r7, #28]
 800b026:	e004      	b.n	800b032 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b028:	68b9      	ldr	r1, [r7, #8]
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f001 f898 	bl	800c160 <xQueueCreateCountingSemaphore>
 800b030:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00c      	beq.n	800b052 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d003      	beq.n	800b046 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	617b      	str	r3, [r7, #20]
 800b044:	e001      	b.n	800b04a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b046:	2300      	movs	r3, #0
 800b048:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b04a:	6979      	ldr	r1, [r7, #20]
 800b04c:	69f8      	ldr	r0, [r7, #28]
 800b04e:	f001 fe99 	bl	800cd84 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b052:	69fb      	ldr	r3, [r7, #28]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3720      	adds	r7, #32
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d103      	bne.n	800b07c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b074:	f06f 0303 	mvn.w	r3, #3
 800b078:	617b      	str	r3, [r7, #20]
 800b07a:	e039      	b.n	800b0f0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b07c:	f3ef 8305 	mrs	r3, IPSR
 800b080:	60fb      	str	r3, [r7, #12]
  return(result);
 800b082:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b084:	2b00      	cmp	r3, #0
 800b086:	d022      	beq.n	800b0ce <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d003      	beq.n	800b096 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b08e:	f06f 0303 	mvn.w	r3, #3
 800b092:	617b      	str	r3, [r7, #20]
 800b094:	e02c      	b.n	800b0f0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b096:	2300      	movs	r3, #0
 800b098:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b09a:	f107 0308 	add.w	r3, r7, #8
 800b09e:	461a      	mov	r2, r3
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	6938      	ldr	r0, [r7, #16]
 800b0a4:	f001 fca2 	bl	800c9ec <xQueueReceiveFromISR>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d003      	beq.n	800b0b6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b0ae:	f06f 0302 	mvn.w	r3, #2
 800b0b2:	617b      	str	r3, [r7, #20]
 800b0b4:	e01c      	b.n	800b0f0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d019      	beq.n	800b0f0 <osSemaphoreAcquire+0x94>
 800b0bc:	4b0f      	ldr	r3, [pc, #60]	; (800b0fc <osSemaphoreAcquire+0xa0>)
 800b0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0c2:	601a      	str	r2, [r3, #0]
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	e010      	b.n	800b0f0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6938      	ldr	r0, [r7, #16]
 800b0d2:	f001 fb7f 	bl	800c7d4 <xQueueSemaphoreTake>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d009      	beq.n	800b0f0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b0e2:	f06f 0301 	mvn.w	r3, #1
 800b0e6:	617b      	str	r3, [r7, #20]
 800b0e8:	e002      	b.n	800b0f0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b0ea:	f06f 0302 	mvn.w	r3, #2
 800b0ee:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b0f0:	697b      	ldr	r3, [r7, #20]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3718      	adds	r7, #24
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	e000ed04 	.word	0xe000ed04

0800b100 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b100:	b580      	push	{r7, lr}
 800b102:	b086      	sub	sp, #24
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b10c:	2300      	movs	r3, #0
 800b10e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d103      	bne.n	800b11e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b116:	f06f 0303 	mvn.w	r3, #3
 800b11a:	617b      	str	r3, [r7, #20]
 800b11c:	e02c      	b.n	800b178 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b11e:	f3ef 8305 	mrs	r3, IPSR
 800b122:	60fb      	str	r3, [r7, #12]
  return(result);
 800b124:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b126:	2b00      	cmp	r3, #0
 800b128:	d01a      	beq.n	800b160 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b12a:	2300      	movs	r3, #0
 800b12c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b12e:	f107 0308 	add.w	r3, r7, #8
 800b132:	4619      	mov	r1, r3
 800b134:	6938      	ldr	r0, [r7, #16]
 800b136:	f001 f9e0 	bl	800c4fa <xQueueGiveFromISR>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d003      	beq.n	800b148 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b140:	f06f 0302 	mvn.w	r3, #2
 800b144:	617b      	str	r3, [r7, #20]
 800b146:	e017      	b.n	800b178 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d014      	beq.n	800b178 <osSemaphoreRelease+0x78>
 800b14e:	4b0d      	ldr	r3, [pc, #52]	; (800b184 <osSemaphoreRelease+0x84>)
 800b150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b154:	601a      	str	r2, [r3, #0]
 800b156:	f3bf 8f4f 	dsb	sy
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	e00b      	b.n	800b178 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b160:	2300      	movs	r3, #0
 800b162:	2200      	movs	r2, #0
 800b164:	2100      	movs	r1, #0
 800b166:	6938      	ldr	r0, [r7, #16]
 800b168:	f001 f82e 	bl	800c1c8 <xQueueGenericSend>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d002      	beq.n	800b178 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b172:	f06f 0302 	mvn.w	r3, #2
 800b176:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b178:	697b      	ldr	r3, [r7, #20]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3718      	adds	r7, #24
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	e000ed04 	.word	0xe000ed04

0800b188 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800b188:	b580      	push	{r7, lr}
 800b18a:	b086      	sub	sp, #24
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b194:	f3ef 8305 	mrs	r3, IPSR
 800b198:	60fb      	str	r3, [r7, #12]
  return(result);
 800b19a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d003      	beq.n	800b1a8 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800b1a0:	f06f 0305 	mvn.w	r3, #5
 800b1a4:	617b      	str	r3, [r7, #20]
 800b1a6:	e00e      	b.n	800b1c6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d103      	bne.n	800b1b6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800b1ae:	f06f 0303 	mvn.w	r3, #3
 800b1b2:	617b      	str	r3, [r7, #20]
 800b1b4:	e007      	b.n	800b1c6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800b1b6:	6938      	ldr	r0, [r7, #16]
 800b1b8:	f001 fe0e 	bl	800cdd8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800b1c0:	6938      	ldr	r0, [r7, #16]
 800b1c2:	f001 fc93 	bl	800caec <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b1c6:	697b      	ldr	r3, [r7, #20]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3718      	adds	r7, #24
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b08a      	sub	sp, #40	; 0x28
 800b1d4:	af02      	add	r7, sp, #8
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1e0:	f3ef 8305 	mrs	r3, IPSR
 800b1e4:	613b      	str	r3, [r7, #16]
  return(result);
 800b1e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d15f      	bne.n	800b2ac <osMessageQueueNew+0xdc>
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d05c      	beq.n	800b2ac <osMessageQueueNew+0xdc>
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d059      	beq.n	800b2ac <osMessageQueueNew+0xdc>
    mem = -1;
 800b1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d029      	beq.n	800b258 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d012      	beq.n	800b232 <osMessageQueueNew+0x62>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	2b4f      	cmp	r3, #79	; 0x4f
 800b212:	d90e      	bls.n	800b232 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d00a      	beq.n	800b232 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	695a      	ldr	r2, [r3, #20]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	68b9      	ldr	r1, [r7, #8]
 800b224:	fb01 f303 	mul.w	r3, r1, r3
 800b228:	429a      	cmp	r2, r3
 800b22a:	d302      	bcc.n	800b232 <osMessageQueueNew+0x62>
        mem = 1;
 800b22c:	2301      	movs	r3, #1
 800b22e:	61bb      	str	r3, [r7, #24]
 800b230:	e014      	b.n	800b25c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d110      	bne.n	800b25c <osMessageQueueNew+0x8c>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d10c      	bne.n	800b25c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b246:	2b00      	cmp	r3, #0
 800b248:	d108      	bne.n	800b25c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d104      	bne.n	800b25c <osMessageQueueNew+0x8c>
          mem = 0;
 800b252:	2300      	movs	r3, #0
 800b254:	61bb      	str	r3, [r7, #24]
 800b256:	e001      	b.n	800b25c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b258:	2300      	movs	r3, #0
 800b25a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d10b      	bne.n	800b27a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	691a      	ldr	r2, [r3, #16]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	2100      	movs	r1, #0
 800b26c:	9100      	str	r1, [sp, #0]
 800b26e:	68b9      	ldr	r1, [r7, #8]
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f000 fe69 	bl	800bf48 <xQueueGenericCreateStatic>
 800b276:	61f8      	str	r0, [r7, #28]
 800b278:	e008      	b.n	800b28c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d105      	bne.n	800b28c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b280:	2200      	movs	r2, #0
 800b282:	68b9      	ldr	r1, [r7, #8]
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	f000 fed7 	bl	800c038 <xQueueGenericCreate>
 800b28a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00c      	beq.n	800b2ac <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d003      	beq.n	800b2a0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	617b      	str	r3, [r7, #20]
 800b29e:	e001      	b.n	800b2a4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b2a4:	6979      	ldr	r1, [r7, #20]
 800b2a6:	69f8      	ldr	r0, [r7, #28]
 800b2a8:	f001 fd6c 	bl	800cd84 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b2ac:	69fb      	ldr	r3, [r7, #28]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3720      	adds	r7, #32
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b088      	sub	sp, #32
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	603b      	str	r3, [r7, #0]
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2d0:	f3ef 8305 	mrs	r3, IPSR
 800b2d4:	617b      	str	r3, [r7, #20]
  return(result);
 800b2d6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d028      	beq.n	800b32e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b2dc:	69bb      	ldr	r3, [r7, #24]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d005      	beq.n	800b2ee <osMessageQueuePut+0x36>
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d002      	beq.n	800b2ee <osMessageQueuePut+0x36>
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d003      	beq.n	800b2f6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b2ee:	f06f 0303 	mvn.w	r3, #3
 800b2f2:	61fb      	str	r3, [r7, #28]
 800b2f4:	e038      	b.n	800b368 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b2fa:	f107 0210 	add.w	r2, r7, #16
 800b2fe:	2300      	movs	r3, #0
 800b300:	68b9      	ldr	r1, [r7, #8]
 800b302:	69b8      	ldr	r0, [r7, #24]
 800b304:	f001 f85e 	bl	800c3c4 <xQueueGenericSendFromISR>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d003      	beq.n	800b316 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b30e:	f06f 0302 	mvn.w	r3, #2
 800b312:	61fb      	str	r3, [r7, #28]
 800b314:	e028      	b.n	800b368 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d025      	beq.n	800b368 <osMessageQueuePut+0xb0>
 800b31c:	4b15      	ldr	r3, [pc, #84]	; (800b374 <osMessageQueuePut+0xbc>)
 800b31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b322:	601a      	str	r2, [r3, #0]
 800b324:	f3bf 8f4f 	dsb	sy
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	e01c      	b.n	800b368 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d002      	beq.n	800b33a <osMessageQueuePut+0x82>
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d103      	bne.n	800b342 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b33a:	f06f 0303 	mvn.w	r3, #3
 800b33e:	61fb      	str	r3, [r7, #28]
 800b340:	e012      	b.n	800b368 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b342:	2300      	movs	r3, #0
 800b344:	683a      	ldr	r2, [r7, #0]
 800b346:	68b9      	ldr	r1, [r7, #8]
 800b348:	69b8      	ldr	r0, [r7, #24]
 800b34a:	f000 ff3d 	bl	800c1c8 <xQueueGenericSend>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b01      	cmp	r3, #1
 800b352:	d009      	beq.n	800b368 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d003      	beq.n	800b362 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b35a:	f06f 0301 	mvn.w	r3, #1
 800b35e:	61fb      	str	r3, [r7, #28]
 800b360:	e002      	b.n	800b368 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b362:	f06f 0302 	mvn.w	r3, #2
 800b366:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b368:	69fb      	ldr	r3, [r7, #28]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3720      	adds	r7, #32
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	e000ed04 	.word	0xe000ed04

0800b378 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b378:	b580      	push	{r7, lr}
 800b37a:	b088      	sub	sp, #32
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	607a      	str	r2, [r7, #4]
 800b384:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b38a:	2300      	movs	r3, #0
 800b38c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b38e:	f3ef 8305 	mrs	r3, IPSR
 800b392:	617b      	str	r3, [r7, #20]
  return(result);
 800b394:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b396:	2b00      	cmp	r3, #0
 800b398:	d028      	beq.n	800b3ec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d005      	beq.n	800b3ac <osMessageQueueGet+0x34>
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d002      	beq.n	800b3ac <osMessageQueueGet+0x34>
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d003      	beq.n	800b3b4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b3ac:	f06f 0303 	mvn.w	r3, #3
 800b3b0:	61fb      	str	r3, [r7, #28]
 800b3b2:	e037      	b.n	800b424 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b3b8:	f107 0310 	add.w	r3, r7, #16
 800b3bc:	461a      	mov	r2, r3
 800b3be:	68b9      	ldr	r1, [r7, #8]
 800b3c0:	69b8      	ldr	r0, [r7, #24]
 800b3c2:	f001 fb13 	bl	800c9ec <xQueueReceiveFromISR>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d003      	beq.n	800b3d4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b3cc:	f06f 0302 	mvn.w	r3, #2
 800b3d0:	61fb      	str	r3, [r7, #28]
 800b3d2:	e027      	b.n	800b424 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d024      	beq.n	800b424 <osMessageQueueGet+0xac>
 800b3da:	4b15      	ldr	r3, [pc, #84]	; (800b430 <osMessageQueueGet+0xb8>)
 800b3dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3e0:	601a      	str	r2, [r3, #0]
 800b3e2:	f3bf 8f4f 	dsb	sy
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	e01b      	b.n	800b424 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d002      	beq.n	800b3f8 <osMessageQueueGet+0x80>
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d103      	bne.n	800b400 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b3f8:	f06f 0303 	mvn.w	r3, #3
 800b3fc:	61fb      	str	r3, [r7, #28]
 800b3fe:	e011      	b.n	800b424 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b400:	683a      	ldr	r2, [r7, #0]
 800b402:	68b9      	ldr	r1, [r7, #8]
 800b404:	69b8      	ldr	r0, [r7, #24]
 800b406:	f001 f905 	bl	800c614 <xQueueReceive>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d009      	beq.n	800b424 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d003      	beq.n	800b41e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b416:	f06f 0301 	mvn.w	r3, #1
 800b41a:	61fb      	str	r3, [r7, #28]
 800b41c:	e002      	b.n	800b424 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b41e:	f06f 0302 	mvn.w	r3, #2
 800b422:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b424:	69fb      	ldr	r3, [r7, #28]
}
 800b426:	4618      	mov	r0, r3
 800b428:	3720      	adds	r7, #32
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	e000ed04 	.word	0xe000ed04

0800b434 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b434:	b480      	push	{r7}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	4a07      	ldr	r2, [pc, #28]	; (800b460 <vApplicationGetIdleTaskMemory+0x2c>)
 800b444:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	4a06      	ldr	r2, [pc, #24]	; (800b464 <vApplicationGetIdleTaskMemory+0x30>)
 800b44a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2280      	movs	r2, #128	; 0x80
 800b450:	601a      	str	r2, [r3, #0]
}
 800b452:	bf00      	nop
 800b454:	3714      	adds	r7, #20
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	2000015c 	.word	0x2000015c
 800b464:	20000218 	.word	0x20000218

0800b468 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	4a07      	ldr	r2, [pc, #28]	; (800b494 <vApplicationGetTimerTaskMemory+0x2c>)
 800b478:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	4a06      	ldr	r2, [pc, #24]	; (800b498 <vApplicationGetTimerTaskMemory+0x30>)
 800b47e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b486:	601a      	str	r2, [r3, #0]
}
 800b488:	bf00      	nop
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr
 800b494:	20000418 	.word	0x20000418
 800b498:	200004d4 	.word	0x200004d4

0800b49c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08a      	sub	sp, #40	; 0x28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b4a8:	f001 ff50 	bl	800d34c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b4ac:	4b5b      	ldr	r3, [pc, #364]	; (800b61c <pvPortMalloc+0x180>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b4b4:	f000 f920 	bl	800b6f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b4b8:	4b59      	ldr	r3, [pc, #356]	; (800b620 <pvPortMalloc+0x184>)
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4013      	ands	r3, r2
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f040 8093 	bne.w	800b5ec <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d01d      	beq.n	800b508 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b4cc:	2208      	movs	r2, #8
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f003 0307 	and.w	r3, r3, #7
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d014      	beq.n	800b508 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f023 0307 	bic.w	r3, r3, #7
 800b4e4:	3308      	adds	r3, #8
 800b4e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f003 0307 	and.w	r3, r3, #7
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00a      	beq.n	800b508 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f6:	f383 8811 	msr	BASEPRI, r3
 800b4fa:	f3bf 8f6f 	isb	sy
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b504:	bf00      	nop
 800b506:	e7fe      	b.n	800b506 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d06e      	beq.n	800b5ec <pvPortMalloc+0x150>
 800b50e:	4b45      	ldr	r3, [pc, #276]	; (800b624 <pvPortMalloc+0x188>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	429a      	cmp	r2, r3
 800b516:	d869      	bhi.n	800b5ec <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b518:	4b43      	ldr	r3, [pc, #268]	; (800b628 <pvPortMalloc+0x18c>)
 800b51a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b51c:	4b42      	ldr	r3, [pc, #264]	; (800b628 <pvPortMalloc+0x18c>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b522:	e004      	b.n	800b52e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b526:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	429a      	cmp	r2, r3
 800b536:	d903      	bls.n	800b540 <pvPortMalloc+0xa4>
 800b538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d1f1      	bne.n	800b524 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b540:	4b36      	ldr	r3, [pc, #216]	; (800b61c <pvPortMalloc+0x180>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b546:	429a      	cmp	r2, r3
 800b548:	d050      	beq.n	800b5ec <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b54a:	6a3b      	ldr	r3, [r7, #32]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2208      	movs	r2, #8
 800b550:	4413      	add	r3, r2
 800b552:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	6a3b      	ldr	r3, [r7, #32]
 800b55a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55e:	685a      	ldr	r2, [r3, #4]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	1ad2      	subs	r2, r2, r3
 800b564:	2308      	movs	r3, #8
 800b566:	005b      	lsls	r3, r3, #1
 800b568:	429a      	cmp	r2, r3
 800b56a:	d91f      	bls.n	800b5ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b56c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4413      	add	r3, r2
 800b572:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	f003 0307 	and.w	r3, r3, #7
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d00a      	beq.n	800b594 <pvPortMalloc+0xf8>
	__asm volatile
 800b57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b582:	f383 8811 	msr	BASEPRI, r3
 800b586:	f3bf 8f6f 	isb	sy
 800b58a:	f3bf 8f4f 	dsb	sy
 800b58e:	613b      	str	r3, [r7, #16]
}
 800b590:	bf00      	nop
 800b592:	e7fe      	b.n	800b592 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	1ad2      	subs	r2, r2, r3
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5a6:	69b8      	ldr	r0, [r7, #24]
 800b5a8:	f000 f908 	bl	800b7bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5ac:	4b1d      	ldr	r3, [pc, #116]	; (800b624 <pvPortMalloc+0x188>)
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	1ad3      	subs	r3, r2, r3
 800b5b6:	4a1b      	ldr	r2, [pc, #108]	; (800b624 <pvPortMalloc+0x188>)
 800b5b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5ba:	4b1a      	ldr	r3, [pc, #104]	; (800b624 <pvPortMalloc+0x188>)
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	4b1b      	ldr	r3, [pc, #108]	; (800b62c <pvPortMalloc+0x190>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d203      	bcs.n	800b5ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b5c6:	4b17      	ldr	r3, [pc, #92]	; (800b624 <pvPortMalloc+0x188>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a18      	ldr	r2, [pc, #96]	; (800b62c <pvPortMalloc+0x190>)
 800b5cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d0:	685a      	ldr	r2, [r3, #4]
 800b5d2:	4b13      	ldr	r3, [pc, #76]	; (800b620 <pvPortMalloc+0x184>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	431a      	orrs	r2, r3
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5de:	2200      	movs	r2, #0
 800b5e0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b5e2:	4b13      	ldr	r3, [pc, #76]	; (800b630 <pvPortMalloc+0x194>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	4a11      	ldr	r2, [pc, #68]	; (800b630 <pvPortMalloc+0x194>)
 800b5ea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b5ec:	f001 febc 	bl	800d368 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	f003 0307 	and.w	r3, r3, #7
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00a      	beq.n	800b610 <pvPortMalloc+0x174>
	__asm volatile
 800b5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fe:	f383 8811 	msr	BASEPRI, r3
 800b602:	f3bf 8f6f 	isb	sy
 800b606:	f3bf 8f4f 	dsb	sy
 800b60a:	60fb      	str	r3, [r7, #12]
}
 800b60c:	bf00      	nop
 800b60e:	e7fe      	b.n	800b60e <pvPortMalloc+0x172>
	return pvReturn;
 800b610:	69fb      	ldr	r3, [r7, #28]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3728      	adds	r7, #40	; 0x28
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	200044dc 	.word	0x200044dc
 800b620:	200044f0 	.word	0x200044f0
 800b624:	200044e0 	.word	0x200044e0
 800b628:	200044d4 	.word	0x200044d4
 800b62c:	200044e4 	.word	0x200044e4
 800b630:	200044e8 	.word	0x200044e8

0800b634 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b086      	sub	sp, #24
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d04d      	beq.n	800b6e2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b646:	2308      	movs	r3, #8
 800b648:	425b      	negs	r3, r3
 800b64a:	697a      	ldr	r2, [r7, #20]
 800b64c:	4413      	add	r3, r2
 800b64e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	685a      	ldr	r2, [r3, #4]
 800b658:	4b24      	ldr	r3, [pc, #144]	; (800b6ec <vPortFree+0xb8>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4013      	ands	r3, r2
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d10a      	bne.n	800b678 <vPortFree+0x44>
	__asm volatile
 800b662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b666:	f383 8811 	msr	BASEPRI, r3
 800b66a:	f3bf 8f6f 	isb	sy
 800b66e:	f3bf 8f4f 	dsb	sy
 800b672:	60fb      	str	r3, [r7, #12]
}
 800b674:	bf00      	nop
 800b676:	e7fe      	b.n	800b676 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d00a      	beq.n	800b696 <vPortFree+0x62>
	__asm volatile
 800b680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b684:	f383 8811 	msr	BASEPRI, r3
 800b688:	f3bf 8f6f 	isb	sy
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	60bb      	str	r3, [r7, #8]
}
 800b692:	bf00      	nop
 800b694:	e7fe      	b.n	800b694 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	685a      	ldr	r2, [r3, #4]
 800b69a:	4b14      	ldr	r3, [pc, #80]	; (800b6ec <vPortFree+0xb8>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4013      	ands	r3, r2
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d01e      	beq.n	800b6e2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d11a      	bne.n	800b6e2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	685a      	ldr	r2, [r3, #4]
 800b6b0:	4b0e      	ldr	r3, [pc, #56]	; (800b6ec <vPortFree+0xb8>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	43db      	mvns	r3, r3
 800b6b6:	401a      	ands	r2, r3
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b6bc:	f001 fe46 	bl	800d34c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	685a      	ldr	r2, [r3, #4]
 800b6c4:	4b0a      	ldr	r3, [pc, #40]	; (800b6f0 <vPortFree+0xbc>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	4a09      	ldr	r2, [pc, #36]	; (800b6f0 <vPortFree+0xbc>)
 800b6cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b6ce:	6938      	ldr	r0, [r7, #16]
 800b6d0:	f000 f874 	bl	800b7bc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b6d4:	4b07      	ldr	r3, [pc, #28]	; (800b6f4 <vPortFree+0xc0>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	4a06      	ldr	r2, [pc, #24]	; (800b6f4 <vPortFree+0xc0>)
 800b6dc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b6de:	f001 fe43 	bl	800d368 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b6e2:	bf00      	nop
 800b6e4:	3718      	adds	r7, #24
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	200044f0 	.word	0x200044f0
 800b6f0:	200044e0 	.word	0x200044e0
 800b6f4:	200044ec 	.word	0x200044ec

0800b6f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b6fe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b702:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b704:	4b27      	ldr	r3, [pc, #156]	; (800b7a4 <prvHeapInit+0xac>)
 800b706:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f003 0307 	and.w	r3, r3, #7
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00c      	beq.n	800b72c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	3307      	adds	r3, #7
 800b716:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f023 0307 	bic.w	r3, r3, #7
 800b71e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	1ad3      	subs	r3, r2, r3
 800b726:	4a1f      	ldr	r2, [pc, #124]	; (800b7a4 <prvHeapInit+0xac>)
 800b728:	4413      	add	r3, r2
 800b72a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b730:	4a1d      	ldr	r2, [pc, #116]	; (800b7a8 <prvHeapInit+0xb0>)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b736:	4b1c      	ldr	r3, [pc, #112]	; (800b7a8 <prvHeapInit+0xb0>)
 800b738:	2200      	movs	r2, #0
 800b73a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	4413      	add	r3, r2
 800b742:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b744:	2208      	movs	r2, #8
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	1a9b      	subs	r3, r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f023 0307 	bic.w	r3, r3, #7
 800b752:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	4a15      	ldr	r2, [pc, #84]	; (800b7ac <prvHeapInit+0xb4>)
 800b758:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b75a:	4b14      	ldr	r3, [pc, #80]	; (800b7ac <prvHeapInit+0xb4>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2200      	movs	r2, #0
 800b760:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b762:	4b12      	ldr	r3, [pc, #72]	; (800b7ac <prvHeapInit+0xb4>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2200      	movs	r2, #0
 800b768:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	1ad2      	subs	r2, r2, r3
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b778:	4b0c      	ldr	r3, [pc, #48]	; (800b7ac <prvHeapInit+0xb4>)
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	4a0a      	ldr	r2, [pc, #40]	; (800b7b0 <prvHeapInit+0xb8>)
 800b786:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	4a09      	ldr	r2, [pc, #36]	; (800b7b4 <prvHeapInit+0xbc>)
 800b78e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b790:	4b09      	ldr	r3, [pc, #36]	; (800b7b8 <prvHeapInit+0xc0>)
 800b792:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b796:	601a      	str	r2, [r3, #0]
}
 800b798:	bf00      	nop
 800b79a:	3714      	adds	r7, #20
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr
 800b7a4:	200008d4 	.word	0x200008d4
 800b7a8:	200044d4 	.word	0x200044d4
 800b7ac:	200044dc 	.word	0x200044dc
 800b7b0:	200044e4 	.word	0x200044e4
 800b7b4:	200044e0 	.word	0x200044e0
 800b7b8:	200044f0 	.word	0x200044f0

0800b7bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b085      	sub	sp, #20
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b7c4:	4b28      	ldr	r3, [pc, #160]	; (800b868 <prvInsertBlockIntoFreeList+0xac>)
 800b7c6:	60fb      	str	r3, [r7, #12]
 800b7c8:	e002      	b.n	800b7d0 <prvInsertBlockIntoFreeList+0x14>
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	60fb      	str	r3, [r7, #12]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d8f7      	bhi.n	800b7ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d108      	bne.n	800b7fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	685a      	ldr	r2, [r3, #4]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	441a      	add	r2, r3
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	68ba      	ldr	r2, [r7, #8]
 800b808:	441a      	add	r2, r3
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d118      	bne.n	800b844 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	4b15      	ldr	r3, [pc, #84]	; (800b86c <prvInsertBlockIntoFreeList+0xb0>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d00d      	beq.n	800b83a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	685a      	ldr	r2, [r3, #4]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	441a      	add	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	601a      	str	r2, [r3, #0]
 800b838:	e008      	b.n	800b84c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b83a:	4b0c      	ldr	r3, [pc, #48]	; (800b86c <prvInsertBlockIntoFreeList+0xb0>)
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	601a      	str	r2, [r3, #0]
 800b842:	e003      	b.n	800b84c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	429a      	cmp	r2, r3
 800b852:	d002      	beq.n	800b85a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b85a:	bf00      	nop
 800b85c:	3714      	adds	r7, #20
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	200044d4 	.word	0x200044d4
 800b86c:	200044dc 	.word	0x200044dc

0800b870 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f103 0208 	add.w	r2, r3, #8
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f04f 32ff 	mov.w	r2, #4294967295
 800b888:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f103 0208 	add.w	r2, r3, #8
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f103 0208 	add.w	r2, r3, #8
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b8be:	bf00      	nop
 800b8c0:	370c      	adds	r7, #12
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr

0800b8ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8ca:	b480      	push	{r7}
 800b8cc:	b085      	sub	sp, #20
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	689a      	ldr	r2, [r3, #8]
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	683a      	ldr	r2, [r7, #0]
 800b8ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	1c5a      	adds	r2, r3, #1
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	601a      	str	r2, [r3, #0]
}
 800b906:	bf00      	nop
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b912:	b480      	push	{r7}
 800b914:	b085      	sub	sp, #20
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
 800b91a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b928:	d103      	bne.n	800b932 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	60fb      	str	r3, [r7, #12]
 800b930:	e00c      	b.n	800b94c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	3308      	adds	r3, #8
 800b936:	60fb      	str	r3, [r7, #12]
 800b938:	e002      	b.n	800b940 <vListInsert+0x2e>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	60fb      	str	r3, [r7, #12]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68ba      	ldr	r2, [r7, #8]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d2f6      	bcs.n	800b93a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	685a      	ldr	r2, [r3, #4]
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	683a      	ldr	r2, [r7, #0]
 800b95a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	683a      	ldr	r2, [r7, #0]
 800b966:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	1c5a      	adds	r2, r3, #1
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	601a      	str	r2, [r3, #0]
}
 800b978:	bf00      	nop
 800b97a:	3714      	adds	r7, #20
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	691b      	ldr	r3, [r3, #16]
 800b990:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	6892      	ldr	r2, [r2, #8]
 800b99a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	6852      	ldr	r2, [r2, #4]
 800b9a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d103      	bne.n	800b9b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	689a      	ldr	r2, [r3, #8]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	1e5a      	subs	r2, r3, #1
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3714      	adds	r7, #20
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	3b04      	subs	r3, #4
 800b9e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b9f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	3b04      	subs	r3, #4
 800b9f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	f023 0201 	bic.w	r2, r3, #1
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	3b04      	subs	r3, #4
 800ba06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba08:	4a0c      	ldr	r2, [pc, #48]	; (800ba3c <pxPortInitialiseStack+0x64>)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	3b14      	subs	r3, #20
 800ba12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	3b04      	subs	r3, #4
 800ba1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f06f 0202 	mvn.w	r2, #2
 800ba26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	3b20      	subs	r3, #32
 800ba2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3714      	adds	r7, #20
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr
 800ba3c:	0800ba41 	.word	0x0800ba41

0800ba40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba40:	b480      	push	{r7}
 800ba42:	b085      	sub	sp, #20
 800ba44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba46:	2300      	movs	r3, #0
 800ba48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba4a:	4b12      	ldr	r3, [pc, #72]	; (800ba94 <prvTaskExitError+0x54>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba52:	d00a      	beq.n	800ba6a <prvTaskExitError+0x2a>
	__asm volatile
 800ba54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba58:	f383 8811 	msr	BASEPRI, r3
 800ba5c:	f3bf 8f6f 	isb	sy
 800ba60:	f3bf 8f4f 	dsb	sy
 800ba64:	60fb      	str	r3, [r7, #12]
}
 800ba66:	bf00      	nop
 800ba68:	e7fe      	b.n	800ba68 <prvTaskExitError+0x28>
	__asm volatile
 800ba6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6e:	f383 8811 	msr	BASEPRI, r3
 800ba72:	f3bf 8f6f 	isb	sy
 800ba76:	f3bf 8f4f 	dsb	sy
 800ba7a:	60bb      	str	r3, [r7, #8]
}
 800ba7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba7e:	bf00      	nop
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d0fc      	beq.n	800ba80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba86:	bf00      	nop
 800ba88:	bf00      	nop
 800ba8a:	3714      	adds	r7, #20
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	20000010 	.word	0x20000010
	...

0800baa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800baa0:	4b07      	ldr	r3, [pc, #28]	; (800bac0 <pxCurrentTCBConst2>)
 800baa2:	6819      	ldr	r1, [r3, #0]
 800baa4:	6808      	ldr	r0, [r1, #0]
 800baa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baaa:	f380 8809 	msr	PSP, r0
 800baae:	f3bf 8f6f 	isb	sy
 800bab2:	f04f 0000 	mov.w	r0, #0
 800bab6:	f380 8811 	msr	BASEPRI, r0
 800baba:	4770      	bx	lr
 800babc:	f3af 8000 	nop.w

0800bac0 <pxCurrentTCBConst2>:
 800bac0:	200044fc 	.word	0x200044fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bac4:	bf00      	nop
 800bac6:	bf00      	nop

0800bac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bac8:	4808      	ldr	r0, [pc, #32]	; (800baec <prvPortStartFirstTask+0x24>)
 800baca:	6800      	ldr	r0, [r0, #0]
 800bacc:	6800      	ldr	r0, [r0, #0]
 800bace:	f380 8808 	msr	MSP, r0
 800bad2:	f04f 0000 	mov.w	r0, #0
 800bad6:	f380 8814 	msr	CONTROL, r0
 800bada:	b662      	cpsie	i
 800badc:	b661      	cpsie	f
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	f3bf 8f6f 	isb	sy
 800bae6:	df00      	svc	0
 800bae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800baea:	bf00      	nop
 800baec:	e000ed08 	.word	0xe000ed08

0800baf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800baf6:	4b46      	ldr	r3, [pc, #280]	; (800bc10 <xPortStartScheduler+0x120>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a46      	ldr	r2, [pc, #280]	; (800bc14 <xPortStartScheduler+0x124>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d10a      	bne.n	800bb16 <xPortStartScheduler+0x26>
	__asm volatile
 800bb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb04:	f383 8811 	msr	BASEPRI, r3
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	613b      	str	r3, [r7, #16]
}
 800bb12:	bf00      	nop
 800bb14:	e7fe      	b.n	800bb14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb16:	4b3e      	ldr	r3, [pc, #248]	; (800bc10 <xPortStartScheduler+0x120>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a3f      	ldr	r2, [pc, #252]	; (800bc18 <xPortStartScheduler+0x128>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d10a      	bne.n	800bb36 <xPortStartScheduler+0x46>
	__asm volatile
 800bb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	60fb      	str	r3, [r7, #12]
}
 800bb32:	bf00      	nop
 800bb34:	e7fe      	b.n	800bb34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb36:	4b39      	ldr	r3, [pc, #228]	; (800bc1c <xPortStartScheduler+0x12c>)
 800bb38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	22ff      	movs	r2, #255	; 0xff
 800bb46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb50:	78fb      	ldrb	r3, [r7, #3]
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb58:	b2da      	uxtb	r2, r3
 800bb5a:	4b31      	ldr	r3, [pc, #196]	; (800bc20 <xPortStartScheduler+0x130>)
 800bb5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb5e:	4b31      	ldr	r3, [pc, #196]	; (800bc24 <xPortStartScheduler+0x134>)
 800bb60:	2207      	movs	r2, #7
 800bb62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb64:	e009      	b.n	800bb7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bb66:	4b2f      	ldr	r3, [pc, #188]	; (800bc24 <xPortStartScheduler+0x134>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	4a2d      	ldr	r2, [pc, #180]	; (800bc24 <xPortStartScheduler+0x134>)
 800bb6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb70:	78fb      	ldrb	r3, [r7, #3]
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	005b      	lsls	r3, r3, #1
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb7a:	78fb      	ldrb	r3, [r7, #3]
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb82:	2b80      	cmp	r3, #128	; 0x80
 800bb84:	d0ef      	beq.n	800bb66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb86:	4b27      	ldr	r3, [pc, #156]	; (800bc24 <xPortStartScheduler+0x134>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f1c3 0307 	rsb	r3, r3, #7
 800bb8e:	2b04      	cmp	r3, #4
 800bb90:	d00a      	beq.n	800bba8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	60bb      	str	r3, [r7, #8]
}
 800bba4:	bf00      	nop
 800bba6:	e7fe      	b.n	800bba6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bba8:	4b1e      	ldr	r3, [pc, #120]	; (800bc24 <xPortStartScheduler+0x134>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	021b      	lsls	r3, r3, #8
 800bbae:	4a1d      	ldr	r2, [pc, #116]	; (800bc24 <xPortStartScheduler+0x134>)
 800bbb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bbb2:	4b1c      	ldr	r3, [pc, #112]	; (800bc24 <xPortStartScheduler+0x134>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bbba:	4a1a      	ldr	r2, [pc, #104]	; (800bc24 <xPortStartScheduler+0x134>)
 800bbbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	b2da      	uxtb	r2, r3
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bbc6:	4b18      	ldr	r3, [pc, #96]	; (800bc28 <xPortStartScheduler+0x138>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a17      	ldr	r2, [pc, #92]	; (800bc28 <xPortStartScheduler+0x138>)
 800bbcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bbd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bbd2:	4b15      	ldr	r3, [pc, #84]	; (800bc28 <xPortStartScheduler+0x138>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a14      	ldr	r2, [pc, #80]	; (800bc28 <xPortStartScheduler+0x138>)
 800bbd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bbdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bbde:	f000 f8dd 	bl	800bd9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bbe2:	4b12      	ldr	r3, [pc, #72]	; (800bc2c <xPortStartScheduler+0x13c>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bbe8:	f000 f8fc 	bl	800bde4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bbec:	4b10      	ldr	r3, [pc, #64]	; (800bc30 <xPortStartScheduler+0x140>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a0f      	ldr	r2, [pc, #60]	; (800bc30 <xPortStartScheduler+0x140>)
 800bbf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bbf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bbf8:	f7ff ff66 	bl	800bac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bbfc:	f001 fd2e 	bl	800d65c <vTaskSwitchContext>
	prvTaskExitError();
 800bc00:	f7ff ff1e 	bl	800ba40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3718      	adds	r7, #24
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	e000ed00 	.word	0xe000ed00
 800bc14:	410fc271 	.word	0x410fc271
 800bc18:	410fc270 	.word	0x410fc270
 800bc1c:	e000e400 	.word	0xe000e400
 800bc20:	200044f4 	.word	0x200044f4
 800bc24:	200044f8 	.word	0x200044f8
 800bc28:	e000ed20 	.word	0xe000ed20
 800bc2c:	20000010 	.word	0x20000010
 800bc30:	e000ef34 	.word	0xe000ef34

0800bc34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
	__asm volatile
 800bc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3e:	f383 8811 	msr	BASEPRI, r3
 800bc42:	f3bf 8f6f 	isb	sy
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	607b      	str	r3, [r7, #4]
}
 800bc4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc4e:	4b0f      	ldr	r3, [pc, #60]	; (800bc8c <vPortEnterCritical+0x58>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	3301      	adds	r3, #1
 800bc54:	4a0d      	ldr	r2, [pc, #52]	; (800bc8c <vPortEnterCritical+0x58>)
 800bc56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc58:	4b0c      	ldr	r3, [pc, #48]	; (800bc8c <vPortEnterCritical+0x58>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d10f      	bne.n	800bc80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc60:	4b0b      	ldr	r3, [pc, #44]	; (800bc90 <vPortEnterCritical+0x5c>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00a      	beq.n	800bc80 <vPortEnterCritical+0x4c>
	__asm volatile
 800bc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6e:	f383 8811 	msr	BASEPRI, r3
 800bc72:	f3bf 8f6f 	isb	sy
 800bc76:	f3bf 8f4f 	dsb	sy
 800bc7a:	603b      	str	r3, [r7, #0]
}
 800bc7c:	bf00      	nop
 800bc7e:	e7fe      	b.n	800bc7e <vPortEnterCritical+0x4a>
	}
}
 800bc80:	bf00      	nop
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	20000010 	.word	0x20000010
 800bc90:	e000ed04 	.word	0xe000ed04

0800bc94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc9a:	4b12      	ldr	r3, [pc, #72]	; (800bce4 <vPortExitCritical+0x50>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d10a      	bne.n	800bcb8 <vPortExitCritical+0x24>
	__asm volatile
 800bca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca6:	f383 8811 	msr	BASEPRI, r3
 800bcaa:	f3bf 8f6f 	isb	sy
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	607b      	str	r3, [r7, #4]
}
 800bcb4:	bf00      	nop
 800bcb6:	e7fe      	b.n	800bcb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bcb8:	4b0a      	ldr	r3, [pc, #40]	; (800bce4 <vPortExitCritical+0x50>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	4a09      	ldr	r2, [pc, #36]	; (800bce4 <vPortExitCritical+0x50>)
 800bcc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bcc2:	4b08      	ldr	r3, [pc, #32]	; (800bce4 <vPortExitCritical+0x50>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d105      	bne.n	800bcd6 <vPortExitCritical+0x42>
 800bcca:	2300      	movs	r3, #0
 800bccc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bcd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bcd6:	bf00      	nop
 800bcd8:	370c      	adds	r7, #12
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	20000010 	.word	0x20000010
	...

0800bcf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bcf0:	f3ef 8009 	mrs	r0, PSP
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	4b15      	ldr	r3, [pc, #84]	; (800bd50 <pxCurrentTCBConst>)
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	f01e 0f10 	tst.w	lr, #16
 800bd00:	bf08      	it	eq
 800bd02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bd06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0a:	6010      	str	r0, [r2, #0]
 800bd0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bd14:	f380 8811 	msr	BASEPRI, r0
 800bd18:	f3bf 8f4f 	dsb	sy
 800bd1c:	f3bf 8f6f 	isb	sy
 800bd20:	f001 fc9c 	bl	800d65c <vTaskSwitchContext>
 800bd24:	f04f 0000 	mov.w	r0, #0
 800bd28:	f380 8811 	msr	BASEPRI, r0
 800bd2c:	bc09      	pop	{r0, r3}
 800bd2e:	6819      	ldr	r1, [r3, #0]
 800bd30:	6808      	ldr	r0, [r1, #0]
 800bd32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd36:	f01e 0f10 	tst.w	lr, #16
 800bd3a:	bf08      	it	eq
 800bd3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd40:	f380 8809 	msr	PSP, r0
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop
 800bd4c:	f3af 8000 	nop.w

0800bd50 <pxCurrentTCBConst>:
 800bd50:	200044fc 	.word	0x200044fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd54:	bf00      	nop
 800bd56:	bf00      	nop

0800bd58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd62:	f383 8811 	msr	BASEPRI, r3
 800bd66:	f3bf 8f6f 	isb	sy
 800bd6a:	f3bf 8f4f 	dsb	sy
 800bd6e:	607b      	str	r3, [r7, #4]
}
 800bd70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd72:	f001 fbb9 	bl	800d4e8 <xTaskIncrementTick>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d003      	beq.n	800bd84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd7c:	4b06      	ldr	r3, [pc, #24]	; (800bd98 <xPortSysTickHandler+0x40>)
 800bd7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd82:	601a      	str	r2, [r3, #0]
 800bd84:	2300      	movs	r3, #0
 800bd86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	f383 8811 	msr	BASEPRI, r3
}
 800bd8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd90:	bf00      	nop
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	e000ed04 	.word	0xe000ed04

0800bd9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bda0:	4b0b      	ldr	r3, [pc, #44]	; (800bdd0 <vPortSetupTimerInterrupt+0x34>)
 800bda2:	2200      	movs	r2, #0
 800bda4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bda6:	4b0b      	ldr	r3, [pc, #44]	; (800bdd4 <vPortSetupTimerInterrupt+0x38>)
 800bda8:	2200      	movs	r2, #0
 800bdaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bdac:	4b0a      	ldr	r3, [pc, #40]	; (800bdd8 <vPortSetupTimerInterrupt+0x3c>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a0a      	ldr	r2, [pc, #40]	; (800bddc <vPortSetupTimerInterrupt+0x40>)
 800bdb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bdb6:	099b      	lsrs	r3, r3, #6
 800bdb8:	4a09      	ldr	r2, [pc, #36]	; (800bde0 <vPortSetupTimerInterrupt+0x44>)
 800bdba:	3b01      	subs	r3, #1
 800bdbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bdbe:	4b04      	ldr	r3, [pc, #16]	; (800bdd0 <vPortSetupTimerInterrupt+0x34>)
 800bdc0:	2207      	movs	r2, #7
 800bdc2:	601a      	str	r2, [r3, #0]
}
 800bdc4:	bf00      	nop
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop
 800bdd0:	e000e010 	.word	0xe000e010
 800bdd4:	e000e018 	.word	0xe000e018
 800bdd8:	20000004 	.word	0x20000004
 800bddc:	10624dd3 	.word	0x10624dd3
 800bde0:	e000e014 	.word	0xe000e014

0800bde4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bde4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bdf4 <vPortEnableVFP+0x10>
 800bde8:	6801      	ldr	r1, [r0, #0]
 800bdea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bdee:	6001      	str	r1, [r0, #0]
 800bdf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bdf2:	bf00      	nop
 800bdf4:	e000ed88 	.word	0xe000ed88

0800bdf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdfe:	f3ef 8305 	mrs	r3, IPSR
 800be02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2b0f      	cmp	r3, #15
 800be08:	d914      	bls.n	800be34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800be0a:	4a17      	ldr	r2, [pc, #92]	; (800be68 <vPortValidateInterruptPriority+0x70>)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	4413      	add	r3, r2
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800be14:	4b15      	ldr	r3, [pc, #84]	; (800be6c <vPortValidateInterruptPriority+0x74>)
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	7afa      	ldrb	r2, [r7, #11]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d20a      	bcs.n	800be34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800be1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be22:	f383 8811 	msr	BASEPRI, r3
 800be26:	f3bf 8f6f 	isb	sy
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	607b      	str	r3, [r7, #4]
}
 800be30:	bf00      	nop
 800be32:	e7fe      	b.n	800be32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be34:	4b0e      	ldr	r3, [pc, #56]	; (800be70 <vPortValidateInterruptPriority+0x78>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be3c:	4b0d      	ldr	r3, [pc, #52]	; (800be74 <vPortValidateInterruptPriority+0x7c>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	429a      	cmp	r2, r3
 800be42:	d90a      	bls.n	800be5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be48:	f383 8811 	msr	BASEPRI, r3
 800be4c:	f3bf 8f6f 	isb	sy
 800be50:	f3bf 8f4f 	dsb	sy
 800be54:	603b      	str	r3, [r7, #0]
}
 800be56:	bf00      	nop
 800be58:	e7fe      	b.n	800be58 <vPortValidateInterruptPriority+0x60>
	}
 800be5a:	bf00      	nop
 800be5c:	3714      	adds	r7, #20
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr
 800be66:	bf00      	nop
 800be68:	e000e3f0 	.word	0xe000e3f0
 800be6c:	200044f4 	.word	0x200044f4
 800be70:	e000ed0c 	.word	0xe000ed0c
 800be74:	200044f8 	.word	0x200044f8

0800be78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d10a      	bne.n	800bea2 <xQueueGenericReset+0x2a>
	__asm volatile
 800be8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be90:	f383 8811 	msr	BASEPRI, r3
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	f3bf 8f4f 	dsb	sy
 800be9c:	60bb      	str	r3, [r7, #8]
}
 800be9e:	bf00      	nop
 800bea0:	e7fe      	b.n	800bea0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bea2:	f7ff fec7 	bl	800bc34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beae:	68f9      	ldr	r1, [r7, #12]
 800beb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800beb2:	fb01 f303 	mul.w	r3, r1, r3
 800beb6:	441a      	add	r2, r3
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2200      	movs	r2, #0
 800bec0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bed2:	3b01      	subs	r3, #1
 800bed4:	68f9      	ldr	r1, [r7, #12]
 800bed6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bed8:	fb01 f303 	mul.w	r3, r1, r3
 800bedc:	441a      	add	r2, r3
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	22ff      	movs	r2, #255	; 0xff
 800bee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	22ff      	movs	r2, #255	; 0xff
 800beee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d114      	bne.n	800bf22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d01a      	beq.n	800bf36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	3310      	adds	r3, #16
 800bf04:	4618      	mov	r0, r3
 800bf06:	f001 fc5d 	bl	800d7c4 <xTaskRemoveFromEventList>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d012      	beq.n	800bf36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bf10:	4b0c      	ldr	r3, [pc, #48]	; (800bf44 <xQueueGenericReset+0xcc>)
 800bf12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf16:	601a      	str	r2, [r3, #0]
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	e009      	b.n	800bf36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	3310      	adds	r3, #16
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7ff fca2 	bl	800b870 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	3324      	adds	r3, #36	; 0x24
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7ff fc9d 	bl	800b870 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bf36:	f7ff fead 	bl	800bc94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bf3a:	2301      	movs	r3, #1
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	e000ed04 	.word	0xe000ed04

0800bf48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b08e      	sub	sp, #56	; 0x38
 800bf4c:	af02      	add	r7, sp, #8
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	607a      	str	r2, [r7, #4]
 800bf54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d10a      	bne.n	800bf72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bf5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf60:	f383 8811 	msr	BASEPRI, r3
 800bf64:	f3bf 8f6f 	isb	sy
 800bf68:	f3bf 8f4f 	dsb	sy
 800bf6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf6e:	bf00      	nop
 800bf70:	e7fe      	b.n	800bf70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10a      	bne.n	800bf8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7c:	f383 8811 	msr	BASEPRI, r3
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf8a:	bf00      	nop
 800bf8c:	e7fe      	b.n	800bf8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d002      	beq.n	800bf9a <xQueueGenericCreateStatic+0x52>
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d001      	beq.n	800bf9e <xQueueGenericCreateStatic+0x56>
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e000      	b.n	800bfa0 <xQueueGenericCreateStatic+0x58>
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d10a      	bne.n	800bfba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa8:	f383 8811 	msr	BASEPRI, r3
 800bfac:	f3bf 8f6f 	isb	sy
 800bfb0:	f3bf 8f4f 	dsb	sy
 800bfb4:	623b      	str	r3, [r7, #32]
}
 800bfb6:	bf00      	nop
 800bfb8:	e7fe      	b.n	800bfb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d102      	bne.n	800bfc6 <xQueueGenericCreateStatic+0x7e>
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d101      	bne.n	800bfca <xQueueGenericCreateStatic+0x82>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e000      	b.n	800bfcc <xQueueGenericCreateStatic+0x84>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d10a      	bne.n	800bfe6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd4:	f383 8811 	msr	BASEPRI, r3
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	61fb      	str	r3, [r7, #28]
}
 800bfe2:	bf00      	nop
 800bfe4:	e7fe      	b.n	800bfe4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bfe6:	2350      	movs	r3, #80	; 0x50
 800bfe8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	2b50      	cmp	r3, #80	; 0x50
 800bfee:	d00a      	beq.n	800c006 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff4:	f383 8811 	msr	BASEPRI, r3
 800bff8:	f3bf 8f6f 	isb	sy
 800bffc:	f3bf 8f4f 	dsb	sy
 800c000:	61bb      	str	r3, [r7, #24]
}
 800c002:	bf00      	nop
 800c004:	e7fe      	b.n	800c004 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c006:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d00d      	beq.n	800c02e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c014:	2201      	movs	r2, #1
 800c016:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c01a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	4613      	mov	r3, r2
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	68b9      	ldr	r1, [r7, #8]
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f000 f83f 	bl	800c0ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c030:	4618      	mov	r0, r3
 800c032:	3730      	adds	r7, #48	; 0x30
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b08a      	sub	sp, #40	; 0x28
 800c03c:	af02      	add	r7, sp, #8
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	4613      	mov	r3, r2
 800c044:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d10a      	bne.n	800c062 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c050:	f383 8811 	msr	BASEPRI, r3
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f3bf 8f4f 	dsb	sy
 800c05c:	613b      	str	r3, [r7, #16]
}
 800c05e:	bf00      	nop
 800c060:	e7fe      	b.n	800c060 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	fb02 f303 	mul.w	r3, r2, r3
 800c06a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c06c:	69fb      	ldr	r3, [r7, #28]
 800c06e:	3350      	adds	r3, #80	; 0x50
 800c070:	4618      	mov	r0, r3
 800c072:	f7ff fa13 	bl	800b49c <pvPortMalloc>
 800c076:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d011      	beq.n	800c0a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	3350      	adds	r3, #80	; 0x50
 800c086:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	2200      	movs	r2, #0
 800c08c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c090:	79fa      	ldrb	r2, [r7, #7]
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	4613      	mov	r3, r2
 800c098:	697a      	ldr	r2, [r7, #20]
 800c09a:	68b9      	ldr	r1, [r7, #8]
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f000 f805 	bl	800c0ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c0a2:	69bb      	ldr	r3, [r7, #24]
	}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3720      	adds	r7, #32
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	607a      	str	r2, [r7, #4]
 800c0b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d103      	bne.n	800c0c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	69ba      	ldr	r2, [r7, #24]
 800c0c4:	601a      	str	r2, [r3, #0]
 800c0c6:	e002      	b.n	800c0ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c0d4:	69bb      	ldr	r3, [r7, #24]
 800c0d6:	68ba      	ldr	r2, [r7, #8]
 800c0d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c0da:	2101      	movs	r1, #1
 800c0dc:	69b8      	ldr	r0, [r7, #24]
 800c0de:	f7ff fecb 	bl	800be78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	78fa      	ldrb	r2, [r7, #3]
 800c0e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c0ea:	bf00      	nop
 800c0ec:	3710      	adds	r7, #16
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b08a      	sub	sp, #40	; 0x28
 800c0f6:	af02      	add	r7, sp, #8
 800c0f8:	60f8      	str	r0, [r7, #12]
 800c0fa:	60b9      	str	r1, [r7, #8]
 800c0fc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10a      	bne.n	800c11a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c108:	f383 8811 	msr	BASEPRI, r3
 800c10c:	f3bf 8f6f 	isb	sy
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	61bb      	str	r3, [r7, #24]
}
 800c116:	bf00      	nop
 800c118:	e7fe      	b.n	800c118 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d90a      	bls.n	800c138 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	f383 8811 	msr	BASEPRI, r3
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	617b      	str	r3, [r7, #20]
}
 800c134:	bf00      	nop
 800c136:	e7fe      	b.n	800c136 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c138:	2302      	movs	r3, #2
 800c13a:	9300      	str	r3, [sp, #0]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	2100      	movs	r1, #0
 800c142:	68f8      	ldr	r0, [r7, #12]
 800c144:	f7ff ff00 	bl	800bf48 <xQueueGenericCreateStatic>
 800c148:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d002      	beq.n	800c156 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c156:	69fb      	ldr	r3, [r7, #28]
	}
 800c158:	4618      	mov	r0, r3
 800c15a:	3720      	adds	r7, #32
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c160:	b580      	push	{r7, lr}
 800c162:	b086      	sub	sp, #24
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10a      	bne.n	800c186 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	613b      	str	r3, [r7, #16]
}
 800c182:	bf00      	nop
 800c184:	e7fe      	b.n	800c184 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d90a      	bls.n	800c1a4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c192:	f383 8811 	msr	BASEPRI, r3
 800c196:	f3bf 8f6f 	isb	sy
 800c19a:	f3bf 8f4f 	dsb	sy
 800c19e:	60fb      	str	r3, [r7, #12]
}
 800c1a0:	bf00      	nop
 800c1a2:	e7fe      	b.n	800c1a2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c1a4:	2202      	movs	r2, #2
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f7ff ff45 	bl	800c038 <xQueueGenericCreate>
 800c1ae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d002      	beq.n	800c1bc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	683a      	ldr	r2, [r7, #0]
 800c1ba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c1bc:	697b      	ldr	r3, [r7, #20]
	}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3718      	adds	r7, #24
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
	...

0800c1c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b08e      	sub	sp, #56	; 0x38
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
 800c1d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d10a      	bne.n	800c1fa <xQueueGenericSend+0x32>
	__asm volatile
 800c1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e8:	f383 8811 	msr	BASEPRI, r3
 800c1ec:	f3bf 8f6f 	isb	sy
 800c1f0:	f3bf 8f4f 	dsb	sy
 800c1f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c1f6:	bf00      	nop
 800c1f8:	e7fe      	b.n	800c1f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d103      	bne.n	800c208 <xQueueGenericSend+0x40>
 800c200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c204:	2b00      	cmp	r3, #0
 800c206:	d101      	bne.n	800c20c <xQueueGenericSend+0x44>
 800c208:	2301      	movs	r3, #1
 800c20a:	e000      	b.n	800c20e <xQueueGenericSend+0x46>
 800c20c:	2300      	movs	r3, #0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d10a      	bne.n	800c228 <xQueueGenericSend+0x60>
	__asm volatile
 800c212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c216:	f383 8811 	msr	BASEPRI, r3
 800c21a:	f3bf 8f6f 	isb	sy
 800c21e:	f3bf 8f4f 	dsb	sy
 800c222:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c224:	bf00      	nop
 800c226:	e7fe      	b.n	800c226 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	2b02      	cmp	r3, #2
 800c22c:	d103      	bne.n	800c236 <xQueueGenericSend+0x6e>
 800c22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c232:	2b01      	cmp	r3, #1
 800c234:	d101      	bne.n	800c23a <xQueueGenericSend+0x72>
 800c236:	2301      	movs	r3, #1
 800c238:	e000      	b.n	800c23c <xQueueGenericSend+0x74>
 800c23a:	2300      	movs	r3, #0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10a      	bne.n	800c256 <xQueueGenericSend+0x8e>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	623b      	str	r3, [r7, #32]
}
 800c252:	bf00      	nop
 800c254:	e7fe      	b.n	800c254 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c256:	f001 fc77 	bl	800db48 <xTaskGetSchedulerState>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d102      	bne.n	800c266 <xQueueGenericSend+0x9e>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <xQueueGenericSend+0xa2>
 800c266:	2301      	movs	r3, #1
 800c268:	e000      	b.n	800c26c <xQueueGenericSend+0xa4>
 800c26a:	2300      	movs	r3, #0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10a      	bne.n	800c286 <xQueueGenericSend+0xbe>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	61fb      	str	r3, [r7, #28]
}
 800c282:	bf00      	nop
 800c284:	e7fe      	b.n	800c284 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c286:	f7ff fcd5 	bl	800bc34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c292:	429a      	cmp	r2, r3
 800c294:	d302      	bcc.n	800c29c <xQueueGenericSend+0xd4>
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	2b02      	cmp	r3, #2
 800c29a:	d129      	bne.n	800c2f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c29c:	683a      	ldr	r2, [r7, #0]
 800c29e:	68b9      	ldr	r1, [r7, #8]
 800c2a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2a2:	f000 fc5e 	bl	800cb62 <prvCopyDataToQueue>
 800c2a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d010      	beq.n	800c2d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b2:	3324      	adds	r3, #36	; 0x24
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f001 fa85 	bl	800d7c4 <xTaskRemoveFromEventList>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d013      	beq.n	800c2e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c2c0:	4b3f      	ldr	r3, [pc, #252]	; (800c3c0 <xQueueGenericSend+0x1f8>)
 800c2c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2c6:	601a      	str	r2, [r3, #0]
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	e00a      	b.n	800c2e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d007      	beq.n	800c2e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c2d8:	4b39      	ldr	r3, [pc, #228]	; (800c3c0 <xQueueGenericSend+0x1f8>)
 800c2da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2de:	601a      	str	r2, [r3, #0]
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c2e8:	f7ff fcd4 	bl	800bc94 <vPortExitCritical>
				return pdPASS;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e063      	b.n	800c3b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d103      	bne.n	800c2fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c2f6:	f7ff fccd 	bl	800bc94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	e05c      	b.n	800c3b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c300:	2b00      	cmp	r3, #0
 800c302:	d106      	bne.n	800c312 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c304:	f107 0314 	add.w	r3, r7, #20
 800c308:	4618      	mov	r0, r3
 800c30a:	f001 fabf 	bl	800d88c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c30e:	2301      	movs	r3, #1
 800c310:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c312:	f7ff fcbf 	bl	800bc94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c316:	f001 f819 	bl	800d34c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c31a:	f7ff fc8b 	bl	800bc34 <vPortEnterCritical>
 800c31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c324:	b25b      	sxtb	r3, r3
 800c326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c32a:	d103      	bne.n	800c334 <xQueueGenericSend+0x16c>
 800c32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32e:	2200      	movs	r2, #0
 800c330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c33a:	b25b      	sxtb	r3, r3
 800c33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c340:	d103      	bne.n	800c34a <xQueueGenericSend+0x182>
 800c342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c344:	2200      	movs	r2, #0
 800c346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c34a:	f7ff fca3 	bl	800bc94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c34e:	1d3a      	adds	r2, r7, #4
 800c350:	f107 0314 	add.w	r3, r7, #20
 800c354:	4611      	mov	r1, r2
 800c356:	4618      	mov	r0, r3
 800c358:	f001 faae 	bl	800d8b8 <xTaskCheckForTimeOut>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d124      	bne.n	800c3ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c364:	f000 fcf5 	bl	800cd52 <prvIsQueueFull>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d018      	beq.n	800c3a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c370:	3310      	adds	r3, #16
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	4611      	mov	r1, r2
 800c376:	4618      	mov	r0, r3
 800c378:	f001 f9d4 	bl	800d724 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c37c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c37e:	f000 fc80 	bl	800cc82 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c382:	f000 fff1 	bl	800d368 <xTaskResumeAll>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f47f af7c 	bne.w	800c286 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c38e:	4b0c      	ldr	r3, [pc, #48]	; (800c3c0 <xQueueGenericSend+0x1f8>)
 800c390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c394:	601a      	str	r2, [r3, #0]
 800c396:	f3bf 8f4f 	dsb	sy
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	e772      	b.n	800c286 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c3a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3a2:	f000 fc6e 	bl	800cc82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3a6:	f000 ffdf 	bl	800d368 <xTaskResumeAll>
 800c3aa:	e76c      	b.n	800c286 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c3ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3ae:	f000 fc68 	bl	800cc82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3b2:	f000 ffd9 	bl	800d368 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c3b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3738      	adds	r7, #56	; 0x38
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	e000ed04 	.word	0xe000ed04

0800c3c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b090      	sub	sp, #64	; 0x40
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
 800c3d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10a      	bne.n	800c3f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e0:	f383 8811 	msr	BASEPRI, r3
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c3ee:	bf00      	nop
 800c3f0:	e7fe      	b.n	800c3f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d103      	bne.n	800c400 <xQueueGenericSendFromISR+0x3c>
 800c3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d101      	bne.n	800c404 <xQueueGenericSendFromISR+0x40>
 800c400:	2301      	movs	r3, #1
 800c402:	e000      	b.n	800c406 <xQueueGenericSendFromISR+0x42>
 800c404:	2300      	movs	r3, #0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d10a      	bne.n	800c420 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40e:	f383 8811 	msr	BASEPRI, r3
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	f3bf 8f4f 	dsb	sy
 800c41a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c41c:	bf00      	nop
 800c41e:	e7fe      	b.n	800c41e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	2b02      	cmp	r3, #2
 800c424:	d103      	bne.n	800c42e <xQueueGenericSendFromISR+0x6a>
 800c426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d101      	bne.n	800c432 <xQueueGenericSendFromISR+0x6e>
 800c42e:	2301      	movs	r3, #1
 800c430:	e000      	b.n	800c434 <xQueueGenericSendFromISR+0x70>
 800c432:	2300      	movs	r3, #0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d10a      	bne.n	800c44e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43c:	f383 8811 	msr	BASEPRI, r3
 800c440:	f3bf 8f6f 	isb	sy
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	623b      	str	r3, [r7, #32]
}
 800c44a:	bf00      	nop
 800c44c:	e7fe      	b.n	800c44c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c44e:	f7ff fcd3 	bl	800bdf8 <vPortValidateInterruptPriority>
	__asm volatile
 800c452:	f3ef 8211 	mrs	r2, BASEPRI
 800c456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45a:	f383 8811 	msr	BASEPRI, r3
 800c45e:	f3bf 8f6f 	isb	sy
 800c462:	f3bf 8f4f 	dsb	sy
 800c466:	61fa      	str	r2, [r7, #28]
 800c468:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c46a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c46c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c476:	429a      	cmp	r2, r3
 800c478:	d302      	bcc.n	800c480 <xQueueGenericSendFromISR+0xbc>
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	2b02      	cmp	r3, #2
 800c47e:	d12f      	bne.n	800c4e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c482:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c490:	683a      	ldr	r2, [r7, #0]
 800c492:	68b9      	ldr	r1, [r7, #8]
 800c494:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c496:	f000 fb64 	bl	800cb62 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c49a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a2:	d112      	bne.n	800c4ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d016      	beq.n	800c4da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ae:	3324      	adds	r3, #36	; 0x24
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f001 f987 	bl	800d7c4 <xTaskRemoveFromEventList>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00e      	beq.n	800c4da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00b      	beq.n	800c4da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	601a      	str	r2, [r3, #0]
 800c4c8:	e007      	b.n	800c4da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c4ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	b25a      	sxtb	r2, r3
 800c4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c4de:	e001      	b.n	800c4e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	f383 8811 	msr	BASEPRI, r3
}
 800c4ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3740      	adds	r7, #64	; 0x40
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b08e      	sub	sp, #56	; 0x38
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10a      	bne.n	800c524 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	623b      	str	r3, [r7, #32]
}
 800c520:	bf00      	nop
 800c522:	e7fe      	b.n	800c522 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d00a      	beq.n	800c542 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c530:	f383 8811 	msr	BASEPRI, r3
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	f3bf 8f4f 	dsb	sy
 800c53c:	61fb      	str	r3, [r7, #28]
}
 800c53e:	bf00      	nop
 800c540:	e7fe      	b.n	800c540 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d103      	bne.n	800c552 <xQueueGiveFromISR+0x58>
 800c54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d101      	bne.n	800c556 <xQueueGiveFromISR+0x5c>
 800c552:	2301      	movs	r3, #1
 800c554:	e000      	b.n	800c558 <xQueueGiveFromISR+0x5e>
 800c556:	2300      	movs	r3, #0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d10a      	bne.n	800c572 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c560:	f383 8811 	msr	BASEPRI, r3
 800c564:	f3bf 8f6f 	isb	sy
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	61bb      	str	r3, [r7, #24]
}
 800c56e:	bf00      	nop
 800c570:	e7fe      	b.n	800c570 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c572:	f7ff fc41 	bl	800bdf8 <vPortValidateInterruptPriority>
	__asm volatile
 800c576:	f3ef 8211 	mrs	r2, BASEPRI
 800c57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57e:	f383 8811 	msr	BASEPRI, r3
 800c582:	f3bf 8f6f 	isb	sy
 800c586:	f3bf 8f4f 	dsb	sy
 800c58a:	617a      	str	r2, [r7, #20]
 800c58c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c58e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c590:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c596:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c59c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d22b      	bcs.n	800c5fa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ae:	1c5a      	adds	r2, r3, #1
 800c5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c5b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5bc:	d112      	bne.n	800c5e4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d016      	beq.n	800c5f4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c8:	3324      	adds	r3, #36	; 0x24
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f001 f8fa 	bl	800d7c4 <xTaskRemoveFromEventList>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00e      	beq.n	800c5f4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d00b      	beq.n	800c5f4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	601a      	str	r2, [r3, #0]
 800c5e2:	e007      	b.n	800c5f4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c5e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	b25a      	sxtb	r2, r3
 800c5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	637b      	str	r3, [r7, #52]	; 0x34
 800c5f8:	e001      	b.n	800c5fe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	637b      	str	r3, [r7, #52]	; 0x34
 800c5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c600:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f383 8811 	msr	BASEPRI, r3
}
 800c608:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3738      	adds	r7, #56	; 0x38
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b08c      	sub	sp, #48	; 0x30
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c620:	2300      	movs	r3, #0
 800c622:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d10a      	bne.n	800c644 <xQueueReceive+0x30>
	__asm volatile
 800c62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c632:	f383 8811 	msr	BASEPRI, r3
 800c636:	f3bf 8f6f 	isb	sy
 800c63a:	f3bf 8f4f 	dsb	sy
 800c63e:	623b      	str	r3, [r7, #32]
}
 800c640:	bf00      	nop
 800c642:	e7fe      	b.n	800c642 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d103      	bne.n	800c652 <xQueueReceive+0x3e>
 800c64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d101      	bne.n	800c656 <xQueueReceive+0x42>
 800c652:	2301      	movs	r3, #1
 800c654:	e000      	b.n	800c658 <xQueueReceive+0x44>
 800c656:	2300      	movs	r3, #0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d10a      	bne.n	800c672 <xQueueReceive+0x5e>
	__asm volatile
 800c65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c660:	f383 8811 	msr	BASEPRI, r3
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	61fb      	str	r3, [r7, #28]
}
 800c66e:	bf00      	nop
 800c670:	e7fe      	b.n	800c670 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c672:	f001 fa69 	bl	800db48 <xTaskGetSchedulerState>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d102      	bne.n	800c682 <xQueueReceive+0x6e>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d101      	bne.n	800c686 <xQueueReceive+0x72>
 800c682:	2301      	movs	r3, #1
 800c684:	e000      	b.n	800c688 <xQueueReceive+0x74>
 800c686:	2300      	movs	r3, #0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d10a      	bne.n	800c6a2 <xQueueReceive+0x8e>
	__asm volatile
 800c68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c690:	f383 8811 	msr	BASEPRI, r3
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	61bb      	str	r3, [r7, #24]
}
 800c69e:	bf00      	nop
 800c6a0:	e7fe      	b.n	800c6a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c6a2:	f7ff fac7 	bl	800bc34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d01f      	beq.n	800c6f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c6b2:	68b9      	ldr	r1, [r7, #8]
 800c6b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6b6:	f000 fabe 	bl	800cc36 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6bc:	1e5a      	subs	r2, r3, #1
 800c6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c4:	691b      	ldr	r3, [r3, #16]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00f      	beq.n	800c6ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6cc:	3310      	adds	r3, #16
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f001 f878 	bl	800d7c4 <xTaskRemoveFromEventList>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d007      	beq.n	800c6ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c6da:	4b3d      	ldr	r3, [pc, #244]	; (800c7d0 <xQueueReceive+0x1bc>)
 800c6dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6e0:	601a      	str	r2, [r3, #0]
 800c6e2:	f3bf 8f4f 	dsb	sy
 800c6e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6ea:	f7ff fad3 	bl	800bc94 <vPortExitCritical>
				return pdPASS;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e069      	b.n	800c7c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d103      	bne.n	800c700 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6f8:	f7ff facc 	bl	800bc94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	e062      	b.n	800c7c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c702:	2b00      	cmp	r3, #0
 800c704:	d106      	bne.n	800c714 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c706:	f107 0310 	add.w	r3, r7, #16
 800c70a:	4618      	mov	r0, r3
 800c70c:	f001 f8be 	bl	800d88c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c710:	2301      	movs	r3, #1
 800c712:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c714:	f7ff fabe 	bl	800bc94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c718:	f000 fe18 	bl	800d34c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c71c:	f7ff fa8a 	bl	800bc34 <vPortEnterCritical>
 800c720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c722:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c726:	b25b      	sxtb	r3, r3
 800c728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c72c:	d103      	bne.n	800c736 <xQueueReceive+0x122>
 800c72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c730:	2200      	movs	r2, #0
 800c732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c73c:	b25b      	sxtb	r3, r3
 800c73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c742:	d103      	bne.n	800c74c <xQueueReceive+0x138>
 800c744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c746:	2200      	movs	r2, #0
 800c748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c74c:	f7ff faa2 	bl	800bc94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c750:	1d3a      	adds	r2, r7, #4
 800c752:	f107 0310 	add.w	r3, r7, #16
 800c756:	4611      	mov	r1, r2
 800c758:	4618      	mov	r0, r3
 800c75a:	f001 f8ad 	bl	800d8b8 <xTaskCheckForTimeOut>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d123      	bne.n	800c7ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c766:	f000 fade 	bl	800cd26 <prvIsQueueEmpty>
 800c76a:	4603      	mov	r3, r0
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d017      	beq.n	800c7a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c772:	3324      	adds	r3, #36	; 0x24
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	4611      	mov	r1, r2
 800c778:	4618      	mov	r0, r3
 800c77a:	f000 ffd3 	bl	800d724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c77e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c780:	f000 fa7f 	bl	800cc82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c784:	f000 fdf0 	bl	800d368 <xTaskResumeAll>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d189      	bne.n	800c6a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c78e:	4b10      	ldr	r3, [pc, #64]	; (800c7d0 <xQueueReceive+0x1bc>)
 800c790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c794:	601a      	str	r2, [r3, #0]
 800c796:	f3bf 8f4f 	dsb	sy
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	e780      	b.n	800c6a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c7a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7a2:	f000 fa6e 	bl	800cc82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7a6:	f000 fddf 	bl	800d368 <xTaskResumeAll>
 800c7aa:	e77a      	b.n	800c6a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c7ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ae:	f000 fa68 	bl	800cc82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7b2:	f000 fdd9 	bl	800d368 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7b8:	f000 fab5 	bl	800cd26 <prvIsQueueEmpty>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	f43f af6f 	beq.w	800c6a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3730      	adds	r7, #48	; 0x30
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	e000ed04 	.word	0xe000ed04

0800c7d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b08e      	sub	sp, #56	; 0x38
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d10a      	bne.n	800c806 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f4:	f383 8811 	msr	BASEPRI, r3
 800c7f8:	f3bf 8f6f 	isb	sy
 800c7fc:	f3bf 8f4f 	dsb	sy
 800c800:	623b      	str	r3, [r7, #32]
}
 800c802:	bf00      	nop
 800c804:	e7fe      	b.n	800c804 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00a      	beq.n	800c824 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c812:	f383 8811 	msr	BASEPRI, r3
 800c816:	f3bf 8f6f 	isb	sy
 800c81a:	f3bf 8f4f 	dsb	sy
 800c81e:	61fb      	str	r3, [r7, #28]
}
 800c820:	bf00      	nop
 800c822:	e7fe      	b.n	800c822 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c824:	f001 f990 	bl	800db48 <xTaskGetSchedulerState>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d102      	bne.n	800c834 <xQueueSemaphoreTake+0x60>
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d101      	bne.n	800c838 <xQueueSemaphoreTake+0x64>
 800c834:	2301      	movs	r3, #1
 800c836:	e000      	b.n	800c83a <xQueueSemaphoreTake+0x66>
 800c838:	2300      	movs	r3, #0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d10a      	bne.n	800c854 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	61bb      	str	r3, [r7, #24]
}
 800c850:	bf00      	nop
 800c852:	e7fe      	b.n	800c852 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c854:	f7ff f9ee 	bl	800bc34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c85c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c860:	2b00      	cmp	r3, #0
 800c862:	d024      	beq.n	800c8ae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c866:	1e5a      	subs	r2, r3, #1
 800c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d104      	bne.n	800c87e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c874:	f001 fade 	bl	800de34 <pvTaskIncrementMutexHeldCount>
 800c878:	4602      	mov	r2, r0
 800c87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c880:	691b      	ldr	r3, [r3, #16]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00f      	beq.n	800c8a6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c888:	3310      	adds	r3, #16
 800c88a:	4618      	mov	r0, r3
 800c88c:	f000 ff9a 	bl	800d7c4 <xTaskRemoveFromEventList>
 800c890:	4603      	mov	r3, r0
 800c892:	2b00      	cmp	r3, #0
 800c894:	d007      	beq.n	800c8a6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c896:	4b54      	ldr	r3, [pc, #336]	; (800c9e8 <xQueueSemaphoreTake+0x214>)
 800c898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c89c:	601a      	str	r2, [r3, #0]
 800c89e:	f3bf 8f4f 	dsb	sy
 800c8a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c8a6:	f7ff f9f5 	bl	800bc94 <vPortExitCritical>
				return pdPASS;
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e097      	b.n	800c9de <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d111      	bne.n	800c8d8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d00a      	beq.n	800c8d0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8be:	f383 8811 	msr	BASEPRI, r3
 800c8c2:	f3bf 8f6f 	isb	sy
 800c8c6:	f3bf 8f4f 	dsb	sy
 800c8ca:	617b      	str	r3, [r7, #20]
}
 800c8cc:	bf00      	nop
 800c8ce:	e7fe      	b.n	800c8ce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c8d0:	f7ff f9e0 	bl	800bc94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	e082      	b.n	800c9de <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d106      	bne.n	800c8ec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8de:	f107 030c 	add.w	r3, r7, #12
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f000 ffd2 	bl	800d88c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8ec:	f7ff f9d2 	bl	800bc94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8f0:	f000 fd2c 	bl	800d34c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8f4:	f7ff f99e 	bl	800bc34 <vPortEnterCritical>
 800c8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8fe:	b25b      	sxtb	r3, r3
 800c900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c904:	d103      	bne.n	800c90e <xQueueSemaphoreTake+0x13a>
 800c906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c908:	2200      	movs	r2, #0
 800c90a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c914:	b25b      	sxtb	r3, r3
 800c916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c91a:	d103      	bne.n	800c924 <xQueueSemaphoreTake+0x150>
 800c91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91e:	2200      	movs	r2, #0
 800c920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c924:	f7ff f9b6 	bl	800bc94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c928:	463a      	mov	r2, r7
 800c92a:	f107 030c 	add.w	r3, r7, #12
 800c92e:	4611      	mov	r1, r2
 800c930:	4618      	mov	r0, r3
 800c932:	f000 ffc1 	bl	800d8b8 <xTaskCheckForTimeOut>
 800c936:	4603      	mov	r3, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d132      	bne.n	800c9a2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c93c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c93e:	f000 f9f2 	bl	800cd26 <prvIsQueueEmpty>
 800c942:	4603      	mov	r3, r0
 800c944:	2b00      	cmp	r3, #0
 800c946:	d026      	beq.n	800c996 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d109      	bne.n	800c964 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c950:	f7ff f970 	bl	800bc34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	4618      	mov	r0, r3
 800c95a:	f001 f913 	bl	800db84 <xTaskPriorityInherit>
 800c95e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c960:	f7ff f998 	bl	800bc94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c966:	3324      	adds	r3, #36	; 0x24
 800c968:	683a      	ldr	r2, [r7, #0]
 800c96a:	4611      	mov	r1, r2
 800c96c:	4618      	mov	r0, r3
 800c96e:	f000 fed9 	bl	800d724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c974:	f000 f985 	bl	800cc82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c978:	f000 fcf6 	bl	800d368 <xTaskResumeAll>
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	f47f af68 	bne.w	800c854 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c984:	4b18      	ldr	r3, [pc, #96]	; (800c9e8 <xQueueSemaphoreTake+0x214>)
 800c986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c98a:	601a      	str	r2, [r3, #0]
 800c98c:	f3bf 8f4f 	dsb	sy
 800c990:	f3bf 8f6f 	isb	sy
 800c994:	e75e      	b.n	800c854 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c996:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c998:	f000 f973 	bl	800cc82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c99c:	f000 fce4 	bl	800d368 <xTaskResumeAll>
 800c9a0:	e758      	b.n	800c854 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c9a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9a4:	f000 f96d 	bl	800cc82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c9a8:	f000 fcde 	bl	800d368 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9ae:	f000 f9ba 	bl	800cd26 <prvIsQueueEmpty>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f43f af4d 	beq.w	800c854 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00d      	beq.n	800c9dc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c9c0:	f7ff f938 	bl	800bc34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c9c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9c6:	f000 f8b4 	bl	800cb32 <prvGetDisinheritPriorityAfterTimeout>
 800c9ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ce:	689b      	ldr	r3, [r3, #8]
 800c9d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f001 f9ac 	bl	800dd30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c9d8:	f7ff f95c 	bl	800bc94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c9dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3738      	adds	r7, #56	; 0x38
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	e000ed04 	.word	0xe000ed04

0800c9ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b08e      	sub	sp, #56	; 0x38
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d10a      	bne.n	800ca18 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ca02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca06:	f383 8811 	msr	BASEPRI, r3
 800ca0a:	f3bf 8f6f 	isb	sy
 800ca0e:	f3bf 8f4f 	dsb	sy
 800ca12:	623b      	str	r3, [r7, #32]
}
 800ca14:	bf00      	nop
 800ca16:	e7fe      	b.n	800ca16 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d103      	bne.n	800ca26 <xQueueReceiveFromISR+0x3a>
 800ca1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d101      	bne.n	800ca2a <xQueueReceiveFromISR+0x3e>
 800ca26:	2301      	movs	r3, #1
 800ca28:	e000      	b.n	800ca2c <xQueueReceiveFromISR+0x40>
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d10a      	bne.n	800ca46 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ca30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca34:	f383 8811 	msr	BASEPRI, r3
 800ca38:	f3bf 8f6f 	isb	sy
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	61fb      	str	r3, [r7, #28]
}
 800ca42:	bf00      	nop
 800ca44:	e7fe      	b.n	800ca44 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca46:	f7ff f9d7 	bl	800bdf8 <vPortValidateInterruptPriority>
	__asm volatile
 800ca4a:	f3ef 8211 	mrs	r2, BASEPRI
 800ca4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	61ba      	str	r2, [r7, #24]
 800ca60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ca62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d02f      	beq.n	800cad2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ca72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca7c:	68b9      	ldr	r1, [r7, #8]
 800ca7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca80:	f000 f8d9 	bl	800cc36 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca86:	1e5a      	subs	r2, r3, #1
 800ca88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ca8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ca90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca94:	d112      	bne.n	800cabc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca98:	691b      	ldr	r3, [r3, #16]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d016      	beq.n	800cacc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa0:	3310      	adds	r3, #16
 800caa2:	4618      	mov	r0, r3
 800caa4:	f000 fe8e 	bl	800d7c4 <xTaskRemoveFromEventList>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00e      	beq.n	800cacc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00b      	beq.n	800cacc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2201      	movs	r2, #1
 800cab8:	601a      	str	r2, [r3, #0]
 800caba:	e007      	b.n	800cacc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cabc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cac0:	3301      	adds	r3, #1
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	b25a      	sxtb	r2, r3
 800cac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cacc:	2301      	movs	r3, #1
 800cace:	637b      	str	r3, [r7, #52]	; 0x34
 800cad0:	e001      	b.n	800cad6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cad2:	2300      	movs	r3, #0
 800cad4:	637b      	str	r3, [r7, #52]	; 0x34
 800cad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	f383 8811 	msr	BASEPRI, r3
}
 800cae0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3738      	adds	r7, #56	; 0x38
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d10a      	bne.n	800cb14 <vQueueDelete+0x28>
	__asm volatile
 800cafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb02:	f383 8811 	msr	BASEPRI, r3
 800cb06:	f3bf 8f6f 	isb	sy
 800cb0a:	f3bf 8f4f 	dsb	sy
 800cb0e:	60bb      	str	r3, [r7, #8]
}
 800cb10:	bf00      	nop
 800cb12:	e7fe      	b.n	800cb12 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f000 f95f 	bl	800cdd8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d102      	bne.n	800cb2a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	f7fe fd85 	bl	800b634 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cb2a:	bf00      	nop
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cb32:	b480      	push	{r7}
 800cb34:	b085      	sub	sp, #20
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d006      	beq.n	800cb50 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cb4c:	60fb      	str	r3, [r7, #12]
 800cb4e:	e001      	b.n	800cb54 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cb50:	2300      	movs	r3, #0
 800cb52:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cb54:	68fb      	ldr	r3, [r7, #12]
	}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3714      	adds	r7, #20
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr

0800cb62 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b086      	sub	sp, #24
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	60f8      	str	r0, [r7, #12]
 800cb6a:	60b9      	str	r1, [r7, #8]
 800cb6c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb76:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d10d      	bne.n	800cb9c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d14d      	bne.n	800cc24 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f001 f861 	bl	800dc54 <xTaskPriorityDisinherit>
 800cb92:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2200      	movs	r2, #0
 800cb98:	609a      	str	r2, [r3, #8]
 800cb9a:	e043      	b.n	800cc24 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d119      	bne.n	800cbd6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6858      	ldr	r0, [r3, #4]
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbaa:	461a      	mov	r2, r3
 800cbac:	68b9      	ldr	r1, [r7, #8]
 800cbae:	f020 f92d 	bl	802ce0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	685a      	ldr	r2, [r3, #4]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbba:	441a      	add	r2, r3
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	685a      	ldr	r2, [r3, #4]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d32b      	bcc.n	800cc24 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	605a      	str	r2, [r3, #4]
 800cbd4:	e026      	b.n	800cc24 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	68d8      	ldr	r0, [r3, #12]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbde:	461a      	mov	r2, r3
 800cbe0:	68b9      	ldr	r1, [r7, #8]
 800cbe2:	f020 f913 	bl	802ce0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	68da      	ldr	r2, [r3, #12]
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbee:	425b      	negs	r3, r3
 800cbf0:	441a      	add	r2, r3
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	68da      	ldr	r2, [r3, #12]
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d207      	bcs.n	800cc12 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	689a      	ldr	r2, [r3, #8]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc0a:	425b      	negs	r3, r3
 800cc0c:	441a      	add	r2, r3
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	d105      	bne.n	800cc24 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d002      	beq.n	800cc24 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	3b01      	subs	r3, #1
 800cc22:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	1c5a      	adds	r2, r3, #1
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cc2c:	697b      	ldr	r3, [r7, #20]
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3718      	adds	r7, #24
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cc36:	b580      	push	{r7, lr}
 800cc38:	b082      	sub	sp, #8
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
 800cc3e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d018      	beq.n	800cc7a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	68da      	ldr	r2, [r3, #12]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc50:	441a      	add	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	68da      	ldr	r2, [r3, #12]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d303      	bcc.n	800cc6a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	68d9      	ldr	r1, [r3, #12]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc72:	461a      	mov	r2, r3
 800cc74:	6838      	ldr	r0, [r7, #0]
 800cc76:	f020 f8c9 	bl	802ce0c <memcpy>
	}
}
 800cc7a:	bf00      	nop
 800cc7c:	3708      	adds	r7, #8
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b084      	sub	sp, #16
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cc8a:	f7fe ffd3 	bl	800bc34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc94:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc96:	e011      	b.n	800ccbc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d012      	beq.n	800ccc6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	3324      	adds	r3, #36	; 0x24
 800cca4:	4618      	mov	r0, r3
 800cca6:	f000 fd8d 	bl	800d7c4 <xTaskRemoveFromEventList>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d001      	beq.n	800ccb4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ccb0:	f000 fe64 	bl	800d97c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ccb4:	7bfb      	ldrb	r3, [r7, #15]
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ccbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	dce9      	bgt.n	800cc98 <prvUnlockQueue+0x16>
 800ccc4:	e000      	b.n	800ccc8 <prvUnlockQueue+0x46>
					break;
 800ccc6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	22ff      	movs	r2, #255	; 0xff
 800cccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ccd0:	f7fe ffe0 	bl	800bc94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ccd4:	f7fe ffae 	bl	800bc34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccde:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cce0:	e011      	b.n	800cd06 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	691b      	ldr	r3, [r3, #16]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d012      	beq.n	800cd10 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	3310      	adds	r3, #16
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f000 fd68 	bl	800d7c4 <xTaskRemoveFromEventList>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d001      	beq.n	800ccfe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ccfa:	f000 fe3f 	bl	800d97c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ccfe:	7bbb      	ldrb	r3, [r7, #14]
 800cd00:	3b01      	subs	r3, #1
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	dce9      	bgt.n	800cce2 <prvUnlockQueue+0x60>
 800cd0e:	e000      	b.n	800cd12 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cd10:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	22ff      	movs	r2, #255	; 0xff
 800cd16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cd1a:	f7fe ffbb 	bl	800bc94 <vPortExitCritical>
}
 800cd1e:	bf00      	nop
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b084      	sub	sp, #16
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd2e:	f7fe ff81 	bl	800bc34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d102      	bne.n	800cd40 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	60fb      	str	r3, [r7, #12]
 800cd3e:	e001      	b.n	800cd44 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cd40:	2300      	movs	r3, #0
 800cd42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd44:	f7fe ffa6 	bl	800bc94 <vPortExitCritical>

	return xReturn;
 800cd48:	68fb      	ldr	r3, [r7, #12]
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3710      	adds	r7, #16
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cd52:	b580      	push	{r7, lr}
 800cd54:	b084      	sub	sp, #16
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd5a:	f7fe ff6b 	bl	800bc34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d102      	bne.n	800cd70 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	60fb      	str	r3, [r7, #12]
 800cd6e:	e001      	b.n	800cd74 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cd70:	2300      	movs	r3, #0
 800cd72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd74:	f7fe ff8e 	bl	800bc94 <vPortExitCritical>

	return xReturn;
 800cd78:	68fb      	ldr	r3, [r7, #12]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
	...

0800cd84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cd84:	b480      	push	{r7}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd8e:	2300      	movs	r3, #0
 800cd90:	60fb      	str	r3, [r7, #12]
 800cd92:	e014      	b.n	800cdbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cd94:	4a0f      	ldr	r2, [pc, #60]	; (800cdd4 <vQueueAddToRegistry+0x50>)
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10b      	bne.n	800cdb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cda0:	490c      	ldr	r1, [pc, #48]	; (800cdd4 <vQueueAddToRegistry+0x50>)
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	683a      	ldr	r2, [r7, #0]
 800cda6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cdaa:	4a0a      	ldr	r2, [pc, #40]	; (800cdd4 <vQueueAddToRegistry+0x50>)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	00db      	lsls	r3, r3, #3
 800cdb0:	4413      	add	r3, r2
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cdb6:	e006      	b.n	800cdc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	60fb      	str	r3, [r7, #12]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2b07      	cmp	r3, #7
 800cdc2:	d9e7      	bls.n	800cd94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cdc4:	bf00      	nop
 800cdc6:	bf00      	nop
 800cdc8:	3714      	adds	r7, #20
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop
 800cdd4:	200098c8 	.word	0x200098c8

0800cdd8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cde0:	2300      	movs	r3, #0
 800cde2:	60fb      	str	r3, [r7, #12]
 800cde4:	e016      	b.n	800ce14 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cde6:	4a10      	ldr	r2, [pc, #64]	; (800ce28 <vQueueUnregisterQueue+0x50>)
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	00db      	lsls	r3, r3, #3
 800cdec:	4413      	add	r3, r2
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d10b      	bne.n	800ce0e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cdf6:	4a0c      	ldr	r2, [pc, #48]	; (800ce28 <vQueueUnregisterQueue+0x50>)
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ce00:	4a09      	ldr	r2, [pc, #36]	; (800ce28 <vQueueUnregisterQueue+0x50>)
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	00db      	lsls	r3, r3, #3
 800ce06:	4413      	add	r3, r2
 800ce08:	2200      	movs	r2, #0
 800ce0a:	605a      	str	r2, [r3, #4]
				break;
 800ce0c:	e006      	b.n	800ce1c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	3301      	adds	r3, #1
 800ce12:	60fb      	str	r3, [r7, #12]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2b07      	cmp	r3, #7
 800ce18:	d9e5      	bls.n	800cde6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ce1a:	bf00      	nop
 800ce1c:	bf00      	nop
 800ce1e:	3714      	adds	r7, #20
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr
 800ce28:	200098c8 	.word	0x200098c8

0800ce2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b086      	sub	sp, #24
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ce3c:	f7fe fefa 	bl	800bc34 <vPortEnterCritical>
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce46:	b25b      	sxtb	r3, r3
 800ce48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce4c:	d103      	bne.n	800ce56 <vQueueWaitForMessageRestricted+0x2a>
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	2200      	movs	r2, #0
 800ce52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce5c:	b25b      	sxtb	r3, r3
 800ce5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce62:	d103      	bne.n	800ce6c <vQueueWaitForMessageRestricted+0x40>
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce6c:	f7fe ff12 	bl	800bc94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d106      	bne.n	800ce86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	3324      	adds	r3, #36	; 0x24
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	68b9      	ldr	r1, [r7, #8]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f000 fc73 	bl	800d76c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ce86:	6978      	ldr	r0, [r7, #20]
 800ce88:	f7ff fefb 	bl	800cc82 <prvUnlockQueue>
	}
 800ce8c:	bf00      	nop
 800ce8e:	3718      	adds	r7, #24
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b08e      	sub	sp, #56	; 0x38
 800ce98:	af04      	add	r7, sp, #16
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	607a      	str	r2, [r7, #4]
 800cea0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d10a      	bne.n	800cebe <xTaskCreateStatic+0x2a>
	__asm volatile
 800cea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceac:	f383 8811 	msr	BASEPRI, r3
 800ceb0:	f3bf 8f6f 	isb	sy
 800ceb4:	f3bf 8f4f 	dsb	sy
 800ceb8:	623b      	str	r3, [r7, #32]
}
 800ceba:	bf00      	nop
 800cebc:	e7fe      	b.n	800cebc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d10a      	bne.n	800ceda <xTaskCreateStatic+0x46>
	__asm volatile
 800cec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	61fb      	str	r3, [r7, #28]
}
 800ced6:	bf00      	nop
 800ced8:	e7fe      	b.n	800ced8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ceda:	23bc      	movs	r3, #188	; 0xbc
 800cedc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	2bbc      	cmp	r3, #188	; 0xbc
 800cee2:	d00a      	beq.n	800cefa <xTaskCreateStatic+0x66>
	__asm volatile
 800cee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee8:	f383 8811 	msr	BASEPRI, r3
 800ceec:	f3bf 8f6f 	isb	sy
 800cef0:	f3bf 8f4f 	dsb	sy
 800cef4:	61bb      	str	r3, [r7, #24]
}
 800cef6:	bf00      	nop
 800cef8:	e7fe      	b.n	800cef8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cefa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d01e      	beq.n	800cf40 <xTaskCreateStatic+0xac>
 800cf02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d01b      	beq.n	800cf40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cf12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf14:	2202      	movs	r2, #2
 800cf16:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	9303      	str	r3, [sp, #12]
 800cf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf20:	9302      	str	r3, [sp, #8]
 800cf22:	f107 0314 	add.w	r3, r7, #20
 800cf26:	9301      	str	r3, [sp, #4]
 800cf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2a:	9300      	str	r3, [sp, #0]
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	68b9      	ldr	r1, [r7, #8]
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	f000 f850 	bl	800cfd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf3a:	f000 f8f3 	bl	800d124 <prvAddNewTaskToReadyList>
 800cf3e:	e001      	b.n	800cf44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cf40:	2300      	movs	r3, #0
 800cf42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf44:	697b      	ldr	r3, [r7, #20]
	}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3728      	adds	r7, #40	; 0x28
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b08c      	sub	sp, #48	; 0x30
 800cf52:	af04      	add	r7, sp, #16
 800cf54:	60f8      	str	r0, [r7, #12]
 800cf56:	60b9      	str	r1, [r7, #8]
 800cf58:	603b      	str	r3, [r7, #0]
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cf5e:	88fb      	ldrh	r3, [r7, #6]
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fe fa9a 	bl	800b49c <pvPortMalloc>
 800cf68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00e      	beq.n	800cf8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf70:	20bc      	movs	r0, #188	; 0xbc
 800cf72:	f7fe fa93 	bl	800b49c <pvPortMalloc>
 800cf76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cf78:	69fb      	ldr	r3, [r7, #28]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d003      	beq.n	800cf86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	697a      	ldr	r2, [r7, #20]
 800cf82:	631a      	str	r2, [r3, #48]	; 0x30
 800cf84:	e005      	b.n	800cf92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cf86:	6978      	ldr	r0, [r7, #20]
 800cf88:	f7fe fb54 	bl	800b634 <vPortFree>
 800cf8c:	e001      	b.n	800cf92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d017      	beq.n	800cfc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cfa0:	88fa      	ldrh	r2, [r7, #6]
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	9303      	str	r3, [sp, #12]
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	9302      	str	r3, [sp, #8]
 800cfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfac:	9301      	str	r3, [sp, #4]
 800cfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb0:	9300      	str	r3, [sp, #0]
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	68b9      	ldr	r1, [r7, #8]
 800cfb6:	68f8      	ldr	r0, [r7, #12]
 800cfb8:	f000 f80e 	bl	800cfd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cfbc:	69f8      	ldr	r0, [r7, #28]
 800cfbe:	f000 f8b1 	bl	800d124 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	61bb      	str	r3, [r7, #24]
 800cfc6:	e002      	b.n	800cfce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cfc8:	f04f 33ff 	mov.w	r3, #4294967295
 800cfcc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cfce:	69bb      	ldr	r3, [r7, #24]
	}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3720      	adds	r7, #32
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b088      	sub	sp, #32
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	607a      	str	r2, [r7, #4]
 800cfe4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	009b      	lsls	r3, r3, #2
 800cfee:	461a      	mov	r2, r3
 800cff0:	21a5      	movs	r1, #165	; 0xa5
 800cff2:	f01f ff19 	bl	802ce28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d000:	3b01      	subs	r3, #1
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	4413      	add	r3, r2
 800d006:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	f023 0307 	bic.w	r3, r3, #7
 800d00e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d010:	69bb      	ldr	r3, [r7, #24]
 800d012:	f003 0307 	and.w	r3, r3, #7
 800d016:	2b00      	cmp	r3, #0
 800d018:	d00a      	beq.n	800d030 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01e:	f383 8811 	msr	BASEPRI, r3
 800d022:	f3bf 8f6f 	isb	sy
 800d026:	f3bf 8f4f 	dsb	sy
 800d02a:	617b      	str	r3, [r7, #20]
}
 800d02c:	bf00      	nop
 800d02e:	e7fe      	b.n	800d02e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d01f      	beq.n	800d076 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d036:	2300      	movs	r3, #0
 800d038:	61fb      	str	r3, [r7, #28]
 800d03a:	e012      	b.n	800d062 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d03c:	68ba      	ldr	r2, [r7, #8]
 800d03e:	69fb      	ldr	r3, [r7, #28]
 800d040:	4413      	add	r3, r2
 800d042:	7819      	ldrb	r1, [r3, #0]
 800d044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	4413      	add	r3, r2
 800d04a:	3334      	adds	r3, #52	; 0x34
 800d04c:	460a      	mov	r2, r1
 800d04e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d050:	68ba      	ldr	r2, [r7, #8]
 800d052:	69fb      	ldr	r3, [r7, #28]
 800d054:	4413      	add	r3, r2
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d006      	beq.n	800d06a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	3301      	adds	r3, #1
 800d060:	61fb      	str	r3, [r7, #28]
 800d062:	69fb      	ldr	r3, [r7, #28]
 800d064:	2b0f      	cmp	r3, #15
 800d066:	d9e9      	bls.n	800d03c <prvInitialiseNewTask+0x64>
 800d068:	e000      	b.n	800d06c <prvInitialiseNewTask+0x94>
			{
				break;
 800d06a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06e:	2200      	movs	r2, #0
 800d070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d074:	e003      	b.n	800d07e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d078:	2200      	movs	r2, #0
 800d07a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d080:	2b37      	cmp	r3, #55	; 0x37
 800d082:	d901      	bls.n	800d088 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d084:	2337      	movs	r3, #55	; 0x37
 800d086:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d08c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d092:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d096:	2200      	movs	r2, #0
 800d098:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09c:	3304      	adds	r3, #4
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7fe fc06 	bl	800b8b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a6:	3318      	adds	r3, #24
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7fe fc01 	bl	800b8b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d6:	3354      	adds	r3, #84	; 0x54
 800d0d8:	2260      	movs	r2, #96	; 0x60
 800d0da:	2100      	movs	r1, #0
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f01f fea3 	bl	802ce28 <memset>
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e4:	4a0c      	ldr	r2, [pc, #48]	; (800d118 <prvInitialiseNewTask+0x140>)
 800d0e6:	659a      	str	r2, [r3, #88]	; 0x58
 800d0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ea:	4a0c      	ldr	r2, [pc, #48]	; (800d11c <prvInitialiseNewTask+0x144>)
 800d0ec:	65da      	str	r2, [r3, #92]	; 0x5c
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f0:	4a0b      	ldr	r2, [pc, #44]	; (800d120 <prvInitialiseNewTask+0x148>)
 800d0f2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d0f4:	683a      	ldr	r2, [r7, #0]
 800d0f6:	68f9      	ldr	r1, [r7, #12]
 800d0f8:	69b8      	ldr	r0, [r7, #24]
 800d0fa:	f7fe fc6d 	bl	800b9d8 <pxPortInitialiseStack>
 800d0fe:	4602      	mov	r2, r0
 800d100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d102:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d106:	2b00      	cmp	r3, #0
 800d108:	d002      	beq.n	800d110 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d10e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d110:	bf00      	nop
 800d112:	3720      	adds	r7, #32
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	08032b54 	.word	0x08032b54
 800d11c:	08032b74 	.word	0x08032b74
 800d120:	08032b34 	.word	0x08032b34

0800d124 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d12c:	f7fe fd82 	bl	800bc34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d130:	4b2d      	ldr	r3, [pc, #180]	; (800d1e8 <prvAddNewTaskToReadyList+0xc4>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	3301      	adds	r3, #1
 800d136:	4a2c      	ldr	r2, [pc, #176]	; (800d1e8 <prvAddNewTaskToReadyList+0xc4>)
 800d138:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d13a:	4b2c      	ldr	r3, [pc, #176]	; (800d1ec <prvAddNewTaskToReadyList+0xc8>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d109      	bne.n	800d156 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d142:	4a2a      	ldr	r2, [pc, #168]	; (800d1ec <prvAddNewTaskToReadyList+0xc8>)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d148:	4b27      	ldr	r3, [pc, #156]	; (800d1e8 <prvAddNewTaskToReadyList+0xc4>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d110      	bne.n	800d172 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d150:	f000 fc38 	bl	800d9c4 <prvInitialiseTaskLists>
 800d154:	e00d      	b.n	800d172 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d156:	4b26      	ldr	r3, [pc, #152]	; (800d1f0 <prvAddNewTaskToReadyList+0xcc>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d109      	bne.n	800d172 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d15e:	4b23      	ldr	r3, [pc, #140]	; (800d1ec <prvAddNewTaskToReadyList+0xc8>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d168:	429a      	cmp	r2, r3
 800d16a:	d802      	bhi.n	800d172 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d16c:	4a1f      	ldr	r2, [pc, #124]	; (800d1ec <prvAddNewTaskToReadyList+0xc8>)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d172:	4b20      	ldr	r3, [pc, #128]	; (800d1f4 <prvAddNewTaskToReadyList+0xd0>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	3301      	adds	r3, #1
 800d178:	4a1e      	ldr	r2, [pc, #120]	; (800d1f4 <prvAddNewTaskToReadyList+0xd0>)
 800d17a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d17c:	4b1d      	ldr	r3, [pc, #116]	; (800d1f4 <prvAddNewTaskToReadyList+0xd0>)
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d188:	4b1b      	ldr	r3, [pc, #108]	; (800d1f8 <prvAddNewTaskToReadyList+0xd4>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d903      	bls.n	800d198 <prvAddNewTaskToReadyList+0x74>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d194:	4a18      	ldr	r2, [pc, #96]	; (800d1f8 <prvAddNewTaskToReadyList+0xd4>)
 800d196:	6013      	str	r3, [r2, #0]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d19c:	4613      	mov	r3, r2
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	4413      	add	r3, r2
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	4a15      	ldr	r2, [pc, #84]	; (800d1fc <prvAddNewTaskToReadyList+0xd8>)
 800d1a6:	441a      	add	r2, r3
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	3304      	adds	r3, #4
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	4610      	mov	r0, r2
 800d1b0:	f7fe fb8b 	bl	800b8ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d1b4:	f7fe fd6e 	bl	800bc94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d1b8:	4b0d      	ldr	r3, [pc, #52]	; (800d1f0 <prvAddNewTaskToReadyList+0xcc>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00e      	beq.n	800d1de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d1c0:	4b0a      	ldr	r3, [pc, #40]	; (800d1ec <prvAddNewTaskToReadyList+0xc8>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d207      	bcs.n	800d1de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d1ce:	4b0c      	ldr	r3, [pc, #48]	; (800d200 <prvAddNewTaskToReadyList+0xdc>)
 800d1d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1d4:	601a      	str	r2, [r3, #0]
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1de:	bf00      	nop
 800d1e0:	3708      	adds	r7, #8
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	200049d0 	.word	0x200049d0
 800d1ec:	200044fc 	.word	0x200044fc
 800d1f0:	200049dc 	.word	0x200049dc
 800d1f4:	200049ec 	.word	0x200049ec
 800d1f8:	200049d8 	.word	0x200049d8
 800d1fc:	20004500 	.word	0x20004500
 800d200:	e000ed04 	.word	0xe000ed04

0800d204 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d20c:	2300      	movs	r3, #0
 800d20e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d017      	beq.n	800d246 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d216:	4b13      	ldr	r3, [pc, #76]	; (800d264 <vTaskDelay+0x60>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00a      	beq.n	800d234 <vTaskDelay+0x30>
	__asm volatile
 800d21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	60bb      	str	r3, [r7, #8]
}
 800d230:	bf00      	nop
 800d232:	e7fe      	b.n	800d232 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d234:	f000 f88a 	bl	800d34c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d238:	2100      	movs	r1, #0
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 fe0e 	bl	800de5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d240:	f000 f892 	bl	800d368 <xTaskResumeAll>
 800d244:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d107      	bne.n	800d25c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d24c:	4b06      	ldr	r3, [pc, #24]	; (800d268 <vTaskDelay+0x64>)
 800d24e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d252:	601a      	str	r2, [r3, #0]
 800d254:	f3bf 8f4f 	dsb	sy
 800d258:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d25c:	bf00      	nop
 800d25e:	3710      	adds	r7, #16
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}
 800d264:	200049f8 	.word	0x200049f8
 800d268:	e000ed04 	.word	0xe000ed04

0800d26c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b08a      	sub	sp, #40	; 0x28
 800d270:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d272:	2300      	movs	r3, #0
 800d274:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d276:	2300      	movs	r3, #0
 800d278:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d27a:	463a      	mov	r2, r7
 800d27c:	1d39      	adds	r1, r7, #4
 800d27e:	f107 0308 	add.w	r3, r7, #8
 800d282:	4618      	mov	r0, r3
 800d284:	f7fe f8d6 	bl	800b434 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d288:	6839      	ldr	r1, [r7, #0]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	68ba      	ldr	r2, [r7, #8]
 800d28e:	9202      	str	r2, [sp, #8]
 800d290:	9301      	str	r3, [sp, #4]
 800d292:	2300      	movs	r3, #0
 800d294:	9300      	str	r3, [sp, #0]
 800d296:	2300      	movs	r3, #0
 800d298:	460a      	mov	r2, r1
 800d29a:	4924      	ldr	r1, [pc, #144]	; (800d32c <vTaskStartScheduler+0xc0>)
 800d29c:	4824      	ldr	r0, [pc, #144]	; (800d330 <vTaskStartScheduler+0xc4>)
 800d29e:	f7ff fdf9 	bl	800ce94 <xTaskCreateStatic>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	4a23      	ldr	r2, [pc, #140]	; (800d334 <vTaskStartScheduler+0xc8>)
 800d2a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d2a8:	4b22      	ldr	r3, [pc, #136]	; (800d334 <vTaskStartScheduler+0xc8>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d002      	beq.n	800d2b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	617b      	str	r3, [r7, #20]
 800d2b4:	e001      	b.n	800d2ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d102      	bne.n	800d2c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d2c0:	f000 fe20 	bl	800df04 <xTimerCreateTimerTask>
 800d2c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d11b      	bne.n	800d304 <vTaskStartScheduler+0x98>
	__asm volatile
 800d2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	613b      	str	r3, [r7, #16]
}
 800d2de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d2e0:	4b15      	ldr	r3, [pc, #84]	; (800d338 <vTaskStartScheduler+0xcc>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	3354      	adds	r3, #84	; 0x54
 800d2e6:	4a15      	ldr	r2, [pc, #84]	; (800d33c <vTaskStartScheduler+0xd0>)
 800d2e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d2ea:	4b15      	ldr	r3, [pc, #84]	; (800d340 <vTaskStartScheduler+0xd4>)
 800d2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d2f2:	4b14      	ldr	r3, [pc, #80]	; (800d344 <vTaskStartScheduler+0xd8>)
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d2f8:	4b13      	ldr	r3, [pc, #76]	; (800d348 <vTaskStartScheduler+0xdc>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d2fe:	f7fe fbf7 	bl	800baf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d302:	e00e      	b.n	800d322 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d30a:	d10a      	bne.n	800d322 <vTaskStartScheduler+0xb6>
	__asm volatile
 800d30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d310:	f383 8811 	msr	BASEPRI, r3
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	f3bf 8f4f 	dsb	sy
 800d31c:	60fb      	str	r3, [r7, #12]
}
 800d31e:	bf00      	nop
 800d320:	e7fe      	b.n	800d320 <vTaskStartScheduler+0xb4>
}
 800d322:	bf00      	nop
 800d324:	3718      	adds	r7, #24
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	0802e504 	.word	0x0802e504
 800d330:	0800d995 	.word	0x0800d995
 800d334:	200049f4 	.word	0x200049f4
 800d338:	200044fc 	.word	0x200044fc
 800d33c:	20000094 	.word	0x20000094
 800d340:	200049f0 	.word	0x200049f0
 800d344:	200049dc 	.word	0x200049dc
 800d348:	200049d4 	.word	0x200049d4

0800d34c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d34c:	b480      	push	{r7}
 800d34e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d350:	4b04      	ldr	r3, [pc, #16]	; (800d364 <vTaskSuspendAll+0x18>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	3301      	adds	r3, #1
 800d356:	4a03      	ldr	r2, [pc, #12]	; (800d364 <vTaskSuspendAll+0x18>)
 800d358:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d35a:	bf00      	nop
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr
 800d364:	200049f8 	.word	0x200049f8

0800d368 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d36e:	2300      	movs	r3, #0
 800d370:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d372:	2300      	movs	r3, #0
 800d374:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d376:	4b42      	ldr	r3, [pc, #264]	; (800d480 <xTaskResumeAll+0x118>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d10a      	bne.n	800d394 <xTaskResumeAll+0x2c>
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	603b      	str	r3, [r7, #0]
}
 800d390:	bf00      	nop
 800d392:	e7fe      	b.n	800d392 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d394:	f7fe fc4e 	bl	800bc34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d398:	4b39      	ldr	r3, [pc, #228]	; (800d480 <xTaskResumeAll+0x118>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	3b01      	subs	r3, #1
 800d39e:	4a38      	ldr	r2, [pc, #224]	; (800d480 <xTaskResumeAll+0x118>)
 800d3a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3a2:	4b37      	ldr	r3, [pc, #220]	; (800d480 <xTaskResumeAll+0x118>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d162      	bne.n	800d470 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d3aa:	4b36      	ldr	r3, [pc, #216]	; (800d484 <xTaskResumeAll+0x11c>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d05e      	beq.n	800d470 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3b2:	e02f      	b.n	800d414 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3b4:	4b34      	ldr	r3, [pc, #208]	; (800d488 <xTaskResumeAll+0x120>)
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	68db      	ldr	r3, [r3, #12]
 800d3ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	3318      	adds	r3, #24
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7fe fadf 	bl	800b984 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	3304      	adds	r3, #4
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fe fada 	bl	800b984 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3d4:	4b2d      	ldr	r3, [pc, #180]	; (800d48c <xTaskResumeAll+0x124>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d903      	bls.n	800d3e4 <xTaskResumeAll+0x7c>
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e0:	4a2a      	ldr	r2, [pc, #168]	; (800d48c <xTaskResumeAll+0x124>)
 800d3e2:	6013      	str	r3, [r2, #0]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4413      	add	r3, r2
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	4a27      	ldr	r2, [pc, #156]	; (800d490 <xTaskResumeAll+0x128>)
 800d3f2:	441a      	add	r2, r3
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	3304      	adds	r3, #4
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	4610      	mov	r0, r2
 800d3fc:	f7fe fa65 	bl	800b8ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d404:	4b23      	ldr	r3, [pc, #140]	; (800d494 <xTaskResumeAll+0x12c>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d302      	bcc.n	800d414 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d40e:	4b22      	ldr	r3, [pc, #136]	; (800d498 <xTaskResumeAll+0x130>)
 800d410:	2201      	movs	r2, #1
 800d412:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d414:	4b1c      	ldr	r3, [pc, #112]	; (800d488 <xTaskResumeAll+0x120>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1cb      	bne.n	800d3b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d001      	beq.n	800d426 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d422:	f000 fb71 	bl	800db08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d426:	4b1d      	ldr	r3, [pc, #116]	; (800d49c <xTaskResumeAll+0x134>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d010      	beq.n	800d454 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d432:	f000 f859 	bl	800d4e8 <xTaskIncrementTick>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d002      	beq.n	800d442 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d43c:	4b16      	ldr	r3, [pc, #88]	; (800d498 <xTaskResumeAll+0x130>)
 800d43e:	2201      	movs	r2, #1
 800d440:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	3b01      	subs	r3, #1
 800d446:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1f1      	bne.n	800d432 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d44e:	4b13      	ldr	r3, [pc, #76]	; (800d49c <xTaskResumeAll+0x134>)
 800d450:	2200      	movs	r2, #0
 800d452:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d454:	4b10      	ldr	r3, [pc, #64]	; (800d498 <xTaskResumeAll+0x130>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d009      	beq.n	800d470 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d45c:	2301      	movs	r3, #1
 800d45e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d460:	4b0f      	ldr	r3, [pc, #60]	; (800d4a0 <xTaskResumeAll+0x138>)
 800d462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d466:	601a      	str	r2, [r3, #0]
 800d468:	f3bf 8f4f 	dsb	sy
 800d46c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d470:	f7fe fc10 	bl	800bc94 <vPortExitCritical>

	return xAlreadyYielded;
 800d474:	68bb      	ldr	r3, [r7, #8]
}
 800d476:	4618      	mov	r0, r3
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	200049f8 	.word	0x200049f8
 800d484:	200049d0 	.word	0x200049d0
 800d488:	20004990 	.word	0x20004990
 800d48c:	200049d8 	.word	0x200049d8
 800d490:	20004500 	.word	0x20004500
 800d494:	200044fc 	.word	0x200044fc
 800d498:	200049e4 	.word	0x200049e4
 800d49c:	200049e0 	.word	0x200049e0
 800d4a0:	e000ed04 	.word	0xe000ed04

0800d4a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d4aa:	4b05      	ldr	r3, [pc, #20]	; (800d4c0 <xTaskGetTickCount+0x1c>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d4b0:	687b      	ldr	r3, [r7, #4]
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	370c      	adds	r7, #12
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr
 800d4be:	bf00      	nop
 800d4c0:	200049d4 	.word	0x200049d4

0800d4c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4ca:	f7fe fc95 	bl	800bdf8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d4d2:	4b04      	ldr	r3, [pc, #16]	; (800d4e4 <xTaskGetTickCountFromISR+0x20>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d4d8:	683b      	ldr	r3, [r7, #0]
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3708      	adds	r7, #8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	200049d4 	.word	0x200049d4

0800d4e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b086      	sub	sp, #24
 800d4ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4f2:	4b4f      	ldr	r3, [pc, #316]	; (800d630 <xTaskIncrementTick+0x148>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	f040 808f 	bne.w	800d61a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4fc:	4b4d      	ldr	r3, [pc, #308]	; (800d634 <xTaskIncrementTick+0x14c>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	3301      	adds	r3, #1
 800d502:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d504:	4a4b      	ldr	r2, [pc, #300]	; (800d634 <xTaskIncrementTick+0x14c>)
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d120      	bne.n	800d552 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d510:	4b49      	ldr	r3, [pc, #292]	; (800d638 <xTaskIncrementTick+0x150>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00a      	beq.n	800d530 <xTaskIncrementTick+0x48>
	__asm volatile
 800d51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51e:	f383 8811 	msr	BASEPRI, r3
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	603b      	str	r3, [r7, #0]
}
 800d52c:	bf00      	nop
 800d52e:	e7fe      	b.n	800d52e <xTaskIncrementTick+0x46>
 800d530:	4b41      	ldr	r3, [pc, #260]	; (800d638 <xTaskIncrementTick+0x150>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	60fb      	str	r3, [r7, #12]
 800d536:	4b41      	ldr	r3, [pc, #260]	; (800d63c <xTaskIncrementTick+0x154>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4a3f      	ldr	r2, [pc, #252]	; (800d638 <xTaskIncrementTick+0x150>)
 800d53c:	6013      	str	r3, [r2, #0]
 800d53e:	4a3f      	ldr	r2, [pc, #252]	; (800d63c <xTaskIncrementTick+0x154>)
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	6013      	str	r3, [r2, #0]
 800d544:	4b3e      	ldr	r3, [pc, #248]	; (800d640 <xTaskIncrementTick+0x158>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	3301      	adds	r3, #1
 800d54a:	4a3d      	ldr	r2, [pc, #244]	; (800d640 <xTaskIncrementTick+0x158>)
 800d54c:	6013      	str	r3, [r2, #0]
 800d54e:	f000 fadb 	bl	800db08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d552:	4b3c      	ldr	r3, [pc, #240]	; (800d644 <xTaskIncrementTick+0x15c>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	693a      	ldr	r2, [r7, #16]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d349      	bcc.n	800d5f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d55c:	4b36      	ldr	r3, [pc, #216]	; (800d638 <xTaskIncrementTick+0x150>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d104      	bne.n	800d570 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d566:	4b37      	ldr	r3, [pc, #220]	; (800d644 <xTaskIncrementTick+0x15c>)
 800d568:	f04f 32ff 	mov.w	r2, #4294967295
 800d56c:	601a      	str	r2, [r3, #0]
					break;
 800d56e:	e03f      	b.n	800d5f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d570:	4b31      	ldr	r3, [pc, #196]	; (800d638 <xTaskIncrementTick+0x150>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	68db      	ldr	r3, [r3, #12]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d580:	693a      	ldr	r2, [r7, #16]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	429a      	cmp	r2, r3
 800d586:	d203      	bcs.n	800d590 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d588:	4a2e      	ldr	r2, [pc, #184]	; (800d644 <xTaskIncrementTick+0x15c>)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d58e:	e02f      	b.n	800d5f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	3304      	adds	r3, #4
 800d594:	4618      	mov	r0, r3
 800d596:	f7fe f9f5 	bl	800b984 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d004      	beq.n	800d5ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	3318      	adds	r3, #24
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7fe f9ec 	bl	800b984 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5b0:	4b25      	ldr	r3, [pc, #148]	; (800d648 <xTaskIncrementTick+0x160>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d903      	bls.n	800d5c0 <xTaskIncrementTick+0xd8>
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5bc:	4a22      	ldr	r2, [pc, #136]	; (800d648 <xTaskIncrementTick+0x160>)
 800d5be:	6013      	str	r3, [r2, #0]
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	4413      	add	r3, r2
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	4a1f      	ldr	r2, [pc, #124]	; (800d64c <xTaskIncrementTick+0x164>)
 800d5ce:	441a      	add	r2, r3
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	3304      	adds	r3, #4
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	4610      	mov	r0, r2
 800d5d8:	f7fe f977 	bl	800b8ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e0:	4b1b      	ldr	r3, [pc, #108]	; (800d650 <xTaskIncrementTick+0x168>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d3b8      	bcc.n	800d55c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5ee:	e7b5      	b.n	800d55c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5f0:	4b17      	ldr	r3, [pc, #92]	; (800d650 <xTaskIncrementTick+0x168>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5f6:	4915      	ldr	r1, [pc, #84]	; (800d64c <xTaskIncrementTick+0x164>)
 800d5f8:	4613      	mov	r3, r2
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	4413      	add	r3, r2
 800d5fe:	009b      	lsls	r3, r3, #2
 800d600:	440b      	add	r3, r1
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	2b01      	cmp	r3, #1
 800d606:	d901      	bls.n	800d60c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d608:	2301      	movs	r3, #1
 800d60a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d60c:	4b11      	ldr	r3, [pc, #68]	; (800d654 <xTaskIncrementTick+0x16c>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d007      	beq.n	800d624 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d614:	2301      	movs	r3, #1
 800d616:	617b      	str	r3, [r7, #20]
 800d618:	e004      	b.n	800d624 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d61a:	4b0f      	ldr	r3, [pc, #60]	; (800d658 <xTaskIncrementTick+0x170>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	3301      	adds	r3, #1
 800d620:	4a0d      	ldr	r2, [pc, #52]	; (800d658 <xTaskIncrementTick+0x170>)
 800d622:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d624:	697b      	ldr	r3, [r7, #20]
}
 800d626:	4618      	mov	r0, r3
 800d628:	3718      	adds	r7, #24
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	200049f8 	.word	0x200049f8
 800d634:	200049d4 	.word	0x200049d4
 800d638:	20004988 	.word	0x20004988
 800d63c:	2000498c 	.word	0x2000498c
 800d640:	200049e8 	.word	0x200049e8
 800d644:	200049f0 	.word	0x200049f0
 800d648:	200049d8 	.word	0x200049d8
 800d64c:	20004500 	.word	0x20004500
 800d650:	200044fc 	.word	0x200044fc
 800d654:	200049e4 	.word	0x200049e4
 800d658:	200049e0 	.word	0x200049e0

0800d65c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d65c:	b480      	push	{r7}
 800d65e:	b085      	sub	sp, #20
 800d660:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d662:	4b2a      	ldr	r3, [pc, #168]	; (800d70c <vTaskSwitchContext+0xb0>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d003      	beq.n	800d672 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d66a:	4b29      	ldr	r3, [pc, #164]	; (800d710 <vTaskSwitchContext+0xb4>)
 800d66c:	2201      	movs	r2, #1
 800d66e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d670:	e046      	b.n	800d700 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d672:	4b27      	ldr	r3, [pc, #156]	; (800d710 <vTaskSwitchContext+0xb4>)
 800d674:	2200      	movs	r2, #0
 800d676:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d678:	4b26      	ldr	r3, [pc, #152]	; (800d714 <vTaskSwitchContext+0xb8>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	60fb      	str	r3, [r7, #12]
 800d67e:	e010      	b.n	800d6a2 <vTaskSwitchContext+0x46>
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d10a      	bne.n	800d69c <vTaskSwitchContext+0x40>
	__asm volatile
 800d686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68a:	f383 8811 	msr	BASEPRI, r3
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	f3bf 8f4f 	dsb	sy
 800d696:	607b      	str	r3, [r7, #4]
}
 800d698:	bf00      	nop
 800d69a:	e7fe      	b.n	800d69a <vTaskSwitchContext+0x3e>
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	60fb      	str	r3, [r7, #12]
 800d6a2:	491d      	ldr	r1, [pc, #116]	; (800d718 <vTaskSwitchContext+0xbc>)
 800d6a4:	68fa      	ldr	r2, [r7, #12]
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	4413      	add	r3, r2
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	440b      	add	r3, r1
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d0e4      	beq.n	800d680 <vTaskSwitchContext+0x24>
 800d6b6:	68fa      	ldr	r2, [r7, #12]
 800d6b8:	4613      	mov	r3, r2
 800d6ba:	009b      	lsls	r3, r3, #2
 800d6bc:	4413      	add	r3, r2
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	4a15      	ldr	r2, [pc, #84]	; (800d718 <vTaskSwitchContext+0xbc>)
 800d6c2:	4413      	add	r3, r2
 800d6c4:	60bb      	str	r3, [r7, #8]
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	685a      	ldr	r2, [r3, #4]
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	605a      	str	r2, [r3, #4]
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	685a      	ldr	r2, [r3, #4]
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	3308      	adds	r3, #8
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d104      	bne.n	800d6e6 <vTaskSwitchContext+0x8a>
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	685a      	ldr	r2, [r3, #4]
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	605a      	str	r2, [r3, #4]
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	4a0b      	ldr	r2, [pc, #44]	; (800d71c <vTaskSwitchContext+0xc0>)
 800d6ee:	6013      	str	r3, [r2, #0]
 800d6f0:	4a08      	ldr	r2, [pc, #32]	; (800d714 <vTaskSwitchContext+0xb8>)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d6f6:	4b09      	ldr	r3, [pc, #36]	; (800d71c <vTaskSwitchContext+0xc0>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	3354      	adds	r3, #84	; 0x54
 800d6fc:	4a08      	ldr	r2, [pc, #32]	; (800d720 <vTaskSwitchContext+0xc4>)
 800d6fe:	6013      	str	r3, [r2, #0]
}
 800d700:	bf00      	nop
 800d702:	3714      	adds	r7, #20
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr
 800d70c:	200049f8 	.word	0x200049f8
 800d710:	200049e4 	.word	0x200049e4
 800d714:	200049d8 	.word	0x200049d8
 800d718:	20004500 	.word	0x20004500
 800d71c:	200044fc 	.word	0x200044fc
 800d720:	20000094 	.word	0x20000094

0800d724 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b084      	sub	sp, #16
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10a      	bne.n	800d74a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	60fb      	str	r3, [r7, #12]
}
 800d746:	bf00      	nop
 800d748:	e7fe      	b.n	800d748 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d74a:	4b07      	ldr	r3, [pc, #28]	; (800d768 <vTaskPlaceOnEventList+0x44>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	3318      	adds	r3, #24
 800d750:	4619      	mov	r1, r3
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f7fe f8dd 	bl	800b912 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d758:	2101      	movs	r1, #1
 800d75a:	6838      	ldr	r0, [r7, #0]
 800d75c:	f000 fb7e 	bl	800de5c <prvAddCurrentTaskToDelayedList>
}
 800d760:	bf00      	nop
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	200044fc 	.word	0x200044fc

0800d76c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b086      	sub	sp, #24
 800d770:	af00      	add	r7, sp, #0
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	60b9      	str	r1, [r7, #8]
 800d776:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d10a      	bne.n	800d794 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d782:	f383 8811 	msr	BASEPRI, r3
 800d786:	f3bf 8f6f 	isb	sy
 800d78a:	f3bf 8f4f 	dsb	sy
 800d78e:	617b      	str	r3, [r7, #20]
}
 800d790:	bf00      	nop
 800d792:	e7fe      	b.n	800d792 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d794:	4b0a      	ldr	r3, [pc, #40]	; (800d7c0 <vTaskPlaceOnEventListRestricted+0x54>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	3318      	adds	r3, #24
 800d79a:	4619      	mov	r1, r3
 800d79c:	68f8      	ldr	r0, [r7, #12]
 800d79e:	f7fe f894 	bl	800b8ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d002      	beq.n	800d7ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d7ae:	6879      	ldr	r1, [r7, #4]
 800d7b0:	68b8      	ldr	r0, [r7, #8]
 800d7b2:	f000 fb53 	bl	800de5c <prvAddCurrentTaskToDelayedList>
	}
 800d7b6:	bf00      	nop
 800d7b8:	3718      	adds	r7, #24
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	200044fc 	.word	0x200044fc

0800d7c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b086      	sub	sp, #24
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	68db      	ldr	r3, [r3, #12]
 800d7d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d10a      	bne.n	800d7f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7de:	f383 8811 	msr	BASEPRI, r3
 800d7e2:	f3bf 8f6f 	isb	sy
 800d7e6:	f3bf 8f4f 	dsb	sy
 800d7ea:	60fb      	str	r3, [r7, #12]
}
 800d7ec:	bf00      	nop
 800d7ee:	e7fe      	b.n	800d7ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	3318      	adds	r3, #24
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7fe f8c5 	bl	800b984 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7fa:	4b1e      	ldr	r3, [pc, #120]	; (800d874 <xTaskRemoveFromEventList+0xb0>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d11d      	bne.n	800d83e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	3304      	adds	r3, #4
 800d806:	4618      	mov	r0, r3
 800d808:	f7fe f8bc 	bl	800b984 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d810:	4b19      	ldr	r3, [pc, #100]	; (800d878 <xTaskRemoveFromEventList+0xb4>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	429a      	cmp	r2, r3
 800d816:	d903      	bls.n	800d820 <xTaskRemoveFromEventList+0x5c>
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81c:	4a16      	ldr	r2, [pc, #88]	; (800d878 <xTaskRemoveFromEventList+0xb4>)
 800d81e:	6013      	str	r3, [r2, #0]
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d824:	4613      	mov	r3, r2
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	4413      	add	r3, r2
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	4a13      	ldr	r2, [pc, #76]	; (800d87c <xTaskRemoveFromEventList+0xb8>)
 800d82e:	441a      	add	r2, r3
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	3304      	adds	r3, #4
 800d834:	4619      	mov	r1, r3
 800d836:	4610      	mov	r0, r2
 800d838:	f7fe f847 	bl	800b8ca <vListInsertEnd>
 800d83c:	e005      	b.n	800d84a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	3318      	adds	r3, #24
 800d842:	4619      	mov	r1, r3
 800d844:	480e      	ldr	r0, [pc, #56]	; (800d880 <xTaskRemoveFromEventList+0xbc>)
 800d846:	f7fe f840 	bl	800b8ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d84e:	4b0d      	ldr	r3, [pc, #52]	; (800d884 <xTaskRemoveFromEventList+0xc0>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d854:	429a      	cmp	r2, r3
 800d856:	d905      	bls.n	800d864 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d858:	2301      	movs	r3, #1
 800d85a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d85c:	4b0a      	ldr	r3, [pc, #40]	; (800d888 <xTaskRemoveFromEventList+0xc4>)
 800d85e:	2201      	movs	r2, #1
 800d860:	601a      	str	r2, [r3, #0]
 800d862:	e001      	b.n	800d868 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d864:	2300      	movs	r3, #0
 800d866:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d868:	697b      	ldr	r3, [r7, #20]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3718      	adds	r7, #24
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	200049f8 	.word	0x200049f8
 800d878:	200049d8 	.word	0x200049d8
 800d87c:	20004500 	.word	0x20004500
 800d880:	20004990 	.word	0x20004990
 800d884:	200044fc 	.word	0x200044fc
 800d888:	200049e4 	.word	0x200049e4

0800d88c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d894:	4b06      	ldr	r3, [pc, #24]	; (800d8b0 <vTaskInternalSetTimeOutState+0x24>)
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d89c:	4b05      	ldr	r3, [pc, #20]	; (800d8b4 <vTaskInternalSetTimeOutState+0x28>)
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	605a      	str	r2, [r3, #4]
}
 800d8a4:	bf00      	nop
 800d8a6:	370c      	adds	r7, #12
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr
 800d8b0:	200049e8 	.word	0x200049e8
 800d8b4:	200049d4 	.word	0x200049d4

0800d8b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b088      	sub	sp, #32
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d10a      	bne.n	800d8de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8cc:	f383 8811 	msr	BASEPRI, r3
 800d8d0:	f3bf 8f6f 	isb	sy
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	613b      	str	r3, [r7, #16]
}
 800d8da:	bf00      	nop
 800d8dc:	e7fe      	b.n	800d8dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d10a      	bne.n	800d8fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e8:	f383 8811 	msr	BASEPRI, r3
 800d8ec:	f3bf 8f6f 	isb	sy
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	60fb      	str	r3, [r7, #12]
}
 800d8f6:	bf00      	nop
 800d8f8:	e7fe      	b.n	800d8f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d8fa:	f7fe f99b 	bl	800bc34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d8fe:	4b1d      	ldr	r3, [pc, #116]	; (800d974 <xTaskCheckForTimeOut+0xbc>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	69ba      	ldr	r2, [r7, #24]
 800d90a:	1ad3      	subs	r3, r2, r3
 800d90c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d916:	d102      	bne.n	800d91e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d918:	2300      	movs	r3, #0
 800d91a:	61fb      	str	r3, [r7, #28]
 800d91c:	e023      	b.n	800d966 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	4b15      	ldr	r3, [pc, #84]	; (800d978 <xTaskCheckForTimeOut+0xc0>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	429a      	cmp	r2, r3
 800d928:	d007      	beq.n	800d93a <xTaskCheckForTimeOut+0x82>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	69ba      	ldr	r2, [r7, #24]
 800d930:	429a      	cmp	r2, r3
 800d932:	d302      	bcc.n	800d93a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d934:	2301      	movs	r3, #1
 800d936:	61fb      	str	r3, [r7, #28]
 800d938:	e015      	b.n	800d966 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	697a      	ldr	r2, [r7, #20]
 800d940:	429a      	cmp	r2, r3
 800d942:	d20b      	bcs.n	800d95c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	1ad2      	subs	r2, r2, r3
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f7ff ff9b 	bl	800d88c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d956:	2300      	movs	r3, #0
 800d958:	61fb      	str	r3, [r7, #28]
 800d95a:	e004      	b.n	800d966 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	2200      	movs	r2, #0
 800d960:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d962:	2301      	movs	r3, #1
 800d964:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d966:	f7fe f995 	bl	800bc94 <vPortExitCritical>

	return xReturn;
 800d96a:	69fb      	ldr	r3, [r7, #28]
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3720      	adds	r7, #32
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	200049d4 	.word	0x200049d4
 800d978:	200049e8 	.word	0x200049e8

0800d97c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d97c:	b480      	push	{r7}
 800d97e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d980:	4b03      	ldr	r3, [pc, #12]	; (800d990 <vTaskMissedYield+0x14>)
 800d982:	2201      	movs	r2, #1
 800d984:	601a      	str	r2, [r3, #0]
}
 800d986:	bf00      	nop
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr
 800d990:	200049e4 	.word	0x200049e4

0800d994 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d99c:	f000 f852 	bl	800da44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d9a0:	4b06      	ldr	r3, [pc, #24]	; (800d9bc <prvIdleTask+0x28>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d9f9      	bls.n	800d99c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d9a8:	4b05      	ldr	r3, [pc, #20]	; (800d9c0 <prvIdleTask+0x2c>)
 800d9aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9ae:	601a      	str	r2, [r3, #0]
 800d9b0:	f3bf 8f4f 	dsb	sy
 800d9b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d9b8:	e7f0      	b.n	800d99c <prvIdleTask+0x8>
 800d9ba:	bf00      	nop
 800d9bc:	20004500 	.word	0x20004500
 800d9c0:	e000ed04 	.word	0xe000ed04

0800d9c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	607b      	str	r3, [r7, #4]
 800d9ce:	e00c      	b.n	800d9ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	4613      	mov	r3, r2
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	4413      	add	r3, r2
 800d9d8:	009b      	lsls	r3, r3, #2
 800d9da:	4a12      	ldr	r2, [pc, #72]	; (800da24 <prvInitialiseTaskLists+0x60>)
 800d9dc:	4413      	add	r3, r2
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7fd ff46 	bl	800b870 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	607b      	str	r3, [r7, #4]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2b37      	cmp	r3, #55	; 0x37
 800d9ee:	d9ef      	bls.n	800d9d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d9f0:	480d      	ldr	r0, [pc, #52]	; (800da28 <prvInitialiseTaskLists+0x64>)
 800d9f2:	f7fd ff3d 	bl	800b870 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d9f6:	480d      	ldr	r0, [pc, #52]	; (800da2c <prvInitialiseTaskLists+0x68>)
 800d9f8:	f7fd ff3a 	bl	800b870 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d9fc:	480c      	ldr	r0, [pc, #48]	; (800da30 <prvInitialiseTaskLists+0x6c>)
 800d9fe:	f7fd ff37 	bl	800b870 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800da02:	480c      	ldr	r0, [pc, #48]	; (800da34 <prvInitialiseTaskLists+0x70>)
 800da04:	f7fd ff34 	bl	800b870 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800da08:	480b      	ldr	r0, [pc, #44]	; (800da38 <prvInitialiseTaskLists+0x74>)
 800da0a:	f7fd ff31 	bl	800b870 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800da0e:	4b0b      	ldr	r3, [pc, #44]	; (800da3c <prvInitialiseTaskLists+0x78>)
 800da10:	4a05      	ldr	r2, [pc, #20]	; (800da28 <prvInitialiseTaskLists+0x64>)
 800da12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800da14:	4b0a      	ldr	r3, [pc, #40]	; (800da40 <prvInitialiseTaskLists+0x7c>)
 800da16:	4a05      	ldr	r2, [pc, #20]	; (800da2c <prvInitialiseTaskLists+0x68>)
 800da18:	601a      	str	r2, [r3, #0]
}
 800da1a:	bf00      	nop
 800da1c:	3708      	adds	r7, #8
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	20004500 	.word	0x20004500
 800da28:	20004960 	.word	0x20004960
 800da2c:	20004974 	.word	0x20004974
 800da30:	20004990 	.word	0x20004990
 800da34:	200049a4 	.word	0x200049a4
 800da38:	200049bc 	.word	0x200049bc
 800da3c:	20004988 	.word	0x20004988
 800da40:	2000498c 	.word	0x2000498c

0800da44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da4a:	e019      	b.n	800da80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da4c:	f7fe f8f2 	bl	800bc34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da50:	4b10      	ldr	r3, [pc, #64]	; (800da94 <prvCheckTasksWaitingTermination+0x50>)
 800da52:	68db      	ldr	r3, [r3, #12]
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	3304      	adds	r3, #4
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7fd ff91 	bl	800b984 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da62:	4b0d      	ldr	r3, [pc, #52]	; (800da98 <prvCheckTasksWaitingTermination+0x54>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	3b01      	subs	r3, #1
 800da68:	4a0b      	ldr	r2, [pc, #44]	; (800da98 <prvCheckTasksWaitingTermination+0x54>)
 800da6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da6c:	4b0b      	ldr	r3, [pc, #44]	; (800da9c <prvCheckTasksWaitingTermination+0x58>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	3b01      	subs	r3, #1
 800da72:	4a0a      	ldr	r2, [pc, #40]	; (800da9c <prvCheckTasksWaitingTermination+0x58>)
 800da74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da76:	f7fe f90d 	bl	800bc94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 f810 	bl	800daa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da80:	4b06      	ldr	r3, [pc, #24]	; (800da9c <prvCheckTasksWaitingTermination+0x58>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d1e1      	bne.n	800da4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da88:	bf00      	nop
 800da8a:	bf00      	nop
 800da8c:	3708      	adds	r7, #8
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	200049a4 	.word	0x200049a4
 800da98:	200049d0 	.word	0x200049d0
 800da9c:	200049b8 	.word	0x200049b8

0800daa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	3354      	adds	r3, #84	; 0x54
 800daac:	4618      	mov	r0, r3
 800daae:	f01f fd69 	bl	802d584 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d108      	bne.n	800dace <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7fd fdb7 	bl	800b634 <vPortFree>
				vPortFree( pxTCB );
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f7fd fdb4 	bl	800b634 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dacc:	e018      	b.n	800db00 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800dad4:	2b01      	cmp	r3, #1
 800dad6:	d103      	bne.n	800dae0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f7fd fdab 	bl	800b634 <vPortFree>
	}
 800dade:	e00f      	b.n	800db00 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800dae6:	2b02      	cmp	r3, #2
 800dae8:	d00a      	beq.n	800db00 <prvDeleteTCB+0x60>
	__asm volatile
 800daea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daee:	f383 8811 	msr	BASEPRI, r3
 800daf2:	f3bf 8f6f 	isb	sy
 800daf6:	f3bf 8f4f 	dsb	sy
 800dafa:	60fb      	str	r3, [r7, #12]
}
 800dafc:	bf00      	nop
 800dafe:	e7fe      	b.n	800dafe <prvDeleteTCB+0x5e>
	}
 800db00:	bf00      	nop
 800db02:	3710      	adds	r7, #16
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800db08:	b480      	push	{r7}
 800db0a:	b083      	sub	sp, #12
 800db0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db0e:	4b0c      	ldr	r3, [pc, #48]	; (800db40 <prvResetNextTaskUnblockTime+0x38>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d104      	bne.n	800db22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800db18:	4b0a      	ldr	r3, [pc, #40]	; (800db44 <prvResetNextTaskUnblockTime+0x3c>)
 800db1a:	f04f 32ff 	mov.w	r2, #4294967295
 800db1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800db20:	e008      	b.n	800db34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db22:	4b07      	ldr	r3, [pc, #28]	; (800db40 <prvResetNextTaskUnblockTime+0x38>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	4a04      	ldr	r2, [pc, #16]	; (800db44 <prvResetNextTaskUnblockTime+0x3c>)
 800db32:	6013      	str	r3, [r2, #0]
}
 800db34:	bf00      	nop
 800db36:	370c      	adds	r7, #12
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr
 800db40:	20004988 	.word	0x20004988
 800db44:	200049f0 	.word	0x200049f0

0800db48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db4e:	4b0b      	ldr	r3, [pc, #44]	; (800db7c <xTaskGetSchedulerState+0x34>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d102      	bne.n	800db5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db56:	2301      	movs	r3, #1
 800db58:	607b      	str	r3, [r7, #4]
 800db5a:	e008      	b.n	800db6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db5c:	4b08      	ldr	r3, [pc, #32]	; (800db80 <xTaskGetSchedulerState+0x38>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d102      	bne.n	800db6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db64:	2302      	movs	r3, #2
 800db66:	607b      	str	r3, [r7, #4]
 800db68:	e001      	b.n	800db6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db6a:	2300      	movs	r3, #0
 800db6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db6e:	687b      	ldr	r3, [r7, #4]
	}
 800db70:	4618      	mov	r0, r3
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr
 800db7c:	200049dc 	.word	0x200049dc
 800db80:	200049f8 	.word	0x200049f8

0800db84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800db84:	b580      	push	{r7, lr}
 800db86:	b084      	sub	sp, #16
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800db90:	2300      	movs	r3, #0
 800db92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d051      	beq.n	800dc3e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db9e:	4b2a      	ldr	r3, [pc, #168]	; (800dc48 <xTaskPriorityInherit+0xc4>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d241      	bcs.n	800dc2c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	699b      	ldr	r3, [r3, #24]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	db06      	blt.n	800dbbe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbb0:	4b25      	ldr	r3, [pc, #148]	; (800dc48 <xTaskPriorityInherit+0xc4>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	6959      	ldr	r1, [r3, #20]
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbc6:	4613      	mov	r3, r2
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	4413      	add	r3, r2
 800dbcc:	009b      	lsls	r3, r3, #2
 800dbce:	4a1f      	ldr	r2, [pc, #124]	; (800dc4c <xTaskPriorityInherit+0xc8>)
 800dbd0:	4413      	add	r3, r2
 800dbd2:	4299      	cmp	r1, r3
 800dbd4:	d122      	bne.n	800dc1c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	3304      	adds	r3, #4
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7fd fed2 	bl	800b984 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dbe0:	4b19      	ldr	r3, [pc, #100]	; (800dc48 <xTaskPriorityInherit+0xc4>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbee:	4b18      	ldr	r3, [pc, #96]	; (800dc50 <xTaskPriorityInherit+0xcc>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d903      	bls.n	800dbfe <xTaskPriorityInherit+0x7a>
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfa:	4a15      	ldr	r2, [pc, #84]	; (800dc50 <xTaskPriorityInherit+0xcc>)
 800dbfc:	6013      	str	r3, [r2, #0]
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc02:	4613      	mov	r3, r2
 800dc04:	009b      	lsls	r3, r3, #2
 800dc06:	4413      	add	r3, r2
 800dc08:	009b      	lsls	r3, r3, #2
 800dc0a:	4a10      	ldr	r2, [pc, #64]	; (800dc4c <xTaskPriorityInherit+0xc8>)
 800dc0c:	441a      	add	r2, r3
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	3304      	adds	r3, #4
 800dc12:	4619      	mov	r1, r3
 800dc14:	4610      	mov	r0, r2
 800dc16:	f7fd fe58 	bl	800b8ca <vListInsertEnd>
 800dc1a:	e004      	b.n	800dc26 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc1c:	4b0a      	ldr	r3, [pc, #40]	; (800dc48 <xTaskPriorityInherit+0xc4>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dc26:	2301      	movs	r3, #1
 800dc28:	60fb      	str	r3, [r7, #12]
 800dc2a:	e008      	b.n	800dc3e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc30:	4b05      	ldr	r3, [pc, #20]	; (800dc48 <xTaskPriorityInherit+0xc4>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d201      	bcs.n	800dc3e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
	}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3710      	adds	r7, #16
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	200044fc 	.word	0x200044fc
 800dc4c:	20004500 	.word	0x20004500
 800dc50:	200049d8 	.word	0x200049d8

0800dc54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b086      	sub	sp, #24
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dc60:	2300      	movs	r3, #0
 800dc62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d056      	beq.n	800dd18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dc6a:	4b2e      	ldr	r3, [pc, #184]	; (800dd24 <xTaskPriorityDisinherit+0xd0>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	693a      	ldr	r2, [r7, #16]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d00a      	beq.n	800dc8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc78:	f383 8811 	msr	BASEPRI, r3
 800dc7c:	f3bf 8f6f 	isb	sy
 800dc80:	f3bf 8f4f 	dsb	sy
 800dc84:	60fb      	str	r3, [r7, #12]
}
 800dc86:	bf00      	nop
 800dc88:	e7fe      	b.n	800dc88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d10a      	bne.n	800dca8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc96:	f383 8811 	msr	BASEPRI, r3
 800dc9a:	f3bf 8f6f 	isb	sy
 800dc9e:	f3bf 8f4f 	dsb	sy
 800dca2:	60bb      	str	r3, [r7, #8]
}
 800dca4:	bf00      	nop
 800dca6:	e7fe      	b.n	800dca6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcac:	1e5a      	subs	r2, r3, #1
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d02c      	beq.n	800dd18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d128      	bne.n	800dd18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	3304      	adds	r3, #4
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7fd fe5a 	bl	800b984 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcdc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dce8:	4b0f      	ldr	r3, [pc, #60]	; (800dd28 <xTaskPriorityDisinherit+0xd4>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d903      	bls.n	800dcf8 <xTaskPriorityDisinherit+0xa4>
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf4:	4a0c      	ldr	r2, [pc, #48]	; (800dd28 <xTaskPriorityDisinherit+0xd4>)
 800dcf6:	6013      	str	r3, [r2, #0]
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	009b      	lsls	r3, r3, #2
 800dd00:	4413      	add	r3, r2
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	4a09      	ldr	r2, [pc, #36]	; (800dd2c <xTaskPriorityDisinherit+0xd8>)
 800dd06:	441a      	add	r2, r3
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	3304      	adds	r3, #4
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	4610      	mov	r0, r2
 800dd10:	f7fd fddb 	bl	800b8ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dd14:	2301      	movs	r3, #1
 800dd16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd18:	697b      	ldr	r3, [r7, #20]
	}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3718      	adds	r7, #24
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	200044fc 	.word	0x200044fc
 800dd28:	200049d8 	.word	0x200049d8
 800dd2c:	20004500 	.word	0x20004500

0800dd30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b088      	sub	sp, #32
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d06a      	beq.n	800de1e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dd48:	69bb      	ldr	r3, [r7, #24]
 800dd4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d10a      	bne.n	800dd66 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800dd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd54:	f383 8811 	msr	BASEPRI, r3
 800dd58:	f3bf 8f6f 	isb	sy
 800dd5c:	f3bf 8f4f 	dsb	sy
 800dd60:	60fb      	str	r3, [r7, #12]
}
 800dd62:	bf00      	nop
 800dd64:	e7fe      	b.n	800dd64 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd6a:	683a      	ldr	r2, [r7, #0]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d902      	bls.n	800dd76 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	61fb      	str	r3, [r7, #28]
 800dd74:	e002      	b.n	800dd7c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dd76:	69bb      	ldr	r3, [r7, #24]
 800dd78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd7a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dd7c:	69bb      	ldr	r3, [r7, #24]
 800dd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd80:	69fa      	ldr	r2, [r7, #28]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d04b      	beq.n	800de1e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd8a:	697a      	ldr	r2, [r7, #20]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d146      	bne.n	800de1e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dd90:	4b25      	ldr	r3, [pc, #148]	; (800de28 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	69ba      	ldr	r2, [r7, #24]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d10a      	bne.n	800ddb0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800dd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd9e:	f383 8811 	msr	BASEPRI, r3
 800dda2:	f3bf 8f6f 	isb	sy
 800dda6:	f3bf 8f4f 	dsb	sy
 800ddaa:	60bb      	str	r3, [r7, #8]
}
 800ddac:	bf00      	nop
 800ddae:	e7fe      	b.n	800ddae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ddb0:	69bb      	ldr	r3, [r7, #24]
 800ddb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddb4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ddb6:	69bb      	ldr	r3, [r7, #24]
 800ddb8:	69fa      	ldr	r2, [r7, #28]
 800ddba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ddbc:	69bb      	ldr	r3, [r7, #24]
 800ddbe:	699b      	ldr	r3, [r3, #24]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	db04      	blt.n	800ddce <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ddca:	69bb      	ldr	r3, [r7, #24]
 800ddcc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ddce:	69bb      	ldr	r3, [r7, #24]
 800ddd0:	6959      	ldr	r1, [r3, #20]
 800ddd2:	693a      	ldr	r2, [r7, #16]
 800ddd4:	4613      	mov	r3, r2
 800ddd6:	009b      	lsls	r3, r3, #2
 800ddd8:	4413      	add	r3, r2
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	4a13      	ldr	r2, [pc, #76]	; (800de2c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ddde:	4413      	add	r3, r2
 800dde0:	4299      	cmp	r1, r3
 800dde2:	d11c      	bne.n	800de1e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	3304      	adds	r3, #4
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7fd fdcb 	bl	800b984 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddf2:	4b0f      	ldr	r3, [pc, #60]	; (800de30 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d903      	bls.n	800de02 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ddfa:	69bb      	ldr	r3, [r7, #24]
 800ddfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddfe:	4a0c      	ldr	r2, [pc, #48]	; (800de30 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800de00:	6013      	str	r3, [r2, #0]
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de06:	4613      	mov	r3, r2
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	4413      	add	r3, r2
 800de0c:	009b      	lsls	r3, r3, #2
 800de0e:	4a07      	ldr	r2, [pc, #28]	; (800de2c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800de10:	441a      	add	r2, r3
 800de12:	69bb      	ldr	r3, [r7, #24]
 800de14:	3304      	adds	r3, #4
 800de16:	4619      	mov	r1, r3
 800de18:	4610      	mov	r0, r2
 800de1a:	f7fd fd56 	bl	800b8ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de1e:	bf00      	nop
 800de20:	3720      	adds	r7, #32
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	200044fc 	.word	0x200044fc
 800de2c:	20004500 	.word	0x20004500
 800de30:	200049d8 	.word	0x200049d8

0800de34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800de34:	b480      	push	{r7}
 800de36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800de38:	4b07      	ldr	r3, [pc, #28]	; (800de58 <pvTaskIncrementMutexHeldCount+0x24>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d004      	beq.n	800de4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800de40:	4b05      	ldr	r3, [pc, #20]	; (800de58 <pvTaskIncrementMutexHeldCount+0x24>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de46:	3201      	adds	r2, #1
 800de48:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800de4a:	4b03      	ldr	r3, [pc, #12]	; (800de58 <pvTaskIncrementMutexHeldCount+0x24>)
 800de4c:	681b      	ldr	r3, [r3, #0]
	}
 800de4e:	4618      	mov	r0, r3
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr
 800de58:	200044fc 	.word	0x200044fc

0800de5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800de66:	4b21      	ldr	r3, [pc, #132]	; (800deec <prvAddCurrentTaskToDelayedList+0x90>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de6c:	4b20      	ldr	r3, [pc, #128]	; (800def0 <prvAddCurrentTaskToDelayedList+0x94>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	3304      	adds	r3, #4
 800de72:	4618      	mov	r0, r3
 800de74:	f7fd fd86 	bl	800b984 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de7e:	d10a      	bne.n	800de96 <prvAddCurrentTaskToDelayedList+0x3a>
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d007      	beq.n	800de96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de86:	4b1a      	ldr	r3, [pc, #104]	; (800def0 <prvAddCurrentTaskToDelayedList+0x94>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	3304      	adds	r3, #4
 800de8c:	4619      	mov	r1, r3
 800de8e:	4819      	ldr	r0, [pc, #100]	; (800def4 <prvAddCurrentTaskToDelayedList+0x98>)
 800de90:	f7fd fd1b 	bl	800b8ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800de94:	e026      	b.n	800dee4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800de96:	68fa      	ldr	r2, [r7, #12]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	4413      	add	r3, r2
 800de9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800de9e:	4b14      	ldr	r3, [pc, #80]	; (800def0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	68ba      	ldr	r2, [r7, #8]
 800dea4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dea6:	68ba      	ldr	r2, [r7, #8]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d209      	bcs.n	800dec2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800deae:	4b12      	ldr	r3, [pc, #72]	; (800def8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	4b0f      	ldr	r3, [pc, #60]	; (800def0 <prvAddCurrentTaskToDelayedList+0x94>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	3304      	adds	r3, #4
 800deb8:	4619      	mov	r1, r3
 800deba:	4610      	mov	r0, r2
 800debc:	f7fd fd29 	bl	800b912 <vListInsert>
}
 800dec0:	e010      	b.n	800dee4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dec2:	4b0e      	ldr	r3, [pc, #56]	; (800defc <prvAddCurrentTaskToDelayedList+0xa0>)
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	4b0a      	ldr	r3, [pc, #40]	; (800def0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	3304      	adds	r3, #4
 800decc:	4619      	mov	r1, r3
 800dece:	4610      	mov	r0, r2
 800ded0:	f7fd fd1f 	bl	800b912 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ded4:	4b0a      	ldr	r3, [pc, #40]	; (800df00 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	68ba      	ldr	r2, [r7, #8]
 800deda:	429a      	cmp	r2, r3
 800dedc:	d202      	bcs.n	800dee4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dede:	4a08      	ldr	r2, [pc, #32]	; (800df00 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	6013      	str	r3, [r2, #0]
}
 800dee4:	bf00      	nop
 800dee6:	3710      	adds	r7, #16
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}
 800deec:	200049d4 	.word	0x200049d4
 800def0:	200044fc 	.word	0x200044fc
 800def4:	200049bc 	.word	0x200049bc
 800def8:	2000498c 	.word	0x2000498c
 800defc:	20004988 	.word	0x20004988
 800df00:	200049f0 	.word	0x200049f0

0800df04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b08a      	sub	sp, #40	; 0x28
 800df08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800df0a:	2300      	movs	r3, #0
 800df0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800df0e:	f000 fb07 	bl	800e520 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800df12:	4b1c      	ldr	r3, [pc, #112]	; (800df84 <xTimerCreateTimerTask+0x80>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d021      	beq.n	800df5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800df1a:	2300      	movs	r3, #0
 800df1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800df1e:	2300      	movs	r3, #0
 800df20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800df22:	1d3a      	adds	r2, r7, #4
 800df24:	f107 0108 	add.w	r1, r7, #8
 800df28:	f107 030c 	add.w	r3, r7, #12
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7fd fa9b 	bl	800b468 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800df32:	6879      	ldr	r1, [r7, #4]
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	68fa      	ldr	r2, [r7, #12]
 800df38:	9202      	str	r2, [sp, #8]
 800df3a:	9301      	str	r3, [sp, #4]
 800df3c:	2302      	movs	r3, #2
 800df3e:	9300      	str	r3, [sp, #0]
 800df40:	2300      	movs	r3, #0
 800df42:	460a      	mov	r2, r1
 800df44:	4910      	ldr	r1, [pc, #64]	; (800df88 <xTimerCreateTimerTask+0x84>)
 800df46:	4811      	ldr	r0, [pc, #68]	; (800df8c <xTimerCreateTimerTask+0x88>)
 800df48:	f7fe ffa4 	bl	800ce94 <xTaskCreateStatic>
 800df4c:	4603      	mov	r3, r0
 800df4e:	4a10      	ldr	r2, [pc, #64]	; (800df90 <xTimerCreateTimerTask+0x8c>)
 800df50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800df52:	4b0f      	ldr	r3, [pc, #60]	; (800df90 <xTimerCreateTimerTask+0x8c>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d001      	beq.n	800df5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800df5a:	2301      	movs	r3, #1
 800df5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d10a      	bne.n	800df7a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800df64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df68:	f383 8811 	msr	BASEPRI, r3
 800df6c:	f3bf 8f6f 	isb	sy
 800df70:	f3bf 8f4f 	dsb	sy
 800df74:	613b      	str	r3, [r7, #16]
}
 800df76:	bf00      	nop
 800df78:	e7fe      	b.n	800df78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800df7a:	697b      	ldr	r3, [r7, #20]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3718      	adds	r7, #24
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	20004a2c 	.word	0x20004a2c
 800df88:	0802e50c 	.word	0x0802e50c
 800df8c:	0800e0c9 	.word	0x0800e0c9
 800df90:	20004a30 	.word	0x20004a30

0800df94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b08a      	sub	sp, #40	; 0x28
 800df98:	af00      	add	r7, sp, #0
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	60b9      	str	r1, [r7, #8]
 800df9e:	607a      	str	r2, [r7, #4]
 800dfa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d10a      	bne.n	800dfc2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800dfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb0:	f383 8811 	msr	BASEPRI, r3
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	f3bf 8f4f 	dsb	sy
 800dfbc:	623b      	str	r3, [r7, #32]
}
 800dfbe:	bf00      	nop
 800dfc0:	e7fe      	b.n	800dfc0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dfc2:	4b1a      	ldr	r3, [pc, #104]	; (800e02c <xTimerGenericCommand+0x98>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d02a      	beq.n	800e020 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	2b05      	cmp	r3, #5
 800dfda:	dc18      	bgt.n	800e00e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dfdc:	f7ff fdb4 	bl	800db48 <xTaskGetSchedulerState>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	2b02      	cmp	r3, #2
 800dfe4:	d109      	bne.n	800dffa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dfe6:	4b11      	ldr	r3, [pc, #68]	; (800e02c <xTimerGenericCommand+0x98>)
 800dfe8:	6818      	ldr	r0, [r3, #0]
 800dfea:	f107 0110 	add.w	r1, r7, #16
 800dfee:	2300      	movs	r3, #0
 800dff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dff2:	f7fe f8e9 	bl	800c1c8 <xQueueGenericSend>
 800dff6:	6278      	str	r0, [r7, #36]	; 0x24
 800dff8:	e012      	b.n	800e020 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dffa:	4b0c      	ldr	r3, [pc, #48]	; (800e02c <xTimerGenericCommand+0x98>)
 800dffc:	6818      	ldr	r0, [r3, #0]
 800dffe:	f107 0110 	add.w	r1, r7, #16
 800e002:	2300      	movs	r3, #0
 800e004:	2200      	movs	r2, #0
 800e006:	f7fe f8df 	bl	800c1c8 <xQueueGenericSend>
 800e00a:	6278      	str	r0, [r7, #36]	; 0x24
 800e00c:	e008      	b.n	800e020 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e00e:	4b07      	ldr	r3, [pc, #28]	; (800e02c <xTimerGenericCommand+0x98>)
 800e010:	6818      	ldr	r0, [r3, #0]
 800e012:	f107 0110 	add.w	r1, r7, #16
 800e016:	2300      	movs	r3, #0
 800e018:	683a      	ldr	r2, [r7, #0]
 800e01a:	f7fe f9d3 	bl	800c3c4 <xQueueGenericSendFromISR>
 800e01e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e022:	4618      	mov	r0, r3
 800e024:	3728      	adds	r7, #40	; 0x28
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	20004a2c 	.word	0x20004a2c

0800e030 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b088      	sub	sp, #32
 800e034:	af02      	add	r7, sp, #8
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e03a:	4b22      	ldr	r3, [pc, #136]	; (800e0c4 <prvProcessExpiredTimer+0x94>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	68db      	ldr	r3, [r3, #12]
 800e040:	68db      	ldr	r3, [r3, #12]
 800e042:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	3304      	adds	r3, #4
 800e048:	4618      	mov	r0, r3
 800e04a:	f7fd fc9b 	bl	800b984 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e054:	f003 0304 	and.w	r3, r3, #4
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d022      	beq.n	800e0a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	699a      	ldr	r2, [r3, #24]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	18d1      	adds	r1, r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	683a      	ldr	r2, [r7, #0]
 800e068:	6978      	ldr	r0, [r7, #20]
 800e06a:	f000 f8d1 	bl	800e210 <prvInsertTimerInActiveList>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b00      	cmp	r3, #0
 800e072:	d01f      	beq.n	800e0b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e074:	2300      	movs	r3, #0
 800e076:	9300      	str	r3, [sp, #0]
 800e078:	2300      	movs	r3, #0
 800e07a:	687a      	ldr	r2, [r7, #4]
 800e07c:	2100      	movs	r1, #0
 800e07e:	6978      	ldr	r0, [r7, #20]
 800e080:	f7ff ff88 	bl	800df94 <xTimerGenericCommand>
 800e084:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d113      	bne.n	800e0b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e090:	f383 8811 	msr	BASEPRI, r3
 800e094:	f3bf 8f6f 	isb	sy
 800e098:	f3bf 8f4f 	dsb	sy
 800e09c:	60fb      	str	r3, [r7, #12]
}
 800e09e:	bf00      	nop
 800e0a0:	e7fe      	b.n	800e0a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0a8:	f023 0301 	bic.w	r3, r3, #1
 800e0ac:	b2da      	uxtb	r2, r3
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	6a1b      	ldr	r3, [r3, #32]
 800e0b8:	6978      	ldr	r0, [r7, #20]
 800e0ba:	4798      	blx	r3
}
 800e0bc:	bf00      	nop
 800e0be:	3718      	adds	r7, #24
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	20004a24 	.word	0x20004a24

0800e0c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e0d0:	f107 0308 	add.w	r3, r7, #8
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f000 f857 	bl	800e188 <prvGetNextExpireTime>
 800e0da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	4619      	mov	r1, r3
 800e0e0:	68f8      	ldr	r0, [r7, #12]
 800e0e2:	f000 f803 	bl	800e0ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e0e6:	f000 f8d5 	bl	800e294 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e0ea:	e7f1      	b.n	800e0d0 <prvTimerTask+0x8>

0800e0ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e0f6:	f7ff f929 	bl	800d34c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0fa:	f107 0308 	add.w	r3, r7, #8
 800e0fe:	4618      	mov	r0, r3
 800e100:	f000 f866 	bl	800e1d0 <prvSampleTimeNow>
 800e104:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d130      	bne.n	800e16e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d10a      	bne.n	800e128 <prvProcessTimerOrBlockTask+0x3c>
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	429a      	cmp	r2, r3
 800e118:	d806      	bhi.n	800e128 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e11a:	f7ff f925 	bl	800d368 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e11e:	68f9      	ldr	r1, [r7, #12]
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f7ff ff85 	bl	800e030 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e126:	e024      	b.n	800e172 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d008      	beq.n	800e140 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e12e:	4b13      	ldr	r3, [pc, #76]	; (800e17c <prvProcessTimerOrBlockTask+0x90>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d101      	bne.n	800e13c <prvProcessTimerOrBlockTask+0x50>
 800e138:	2301      	movs	r3, #1
 800e13a:	e000      	b.n	800e13e <prvProcessTimerOrBlockTask+0x52>
 800e13c:	2300      	movs	r3, #0
 800e13e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e140:	4b0f      	ldr	r3, [pc, #60]	; (800e180 <prvProcessTimerOrBlockTask+0x94>)
 800e142:	6818      	ldr	r0, [r3, #0]
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	1ad3      	subs	r3, r2, r3
 800e14a:	683a      	ldr	r2, [r7, #0]
 800e14c:	4619      	mov	r1, r3
 800e14e:	f7fe fe6d 	bl	800ce2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e152:	f7ff f909 	bl	800d368 <xTaskResumeAll>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d10a      	bne.n	800e172 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e15c:	4b09      	ldr	r3, [pc, #36]	; (800e184 <prvProcessTimerOrBlockTask+0x98>)
 800e15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e162:	601a      	str	r2, [r3, #0]
 800e164:	f3bf 8f4f 	dsb	sy
 800e168:	f3bf 8f6f 	isb	sy
}
 800e16c:	e001      	b.n	800e172 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e16e:	f7ff f8fb 	bl	800d368 <xTaskResumeAll>
}
 800e172:	bf00      	nop
 800e174:	3710      	adds	r7, #16
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	20004a28 	.word	0x20004a28
 800e180:	20004a2c 	.word	0x20004a2c
 800e184:	e000ed04 	.word	0xe000ed04

0800e188 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e188:	b480      	push	{r7}
 800e18a:	b085      	sub	sp, #20
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e190:	4b0e      	ldr	r3, [pc, #56]	; (800e1cc <prvGetNextExpireTime+0x44>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d101      	bne.n	800e19e <prvGetNextExpireTime+0x16>
 800e19a:	2201      	movs	r2, #1
 800e19c:	e000      	b.n	800e1a0 <prvGetNextExpireTime+0x18>
 800e19e:	2200      	movs	r2, #0
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d105      	bne.n	800e1b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e1ac:	4b07      	ldr	r3, [pc, #28]	; (800e1cc <prvGetNextExpireTime+0x44>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	60fb      	str	r3, [r7, #12]
 800e1b6:	e001      	b.n	800e1bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3714      	adds	r7, #20
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop
 800e1cc:	20004a24 	.word	0x20004a24

0800e1d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e1d8:	f7ff f964 	bl	800d4a4 <xTaskGetTickCount>
 800e1dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e1de:	4b0b      	ldr	r3, [pc, #44]	; (800e20c <prvSampleTimeNow+0x3c>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	68fa      	ldr	r2, [r7, #12]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d205      	bcs.n	800e1f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e1e8:	f000 f936 	bl	800e458 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	601a      	str	r2, [r3, #0]
 800e1f2:	e002      	b.n	800e1fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e1fa:	4a04      	ldr	r2, [pc, #16]	; (800e20c <prvSampleTimeNow+0x3c>)
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e200:	68fb      	ldr	r3, [r7, #12]
}
 800e202:	4618      	mov	r0, r3
 800e204:	3710      	adds	r7, #16
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	20004a34 	.word	0x20004a34

0800e210 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b086      	sub	sp, #24
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	607a      	str	r2, [r7, #4]
 800e21c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e21e:	2300      	movs	r3, #0
 800e220:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	68ba      	ldr	r2, [r7, #8]
 800e226:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	68fa      	ldr	r2, [r7, #12]
 800e22c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e22e:	68ba      	ldr	r2, [r7, #8]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	429a      	cmp	r2, r3
 800e234:	d812      	bhi.n	800e25c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	1ad2      	subs	r2, r2, r3
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	699b      	ldr	r3, [r3, #24]
 800e240:	429a      	cmp	r2, r3
 800e242:	d302      	bcc.n	800e24a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e244:	2301      	movs	r3, #1
 800e246:	617b      	str	r3, [r7, #20]
 800e248:	e01b      	b.n	800e282 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e24a:	4b10      	ldr	r3, [pc, #64]	; (800e28c <prvInsertTimerInActiveList+0x7c>)
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	3304      	adds	r3, #4
 800e252:	4619      	mov	r1, r3
 800e254:	4610      	mov	r0, r2
 800e256:	f7fd fb5c 	bl	800b912 <vListInsert>
 800e25a:	e012      	b.n	800e282 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e25c:	687a      	ldr	r2, [r7, #4]
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	429a      	cmp	r2, r3
 800e262:	d206      	bcs.n	800e272 <prvInsertTimerInActiveList+0x62>
 800e264:	68ba      	ldr	r2, [r7, #8]
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	429a      	cmp	r2, r3
 800e26a:	d302      	bcc.n	800e272 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e26c:	2301      	movs	r3, #1
 800e26e:	617b      	str	r3, [r7, #20]
 800e270:	e007      	b.n	800e282 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e272:	4b07      	ldr	r3, [pc, #28]	; (800e290 <prvInsertTimerInActiveList+0x80>)
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	3304      	adds	r3, #4
 800e27a:	4619      	mov	r1, r3
 800e27c:	4610      	mov	r0, r2
 800e27e:	f7fd fb48 	bl	800b912 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e282:	697b      	ldr	r3, [r7, #20]
}
 800e284:	4618      	mov	r0, r3
 800e286:	3718      	adds	r7, #24
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	20004a28 	.word	0x20004a28
 800e290:	20004a24 	.word	0x20004a24

0800e294 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b08e      	sub	sp, #56	; 0x38
 800e298:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e29a:	e0ca      	b.n	800e432 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	da18      	bge.n	800e2d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e2a2:	1d3b      	adds	r3, r7, #4
 800e2a4:	3304      	adds	r3, #4
 800e2a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d10a      	bne.n	800e2c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b2:	f383 8811 	msr	BASEPRI, r3
 800e2b6:	f3bf 8f6f 	isb	sy
 800e2ba:	f3bf 8f4f 	dsb	sy
 800e2be:	61fb      	str	r3, [r7, #28]
}
 800e2c0:	bf00      	nop
 800e2c2:	e7fe      	b.n	800e2c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2ca:	6850      	ldr	r0, [r2, #4]
 800e2cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2ce:	6892      	ldr	r2, [r2, #8]
 800e2d0:	4611      	mov	r1, r2
 800e2d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	f2c0 80aa 	blt.w	800e430 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e2:	695b      	ldr	r3, [r3, #20]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d004      	beq.n	800e2f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ea:	3304      	adds	r3, #4
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7fd fb49 	bl	800b984 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e2f2:	463b      	mov	r3, r7
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7ff ff6b 	bl	800e1d0 <prvSampleTimeNow>
 800e2fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2b09      	cmp	r3, #9
 800e300:	f200 8097 	bhi.w	800e432 <prvProcessReceivedCommands+0x19e>
 800e304:	a201      	add	r2, pc, #4	; (adr r2, 800e30c <prvProcessReceivedCommands+0x78>)
 800e306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e30a:	bf00      	nop
 800e30c:	0800e335 	.word	0x0800e335
 800e310:	0800e335 	.word	0x0800e335
 800e314:	0800e335 	.word	0x0800e335
 800e318:	0800e3a9 	.word	0x0800e3a9
 800e31c:	0800e3bd 	.word	0x0800e3bd
 800e320:	0800e407 	.word	0x0800e407
 800e324:	0800e335 	.word	0x0800e335
 800e328:	0800e335 	.word	0x0800e335
 800e32c:	0800e3a9 	.word	0x0800e3a9
 800e330:	0800e3bd 	.word	0x0800e3bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e33a:	f043 0301 	orr.w	r3, r3, #1
 800e33e:	b2da      	uxtb	r2, r3
 800e340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e346:	68ba      	ldr	r2, [r7, #8]
 800e348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e34a:	699b      	ldr	r3, [r3, #24]
 800e34c:	18d1      	adds	r1, r2, r3
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e354:	f7ff ff5c 	bl	800e210 <prvInsertTimerInActiveList>
 800e358:	4603      	mov	r3, r0
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d069      	beq.n	800e432 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e360:	6a1b      	ldr	r3, [r3, #32]
 800e362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e364:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e36c:	f003 0304 	and.w	r3, r3, #4
 800e370:	2b00      	cmp	r3, #0
 800e372:	d05e      	beq.n	800e432 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e374:	68ba      	ldr	r2, [r7, #8]
 800e376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e378:	699b      	ldr	r3, [r3, #24]
 800e37a:	441a      	add	r2, r3
 800e37c:	2300      	movs	r3, #0
 800e37e:	9300      	str	r3, [sp, #0]
 800e380:	2300      	movs	r3, #0
 800e382:	2100      	movs	r1, #0
 800e384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e386:	f7ff fe05 	bl	800df94 <xTimerGenericCommand>
 800e38a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e38c:	6a3b      	ldr	r3, [r7, #32]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d14f      	bne.n	800e432 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e396:	f383 8811 	msr	BASEPRI, r3
 800e39a:	f3bf 8f6f 	isb	sy
 800e39e:	f3bf 8f4f 	dsb	sy
 800e3a2:	61bb      	str	r3, [r7, #24]
}
 800e3a4:	bf00      	nop
 800e3a6:	e7fe      	b.n	800e3a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3ae:	f023 0301 	bic.w	r3, r3, #1
 800e3b2:	b2da      	uxtb	r2, r3
 800e3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e3ba:	e03a      	b.n	800e432 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3c2:	f043 0301 	orr.w	r3, r3, #1
 800e3c6:	b2da      	uxtb	r2, r3
 800e3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e3ce:	68ba      	ldr	r2, [r7, #8]
 800e3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d6:	699b      	ldr	r3, [r3, #24]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d10a      	bne.n	800e3f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e0:	f383 8811 	msr	BASEPRI, r3
 800e3e4:	f3bf 8f6f 	isb	sy
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	617b      	str	r3, [r7, #20]
}
 800e3ee:	bf00      	nop
 800e3f0:	e7fe      	b.n	800e3f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f4:	699a      	ldr	r2, [r3, #24]
 800e3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f8:	18d1      	adds	r1, r2, r3
 800e3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e400:	f7ff ff06 	bl	800e210 <prvInsertTimerInActiveList>
					break;
 800e404:	e015      	b.n	800e432 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e408:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e40c:	f003 0302 	and.w	r3, r3, #2
 800e410:	2b00      	cmp	r3, #0
 800e412:	d103      	bne.n	800e41c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e414:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e416:	f7fd f90d 	bl	800b634 <vPortFree>
 800e41a:	e00a      	b.n	800e432 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e422:	f023 0301 	bic.w	r3, r3, #1
 800e426:	b2da      	uxtb	r2, r3
 800e428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e42e:	e000      	b.n	800e432 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e430:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e432:	4b08      	ldr	r3, [pc, #32]	; (800e454 <prvProcessReceivedCommands+0x1c0>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	1d39      	adds	r1, r7, #4
 800e438:	2200      	movs	r2, #0
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7fe f8ea 	bl	800c614 <xQueueReceive>
 800e440:	4603      	mov	r3, r0
 800e442:	2b00      	cmp	r3, #0
 800e444:	f47f af2a 	bne.w	800e29c <prvProcessReceivedCommands+0x8>
	}
}
 800e448:	bf00      	nop
 800e44a:	bf00      	nop
 800e44c:	3730      	adds	r7, #48	; 0x30
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	20004a2c 	.word	0x20004a2c

0800e458 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b088      	sub	sp, #32
 800e45c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e45e:	e048      	b.n	800e4f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e460:	4b2d      	ldr	r3, [pc, #180]	; (800e518 <prvSwitchTimerLists+0xc0>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e46a:	4b2b      	ldr	r3, [pc, #172]	; (800e518 <prvSwitchTimerLists+0xc0>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	68db      	ldr	r3, [r3, #12]
 800e470:	68db      	ldr	r3, [r3, #12]
 800e472:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	3304      	adds	r3, #4
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fd fa83 	bl	800b984 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	6a1b      	ldr	r3, [r3, #32]
 800e482:	68f8      	ldr	r0, [r7, #12]
 800e484:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e48c:	f003 0304 	and.w	r3, r3, #4
 800e490:	2b00      	cmp	r3, #0
 800e492:	d02e      	beq.n	800e4f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	699b      	ldr	r3, [r3, #24]
 800e498:	693a      	ldr	r2, [r7, #16]
 800e49a:	4413      	add	r3, r2
 800e49c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e49e:	68ba      	ldr	r2, [r7, #8]
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d90e      	bls.n	800e4c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	68ba      	ldr	r2, [r7, #8]
 800e4aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	68fa      	ldr	r2, [r7, #12]
 800e4b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e4b2:	4b19      	ldr	r3, [pc, #100]	; (800e518 <prvSwitchTimerLists+0xc0>)
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	3304      	adds	r3, #4
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	4610      	mov	r0, r2
 800e4be:	f7fd fa28 	bl	800b912 <vListInsert>
 800e4c2:	e016      	b.n	800e4f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	9300      	str	r3, [sp, #0]
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	693a      	ldr	r2, [r7, #16]
 800e4cc:	2100      	movs	r1, #0
 800e4ce:	68f8      	ldr	r0, [r7, #12]
 800e4d0:	f7ff fd60 	bl	800df94 <xTimerGenericCommand>
 800e4d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d10a      	bne.n	800e4f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e0:	f383 8811 	msr	BASEPRI, r3
 800e4e4:	f3bf 8f6f 	isb	sy
 800e4e8:	f3bf 8f4f 	dsb	sy
 800e4ec:	603b      	str	r3, [r7, #0]
}
 800e4ee:	bf00      	nop
 800e4f0:	e7fe      	b.n	800e4f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e4f2:	4b09      	ldr	r3, [pc, #36]	; (800e518 <prvSwitchTimerLists+0xc0>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d1b1      	bne.n	800e460 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e4fc:	4b06      	ldr	r3, [pc, #24]	; (800e518 <prvSwitchTimerLists+0xc0>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e502:	4b06      	ldr	r3, [pc, #24]	; (800e51c <prvSwitchTimerLists+0xc4>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4a04      	ldr	r2, [pc, #16]	; (800e518 <prvSwitchTimerLists+0xc0>)
 800e508:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e50a:	4a04      	ldr	r2, [pc, #16]	; (800e51c <prvSwitchTimerLists+0xc4>)
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	6013      	str	r3, [r2, #0]
}
 800e510:	bf00      	nop
 800e512:	3718      	adds	r7, #24
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	20004a24 	.word	0x20004a24
 800e51c:	20004a28 	.word	0x20004a28

0800e520 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e526:	f7fd fb85 	bl	800bc34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e52a:	4b15      	ldr	r3, [pc, #84]	; (800e580 <prvCheckForValidListAndQueue+0x60>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d120      	bne.n	800e574 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e532:	4814      	ldr	r0, [pc, #80]	; (800e584 <prvCheckForValidListAndQueue+0x64>)
 800e534:	f7fd f99c 	bl	800b870 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e538:	4813      	ldr	r0, [pc, #76]	; (800e588 <prvCheckForValidListAndQueue+0x68>)
 800e53a:	f7fd f999 	bl	800b870 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e53e:	4b13      	ldr	r3, [pc, #76]	; (800e58c <prvCheckForValidListAndQueue+0x6c>)
 800e540:	4a10      	ldr	r2, [pc, #64]	; (800e584 <prvCheckForValidListAndQueue+0x64>)
 800e542:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e544:	4b12      	ldr	r3, [pc, #72]	; (800e590 <prvCheckForValidListAndQueue+0x70>)
 800e546:	4a10      	ldr	r2, [pc, #64]	; (800e588 <prvCheckForValidListAndQueue+0x68>)
 800e548:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e54a:	2300      	movs	r3, #0
 800e54c:	9300      	str	r3, [sp, #0]
 800e54e:	4b11      	ldr	r3, [pc, #68]	; (800e594 <prvCheckForValidListAndQueue+0x74>)
 800e550:	4a11      	ldr	r2, [pc, #68]	; (800e598 <prvCheckForValidListAndQueue+0x78>)
 800e552:	2110      	movs	r1, #16
 800e554:	200a      	movs	r0, #10
 800e556:	f7fd fcf7 	bl	800bf48 <xQueueGenericCreateStatic>
 800e55a:	4603      	mov	r3, r0
 800e55c:	4a08      	ldr	r2, [pc, #32]	; (800e580 <prvCheckForValidListAndQueue+0x60>)
 800e55e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e560:	4b07      	ldr	r3, [pc, #28]	; (800e580 <prvCheckForValidListAndQueue+0x60>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d005      	beq.n	800e574 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e568:	4b05      	ldr	r3, [pc, #20]	; (800e580 <prvCheckForValidListAndQueue+0x60>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	490b      	ldr	r1, [pc, #44]	; (800e59c <prvCheckForValidListAndQueue+0x7c>)
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fe fc08 	bl	800cd84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e574:	f7fd fb8e 	bl	800bc94 <vPortExitCritical>
}
 800e578:	bf00      	nop
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	20004a2c 	.word	0x20004a2c
 800e584:	200049fc 	.word	0x200049fc
 800e588:	20004a10 	.word	0x20004a10
 800e58c:	20004a24 	.word	0x20004a24
 800e590:	20004a28 	.word	0x20004a28
 800e594:	20004ad8 	.word	0x20004ad8
 800e598:	20004a38 	.word	0x20004a38
 800e59c:	0802e514 	.word	0x0802e514

0800e5a0 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800e5a4:	f006 fe7a 	bl	801529c <touchgfx_init>
}
 800e5a8:	bf00      	nop
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  // Calling farward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800e5b4:	f006 fe9c 	bl	80152f0 <touchgfx_taskEntry>
}
 800e5b8:	bf00      	nop
 800e5ba:	3708      	adds	r7, #8
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800e5c0:	b480      	push	{r7}
 800e5c2:	b083      	sub	sp, #12
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
    {
 800e5c8:	4a04      	ldr	r2, [pc, #16]	; (800e5dc <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	601a      	str	r2, [r3, #0]
    }
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	370c      	adds	r7, #12
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr
 800e5dc:	0802f048 	.word	0x0802f048

0800e5e0 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
    }
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7ff ffe9 	bl	800e5c0 <_ZN8touchgfx12FontProviderD1Ev>
 800e5ee:	2104      	movs	r1, #4
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f01d fa5a 	bl	802baaa <_ZdlPvj>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3708      	adds	r7, #8
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	460b      	mov	r3, r1
 800e60a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800e60c:	887b      	ldrh	r3, [r7, #2]
 800e60e:	2b02      	cmp	r3, #2
 800e610:	d010      	beq.n	800e634 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800e612:	2b02      	cmp	r3, #2
 800e614:	dc13      	bgt.n	800e63e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800e616:	2b00      	cmp	r3, #0
 800e618:	d002      	beq.n	800e620 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	d005      	beq.n	800e62a <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800e61e:	e00e      	b.n	800e63e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::SENSOR_VALUES:
        // bahnschrift_55_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800e620:	f004 fdc6 	bl	80131b0 <_ZN17TypedTextDatabase8getFontsEv>
 800e624:	4603      	mov	r3, r0
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	e00a      	b.n	800e640 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SENSOR_LABEL:
        // bahnschrift_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800e62a:	f004 fdc1 	bl	80131b0 <_ZN17TypedTextDatabase8getFontsEv>
 800e62e:	4603      	mov	r3, r0
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	e005      	b.n	800e640 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SENSOR_UNIT:
        // bahnschrift_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800e634:	f004 fdbc 	bl	80131b0 <_ZN17TypedTextDatabase8getFontsEv>
 800e638:	4603      	mov	r3, r0
 800e63a:	685b      	ldr	r3, [r3, #4]
 800e63c:	e000      	b.n	800e640 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800e63e:	2300      	movs	r3, #0
    }
}
 800e640:	4618      	mov	r0, r3
 800e642:	3708      	adds	r7, #8
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SENSOR_LABEL = 1;  // bahnschrift_20_4bpp
    static const touchgfx::FontId SENSOR_UNIT = 1;   // bahnschrift_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 2;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	4a05      	ldr	r2, [pc, #20]	; (800e668 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	601a      	str	r2, [r3, #0]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4618      	mov	r0, r3
 800e65a:	f7ff ffb1 	bl	800e5c0 <_ZN8touchgfx12FontProviderD1Ev>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	4618      	mov	r0, r3
 800e662:	3708      	adds	r7, #8
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}
 800e668:	0802f034 	.word	0x0802f034

0800e66c <_ZN23ApplicationFontProviderD0Ev>:
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f7ff ffe7 	bl	800e648 <_ZN23ApplicationFontProviderD1Ev>
 800e67a:	2104      	movs	r1, #4
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f01d fa14 	bl	802baaa <_ZdlPvj>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	4618      	mov	r0, r3
 800e686:	3708      	adds	r7, #8
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800e68c:	b480      	push	{r7}
 800e68e:	b083      	sub	sp, #12
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
    {
 800e694:	4a04      	ldr	r2, [pc, #16]	; (800e6a8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	601a      	str	r2, [r3, #0]
    }
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	4618      	mov	r0, r3
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr
 800e6a8:	0802f3c4 	.word	0x0802f3c4

0800e6ac <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
    }
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f7ff ffe9 	bl	800e68c <_ZN8touchgfx4FontD1Ev>
 800e6ba:	2110      	movs	r1, #16
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f01d f9f4 	bl	802baaa <_ZdlPvj>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3708      	adds	r7, #8
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800e6cc:	b590      	push	{r4, r7, lr}
 800e6ce:	b087      	sub	sp, #28
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800e6d8:	887b      	ldrh	r3, [r7, #2]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d101      	bne.n	800e6e2 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	e010      	b.n	800e704 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	3308      	adds	r3, #8
 800e6f0:	681c      	ldr	r4, [r3, #0]
 800e6f2:	f107 030f 	add.w	r3, r7, #15
 800e6f6:	f107 0210 	add.w	r2, r7, #16
 800e6fa:	8879      	ldrh	r1, [r7, #2]
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	47a0      	blx	r4
 800e700:	6178      	str	r0, [r7, #20]
        return glyph;
 800e702:	697b      	ldr	r3, [r7, #20]
    }
 800e704:	4618      	mov	r0, r3
 800e706:	371c      	adds	r7, #28
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd90      	pop	{r4, r7, pc}

0800e70c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	895b      	ldrh	r3, [r3, #10]
    }
 800e718:	4618      	mov	r0, r3
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	899b      	ldrh	r3, [r3, #12]
    }
 800e730:	4618      	mov	r0, r3
 800e732:	370c      	adds	r7, #12
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr

0800e73c <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800e73c:	b480      	push	{r7}
 800e73e:	b083      	sub	sp, #12
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	889b      	ldrh	r3, [r3, #4]
    }
 800e748:	4618      	mov	r0, r3
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	889a      	ldrh	r2, [r3, #4]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	799b      	ldrb	r3, [r3, #6]
 800e764:	b29b      	uxth	r3, r3
 800e766:	4413      	add	r3, r2
 800e768:	b29b      	uxth	r3, r3
    }
 800e76a:	4618      	mov	r0, r3
 800e76c:	370c      	adds	r7, #12
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr

0800e776 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800e776:	b480      	push	{r7}
 800e778:	b083      	sub	sp, #12
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	79db      	ldrb	r3, [r3, #7]
 800e782:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800e786:	b2db      	uxtb	r3, r3
    }
 800e788:	4618      	mov	r0, r3
 800e78a:	370c      	adds	r7, #12
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr

0800e794 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800e794:	b480      	push	{r7}
 800e796:	b083      	sub	sp, #12
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	79db      	ldrb	r3, [r3, #7]
 800e7a0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e7a4:	b2db      	uxtb	r3, r3
    }
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	370c      	adds	r7, #12
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
	...

0800e7b4 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	4a05      	ldr	r2, [pc, #20]	; (800e7d4 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	601a      	str	r2, [r3, #0]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7ff ff61 	bl	800e68c <_ZN8touchgfx4FontD1Ev>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3708      	adds	r7, #8
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	08031018 	.word	0x08031018

0800e7d8 <_ZN8touchgfx9ConstFontD0Ev>:
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f7ff ffe7 	bl	800e7b4 <_ZN8touchgfx9ConstFontD1Ev>
 800e7e6:	2118      	movs	r1, #24
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f01d f95e 	bl	802baaa <_ZdlPvj>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3708      	adds	r7, #8
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}

0800e7f8 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	4a05      	ldr	r2, [pc, #20]	; (800e818 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	601a      	str	r2, [r3, #0]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	4618      	mov	r0, r3
 800e80a:	f7ff ffd3 	bl	800e7b4 <_ZN8touchgfx9ConstFontD1Ev>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	4618      	mov	r0, r3
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}
 800e818:	0802f06c 	.word	0x0802f06c

0800e81c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b082      	sub	sp, #8
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f7ff ffe7 	bl	800e7f8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e82a:	2128      	movs	r1, #40	; 0x28
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f01d f93c 	bl	802baaa <_ZdlPvj>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	4618      	mov	r0, r3
 800e836:	3708      	adds	r7, #8
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800e83c:	b480      	push	{r7}
 800e83e:	b083      	sub	sp, #12
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
    {
 800e844:	4a04      	ldr	r2, [pc, #16]	; (800e858 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	601a      	str	r2, [r3, #0]
    }
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	4618      	mov	r0, r3
 800e84e:	370c      	adds	r7, #12
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr
 800e858:	0802f05c 	.word	0x0802f05c

0800e85c <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
    }
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f7ff ffe9 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
 800e86a:	2108      	movs	r1, #8
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f01d f91c 	bl	802baaa <_ZdlPvj>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	4618      	mov	r0, r3
 800e876:	3708      	adds	r7, #8
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800e87c:	b480      	push	{r7}
 800e87e:	b083      	sub	sp, #12
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6a1b      	ldr	r3, [r3, #32]
    }
 800e888:	4618      	mov	r0, r3
 800e88a:	370c      	adds	r7, #12
 800e88c:	46bd      	mov	sp, r7
 800e88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e892:	4770      	bx	lr

0800e894 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800e894:	b480      	push	{r7}
 800e896:	b083      	sub	sp, #12
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	370c      	adds	r7, #12
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr

0800e8ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b08c      	sub	sp, #48	; 0x30
 800e8b0:	af08      	add	r7, sp, #32
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	4611      	mov	r1, r2
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	80fb      	strh	r3, [r7, #6]
 800e8be:	4613      	mov	r3, r2
 800e8c0:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800e8c2:	68f8      	ldr	r0, [r7, #12]
 800e8c4:	88b9      	ldrh	r1, [r7, #4]
 800e8c6:	88fa      	ldrh	r2, [r7, #6]
 800e8c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e8ca:	9306      	str	r3, [sp, #24]
 800e8cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e8ce:	9305      	str	r3, [sp, #20]
 800e8d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e8d4:	9304      	str	r3, [sp, #16]
 800e8d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e8da:	9303      	str	r3, [sp, #12]
 800e8dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e8e0:	9302      	str	r3, [sp, #8]
 800e8e2:	7f3b      	ldrb	r3, [r7, #28]
 800e8e4:	9301      	str	r3, [sp, #4]
 800e8e6:	7e3b      	ldrb	r3, [r7, #24]
 800e8e8:	9300      	str	r3, [sp, #0]
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	68b9      	ldr	r1, [r7, #8]
 800e8ee:	f00d f99d 	bl	801bc2c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800e8f2:	4a0a      	ldr	r2, [pc, #40]	; (800e91c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	601a      	str	r2, [r3, #0]
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8fc:	619a      	str	r2, [r3, #24]
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e902:	61da      	str	r2, [r3, #28]
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e908:	621a      	str	r2, [r3, #32]
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e90e:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	4618      	mov	r0, r3
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	0802f06c 	.word	0x0802f06c

0800e920 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800e920:	b480      	push	{r7}
 800e922:	b085      	sub	sp, #20
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	699b      	ldr	r3, [r3, #24]
 800e92e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	889b      	ldrh	r3, [r3, #4]
 800e934:	0adb      	lsrs	r3, r3, #11
 800e936:	b29b      	uxth	r3, r3
 800e938:	009b      	lsls	r3, r3, #2
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	4413      	add	r3, r2
 800e93e:	681a      	ldr	r2, [r3, #0]
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4413      	add	r3, r2
}
 800e946:	4618      	mov	r0, r3
 800e948:	3714      	adds	r7, #20
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr

0800e952 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800e952:	b480      	push	{r7}
 800e954:	b089      	sub	sp, #36	; 0x24
 800e956:	af00      	add	r7, sp, #0
 800e958:	60f8      	str	r0, [r7, #12]
 800e95a:	460b      	mov	r3, r1
 800e95c:	607a      	str	r2, [r7, #4]
 800e95e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d003      	beq.n	800e96e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	7b1b      	ldrb	r3, [r3, #12]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d101      	bne.n	800e972 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800e96e:	2300      	movs	r3, #0
 800e970:	e030      	b.n	800e9d4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	69da      	ldr	r2, [r3, #28]
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	7b5b      	ldrb	r3, [r3, #13]
 800e97e:	021b      	lsls	r3, r3, #8
 800e980:	b21b      	sxth	r3, r3
 800e982:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e986:	b219      	sxth	r1, r3
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	7adb      	ldrb	r3, [r3, #11]
 800e98c:	b21b      	sxth	r3, r3
 800e98e:	430b      	orrs	r3, r1
 800e990:	b21b      	sxth	r3, r3
 800e992:	b29b      	uxth	r3, r3
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	4413      	add	r3, r2
 800e998:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	7b1b      	ldrb	r3, [r3, #12]
 800e99e:	837b      	strh	r3, [r7, #26]
 800e9a0:	8b7b      	ldrh	r3, [r7, #26]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d015      	beq.n	800e9d2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800e9a6:	69fb      	ldr	r3, [r7, #28]
 800e9a8:	881b      	ldrh	r3, [r3, #0]
 800e9aa:	897a      	ldrh	r2, [r7, #10]
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d103      	bne.n	800e9b8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800e9b0:	69fb      	ldr	r3, [r7, #28]
 800e9b2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e9b6:	e00d      	b.n	800e9d4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	881b      	ldrh	r3, [r3, #0]
 800e9bc:	897a      	ldrh	r2, [r7, #10]
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d306      	bcc.n	800e9d0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e9c2:	8b7b      	ldrh	r3, [r7, #26]
 800e9c4:	3b01      	subs	r3, #1
 800e9c6:	837b      	strh	r3, [r7, #26]
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	3304      	adds	r3, #4
 800e9cc:	61fb      	str	r3, [r7, #28]
 800e9ce:	e7e7      	b.n	800e9a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800e9d0:	bf00      	nop
        }
    }
    return 0;
 800e9d2:	2300      	movs	r3, #0
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3724      	adds	r7, #36	; 0x24
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr

0800e9e0 <__tcf_0>:

touchgfx::GeneratedFont& getFont_bahnschrift_20_4bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_20_4bpp()
{
    static touchgfx::GeneratedFont bahnschrift_20_4bpp(glyphs_bahnschrift_20_4bpp, 70, 20, 4, 4, 1, 1, 1, unicodes_bahnschrift_20_4bpp, kerning_bahnschrift_20_4bpp, 0, 0, 0, 0);
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	4801      	ldr	r0, [pc, #4]	; (800e9ec <__tcf_0+0xc>)
 800e9e6:	f7ff ff07 	bl	800e7f8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	20004b28 	.word	0x20004b28

0800e9f0 <_Z27getFont_bahnschrift_20_4bppv>:
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b08c      	sub	sp, #48	; 0x30
 800e9f4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_20_4bpp(glyphs_bahnschrift_20_4bpp, 70, 20, 4, 4, 1, 1, 1, unicodes_bahnschrift_20_4bpp, kerning_bahnschrift_20_4bpp, 0, 0, 0, 0);
 800e9f6:	4b1f      	ldr	r3, [pc, #124]	; (800ea74 <_Z27getFont_bahnschrift_20_4bppv+0x84>)
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	f3bf 8f5b 	dmb	ish
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	f003 0301 	and.w	r3, r3, #1
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	bf0c      	ite	eq
 800ea08:	2301      	moveq	r3, #1
 800ea0a:	2300      	movne	r3, #0
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d02c      	beq.n	800ea6c <_Z27getFont_bahnschrift_20_4bppv+0x7c>
 800ea12:	4818      	ldr	r0, [pc, #96]	; (800ea74 <_Z27getFont_bahnschrift_20_4bppv+0x84>)
 800ea14:	f01d f84b 	bl	802baae <__cxa_guard_acquire>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	bf14      	ite	ne
 800ea1e:	2301      	movne	r3, #1
 800ea20:	2300      	moveq	r3, #0
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d021      	beq.n	800ea6c <_Z27getFont_bahnschrift_20_4bppv+0x7c>
 800ea28:	2300      	movs	r3, #0
 800ea2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ea30:	2300      	movs	r3, #0
 800ea32:	9308      	str	r3, [sp, #32]
 800ea34:	2300      	movs	r3, #0
 800ea36:	9307      	str	r3, [sp, #28]
 800ea38:	4b0f      	ldr	r3, [pc, #60]	; (800ea78 <_Z27getFont_bahnschrift_20_4bppv+0x88>)
 800ea3a:	9306      	str	r3, [sp, #24]
 800ea3c:	4b0f      	ldr	r3, [pc, #60]	; (800ea7c <_Z27getFont_bahnschrift_20_4bppv+0x8c>)
 800ea3e:	9305      	str	r3, [sp, #20]
 800ea40:	2301      	movs	r3, #1
 800ea42:	9304      	str	r3, [sp, #16]
 800ea44:	2301      	movs	r3, #1
 800ea46:	9303      	str	r3, [sp, #12]
 800ea48:	2301      	movs	r3, #1
 800ea4a:	9302      	str	r3, [sp, #8]
 800ea4c:	2304      	movs	r3, #4
 800ea4e:	9301      	str	r3, [sp, #4]
 800ea50:	2304      	movs	r3, #4
 800ea52:	9300      	str	r3, [sp, #0]
 800ea54:	2314      	movs	r3, #20
 800ea56:	2246      	movs	r2, #70	; 0x46
 800ea58:	4909      	ldr	r1, [pc, #36]	; (800ea80 <_Z27getFont_bahnschrift_20_4bppv+0x90>)
 800ea5a:	480a      	ldr	r0, [pc, #40]	; (800ea84 <_Z27getFont_bahnschrift_20_4bppv+0x94>)
 800ea5c:	f7ff ff26 	bl	800e8ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800ea60:	4804      	ldr	r0, [pc, #16]	; (800ea74 <_Z27getFont_bahnschrift_20_4bppv+0x84>)
 800ea62:	f01d f830 	bl	802bac6 <__cxa_guard_release>
 800ea66:	4808      	ldr	r0, [pc, #32]	; (800ea88 <_Z27getFont_bahnschrift_20_4bppv+0x98>)
 800ea68:	f01d fe5c 	bl	802c724 <atexit>
    return bahnschrift_20_4bpp;
 800ea6c:	4b05      	ldr	r3, [pc, #20]	; (800ea84 <_Z27getFont_bahnschrift_20_4bppv+0x94>)
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}
 800ea74:	20004b50 	.word	0x20004b50
 800ea78:	0803bd48 	.word	0x0803bd48
 800ea7c:	0802f0bc 	.word	0x0802f0bc
 800ea80:	0803b5a0 	.word	0x0803b5a0
 800ea84:	20004b28 	.word	0x20004b28
 800ea88:	0800e9e1 	.word	0x0800e9e1

0800ea8c <__tcf_0>:

touchgfx::GeneratedFont& getFont_bahnschrift_55_4bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_55_4bpp()
{
    static touchgfx::GeneratedFont bahnschrift_55_4bpp(glyphs_bahnschrift_55_4bpp, 70, 55, 11, 4, 1, 1, 1, unicodes_bahnschrift_55_4bpp, kerning_bahnschrift_55_4bpp, 0, 0, 0, 0);
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	4801      	ldr	r0, [pc, #4]	; (800ea98 <__tcf_0+0xc>)
 800ea92:	f7ff feb1 	bl	800e7f8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	20004b54 	.word	0x20004b54

0800ea9c <_Z27getFont_bahnschrift_55_4bppv>:
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b08c      	sub	sp, #48	; 0x30
 800eaa0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_55_4bpp(glyphs_bahnschrift_55_4bpp, 70, 55, 11, 4, 1, 1, 1, unicodes_bahnschrift_55_4bpp, kerning_bahnschrift_55_4bpp, 0, 0, 0, 0);
 800eaa2:	4b1f      	ldr	r3, [pc, #124]	; (800eb20 <_Z27getFont_bahnschrift_55_4bppv+0x84>)
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	f3bf 8f5b 	dmb	ish
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	f003 0301 	and.w	r3, r3, #1
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	bf0c      	ite	eq
 800eab4:	2301      	moveq	r3, #1
 800eab6:	2300      	movne	r3, #0
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d02c      	beq.n	800eb18 <_Z27getFont_bahnschrift_55_4bppv+0x7c>
 800eabe:	4818      	ldr	r0, [pc, #96]	; (800eb20 <_Z27getFont_bahnschrift_55_4bppv+0x84>)
 800eac0:	f01c fff5 	bl	802baae <__cxa_guard_acquire>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	bf14      	ite	ne
 800eaca:	2301      	movne	r3, #1
 800eacc:	2300      	moveq	r3, #0
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d021      	beq.n	800eb18 <_Z27getFont_bahnschrift_55_4bppv+0x7c>
 800ead4:	2300      	movs	r3, #0
 800ead6:	930a      	str	r3, [sp, #40]	; 0x28
 800ead8:	2300      	movs	r3, #0
 800eada:	9309      	str	r3, [sp, #36]	; 0x24
 800eadc:	2300      	movs	r3, #0
 800eade:	9308      	str	r3, [sp, #32]
 800eae0:	2300      	movs	r3, #0
 800eae2:	9307      	str	r3, [sp, #28]
 800eae4:	4b0f      	ldr	r3, [pc, #60]	; (800eb24 <_Z27getFont_bahnschrift_55_4bppv+0x88>)
 800eae6:	9306      	str	r3, [sp, #24]
 800eae8:	4b0f      	ldr	r3, [pc, #60]	; (800eb28 <_Z27getFont_bahnschrift_55_4bppv+0x8c>)
 800eaea:	9305      	str	r3, [sp, #20]
 800eaec:	2301      	movs	r3, #1
 800eaee:	9304      	str	r3, [sp, #16]
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	9303      	str	r3, [sp, #12]
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	9302      	str	r3, [sp, #8]
 800eaf8:	2304      	movs	r3, #4
 800eafa:	9301      	str	r3, [sp, #4]
 800eafc:	230b      	movs	r3, #11
 800eafe:	9300      	str	r3, [sp, #0]
 800eb00:	2337      	movs	r3, #55	; 0x37
 800eb02:	2246      	movs	r2, #70	; 0x46
 800eb04:	4909      	ldr	r1, [pc, #36]	; (800eb2c <_Z27getFont_bahnschrift_55_4bppv+0x90>)
 800eb06:	480a      	ldr	r0, [pc, #40]	; (800eb30 <_Z27getFont_bahnschrift_55_4bppv+0x94>)
 800eb08:	f7ff fed0 	bl	800e8ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800eb0c:	4804      	ldr	r0, [pc, #16]	; (800eb20 <_Z27getFont_bahnschrift_55_4bppv+0x84>)
 800eb0e:	f01c ffda 	bl	802bac6 <__cxa_guard_release>
 800eb12:	4808      	ldr	r0, [pc, #32]	; (800eb34 <_Z27getFont_bahnschrift_55_4bppv+0x98>)
 800eb14:	f01d fe06 	bl	802c724 <atexit>
    return bahnschrift_55_4bpp;
 800eb18:	4b05      	ldr	r3, [pc, #20]	; (800eb30 <_Z27getFont_bahnschrift_55_4bppv+0x94>)
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}
 800eb20:	20004b7c 	.word	0x20004b7c
 800eb24:	0803bd4c 	.word	0x0803bd4c
 800eb28:	0802f0c0 	.word	0x0802f0c0
 800eb2c:	0803b974 	.word	0x0803b974
 800eb30:	20004b54 	.word	0x20004b54
 800eb34:	0800ea8d 	.word	0x0800ea8d

0800eb38 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800eb38:	b480      	push	{r7}
 800eb3a:	b083      	sub	sp, #12
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	6039      	str	r1, [r7, #0]
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	4618      	mov	r0, r3
 800eb46:	370c      	adds	r7, #12
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr

0800eb50 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800eb50:	b480      	push	{r7}
 800eb52:	b083      	sub	sp, #12
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]
    {
    }
 800eb5a:	bf00      	nop
 800eb5c:	370c      	adds	r7, #12
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr

0800eb66 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800eb66:	b480      	push	{r7}
 800eb68:	b083      	sub	sp, #12
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
 800eb6e:	6039      	str	r1, [r7, #0]
    {
    }
 800eb70:	bf00      	nop
 800eb72:	370c      	adds	r7, #12
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
    {
    }
 800eb86:	bf00      	nop
 800eb88:	370c      	adds	r7, #12
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr

0800eb92 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800eb92:	b480      	push	{r7}
 800eb94:	b083      	sub	sp, #12
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
 800eb9a:	460b      	mov	r3, r1
 800eb9c:	70fb      	strb	r3, [r7, #3]
    {
    }
 800eb9e:	bf00      	nop
 800eba0:	370c      	adds	r7, #12
 800eba2:	46bd      	mov	sp, r7
 800eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba8:	4770      	bx	lr

0800ebaa <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800ebaa:	b480      	push	{r7}
 800ebac:	b083      	sub	sp, #12
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	6078      	str	r0, [r7, #4]
    {
    }
 800ebb2:	bf00      	nop
 800ebb4:	370c      	adds	r7, #12
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbc:	4770      	bx	lr

0800ebbe <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800ebbe:	b480      	push	{r7}
 800ebc0:	b083      	sub	sp, #12
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	6078      	str	r0, [r7, #4]
    {
    }
 800ebc6:	bf00      	nop
 800ebc8:	370c      	adds	r7, #12
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd0:	4770      	bx	lr
	...

0800ebd4 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
    {
 800ebdc:	4a04      	ldr	r2, [pc, #16]	; (800ebf0 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	601a      	str	r2, [r3, #0]
    }
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	370c      	adds	r7, #12
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr
 800ebf0:	0802f1cc 	.word	0x0802f1cc

0800ebf4 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b082      	sub	sp, #8
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
    }
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f7ff ffe9 	bl	800ebd4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800ec02:	2104      	movs	r1, #4
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f01c ff50 	bl	802baaa <_ZdlPvj>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3708      	adds	r7, #8
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800ec14:	b480      	push	{r7}
 800ec16:	b083      	sub	sp, #12
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	70fb      	strb	r3, [r7, #3]
    {
    }
 800ec20:	bf00      	nop
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800ec2c:	b480      	push	{r7}
 800ec2e:	b083      	sub	sp, #12
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	683a      	ldr	r2, [r7, #0]
 800ec3a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800ec3e:	6810      	ldr	r0, [r2, #0]
 800ec40:	6851      	ldr	r1, [r2, #4]
 800ec42:	c303      	stmia	r3!, {r0, r1}
    }
 800ec44:	bf00      	nop
 800ec46:	370c      	adds	r7, #12
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr

0800ec50 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800ec50:	b480      	push	{r7}
 800ec52:	b083      	sub	sp, #12
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
    {
 800ec58:	4a04      	ldr	r2, [pc, #16]	; (800ec6c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	601a      	str	r2, [r3, #0]
    }
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	4618      	mov	r0, r3
 800ec62:	370c      	adds	r7, #12
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr
 800ec6c:	0802f1b4 	.word	0x0802f1b4

0800ec70 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
    }
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f7ff ffe9 	bl	800ec50 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ec7e:	2104      	movs	r1, #4
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f01c ff12 	bl	802baaa <_ZdlPvj>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3708      	adds	r7, #8
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800ec90:	b480      	push	{r7}
 800ec92:	b083      	sub	sp, #12
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800ec98:	4a07      	ldr	r2, [pc, #28]	; (800ecb8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	601a      	str	r2, [r3, #0]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2200      	movs	r2, #0
 800eca2:	605a      	str	r2, [r3, #4]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2200      	movs	r2, #0
 800eca8:	721a      	strb	r2, [r3, #8]
    {
    }
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4618      	mov	r0, r3
 800ecae:	370c      	adds	r7, #12
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr
 800ecb8:	0802f190 	.word	0x0802f190

0800ecbc <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800ecbc:	b480      	push	{r7}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
    {
 800ecc4:	4a04      	ldr	r2, [pc, #16]	; (800ecd8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	601a      	str	r2, [r3, #0]
    }
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	4618      	mov	r0, r3
 800ecce:	370c      	adds	r7, #12
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr
 800ecd8:	0802f190 	.word	0x0802f190

0800ecdc <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b082      	sub	sp, #8
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
    }
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f7ff ffe9 	bl	800ecbc <_ZN8touchgfx10TransitionD1Ev>
 800ecea:	210c      	movs	r1, #12
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f01c fedc 	bl	802baaa <_ZdlPvj>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3708      	adds	r7, #8
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
    {
    }
 800ed04:	bf00      	nop
 800ed06:	370c      	adds	r7, #12
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr

0800ed10 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800ed10:	b480      	push	{r7}
 800ed12:	b083      	sub	sp, #12
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
    {
    }
 800ed18:	bf00      	nop
 800ed1a:	370c      	adds	r7, #12
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed22:	4770      	bx	lr

0800ed24 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800ed24:	b480      	push	{r7}
 800ed26:	b083      	sub	sp, #12
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
    {
    }
 800ed2c:	bf00      	nop
 800ed2e:	370c      	adds	r7, #12
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr

0800ed38 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 800ed40:	f00b fef4 	bl	801ab2c <_ZN8touchgfx11Application11getInstanceEv>
 800ed44:	4603      	mov	r3, r0
 800ed46:	681a      	ldr	r2, [r3, #0]
 800ed48:	3230      	adds	r2, #48	; 0x30
 800ed4a:	6812      	ldr	r2, [r2, #0]
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	4790      	blx	r2
    }
 800ed50:	bf00      	nop
 800ed52:	3708      	adds	r7, #8
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800ed58:	b480      	push	{r7}
 800ed5a:	b083      	sub	sp, #12
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	683a      	ldr	r2, [r7, #0]
 800ed66:	605a      	str	r2, [r3, #4]
    }
 800ed68:	bf00      	nop
 800ed6a:	370c      	adds	r7, #12
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	4a05      	ldr	r2, [pc, #20]	; (800ed94 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	601a      	str	r2, [r3, #0]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7ff ff25 	bl	800ebd4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3708      	adds	r7, #8
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	08030e80 	.word	0x08030e80

0800ed98 <_ZN8touchgfx11ApplicationD0Ev>:
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f7ff ffe7 	bl	800ed74 <_ZN8touchgfx11ApplicationD1Ev>
 800eda6:	f44f 719c 	mov.w	r1, #312	; 0x138
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f01c fe7d 	bl	802baaa <_ZdlPvj>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	4618      	mov	r0, r3
 800edb4:	3708      	adds	r7, #8
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}
	...

0800edbc <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b082      	sub	sp, #8
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	4618      	mov	r0, r3
 800edc8:	f00b ff18 	bl	801abfc <_ZN8touchgfx11ApplicationC1Ev>
 800edcc:	4a09      	ldr	r2, [pc, #36]	; (800edf4 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	601a      	str	r2, [r3, #0]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2200      	movs	r2, #0
 800edd6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2200      	movs	r2, #0
 800edde:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	4a04      	ldr	r2, [pc, #16]	; (800edf8 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800ede6:	6013      	str	r3, [r2, #0]
    }
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	4618      	mov	r0, r3
 800edec:	3708      	adds	r7, #8
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	0802f14c 	.word	0x0802f14c
 800edf8:	2000681c 	.word	0x2000681c

0800edfc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f000 f804 	bl	800ee12 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800ee0a:	bf00      	nop
 800ee0c:	3708      	adds	r7, #8
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}

0800ee12 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800ee12:	b580      	push	{r7, lr}
 800ee14:	b082      	sub	sp, #8
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d00f      	beq.n	800ee44 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	330c      	adds	r3, #12
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	4610      	mov	r0, r2
 800ee38:	4798      	blx	r3
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d001      	beq.n	800ee44 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ee40:	2301      	movs	r3, #1
 800ee42:	e000      	b.n	800ee46 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800ee44:	2300      	movs	r3, #0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d00e      	beq.n	800ee68 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	3308      	adds	r3, #8
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4610      	mov	r0, r2
 800ee5e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2200      	movs	r2, #0
 800ee64:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800ee68:	bf00      	nop
 800ee6a:	3708      	adds	r7, #8
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800ee70:	b480      	push	{r7}
 800ee72:	b083      	sub	sp, #12
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	683a      	ldr	r2, [r7, #0]
 800ee7e:	601a      	str	r2, [r3, #0]
    }
 800ee80:	bf00      	nop
 800ee82:	370c      	adds	r7, #12
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr

0800ee8c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	4a05      	ldr	r2, [pc, #20]	; (800eeac <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	601a      	str	r2, [r3, #0]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7ff ff69 	bl	800ed74 <_ZN8touchgfx11ApplicationD1Ev>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	4618      	mov	r0, r3
 800eea6:	3708      	adds	r7, #8
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	0802f14c 	.word	0x0802f14c

0800eeb0 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f7ff ffe7 	bl	800ee8c <_ZN8touchgfx14MVPApplicationD1Ev>
 800eebe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f01c fdf1 	bl	802baaa <_ZdlPvj>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4618      	mov	r0, r3
 800eecc:	3708      	adds	r7, #8
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
	...

0800eed4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	4a08      	ldr	r2, [pc, #32]	; (800ef00 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	601a      	str	r2, [r3, #0]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800eee8:	4618      	mov	r0, r3
 800eeea:	f000 fae7 	bl	800f4bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7ff ffcb 	bl	800ee8c <_ZN8touchgfx14MVPApplicationD1Ev>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	4618      	mov	r0, r3
 800eefa:	3708      	adds	r7, #8
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}
 800ef00:	0802f0f0 	.word	0x0802f0f0

0800ef04 <_ZN23FrontendApplicationBaseD0Ev>:
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b082      	sub	sp, #8
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f7ff ffe1 	bl	800eed4 <_ZN23FrontendApplicationBaseD1Ev>
 800ef12:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f01c fdc7 	bl	802baaa <_ZdlPvj>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3708      	adds	r7, #8
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}

0800ef26 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800ef26:	b480      	push	{r7}
 800ef28:	b083      	sub	sp, #12
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2201      	movs	r2, #1
 800ef32:	721a      	strb	r2, [r3, #8]
    }
 800ef34:	bf00      	nop
 800ef36:	370c      	adds	r7, #12
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3e:	4770      	bx	lr

0800ef40 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800ef40:	b480      	push	{r7}
 800ef42:	b083      	sub	sp, #12
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	683a      	ldr	r2, [r7, #0]
 800ef4e:	605a      	str	r2, [r3, #4]
    }
 800ef50:	bf00      	nop
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800ef5c:	b480      	push	{r7}
 800ef5e:	af00      	add	r7, sp, #0
    {
        return instance;
 800ef60:	4b03      	ldr	r3, [pc, #12]	; (800ef70 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800ef62:	681b      	ldr	r3, [r3, #0]
    }
 800ef64:	4618      	mov	r0, r3
 800ef66:	46bd      	mov	sp, r7
 800ef68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6c:	4770      	bx	lr
 800ef6e:	bf00      	nop
 800ef70:	200067d0 	.word	0x200067d0

0800ef74 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800ef74:	b480      	push	{r7}
 800ef76:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800ef78:	4b0b      	ldr	r3, [pc, #44]	; (800efa8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d008      	beq.n	800ef96 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800ef84:	4b08      	ldr	r3, [pc, #32]	; (800efa8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d003      	beq.n	800ef96 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800ef8e:	4b06      	ldr	r3, [pc, #24]	; (800efa8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef94:	e002      	b.n	800ef9c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800ef96:	4b04      	ldr	r3, [pc, #16]	; (800efa8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	689b      	ldr	r3, [r3, #8]
    }
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa4:	4770      	bx	lr
 800efa6:	bf00      	nop
 800efa8:	200067d0 	.word	0x200067d0

0800efac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800efac:	b580      	push	{r7, lr}
 800efae:	b084      	sub	sp, #16
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	60f8      	str	r0, [r7, #12]
 800efb4:	60b9      	str	r1, [r7, #8]
 800efb6:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	4618      	mov	r0, r3
 800efbc:	f7ff fefe 	bl	800edbc <_ZN8touchgfx14MVPApplicationC1Ev>
 800efc0:	4a13      	ldr	r2, [pc, #76]	; (800f010 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	601a      	str	r2, [r3, #0]
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800efcc:	4618      	mov	r0, r3
 800efce:	f000 f89f 	bl	800f110 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800efe2:	f7ff ffbb 	bl	800ef5c <_ZN8touchgfx3HAL11getInstanceEv>
 800efe6:	4603      	mov	r3, r0
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	3208      	adds	r2, #8
 800efec:	6812      	ldr	r2, [r2, #0]
 800efee:	2100      	movs	r1, #0
 800eff0:	4618      	mov	r0, r3
 800eff2:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800eff4:	2000      	movs	r0, #0
 800eff6:	f004 f863 	bl	80130c0 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800effa:	f7ff ffbb 	bl	800ef74 <_ZN8touchgfx3HAL3lcdEv>
 800effe:	4603      	mov	r3, r0
 800f000:	4618      	mov	r0, r3
 800f002:	f013 ff90 	bl	8022f26 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	4618      	mov	r0, r3
 800f00a:	3710      	adds	r7, #16
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}
 800f010:	0802f0f0 	.word	0x0802f0f0

0800f014 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	4618      	mov	r0, r3
 800f022:	370c      	adds	r7, #12
 800f024:	46bd      	mov	sp, r7
 800f026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02a:	4770      	bx	lr

0800f02c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6039      	str	r1, [r7, #0]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	683a      	ldr	r2, [r7, #0]
 800f03a:	4611      	mov	r1, r2
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7ff ffe9 	bl	800f014 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	685a      	ldr	r2, [r3, #4]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	605a      	str	r2, [r3, #4]
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	683a      	ldr	r2, [r7, #0]
 800f04e:	3308      	adds	r3, #8
 800f050:	3208      	adds	r2, #8
 800f052:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f056:	e883 0003 	stmia.w	r3, {r0, r1}
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	4618      	mov	r0, r3
 800f05e:	3708      	adds	r7, #8
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800f064:	b590      	push	{r4, r7, lr}
 800f066:	b089      	sub	sp, #36	; 0x24
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800f072:	4b10      	ldr	r3, [pc, #64]	; (800f0b4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800f074:	61bb      	str	r3, [r7, #24]
 800f076:	2300      	movs	r3, #0
 800f078:	61fb      	str	r3, [r7, #28]
 800f07a:	f107 0008 	add.w	r0, r7, #8
 800f07e:	f107 0318 	add.w	r3, r7, #24
 800f082:	cb0c      	ldmia	r3, {r2, r3}
 800f084:	6879      	ldr	r1, [r7, #4]
 800f086:	f000 f85f 	bl	800f148 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800f08a:	f107 0308 	add.w	r3, r7, #8
 800f08e:	4619      	mov	r1, r3
 800f090:	4620      	mov	r0, r4
 800f092:	f7ff ffcb 	bl	800f02c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800f096:	f107 0308 	add.w	r3, r7, #8
 800f09a:	4618      	mov	r0, r3
 800f09c:	f000 fa0e 	bl	800f4bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800f0ac:	bf00      	nop
 800f0ae:	3724      	adds	r7, #36	; 0x24
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd90      	pop	{r4, r7, pc}
 800f0b4:	0800f0b9 	.word	0x0800f0b9

0800f0b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af02      	add	r7, sp, #8
 800f0be:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800f0d4:	9300      	str	r3, [sp, #0]
 800f0d6:	4b04      	ldr	r3, [pc, #16]	; (800f0e8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800f0d8:	4804      	ldr	r0, [pc, #16]	; (800f0ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800f0da:	f000 f867 	bl	800f1ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800f0de:	bf00      	nop
 800f0e0:	3708      	adds	r7, #8
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	20006810 	.word	0x20006810
 800f0ec:	2000680c 	.word	0x2000680c

0800f0f0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800f0f0:	b480      	push	{r7}
 800f0f2:	b083      	sub	sp, #12
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	4a04      	ldr	r2, [pc, #16]	; (800f10c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	601a      	str	r2, [r3, #0]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	4618      	mov	r0, r3
 800f102:	370c      	adds	r7, #12
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr
 800f10c:	0802f1b4 	.word	0x0802f1b4

0800f110 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7ff ffe8 	bl	800f0f0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800f120:	4a08      	ldr	r2, [pc, #32]	; (800f144 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	601a      	str	r2, [r3, #0]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2200      	movs	r2, #0
 800f12a:	605a      	str	r2, [r3, #4]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2200      	movs	r2, #0
 800f130:	609a      	str	r2, [r3, #8]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2200      	movs	r2, #0
 800f136:	60da      	str	r2, [r3, #12]
    {
    }
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	4618      	mov	r0, r3
 800f13c:	3708      	adds	r7, #8
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	0802f134 	.word	0x0802f134

0800f148 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	60f8      	str	r0, [r7, #12]
 800f150:	60b9      	str	r1, [r7, #8]
 800f152:	4639      	mov	r1, r7
 800f154:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7ff ffc8 	bl	800f0f0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800f160:	4a08      	ldr	r2, [pc, #32]	; (800f184 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	601a      	str	r2, [r3, #0]
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	68ba      	ldr	r2, [r7, #8]
 800f16a:	605a      	str	r2, [r3, #4]
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	3308      	adds	r3, #8
 800f170:	463a      	mov	r2, r7
 800f172:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f176:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	4618      	mov	r0, r3
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	0802f134 	.word	0x0802f134

0800f188 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	4618      	mov	r0, r3
 800f194:	f7ff fd7c 	bl	800ec90 <_ZN8touchgfx10TransitionC1Ev>
 800f198:	4a03      	ldr	r2, [pc, #12]	; (800f1a8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	601a      	str	r2, [r3, #0]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3708      	adds	r7, #8
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	0802f0cc 	.word	0x0802f0cc

0800f1ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800f1ac:	b590      	push	{r4, r7, lr}
 800f1ae:	b08f      	sub	sp, #60	; 0x3c
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	607a      	str	r2, [r7, #4]
 800f1b8:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	689a      	ldr	r2, [r3, #8]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	689b      	ldr	r3, [r3, #8]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	3320      	adds	r3, #32
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	4610      	mov	r0, r2
 800f1ca:	4798      	blx	r3
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	f640 525b 	movw	r2, #3419	; 0xd5b
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d805      	bhi.n	800f1e2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800f1d6:	4b7f      	ldr	r3, [pc, #508]	; (800f3d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800f1d8:	4a7f      	ldr	r2, [pc, #508]	; (800f3d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800f1da:	21a3      	movs	r1, #163	; 0xa3
 800f1dc:	487f      	ldr	r0, [pc, #508]	; (800f3dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800f1de:	f01d fa83 	bl	802c6e8 <__assert_func>
 800f1e2:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	685a      	ldr	r2, [r3, #4]
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	685b      	ldr	r3, [r3, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	3320      	adds	r3, #32
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	4610      	mov	r0, r2
 800f1f4:	4798      	blx	r3
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b0f      	cmp	r3, #15
 800f1fa:	d805      	bhi.n	800f208 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800f1fc:	4b78      	ldr	r3, [pc, #480]	; (800f3e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800f1fe:	4a76      	ldr	r2, [pc, #472]	; (800f3d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800f200:	21a4      	movs	r1, #164	; 0xa4
 800f202:	4876      	ldr	r0, [pc, #472]	; (800f3dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800f204:	f01d fa70 	bl	802c6e8 <__assert_func>
 800f208:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	68da      	ldr	r2, [r3, #12]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	68db      	ldr	r3, [r3, #12]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	3320      	adds	r3, #32
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	4610      	mov	r0, r2
 800f21a:	4798      	blx	r3
 800f21c:	4603      	mov	r3, r0
 800f21e:	2b0b      	cmp	r3, #11
 800f220:	d805      	bhi.n	800f22e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800f222:	4b70      	ldr	r3, [pc, #448]	; (800f3e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800f224:	4a6c      	ldr	r2, [pc, #432]	; (800f3d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800f226:	21a5      	movs	r1, #165	; 0xa5
 800f228:	486c      	ldr	r0, [pc, #432]	; (800f3dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800f22a:	f01d fa5d 	bl	802c6e8 <__assert_func>
 800f22e:	bf00      	nop
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	62bb      	str	r3, [r7, #40]	; 0x28
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	627b      	str	r3, [r7, #36]	; 0x24
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800f23c:	f00b fc76 	bl	801ab2c <_ZN8touchgfx11Application11getInstanceEv>
 800f240:	4603      	mov	r3, r0
 800f242:	4618      	mov	r0, r3
 800f244:	f00b fcc0 	bl	801abc8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800f248:	6a3b      	ldr	r3, [r7, #32]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d008      	beq.n	800f262 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800f250:	6a3b      	ldr	r3, [r7, #32]
 800f252:	681a      	ldr	r2, [r3, #0]
 800f254:	6a3b      	ldr	r3, [r7, #32]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	330c      	adds	r3, #12
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	4610      	mov	r0, r2
 800f260:	4798      	blx	r3
    if (*currentTrans)
 800f262:	6a3b      	ldr	r3, [r7, #32]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d007      	beq.n	800f27a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800f26a:	6a3b      	ldr	r3, [r7, #32]
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	6a3b      	ldr	r3, [r7, #32]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4610      	mov	r0, r2
 800f278:	4798      	blx	r3
    if (*currentScreen)
 800f27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d008      	beq.n	800f294 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800f282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f284:	681a      	ldr	r2, [r3, #0]
 800f286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	3314      	adds	r3, #20
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	4610      	mov	r0, r2
 800f292:	4798      	blx	r3
    if (*currentPresenter)
 800f294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d008      	beq.n	800f2ae <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800f29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	3304      	adds	r3, #4
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	4610      	mov	r0, r2
 800f2ac:	4798      	blx	r3
    if (*currentScreen)
 800f2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d007      	beq.n	800f2c6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800f2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	4610      	mov	r0, r2
 800f2c4:	4798      	blx	r3
    if (*currentPresenter)
 800f2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d008      	beq.n	800f2e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800f2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d0:	681a      	ldr	r2, [r3, #0]
 800f2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	3308      	adds	r3, #8
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4610      	mov	r0, r2
 800f2de:	4798      	blx	r3
}
 800f2e0:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	2100      	movs	r1, #0
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f000 f87d 	bl	800f3e8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	200c      	movs	r0, #12
 800f2f4:	f7ff fc20 	bl	800eb38 <_ZnwjPv>
 800f2f8:	4604      	mov	r4, r0
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	f7ff ff44 	bl	800f188 <_ZN8touchgfx12NoTransitionC1Ev>
 800f300:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	689b      	ldr	r3, [r3, #8]
 800f306:	2100      	movs	r1, #0
 800f308:	4618      	mov	r0, r3
 800f30a:	f000 f880 	bl	800f40e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800f30e:	4603      	mov	r3, r0
 800f310:	4619      	mov	r1, r3
 800f312:	f640 505c 	movw	r0, #3420	; 0xd5c
 800f316:	f7ff fc0f 	bl	800eb38 <_ZnwjPv>
 800f31a:	4604      	mov	r4, r0
 800f31c:	4620      	mov	r0, r4
 800f31e:	f004 f903 	bl	8013528 <_ZN11Screen1ViewC1Ev>
 800f322:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	2100      	movs	r1, #0
 800f32a:	4618      	mov	r0, r3
 800f32c:	f000 f882 	bl	800f434 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800f330:	4603      	mov	r3, r0
 800f332:	4619      	mov	r1, r3
 800f334:	2010      	movs	r0, #16
 800f336:	f7ff fbff 	bl	800eb38 <_ZnwjPv>
 800f33a:	4604      	mov	r4, r0
 800f33c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f33e:	4620      	mov	r0, r4
 800f340:	f004 f876 	bl	8013430 <_ZN16Screen1PresenterC1ER11Screen1View>
 800f344:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f34a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f350:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f356:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800f358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d002      	beq.n	800f364 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800f35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f360:	3304      	adds	r3, #4
 800f362:	e000      	b.n	800f366 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800f364:	2300      	movs	r3, #0
 800f366:	4619      	mov	r1, r3
 800f368:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f36a:	f7ff fd81 	bl	800ee70 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800f36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f370:	3304      	adds	r3, #4
 800f372:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f374:	4618      	mov	r0, r3
 800f376:	f7ff fde3 	bl	800ef40 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800f37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f37e:	4618      	mov	r0, r3
 800f380:	f000 f86b 	bl	800f45a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800f384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f386:	61fb      	str	r3, [r7, #28]
 800f388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38a:	61bb      	str	r3, [r7, #24]
 800f38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f38e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800f390:	69fb      	ldr	r3, [r7, #28]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	330c      	adds	r3, #12
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	69f8      	ldr	r0, [r7, #28]
 800f39a:	4798      	blx	r3
    newPresenter->activate();
 800f39c:	69bb      	ldr	r3, [r7, #24]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	69b8      	ldr	r0, [r7, #24]
 800f3a4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800f3a6:	6979      	ldr	r1, [r7, #20]
 800f3a8:	69f8      	ldr	r0, [r7, #28]
 800f3aa:	f00d f8e6 	bl	801c57a <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	3310      	adds	r3, #16
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	6978      	ldr	r0, [r7, #20]
 800f3b8:	4798      	blx	r3
    newTransition->invalidate();
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	3314      	adds	r3, #20
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	6978      	ldr	r0, [r7, #20]
 800f3c4:	4798      	blx	r3
}
 800f3c6:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800f3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	373c      	adds	r7, #60	; 0x3c
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd90      	pop	{r4, r7, pc}
 800f3d2:	bf00      	nop
 800f3d4:	0802e51c 	.word	0x0802e51c
 800f3d8:	0802e5ac 	.word	0x0802e5ac
 800f3dc:	0802e6b0 	.word	0x0802e6b0
 800f3e0:	0802e6f4 	.word	0x0802e6f4
 800f3e4:	0802e798 	.word	0x0802e798

0800f3e8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b082      	sub	sp, #8
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
 800f3f0:	460b      	mov	r3, r1
 800f3f2:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	3324      	adds	r3, #36	; 0x24
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	887a      	ldrh	r2, [r7, #2]
 800f3fe:	4611      	mov	r1, r2
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	4798      	blx	r3
 800f404:	4603      	mov	r3, r0
    }
 800f406:	4618      	mov	r0, r3
 800f408:	3708      	adds	r7, #8
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}

0800f40e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800f40e:	b580      	push	{r7, lr}
 800f410:	b082      	sub	sp, #8
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
 800f416:	460b      	mov	r3, r1
 800f418:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	3324      	adds	r3, #36	; 0x24
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	887a      	ldrh	r2, [r7, #2]
 800f424:	4611      	mov	r1, r2
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	4798      	blx	r3
 800f42a:	4603      	mov	r3, r0
    }
 800f42c:	4618      	mov	r0, r3
 800f42e:	3708      	adds	r7, #8
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}

0800f434 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	460b      	mov	r3, r1
 800f43e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	3324      	adds	r3, #36	; 0x24
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	887a      	ldrh	r2, [r7, #2]
 800f44a:	4611      	mov	r1, r2
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	4798      	blx	r3
 800f450:	4603      	mov	r3, r0
    }
 800f452:	4618      	mov	r0, r3
 800f454:	3708      	adds	r7, #8
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}

0800f45a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800f45a:	b480      	push	{r7}
 800f45c:	b083      	sub	sp, #12
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
 800f462:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	683a      	ldr	r2, [r7, #0]
 800f468:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f46a:	bf00      	nop
 800f46c:	370c      	adds	r7, #12
 800f46e:	46bd      	mov	sp, r7
 800f470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f474:	4770      	bx	lr
	...

0800f478 <_ZN8touchgfx12NoTransitionD1Ev>:
 800f478:	b580      	push	{r7, lr}
 800f47a:	b082      	sub	sp, #8
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	4a05      	ldr	r2, [pc, #20]	; (800f498 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	601a      	str	r2, [r3, #0]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4618      	mov	r0, r3
 800f48a:	f7ff fc17 	bl	800ecbc <_ZN8touchgfx10TransitionD1Ev>
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	4618      	mov	r0, r3
 800f492:	3708      	adds	r7, #8
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}
 800f498:	0802f0cc 	.word	0x0802f0cc

0800f49c <_ZN8touchgfx12NoTransitionD0Ev>:
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b082      	sub	sp, #8
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f7ff ffe7 	bl	800f478 <_ZN8touchgfx12NoTransitionD1Ev>
 800f4aa:	210c      	movs	r1, #12
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f01c fafc 	bl	802baaa <_ZdlPvj>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3708      	adds	r7, #8
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}

0800f4bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
 800f4c4:	4a05      	ldr	r2, [pc, #20]	; (800f4dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	601a      	str	r2, [r3, #0]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7ff fbbf 	bl	800ec50 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3708      	adds	r7, #8
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}
 800f4dc:	0802f134 	.word	0x0802f134

0800f4e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f7ff ffe7 	bl	800f4bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800f4ee:	2110      	movs	r1, #16
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f01c fada 	bl	802baaa <_ZdlPvj>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3708      	adds	r7, #8
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	68d2      	ldr	r2, [r2, #12]
 800f510:	1052      	asrs	r2, r2, #1
 800f512:	1899      	adds	r1, r3, r2
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	68db      	ldr	r3, [r3, #12]
 800f518:	f003 0301 	and.w	r3, r3, #1
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d102      	bne.n	800f526 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	689b      	ldr	r3, [r3, #8]
 800f524:	e00a      	b.n	800f53c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	685b      	ldr	r3, [r3, #4]
 800f52a:	687a      	ldr	r2, [r7, #4]
 800f52c:	68d2      	ldr	r2, [r2, #12]
 800f52e:	1052      	asrs	r2, r2, #1
 800f530:	4413      	add	r3, r2
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	6892      	ldr	r2, [r2, #8]
 800f538:	4413      	add	r3, r2
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	4608      	mov	r0, r1
 800f53e:	4798      	blx	r3
    }
 800f540:	bf00      	nop
 800f542:	3708      	adds	r7, #8
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800f548:	b480      	push	{r7}
 800f54a:	b083      	sub	sp, #12
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d010      	beq.n	800f57a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	689b      	ldr	r3, [r3, #8]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d107      	bne.n	800f570 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	68db      	ldr	r3, [r3, #12]
 800f564:	f003 0301 	and.w	r3, r3, #1
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d101      	bne.n	800f570 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f56c:	2301      	movs	r3, #1
 800f56e:	e000      	b.n	800f572 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800f570:	2300      	movs	r3, #0
 800f572:	2b01      	cmp	r3, #1
 800f574:	d001      	beq.n	800f57a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f576:	2301      	movs	r3, #1
 800f578:	e000      	b.n	800f57c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800f57a:	2300      	movs	r3, #0
    }
 800f57c:	4618      	mov	r0, r3
 800f57e:	370c      	adds	r7, #12
 800f580:	46bd      	mov	sp, r7
 800f582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f586:	4770      	bx	lr

0800f588 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800f588:	b480      	push	{r7}
 800f58a:	b083      	sub	sp, #12
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2200      	movs	r2, #0
 800f594:	801a      	strh	r2, [r3, #0]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2200      	movs	r2, #0
 800f59a:	805a      	strh	r2, [r3, #2]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	809a      	strh	r2, [r3, #4]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	80da      	strh	r2, [r3, #6]
    {
    }
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	370c      	adds	r7, #12
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800f5b6:	b480      	push	{r7}
 800f5b8:	b083      	sub	sp, #12
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
 800f5be:	460b      	mov	r3, r1
 800f5c0:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	887a      	ldrh	r2, [r7, #2]
 800f5c6:	801a      	strh	r2, [r3, #0]
    {
    }
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	370c      	adds	r7, #12
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr
	...

0800f5d8 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800f5e0:	4a14      	ldr	r2, [pc, #80]	; (800f634 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	601a      	str	r2, [r3, #0]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	3304      	adds	r3, #4
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f7ff ffcc 	bl	800f588 <_ZN8touchgfx4RectC1Ev>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	330c      	adds	r3, #12
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7ff ffc7 	bl	800f588 <_ZN8touchgfx4RectC1Ev>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	615a      	str	r2, [r3, #20]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2200      	movs	r2, #0
 800f604:	619a      	str	r2, [r3, #24]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2200      	movs	r2, #0
 800f60a:	61da      	str	r2, [r3, #28]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2200      	movs	r2, #0
 800f610:	841a      	strh	r2, [r3, #32]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2200      	movs	r2, #0
 800f616:	845a      	strh	r2, [r3, #34]	; 0x22
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2200      	movs	r2, #0
 800f61c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2201      	movs	r2, #1
 800f624:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4618      	mov	r0, r3
 800f62c:	3708      	adds	r7, #8
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	08030fb4 	.word	0x08030fb4

0800f638 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800f638:	b480      	push	{r7}
 800f63a:	b083      	sub	sp, #12
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
    {
 800f640:	4a04      	ldr	r2, [pc, #16]	; (800f654 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	601a      	str	r2, [r3, #0]
    }
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	4618      	mov	r0, r3
 800f64a:	370c      	adds	r7, #12
 800f64c:	46bd      	mov	sp, r7
 800f64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f652:	4770      	bx	lr
 800f654:	08030fb4 	.word	0x08030fb4

0800f658 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800f658:	b580      	push	{r7, lr}
 800f65a:	b082      	sub	sp, #8
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
    }
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f7ff ffe9 	bl	800f638 <_ZN8touchgfx8DrawableD1Ev>
 800f666:	2128      	movs	r1, #40	; 0x28
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f01c fa1e 	bl	802baaa <_ZdlPvj>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	4618      	mov	r0, r3
 800f672:	3708      	adds	r7, #8
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800f678:	b480      	push	{r7}
 800f67a:	b083      	sub	sp, #12
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f680:	2300      	movs	r3, #0
    }
 800f682:	4618      	mov	r0, r3
 800f684:	370c      	adds	r7, #12
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr

0800f68e <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800f68e:	b580      	push	{r7, lr}
 800f690:	b084      	sub	sp, #16
 800f692:	af00      	add	r7, sp, #0
 800f694:	60f8      	str	r0, [r7, #12]
 800f696:	4608      	mov	r0, r1
 800f698:	4611      	mov	r1, r2
 800f69a:	461a      	mov	r2, r3
 800f69c:	4603      	mov	r3, r0
 800f69e:	817b      	strh	r3, [r7, #10]
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	813b      	strh	r3, [r7, #8]
 800f6a4:	4613      	mov	r3, r2
 800f6a6:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800f6a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f6ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	68f8      	ldr	r0, [r7, #12]
 800f6b4:	f000 f82a 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800f6b8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800f6bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	68f8      	ldr	r0, [r7, #12]
 800f6c4:	f000 f87e 	bl	800f7c4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800f6c8:	bf00      	nop
 800f6ca:	3710      	adds	r7, #16
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}

0800f6d0 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	460b      	mov	r3, r1
 800f6da:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	887a      	ldrh	r2, [r7, #2]
 800f6e0:	809a      	strh	r2, [r3, #4]
    }
 800f6e2:	bf00      	nop
 800f6e4:	370c      	adds	r7, #12
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr

0800f6ee <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800f6ee:	b480      	push	{r7}
 800f6f0:	b083      	sub	sp, #12
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	6078      	str	r0, [r7, #4]
 800f6f6:	460b      	mov	r3, r1
 800f6f8:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	887a      	ldrh	r2, [r7, #2]
 800f6fe:	80da      	strh	r2, [r3, #6]
    }
 800f700:	bf00      	nop
 800f702:	370c      	adds	r7, #12
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr

0800f70c <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b082      	sub	sp, #8
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	460b      	mov	r3, r1
 800f716:	807b      	strh	r3, [r7, #2]
 800f718:	4613      	mov	r3, r2
 800f71a:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	332c      	adds	r3, #44	; 0x2c
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f728:	4611      	mov	r1, r2
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	4798      	blx	r3
        setY(y);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	3330      	adds	r3, #48	; 0x30
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f73a:	4611      	mov	r1, r2
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	4798      	blx	r3
    }
 800f740:	bf00      	nop
 800f742:	3708      	adds	r7, #8
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	460b      	mov	r3, r1
 800f752:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	887a      	ldrh	r2, [r7, #2]
 800f758:	811a      	strh	r2, [r3, #8]
    }
 800f75a:	bf00      	nop
 800f75c:	370c      	adds	r7, #12
 800f75e:	46bd      	mov	sp, r7
 800f760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f764:	4770      	bx	lr

0800f766 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800f766:	b480      	push	{r7}
 800f768:	b083      	sub	sp, #12
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
 800f76e:	460b      	mov	r3, r1
 800f770:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	887a      	ldrh	r2, [r7, #2]
 800f776:	815a      	strh	r2, [r3, #10]
    }
 800f778:	bf00      	nop
 800f77a:	370c      	adds	r7, #12
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr

0800f784 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800f784:	b480      	push	{r7}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
    {
    }
 800f78c:	bf00      	nop
 800f78e:	370c      	adds	r7, #12
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr

0800f798 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f798:	b480      	push	{r7}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	6039      	str	r1, [r7, #0]
    {
    }
 800f7a2:	bf00      	nop
 800f7a4:	370c      	adds	r7, #12
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr

0800f7ae <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f7ae:	b480      	push	{r7}
 800f7b0:	b083      	sub	sp, #12
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
 800f7b6:	6039      	str	r1, [r7, #0]
    {
    }
 800f7b8:	bf00      	nop
 800f7ba:	370c      	adds	r7, #12
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr

0800f7c4 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b082      	sub	sp, #8
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	460b      	mov	r3, r1
 800f7ce:	807b      	strh	r3, [r7, #2]
 800f7d0:	4613      	mov	r3, r2
 800f7d2:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	3334      	adds	r3, #52	; 0x34
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f7e0:	4611      	mov	r1, r2
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	4798      	blx	r3
        setHeight(height);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	3338      	adds	r3, #56	; 0x38
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f7f2:	4611      	mov	r1, r2
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	4798      	blx	r3
    }
 800f7f8:	bf00      	nop
 800f7fa:	3708      	adds	r7, #8
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f800:	b480      	push	{r7}
 800f802:	b083      	sub	sp, #12
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	6039      	str	r1, [r7, #0]
    {
    }
 800f80a:	bf00      	nop
 800f80c:	370c      	adds	r7, #12
 800f80e:	46bd      	mov	sp, r7
 800f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f814:	4770      	bx	lr

0800f816 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800f816:	b480      	push	{r7}
 800f818:	b083      	sub	sp, #12
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	6078      	str	r0, [r7, #4]
    {
    }
 800f81e:	bf00      	nop
 800f820:	370c      	adds	r7, #12
 800f822:	46bd      	mov	sp, r7
 800f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f828:	4770      	bx	lr

0800f82a <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800f82a:	b480      	push	{r7}
 800f82c:	b083      	sub	sp, #12
 800f82e:	af00      	add	r7, sp, #0
 800f830:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800f838:	4618      	mov	r0, r3
 800f83a:	370c      	adds	r7, #12
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr

0800f844 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800f844:	b480      	push	{r7}
 800f846:	b083      	sub	sp, #12
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800f852:	4618      	mov	r0, r3
 800f854:	370c      	adds	r7, #12
 800f856:	46bd      	mov	sp, r7
 800f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85c:	4770      	bx	lr

0800f85e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800f85e:	b580      	push	{r7, lr}
 800f860:	b082      	sub	sp, #8
 800f862:	af00      	add	r7, sp, #0
 800f864:	6078      	str	r0, [r7, #4]
 800f866:	460b      	mov	r3, r1
 800f868:	807b      	strh	r3, [r7, #2]
 800f86a:	4613      	mov	r3, r2
 800f86c:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	3350      	adds	r3, #80	; 0x50
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	8879      	ldrh	r1, [r7, #2]
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f87e:	b292      	uxth	r2, r2
 800f880:	1a8a      	subs	r2, r1, r2
 800f882:	b292      	uxth	r2, r2
 800f884:	b210      	sxth	r0, r2
 800f886:	8839      	ldrh	r1, [r7, #0]
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800f88e:	b292      	uxth	r2, r2
 800f890:	1a8a      	subs	r2, r1, r2
 800f892:	b292      	uxth	r2, r2
 800f894:	b212      	sxth	r2, r2
 800f896:	4601      	mov	r1, r0
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	4798      	blx	r3
    }
 800f89c:	bf00      	nop
 800f89e:	3708      	adds	r7, #8
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}

0800f8a4 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800f8a4:	b480      	push	{r7}
 800f8a6:	b083      	sub	sp, #12
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8b2:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8ba:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8c2:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800f8c4:	bf00      	nop
 800f8c6:	370c      	adds	r7, #12
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ce:	4770      	bx	lr

0800f8d0 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	60f8      	str	r0, [r7, #12]
 800f8d8:	60b9      	str	r1, [r7, #8]
 800f8da:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800f8dc:	68f8      	ldr	r0, [r7, #12]
 800f8de:	f7ff ffe1 	bl	800f8a4 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	601a      	str	r2, [r3, #0]
    }
 800f8f0:	bf00      	nop
 800f8f2:	3710      	adds	r7, #16
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b082      	sub	sp, #8
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
    {
 800f900:	4a06      	ldr	r2, [pc, #24]	; (800f91c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	601a      	str	r2, [r3, #0]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	3304      	adds	r3, #4
 800f90a:	4618      	mov	r0, r3
 800f90c:	f003 f940 	bl	8012b90 <_ZN8touchgfx9ContainerD1Ev>
    }
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	4618      	mov	r0, r3
 800f914:	3708      	adds	r7, #8
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}
 800f91a:	bf00      	nop
 800f91c:	080310ac 	.word	0x080310ac

0800f920 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
    }
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f7ff ffe5 	bl	800f8f8 <_ZN8touchgfx6ScreenD1Ev>
 800f92e:	213c      	movs	r1, #60	; 0x3c
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f01c f8ba 	bl	802baaa <_ZdlPvj>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4618      	mov	r0, r3
 800f93a:	3708      	adds	r7, #8
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}

0800f940 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
    {
    }
 800f948:	bf00      	nop
 800f94a:	370c      	adds	r7, #12
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr

0800f954 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
    {
    }
 800f95c:	bf00      	nop
 800f95e:	370c      	adds	r7, #12
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800f968:	b480      	push	{r7}
 800f96a:	b083      	sub	sp, #12
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
    {
    }
 800f970:	bf00      	nop
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr

0800f97c <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
    {
    }
 800f984:	bf00      	nop
 800f986:	370c      	adds	r7, #12
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr

0800f990 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	460b      	mov	r3, r1
 800f99a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f99c:	bf00      	nop
 800f99e:	370c      	adds	r7, #12
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a6:	4770      	bx	lr

0800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	3304      	adds	r3, #4
 800f9b6:	6839      	ldr	r1, [r7, #0]
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f006 fae9 	bl	8015f90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800f9be:	bf00      	nop
 800f9c0:	3708      	adds	r7, #8
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}

0800f9c6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800f9c6:	b580      	push	{r7, lr}
 800f9c8:	b084      	sub	sp, #16
 800f9ca:	af00      	add	r7, sp, #0
 800f9cc:	60f8      	str	r0, [r7, #12]
 800f9ce:	607b      	str	r3, [r7, #4]
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	817b      	strh	r3, [r7, #10]
 800f9d4:	4613      	mov	r3, r2
 800f9d6:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7ff ff25 	bl	800f82a <_ZNK8touchgfx8Drawable9isVisibleEv>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d008      	beq.n	800f9f8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7ff ff2b 	bl	800f844 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d001      	beq.n	800f9f8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	e000      	b.n	800f9fa <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d002      	beq.n	800fa04 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800f9fe:	68fa      	ldr	r2, [r7, #12]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	601a      	str	r2, [r3, #0]
        }
    }
 800fa04:	bf00      	nop
 800fa06:	3710      	adds	r7, #16
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}

0800fa0c <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7ff fdde 	bl	800f5d8 <_ZN8touchgfx8DrawableC1Ev>
 800fa1c:	4a03      	ldr	r2, [pc, #12]	; (800fa2c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	601a      	str	r2, [r3, #0]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4618      	mov	r0, r3
 800fa26:	3708      	adds	r7, #8
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}
 800fa2c:	0802f25c 	.word	0x0802f25c

0800fa30 <_ZN8touchgfx6WidgetD1Ev>:
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	4a05      	ldr	r2, [pc, #20]	; (800fa50 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	601a      	str	r2, [r3, #0]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7ff fdf9 	bl	800f638 <_ZN8touchgfx8DrawableD1Ev>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3708      	adds	r7, #8
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	0802f25c 	.word	0x0802f25c

0800fa54 <_ZN8touchgfx6WidgetD0Ev>:
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b082      	sub	sp, #8
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f7ff ffe7 	bl	800fa30 <_ZN8touchgfx6WidgetD1Ev>
 800fa62:	2128      	movs	r1, #40	; 0x28
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f01c f820 	bl	802baaa <_ZdlPvj>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	2326      	movs	r3, #38	; 0x26
 800fa82:	461a      	mov	r2, r3
 800fa84:	2100      	movs	r1, #0
 800fa86:	f01d f9cf 	bl	802ce28 <memset>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7ff ffbd 	bl	800fa0c <_ZN8touchgfx6WidgetC1Ev>
 800fa92:	4a09      	ldr	r2, [pc, #36]	; (800fab8 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	601a      	str	r2, [r3, #0]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	22ff      	movs	r2, #255	; 0xff
 800fa9c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	3328      	adds	r3, #40	; 0x28
 800faa4:	2100      	movs	r1, #0
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7f0 fd6e 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	4618      	mov	r0, r3
 800fab0:	3708      	adds	r7, #8
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	bf00      	nop
 800fab8:	08030aac 	.word	0x08030aac

0800fabc <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	683a      	ldr	r2, [r7, #0]
 800faca:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800facc:	bf00      	nop
 800face:	370c      	adds	r7, #12
 800fad0:	46bd      	mov	sp, r7
 800fad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad6:	4770      	bx	lr

0800fad8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bitmap), alpha(255)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	4618      	mov	r0, r3
 800fae6:	2326      	movs	r3, #38	; 0x26
 800fae8:	461a      	mov	r2, r3
 800faea:	2100      	movs	r1, #0
 800faec:	f01d f99c 	bl	802ce28 <memset>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7ff ff8a 	bl	800fa0c <_ZN8touchgfx6WidgetC1Ev>
 800faf8:	4a09      	ldr	r2, [pc, #36]	; (800fb20 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	683a      	ldr	r2, [r7, #0]
 800fb02:	8812      	ldrh	r2, [r2, #0]
 800fb04:	84da      	strh	r2, [r3, #38]	; 0x26
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	22ff      	movs	r2, #255	; 0xff
 800fb0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bitmap);
 800fb0e:	6839      	ldr	r1, [r7, #0]
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f009 fb19 	bl	8019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	08030d18 	.word	0x08030d18

0800fb24 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800fb24:	b480      	push	{r7}
 800fb26:	b083      	sub	sp, #12
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	460b      	mov	r3, r1
 800fb2e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800fb30:	4a06      	ldr	r2, [pc, #24]	; (800fb4c <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	601a      	str	r2, [r3, #0]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	887a      	ldrh	r2, [r7, #2]
 800fb3a:	809a      	strh	r2, [r3, #4]
    }
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	4618      	mov	r0, r3
 800fb40:	370c      	adds	r7, #12
 800fb42:	46bd      	mov	sp, r7
 800fb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb48:	4770      	bx	lr
 800fb4a:	bf00      	nop
 800fb4c:	0802f05c 	.word	0x0802f05c

0800fb50 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	2326      	movs	r3, #38	; 0x26
 800fb5e:	461a      	mov	r2, r3
 800fb60:	2100      	movs	r1, #0
 800fb62:	f01d f961 	bl	802ce28 <memset>
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7ff ff4f 	bl	800fa0c <_ZN8touchgfx6WidgetC1Ev>
 800fb6e:	4a14      	ldr	r2, [pc, #80]	; (800fbc0 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	601a      	str	r2, [r3, #0]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	3328      	adds	r3, #40	; 0x28
 800fb78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7ff ffd1 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	3330      	adds	r3, #48	; 0x30
 800fb86:	2100      	movs	r1, #0
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7f0 fcfd 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2200      	movs	r2, #0
 800fb92:	869a      	strh	r2, [r3, #52]	; 0x34
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	22ff      	movs	r2, #255	; 0xff
 800fb98:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2200      	movs	r2, #0
 800fba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3708      	adds	r7, #8
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}
 800fbbe:	bf00      	nop
 800fbc0:	08030a04 	.word	0x08030a04

0800fbc4 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b082      	sub	sp, #8
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	4a08      	ldr	r2, [pc, #32]	; (800fbf0 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	601a      	str	r2, [r3, #0]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	3328      	adds	r3, #40	; 0x28
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7fe fe30 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7ff ff26 	bl	800fa30 <_ZN8touchgfx6WidgetD1Ev>
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3708      	adds	r7, #8
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}
 800fbee:	bf00      	nop
 800fbf0:	08030a04 	.word	0x08030a04

0800fbf4 <_ZN8touchgfx8TextAreaD0Ev>:
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f7ff ffe1 	bl	800fbc4 <_ZN8touchgfx8TextAreaD1Ev>
 800fc02:	213c      	movs	r1, #60	; 0x3c
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f01b ff50 	bl	802baaa <_ZdlPvj>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3708      	adds	r7, #8
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}

0800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7ff ff96 	bl	800fb50 <_ZN8touchgfx8TextAreaC1Ev>
 800fc24:	4a05      	ldr	r2, [pc, #20]	; (800fc3c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	601a      	str	r2, [r3, #0]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	4618      	mov	r0, r3
 800fc34:	3708      	adds	r7, #8
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
 800fc3a:	bf00      	nop
 800fc3c:	08030c70 	.word	0x08030c70

0800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800fc40:	b480      	push	{r7}
 800fc42:	b083      	sub	sp, #12
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	683a      	ldr	r2, [r7, #0]
 800fc4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fc50:	bf00      	nop
 800fc52:	370c      	adds	r7, #12
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr

0800fc5c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	4a05      	ldr	r2, [pc, #20]	; (800fc7c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	601a      	str	r2, [r3, #0]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7ff fe43 	bl	800f8f8 <_ZN8touchgfx6ScreenD1Ev>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	4618      	mov	r0, r3
 800fc76:	3708      	adds	r7, #8
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}
 800fc7c:	0802f228 	.word	0x0802f228

0800fc80 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f7ff ffe7 	bl	800fc5c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800fc8e:	2140      	movs	r1, #64	; 0x40
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f01b ff0a 	bl	802baaa <_ZdlPvj>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3708      	adds	r7, #8
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	4a75      	ldr	r2, [pc, #468]	; (800fe80 <_ZN15Screen1ViewBaseD1Ev+0x1e0>)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	601a      	str	r2, [r3, #0]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f503 631f 	add.w	r3, r3, #2544	; 0x9f0
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f002 ffaf 	bl	8012c18 <_ZN8touchgfx5ImageD1Ev>
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f003 f87f 	bl	8012dc4 <_ZN8touchgfx5GaugeD1Ev>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 800fccc:	4618      	mov	r0, r3
 800fcce:	f002 ffc5 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f002 ffbf 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 800fce4:	4618      	mov	r0, r3
 800fce6:	f002 ffb9 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f002 ffb3 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f002 ffad 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f002 ffa7 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 800fd14:	4618      	mov	r0, r3
 800fd16:	f002 ffa1 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800fd20:	4618      	mov	r0, r3
 800fd22:	f002 ff9b 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f002 ff95 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f002 ff8f 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 800fd44:	4618      	mov	r0, r3
 800fd46:	f002 ff89 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800fd50:	4618      	mov	r0, r3
 800fd52:	f002 ff83 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f002 ff7d 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f002 ff77 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800fd74:	4618      	mov	r0, r3
 800fd76:	f002 ff71 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 800fd80:	4618      	mov	r0, r3
 800fd82:	f002 ff6b 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f002 ff65 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f002 ff5f 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800fda4:	4618      	mov	r0, r3
 800fda6:	f002 ff59 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f002 ff53 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f002 ff4d 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f002 ff47 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f002 ff41 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800fde0:	4618      	mov	r0, r3
 800fde2:	f002 ff3b 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800fdec:	4618      	mov	r0, r3
 800fdee:	f002 ff13 	bl	8012c18 <_ZN8touchgfx5ImageD1Ev>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f002 ff0d 	bl	8012c18 <_ZN8touchgfx5ImageD1Ev>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800fe04:	4618      	mov	r0, r3
 800fe06:	f002 ff07 	bl	8012c18 <_ZN8touchgfx5ImageD1Ev>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800fe10:	4618      	mov	r0, r3
 800fe12:	f002 ff01 	bl	8012c18 <_ZN8touchgfx5ImageD1Ev>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f002 fefb 	bl	8012c18 <_ZN8touchgfx5ImageD1Ev>
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f002 fef5 	bl	8012c18 <_ZN8touchgfx5ImageD1Ev>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800fe34:	4618      	mov	r0, r3
 800fe36:	f002 feef 	bl	8012c18 <_ZN8touchgfx5ImageD1Ev>
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	33f0      	adds	r3, #240	; 0xf0
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f002 feea 	bl	8012c18 <_ZN8touchgfx5ImageD1Ev>
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	33c4      	adds	r3, #196	; 0xc4
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f002 fee5 	bl	8012c18 <_ZN8touchgfx5ImageD1Ev>
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	3398      	adds	r3, #152	; 0x98
 800fe52:	4618      	mov	r0, r3
 800fe54:	f002 fee0 	bl	8012c18 <_ZN8touchgfx5ImageD1Ev>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	336c      	adds	r3, #108	; 0x6c
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f002 fedb 	bl	8012c18 <_ZN8touchgfx5ImageD1Ev>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	3340      	adds	r3, #64	; 0x40
 800fe66:	4618      	mov	r0, r3
 800fe68:	f002 feb4 	bl	8012bd4 <_ZN8touchgfx3BoxD1Ev>
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7ff fef4 	bl	800fc5c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	4618      	mov	r0, r3
 800fe78:	3708      	adds	r7, #8
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	bf00      	nop
 800fe80:	0802f1f4 	.word	0x0802f1f4

0800fe84 <_ZN15Screen1ViewBaseD0Ev>:
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b082      	sub	sp, #8
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f7ff ff07 	bl	800fca0 <_ZN15Screen1ViewBaseD1Ev>
 800fe92:	f640 515c 	movw	r1, #3420	; 0xd5c
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f01b fe07 	bl	802baaa <_ZdlPvj>
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3708      	adds	r7, #8
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}
	...

0800fea8 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 800fea8:	b590      	push	{r4, r7, lr}
 800feaa:	f2ad 4d9c 	subw	sp, sp, #1180	; 0x49c
 800feae:	af02      	add	r7, sp, #8
 800feb0:	1d3b      	adds	r3, r7, #4
 800feb2:	6018      	str	r0, [r3, #0]
 800feb4:	1d3b      	adds	r3, r7, #4
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	4618      	mov	r0, r3
 800feba:	f002 fe53 	bl	8012b64 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800febe:	4ae5      	ldr	r2, [pc, #916]	; (8010254 <_ZN15Screen1ViewBaseC1Ev+0x3ac>)
 800fec0:	1d3b      	adds	r3, r7, #4
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	601a      	str	r2, [r3, #0]
 800fec6:	1d3b      	adds	r3, r7, #4
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	3340      	adds	r3, #64	; 0x40
 800fecc:	4618      	mov	r0, r3
 800fece:	f7ff fdd1 	bl	800fa74 <_ZN8touchgfx3BoxC1Ev>
 800fed2:	1d3b      	adds	r3, r7, #4
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800feda:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fede:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7ff fb67 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 800fee8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800feec:	4619      	mov	r1, r3
 800feee:	4620      	mov	r0, r4
 800fef0:	f7ff fdf2 	bl	800fad8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800fef4:	1d3b      	adds	r3, r7, #4
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800fefc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ff00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7ff fb56 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 800ff0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ff0e:	4619      	mov	r1, r3
 800ff10:	4620      	mov	r0, r4
 800ff12:	f7ff fde1 	bl	800fad8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ff16:	1d3b      	adds	r3, r7, #4
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 800ff1e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ff22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7ff fb45 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 800ff2c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ff30:	4619      	mov	r1, r3
 800ff32:	4620      	mov	r0, r4
 800ff34:	f7ff fdd0 	bl	800fad8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ff38:	1d3b      	adds	r3, r7, #4
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800ff40:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ff44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7ff fb34 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 800ff4e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ff52:	4619      	mov	r1, r3
 800ff54:	4620      	mov	r0, r4
 800ff56:	f7ff fdbf 	bl	800fad8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ff5a:	1d3b      	adds	r3, r7, #4
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 800ff62:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ff66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7ff fb23 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 800ff70:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ff74:	4619      	mov	r1, r3
 800ff76:	4620      	mov	r0, r4
 800ff78:	f7ff fdae 	bl	800fad8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ff7c:	1d3b      	adds	r3, r7, #4
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 800ff84:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ff88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7ff fb12 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 800ff92:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ff96:	4619      	mov	r1, r3
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f7ff fd9d 	bl	800fad8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ff9e:	1d3b      	adds	r3, r7, #4
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 800ffa6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ffaa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7ff fb01 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 800ffb4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ffb8:	4619      	mov	r1, r3
 800ffba:	4620      	mov	r0, r4
 800ffbc:	f7ff fd8c 	bl	800fad8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ffc0:	1d3b      	adds	r3, r7, #4
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 800ffc8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ffcc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7ff faf0 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 800ffd6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ffda:	4619      	mov	r1, r3
 800ffdc:	4620      	mov	r0, r4
 800ffde:	f7ff fd7b 	bl	800fad8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ffe2:	1d3b      	adds	r3, r7, #4
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 800ffea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ffee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7ff fadf 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 800fff8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800fffc:	4619      	mov	r1, r3
 800fffe:	4620      	mov	r0, r4
 8010000:	f7ff fd6a 	bl	800fad8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010004:	1d3b      	adds	r3, r7, #4
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 801000c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010010:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010014:	4618      	mov	r0, r3
 8010016:	f7ff face 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 801001a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801001e:	4619      	mov	r1, r3
 8010020:	4620      	mov	r0, r4
 8010022:	f7ff fd59 	bl	800fad8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010026:	1d3b      	adds	r3, r7, #4
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f503 7409 	add.w	r4, r3, #548	; 0x224
 801002e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010032:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010036:	4618      	mov	r0, r3
 8010038:	f7ff fabd 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 801003c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010040:	4619      	mov	r1, r3
 8010042:	4620      	mov	r0, r4
 8010044:	f7ff fd48 	bl	800fad8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010048:	1d3b      	adds	r3, r7, #4
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8010050:	4618      	mov	r0, r3
 8010052:	f7ff fddf 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010056:	1d3b      	adds	r3, r7, #4
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 801005e:	4618      	mov	r0, r3
 8010060:	f7ff fdd8 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010064:	1d3b      	adds	r3, r7, #4
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 801006c:	4618      	mov	r0, r3
 801006e:	f7ff fdd1 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010072:	1d3b      	adds	r3, r7, #4
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	f503 7344 	add.w	r3, r3, #784	; 0x310
 801007a:	4618      	mov	r0, r3
 801007c:	f7ff fdca 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010080:	1d3b      	adds	r3, r7, #4
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8010088:	4618      	mov	r0, r3
 801008a:	f7ff fdc3 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801008e:	1d3b      	adds	r3, r7, #4
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8010096:	4618      	mov	r0, r3
 8010098:	f7ff fdbc 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801009c:	1d3b      	adds	r3, r7, #4
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7ff fdb5 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80100aa:	1d3b      	adds	r3, r7, #4
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7ff fdae 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80100b8:	1d3b      	adds	r3, r7, #4
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7ff fda7 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80100c6:	1d3b      	adds	r3, r7, #4
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7ff fda0 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80100d4:	1d3b      	adds	r3, r7, #4
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 80100dc:	4618      	mov	r0, r3
 80100de:	f7ff fd99 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80100e2:	1d3b      	adds	r3, r7, #4
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7ff fd92 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80100f0:	1d3b      	adds	r3, r7, #4
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7ff fd8b 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80100fe:	1d3b      	adds	r3, r7, #4
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8010106:	4618      	mov	r0, r3
 8010108:	f7ff fd84 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801010c:	1d3b      	adds	r3, r7, #4
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8010114:	4618      	mov	r0, r3
 8010116:	f7ff fd7d 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801011a:	1d3b      	adds	r3, r7, #4
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8010122:	4618      	mov	r0, r3
 8010124:	f7ff fd76 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010128:	1d3b      	adds	r3, r7, #4
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8010130:	4618      	mov	r0, r3
 8010132:	f7ff fd6f 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010136:	1d3b      	adds	r3, r7, #4
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 801013e:	4618      	mov	r0, r3
 8010140:	f7ff fd68 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010144:	1d3b      	adds	r3, r7, #4
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 801014c:	4618      	mov	r0, r3
 801014e:	f7ff fd61 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010152:	1d3b      	adds	r3, r7, #4
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 801015a:	4618      	mov	r0, r3
 801015c:	f7ff fd5a 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010160:	1d3b      	adds	r3, r7, #4
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8010168:	4618      	mov	r0, r3
 801016a:	f7ff fd53 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801016e:	1d3b      	adds	r3, r7, #4
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8010176:	4618      	mov	r0, r3
 8010178:	f7ff fd4c 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801017c:	1d3b      	adds	r3, r7, #4
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8010184:	4618      	mov	r0, r3
 8010186:	f7ff fd45 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801018a:	1d3b      	adds	r3, r7, #4
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8010192:	4618      	mov	r0, r3
 8010194:	f7ff fd3e 	bl	800fc14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010198:	1d3b      	adds	r3, r7, #4
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80101a0:	4618      	mov	r0, r3
 80101a2:	f008 fd89 	bl	8018cb8 <_ZN8touchgfx5GaugeC1Ev>
 80101a6:	1d3b      	adds	r3, r7, #4
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	f503 641f 	add.w	r4, r3, #2544	; 0x9f0
 80101ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80101b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7ff f9fd 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 80101bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80101c0:	4619      	mov	r1, r3
 80101c2:	4620      	mov	r0, r4
 80101c4:	f7ff fc88 	bl	800fad8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
{

    __background.setPosition(0, 0, 800, 480);
 80101c8:	1d3b      	adds	r3, r7, #4
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80101d0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80101d4:	9300      	str	r3, [sp, #0]
 80101d6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80101da:	2200      	movs	r2, #0
 80101dc:	2100      	movs	r1, #0
 80101de:	f7ff fa56 	bl	800f68e <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80101e2:	1d3b      	adds	r3, r7, #4
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80101ea:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80101ee:	2200      	movs	r2, #0
 80101f0:	701a      	strb	r2, [r3, #0]
 80101f2:	f207 23af 	addw	r3, r7, #687	; 0x2af
 80101f6:	2200      	movs	r2, #0
 80101f8:	701a      	strb	r2, [r3, #0]
 80101fa:	f207 23ae 	addw	r3, r7, #686	; 0x2ae
 80101fe:	2200      	movs	r2, #0
 8010200:	701a      	strb	r2, [r3, #0]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8010202:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8010206:	781b      	ldrb	r3, [r3, #0]
 8010208:	041b      	lsls	r3, r3, #16
 801020a:	461a      	mov	r2, r3
 801020c:	f207 23af 	addw	r3, r7, #687	; 0x2af
 8010210:	781b      	ldrb	r3, [r3, #0]
 8010212:	021b      	lsls	r3, r3, #8
 8010214:	431a      	orrs	r2, r3
 8010216:	f207 23ae 	addw	r3, r7, #686	; 0x2ae
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	4313      	orrs	r3, r2
 801021e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010222:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8010226:	4611      	mov	r1, r2
 8010228:	4618      	mov	r0, r3
 801022a:	f7f0 f9ad 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 801022e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	4619      	mov	r1, r3
 8010236:	4620      	mov	r0, r4
 8010238:	f7ff fc40 	bl	800fabc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(0, 0);
 801023c:	1d3b      	adds	r3, r7, #4
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	336c      	adds	r3, #108	; 0x6c
 8010242:	2200      	movs	r2, #0
 8010244:	2100      	movs	r1, #0
 8010246:	4618      	mov	r0, r3
 8010248:	f7ff fa60 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_RACE_ID));
 801024c:	1d3b      	adds	r3, r7, #4
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	e002      	b.n	8010258 <_ZN15Screen1ViewBaseC1Ev+0x3b0>
 8010252:	bf00      	nop
 8010254:	0802f1f4 	.word	0x0802f1f4
 8010258:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 801025c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010260:	210b      	movs	r1, #11
 8010262:	4618      	mov	r0, r3
 8010264:	f7ff f9a7 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 8010268:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801026c:	4619      	mov	r1, r3
 801026e:	4620      	mov	r0, r4
 8010270:	f008 ff6a 	bl	8019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indLeft.setXY(202, 27);
 8010274:	1d3b      	adds	r3, r7, #4
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	3398      	adds	r3, #152	; 0x98
 801027a:	221b      	movs	r2, #27
 801027c:	21ca      	movs	r1, #202	; 0xca
 801027e:	4618      	mov	r0, r3
 8010280:	f7ff fa44 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    indLeft.setBitmap(touchgfx::Bitmap(BITMAP_INDLEFT_ID));
 8010284:	1d3b      	adds	r3, r7, #4
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	f103 0498 	add.w	r4, r3, #152	; 0x98
 801028c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010290:	2105      	movs	r1, #5
 8010292:	4618      	mov	r0, r3
 8010294:	f7ff f98f 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 8010298:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801029c:	4619      	mov	r1, r3
 801029e:	4620      	mov	r0, r4
 80102a0:	f008 ff52 	bl	8019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indRight.setXY(561, 26);
 80102a4:	1d3b      	adds	r3, r7, #4
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	33c4      	adds	r3, #196	; 0xc4
 80102aa:	221a      	movs	r2, #26
 80102ac:	f240 2131 	movw	r1, #561	; 0x231
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7ff fa2b 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    indRight.setBitmap(touchgfx::Bitmap(BITMAP_INDRIGHT_ID));
 80102b6:	1d3b      	adds	r3, r7, #4
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 80102be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80102c2:	2109      	movs	r1, #9
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7ff f976 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 80102ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80102ce:	4619      	mov	r1, r3
 80102d0:	4620      	mov	r0, r4
 80102d2:	f008 ff39 	bl	8019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indHigh.setXY(282, 222);
 80102d6:	1d3b      	adds	r3, r7, #4
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	33f0      	adds	r3, #240	; 0xf0
 80102dc:	22de      	movs	r2, #222	; 0xde
 80102de:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7ff fa12 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    indHigh.setBitmap(touchgfx::Bitmap(BITMAP_INDHIGH_ID));
 80102e8:	1d3b      	adds	r3, r7, #4
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80102f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80102f4:	2104      	movs	r1, #4
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7ff f95d 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 80102fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010300:	4619      	mov	r1, r3
 8010302:	4620      	mov	r0, r4
 8010304:	f008 ff20 	bl	8019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indFuel.setXY(451, 150);
 8010308:	1d3b      	adds	r3, r7, #4
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010310:	2296      	movs	r2, #150	; 0x96
 8010312:	f240 11c3 	movw	r1, #451	; 0x1c3
 8010316:	4618      	mov	r0, r3
 8010318:	f7ff f9f8 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    indFuel.setBitmap(touchgfx::Bitmap(BITMAP_INDFUEL_ID));
 801031c:	1d3b      	adds	r3, r7, #4
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 8010324:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010328:	2103      	movs	r1, #3
 801032a:	4618      	mov	r0, r3
 801032c:	f7ff f943 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 8010330:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010334:	4619      	mov	r1, r3
 8010336:	4620      	mov	r0, r4
 8010338:	f008 ff06 	bl	8019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indOil.setXY(298, 281);
 801033c:	1d3b      	adds	r3, r7, #4
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8010344:	f240 1219 	movw	r2, #281	; 0x119
 8010348:	f44f 7195 	mov.w	r1, #298	; 0x12a
 801034c:	4618      	mov	r0, r3
 801034e:	f7ff f9dd 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    indOil.setBitmap(touchgfx::Bitmap(BITMAP_INDOIL_ID));
 8010352:	1d3b      	adds	r3, r7, #4
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 801035a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801035e:	2107      	movs	r1, #7
 8010360:	4618      	mov	r0, r3
 8010362:	f7ff f928 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 8010366:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801036a:	4619      	mov	r1, r3
 801036c:	4620      	mov	r0, r4
 801036e:	f008 feeb 	bl	8019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indBatt.setXY(313, 152);
 8010372:	1d3b      	adds	r3, r7, #4
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801037a:	2298      	movs	r2, #152	; 0x98
 801037c:	f240 1139 	movw	r1, #313	; 0x139
 8010380:	4618      	mov	r0, r3
 8010382:	f7ff f9c3 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    indBatt.setBitmap(touchgfx::Bitmap(BITMAP_INDBATT_ID));
 8010386:	1d3b      	adds	r3, r7, #4
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 801038e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010392:	2100      	movs	r1, #0
 8010394:	4618      	mov	r0, r3
 8010396:	f7ff f90e 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 801039a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801039e:	4619      	mov	r1, r3
 80103a0:	4620      	mov	r0, r4
 80103a2:	f008 fed1 	bl	8019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indPark.setXY(384, 123);
 80103a6:	1d3b      	adds	r3, r7, #4
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80103ae:	227b      	movs	r2, #123	; 0x7b
 80103b0:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7ff f9a9 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    indPark.setBitmap(touchgfx::Bitmap(BITMAP_INDPARK_ID));
 80103ba:	1d3b      	adds	r3, r7, #4
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 80103c2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80103c6:	2108      	movs	r1, #8
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7ff f8f4 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 80103ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80103d2:	4619      	mov	r1, r3
 80103d4:	4620      	mov	r0, r4
 80103d6:	f008 feb7 	bl	8019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indDTC.setXY(383, 169);
 80103da:	1d3b      	adds	r3, r7, #4
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80103e2:	22a9      	movs	r2, #169	; 0xa9
 80103e4:	f240 117f 	movw	r1, #383	; 0x17f
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7ff f98f 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    indDTC.setBitmap(touchgfx::Bitmap(BITMAP_INDDTC_ID));
 80103ee:	1d3b      	adds	r3, r7, #4
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 80103f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80103fa:	2101      	movs	r1, #1
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7ff f8da 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 8010402:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010406:	4619      	mov	r1, r3
 8010408:	4620      	mov	r0, r4
 801040a:	f008 fe9d 	bl	8019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indECT.setXY(339, 314);
 801040e:	1d3b      	adds	r3, r7, #4
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8010416:	f44f 729d 	mov.w	r2, #314	; 0x13a
 801041a:	f240 1153 	movw	r1, #339	; 0x153
 801041e:	4618      	mov	r0, r3
 8010420:	f7ff f974 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    indECT.setBitmap(touchgfx::Bitmap(BITMAP_INDECT_ID));
 8010424:	1d3b      	adds	r3, r7, #4
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 801042c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8010430:	2102      	movs	r1, #2
 8010432:	4618      	mov	r0, r3
 8010434:	f7ff f8bf 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 8010438:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801043c:	4619      	mov	r1, r3
 801043e:	4620      	mov	r0, r4
 8010440:	f008 fe82 	bl	8019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indLow.setXY(340, 224);
 8010444:	1d3b      	adds	r3, r7, #4
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f503 7309 	add.w	r3, r3, #548	; 0x224
 801044c:	22e0      	movs	r2, #224	; 0xe0
 801044e:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8010452:	4618      	mov	r0, r3
 8010454:	f7ff f95a 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    indLow.setBitmap(touchgfx::Bitmap(BITMAP_INDLOW_ID));
 8010458:	1d3b      	adds	r3, r7, #4
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	f503 7409 	add.w	r4, r3, #548	; 0x224
 8010460:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8010464:	2106      	movs	r1, #6
 8010466:	4618      	mov	r0, r3
 8010468:	f7ff f8a5 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 801046c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8010470:	4619      	mov	r1, r3
 8010472:	4620      	mov	r0, r4
 8010474:	f008 fe68 	bl	8019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    map_value.setXY(747, 25);
 8010478:	1d3b      	adds	r3, r7, #4
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8010480:	2219      	movs	r2, #25
 8010482:	f240 21eb 	movw	r1, #747	; 0x2eb
 8010486:	4618      	mov	r0, r3
 8010488:	f7ff f940 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    map_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801048c:	1d3b      	adds	r3, r7, #4
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	f503 7414 	add.w	r4, r3, #592	; 0x250
 8010494:	f207 23b3 	addw	r3, r7, #691	; 0x2b3
 8010498:	22ff      	movs	r2, #255	; 0xff
 801049a:	701a      	strb	r2, [r3, #0]
 801049c:	f207 23b2 	addw	r3, r7, #690	; 0x2b2
 80104a0:	22ff      	movs	r2, #255	; 0xff
 80104a2:	701a      	strb	r2, [r3, #0]
 80104a4:	f207 23b1 	addw	r3, r7, #689	; 0x2b1
 80104a8:	22ff      	movs	r2, #255	; 0xff
 80104aa:	701a      	strb	r2, [r3, #0]
 80104ac:	f207 23b3 	addw	r3, r7, #691	; 0x2b3
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	041b      	lsls	r3, r3, #16
 80104b4:	461a      	mov	r2, r3
 80104b6:	f207 23b2 	addw	r3, r7, #690	; 0x2b2
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	021b      	lsls	r3, r3, #8
 80104be:	431a      	orrs	r2, r3
 80104c0:	f207 23b1 	addw	r3, r7, #689	; 0x2b1
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	4313      	orrs	r3, r2
 80104c8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80104cc:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80104d0:	4611      	mov	r1, r2
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7f0 f858 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 80104d8:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	461a      	mov	r2, r3
 80104e0:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80104e4:	601c      	str	r4, [r3, #0]
 80104e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80104ea:	601a      	str	r2, [r3, #0]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80104ec:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80104f6:	6812      	ldr	r2, [r2, #0]
 80104f8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80104fa:	bf00      	nop
    map_value.setLinespacing(0);
 80104fc:	1d3b      	adds	r3, r7, #4
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	f503 7214 	add.w	r2, r3, #592	; 0x250
 8010504:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8010508:	601a      	str	r2, [r3, #0]
 801050a:	f207 23ba 	addw	r3, r7, #698	; 0x2ba
 801050e:	2200      	movs	r2, #0
 8010510:	801a      	strh	r2, [r3, #0]
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8010512:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	f207 22ba 	addw	r2, r7, #698	; 0x2ba
 801051c:	8812      	ldrh	r2, [r2, #0]
 801051e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010520:	bf00      	nop
    Unicode::snprintf(map_valueBuffer, MAP_VALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID39).getText());
 8010522:	1d3b      	adds	r3, r7, #4
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	f603 241c 	addw	r4, r3, #2588	; 0xa1c
 801052a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801052e:	2119      	movs	r1, #25
 8010530:	4618      	mov	r0, r3
 8010532:	f7ff faf7 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8010536:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 801053a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801053e:	601a      	str	r2, [r3, #0]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010540:	4bc5      	ldr	r3, [pc, #788]	; (8010858 <_ZN15Screen1ViewBaseC1Ev+0x9b0>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d105      	bne.n	8010554 <_ZN15Screen1ViewBaseC1Ev+0x6ac>
 8010548:	4bc4      	ldr	r3, [pc, #784]	; (801085c <_ZN15Screen1ViewBaseC1Ev+0x9b4>)
 801054a:	4ac5      	ldr	r2, [pc, #788]	; (8010860 <_ZN15Screen1ViewBaseC1Ev+0x9b8>)
 801054c:	21ae      	movs	r1, #174	; 0xae
 801054e:	48c5      	ldr	r0, [pc, #788]	; (8010864 <_ZN15Screen1ViewBaseC1Ev+0x9bc>)
 8010550:	f01c f8ca 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010554:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	889a      	ldrh	r2, [r3, #4]
 801055c:	4bc2      	ldr	r3, [pc, #776]	; (8010868 <_ZN15Screen1ViewBaseC1Ev+0x9c0>)
 801055e:	881b      	ldrh	r3, [r3, #0]
 8010560:	429a      	cmp	r2, r3
 8010562:	d305      	bcc.n	8010570 <_ZN15Screen1ViewBaseC1Ev+0x6c8>
 8010564:	4bc1      	ldr	r3, [pc, #772]	; (801086c <_ZN15Screen1ViewBaseC1Ev+0x9c4>)
 8010566:	4abe      	ldr	r2, [pc, #760]	; (8010860 <_ZN15Screen1ViewBaseC1Ev+0x9b8>)
 8010568:	21af      	movs	r1, #175	; 0xaf
 801056a:	48be      	ldr	r0, [pc, #760]	; (8010864 <_ZN15Screen1ViewBaseC1Ev+0x9bc>)
 801056c:	f01c f8bc 	bl	802c6e8 <__assert_func>
    }
 8010570:	bf00      	nop
        return texts->getText(typedTextId);
 8010572:	4bbf      	ldr	r3, [pc, #764]	; (8010870 <_ZN15Screen1ViewBaseC1Ev+0x9c8>)
 8010574:	681a      	ldr	r2, [r3, #0]
 8010576:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801057a:	889b      	ldrh	r3, [r3, #4]
 801057c:	4619      	mov	r1, r3
 801057e:	4610      	mov	r0, r2
 8010580:	f002 fdf4 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8010584:	4603      	mov	r3, r0
 8010586:	bf00      	nop
 8010588:	4aba      	ldr	r2, [pc, #744]	; (8010874 <_ZN15Screen1ViewBaseC1Ev+0x9cc>)
 801058a:	2120      	movs	r1, #32
 801058c:	4620      	mov	r0, r4
 801058e:	f00d fc95 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010592:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8010596:	4618      	mov	r0, r3
 8010598:	f7fe f950 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    map_value.setWildcard(map_valueBuffer);
 801059c:	1d3b      	adds	r3, r7, #4
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	f503 7214 	add.w	r2, r3, #592	; 0x250
 80105a4:	1d3b      	adds	r3, r7, #4
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 80105ac:	4619      	mov	r1, r3
 80105ae:	4610      	mov	r0, r2
 80105b0:	f7ff fb46 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_value.resizeToCurrentText();
 80105b4:	1d3b      	adds	r3, r7, #4
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80105bc:	4618      	mov	r0, r3
 80105be:	f008 fa69 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 80105c2:	1d3b      	adds	r3, r7, #4
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	f503 7414 	add.w	r4, r3, #592	; 0x250
 80105ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80105ce:	2117      	movs	r1, #23
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7ff faa7 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 80105d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80105da:	4619      	mov	r1, r3
 80105dc:	4620      	mov	r0, r4
 80105de:	f008 fa76 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80105e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7fe f928 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    map_label.setXY(696, 82);
 80105ec:	1d3b      	adds	r3, r7, #4
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80105f4:	2252      	movs	r2, #82	; 0x52
 80105f6:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7ff f886 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    map_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010600:	1d3b      	adds	r3, r7, #4
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	f503 7424 	add.w	r4, r3, #656	; 0x290
 8010608:	f207 23c7 	addw	r3, r7, #711	; 0x2c7
 801060c:	22ff      	movs	r2, #255	; 0xff
 801060e:	701a      	strb	r2, [r3, #0]
 8010610:	f207 23c6 	addw	r3, r7, #710	; 0x2c6
 8010614:	22ff      	movs	r2, #255	; 0xff
 8010616:	701a      	strb	r2, [r3, #0]
 8010618:	f207 23c5 	addw	r3, r7, #709	; 0x2c5
 801061c:	22ff      	movs	r2, #255	; 0xff
 801061e:	701a      	strb	r2, [r3, #0]
 8010620:	f207 23c7 	addw	r3, r7, #711	; 0x2c7
 8010624:	781b      	ldrb	r3, [r3, #0]
 8010626:	041b      	lsls	r3, r3, #16
 8010628:	461a      	mov	r2, r3
 801062a:	f207 23c6 	addw	r3, r7, #710	; 0x2c6
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	021b      	lsls	r3, r3, #8
 8010632:	431a      	orrs	r2, r3
 8010634:	f207 23c5 	addw	r3, r7, #709	; 0x2c5
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	4313      	orrs	r3, r2
 801063c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010640:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8010644:	4611      	mov	r1, r2
 8010646:	4618      	mov	r0, r3
 8010648:	f7ef ff9e 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 801064c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	461a      	mov	r2, r3
 8010654:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8010658:	601c      	str	r4, [r3, #0]
 801065a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801065e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8010660:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801066a:	6812      	ldr	r2, [r2, #0]
 801066c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801066e:	bf00      	nop
    map_label.setLinespacing(0);
 8010670:	1d3b      	adds	r3, r7, #4
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	f503 7224 	add.w	r2, r3, #656	; 0x290
 8010678:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 801067c:	601a      	str	r2, [r3, #0]
 801067e:	f207 23ce 	addw	r3, r7, #718	; 0x2ce
 8010682:	2200      	movs	r2, #0
 8010684:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8010686:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	f207 22ce 	addw	r2, r7, #718	; 0x2ce
 8010690:	8812      	ldrh	r2, [r2, #0]
 8010692:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010694:	bf00      	nop
    Unicode::snprintf(map_labelBuffer, MAP_LABEL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID40).getText());
 8010696:	1d3b      	adds	r3, r7, #4
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	f603 245c 	addw	r4, r3, #2652	; 0xa5c
 801069e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80106a2:	211a      	movs	r1, #26
 80106a4:	4618      	mov	r0, r3
 80106a6:	f7ff fa3d 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 80106aa:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80106ae:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80106b2:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80106b4:	4b68      	ldr	r3, [pc, #416]	; (8010858 <_ZN15Screen1ViewBaseC1Ev+0x9b0>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d105      	bne.n	80106c8 <_ZN15Screen1ViewBaseC1Ev+0x820>
 80106bc:	4b67      	ldr	r3, [pc, #412]	; (801085c <_ZN15Screen1ViewBaseC1Ev+0x9b4>)
 80106be:	4a68      	ldr	r2, [pc, #416]	; (8010860 <_ZN15Screen1ViewBaseC1Ev+0x9b8>)
 80106c0:	21ae      	movs	r1, #174	; 0xae
 80106c2:	4868      	ldr	r0, [pc, #416]	; (8010864 <_ZN15Screen1ViewBaseC1Ev+0x9bc>)
 80106c4:	f01c f810 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80106c8:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	889a      	ldrh	r2, [r3, #4]
 80106d0:	4b65      	ldr	r3, [pc, #404]	; (8010868 <_ZN15Screen1ViewBaseC1Ev+0x9c0>)
 80106d2:	881b      	ldrh	r3, [r3, #0]
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d305      	bcc.n	80106e4 <_ZN15Screen1ViewBaseC1Ev+0x83c>
 80106d8:	4b64      	ldr	r3, [pc, #400]	; (801086c <_ZN15Screen1ViewBaseC1Ev+0x9c4>)
 80106da:	4a61      	ldr	r2, [pc, #388]	; (8010860 <_ZN15Screen1ViewBaseC1Ev+0x9b8>)
 80106dc:	21af      	movs	r1, #175	; 0xaf
 80106de:	4861      	ldr	r0, [pc, #388]	; (8010864 <_ZN15Screen1ViewBaseC1Ev+0x9bc>)
 80106e0:	f01c f802 	bl	802c6e8 <__assert_func>
    }
 80106e4:	bf00      	nop
        return texts->getText(typedTextId);
 80106e6:	4b62      	ldr	r3, [pc, #392]	; (8010870 <_ZN15Screen1ViewBaseC1Ev+0x9c8>)
 80106e8:	681a      	ldr	r2, [r3, #0]
 80106ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80106ee:	889b      	ldrh	r3, [r3, #4]
 80106f0:	4619      	mov	r1, r3
 80106f2:	4610      	mov	r0, r2
 80106f4:	f002 fd3a 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 80106f8:	4603      	mov	r3, r0
 80106fa:	bf00      	nop
 80106fc:	4a5d      	ldr	r2, [pc, #372]	; (8010874 <_ZN15Screen1ViewBaseC1Ev+0x9cc>)
 80106fe:	210a      	movs	r1, #10
 8010700:	4620      	mov	r0, r4
 8010702:	f00d fbdb 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010706:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801070a:	4618      	mov	r0, r3
 801070c:	f7fe f896 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    map_label.setWildcard(map_labelBuffer);
 8010710:	1d3b      	adds	r3, r7, #4
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f503 7224 	add.w	r2, r3, #656	; 0x290
 8010718:	1d3b      	adds	r3, r7, #4
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8010720:	4619      	mov	r1, r3
 8010722:	4610      	mov	r0, r2
 8010724:	f7ff fa8c 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_label.resizeToCurrentText();
 8010728:	1d3b      	adds	r3, r7, #4
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8010730:	4618      	mov	r0, r3
 8010732:	f008 f9af 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 8010736:	1d3b      	adds	r3, r7, #4
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	f503 7424 	add.w	r4, r3, #656	; 0x290
 801073e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8010742:	2115      	movs	r1, #21
 8010744:	4618      	mov	r0, r3
 8010746:	f7ff f9ed 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 801074a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801074e:	4619      	mov	r1, r3
 8010750:	4620      	mov	r0, r4
 8010752:	f008 f9bc 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010756:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801075a:	4618      	mov	r0, r3
 801075c:	f7fe f86e 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    map_units.setXY(610, 82);
 8010760:	1d3b      	adds	r3, r7, #4
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8010768:	2252      	movs	r2, #82	; 0x52
 801076a:	f240 2162 	movw	r1, #610	; 0x262
 801076e:	4618      	mov	r0, r3
 8010770:	f7fe ffcc 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    map_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010774:	1d3b      	adds	r3, r7, #4
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	f503 7434 	add.w	r4, r3, #720	; 0x2d0
 801077c:	f207 23db 	addw	r3, r7, #731	; 0x2db
 8010780:	22ff      	movs	r2, #255	; 0xff
 8010782:	701a      	strb	r2, [r3, #0]
 8010784:	f207 23da 	addw	r3, r7, #730	; 0x2da
 8010788:	22ff      	movs	r2, #255	; 0xff
 801078a:	701a      	strb	r2, [r3, #0]
 801078c:	f207 23d9 	addw	r3, r7, #729	; 0x2d9
 8010790:	22ff      	movs	r2, #255	; 0xff
 8010792:	701a      	strb	r2, [r3, #0]
 8010794:	f207 23db 	addw	r3, r7, #731	; 0x2db
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	041b      	lsls	r3, r3, #16
 801079c:	461a      	mov	r2, r3
 801079e:	f207 23da 	addw	r3, r7, #730	; 0x2da
 80107a2:	781b      	ldrb	r3, [r3, #0]
 80107a4:	021b      	lsls	r3, r3, #8
 80107a6:	431a      	orrs	r2, r3
 80107a8:	f207 23d9 	addw	r3, r7, #729	; 0x2d9
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	4313      	orrs	r3, r2
 80107b0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80107b4:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80107b8:	4611      	mov	r1, r2
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7ef fee4 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 80107c0:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	461a      	mov	r2, r3
 80107c8:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80107cc:	601c      	str	r4, [r3, #0]
 80107ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80107d2:	601a      	str	r2, [r3, #0]
        this->color = color;
 80107d4:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80107de:	6812      	ldr	r2, [r2, #0]
 80107e0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80107e2:	bf00      	nop
    map_units.setLinespacing(0);
 80107e4:	1d3b      	adds	r3, r7, #4
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
 80107ec:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80107f0:	601a      	str	r2, [r3, #0]
 80107f2:	f207 23e2 	addw	r3, r7, #738	; 0x2e2
 80107f6:	2200      	movs	r2, #0
 80107f8:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80107fa:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f207 22e2 	addw	r2, r7, #738	; 0x2e2
 8010804:	8812      	ldrh	r2, [r2, #0]
 8010806:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010808:	bf00      	nop
    Unicode::snprintf(map_unitsBuffer, MAP_UNITS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID38).getText());
 801080a:	1d3b      	adds	r3, r7, #4
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	f503 6427 	add.w	r4, r3, #2672	; 0xa70
 8010812:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8010816:	2118      	movs	r1, #24
 8010818:	4618      	mov	r0, r3
 801081a:	f7ff f983 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 801081e:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8010822:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8010826:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010828:	4b0b      	ldr	r3, [pc, #44]	; (8010858 <_ZN15Screen1ViewBaseC1Ev+0x9b0>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d105      	bne.n	801083c <_ZN15Screen1ViewBaseC1Ev+0x994>
 8010830:	4b0a      	ldr	r3, [pc, #40]	; (801085c <_ZN15Screen1ViewBaseC1Ev+0x9b4>)
 8010832:	4a0b      	ldr	r2, [pc, #44]	; (8010860 <_ZN15Screen1ViewBaseC1Ev+0x9b8>)
 8010834:	21ae      	movs	r1, #174	; 0xae
 8010836:	480b      	ldr	r0, [pc, #44]	; (8010864 <_ZN15Screen1ViewBaseC1Ev+0x9bc>)
 8010838:	f01b ff56 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801083c:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	889a      	ldrh	r2, [r3, #4]
 8010844:	4b08      	ldr	r3, [pc, #32]	; (8010868 <_ZN15Screen1ViewBaseC1Ev+0x9c0>)
 8010846:	881b      	ldrh	r3, [r3, #0]
 8010848:	429a      	cmp	r2, r3
 801084a:	d315      	bcc.n	8010878 <_ZN15Screen1ViewBaseC1Ev+0x9d0>
 801084c:	4b07      	ldr	r3, [pc, #28]	; (801086c <_ZN15Screen1ViewBaseC1Ev+0x9c4>)
 801084e:	4a04      	ldr	r2, [pc, #16]	; (8010860 <_ZN15Screen1ViewBaseC1Ev+0x9b8>)
 8010850:	21af      	movs	r1, #175	; 0xaf
 8010852:	4804      	ldr	r0, [pc, #16]	; (8010864 <_ZN15Screen1ViewBaseC1Ev+0x9bc>)
 8010854:	f01b ff48 	bl	802c6e8 <__assert_func>
 8010858:	20006820 	.word	0x20006820
 801085c:	0802e83c 	.word	0x0802e83c
 8010860:	0802e880 	.word	0x0802e880
 8010864:	0802e8b0 	.word	0x0802e8b0
 8010868:	20006824 	.word	0x20006824
 801086c:	0802e8f4 	.word	0x0802e8f4
 8010870:	2000682c 	.word	0x2000682c
 8010874:	0802e948 	.word	0x0802e948
    }
 8010878:	bf00      	nop
        return texts->getText(typedTextId);
 801087a:	4bb9      	ldr	r3, [pc, #740]	; (8010b60 <_ZN15Screen1ViewBaseC1Ev+0xcb8>)
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8010882:	889b      	ldrh	r3, [r3, #4]
 8010884:	4619      	mov	r1, r3
 8010886:	4610      	mov	r0, r2
 8010888:	f002 fc70 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 801088c:	4603      	mov	r3, r0
 801088e:	bf00      	nop
 8010890:	4ab4      	ldr	r2, [pc, #720]	; (8010b64 <_ZN15Screen1ViewBaseC1Ev+0xcbc>)
 8010892:	210a      	movs	r1, #10
 8010894:	4620      	mov	r0, r4
 8010896:	f00d fb11 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801089a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801089e:	4618      	mov	r0, r3
 80108a0:	f7fd ffcc 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    map_units.setWildcard(map_unitsBuffer);
 80108a4:	1d3b      	adds	r3, r7, #4
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
 80108ac:	1d3b      	adds	r3, r7, #4
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	f503 6327 	add.w	r3, r3, #2672	; 0xa70
 80108b4:	4619      	mov	r1, r3
 80108b6:	4610      	mov	r0, r2
 80108b8:	f7ff f9c2 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_units.resizeToCurrentText();
 80108bc:	1d3b      	adds	r3, r7, #4
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80108c4:	4618      	mov	r0, r3
 80108c6:	f008 f8e5 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_units.setTypedText(touchgfx::TypedText(T_SINGLEUSEID23));
 80108ca:	1d3b      	adds	r3, r7, #4
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	f503 7434 	add.w	r4, r3, #720	; 0x2d0
 80108d2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80108d6:	2116      	movs	r1, #22
 80108d8:	4618      	mov	r0, r3
 80108da:	f7ff f923 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 80108de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80108e2:	4619      	mov	r1, r3
 80108e4:	4620      	mov	r0, r4
 80108e6:	f008 f8f2 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80108ea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7fd ffa4 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    batt_value.setXY(747, 141);
 80108f4:	1d3b      	adds	r3, r7, #4
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80108fc:	228d      	movs	r2, #141	; 0x8d
 80108fe:	f240 21eb 	movw	r1, #747	; 0x2eb
 8010902:	4618      	mov	r0, r3
 8010904:	f7fe ff02 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    batt_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010908:	1d3b      	adds	r3, r7, #4
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	f503 7444 	add.w	r4, r3, #784	; 0x310
 8010910:	f207 23ef 	addw	r3, r7, #751	; 0x2ef
 8010914:	22ff      	movs	r2, #255	; 0xff
 8010916:	701a      	strb	r2, [r3, #0]
 8010918:	f207 23ee 	addw	r3, r7, #750	; 0x2ee
 801091c:	22ff      	movs	r2, #255	; 0xff
 801091e:	701a      	strb	r2, [r3, #0]
 8010920:	f207 23ed 	addw	r3, r7, #749	; 0x2ed
 8010924:	22ff      	movs	r2, #255	; 0xff
 8010926:	701a      	strb	r2, [r3, #0]
 8010928:	f207 23ef 	addw	r3, r7, #751	; 0x2ef
 801092c:	781b      	ldrb	r3, [r3, #0]
 801092e:	041b      	lsls	r3, r3, #16
 8010930:	461a      	mov	r2, r3
 8010932:	f207 23ee 	addw	r3, r7, #750	; 0x2ee
 8010936:	781b      	ldrb	r3, [r3, #0]
 8010938:	021b      	lsls	r3, r3, #8
 801093a:	431a      	orrs	r2, r3
 801093c:	f207 23ed 	addw	r3, r7, #749	; 0x2ed
 8010940:	781b      	ldrb	r3, [r3, #0]
 8010942:	4313      	orrs	r3, r2
 8010944:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010948:	f507 7326 	add.w	r3, r7, #664	; 0x298
 801094c:	4611      	mov	r1, r2
 801094e:	4618      	mov	r0, r3
 8010950:	f7ef fe1a 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 8010954:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	461a      	mov	r2, r3
 801095c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8010960:	601c      	str	r4, [r3, #0]
 8010962:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010966:	601a      	str	r2, [r3, #0]
        this->color = color;
 8010968:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010972:	6812      	ldr	r2, [r2, #0]
 8010974:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010976:	bf00      	nop
    batt_value.setLinespacing(0);
 8010978:	1d3b      	adds	r3, r7, #4
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	f503 7244 	add.w	r2, r3, #784	; 0x310
 8010980:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8010984:	601a      	str	r2, [r3, #0]
 8010986:	f207 23f6 	addw	r3, r7, #758	; 0x2f6
 801098a:	2200      	movs	r2, #0
 801098c:	801a      	strh	r2, [r3, #0]
        linespace = space;
 801098e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f207 22f6 	addw	r2, r7, #758	; 0x2f6
 8010998:	8812      	ldrh	r2, [r2, #0]
 801099a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801099c:	bf00      	nop
    Unicode::snprintf(batt_valueBuffer, BATT_VALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 801099e:	1d3b      	adds	r3, r7, #4
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	f603 2484 	addw	r4, r3, #2692	; 0xa84
 80109a6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80109aa:	211f      	movs	r1, #31
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7ff f8b9 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 80109b2:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80109b6:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80109ba:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80109bc:	4b6a      	ldr	r3, [pc, #424]	; (8010b68 <_ZN15Screen1ViewBaseC1Ev+0xcc0>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d105      	bne.n	80109d0 <_ZN15Screen1ViewBaseC1Ev+0xb28>
 80109c4:	4b69      	ldr	r3, [pc, #420]	; (8010b6c <_ZN15Screen1ViewBaseC1Ev+0xcc4>)
 80109c6:	4a6a      	ldr	r2, [pc, #424]	; (8010b70 <_ZN15Screen1ViewBaseC1Ev+0xcc8>)
 80109c8:	21ae      	movs	r1, #174	; 0xae
 80109ca:	486a      	ldr	r0, [pc, #424]	; (8010b74 <_ZN15Screen1ViewBaseC1Ev+0xccc>)
 80109cc:	f01b fe8c 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80109d0:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	889a      	ldrh	r2, [r3, #4]
 80109d8:	4b67      	ldr	r3, [pc, #412]	; (8010b78 <_ZN15Screen1ViewBaseC1Ev+0xcd0>)
 80109da:	881b      	ldrh	r3, [r3, #0]
 80109dc:	429a      	cmp	r2, r3
 80109de:	d305      	bcc.n	80109ec <_ZN15Screen1ViewBaseC1Ev+0xb44>
 80109e0:	4b66      	ldr	r3, [pc, #408]	; (8010b7c <_ZN15Screen1ViewBaseC1Ev+0xcd4>)
 80109e2:	4a63      	ldr	r2, [pc, #396]	; (8010b70 <_ZN15Screen1ViewBaseC1Ev+0xcc8>)
 80109e4:	21af      	movs	r1, #175	; 0xaf
 80109e6:	4863      	ldr	r0, [pc, #396]	; (8010b74 <_ZN15Screen1ViewBaseC1Ev+0xccc>)
 80109e8:	f01b fe7e 	bl	802c6e8 <__assert_func>
    }
 80109ec:	bf00      	nop
        return texts->getText(typedTextId);
 80109ee:	4b5c      	ldr	r3, [pc, #368]	; (8010b60 <_ZN15Screen1ViewBaseC1Ev+0xcb8>)
 80109f0:	681a      	ldr	r2, [r3, #0]
 80109f2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80109f6:	889b      	ldrh	r3, [r3, #4]
 80109f8:	4619      	mov	r1, r3
 80109fa:	4610      	mov	r0, r2
 80109fc:	f002 fbb6 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8010a00:	4603      	mov	r3, r0
 8010a02:	bf00      	nop
 8010a04:	4a57      	ldr	r2, [pc, #348]	; (8010b64 <_ZN15Screen1ViewBaseC1Ev+0xcbc>)
 8010a06:	2120      	movs	r1, #32
 8010a08:	4620      	mov	r0, r4
 8010a0a:	f00d fa57 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010a0e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fd ff12 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    batt_value.setWildcard(batt_valueBuffer);
 8010a18:	1d3b      	adds	r3, r7, #4
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f503 7244 	add.w	r2, r3, #784	; 0x310
 8010a20:	1d3b      	adds	r3, r7, #4
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	f603 2384 	addw	r3, r3, #2692	; 0xa84
 8010a28:	4619      	mov	r1, r3
 8010a2a:	4610      	mov	r0, r2
 8010a2c:	f7ff f908 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_value.resizeToCurrentText();
 8010a30:	1d3b      	adds	r3, r7, #4
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f008 f82b 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID21));
 8010a3e:	1d3b      	adds	r3, r7, #4
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	f503 7444 	add.w	r4, r3, #784	; 0x310
 8010a46:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8010a4a:	2114      	movs	r1, #20
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7ff f869 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8010a52:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8010a56:	4619      	mov	r1, r3
 8010a58:	4620      	mov	r0, r4
 8010a5a:	f008 f838 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010a5e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7fd feea 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    batt_label.setXY(709, 198);
 8010a68:	1d3b      	adds	r3, r7, #4
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8010a70:	22c6      	movs	r2, #198	; 0xc6
 8010a72:	f240 21c5 	movw	r1, #709	; 0x2c5
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7fe fe48 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    batt_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010a7c:	1d3b      	adds	r3, r7, #4
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	f503 7454 	add.w	r4, r3, #848	; 0x350
 8010a84:	f207 3303 	addw	r3, r7, #771	; 0x303
 8010a88:	22ff      	movs	r2, #255	; 0xff
 8010a8a:	701a      	strb	r2, [r3, #0]
 8010a8c:	f207 3302 	addw	r3, r7, #770	; 0x302
 8010a90:	22ff      	movs	r2, #255	; 0xff
 8010a92:	701a      	strb	r2, [r3, #0]
 8010a94:	f207 3301 	addw	r3, r7, #769	; 0x301
 8010a98:	22ff      	movs	r2, #255	; 0xff
 8010a9a:	701a      	strb	r2, [r3, #0]
 8010a9c:	f207 3303 	addw	r3, r7, #771	; 0x303
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	041b      	lsls	r3, r3, #16
 8010aa4:	461a      	mov	r2, r3
 8010aa6:	f207 3302 	addw	r3, r7, #770	; 0x302
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	021b      	lsls	r3, r3, #8
 8010aae:	431a      	orrs	r2, r3
 8010ab0:	f207 3301 	addw	r3, r7, #769	; 0x301
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	4313      	orrs	r3, r2
 8010ab8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010abc:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8010ac0:	4611      	mov	r1, r2
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7ef fd60 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 8010ac8:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	461a      	mov	r2, r3
 8010ad0:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8010ad4:	601c      	str	r4, [r3, #0]
 8010ad6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010ada:	601a      	str	r2, [r3, #0]
        this->color = color;
 8010adc:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8010ae6:	6812      	ldr	r2, [r2, #0]
 8010ae8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010aea:	bf00      	nop
    batt_label.setLinespacing(0);
 8010aec:	1d3b      	adds	r3, r7, #4
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	f503 7254 	add.w	r2, r3, #848	; 0x350
 8010af4:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8010af8:	601a      	str	r2, [r3, #0]
 8010afa:	f207 330a 	addw	r3, r7, #778	; 0x30a
 8010afe:	2200      	movs	r2, #0
 8010b00:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8010b02:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	f207 320a 	addw	r2, r7, #778	; 0x30a
 8010b0c:	8812      	ldrh	r2, [r2, #0]
 8010b0e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010b10:	bf00      	nop
    Unicode::snprintf(batt_labelBuffer, BATT_LABEL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID49).getText());
 8010b12:	1d3b      	adds	r3, r7, #4
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	f603 24c4 	addw	r4, r3, #2756	; 0xac4
 8010b1a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8010b1e:	2123      	movs	r1, #35	; 0x23
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7fe ffff 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8010b26:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8010b2a:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8010b2e:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010b30:	4b0d      	ldr	r3, [pc, #52]	; (8010b68 <_ZN15Screen1ViewBaseC1Ev+0xcc0>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d105      	bne.n	8010b44 <_ZN15Screen1ViewBaseC1Ev+0xc9c>
 8010b38:	4b0c      	ldr	r3, [pc, #48]	; (8010b6c <_ZN15Screen1ViewBaseC1Ev+0xcc4>)
 8010b3a:	4a0d      	ldr	r2, [pc, #52]	; (8010b70 <_ZN15Screen1ViewBaseC1Ev+0xcc8>)
 8010b3c:	21ae      	movs	r1, #174	; 0xae
 8010b3e:	480d      	ldr	r0, [pc, #52]	; (8010b74 <_ZN15Screen1ViewBaseC1Ev+0xccc>)
 8010b40:	f01b fdd2 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010b44:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	889a      	ldrh	r2, [r3, #4]
 8010b4c:	4b0a      	ldr	r3, [pc, #40]	; (8010b78 <_ZN15Screen1ViewBaseC1Ev+0xcd0>)
 8010b4e:	881b      	ldrh	r3, [r3, #0]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d315      	bcc.n	8010b80 <_ZN15Screen1ViewBaseC1Ev+0xcd8>
 8010b54:	4b09      	ldr	r3, [pc, #36]	; (8010b7c <_ZN15Screen1ViewBaseC1Ev+0xcd4>)
 8010b56:	4a06      	ldr	r2, [pc, #24]	; (8010b70 <_ZN15Screen1ViewBaseC1Ev+0xcc8>)
 8010b58:	21af      	movs	r1, #175	; 0xaf
 8010b5a:	4806      	ldr	r0, [pc, #24]	; (8010b74 <_ZN15Screen1ViewBaseC1Ev+0xccc>)
 8010b5c:	f01b fdc4 	bl	802c6e8 <__assert_func>
 8010b60:	2000682c 	.word	0x2000682c
 8010b64:	0802e948 	.word	0x0802e948
 8010b68:	20006820 	.word	0x20006820
 8010b6c:	0802e83c 	.word	0x0802e83c
 8010b70:	0802e880 	.word	0x0802e880
 8010b74:	0802e8b0 	.word	0x0802e8b0
 8010b78:	20006824 	.word	0x20006824
 8010b7c:	0802e8f4 	.word	0x0802e8f4
    }
 8010b80:	bf00      	nop
        return texts->getText(typedTextId);
 8010b82:	4bba      	ldr	r3, [pc, #744]	; (8010e6c <_ZN15Screen1ViewBaseC1Ev+0xfc4>)
 8010b84:	681a      	ldr	r2, [r3, #0]
 8010b86:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8010b8a:	889b      	ldrh	r3, [r3, #4]
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	4610      	mov	r0, r2
 8010b90:	f002 faec 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8010b94:	4603      	mov	r3, r0
 8010b96:	bf00      	nop
 8010b98:	4ab5      	ldr	r2, [pc, #724]	; (8010e70 <_ZN15Screen1ViewBaseC1Ev+0xfc8>)
 8010b9a:	210a      	movs	r1, #10
 8010b9c:	4620      	mov	r0, r4
 8010b9e:	f00d f98d 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010ba2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f7fd fe48 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    batt_label.setWildcard(batt_labelBuffer);
 8010bac:	1d3b      	adds	r3, r7, #4
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	f503 7254 	add.w	r2, r3, #848	; 0x350
 8010bb4:	1d3b      	adds	r3, r7, #4
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8010bbc:	4619      	mov	r1, r3
 8010bbe:	4610      	mov	r0, r2
 8010bc0:	f7ff f83e 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_label.resizeToCurrentText();
 8010bc4:	1d3b      	adds	r3, r7, #4
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f007 ff61 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID20));
 8010bd2:	1d3b      	adds	r3, r7, #4
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	f503 7454 	add.w	r4, r3, #848	; 0x350
 8010bda:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8010bde:	2113      	movs	r1, #19
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7fe ff9f 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8010be6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8010bea:	4619      	mov	r1, r3
 8010bec:	4620      	mov	r0, r4
 8010bee:	f007 ff6e 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010bf2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f7fd fe20 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    batt_units.setXY(650, 198);
 8010bfc:	1d3b      	adds	r3, r7, #4
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8010c04:	22c6      	movs	r2, #198	; 0xc6
 8010c06:	f240 218a 	movw	r1, #650	; 0x28a
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7fe fd7e 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    batt_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010c10:	1d3b      	adds	r3, r7, #4
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	f503 7464 	add.w	r4, r3, #912	; 0x390
 8010c18:	f207 3317 	addw	r3, r7, #791	; 0x317
 8010c1c:	22ff      	movs	r2, #255	; 0xff
 8010c1e:	701a      	strb	r2, [r3, #0]
 8010c20:	f207 3316 	addw	r3, r7, #790	; 0x316
 8010c24:	22ff      	movs	r2, #255	; 0xff
 8010c26:	701a      	strb	r2, [r3, #0]
 8010c28:	f207 3315 	addw	r3, r7, #789	; 0x315
 8010c2c:	22ff      	movs	r2, #255	; 0xff
 8010c2e:	701a      	strb	r2, [r3, #0]
 8010c30:	f207 3317 	addw	r3, r7, #791	; 0x317
 8010c34:	781b      	ldrb	r3, [r3, #0]
 8010c36:	041b      	lsls	r3, r3, #16
 8010c38:	461a      	mov	r2, r3
 8010c3a:	f207 3316 	addw	r3, r7, #790	; 0x316
 8010c3e:	781b      	ldrb	r3, [r3, #0]
 8010c40:	021b      	lsls	r3, r3, #8
 8010c42:	431a      	orrs	r2, r3
 8010c44:	f207 3315 	addw	r3, r7, #789	; 0x315
 8010c48:	781b      	ldrb	r3, [r3, #0]
 8010c4a:	4313      	orrs	r3, r2
 8010c4c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010c50:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8010c54:	4611      	mov	r1, r2
 8010c56:	4618      	mov	r0, r3
 8010c58:	f7ef fc96 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 8010c5c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	461a      	mov	r2, r3
 8010c64:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8010c68:	601c      	str	r4, [r3, #0]
 8010c6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010c6e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8010c70:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010c7a:	6812      	ldr	r2, [r2, #0]
 8010c7c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010c7e:	bf00      	nop
    batt_units.setLinespacing(0);
 8010c80:	1d3b      	adds	r3, r7, #4
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	f503 7264 	add.w	r2, r3, #912	; 0x390
 8010c88:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8010c8c:	601a      	str	r2, [r3, #0]
 8010c8e:	f207 331e 	addw	r3, r7, #798	; 0x31e
 8010c92:	2200      	movs	r2, #0
 8010c94:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8010c96:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	f207 321e 	addw	r2, r7, #798	; 0x31e
 8010ca0:	8812      	ldrh	r2, [r2, #0]
 8010ca2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010ca4:	bf00      	nop
    Unicode::snprintf(batt_unitsBuffer, BATT_UNITS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID48).getText());
 8010ca6:	1d3b      	adds	r3, r7, #4
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	f603 24d8 	addw	r4, r3, #2776	; 0xad8
 8010cae:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8010cb2:	2122      	movs	r1, #34	; 0x22
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7fe ff35 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8010cba:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8010cbe:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8010cc2:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010cc4:	4b6b      	ldr	r3, [pc, #428]	; (8010e74 <_ZN15Screen1ViewBaseC1Ev+0xfcc>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d105      	bne.n	8010cd8 <_ZN15Screen1ViewBaseC1Ev+0xe30>
 8010ccc:	4b6a      	ldr	r3, [pc, #424]	; (8010e78 <_ZN15Screen1ViewBaseC1Ev+0xfd0>)
 8010cce:	4a6b      	ldr	r2, [pc, #428]	; (8010e7c <_ZN15Screen1ViewBaseC1Ev+0xfd4>)
 8010cd0:	21ae      	movs	r1, #174	; 0xae
 8010cd2:	486b      	ldr	r0, [pc, #428]	; (8010e80 <_ZN15Screen1ViewBaseC1Ev+0xfd8>)
 8010cd4:	f01b fd08 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010cd8:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	889a      	ldrh	r2, [r3, #4]
 8010ce0:	4b68      	ldr	r3, [pc, #416]	; (8010e84 <_ZN15Screen1ViewBaseC1Ev+0xfdc>)
 8010ce2:	881b      	ldrh	r3, [r3, #0]
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d305      	bcc.n	8010cf4 <_ZN15Screen1ViewBaseC1Ev+0xe4c>
 8010ce8:	4b67      	ldr	r3, [pc, #412]	; (8010e88 <_ZN15Screen1ViewBaseC1Ev+0xfe0>)
 8010cea:	4a64      	ldr	r2, [pc, #400]	; (8010e7c <_ZN15Screen1ViewBaseC1Ev+0xfd4>)
 8010cec:	21af      	movs	r1, #175	; 0xaf
 8010cee:	4864      	ldr	r0, [pc, #400]	; (8010e80 <_ZN15Screen1ViewBaseC1Ev+0xfd8>)
 8010cf0:	f01b fcfa 	bl	802c6e8 <__assert_func>
    }
 8010cf4:	bf00      	nop
        return texts->getText(typedTextId);
 8010cf6:	4b5d      	ldr	r3, [pc, #372]	; (8010e6c <_ZN15Screen1ViewBaseC1Ev+0xfc4>)
 8010cf8:	681a      	ldr	r2, [r3, #0]
 8010cfa:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8010cfe:	889b      	ldrh	r3, [r3, #4]
 8010d00:	4619      	mov	r1, r3
 8010d02:	4610      	mov	r0, r2
 8010d04:	f002 fa32 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	bf00      	nop
 8010d0c:	4a58      	ldr	r2, [pc, #352]	; (8010e70 <_ZN15Screen1ViewBaseC1Ev+0xfc8>)
 8010d0e:	210a      	movs	r1, #10
 8010d10:	4620      	mov	r0, r4
 8010d12:	f00d f8d3 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010d16:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7fd fd8e 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    batt_units.setWildcard(batt_unitsBuffer);
 8010d20:	1d3b      	adds	r3, r7, #4
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	f503 7264 	add.w	r2, r3, #912	; 0x390
 8010d28:	1d3b      	adds	r3, r7, #4
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 8010d30:	4619      	mov	r1, r3
 8010d32:	4610      	mov	r0, r2
 8010d34:	f7fe ff84 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_units.resizeToCurrentText();
 8010d38:	1d3b      	adds	r3, r7, #4
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8010d40:	4618      	mov	r0, r3
 8010d42:	f007 fea7 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_units.setTypedText(touchgfx::TypedText(T_SINGLEUSEID19));
 8010d46:	1d3b      	adds	r3, r7, #4
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	f503 7464 	add.w	r4, r3, #912	; 0x390
 8010d4e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8010d52:	2112      	movs	r1, #18
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7fe fee5 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8010d5a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8010d5e:	4619      	mov	r1, r3
 8010d60:	4620      	mov	r0, r4
 8010d62:	f007 feb4 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010d66:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7fd fd66 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    tps_value.setXY(747, 258);
 8010d70:	1d3b      	adds	r3, r7, #4
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8010d78:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010d7c:	f240 21eb 	movw	r1, #747	; 0x2eb
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7fe fcc3 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    tps_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010d86:	1d3b      	adds	r3, r7, #4
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	f503 7474 	add.w	r4, r3, #976	; 0x3d0
 8010d8e:	f207 332b 	addw	r3, r7, #811	; 0x32b
 8010d92:	22ff      	movs	r2, #255	; 0xff
 8010d94:	701a      	strb	r2, [r3, #0]
 8010d96:	f207 332a 	addw	r3, r7, #810	; 0x32a
 8010d9a:	22ff      	movs	r2, #255	; 0xff
 8010d9c:	701a      	strb	r2, [r3, #0]
 8010d9e:	f207 3329 	addw	r3, r7, #809	; 0x329
 8010da2:	22ff      	movs	r2, #255	; 0xff
 8010da4:	701a      	strb	r2, [r3, #0]
 8010da6:	f207 332b 	addw	r3, r7, #811	; 0x32b
 8010daa:	781b      	ldrb	r3, [r3, #0]
 8010dac:	041b      	lsls	r3, r3, #16
 8010dae:	461a      	mov	r2, r3
 8010db0:	f207 332a 	addw	r3, r7, #810	; 0x32a
 8010db4:	781b      	ldrb	r3, [r3, #0]
 8010db6:	021b      	lsls	r3, r3, #8
 8010db8:	431a      	orrs	r2, r3
 8010dba:	f207 3329 	addw	r3, r7, #809	; 0x329
 8010dbe:	781b      	ldrb	r3, [r3, #0]
 8010dc0:	4313      	orrs	r3, r2
 8010dc2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010dc6:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8010dca:	4611      	mov	r1, r2
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7ef fbdb 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 8010dd2:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	461a      	mov	r2, r3
 8010dda:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8010dde:	601c      	str	r4, [r3, #0]
 8010de0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010de4:	601a      	str	r2, [r3, #0]
        this->color = color;
 8010de6:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8010df0:	6812      	ldr	r2, [r2, #0]
 8010df2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010df4:	bf00      	nop
    tps_value.setLinespacing(0);
 8010df6:	1d3b      	adds	r3, r7, #4
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	f503 7274 	add.w	r2, r3, #976	; 0x3d0
 8010dfe:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8010e02:	601a      	str	r2, [r3, #0]
 8010e04:	f207 3332 	addw	r3, r7, #818	; 0x332
 8010e08:	2200      	movs	r2, #0
 8010e0a:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8010e0c:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	f207 3232 	addw	r2, r7, #818	; 0x332
 8010e16:	8812      	ldrh	r2, [r2, #0]
 8010e18:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010e1a:	bf00      	nop
    Unicode::snprintf(tps_valueBuffer, TPS_VALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID46).getText());
 8010e1c:	1d3b      	adds	r3, r7, #4
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	f603 24ec 	addw	r4, r3, #2796	; 0xaec
 8010e24:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8010e28:	2120      	movs	r1, #32
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7fe fe7a 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8010e30:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8010e34:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8010e38:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010e3a:	4b0e      	ldr	r3, [pc, #56]	; (8010e74 <_ZN15Screen1ViewBaseC1Ev+0xfcc>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d105      	bne.n	8010e4e <_ZN15Screen1ViewBaseC1Ev+0xfa6>
 8010e42:	4b0d      	ldr	r3, [pc, #52]	; (8010e78 <_ZN15Screen1ViewBaseC1Ev+0xfd0>)
 8010e44:	4a0d      	ldr	r2, [pc, #52]	; (8010e7c <_ZN15Screen1ViewBaseC1Ev+0xfd4>)
 8010e46:	21ae      	movs	r1, #174	; 0xae
 8010e48:	480d      	ldr	r0, [pc, #52]	; (8010e80 <_ZN15Screen1ViewBaseC1Ev+0xfd8>)
 8010e4a:	f01b fc4d 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010e4e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	889a      	ldrh	r2, [r3, #4]
 8010e56:	4b0b      	ldr	r3, [pc, #44]	; (8010e84 <_ZN15Screen1ViewBaseC1Ev+0xfdc>)
 8010e58:	881b      	ldrh	r3, [r3, #0]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d316      	bcc.n	8010e8c <_ZN15Screen1ViewBaseC1Ev+0xfe4>
 8010e5e:	4b0a      	ldr	r3, [pc, #40]	; (8010e88 <_ZN15Screen1ViewBaseC1Ev+0xfe0>)
 8010e60:	4a06      	ldr	r2, [pc, #24]	; (8010e7c <_ZN15Screen1ViewBaseC1Ev+0xfd4>)
 8010e62:	21af      	movs	r1, #175	; 0xaf
 8010e64:	4806      	ldr	r0, [pc, #24]	; (8010e80 <_ZN15Screen1ViewBaseC1Ev+0xfd8>)
 8010e66:	f01b fc3f 	bl	802c6e8 <__assert_func>
 8010e6a:	bf00      	nop
 8010e6c:	2000682c 	.word	0x2000682c
 8010e70:	0802e948 	.word	0x0802e948
 8010e74:	20006820 	.word	0x20006820
 8010e78:	0802e83c 	.word	0x0802e83c
 8010e7c:	0802e880 	.word	0x0802e880
 8010e80:	0802e8b0 	.word	0x0802e8b0
 8010e84:	20006824 	.word	0x20006824
 8010e88:	0802e8f4 	.word	0x0802e8f4
    }
 8010e8c:	bf00      	nop
        return texts->getText(typedTextId);
 8010e8e:	4bba      	ldr	r3, [pc, #744]	; (8011178 <_ZN15Screen1ViewBaseC1Ev+0x12d0>)
 8010e90:	681a      	ldr	r2, [r3, #0]
 8010e92:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8010e96:	889b      	ldrh	r3, [r3, #4]
 8010e98:	4619      	mov	r1, r3
 8010e9a:	4610      	mov	r0, r2
 8010e9c:	f002 f966 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	bf00      	nop
 8010ea4:	4ab5      	ldr	r2, [pc, #724]	; (801117c <_ZN15Screen1ViewBaseC1Ev+0x12d4>)
 8010ea6:	2120      	movs	r1, #32
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	f00d f807 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010eae:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7fd fcc2 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    tps_value.setWildcard(tps_valueBuffer);
 8010eb8:	1d3b      	adds	r3, r7, #4
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	f503 7274 	add.w	r2, r3, #976	; 0x3d0
 8010ec0:	1d3b      	adds	r3, r7, #4
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	f603 23ec 	addw	r3, r3, #2796	; 0xaec
 8010ec8:	4619      	mov	r1, r3
 8010eca:	4610      	mov	r0, r2
 8010ecc:	f7fe feb8 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_value.resizeToCurrentText();
 8010ed0:	1d3b      	adds	r3, r7, #4
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f007 fddb 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8010ede:	1d3b      	adds	r3, r7, #4
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	f503 7474 	add.w	r4, r3, #976	; 0x3d0
 8010ee6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8010eea:	2111      	movs	r1, #17
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7fe fe19 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8010ef2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	4620      	mov	r0, r4
 8010efa:	f007 fde8 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010efe:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8010f02:	4618      	mov	r0, r3
 8010f04:	f7fd fc9a 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    tps_label.setXY(696, 317);
 8010f08:	1d3b      	adds	r3, r7, #4
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8010f10:	f240 123d 	movw	r2, #317	; 0x13d
 8010f14:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7fe fbf7 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    tps_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010f1e:	1d3b      	adds	r3, r7, #4
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8010f26:	f207 333f 	addw	r3, r7, #831	; 0x33f
 8010f2a:	22ff      	movs	r2, #255	; 0xff
 8010f2c:	701a      	strb	r2, [r3, #0]
 8010f2e:	f207 333e 	addw	r3, r7, #830	; 0x33e
 8010f32:	22ff      	movs	r2, #255	; 0xff
 8010f34:	701a      	strb	r2, [r3, #0]
 8010f36:	f207 333d 	addw	r3, r7, #829	; 0x33d
 8010f3a:	22ff      	movs	r2, #255	; 0xff
 8010f3c:	701a      	strb	r2, [r3, #0]
 8010f3e:	f207 333f 	addw	r3, r7, #831	; 0x33f
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	041b      	lsls	r3, r3, #16
 8010f46:	461a      	mov	r2, r3
 8010f48:	f207 333e 	addw	r3, r7, #830	; 0x33e
 8010f4c:	781b      	ldrb	r3, [r3, #0]
 8010f4e:	021b      	lsls	r3, r3, #8
 8010f50:	431a      	orrs	r2, r3
 8010f52:	f207 333d 	addw	r3, r7, #829	; 0x33d
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	4313      	orrs	r3, r2
 8010f5a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010f5e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8010f62:	4611      	mov	r1, r2
 8010f64:	4618      	mov	r0, r3
 8010f66:	f7ef fb0f 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 8010f6a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	461a      	mov	r2, r3
 8010f72:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8010f76:	601c      	str	r4, [r3, #0]
 8010f78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010f7c:	601a      	str	r2, [r3, #0]
        this->color = color;
 8010f7e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010f88:	6812      	ldr	r2, [r2, #0]
 8010f8a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010f8c:	bf00      	nop
    tps_label.setLinespacing(0);
 8010f8e:	1d3b      	adds	r3, r7, #4
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	f503 6282 	add.w	r2, r3, #1040	; 0x410
 8010f96:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8010f9a:	601a      	str	r2, [r3, #0]
 8010f9c:	f207 3346 	addw	r3, r7, #838	; 0x346
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8010fa4:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	f207 3246 	addw	r2, r7, #838	; 0x346
 8010fae:	8812      	ldrh	r2, [r2, #0]
 8010fb0:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8010fb2:	bf00      	nop
    Unicode::snprintf(tps_labelBuffer, TPS_LABEL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID51).getText());
 8010fb4:	1d3b      	adds	r3, r7, #4
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	f603 342c 	addw	r4, r3, #2860	; 0xb2c
 8010fbc:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8010fc0:	2125      	movs	r1, #37	; 0x25
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7fe fdae 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8010fc8:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8010fcc:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8010fd0:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010fd2:	4b6b      	ldr	r3, [pc, #428]	; (8011180 <_ZN15Screen1ViewBaseC1Ev+0x12d8>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d105      	bne.n	8010fe6 <_ZN15Screen1ViewBaseC1Ev+0x113e>
 8010fda:	4b6a      	ldr	r3, [pc, #424]	; (8011184 <_ZN15Screen1ViewBaseC1Ev+0x12dc>)
 8010fdc:	4a6a      	ldr	r2, [pc, #424]	; (8011188 <_ZN15Screen1ViewBaseC1Ev+0x12e0>)
 8010fde:	21ae      	movs	r1, #174	; 0xae
 8010fe0:	486a      	ldr	r0, [pc, #424]	; (801118c <_ZN15Screen1ViewBaseC1Ev+0x12e4>)
 8010fe2:	f01b fb81 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010fe6:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	889a      	ldrh	r2, [r3, #4]
 8010fee:	4b68      	ldr	r3, [pc, #416]	; (8011190 <_ZN15Screen1ViewBaseC1Ev+0x12e8>)
 8010ff0:	881b      	ldrh	r3, [r3, #0]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d305      	bcc.n	8011002 <_ZN15Screen1ViewBaseC1Ev+0x115a>
 8010ff6:	4b67      	ldr	r3, [pc, #412]	; (8011194 <_ZN15Screen1ViewBaseC1Ev+0x12ec>)
 8010ff8:	4a63      	ldr	r2, [pc, #396]	; (8011188 <_ZN15Screen1ViewBaseC1Ev+0x12e0>)
 8010ffa:	21af      	movs	r1, #175	; 0xaf
 8010ffc:	4863      	ldr	r0, [pc, #396]	; (801118c <_ZN15Screen1ViewBaseC1Ev+0x12e4>)
 8010ffe:	f01b fb73 	bl	802c6e8 <__assert_func>
    }
 8011002:	bf00      	nop
        return texts->getText(typedTextId);
 8011004:	4b5c      	ldr	r3, [pc, #368]	; (8011178 <_ZN15Screen1ViewBaseC1Ev+0x12d0>)
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801100c:	889b      	ldrh	r3, [r3, #4]
 801100e:	4619      	mov	r1, r3
 8011010:	4610      	mov	r0, r2
 8011012:	f002 f8ab 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8011016:	4603      	mov	r3, r0
 8011018:	bf00      	nop
 801101a:	4a58      	ldr	r2, [pc, #352]	; (801117c <_ZN15Screen1ViewBaseC1Ev+0x12d4>)
 801101c:	210a      	movs	r1, #10
 801101e:	4620      	mov	r0, r4
 8011020:	f00c ff4c 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011024:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8011028:	4618      	mov	r0, r3
 801102a:	f7fd fc07 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    tps_label.setWildcard(tps_labelBuffer);
 801102e:	1d3b      	adds	r3, r7, #4
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	f503 6282 	add.w	r2, r3, #1040	; 0x410
 8011036:	1d3b      	adds	r3, r7, #4
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	f603 332c 	addw	r3, r3, #2860	; 0xb2c
 801103e:	4619      	mov	r1, r3
 8011040:	4610      	mov	r0, r2
 8011042:	f7fe fdfd 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_label.resizeToCurrentText();
 8011046:	1d3b      	adds	r3, r7, #4
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 801104e:	4618      	mov	r0, r3
 8011050:	f007 fd20 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 8011054:	1d3b      	adds	r3, r7, #4
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 801105c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8011060:	210f      	movs	r1, #15
 8011062:	4618      	mov	r0, r3
 8011064:	f7fe fd5e 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8011068:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801106c:	4619      	mov	r1, r3
 801106e:	4620      	mov	r0, r4
 8011070:	f007 fd2d 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011074:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8011078:	4618      	mov	r0, r3
 801107a:	f7fd fbdf 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    tps_units.setXY(638, 317);
 801107e:	1d3b      	adds	r3, r7, #4
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8011086:	f240 123d 	movw	r2, #317	; 0x13d
 801108a:	f240 217e 	movw	r1, #638	; 0x27e
 801108e:	4618      	mov	r0, r3
 8011090:	f7fe fb3c 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    tps_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011094:	1d3b      	adds	r3, r7, #4
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	f503 648a 	add.w	r4, r3, #1104	; 0x450
 801109c:	f207 3353 	addw	r3, r7, #851	; 0x353
 80110a0:	22ff      	movs	r2, #255	; 0xff
 80110a2:	701a      	strb	r2, [r3, #0]
 80110a4:	f207 3352 	addw	r3, r7, #850	; 0x352
 80110a8:	22ff      	movs	r2, #255	; 0xff
 80110aa:	701a      	strb	r2, [r3, #0]
 80110ac:	f207 3351 	addw	r3, r7, #849	; 0x351
 80110b0:	22ff      	movs	r2, #255	; 0xff
 80110b2:	701a      	strb	r2, [r3, #0]
 80110b4:	f207 3353 	addw	r3, r7, #851	; 0x353
 80110b8:	781b      	ldrb	r3, [r3, #0]
 80110ba:	041b      	lsls	r3, r3, #16
 80110bc:	461a      	mov	r2, r3
 80110be:	f207 3352 	addw	r3, r7, #850	; 0x352
 80110c2:	781b      	ldrb	r3, [r3, #0]
 80110c4:	021b      	lsls	r3, r3, #8
 80110c6:	431a      	orrs	r2, r3
 80110c8:	f207 3351 	addw	r3, r7, #849	; 0x351
 80110cc:	781b      	ldrb	r3, [r3, #0]
 80110ce:	4313      	orrs	r3, r2
 80110d0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80110d4:	f507 7321 	add.w	r3, r7, #644	; 0x284
 80110d8:	4611      	mov	r1, r2
 80110da:	4618      	mov	r0, r3
 80110dc:	f7ef fa54 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 80110e0:	f507 7321 	add.w	r3, r7, #644	; 0x284
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	461a      	mov	r2, r3
 80110e8:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80110ec:	601c      	str	r4, [r3, #0]
 80110ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80110f2:	601a      	str	r2, [r3, #0]
        this->color = color;
 80110f4:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80110fe:	6812      	ldr	r2, [r2, #0]
 8011100:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011102:	bf00      	nop
    tps_units.setLinespacing(0);
 8011104:	1d3b      	adds	r3, r7, #4
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	f503 628a 	add.w	r2, r3, #1104	; 0x450
 801110c:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8011110:	601a      	str	r2, [r3, #0]
 8011112:	f207 335a 	addw	r3, r7, #858	; 0x35a
 8011116:	2200      	movs	r2, #0
 8011118:	801a      	strh	r2, [r3, #0]
        linespace = space;
 801111a:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f207 325a 	addw	r2, r7, #858	; 0x35a
 8011124:	8812      	ldrh	r2, [r2, #0]
 8011126:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011128:	bf00      	nop
    Unicode::snprintf(tps_unitsBuffer, TPS_UNITS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID50).getText());
 801112a:	1d3b      	adds	r3, r7, #4
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	f503 6434 	add.w	r4, r3, #2880	; 0xb40
 8011132:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8011136:	2124      	movs	r1, #36	; 0x24
 8011138:	4618      	mov	r0, r3
 801113a:	f7fe fcf3 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 801113e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8011142:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8011146:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011148:	4b0d      	ldr	r3, [pc, #52]	; (8011180 <_ZN15Screen1ViewBaseC1Ev+0x12d8>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d105      	bne.n	801115c <_ZN15Screen1ViewBaseC1Ev+0x12b4>
 8011150:	4b0c      	ldr	r3, [pc, #48]	; (8011184 <_ZN15Screen1ViewBaseC1Ev+0x12dc>)
 8011152:	4a0d      	ldr	r2, [pc, #52]	; (8011188 <_ZN15Screen1ViewBaseC1Ev+0x12e0>)
 8011154:	21ae      	movs	r1, #174	; 0xae
 8011156:	480d      	ldr	r0, [pc, #52]	; (801118c <_ZN15Screen1ViewBaseC1Ev+0x12e4>)
 8011158:	f01b fac6 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801115c:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	889a      	ldrh	r2, [r3, #4]
 8011164:	4b0a      	ldr	r3, [pc, #40]	; (8011190 <_ZN15Screen1ViewBaseC1Ev+0x12e8>)
 8011166:	881b      	ldrh	r3, [r3, #0]
 8011168:	429a      	cmp	r2, r3
 801116a:	d315      	bcc.n	8011198 <_ZN15Screen1ViewBaseC1Ev+0x12f0>
 801116c:	4b09      	ldr	r3, [pc, #36]	; (8011194 <_ZN15Screen1ViewBaseC1Ev+0x12ec>)
 801116e:	4a06      	ldr	r2, [pc, #24]	; (8011188 <_ZN15Screen1ViewBaseC1Ev+0x12e0>)
 8011170:	21af      	movs	r1, #175	; 0xaf
 8011172:	4806      	ldr	r0, [pc, #24]	; (801118c <_ZN15Screen1ViewBaseC1Ev+0x12e4>)
 8011174:	f01b fab8 	bl	802c6e8 <__assert_func>
 8011178:	2000682c 	.word	0x2000682c
 801117c:	0802e948 	.word	0x0802e948
 8011180:	20006820 	.word	0x20006820
 8011184:	0802e83c 	.word	0x0802e83c
 8011188:	0802e880 	.word	0x0802e880
 801118c:	0802e8b0 	.word	0x0802e8b0
 8011190:	20006824 	.word	0x20006824
 8011194:	0802e8f4 	.word	0x0802e8f4
    }
 8011198:	bf00      	nop
        return texts->getText(typedTextId);
 801119a:	4bba      	ldr	r3, [pc, #744]	; (8011484 <_ZN15Screen1ViewBaseC1Ev+0x15dc>)
 801119c:	681a      	ldr	r2, [r3, #0]
 801119e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80111a2:	889b      	ldrh	r3, [r3, #4]
 80111a4:	4619      	mov	r1, r3
 80111a6:	4610      	mov	r0, r2
 80111a8:	f001 ffe0 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 80111ac:	4603      	mov	r3, r0
 80111ae:	bf00      	nop
 80111b0:	4ab5      	ldr	r2, [pc, #724]	; (8011488 <_ZN15Screen1ViewBaseC1Ev+0x15e0>)
 80111b2:	210a      	movs	r1, #10
 80111b4:	4620      	mov	r0, r4
 80111b6:	f00c fe81 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80111ba:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80111be:	4618      	mov	r0, r3
 80111c0:	f7fd fb3c 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    tps_units.setWildcard(tps_unitsBuffer);
 80111c4:	1d3b      	adds	r3, r7, #4
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f503 628a 	add.w	r2, r3, #1104	; 0x450
 80111cc:	1d3b      	adds	r3, r7, #4
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80111d4:	4619      	mov	r1, r3
 80111d6:	4610      	mov	r0, r2
 80111d8:	f7fe fd32 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_units.resizeToCurrentText();
 80111dc:	1d3b      	adds	r3, r7, #4
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80111e4:	4618      	mov	r0, r3
 80111e6:	f007 fc55 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_units.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 80111ea:	1d3b      	adds	r3, r7, #4
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	f503 648a 	add.w	r4, r3, #1104	; 0x450
 80111f2:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80111f6:	2110      	movs	r1, #16
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7fe fc93 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 80111fe:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8011202:	4619      	mov	r1, r3
 8011204:	4620      	mov	r0, r4
 8011206:	f007 fc62 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801120a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801120e:	4618      	mov	r0, r3
 8011210:	f7fd fb14 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    lambda_value.setXY(747, 370);
 8011214:	1d3b      	adds	r3, r7, #4
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 801121c:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8011220:	f240 21eb 	movw	r1, #747	; 0x2eb
 8011224:	4618      	mov	r0, r3
 8011226:	f7fe fa71 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    lambda_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801122a:	1d3b      	adds	r3, r7, #4
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 8011232:	f207 3367 	addw	r3, r7, #871	; 0x367
 8011236:	22ff      	movs	r2, #255	; 0xff
 8011238:	701a      	strb	r2, [r3, #0]
 801123a:	f207 3366 	addw	r3, r7, #870	; 0x366
 801123e:	22ff      	movs	r2, #255	; 0xff
 8011240:	701a      	strb	r2, [r3, #0]
 8011242:	f207 3365 	addw	r3, r7, #869	; 0x365
 8011246:	22ff      	movs	r2, #255	; 0xff
 8011248:	701a      	strb	r2, [r3, #0]
 801124a:	f207 3367 	addw	r3, r7, #871	; 0x367
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	041b      	lsls	r3, r3, #16
 8011252:	461a      	mov	r2, r3
 8011254:	f207 3366 	addw	r3, r7, #870	; 0x366
 8011258:	781b      	ldrb	r3, [r3, #0]
 801125a:	021b      	lsls	r3, r3, #8
 801125c:	431a      	orrs	r2, r3
 801125e:	f207 3365 	addw	r3, r7, #869	; 0x365
 8011262:	781b      	ldrb	r3, [r3, #0]
 8011264:	4313      	orrs	r3, r2
 8011266:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801126a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801126e:	4611      	mov	r1, r2
 8011270:	4618      	mov	r0, r3
 8011272:	f7ef f989 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 8011276:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	461a      	mov	r2, r3
 801127e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8011282:	601c      	str	r4, [r3, #0]
 8011284:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011288:	601a      	str	r2, [r3, #0]
        this->color = color;
 801128a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011294:	6812      	ldr	r2, [r2, #0]
 8011296:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011298:	bf00      	nop
    lambda_value.setLinespacing(0);
 801129a:	1d3b      	adds	r3, r7, #4
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	f503 6292 	add.w	r2, r3, #1168	; 0x490
 80112a2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80112a6:	601a      	str	r2, [r3, #0]
 80112a8:	f207 336e 	addw	r3, r7, #878	; 0x36e
 80112ac:	2200      	movs	r2, #0
 80112ae:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80112b0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	f207 326e 	addw	r2, r7, #878	; 0x36e
 80112ba:	8812      	ldrh	r2, [r2, #0]
 80112bc:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80112be:	bf00      	nop
    Unicode::snprintf(lambda_valueBuffer, LAMBDA_VALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 80112c0:	1d3b      	adds	r3, r7, #4
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	f603 3454 	addw	r4, r3, #2900	; 0xb54
 80112c8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80112cc:	2121      	movs	r1, #33	; 0x21
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7fe fc28 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 80112d4:	f507 735d 	add.w	r3, r7, #884	; 0x374
 80112d8:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80112dc:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80112de:	4b6b      	ldr	r3, [pc, #428]	; (801148c <_ZN15Screen1ViewBaseC1Ev+0x15e4>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d105      	bne.n	80112f2 <_ZN15Screen1ViewBaseC1Ev+0x144a>
 80112e6:	4b6a      	ldr	r3, [pc, #424]	; (8011490 <_ZN15Screen1ViewBaseC1Ev+0x15e8>)
 80112e8:	4a6a      	ldr	r2, [pc, #424]	; (8011494 <_ZN15Screen1ViewBaseC1Ev+0x15ec>)
 80112ea:	21ae      	movs	r1, #174	; 0xae
 80112ec:	486a      	ldr	r0, [pc, #424]	; (8011498 <_ZN15Screen1ViewBaseC1Ev+0x15f0>)
 80112ee:	f01b f9fb 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80112f2:	f507 735d 	add.w	r3, r7, #884	; 0x374
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	889a      	ldrh	r2, [r3, #4]
 80112fa:	4b68      	ldr	r3, [pc, #416]	; (801149c <_ZN15Screen1ViewBaseC1Ev+0x15f4>)
 80112fc:	881b      	ldrh	r3, [r3, #0]
 80112fe:	429a      	cmp	r2, r3
 8011300:	d305      	bcc.n	801130e <_ZN15Screen1ViewBaseC1Ev+0x1466>
 8011302:	4b67      	ldr	r3, [pc, #412]	; (80114a0 <_ZN15Screen1ViewBaseC1Ev+0x15f8>)
 8011304:	4a63      	ldr	r2, [pc, #396]	; (8011494 <_ZN15Screen1ViewBaseC1Ev+0x15ec>)
 8011306:	21af      	movs	r1, #175	; 0xaf
 8011308:	4863      	ldr	r0, [pc, #396]	; (8011498 <_ZN15Screen1ViewBaseC1Ev+0x15f0>)
 801130a:	f01b f9ed 	bl	802c6e8 <__assert_func>
    }
 801130e:	bf00      	nop
        return texts->getText(typedTextId);
 8011310:	4b5c      	ldr	r3, [pc, #368]	; (8011484 <_ZN15Screen1ViewBaseC1Ev+0x15dc>)
 8011312:	681a      	ldr	r2, [r3, #0]
 8011314:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8011318:	889b      	ldrh	r3, [r3, #4]
 801131a:	4619      	mov	r1, r3
 801131c:	4610      	mov	r0, r2
 801131e:	f001 ff25 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8011322:	4603      	mov	r3, r0
 8011324:	bf00      	nop
 8011326:	4a58      	ldr	r2, [pc, #352]	; (8011488 <_ZN15Screen1ViewBaseC1Ev+0x15e0>)
 8011328:	2120      	movs	r1, #32
 801132a:	4620      	mov	r0, r4
 801132c:	f00c fdc6 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011330:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8011334:	4618      	mov	r0, r3
 8011336:	f7fd fa81 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    lambda_value.setWildcard(lambda_valueBuffer);
 801133a:	1d3b      	adds	r3, r7, #4
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	f503 6292 	add.w	r2, r3, #1168	; 0x490
 8011342:	1d3b      	adds	r3, r7, #4
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 801134a:	4619      	mov	r1, r3
 801134c:	4610      	mov	r0, r2
 801134e:	f7fe fc77 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_value.resizeToCurrentText();
 8011352:	1d3b      	adds	r3, r7, #4
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 801135a:	4618      	mov	r0, r3
 801135c:	f007 fb9a 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 8011360:	1d3b      	adds	r3, r7, #4
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 8011368:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801136c:	210e      	movs	r1, #14
 801136e:	4618      	mov	r0, r3
 8011370:	f7fe fbd8 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8011374:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8011378:	4619      	mov	r1, r3
 801137a:	4620      	mov	r0, r4
 801137c:	f007 fba7 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011380:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8011384:	4618      	mov	r0, r3
 8011386:	f7fd fa59 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    lambda_label.setXY(687, 435);
 801138a:	1d3b      	adds	r3, r7, #4
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8011392:	f240 12b3 	movw	r2, #435	; 0x1b3
 8011396:	f240 21af 	movw	r1, #687	; 0x2af
 801139a:	4618      	mov	r0, r3
 801139c:	f7fe f9b6 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    lambda_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80113a0:	1d3b      	adds	r3, r7, #4
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f503 649a 	add.w	r4, r3, #1232	; 0x4d0
 80113a8:	f207 337b 	addw	r3, r7, #891	; 0x37b
 80113ac:	22ff      	movs	r2, #255	; 0xff
 80113ae:	701a      	strb	r2, [r3, #0]
 80113b0:	f207 337a 	addw	r3, r7, #890	; 0x37a
 80113b4:	22ff      	movs	r2, #255	; 0xff
 80113b6:	701a      	strb	r2, [r3, #0]
 80113b8:	f207 3379 	addw	r3, r7, #889	; 0x379
 80113bc:	22ff      	movs	r2, #255	; 0xff
 80113be:	701a      	strb	r2, [r3, #0]
 80113c0:	f207 337b 	addw	r3, r7, #891	; 0x37b
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	041b      	lsls	r3, r3, #16
 80113c8:	461a      	mov	r2, r3
 80113ca:	f207 337a 	addw	r3, r7, #890	; 0x37a
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	021b      	lsls	r3, r3, #8
 80113d2:	431a      	orrs	r2, r3
 80113d4:	f207 3379 	addw	r3, r7, #889	; 0x379
 80113d8:	781b      	ldrb	r3, [r3, #0]
 80113da:	4313      	orrs	r3, r2
 80113dc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80113e0:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80113e4:	4611      	mov	r1, r2
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7ef f8ce 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 80113ec:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	461a      	mov	r2, r3
 80113f4:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80113f8:	601c      	str	r4, [r3, #0]
 80113fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80113fe:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011400:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801140a:	6812      	ldr	r2, [r2, #0]
 801140c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801140e:	bf00      	nop
    lambda_label.setLinespacing(0);
 8011410:	1d3b      	adds	r3, r7, #4
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	f503 629a 	add.w	r2, r3, #1232	; 0x4d0
 8011418:	f507 7361 	add.w	r3, r7, #900	; 0x384
 801141c:	601a      	str	r2, [r3, #0]
 801141e:	f207 3382 	addw	r3, r7, #898	; 0x382
 8011422:	2200      	movs	r2, #0
 8011424:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011426:	f507 7361 	add.w	r3, r7, #900	; 0x384
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	f207 3282 	addw	r2, r7, #898	; 0x382
 8011430:	8812      	ldrh	r2, [r2, #0]
 8011432:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011434:	bf00      	nop
    Unicode::snprintf(lambda_labelBuffer, LAMBDA_LABEL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID53).getText());
 8011436:	1d3b      	adds	r3, r7, #4
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	f603 3494 	addw	r4, r3, #2964	; 0xb94
 801143e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8011442:	2127      	movs	r1, #39	; 0x27
 8011444:	4618      	mov	r0, r3
 8011446:	f7fe fb6d 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 801144a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 801144e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8011452:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011454:	4b0d      	ldr	r3, [pc, #52]	; (801148c <_ZN15Screen1ViewBaseC1Ev+0x15e4>)
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d105      	bne.n	8011468 <_ZN15Screen1ViewBaseC1Ev+0x15c0>
 801145c:	4b0c      	ldr	r3, [pc, #48]	; (8011490 <_ZN15Screen1ViewBaseC1Ev+0x15e8>)
 801145e:	4a0d      	ldr	r2, [pc, #52]	; (8011494 <_ZN15Screen1ViewBaseC1Ev+0x15ec>)
 8011460:	21ae      	movs	r1, #174	; 0xae
 8011462:	480d      	ldr	r0, [pc, #52]	; (8011498 <_ZN15Screen1ViewBaseC1Ev+0x15f0>)
 8011464:	f01b f940 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011468:	f507 7362 	add.w	r3, r7, #904	; 0x388
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	889a      	ldrh	r2, [r3, #4]
 8011470:	4b0a      	ldr	r3, [pc, #40]	; (801149c <_ZN15Screen1ViewBaseC1Ev+0x15f4>)
 8011472:	881b      	ldrh	r3, [r3, #0]
 8011474:	429a      	cmp	r2, r3
 8011476:	d315      	bcc.n	80114a4 <_ZN15Screen1ViewBaseC1Ev+0x15fc>
 8011478:	4b09      	ldr	r3, [pc, #36]	; (80114a0 <_ZN15Screen1ViewBaseC1Ev+0x15f8>)
 801147a:	4a06      	ldr	r2, [pc, #24]	; (8011494 <_ZN15Screen1ViewBaseC1Ev+0x15ec>)
 801147c:	21af      	movs	r1, #175	; 0xaf
 801147e:	4806      	ldr	r0, [pc, #24]	; (8011498 <_ZN15Screen1ViewBaseC1Ev+0x15f0>)
 8011480:	f01b f932 	bl	802c6e8 <__assert_func>
 8011484:	2000682c 	.word	0x2000682c
 8011488:	0802e948 	.word	0x0802e948
 801148c:	20006820 	.word	0x20006820
 8011490:	0802e83c 	.word	0x0802e83c
 8011494:	0802e880 	.word	0x0802e880
 8011498:	0802e8b0 	.word	0x0802e8b0
 801149c:	20006824 	.word	0x20006824
 80114a0:	0802e8f4 	.word	0x0802e8f4
    }
 80114a4:	bf00      	nop
        return texts->getText(typedTextId);
 80114a6:	4baf      	ldr	r3, [pc, #700]	; (8011764 <_ZN15Screen1ViewBaseC1Ev+0x18bc>)
 80114a8:	681a      	ldr	r2, [r3, #0]
 80114aa:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80114ae:	889b      	ldrh	r3, [r3, #4]
 80114b0:	4619      	mov	r1, r3
 80114b2:	4610      	mov	r0, r2
 80114b4:	f001 fe5a 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 80114b8:	4603      	mov	r3, r0
 80114ba:	bf00      	nop
 80114bc:	4aaa      	ldr	r2, [pc, #680]	; (8011768 <_ZN15Screen1ViewBaseC1Ev+0x18c0>)
 80114be:	210a      	movs	r1, #10
 80114c0:	4620      	mov	r0, r4
 80114c2:	f00c fcfb 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80114c6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7fd f9b6 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    lambda_label.setWildcard(lambda_labelBuffer);
 80114d0:	1d3b      	adds	r3, r7, #4
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	f503 629a 	add.w	r2, r3, #1232	; 0x4d0
 80114d8:	1d3b      	adds	r3, r7, #4
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 80114e0:	4619      	mov	r1, r3
 80114e2:	4610      	mov	r0, r2
 80114e4:	f7fe fbac 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_label.resizeToCurrentText();
 80114e8:	1d3b      	adds	r3, r7, #4
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 80114f0:	4618      	mov	r0, r3
 80114f2:	f007 facf 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 80114f6:	1d3b      	adds	r3, r7, #4
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	f503 649a 	add.w	r4, r3, #1232	; 0x4d0
 80114fe:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8011502:	210d      	movs	r1, #13
 8011504:	4618      	mov	r0, r3
 8011506:	f7fe fb0d 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 801150a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801150e:	4619      	mov	r1, r3
 8011510:	4620      	mov	r0, r4
 8011512:	f007 fadc 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011516:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801151a:	4618      	mov	r0, r3
 801151c:	f7fd f98e 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    lambda_units.setXY(536, 435);
 8011520:	1d3b      	adds	r3, r7, #4
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8011528:	f240 12b3 	movw	r2, #435	; 0x1b3
 801152c:	f44f 7106 	mov.w	r1, #536	; 0x218
 8011530:	4618      	mov	r0, r3
 8011532:	f7fe f8eb 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    lambda_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011536:	1d3b      	adds	r3, r7, #4
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	f503 64a2 	add.w	r4, r3, #1296	; 0x510
 801153e:	f207 338f 	addw	r3, r7, #911	; 0x38f
 8011542:	22ff      	movs	r2, #255	; 0xff
 8011544:	701a      	strb	r2, [r3, #0]
 8011546:	f207 338e 	addw	r3, r7, #910	; 0x38e
 801154a:	22ff      	movs	r2, #255	; 0xff
 801154c:	701a      	strb	r2, [r3, #0]
 801154e:	f207 338d 	addw	r3, r7, #909	; 0x38d
 8011552:	22ff      	movs	r2, #255	; 0xff
 8011554:	701a      	strb	r2, [r3, #0]
 8011556:	f207 338f 	addw	r3, r7, #911	; 0x38f
 801155a:	781b      	ldrb	r3, [r3, #0]
 801155c:	041b      	lsls	r3, r3, #16
 801155e:	461a      	mov	r2, r3
 8011560:	f207 338e 	addw	r3, r7, #910	; 0x38e
 8011564:	781b      	ldrb	r3, [r3, #0]
 8011566:	021b      	lsls	r3, r3, #8
 8011568:	431a      	orrs	r2, r3
 801156a:	f207 338d 	addw	r3, r7, #909	; 0x38d
 801156e:	781b      	ldrb	r3, [r3, #0]
 8011570:	4313      	orrs	r3, r2
 8011572:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011576:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801157a:	4611      	mov	r1, r2
 801157c:	4618      	mov	r0, r3
 801157e:	f7ef f803 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 8011582:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	461a      	mov	r2, r3
 801158a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 801158e:	601c      	str	r4, [r3, #0]
 8011590:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011594:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011596:	f507 7364 	add.w	r3, r7, #912	; 0x390
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80115a0:	6812      	ldr	r2, [r2, #0]
 80115a2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80115a4:	bf00      	nop
    lambda_units.setLinespacing(0);
 80115a6:	1d3b      	adds	r3, r7, #4
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80115ae:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 80115b2:	2300      	movs	r3, #0
 80115b4:	f8a7 3396 	strh.w	r3, [r7, #918]	; 0x396
        linespace = space;
 80115b8:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 80115bc:	f8b7 2396 	ldrh.w	r2, [r7, #918]	; 0x396
 80115c0:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80115c2:	bf00      	nop
    Unicode::snprintf(lambda_unitsBuffer, LAMBDA_UNITS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID52).getText());
 80115c4:	1d3b      	adds	r3, r7, #4
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	f603 34a8 	addw	r4, r3, #2984	; 0xba8
 80115cc:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80115d0:	2126      	movs	r1, #38	; 0x26
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7fe faa6 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 80115d8:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80115dc:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80115e0:	4b62      	ldr	r3, [pc, #392]	; (801176c <_ZN15Screen1ViewBaseC1Ev+0x18c4>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d105      	bne.n	80115f4 <_ZN15Screen1ViewBaseC1Ev+0x174c>
 80115e8:	4b61      	ldr	r3, [pc, #388]	; (8011770 <_ZN15Screen1ViewBaseC1Ev+0x18c8>)
 80115ea:	4a62      	ldr	r2, [pc, #392]	; (8011774 <_ZN15Screen1ViewBaseC1Ev+0x18cc>)
 80115ec:	21ae      	movs	r1, #174	; 0xae
 80115ee:	4862      	ldr	r0, [pc, #392]	; (8011778 <_ZN15Screen1ViewBaseC1Ev+0x18d0>)
 80115f0:	f01b f87a 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80115f4:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80115f8:	889a      	ldrh	r2, [r3, #4]
 80115fa:	4b60      	ldr	r3, [pc, #384]	; (801177c <_ZN15Screen1ViewBaseC1Ev+0x18d4>)
 80115fc:	881b      	ldrh	r3, [r3, #0]
 80115fe:	429a      	cmp	r2, r3
 8011600:	d305      	bcc.n	801160e <_ZN15Screen1ViewBaseC1Ev+0x1766>
 8011602:	4b5f      	ldr	r3, [pc, #380]	; (8011780 <_ZN15Screen1ViewBaseC1Ev+0x18d8>)
 8011604:	4a5b      	ldr	r2, [pc, #364]	; (8011774 <_ZN15Screen1ViewBaseC1Ev+0x18cc>)
 8011606:	21af      	movs	r1, #175	; 0xaf
 8011608:	485b      	ldr	r0, [pc, #364]	; (8011778 <_ZN15Screen1ViewBaseC1Ev+0x18d0>)
 801160a:	f01b f86d 	bl	802c6e8 <__assert_func>
    }
 801160e:	bf00      	nop
        return texts->getText(typedTextId);
 8011610:	4b54      	ldr	r3, [pc, #336]	; (8011764 <_ZN15Screen1ViewBaseC1Ev+0x18bc>)
 8011612:	681a      	ldr	r2, [r3, #0]
 8011614:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8011618:	889b      	ldrh	r3, [r3, #4]
 801161a:	4619      	mov	r1, r3
 801161c:	4610      	mov	r0, r2
 801161e:	f001 fda5 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8011622:	4603      	mov	r3, r0
 8011624:	bf00      	nop
 8011626:	4a50      	ldr	r2, [pc, #320]	; (8011768 <_ZN15Screen1ViewBaseC1Ev+0x18c0>)
 8011628:	210a      	movs	r1, #10
 801162a:	4620      	mov	r0, r4
 801162c:	f00c fc46 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011630:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8011634:	4618      	mov	r0, r3
 8011636:	f7fd f901 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    lambda_units.setWildcard(lambda_unitsBuffer);
 801163a:	1d3b      	adds	r3, r7, #4
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8011642:	1d3b      	adds	r3, r7, #4
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 801164a:	4619      	mov	r1, r3
 801164c:	4610      	mov	r0, r2
 801164e:	f7fe faf7 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_units.resizeToCurrentText();
 8011652:	1d3b      	adds	r3, r7, #4
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 801165a:	4618      	mov	r0, r3
 801165c:	f007 fa1a 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_units.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8011660:	1d3b      	adds	r3, r7, #4
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	f503 64a2 	add.w	r4, r3, #1296	; 0x510
 8011668:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801166c:	210c      	movs	r1, #12
 801166e:	4618      	mov	r0, r3
 8011670:	f7fe fa58 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8011674:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8011678:	4619      	mov	r1, r3
 801167a:	4620      	mov	r0, r4
 801167c:	f007 fa27 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011680:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8011684:	4618      	mov	r0, r3
 8011686:	f7fd f8d9 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    ect_value.setXY(24, 16);
 801168a:	1d3b      	adds	r3, r7, #4
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8011692:	2210      	movs	r2, #16
 8011694:	2118      	movs	r1, #24
 8011696:	4618      	mov	r0, r3
 8011698:	f7fe f838 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    ect_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801169c:	1d3b      	adds	r3, r7, #4
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	f503 64aa 	add.w	r4, r3, #1360	; 0x550
 80116a4:	23ff      	movs	r3, #255	; 0xff
 80116a6:	f887 33a3 	strb.w	r3, [r7, #931]	; 0x3a3
 80116aa:	23ff      	movs	r3, #255	; 0xff
 80116ac:	f887 33a2 	strb.w	r3, [r7, #930]	; 0x3a2
 80116b0:	23ff      	movs	r3, #255	; 0xff
 80116b2:	f887 33a1 	strb.w	r3, [r7, #929]	; 0x3a1
 80116b6:	f897 33a3 	ldrb.w	r3, [r7, #931]	; 0x3a3
 80116ba:	041b      	lsls	r3, r3, #16
 80116bc:	461a      	mov	r2, r3
 80116be:	f897 33a2 	ldrb.w	r3, [r7, #930]	; 0x3a2
 80116c2:	021b      	lsls	r3, r3, #8
 80116c4:	431a      	orrs	r2, r3
 80116c6:	f897 33a1 	ldrb.w	r3, [r7, #929]	; 0x3a1
 80116ca:	4313      	orrs	r3, r2
 80116cc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80116d0:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80116d4:	4611      	mov	r1, r2
 80116d6:	4618      	mov	r0, r3
 80116d8:	f7ee ff56 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 80116dc:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	461a      	mov	r2, r3
 80116e4:	f8c7 43a4 	str.w	r4, [r7, #932]	; 0x3a4
 80116e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80116ec:	601a      	str	r2, [r3, #0]
        this->color = color;
 80116ee:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80116f2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80116f6:	6812      	ldr	r2, [r2, #0]
 80116f8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80116fa:	bf00      	nop
    ect_value.setLinespacing(0);
 80116fc:	1d3b      	adds	r3, r7, #4
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8011704:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8011708:	2300      	movs	r3, #0
 801170a:	f8a7 33aa 	strh.w	r3, [r7, #938]	; 0x3aa
        linespace = space;
 801170e:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8011712:	f8b7 23aa 	ldrh.w	r2, [r7, #938]	; 0x3aa
 8011716:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011718:	bf00      	nop
    Unicode::snprintf(ect_valueBuffer, ECT_VALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID41).getText());
 801171a:	1d3b      	adds	r3, r7, #4
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	f603 34bc 	addw	r4, r3, #3004	; 0xbbc
 8011722:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8011726:	211b      	movs	r1, #27
 8011728:	4618      	mov	r0, r3
 801172a:	f7fe f9fb 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 801172e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8011732:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011736:	4b0d      	ldr	r3, [pc, #52]	; (801176c <_ZN15Screen1ViewBaseC1Ev+0x18c4>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d105      	bne.n	801174a <_ZN15Screen1ViewBaseC1Ev+0x18a2>
 801173e:	4b0c      	ldr	r3, [pc, #48]	; (8011770 <_ZN15Screen1ViewBaseC1Ev+0x18c8>)
 8011740:	4a0c      	ldr	r2, [pc, #48]	; (8011774 <_ZN15Screen1ViewBaseC1Ev+0x18cc>)
 8011742:	21ae      	movs	r1, #174	; 0xae
 8011744:	480c      	ldr	r0, [pc, #48]	; (8011778 <_ZN15Screen1ViewBaseC1Ev+0x18d0>)
 8011746:	f01a ffcf 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801174a:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 801174e:	889a      	ldrh	r2, [r3, #4]
 8011750:	4b0a      	ldr	r3, [pc, #40]	; (801177c <_ZN15Screen1ViewBaseC1Ev+0x18d4>)
 8011752:	881b      	ldrh	r3, [r3, #0]
 8011754:	429a      	cmp	r2, r3
 8011756:	d315      	bcc.n	8011784 <_ZN15Screen1ViewBaseC1Ev+0x18dc>
 8011758:	4b09      	ldr	r3, [pc, #36]	; (8011780 <_ZN15Screen1ViewBaseC1Ev+0x18d8>)
 801175a:	4a06      	ldr	r2, [pc, #24]	; (8011774 <_ZN15Screen1ViewBaseC1Ev+0x18cc>)
 801175c:	21af      	movs	r1, #175	; 0xaf
 801175e:	4806      	ldr	r0, [pc, #24]	; (8011778 <_ZN15Screen1ViewBaseC1Ev+0x18d0>)
 8011760:	f01a ffc2 	bl	802c6e8 <__assert_func>
 8011764:	2000682c 	.word	0x2000682c
 8011768:	0802e948 	.word	0x0802e948
 801176c:	20006820 	.word	0x20006820
 8011770:	0802e83c 	.word	0x0802e83c
 8011774:	0802e880 	.word	0x0802e880
 8011778:	0802e8b0 	.word	0x0802e8b0
 801177c:	20006824 	.word	0x20006824
 8011780:	0802e8f4 	.word	0x0802e8f4
    }
 8011784:	bf00      	nop
        return texts->getText(typedTextId);
 8011786:	4baa      	ldr	r3, [pc, #680]	; (8011a30 <_ZN15Screen1ViewBaseC1Ev+0x1b88>)
 8011788:	681a      	ldr	r2, [r3, #0]
 801178a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801178e:	889b      	ldrh	r3, [r3, #4]
 8011790:	4619      	mov	r1, r3
 8011792:	4610      	mov	r0, r2
 8011794:	f001 fcea 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8011798:	4603      	mov	r3, r0
 801179a:	bf00      	nop
 801179c:	4aa5      	ldr	r2, [pc, #660]	; (8011a34 <_ZN15Screen1ViewBaseC1Ev+0x1b8c>)
 801179e:	2120      	movs	r1, #32
 80117a0:	4620      	mov	r0, r4
 80117a2:	f00c fb8b 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80117a6:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7fd f846 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    ect_value.setWildcard(ect_valueBuffer);
 80117b0:	1d3b      	adds	r3, r7, #4
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	f503 62aa 	add.w	r2, r3, #1360	; 0x550
 80117b8:	1d3b      	adds	r3, r7, #4
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	f603 33bc 	addw	r3, r3, #3004	; 0xbbc
 80117c0:	4619      	mov	r1, r3
 80117c2:	4610      	mov	r0, r2
 80117c4:	f7fe fa3c 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_value.resizeToCurrentText();
 80117c8:	1d3b      	adds	r3, r7, #4
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 80117d0:	4618      	mov	r0, r3
 80117d2:	f007 f95f 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 80117d6:	1d3b      	adds	r3, r7, #4
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	f503 64aa 	add.w	r4, r3, #1360	; 0x550
 80117de:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80117e2:	2100      	movs	r1, #0
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7fe f99d 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 80117ea:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80117ee:	4619      	mov	r1, r3
 80117f0:	4620      	mov	r0, r4
 80117f2:	f007 f96c 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80117f6:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7fd f81e 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    ect_label.setXY(28, 80);
 8011800:	1d3b      	adds	r3, r7, #4
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8011808:	2250      	movs	r2, #80	; 0x50
 801180a:	211c      	movs	r1, #28
 801180c:	4618      	mov	r0, r3
 801180e:	f7fd ff7d 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    ect_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011812:	1d3b      	adds	r3, r7, #4
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	f503 64b2 	add.w	r4, r3, #1424	; 0x590
 801181a:	23ff      	movs	r3, #255	; 0xff
 801181c:	f887 33b7 	strb.w	r3, [r7, #951]	; 0x3b7
 8011820:	23ff      	movs	r3, #255	; 0xff
 8011822:	f887 33b6 	strb.w	r3, [r7, #950]	; 0x3b6
 8011826:	23ff      	movs	r3, #255	; 0xff
 8011828:	f887 33b5 	strb.w	r3, [r7, #949]	; 0x3b5
 801182c:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 8011830:	041b      	lsls	r3, r3, #16
 8011832:	461a      	mov	r2, r3
 8011834:	f897 33b6 	ldrb.w	r3, [r7, #950]	; 0x3b6
 8011838:	021b      	lsls	r3, r3, #8
 801183a:	431a      	orrs	r2, r3
 801183c:	f897 33b5 	ldrb.w	r3, [r7, #949]	; 0x3b5
 8011840:	4313      	orrs	r3, r2
 8011842:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011846:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801184a:	4611      	mov	r1, r2
 801184c:	4618      	mov	r0, r3
 801184e:	f7ee fe9b 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 8011852:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	461a      	mov	r2, r3
 801185a:	f8c7 43b8 	str.w	r4, [r7, #952]	; 0x3b8
 801185e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011862:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011864:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8011868:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801186c:	6812      	ldr	r2, [r2, #0]
 801186e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011870:	bf00      	nop
    ect_label.setLinespacing(0);
 8011872:	1d3b      	adds	r3, r7, #4
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 801187a:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 801187e:	2300      	movs	r3, #0
 8011880:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        linespace = space;
 8011884:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8011888:	f8b7 23be 	ldrh.w	r2, [r7, #958]	; 0x3be
 801188c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801188e:	bf00      	nop
    Unicode::snprintf(ect_labelBuffer, ECT_LABEL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 8011890:	1d3b      	adds	r3, r7, #4
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	f603 34fc 	addw	r4, r3, #3068	; 0xbfc
 8011898:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801189c:	212e      	movs	r1, #46	; 0x2e
 801189e:	4618      	mov	r0, r3
 80118a0:	f7fe f940 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 80118a4:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80118a8:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80118ac:	4b62      	ldr	r3, [pc, #392]	; (8011a38 <_ZN15Screen1ViewBaseC1Ev+0x1b90>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d105      	bne.n	80118c0 <_ZN15Screen1ViewBaseC1Ev+0x1a18>
 80118b4:	4b61      	ldr	r3, [pc, #388]	; (8011a3c <_ZN15Screen1ViewBaseC1Ev+0x1b94>)
 80118b6:	4a62      	ldr	r2, [pc, #392]	; (8011a40 <_ZN15Screen1ViewBaseC1Ev+0x1b98>)
 80118b8:	21ae      	movs	r1, #174	; 0xae
 80118ba:	4862      	ldr	r0, [pc, #392]	; (8011a44 <_ZN15Screen1ViewBaseC1Ev+0x1b9c>)
 80118bc:	f01a ff14 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80118c0:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80118c4:	889a      	ldrh	r2, [r3, #4]
 80118c6:	4b60      	ldr	r3, [pc, #384]	; (8011a48 <_ZN15Screen1ViewBaseC1Ev+0x1ba0>)
 80118c8:	881b      	ldrh	r3, [r3, #0]
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d305      	bcc.n	80118da <_ZN15Screen1ViewBaseC1Ev+0x1a32>
 80118ce:	4b5f      	ldr	r3, [pc, #380]	; (8011a4c <_ZN15Screen1ViewBaseC1Ev+0x1ba4>)
 80118d0:	4a5b      	ldr	r2, [pc, #364]	; (8011a40 <_ZN15Screen1ViewBaseC1Ev+0x1b98>)
 80118d2:	21af      	movs	r1, #175	; 0xaf
 80118d4:	485b      	ldr	r0, [pc, #364]	; (8011a44 <_ZN15Screen1ViewBaseC1Ev+0x1b9c>)
 80118d6:	f01a ff07 	bl	802c6e8 <__assert_func>
    }
 80118da:	bf00      	nop
        return texts->getText(typedTextId);
 80118dc:	4b54      	ldr	r3, [pc, #336]	; (8011a30 <_ZN15Screen1ViewBaseC1Ev+0x1b88>)
 80118de:	681a      	ldr	r2, [r3, #0]
 80118e0:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80118e4:	889b      	ldrh	r3, [r3, #4]
 80118e6:	4619      	mov	r1, r3
 80118e8:	4610      	mov	r0, r2
 80118ea:	f001 fc3f 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 80118ee:	4603      	mov	r3, r0
 80118f0:	bf00      	nop
 80118f2:	4a50      	ldr	r2, [pc, #320]	; (8011a34 <_ZN15Screen1ViewBaseC1Ev+0x1b8c>)
 80118f4:	210a      	movs	r1, #10
 80118f6:	4620      	mov	r0, r4
 80118f8:	f00c fae0 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80118fc:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8011900:	4618      	mov	r0, r3
 8011902:	f7fc ff9b 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    ect_label.setWildcard(ect_labelBuffer);
 8011906:	1d3b      	adds	r3, r7, #4
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	f503 62b2 	add.w	r2, r3, #1424	; 0x590
 801190e:	1d3b      	adds	r3, r7, #4
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 8011916:	4619      	mov	r1, r3
 8011918:	4610      	mov	r0, r2
 801191a:	f7fe f991 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_label.resizeToCurrentText();
 801191e:	1d3b      	adds	r3, r7, #4
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8011926:	4618      	mov	r0, r3
 8011928:	f007 f8b4 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 801192c:	1d3b      	adds	r3, r7, #4
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	f503 64b2 	add.w	r4, r3, #1424	; 0x590
 8011934:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8011938:	2101      	movs	r1, #1
 801193a:	4618      	mov	r0, r3
 801193c:	f7fe f8f2 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8011940:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8011944:	4619      	mov	r1, r3
 8011946:	4620      	mov	r0, r4
 8011948:	f007 f8c1 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801194c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8011950:	4618      	mov	r0, r3
 8011952:	f7fc ff73 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    ect_units.setXY(131, 82);
 8011956:	1d3b      	adds	r3, r7, #4
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 801195e:	2252      	movs	r2, #82	; 0x52
 8011960:	2183      	movs	r1, #131	; 0x83
 8011962:	4618      	mov	r0, r3
 8011964:	f7fd fed2 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    ect_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011968:	1d3b      	adds	r3, r7, #4
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	f503 64ba 	add.w	r4, r3, #1488	; 0x5d0
 8011970:	23ff      	movs	r3, #255	; 0xff
 8011972:	f887 33cb 	strb.w	r3, [r7, #971]	; 0x3cb
 8011976:	23ff      	movs	r3, #255	; 0xff
 8011978:	f887 33ca 	strb.w	r3, [r7, #970]	; 0x3ca
 801197c:	23ff      	movs	r3, #255	; 0xff
 801197e:	f887 33c9 	strb.w	r3, [r7, #969]	; 0x3c9
 8011982:	f897 33cb 	ldrb.w	r3, [r7, #971]	; 0x3cb
 8011986:	041b      	lsls	r3, r3, #16
 8011988:	461a      	mov	r2, r3
 801198a:	f897 33ca 	ldrb.w	r3, [r7, #970]	; 0x3ca
 801198e:	021b      	lsls	r3, r3, #8
 8011990:	431a      	orrs	r2, r3
 8011992:	f897 33c9 	ldrb.w	r3, [r7, #969]	; 0x3c9
 8011996:	4313      	orrs	r3, r2
 8011998:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801199c:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80119a0:	4611      	mov	r1, r2
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7ee fdf0 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 80119a8:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	461a      	mov	r2, r3
 80119b0:	f8c7 43cc 	str.w	r4, [r7, #972]	; 0x3cc
 80119b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80119b8:	601a      	str	r2, [r3, #0]
        this->color = color;
 80119ba:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80119be:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80119c2:	6812      	ldr	r2, [r2, #0]
 80119c4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80119c6:	bf00      	nop
    ect_units.setLinespacing(0);
 80119c8:	1d3b      	adds	r3, r7, #4
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 80119d0:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 80119d4:	2300      	movs	r3, #0
 80119d6:	f8a7 33d2 	strh.w	r3, [r7, #978]	; 0x3d2
        linespace = space;
 80119da:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80119de:	f8b7 23d2 	ldrh.w	r2, [r7, #978]	; 0x3d2
 80119e2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80119e4:	bf00      	nop
    Unicode::snprintf(ect_unitsBuffer, ECT_UNITS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 80119e6:	1d3b      	adds	r3, r7, #4
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	f503 6441 	add.w	r4, r3, #3088	; 0xc10
 80119ee:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80119f2:	212f      	movs	r1, #47	; 0x2f
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7fe f895 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 80119fa:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80119fe:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011a02:	4b0d      	ldr	r3, [pc, #52]	; (8011a38 <_ZN15Screen1ViewBaseC1Ev+0x1b90>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d105      	bne.n	8011a16 <_ZN15Screen1ViewBaseC1Ev+0x1b6e>
 8011a0a:	4b0c      	ldr	r3, [pc, #48]	; (8011a3c <_ZN15Screen1ViewBaseC1Ev+0x1b94>)
 8011a0c:	4a0c      	ldr	r2, [pc, #48]	; (8011a40 <_ZN15Screen1ViewBaseC1Ev+0x1b98>)
 8011a0e:	21ae      	movs	r1, #174	; 0xae
 8011a10:	480c      	ldr	r0, [pc, #48]	; (8011a44 <_ZN15Screen1ViewBaseC1Ev+0x1b9c>)
 8011a12:	f01a fe69 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011a16:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8011a1a:	889a      	ldrh	r2, [r3, #4]
 8011a1c:	4b0a      	ldr	r3, [pc, #40]	; (8011a48 <_ZN15Screen1ViewBaseC1Ev+0x1ba0>)
 8011a1e:	881b      	ldrh	r3, [r3, #0]
 8011a20:	429a      	cmp	r2, r3
 8011a22:	d315      	bcc.n	8011a50 <_ZN15Screen1ViewBaseC1Ev+0x1ba8>
 8011a24:	4b09      	ldr	r3, [pc, #36]	; (8011a4c <_ZN15Screen1ViewBaseC1Ev+0x1ba4>)
 8011a26:	4a06      	ldr	r2, [pc, #24]	; (8011a40 <_ZN15Screen1ViewBaseC1Ev+0x1b98>)
 8011a28:	21af      	movs	r1, #175	; 0xaf
 8011a2a:	4806      	ldr	r0, [pc, #24]	; (8011a44 <_ZN15Screen1ViewBaseC1Ev+0x1b9c>)
 8011a2c:	f01a fe5c 	bl	802c6e8 <__assert_func>
 8011a30:	2000682c 	.word	0x2000682c
 8011a34:	0802e948 	.word	0x0802e948
 8011a38:	20006820 	.word	0x20006820
 8011a3c:	0802e83c 	.word	0x0802e83c
 8011a40:	0802e880 	.word	0x0802e880
 8011a44:	0802e8b0 	.word	0x0802e8b0
 8011a48:	20006824 	.word	0x20006824
 8011a4c:	0802e8f4 	.word	0x0802e8f4
    }
 8011a50:	bf00      	nop
        return texts->getText(typedTextId);
 8011a52:	4baa      	ldr	r3, [pc, #680]	; (8011cfc <_ZN15Screen1ViewBaseC1Ev+0x1e54>)
 8011a54:	681a      	ldr	r2, [r3, #0]
 8011a56:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8011a5a:	889b      	ldrh	r3, [r3, #4]
 8011a5c:	4619      	mov	r1, r3
 8011a5e:	4610      	mov	r0, r2
 8011a60:	f001 fb84 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8011a64:	4603      	mov	r3, r0
 8011a66:	bf00      	nop
 8011a68:	4aa5      	ldr	r2, [pc, #660]	; (8011d00 <_ZN15Screen1ViewBaseC1Ev+0x1e58>)
 8011a6a:	210a      	movs	r1, #10
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	f00c fa25 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011a72:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8011a76:	4618      	mov	r0, r3
 8011a78:	f7fc fee0 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    ect_units.setWildcard(ect_unitsBuffer);
 8011a7c:	1d3b      	adds	r3, r7, #4
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	f503 62ba 	add.w	r2, r3, #1488	; 0x5d0
 8011a84:	1d3b      	adds	r3, r7, #4
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 8011a8c:	4619      	mov	r1, r3
 8011a8e:	4610      	mov	r0, r2
 8011a90:	f7fe f8d6 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_units.resizeToCurrentText();
 8011a94:	1d3b      	adds	r3, r7, #4
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f006 fff9 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_units.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 8011aa2:	1d3b      	adds	r3, r7, #4
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	f503 64ba 	add.w	r4, r3, #1488	; 0x5d0
 8011aaa:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8011aae:	2102      	movs	r1, #2
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f7fe f837 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8011ab6:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8011aba:	4619      	mov	r1, r3
 8011abc:	4620      	mov	r0, r4
 8011abe:	f007 f806 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011ac2:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7fc feb8 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    iat_value.setXY(25, 132);
 8011acc:	1d3b      	adds	r3, r7, #4
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8011ad4:	2284      	movs	r2, #132	; 0x84
 8011ad6:	2119      	movs	r1, #25
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7fd fe17 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    iat_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011ade:	1d3b      	adds	r3, r7, #4
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	f503 64c2 	add.w	r4, r3, #1552	; 0x610
 8011ae6:	23ff      	movs	r3, #255	; 0xff
 8011ae8:	f887 33df 	strb.w	r3, [r7, #991]	; 0x3df
 8011aec:	23ff      	movs	r3, #255	; 0xff
 8011aee:	f887 33de 	strb.w	r3, [r7, #990]	; 0x3de
 8011af2:	23ff      	movs	r3, #255	; 0xff
 8011af4:	f887 33dd 	strb.w	r3, [r7, #989]	; 0x3dd
 8011af8:	f897 33df 	ldrb.w	r3, [r7, #991]	; 0x3df
 8011afc:	041b      	lsls	r3, r3, #16
 8011afe:	461a      	mov	r2, r3
 8011b00:	f897 33de 	ldrb.w	r3, [r7, #990]	; 0x3de
 8011b04:	021b      	lsls	r3, r3, #8
 8011b06:	431a      	orrs	r2, r3
 8011b08:	f897 33dd 	ldrb.w	r3, [r7, #989]	; 0x3dd
 8011b0c:	4313      	orrs	r3, r2
 8011b0e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011b12:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8011b16:	4611      	mov	r1, r2
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f7ee fd35 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 8011b1e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	461a      	mov	r2, r3
 8011b26:	f8c7 43e0 	str.w	r4, [r7, #992]	; 0x3e0
 8011b2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011b2e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011b30:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8011b34:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011b38:	6812      	ldr	r2, [r2, #0]
 8011b3a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011b3c:	bf00      	nop
    iat_value.setLinespacing(0);
 8011b3e:	1d3b      	adds	r3, r7, #4
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8011b46:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
        linespace = space;
 8011b50:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8011b54:	f8b7 23e6 	ldrh.w	r2, [r7, #998]	; 0x3e6
 8011b58:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011b5a:	bf00      	nop
    Unicode::snprintf(iat_valueBuffer, IAT_VALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID42).getText());
 8011b5c:	1d3b      	adds	r3, r7, #4
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	f603 4424 	addw	r4, r3, #3108	; 0xc24
 8011b64:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8011b68:	211c      	movs	r1, #28
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f7fd ffda 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8011b70:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8011b74:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011b78:	4b62      	ldr	r3, [pc, #392]	; (8011d04 <_ZN15Screen1ViewBaseC1Ev+0x1e5c>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d105      	bne.n	8011b8c <_ZN15Screen1ViewBaseC1Ev+0x1ce4>
 8011b80:	4b61      	ldr	r3, [pc, #388]	; (8011d08 <_ZN15Screen1ViewBaseC1Ev+0x1e60>)
 8011b82:	4a62      	ldr	r2, [pc, #392]	; (8011d0c <_ZN15Screen1ViewBaseC1Ev+0x1e64>)
 8011b84:	21ae      	movs	r1, #174	; 0xae
 8011b86:	4862      	ldr	r0, [pc, #392]	; (8011d10 <_ZN15Screen1ViewBaseC1Ev+0x1e68>)
 8011b88:	f01a fdae 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011b8c:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8011b90:	889a      	ldrh	r2, [r3, #4]
 8011b92:	4b60      	ldr	r3, [pc, #384]	; (8011d14 <_ZN15Screen1ViewBaseC1Ev+0x1e6c>)
 8011b94:	881b      	ldrh	r3, [r3, #0]
 8011b96:	429a      	cmp	r2, r3
 8011b98:	d305      	bcc.n	8011ba6 <_ZN15Screen1ViewBaseC1Ev+0x1cfe>
 8011b9a:	4b5f      	ldr	r3, [pc, #380]	; (8011d18 <_ZN15Screen1ViewBaseC1Ev+0x1e70>)
 8011b9c:	4a5b      	ldr	r2, [pc, #364]	; (8011d0c <_ZN15Screen1ViewBaseC1Ev+0x1e64>)
 8011b9e:	21af      	movs	r1, #175	; 0xaf
 8011ba0:	485b      	ldr	r0, [pc, #364]	; (8011d10 <_ZN15Screen1ViewBaseC1Ev+0x1e68>)
 8011ba2:	f01a fda1 	bl	802c6e8 <__assert_func>
    }
 8011ba6:	bf00      	nop
        return texts->getText(typedTextId);
 8011ba8:	4b54      	ldr	r3, [pc, #336]	; (8011cfc <_ZN15Screen1ViewBaseC1Ev+0x1e54>)
 8011baa:	681a      	ldr	r2, [r3, #0]
 8011bac:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8011bb0:	889b      	ldrh	r3, [r3, #4]
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	4610      	mov	r0, r2
 8011bb6:	f001 fad9 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	bf00      	nop
 8011bbe:	4a50      	ldr	r2, [pc, #320]	; (8011d00 <_ZN15Screen1ViewBaseC1Ev+0x1e58>)
 8011bc0:	2120      	movs	r1, #32
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	f00c f97a 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011bc8:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7fc fe35 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    iat_value.setWildcard(iat_valueBuffer);
 8011bd2:	1d3b      	adds	r3, r7, #4
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	f503 62c2 	add.w	r2, r3, #1552	; 0x610
 8011bda:	1d3b      	adds	r3, r7, #4
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8011be2:	4619      	mov	r1, r3
 8011be4:	4610      	mov	r0, r2
 8011be6:	f7fe f82b 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_value.resizeToCurrentText();
 8011bea:	1d3b      	adds	r3, r7, #4
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f006 ff4e 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 8011bf8:	1d3b      	adds	r3, r7, #4
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	f503 64c2 	add.w	r4, r3, #1552	; 0x610
 8011c00:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8011c04:	2103      	movs	r1, #3
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7fd ff8c 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8011c0c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8011c10:	4619      	mov	r1, r3
 8011c12:	4620      	mov	r0, r4
 8011c14:	f006 ff5b 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011c18:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f7fc fe0d 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    iat_label.setXY(29, 196);
 8011c22:	1d3b      	adds	r3, r7, #4
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8011c2a:	22c4      	movs	r2, #196	; 0xc4
 8011c2c:	211d      	movs	r1, #29
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7fd fd6c 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    iat_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011c34:	1d3b      	adds	r3, r7, #4
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	f503 64ca 	add.w	r4, r3, #1616	; 0x650
 8011c3c:	23ff      	movs	r3, #255	; 0xff
 8011c3e:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
 8011c42:	23ff      	movs	r3, #255	; 0xff
 8011c44:	f887 33f2 	strb.w	r3, [r7, #1010]	; 0x3f2
 8011c48:	23ff      	movs	r3, #255	; 0xff
 8011c4a:	f887 33f1 	strb.w	r3, [r7, #1009]	; 0x3f1
 8011c4e:	f897 33f3 	ldrb.w	r3, [r7, #1011]	; 0x3f3
 8011c52:	041b      	lsls	r3, r3, #16
 8011c54:	461a      	mov	r2, r3
 8011c56:	f897 33f2 	ldrb.w	r3, [r7, #1010]	; 0x3f2
 8011c5a:	021b      	lsls	r3, r3, #8
 8011c5c:	431a      	orrs	r2, r3
 8011c5e:	f897 33f1 	ldrb.w	r3, [r7, #1009]	; 0x3f1
 8011c62:	4313      	orrs	r3, r2
 8011c64:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011c68:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8011c6c:	4611      	mov	r1, r2
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f7ee fc8a 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 8011c74:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	461a      	mov	r2, r3
 8011c7c:	f8c7 43f4 	str.w	r4, [r7, #1012]	; 0x3f4
 8011c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c84:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011c86:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8011c8a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011c8e:	6812      	ldr	r2, [r2, #0]
 8011c90:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011c92:	bf00      	nop
    iat_label.setLinespacing(0);
 8011c94:	1d3b      	adds	r3, r7, #4
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8011c9c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	f8a7 33fa 	strh.w	r3, [r7, #1018]	; 0x3fa
        linespace = space;
 8011ca6:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8011caa:	f8b7 23fa 	ldrh.w	r2, [r7, #1018]	; 0x3fa
 8011cae:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011cb0:	bf00      	nop
    Unicode::snprintf(iat_labelBuffer, IAT_LABEL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID59).getText());
 8011cb2:	1d3b      	adds	r3, r7, #4
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	f603 4464 	addw	r4, r3, #3172	; 0xc64
 8011cba:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8011cbe:	212d      	movs	r1, #45	; 0x2d
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f7fd ff2f 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8011cc6:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8011cca:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011cce:	4b0d      	ldr	r3, [pc, #52]	; (8011d04 <_ZN15Screen1ViewBaseC1Ev+0x1e5c>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d105      	bne.n	8011ce2 <_ZN15Screen1ViewBaseC1Ev+0x1e3a>
 8011cd6:	4b0c      	ldr	r3, [pc, #48]	; (8011d08 <_ZN15Screen1ViewBaseC1Ev+0x1e60>)
 8011cd8:	4a0c      	ldr	r2, [pc, #48]	; (8011d0c <_ZN15Screen1ViewBaseC1Ev+0x1e64>)
 8011cda:	21ae      	movs	r1, #174	; 0xae
 8011cdc:	480c      	ldr	r0, [pc, #48]	; (8011d10 <_ZN15Screen1ViewBaseC1Ev+0x1e68>)
 8011cde:	f01a fd03 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011ce2:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8011ce6:	889a      	ldrh	r2, [r3, #4]
 8011ce8:	4b0a      	ldr	r3, [pc, #40]	; (8011d14 <_ZN15Screen1ViewBaseC1Ev+0x1e6c>)
 8011cea:	881b      	ldrh	r3, [r3, #0]
 8011cec:	429a      	cmp	r2, r3
 8011cee:	d315      	bcc.n	8011d1c <_ZN15Screen1ViewBaseC1Ev+0x1e74>
 8011cf0:	4b09      	ldr	r3, [pc, #36]	; (8011d18 <_ZN15Screen1ViewBaseC1Ev+0x1e70>)
 8011cf2:	4a06      	ldr	r2, [pc, #24]	; (8011d0c <_ZN15Screen1ViewBaseC1Ev+0x1e64>)
 8011cf4:	21af      	movs	r1, #175	; 0xaf
 8011cf6:	4806      	ldr	r0, [pc, #24]	; (8011d10 <_ZN15Screen1ViewBaseC1Ev+0x1e68>)
 8011cf8:	f01a fcf6 	bl	802c6e8 <__assert_func>
 8011cfc:	2000682c 	.word	0x2000682c
 8011d00:	0802e948 	.word	0x0802e948
 8011d04:	20006820 	.word	0x20006820
 8011d08:	0802e83c 	.word	0x0802e83c
 8011d0c:	0802e880 	.word	0x0802e880
 8011d10:	0802e8b0 	.word	0x0802e8b0
 8011d14:	20006824 	.word	0x20006824
 8011d18:	0802e8f4 	.word	0x0802e8f4
    }
 8011d1c:	bf00      	nop
        return texts->getText(typedTextId);
 8011d1e:	4baa      	ldr	r3, [pc, #680]	; (8011fc8 <_ZN15Screen1ViewBaseC1Ev+0x2120>)
 8011d20:	681a      	ldr	r2, [r3, #0]
 8011d22:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8011d26:	889b      	ldrh	r3, [r3, #4]
 8011d28:	4619      	mov	r1, r3
 8011d2a:	4610      	mov	r0, r2
 8011d2c:	f001 fa1e 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8011d30:	4603      	mov	r3, r0
 8011d32:	bf00      	nop
 8011d34:	4aa5      	ldr	r2, [pc, #660]	; (8011fcc <_ZN15Screen1ViewBaseC1Ev+0x2124>)
 8011d36:	210a      	movs	r1, #10
 8011d38:	4620      	mov	r0, r4
 8011d3a:	f00c f8bf 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011d3e:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7fc fd7a 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    iat_label.setWildcard(iat_labelBuffer);
 8011d48:	1d3b      	adds	r3, r7, #4
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	f503 62ca 	add.w	r2, r3, #1616	; 0x650
 8011d50:	1d3b      	adds	r3, r7, #4
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	f603 4364 	addw	r3, r3, #3172	; 0xc64
 8011d58:	4619      	mov	r1, r3
 8011d5a:	4610      	mov	r0, r2
 8011d5c:	f7fd ff70 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_label.resizeToCurrentText();
 8011d60:	1d3b      	adds	r3, r7, #4
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f006 fe93 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
 8011d6e:	1d3b      	adds	r3, r7, #4
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	f503 64ca 	add.w	r4, r3, #1616	; 0x650
 8011d76:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8011d7a:	2105      	movs	r1, #5
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7fd fed1 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8011d82:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8011d86:	4619      	mov	r1, r3
 8011d88:	4620      	mov	r0, r4
 8011d8a:	f006 fea0 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011d8e:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8011d92:	4618      	mov	r0, r3
 8011d94:	f7fc fd52 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    iat_units.setXY(109, 196);
 8011d98:	1d3b      	adds	r3, r7, #4
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8011da0:	22c4      	movs	r2, #196	; 0xc4
 8011da2:	216d      	movs	r1, #109	; 0x6d
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7fd fcb1 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    iat_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011daa:	1d3b      	adds	r3, r7, #4
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	f503 64d2 	add.w	r4, r3, #1680	; 0x690
 8011db2:	23ff      	movs	r3, #255	; 0xff
 8011db4:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
 8011db8:	23ff      	movs	r3, #255	; 0xff
 8011dba:	f887 3406 	strb.w	r3, [r7, #1030]	; 0x406
 8011dbe:	23ff      	movs	r3, #255	; 0xff
 8011dc0:	f887 3405 	strb.w	r3, [r7, #1029]	; 0x405
 8011dc4:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8011dc8:	041b      	lsls	r3, r3, #16
 8011dca:	461a      	mov	r2, r3
 8011dcc:	f897 3406 	ldrb.w	r3, [r7, #1030]	; 0x406
 8011dd0:	021b      	lsls	r3, r3, #8
 8011dd2:	431a      	orrs	r2, r3
 8011dd4:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 8011dd8:	4313      	orrs	r3, r2
 8011dda:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011dde:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8011de2:	4611      	mov	r1, r2
 8011de4:	4618      	mov	r0, r3
 8011de6:	f7ee fbcf 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 8011dea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	461a      	mov	r2, r3
 8011df2:	f8c7 4408 	str.w	r4, [r7, #1032]	; 0x408
 8011df6:	f107 0320 	add.w	r3, r7, #32
 8011dfa:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011dfc:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8011e00:	f107 0220 	add.w	r2, r7, #32
 8011e04:	6812      	ldr	r2, [r2, #0]
 8011e06:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011e08:	bf00      	nop
    iat_units.setLinespacing(0);
 8011e0a:	1d3b      	adds	r3, r7, #4
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8011e12:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8011e16:	2300      	movs	r3, #0
 8011e18:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
        linespace = space;
 8011e1c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8011e20:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8011e24:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011e26:	bf00      	nop
    Unicode::snprintf(iat_unitsBuffer, IAT_UNITS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID58).getText());
 8011e28:	1d3b      	adds	r3, r7, #4
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	f603 4478 	addw	r4, r3, #3192	; 0xc78
 8011e30:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8011e34:	212c      	movs	r1, #44	; 0x2c
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7fd fe74 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8011e3c:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8011e40:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011e44:	4b62      	ldr	r3, [pc, #392]	; (8011fd0 <_ZN15Screen1ViewBaseC1Ev+0x2128>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d105      	bne.n	8011e58 <_ZN15Screen1ViewBaseC1Ev+0x1fb0>
 8011e4c:	4b61      	ldr	r3, [pc, #388]	; (8011fd4 <_ZN15Screen1ViewBaseC1Ev+0x212c>)
 8011e4e:	4a62      	ldr	r2, [pc, #392]	; (8011fd8 <_ZN15Screen1ViewBaseC1Ev+0x2130>)
 8011e50:	21ae      	movs	r1, #174	; 0xae
 8011e52:	4862      	ldr	r0, [pc, #392]	; (8011fdc <_ZN15Screen1ViewBaseC1Ev+0x2134>)
 8011e54:	f01a fc48 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011e58:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8011e5c:	889a      	ldrh	r2, [r3, #4]
 8011e5e:	4b60      	ldr	r3, [pc, #384]	; (8011fe0 <_ZN15Screen1ViewBaseC1Ev+0x2138>)
 8011e60:	881b      	ldrh	r3, [r3, #0]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d305      	bcc.n	8011e72 <_ZN15Screen1ViewBaseC1Ev+0x1fca>
 8011e66:	4b5f      	ldr	r3, [pc, #380]	; (8011fe4 <_ZN15Screen1ViewBaseC1Ev+0x213c>)
 8011e68:	4a5b      	ldr	r2, [pc, #364]	; (8011fd8 <_ZN15Screen1ViewBaseC1Ev+0x2130>)
 8011e6a:	21af      	movs	r1, #175	; 0xaf
 8011e6c:	485b      	ldr	r0, [pc, #364]	; (8011fdc <_ZN15Screen1ViewBaseC1Ev+0x2134>)
 8011e6e:	f01a fc3b 	bl	802c6e8 <__assert_func>
    }
 8011e72:	bf00      	nop
        return texts->getText(typedTextId);
 8011e74:	4b54      	ldr	r3, [pc, #336]	; (8011fc8 <_ZN15Screen1ViewBaseC1Ev+0x2120>)
 8011e76:	681a      	ldr	r2, [r3, #0]
 8011e78:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8011e7c:	889b      	ldrh	r3, [r3, #4]
 8011e7e:	4619      	mov	r1, r3
 8011e80:	4610      	mov	r0, r2
 8011e82:	f001 f973 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8011e86:	4603      	mov	r3, r0
 8011e88:	bf00      	nop
 8011e8a:	4a50      	ldr	r2, [pc, #320]	; (8011fcc <_ZN15Screen1ViewBaseC1Ev+0x2124>)
 8011e8c:	210a      	movs	r1, #10
 8011e8e:	4620      	mov	r0, r4
 8011e90:	f00c f814 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011e94:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7fc fccf 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    iat_units.setWildcard(iat_unitsBuffer);
 8011e9e:	1d3b      	adds	r3, r7, #4
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	f503 62d2 	add.w	r2, r3, #1680	; 0x690
 8011ea6:	1d3b      	adds	r3, r7, #4
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 8011eae:	4619      	mov	r1, r3
 8011eb0:	4610      	mov	r0, r2
 8011eb2:	f7fd fec5 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_units.resizeToCurrentText();
 8011eb6:	1d3b      	adds	r3, r7, #4
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f006 fde8 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_units.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));
 8011ec4:	1d3b      	adds	r3, r7, #4
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	f503 64d2 	add.w	r4, r3, #1680	; 0x690
 8011ecc:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8011ed0:	2104      	movs	r1, #4
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7fd fe26 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8011ed8:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8011edc:	4619      	mov	r1, r3
 8011ede:	4620      	mov	r0, r4
 8011ee0:	f006 fdf5 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011ee4:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f7fc fca7 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    oilp_value.setXY(25, 250);
 8011eee:	1d3b      	adds	r3, r7, #4
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8011ef6:	22fa      	movs	r2, #250	; 0xfa
 8011ef8:	2119      	movs	r1, #25
 8011efa:	4618      	mov	r0, r3
 8011efc:	f7fd fc06 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    oilp_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011f00:	1d3b      	adds	r3, r7, #4
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	f503 64da 	add.w	r4, r3, #1744	; 0x6d0
 8011f08:	23ff      	movs	r3, #255	; 0xff
 8011f0a:	f887 341b 	strb.w	r3, [r7, #1051]	; 0x41b
 8011f0e:	23ff      	movs	r3, #255	; 0xff
 8011f10:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
 8011f14:	23ff      	movs	r3, #255	; 0xff
 8011f16:	f887 3419 	strb.w	r3, [r7, #1049]	; 0x419
 8011f1a:	f897 341b 	ldrb.w	r3, [r7, #1051]	; 0x41b
 8011f1e:	041b      	lsls	r3, r3, #16
 8011f20:	461a      	mov	r2, r3
 8011f22:	f897 341a 	ldrb.w	r3, [r7, #1050]	; 0x41a
 8011f26:	021b      	lsls	r3, r3, #8
 8011f28:	431a      	orrs	r2, r3
 8011f2a:	f897 3419 	ldrb.w	r3, [r7, #1049]	; 0x419
 8011f2e:	4313      	orrs	r3, r2
 8011f30:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011f34:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8011f38:	4611      	mov	r1, r2
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7ee fb24 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 8011f40:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	461a      	mov	r2, r3
 8011f48:	f8c7 441c 	str.w	r4, [r7, #1052]	; 0x41c
 8011f4c:	f107 031c 	add.w	r3, r7, #28
 8011f50:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011f52:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8011f56:	f107 021c 	add.w	r2, r7, #28
 8011f5a:	6812      	ldr	r2, [r2, #0]
 8011f5c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011f5e:	bf00      	nop
    oilp_value.setLinespacing(0);
 8011f60:	1d3b      	adds	r3, r7, #4
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8011f68:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
        linespace = space;
 8011f72:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8011f76:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8011f7a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011f7c:	bf00      	nop
    Unicode::snprintf(oilp_valueBuffer, OILP_VALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID43).getText());
 8011f7e:	1d3b      	adds	r3, r7, #4
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	f603 448c 	addw	r4, r3, #3212	; 0xc8c
 8011f86:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8011f8a:	211d      	movs	r1, #29
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f7fd fdc9 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8011f92:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8011f96:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011f9a:	4b0d      	ldr	r3, [pc, #52]	; (8011fd0 <_ZN15Screen1ViewBaseC1Ev+0x2128>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d105      	bne.n	8011fae <_ZN15Screen1ViewBaseC1Ev+0x2106>
 8011fa2:	4b0c      	ldr	r3, [pc, #48]	; (8011fd4 <_ZN15Screen1ViewBaseC1Ev+0x212c>)
 8011fa4:	4a0c      	ldr	r2, [pc, #48]	; (8011fd8 <_ZN15Screen1ViewBaseC1Ev+0x2130>)
 8011fa6:	21ae      	movs	r1, #174	; 0xae
 8011fa8:	480c      	ldr	r0, [pc, #48]	; (8011fdc <_ZN15Screen1ViewBaseC1Ev+0x2134>)
 8011faa:	f01a fb9d 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011fae:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8011fb2:	889a      	ldrh	r2, [r3, #4]
 8011fb4:	4b0a      	ldr	r3, [pc, #40]	; (8011fe0 <_ZN15Screen1ViewBaseC1Ev+0x2138>)
 8011fb6:	881b      	ldrh	r3, [r3, #0]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d315      	bcc.n	8011fe8 <_ZN15Screen1ViewBaseC1Ev+0x2140>
 8011fbc:	4b09      	ldr	r3, [pc, #36]	; (8011fe4 <_ZN15Screen1ViewBaseC1Ev+0x213c>)
 8011fbe:	4a06      	ldr	r2, [pc, #24]	; (8011fd8 <_ZN15Screen1ViewBaseC1Ev+0x2130>)
 8011fc0:	21af      	movs	r1, #175	; 0xaf
 8011fc2:	4806      	ldr	r0, [pc, #24]	; (8011fdc <_ZN15Screen1ViewBaseC1Ev+0x2134>)
 8011fc4:	f01a fb90 	bl	802c6e8 <__assert_func>
 8011fc8:	2000682c 	.word	0x2000682c
 8011fcc:	0802e948 	.word	0x0802e948
 8011fd0:	20006820 	.word	0x20006820
 8011fd4:	0802e83c 	.word	0x0802e83c
 8011fd8:	0802e880 	.word	0x0802e880
 8011fdc:	0802e8b0 	.word	0x0802e8b0
 8011fe0:	20006824 	.word	0x20006824
 8011fe4:	0802e8f4 	.word	0x0802e8f4
    }
 8011fe8:	bf00      	nop
        return texts->getText(typedTextId);
 8011fea:	4bab      	ldr	r3, [pc, #684]	; (8012298 <_ZN15Screen1ViewBaseC1Ev+0x23f0>)
 8011fec:	681a      	ldr	r2, [r3, #0]
 8011fee:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8011ff2:	889b      	ldrh	r3, [r3, #4]
 8011ff4:	4619      	mov	r1, r3
 8011ff6:	4610      	mov	r0, r2
 8011ff8:	f001 f8b8 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	bf00      	nop
 8012000:	4aa6      	ldr	r2, [pc, #664]	; (801229c <_ZN15Screen1ViewBaseC1Ev+0x23f4>)
 8012002:	2120      	movs	r1, #32
 8012004:	4620      	mov	r0, r4
 8012006:	f00b ff59 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801200a:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801200e:	4618      	mov	r0, r3
 8012010:	f7fc fc14 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    oilp_value.setWildcard(oilp_valueBuffer);
 8012014:	1d3b      	adds	r3, r7, #4
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	f503 62da 	add.w	r2, r3, #1744	; 0x6d0
 801201c:	1d3b      	adds	r3, r7, #4
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	f603 438c 	addw	r3, r3, #3212	; 0xc8c
 8012024:	4619      	mov	r1, r3
 8012026:	4610      	mov	r0, r2
 8012028:	f7fd fe0a 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_value.resizeToCurrentText();
 801202c:	1d3b      	adds	r3, r7, #4
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8012034:	4618      	mov	r0, r3
 8012036:	f006 fd2d 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 801203a:	1d3b      	adds	r3, r7, #4
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	f503 64da 	add.w	r4, r3, #1744	; 0x6d0
 8012042:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8012046:	2106      	movs	r1, #6
 8012048:	4618      	mov	r0, r3
 801204a:	f7fd fd6b 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 801204e:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8012052:	4619      	mov	r1, r3
 8012054:	4620      	mov	r0, r4
 8012056:	f006 fd3a 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801205a:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801205e:	4618      	mov	r0, r3
 8012060:	f7fc fbec 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    oilp_label.setXY(28, 316);
 8012064:	1d3b      	adds	r3, r7, #4
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 801206c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8012070:	211c      	movs	r1, #28
 8012072:	4618      	mov	r0, r3
 8012074:	f7fd fb4a 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    oilp_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012078:	1d3b      	adds	r3, r7, #4
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	f503 64e2 	add.w	r4, r3, #1808	; 0x710
 8012080:	23ff      	movs	r3, #255	; 0xff
 8012082:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
 8012086:	23ff      	movs	r3, #255	; 0xff
 8012088:	f887 342e 	strb.w	r3, [r7, #1070]	; 0x42e
 801208c:	23ff      	movs	r3, #255	; 0xff
 801208e:	f887 342d 	strb.w	r3, [r7, #1069]	; 0x42d
 8012092:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8012096:	041b      	lsls	r3, r3, #16
 8012098:	461a      	mov	r2, r3
 801209a:	f897 342e 	ldrb.w	r3, [r7, #1070]	; 0x42e
 801209e:	021b      	lsls	r3, r3, #8
 80120a0:	431a      	orrs	r2, r3
 80120a2:	f897 342d 	ldrb.w	r3, [r7, #1069]	; 0x42d
 80120a6:	4313      	orrs	r3, r2
 80120a8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80120ac:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80120b0:	4611      	mov	r1, r2
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7ee fa68 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 80120b8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	461a      	mov	r2, r3
 80120c0:	f8c7 4430 	str.w	r4, [r7, #1072]	; 0x430
 80120c4:	f107 0318 	add.w	r3, r7, #24
 80120c8:	601a      	str	r2, [r3, #0]
        this->color = color;
 80120ca:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80120ce:	f107 0218 	add.w	r2, r7, #24
 80120d2:	6812      	ldr	r2, [r2, #0]
 80120d4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80120d6:	bf00      	nop
    oilp_label.setLinespacing(0);
 80120d8:	1d3b      	adds	r3, r7, #4
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 80120e0:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80120e4:	2300      	movs	r3, #0
 80120e6:	f8a7 3436 	strh.w	r3, [r7, #1078]	; 0x436
        linespace = space;
 80120ea:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80120ee:	f8b7 2436 	ldrh.w	r2, [r7, #1078]	; 0x436
 80120f2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80120f4:	bf00      	nop
    Unicode::snprintf(oilp_labelBuffer, OILP_LABEL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 80120f6:	1d3b      	adds	r3, r7, #4
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	f603 44cc 	addw	r4, r3, #3276	; 0xccc
 80120fe:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8012102:	212b      	movs	r1, #43	; 0x2b
 8012104:	4618      	mov	r0, r3
 8012106:	f7fd fd0d 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 801210a:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801210e:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012112:	4b63      	ldr	r3, [pc, #396]	; (80122a0 <_ZN15Screen1ViewBaseC1Ev+0x23f8>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d105      	bne.n	8012126 <_ZN15Screen1ViewBaseC1Ev+0x227e>
 801211a:	4b62      	ldr	r3, [pc, #392]	; (80122a4 <_ZN15Screen1ViewBaseC1Ev+0x23fc>)
 801211c:	4a62      	ldr	r2, [pc, #392]	; (80122a8 <_ZN15Screen1ViewBaseC1Ev+0x2400>)
 801211e:	21ae      	movs	r1, #174	; 0xae
 8012120:	4862      	ldr	r0, [pc, #392]	; (80122ac <_ZN15Screen1ViewBaseC1Ev+0x2404>)
 8012122:	f01a fae1 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012126:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801212a:	889a      	ldrh	r2, [r3, #4]
 801212c:	4b60      	ldr	r3, [pc, #384]	; (80122b0 <_ZN15Screen1ViewBaseC1Ev+0x2408>)
 801212e:	881b      	ldrh	r3, [r3, #0]
 8012130:	429a      	cmp	r2, r3
 8012132:	d305      	bcc.n	8012140 <_ZN15Screen1ViewBaseC1Ev+0x2298>
 8012134:	4b5f      	ldr	r3, [pc, #380]	; (80122b4 <_ZN15Screen1ViewBaseC1Ev+0x240c>)
 8012136:	4a5c      	ldr	r2, [pc, #368]	; (80122a8 <_ZN15Screen1ViewBaseC1Ev+0x2400>)
 8012138:	21af      	movs	r1, #175	; 0xaf
 801213a:	485c      	ldr	r0, [pc, #368]	; (80122ac <_ZN15Screen1ViewBaseC1Ev+0x2404>)
 801213c:	f01a fad4 	bl	802c6e8 <__assert_func>
    }
 8012140:	bf00      	nop
        return texts->getText(typedTextId);
 8012142:	4b55      	ldr	r3, [pc, #340]	; (8012298 <_ZN15Screen1ViewBaseC1Ev+0x23f0>)
 8012144:	681a      	ldr	r2, [r3, #0]
 8012146:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801214a:	889b      	ldrh	r3, [r3, #4]
 801214c:	4619      	mov	r1, r3
 801214e:	4610      	mov	r0, r2
 8012150:	f001 f80c 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8012154:	4603      	mov	r3, r0
 8012156:	bf00      	nop
 8012158:	4a50      	ldr	r2, [pc, #320]	; (801229c <_ZN15Screen1ViewBaseC1Ev+0x23f4>)
 801215a:	210a      	movs	r1, #10
 801215c:	4620      	mov	r0, r4
 801215e:	f00b fead 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012162:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8012166:	4618      	mov	r0, r3
 8012168:	f7fc fb68 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    oilp_label.setWildcard(oilp_labelBuffer);
 801216c:	1d3b      	adds	r3, r7, #4
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	f503 62e2 	add.w	r2, r3, #1808	; 0x710
 8012174:	1d3b      	adds	r3, r7, #4
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	f603 43cc 	addw	r3, r3, #3276	; 0xccc
 801217c:	4619      	mov	r1, r3
 801217e:	4610      	mov	r0, r2
 8012180:	f7fd fd5e 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_label.resizeToCurrentText();
 8012184:	1d3b      	adds	r3, r7, #4
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 801218c:	4618      	mov	r0, r3
 801218e:	f006 fc81 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8012192:	1d3b      	adds	r3, r7, #4
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	f503 64e2 	add.w	r4, r3, #1808	; 0x710
 801219a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801219e:	2108      	movs	r1, #8
 80121a0:	4618      	mov	r0, r3
 80121a2:	f7fd fcbf 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 80121a6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80121aa:	4619      	mov	r1, r3
 80121ac:	4620      	mov	r0, r4
 80121ae:	f006 fc8e 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80121b2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80121b6:	4618      	mov	r0, r3
 80121b8:	f7fc fb40 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    oilp_units.setXY(118, 317);
 80121bc:	1d3b      	adds	r3, r7, #4
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 80121c4:	f240 123d 	movw	r2, #317	; 0x13d
 80121c8:	2176      	movs	r1, #118	; 0x76
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7fd fa9e 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    oilp_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80121d0:	1d3b      	adds	r3, r7, #4
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	f503 64ea 	add.w	r4, r3, #1872	; 0x750
 80121d8:	23ff      	movs	r3, #255	; 0xff
 80121da:	f887 3443 	strb.w	r3, [r7, #1091]	; 0x443
 80121de:	23ff      	movs	r3, #255	; 0xff
 80121e0:	f887 3442 	strb.w	r3, [r7, #1090]	; 0x442
 80121e4:	23ff      	movs	r3, #255	; 0xff
 80121e6:	f887 3441 	strb.w	r3, [r7, #1089]	; 0x441
 80121ea:	f897 3443 	ldrb.w	r3, [r7, #1091]	; 0x443
 80121ee:	041b      	lsls	r3, r3, #16
 80121f0:	461a      	mov	r2, r3
 80121f2:	f897 3442 	ldrb.w	r3, [r7, #1090]	; 0x442
 80121f6:	021b      	lsls	r3, r3, #8
 80121f8:	431a      	orrs	r2, r3
 80121fa:	f897 3441 	ldrb.w	r3, [r7, #1089]	; 0x441
 80121fe:	4313      	orrs	r3, r2
 8012200:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012204:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8012208:	4611      	mov	r1, r2
 801220a:	4618      	mov	r0, r3
 801220c:	f7ee f9bc 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 8012210:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	461a      	mov	r2, r3
 8012218:	f8c7 4444 	str.w	r4, [r7, #1092]	; 0x444
 801221c:	f107 0314 	add.w	r3, r7, #20
 8012220:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012222:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8012226:	f107 0214 	add.w	r2, r7, #20
 801222a:	6812      	ldr	r2, [r2, #0]
 801222c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801222e:	bf00      	nop
    oilp_units.setLinespacing(0);
 8012230:	1d3b      	adds	r3, r7, #4
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8012238:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 801223c:	2300      	movs	r3, #0
 801223e:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        linespace = space;
 8012242:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8012246:	f8b7 244a 	ldrh.w	r2, [r7, #1098]	; 0x44a
 801224a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801224c:	bf00      	nop
    Unicode::snprintf(oilp_unitsBuffer, OILP_UNITS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 801224e:	1d3b      	adds	r3, r7, #4
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	f503 644e 	add.w	r4, r3, #3296	; 0xce0
 8012256:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801225a:	212a      	movs	r1, #42	; 0x2a
 801225c:	4618      	mov	r0, r3
 801225e:	f7fd fc61 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8012262:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8012266:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801226a:	4b0d      	ldr	r3, [pc, #52]	; (80122a0 <_ZN15Screen1ViewBaseC1Ev+0x23f8>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d105      	bne.n	801227e <_ZN15Screen1ViewBaseC1Ev+0x23d6>
 8012272:	4b0c      	ldr	r3, [pc, #48]	; (80122a4 <_ZN15Screen1ViewBaseC1Ev+0x23fc>)
 8012274:	4a0c      	ldr	r2, [pc, #48]	; (80122a8 <_ZN15Screen1ViewBaseC1Ev+0x2400>)
 8012276:	21ae      	movs	r1, #174	; 0xae
 8012278:	480c      	ldr	r0, [pc, #48]	; (80122ac <_ZN15Screen1ViewBaseC1Ev+0x2404>)
 801227a:	f01a fa35 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801227e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8012282:	889a      	ldrh	r2, [r3, #4]
 8012284:	4b0a      	ldr	r3, [pc, #40]	; (80122b0 <_ZN15Screen1ViewBaseC1Ev+0x2408>)
 8012286:	881b      	ldrh	r3, [r3, #0]
 8012288:	429a      	cmp	r2, r3
 801228a:	d315      	bcc.n	80122b8 <_ZN15Screen1ViewBaseC1Ev+0x2410>
 801228c:	4b09      	ldr	r3, [pc, #36]	; (80122b4 <_ZN15Screen1ViewBaseC1Ev+0x240c>)
 801228e:	4a06      	ldr	r2, [pc, #24]	; (80122a8 <_ZN15Screen1ViewBaseC1Ev+0x2400>)
 8012290:	21af      	movs	r1, #175	; 0xaf
 8012292:	4806      	ldr	r0, [pc, #24]	; (80122ac <_ZN15Screen1ViewBaseC1Ev+0x2404>)
 8012294:	f01a fa28 	bl	802c6e8 <__assert_func>
 8012298:	2000682c 	.word	0x2000682c
 801229c:	0802e948 	.word	0x0802e948
 80122a0:	20006820 	.word	0x20006820
 80122a4:	0802e83c 	.word	0x0802e83c
 80122a8:	0802e880 	.word	0x0802e880
 80122ac:	0802e8b0 	.word	0x0802e8b0
 80122b0:	20006824 	.word	0x20006824
 80122b4:	0802e8f4 	.word	0x0802e8f4
    }
 80122b8:	bf00      	nop
        return texts->getText(typedTextId);
 80122ba:	4bab      	ldr	r3, [pc, #684]	; (8012568 <_ZN15Screen1ViewBaseC1Ev+0x26c0>)
 80122bc:	681a      	ldr	r2, [r3, #0]
 80122be:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80122c2:	889b      	ldrh	r3, [r3, #4]
 80122c4:	4619      	mov	r1, r3
 80122c6:	4610      	mov	r0, r2
 80122c8:	f000 ff50 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 80122cc:	4603      	mov	r3, r0
 80122ce:	bf00      	nop
 80122d0:	4aa6      	ldr	r2, [pc, #664]	; (801256c <_ZN15Screen1ViewBaseC1Ev+0x26c4>)
 80122d2:	210a      	movs	r1, #10
 80122d4:	4620      	mov	r0, r4
 80122d6:	f00b fdf1 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80122da:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80122de:	4618      	mov	r0, r3
 80122e0:	f7fc faac 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    oilp_units.setWildcard(oilp_unitsBuffer);
 80122e4:	1d3b      	adds	r3, r7, #4
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	f503 62ea 	add.w	r2, r3, #1872	; 0x750
 80122ec:	1d3b      	adds	r3, r7, #4
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	f503 634e 	add.w	r3, r3, #3296	; 0xce0
 80122f4:	4619      	mov	r1, r3
 80122f6:	4610      	mov	r0, r2
 80122f8:	f7fd fca2 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_units.resizeToCurrentText();
 80122fc:	1d3b      	adds	r3, r7, #4
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8012304:	4618      	mov	r0, r3
 8012306:	f006 fbc5 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_units.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 801230a:	1d3b      	adds	r3, r7, #4
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	f503 64ea 	add.w	r4, r3, #1872	; 0x750
 8012312:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8012316:	2107      	movs	r1, #7
 8012318:	4618      	mov	r0, r3
 801231a:	f7fd fc03 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 801231e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8012322:	4619      	mov	r1, r3
 8012324:	4620      	mov	r0, r4
 8012326:	f006 fbd2 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801232a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801232e:	4618      	mov	r0, r3
 8012330:	f7fc fa84 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_value.setXY(25, 368);
 8012334:	1d3b      	adds	r3, r7, #4
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 801233c:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012340:	2119      	movs	r1, #25
 8012342:	4618      	mov	r0, r3
 8012344:	f7fd f9e2 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012348:	1d3b      	adds	r3, r7, #4
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	f503 64f2 	add.w	r4, r3, #1936	; 0x790
 8012350:	23ff      	movs	r3, #255	; 0xff
 8012352:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 8012356:	23ff      	movs	r3, #255	; 0xff
 8012358:	f887 3456 	strb.w	r3, [r7, #1110]	; 0x456
 801235c:	23ff      	movs	r3, #255	; 0xff
 801235e:	f887 3455 	strb.w	r3, [r7, #1109]	; 0x455
 8012362:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8012366:	041b      	lsls	r3, r3, #16
 8012368:	461a      	mov	r2, r3
 801236a:	f897 3456 	ldrb.w	r3, [r7, #1110]	; 0x456
 801236e:	021b      	lsls	r3, r3, #8
 8012370:	431a      	orrs	r2, r3
 8012372:	f897 3455 	ldrb.w	r3, [r7, #1109]	; 0x455
 8012376:	4313      	orrs	r3, r2
 8012378:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801237c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012380:	4611      	mov	r1, r2
 8012382:	4618      	mov	r0, r3
 8012384:	f7ee f900 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 8012388:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	461a      	mov	r2, r3
 8012390:	f8c7 4458 	str.w	r4, [r7, #1112]	; 0x458
 8012394:	f107 0310 	add.w	r3, r7, #16
 8012398:	601a      	str	r2, [r3, #0]
        this->color = color;
 801239a:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 801239e:	f107 0210 	add.w	r2, r7, #16
 80123a2:	6812      	ldr	r2, [r2, #0]
 80123a4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80123a6:	bf00      	nop
    fuelp_value.setLinespacing(0);
 80123a8:	1d3b      	adds	r3, r7, #4
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 80123b0:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 80123b4:	2300      	movs	r3, #0
 80123b6:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
        linespace = space;
 80123ba:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80123be:	f8b7 245e 	ldrh.w	r2, [r7, #1118]	; 0x45e
 80123c2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80123c4:	bf00      	nop
    Unicode::snprintf(fuelp_valueBuffer, FUELP_VALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID44).getText());
 80123c6:	1d3b      	adds	r3, r7, #4
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	f603 44f4 	addw	r4, r3, #3316	; 0xcf4
 80123ce:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80123d2:	211e      	movs	r1, #30
 80123d4:	4618      	mov	r0, r3
 80123d6:	f7fd fba5 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 80123da:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80123de:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80123e2:	4b63      	ldr	r3, [pc, #396]	; (8012570 <_ZN15Screen1ViewBaseC1Ev+0x26c8>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d105      	bne.n	80123f6 <_ZN15Screen1ViewBaseC1Ev+0x254e>
 80123ea:	4b62      	ldr	r3, [pc, #392]	; (8012574 <_ZN15Screen1ViewBaseC1Ev+0x26cc>)
 80123ec:	4a62      	ldr	r2, [pc, #392]	; (8012578 <_ZN15Screen1ViewBaseC1Ev+0x26d0>)
 80123ee:	21ae      	movs	r1, #174	; 0xae
 80123f0:	4862      	ldr	r0, [pc, #392]	; (801257c <_ZN15Screen1ViewBaseC1Ev+0x26d4>)
 80123f2:	f01a f979 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80123f6:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80123fa:	889a      	ldrh	r2, [r3, #4]
 80123fc:	4b60      	ldr	r3, [pc, #384]	; (8012580 <_ZN15Screen1ViewBaseC1Ev+0x26d8>)
 80123fe:	881b      	ldrh	r3, [r3, #0]
 8012400:	429a      	cmp	r2, r3
 8012402:	d305      	bcc.n	8012410 <_ZN15Screen1ViewBaseC1Ev+0x2568>
 8012404:	4b5f      	ldr	r3, [pc, #380]	; (8012584 <_ZN15Screen1ViewBaseC1Ev+0x26dc>)
 8012406:	4a5c      	ldr	r2, [pc, #368]	; (8012578 <_ZN15Screen1ViewBaseC1Ev+0x26d0>)
 8012408:	21af      	movs	r1, #175	; 0xaf
 801240a:	485c      	ldr	r0, [pc, #368]	; (801257c <_ZN15Screen1ViewBaseC1Ev+0x26d4>)
 801240c:	f01a f96c 	bl	802c6e8 <__assert_func>
    }
 8012410:	bf00      	nop
        return texts->getText(typedTextId);
 8012412:	4b55      	ldr	r3, [pc, #340]	; (8012568 <_ZN15Screen1ViewBaseC1Ev+0x26c0>)
 8012414:	681a      	ldr	r2, [r3, #0]
 8012416:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801241a:	889b      	ldrh	r3, [r3, #4]
 801241c:	4619      	mov	r1, r3
 801241e:	4610      	mov	r0, r2
 8012420:	f000 fea4 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8012424:	4603      	mov	r3, r0
 8012426:	bf00      	nop
 8012428:	4a50      	ldr	r2, [pc, #320]	; (801256c <_ZN15Screen1ViewBaseC1Ev+0x26c4>)
 801242a:	2120      	movs	r1, #32
 801242c:	4620      	mov	r0, r4
 801242e:	f00b fd45 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012432:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8012436:	4618      	mov	r0, r3
 8012438:	f7fc fa00 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_value.setWildcard(fuelp_valueBuffer);
 801243c:	1d3b      	adds	r3, r7, #4
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	f503 62f2 	add.w	r2, r3, #1936	; 0x790
 8012444:	1d3b      	adds	r3, r7, #4
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	f603 43f4 	addw	r3, r3, #3316	; 0xcf4
 801244c:	4619      	mov	r1, r3
 801244e:	4610      	mov	r0, r2
 8012450:	f7fd fbf6 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_value.resizeToCurrentText();
 8012454:	1d3b      	adds	r3, r7, #4
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 801245c:	4618      	mov	r0, r3
 801245e:	f006 fb19 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_value.setTypedText(touchgfx::TypedText(T_SINGLEUSEID10));
 8012462:	1d3b      	adds	r3, r7, #4
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	f503 64f2 	add.w	r4, r3, #1936	; 0x790
 801246a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801246e:	2109      	movs	r1, #9
 8012470:	4618      	mov	r0, r3
 8012472:	f7fd fb57 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8012476:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801247a:	4619      	mov	r1, r3
 801247c:	4620      	mov	r0, r4
 801247e:	f006 fb26 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012482:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8012486:	4618      	mov	r0, r3
 8012488:	f7fc f9d8 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_label.setXY(28, 437);
 801248c:	1d3b      	adds	r3, r7, #4
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8012494:	f240 12b5 	movw	r2, #437	; 0x1b5
 8012498:	211c      	movs	r1, #28
 801249a:	4618      	mov	r0, r3
 801249c:	f7fd f936 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80124a0:	1d3b      	adds	r3, r7, #4
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 80124a8:	23ff      	movs	r3, #255	; 0xff
 80124aa:	f887 346b 	strb.w	r3, [r7, #1131]	; 0x46b
 80124ae:	23ff      	movs	r3, #255	; 0xff
 80124b0:	f887 346a 	strb.w	r3, [r7, #1130]	; 0x46a
 80124b4:	23ff      	movs	r3, #255	; 0xff
 80124b6:	f887 3469 	strb.w	r3, [r7, #1129]	; 0x469
 80124ba:	f897 346b 	ldrb.w	r3, [r7, #1131]	; 0x46b
 80124be:	041b      	lsls	r3, r3, #16
 80124c0:	461a      	mov	r2, r3
 80124c2:	f897 346a 	ldrb.w	r3, [r7, #1130]	; 0x46a
 80124c6:	021b      	lsls	r3, r3, #8
 80124c8:	431a      	orrs	r2, r3
 80124ca:	f897 3469 	ldrb.w	r3, [r7, #1129]	; 0x469
 80124ce:	4313      	orrs	r3, r2
 80124d0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80124d4:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80124d8:	4611      	mov	r1, r2
 80124da:	4618      	mov	r0, r3
 80124dc:	f7ee f854 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 80124e0:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	461a      	mov	r2, r3
 80124e8:	f8c7 446c 	str.w	r4, [r7, #1132]	; 0x46c
 80124ec:	f107 030c 	add.w	r3, r7, #12
 80124f0:	601a      	str	r2, [r3, #0]
        this->color = color;
 80124f2:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 80124f6:	f107 020c 	add.w	r2, r7, #12
 80124fa:	6812      	ldr	r2, [r2, #0]
 80124fc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80124fe:	bf00      	nop
    fuelp_label.setLinespacing(0);
 8012500:	1d3b      	adds	r3, r7, #4
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8012508:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 801250c:	2300      	movs	r3, #0
 801250e:	f8a7 3472 	strh.w	r3, [r7, #1138]	; 0x472
        linespace = space;
 8012512:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012516:	f8b7 2472 	ldrh.w	r2, [r7, #1138]	; 0x472
 801251a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801251c:	bf00      	nop
    Unicode::snprintf(fuelp_labelBuffer, FUELP_LABEL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID55).getText());
 801251e:	1d3b      	adds	r3, r7, #4
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	f603 5434 	addw	r4, r3, #3380	; 0xd34
 8012526:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801252a:	2129      	movs	r1, #41	; 0x29
 801252c:	4618      	mov	r0, r3
 801252e:	f7fd faf9 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8012532:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8012536:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801253a:	4b0d      	ldr	r3, [pc, #52]	; (8012570 <_ZN15Screen1ViewBaseC1Ev+0x26c8>)
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d105      	bne.n	801254e <_ZN15Screen1ViewBaseC1Ev+0x26a6>
 8012542:	4b0c      	ldr	r3, [pc, #48]	; (8012574 <_ZN15Screen1ViewBaseC1Ev+0x26cc>)
 8012544:	4a0c      	ldr	r2, [pc, #48]	; (8012578 <_ZN15Screen1ViewBaseC1Ev+0x26d0>)
 8012546:	21ae      	movs	r1, #174	; 0xae
 8012548:	480c      	ldr	r0, [pc, #48]	; (801257c <_ZN15Screen1ViewBaseC1Ev+0x26d4>)
 801254a:	f01a f8cd 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801254e:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8012552:	889a      	ldrh	r2, [r3, #4]
 8012554:	4b0a      	ldr	r3, [pc, #40]	; (8012580 <_ZN15Screen1ViewBaseC1Ev+0x26d8>)
 8012556:	881b      	ldrh	r3, [r3, #0]
 8012558:	429a      	cmp	r2, r3
 801255a:	d315      	bcc.n	8012588 <_ZN15Screen1ViewBaseC1Ev+0x26e0>
 801255c:	4b09      	ldr	r3, [pc, #36]	; (8012584 <_ZN15Screen1ViewBaseC1Ev+0x26dc>)
 801255e:	4a06      	ldr	r2, [pc, #24]	; (8012578 <_ZN15Screen1ViewBaseC1Ev+0x26d0>)
 8012560:	21af      	movs	r1, #175	; 0xaf
 8012562:	4806      	ldr	r0, [pc, #24]	; (801257c <_ZN15Screen1ViewBaseC1Ev+0x26d4>)
 8012564:	f01a f8c0 	bl	802c6e8 <__assert_func>
 8012568:	2000682c 	.word	0x2000682c
 801256c:	0802e948 	.word	0x0802e948
 8012570:	20006820 	.word	0x20006820
 8012574:	0802e83c 	.word	0x0802e83c
 8012578:	0802e880 	.word	0x0802e880
 801257c:	0802e8b0 	.word	0x0802e8b0
 8012580:	20006824 	.word	0x20006824
 8012584:	0802e8f4 	.word	0x0802e8f4
    }
 8012588:	bf00      	nop
        return texts->getText(typedTextId);
 801258a:	4b55      	ldr	r3, [pc, #340]	; (80126e0 <_ZN15Screen1ViewBaseC1Ev+0x2838>)
 801258c:	681a      	ldr	r2, [r3, #0]
 801258e:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8012592:	889b      	ldrh	r3, [r3, #4]
 8012594:	4619      	mov	r1, r3
 8012596:	4610      	mov	r0, r2
 8012598:	f000 fde8 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 801259c:	4603      	mov	r3, r0
 801259e:	bf00      	nop
 80125a0:	4a50      	ldr	r2, [pc, #320]	; (80126e4 <_ZN15Screen1ViewBaseC1Ev+0x283c>)
 80125a2:	210a      	movs	r1, #10
 80125a4:	4620      	mov	r0, r4
 80125a6:	f00b fc89 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80125aa:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80125ae:	4618      	mov	r0, r3
 80125b0:	f7fc f944 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_label.setWildcard(fuelp_labelBuffer);
 80125b4:	1d3b      	adds	r3, r7, #4
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80125bc:	1d3b      	adds	r3, r7, #4
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	f603 5334 	addw	r3, r3, #3380	; 0xd34
 80125c4:	4619      	mov	r1, r3
 80125c6:	4610      	mov	r0, r2
 80125c8:	f7fd fb3a 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_label.resizeToCurrentText();
 80125cc:	1d3b      	adds	r3, r7, #4
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80125d4:	4618      	mov	r0, r3
 80125d6:	f006 fa5d 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_label.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 80125da:	1d3b      	adds	r3, r7, #4
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 80125e2:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80125e6:	210b      	movs	r1, #11
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7fd fa9b 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 80125ee:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80125f2:	4619      	mov	r1, r3
 80125f4:	4620      	mov	r0, r4
 80125f6:	f006 fa6a 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80125fa:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80125fe:	4618      	mov	r0, r3
 8012600:	f7fc f91c 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_units.setXY(192, 437);
 8012604:	1d3b      	adds	r3, r7, #4
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801260c:	f240 12b5 	movw	r2, #437	; 0x1b5
 8012610:	21c0      	movs	r1, #192	; 0xc0
 8012612:	4618      	mov	r0, r3
 8012614:	f7fd f87a 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012618:	1d3b      	adds	r3, r7, #4
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	f503 6401 	add.w	r4, r3, #2064	; 0x810
 8012620:	23ff      	movs	r3, #255	; 0xff
 8012622:	f887 347f 	strb.w	r3, [r7, #1151]	; 0x47f
 8012626:	23ff      	movs	r3, #255	; 0xff
 8012628:	f887 347e 	strb.w	r3, [r7, #1150]	; 0x47e
 801262c:	23ff      	movs	r3, #255	; 0xff
 801262e:	f887 347d 	strb.w	r3, [r7, #1149]	; 0x47d
 8012632:	f897 347f 	ldrb.w	r3, [r7, #1151]	; 0x47f
 8012636:	041b      	lsls	r3, r3, #16
 8012638:	461a      	mov	r2, r3
 801263a:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 801263e:	021b      	lsls	r3, r3, #8
 8012640:	431a      	orrs	r2, r3
 8012642:	f897 347d 	ldrb.w	r3, [r7, #1149]	; 0x47d
 8012646:	4313      	orrs	r3, r2
 8012648:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801264c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8012650:	4611      	mov	r1, r2
 8012652:	4618      	mov	r0, r3
 8012654:	f7ed ff98 	bl	8000588 <_ZN8touchgfx9colortypeC1Em>
 8012658:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	461a      	mov	r2, r3
 8012660:	f8c7 4480 	str.w	r4, [r7, #1152]	; 0x480
 8012664:	f107 0308 	add.w	r3, r7, #8
 8012668:	601a      	str	r2, [r3, #0]
        this->color = color;
 801266a:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 801266e:	f107 0208 	add.w	r2, r7, #8
 8012672:	6812      	ldr	r2, [r2, #0]
 8012674:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012676:	bf00      	nop
    fuelp_units.setLinespacing(0);
 8012678:	1d3b      	adds	r3, r7, #4
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8012680:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 8012684:	2300      	movs	r3, #0
 8012686:	f8a7 3486 	strh.w	r3, [r7, #1158]	; 0x486
        linespace = space;
 801268a:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 801268e:	f8b7 2486 	ldrh.w	r2, [r7, #1158]	; 0x486
 8012692:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012694:	bf00      	nop
    Unicode::snprintf(fuelp_unitsBuffer, FUELP_UNITS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
 8012696:	1d3b      	adds	r3, r7, #4
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	f603 5448 	addw	r4, r3, #3400	; 0xd48
 801269e:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80126a2:	2128      	movs	r1, #40	; 0x28
 80126a4:	4618      	mov	r0, r3
 80126a6:	f7fd fa3d 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 80126aa:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80126ae:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80126b2:	4b0d      	ldr	r3, [pc, #52]	; (80126e8 <_ZN15Screen1ViewBaseC1Ev+0x2840>)
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d105      	bne.n	80126c6 <_ZN15Screen1ViewBaseC1Ev+0x281e>
 80126ba:	4b0c      	ldr	r3, [pc, #48]	; (80126ec <_ZN15Screen1ViewBaseC1Ev+0x2844>)
 80126bc:	4a0c      	ldr	r2, [pc, #48]	; (80126f0 <_ZN15Screen1ViewBaseC1Ev+0x2848>)
 80126be:	21ae      	movs	r1, #174	; 0xae
 80126c0:	480c      	ldr	r0, [pc, #48]	; (80126f4 <_ZN15Screen1ViewBaseC1Ev+0x284c>)
 80126c2:	f01a f811 	bl	802c6e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80126c6:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80126ca:	889a      	ldrh	r2, [r3, #4]
 80126cc:	4b0a      	ldr	r3, [pc, #40]	; (80126f8 <_ZN15Screen1ViewBaseC1Ev+0x2850>)
 80126ce:	881b      	ldrh	r3, [r3, #0]
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d315      	bcc.n	8012700 <_ZN15Screen1ViewBaseC1Ev+0x2858>
 80126d4:	4b09      	ldr	r3, [pc, #36]	; (80126fc <_ZN15Screen1ViewBaseC1Ev+0x2854>)
 80126d6:	4a06      	ldr	r2, [pc, #24]	; (80126f0 <_ZN15Screen1ViewBaseC1Ev+0x2848>)
 80126d8:	21af      	movs	r1, #175	; 0xaf
 80126da:	4806      	ldr	r0, [pc, #24]	; (80126f4 <_ZN15Screen1ViewBaseC1Ev+0x284c>)
 80126dc:	f01a f804 	bl	802c6e8 <__assert_func>
 80126e0:	2000682c 	.word	0x2000682c
 80126e4:	0802e948 	.word	0x0802e948
 80126e8:	20006820 	.word	0x20006820
 80126ec:	0802e83c 	.word	0x0802e83c
 80126f0:	0802e880 	.word	0x0802e880
 80126f4:	0802e8b0 	.word	0x0802e8b0
 80126f8:	20006824 	.word	0x20006824
 80126fc:	0802e8f4 	.word	0x0802e8f4
    }
 8012700:	bf00      	nop
        return texts->getText(typedTextId);
 8012702:	4bd8      	ldr	r3, [pc, #864]	; (8012a64 <_ZN15Screen1ViewBaseC1Ev+0x2bbc>)
 8012704:	681a      	ldr	r2, [r3, #0]
 8012706:	f507 730d 	add.w	r3, r7, #564	; 0x234
 801270a:	889b      	ldrh	r3, [r3, #4]
 801270c:	4619      	mov	r1, r3
 801270e:	4610      	mov	r0, r2
 8012710:	f000 fd2c 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8012714:	4603      	mov	r3, r0
 8012716:	bf00      	nop
 8012718:	4ad3      	ldr	r2, [pc, #844]	; (8012a68 <_ZN15Screen1ViewBaseC1Ev+0x2bc0>)
 801271a:	210a      	movs	r1, #10
 801271c:	4620      	mov	r0, r4
 801271e:	f00b fbcd 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012722:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8012726:	4618      	mov	r0, r3
 8012728:	f7fc f888 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_units.setWildcard(fuelp_unitsBuffer);
 801272c:	1d3b      	adds	r3, r7, #4
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 8012734:	1d3b      	adds	r3, r7, #4
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	f603 5348 	addw	r3, r3, #3400	; 0xd48
 801273c:	4619      	mov	r1, r3
 801273e:	4610      	mov	r0, r2
 8012740:	f7fd fa7e 	bl	800fc40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_units.resizeToCurrentText();
 8012744:	1d3b      	adds	r3, r7, #4
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801274c:	4618      	mov	r0, r3
 801274e:	f006 f9a1 	bl	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_units.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8012752:	1d3b      	adds	r3, r7, #4
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	f503 6401 	add.w	r4, r3, #2064	; 0x810
 801275a:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801275e:	210a      	movs	r1, #10
 8012760:	4618      	mov	r0, r3
 8012762:	f7fd f9df 	bl	800fb24 <_ZN8touchgfx9TypedTextC1Et>
 8012766:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801276a:	4619      	mov	r1, r3
 801276c:	4620      	mov	r0, r4
 801276e:	f006 f9ae 	bl	8018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012772:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8012776:	4618      	mov	r0, r3
 8012778:	f7fc f860 	bl	800e83c <_ZN8touchgfx9TypedTextD1Ev>

    gauge1.setPosition(173, 0, 480, 480);
 801277c:	1d3b      	adds	r3, r7, #4
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	f503 6005 	add.w	r0, r3, #2128	; 0x850
 8012784:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012788:	9300      	str	r3, [sp, #0]
 801278a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801278e:	2200      	movs	r2, #0
 8012790:	21ad      	movs	r1, #173	; 0xad
 8012792:	f7fc ff7c 	bl	800f68e <_ZN8touchgfx8Drawable11setPositionEssss>
    gauge1.setCenter(240, 236);
 8012796:	1d3b      	adds	r3, r7, #4
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 801279e:	22ec      	movs	r2, #236	; 0xec
 80127a0:	21f0      	movs	r1, #240	; 0xf0
 80127a2:	4618      	mov	r0, r3
 80127a4:	f006 fb33 	bl	8018e0e <_ZN8touchgfx5Gauge9setCenterEii>
    gauge1.setStartEndAngle(0, 240);
 80127a8:	1d3b      	adds	r3, r7, #4
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80127b0:	22f0      	movs	r2, #240	; 0xf0
 80127b2:	2100      	movs	r1, #0
 80127b4:	4618      	mov	r0, r3
 80127b6:	f006 fbaf 	bl	8018f18 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gauge1.setRange(0, 8000);
 80127ba:	1d3b      	adds	r3, r7, #4
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	f503 6005 	add.w	r0, r3, #2128	; 0x850
 80127c2:	2300      	movs	r3, #0
 80127c4:	9300      	str	r3, [sp, #0]
 80127c6:	2300      	movs	r3, #0
 80127c8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80127cc:	2100      	movs	r1, #0
 80127ce:	f003 fa3d 	bl	8015c4c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge1.setValue(0);
 80127d2:	1d3b      	adds	r3, r7, #4
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80127da:	2100      	movs	r1, #0
 80127dc:	4618      	mov	r0, r3
 80127de:	f006 fb45 	bl	8018e6c <_ZN8touchgfx5Gauge8setValueEi>
    gauge1.setNeedle(BITMAP_NEEDEL_ID, 13, 13);
 80127e2:	1d3b      	adds	r3, r7, #4
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	f503 6005 	add.w	r0, r3, #2128	; 0x850
 80127ea:	230d      	movs	r3, #13
 80127ec:	220d      	movs	r2, #13
 80127ee:	210a      	movs	r1, #10
 80127f0:	f006 faf8 	bl	8018de4 <_ZN8touchgfx5Gauge9setNeedleEtss>
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 80127f4:	1d3b      	adds	r3, r7, #4
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80127fc:	2101      	movs	r1, #1
 80127fe:	4618      	mov	r0, r3
 8012800:	f006 fa92 	bl	8018d28 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::NEAREST_NEIGHBOR);
 8012804:	1d3b      	adds	r3, r7, #4
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 801280c:	2100      	movs	r1, #0
 801280e:	4618      	mov	r0, r3
 8012810:	f006 fa8d 	bl	8018d2e <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>

    image2.setXY(523, 199);
 8012814:	1d3b      	adds	r3, r7, #4
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	f503 631f 	add.w	r3, r3, #2544	; 0x9f0
 801281c:	22c7      	movs	r2, #199	; 0xc7
 801281e:	f240 210b 	movw	r1, #523	; 0x20b
 8012822:	4618      	mov	r0, r3
 8012824:	f7fc ff72 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_SPEEDUINO1_ID));
 8012828:	1d3b      	adds	r3, r7, #4
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	f503 641f 	add.w	r4, r3, #2544	; 0x9f0
 8012830:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8012834:	210c      	movs	r1, #12
 8012836:	4618      	mov	r0, r3
 8012838:	f7fc febd 	bl	800f5b6 <_ZN8touchgfx6BitmapC1Et>
 801283c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8012840:	4619      	mov	r1, r3
 8012842:	4620      	mov	r0, r4
 8012844:	f006 fc80 	bl	8019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(__background);
 8012848:	1d3b      	adds	r3, r7, #4
 801284a:	681a      	ldr	r2, [r3, #0]
 801284c:	1d3b      	adds	r3, r7, #4
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	3340      	adds	r3, #64	; 0x40
 8012852:	4619      	mov	r1, r3
 8012854:	4610      	mov	r0, r2
 8012856:	f7fd f8a7 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 801285a:	1d3b      	adds	r3, r7, #4
 801285c:	681a      	ldr	r2, [r3, #0]
 801285e:	1d3b      	adds	r3, r7, #4
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	336c      	adds	r3, #108	; 0x6c
 8012864:	4619      	mov	r1, r3
 8012866:	4610      	mov	r0, r2
 8012868:	f7fd f89e 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indLeft);
 801286c:	1d3b      	adds	r3, r7, #4
 801286e:	681a      	ldr	r2, [r3, #0]
 8012870:	1d3b      	adds	r3, r7, #4
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	3398      	adds	r3, #152	; 0x98
 8012876:	4619      	mov	r1, r3
 8012878:	4610      	mov	r0, r2
 801287a:	f7fd f895 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indRight);
 801287e:	1d3b      	adds	r3, r7, #4
 8012880:	681a      	ldr	r2, [r3, #0]
 8012882:	1d3b      	adds	r3, r7, #4
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	33c4      	adds	r3, #196	; 0xc4
 8012888:	4619      	mov	r1, r3
 801288a:	4610      	mov	r0, r2
 801288c:	f7fd f88c 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indHigh);
 8012890:	1d3b      	adds	r3, r7, #4
 8012892:	681a      	ldr	r2, [r3, #0]
 8012894:	1d3b      	adds	r3, r7, #4
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	33f0      	adds	r3, #240	; 0xf0
 801289a:	4619      	mov	r1, r3
 801289c:	4610      	mov	r0, r2
 801289e:	f7fd f883 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indFuel);
 80128a2:	1d3b      	adds	r3, r7, #4
 80128a4:	681a      	ldr	r2, [r3, #0]
 80128a6:	1d3b      	adds	r3, r7, #4
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80128ae:	4619      	mov	r1, r3
 80128b0:	4610      	mov	r0, r2
 80128b2:	f7fd f879 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indOil);
 80128b6:	1d3b      	adds	r3, r7, #4
 80128b8:	681a      	ldr	r2, [r3, #0]
 80128ba:	1d3b      	adds	r3, r7, #4
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80128c2:	4619      	mov	r1, r3
 80128c4:	4610      	mov	r0, r2
 80128c6:	f7fd f86f 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indBatt);
 80128ca:	1d3b      	adds	r3, r7, #4
 80128cc:	681a      	ldr	r2, [r3, #0]
 80128ce:	1d3b      	adds	r3, r7, #4
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80128d6:	4619      	mov	r1, r3
 80128d8:	4610      	mov	r0, r2
 80128da:	f7fd f865 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indPark);
 80128de:	1d3b      	adds	r3, r7, #4
 80128e0:	681a      	ldr	r2, [r3, #0]
 80128e2:	1d3b      	adds	r3, r7, #4
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80128ea:	4619      	mov	r1, r3
 80128ec:	4610      	mov	r0, r2
 80128ee:	f7fd f85b 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indDTC);
 80128f2:	1d3b      	adds	r3, r7, #4
 80128f4:	681a      	ldr	r2, [r3, #0]
 80128f6:	1d3b      	adds	r3, r7, #4
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80128fe:	4619      	mov	r1, r3
 8012900:	4610      	mov	r0, r2
 8012902:	f7fd f851 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indECT);
 8012906:	1d3b      	adds	r3, r7, #4
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	1d3b      	adds	r3, r7, #4
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8012912:	4619      	mov	r1, r3
 8012914:	4610      	mov	r0, r2
 8012916:	f7fd f847 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indLow);
 801291a:	1d3b      	adds	r3, r7, #4
 801291c:	681a      	ldr	r2, [r3, #0]
 801291e:	1d3b      	adds	r3, r7, #4
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8012926:	4619      	mov	r1, r3
 8012928:	4610      	mov	r0, r2
 801292a:	f7fd f83d 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_value);
 801292e:	1d3b      	adds	r3, r7, #4
 8012930:	681a      	ldr	r2, [r3, #0]
 8012932:	1d3b      	adds	r3, r7, #4
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	f503 7314 	add.w	r3, r3, #592	; 0x250
 801293a:	4619      	mov	r1, r3
 801293c:	4610      	mov	r0, r2
 801293e:	f7fd f833 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_label);
 8012942:	1d3b      	adds	r3, r7, #4
 8012944:	681a      	ldr	r2, [r3, #0]
 8012946:	1d3b      	adds	r3, r7, #4
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 801294e:	4619      	mov	r1, r3
 8012950:	4610      	mov	r0, r2
 8012952:	f7fd f829 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_units);
 8012956:	1d3b      	adds	r3, r7, #4
 8012958:	681a      	ldr	r2, [r3, #0]
 801295a:	1d3b      	adds	r3, r7, #4
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8012962:	4619      	mov	r1, r3
 8012964:	4610      	mov	r0, r2
 8012966:	f7fd f81f 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_value);
 801296a:	1d3b      	adds	r3, r7, #4
 801296c:	681a      	ldr	r2, [r3, #0]
 801296e:	1d3b      	adds	r3, r7, #4
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8012976:	4619      	mov	r1, r3
 8012978:	4610      	mov	r0, r2
 801297a:	f7fd f815 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_label);
 801297e:	1d3b      	adds	r3, r7, #4
 8012980:	681a      	ldr	r2, [r3, #0]
 8012982:	1d3b      	adds	r3, r7, #4
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801298a:	4619      	mov	r1, r3
 801298c:	4610      	mov	r0, r2
 801298e:	f7fd f80b 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_units);
 8012992:	1d3b      	adds	r3, r7, #4
 8012994:	681a      	ldr	r2, [r3, #0]
 8012996:	1d3b      	adds	r3, r7, #4
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 801299e:	4619      	mov	r1, r3
 80129a0:	4610      	mov	r0, r2
 80129a2:	f7fd f801 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_value);
 80129a6:	1d3b      	adds	r3, r7, #4
 80129a8:	681a      	ldr	r2, [r3, #0]
 80129aa:	1d3b      	adds	r3, r7, #4
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80129b2:	4619      	mov	r1, r3
 80129b4:	4610      	mov	r0, r2
 80129b6:	f7fc fff7 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_label);
 80129ba:	1d3b      	adds	r3, r7, #4
 80129bc:	681a      	ldr	r2, [r3, #0]
 80129be:	1d3b      	adds	r3, r7, #4
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80129c6:	4619      	mov	r1, r3
 80129c8:	4610      	mov	r0, r2
 80129ca:	f7fc ffed 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_units);
 80129ce:	1d3b      	adds	r3, r7, #4
 80129d0:	681a      	ldr	r2, [r3, #0]
 80129d2:	1d3b      	adds	r3, r7, #4
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80129da:	4619      	mov	r1, r3
 80129dc:	4610      	mov	r0, r2
 80129de:	f7fc ffe3 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_value);
 80129e2:	1d3b      	adds	r3, r7, #4
 80129e4:	681a      	ldr	r2, [r3, #0]
 80129e6:	1d3b      	adds	r3, r7, #4
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80129ee:	4619      	mov	r1, r3
 80129f0:	4610      	mov	r0, r2
 80129f2:	f7fc ffd9 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_label);
 80129f6:	1d3b      	adds	r3, r7, #4
 80129f8:	681a      	ldr	r2, [r3, #0]
 80129fa:	1d3b      	adds	r3, r7, #4
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8012a02:	4619      	mov	r1, r3
 8012a04:	4610      	mov	r0, r2
 8012a06:	f7fc ffcf 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_units);
 8012a0a:	1d3b      	adds	r3, r7, #4
 8012a0c:	681a      	ldr	r2, [r3, #0]
 8012a0e:	1d3b      	adds	r3, r7, #4
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8012a16:	4619      	mov	r1, r3
 8012a18:	4610      	mov	r0, r2
 8012a1a:	f7fc ffc5 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_value);
 8012a1e:	1d3b      	adds	r3, r7, #4
 8012a20:	681a      	ldr	r2, [r3, #0]
 8012a22:	1d3b      	adds	r3, r7, #4
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8012a2a:	4619      	mov	r1, r3
 8012a2c:	4610      	mov	r0, r2
 8012a2e:	f7fc ffbb 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_label);
 8012a32:	1d3b      	adds	r3, r7, #4
 8012a34:	681a      	ldr	r2, [r3, #0]
 8012a36:	1d3b      	adds	r3, r7, #4
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8012a3e:	4619      	mov	r1, r3
 8012a40:	4610      	mov	r0, r2
 8012a42:	f7fc ffb1 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_units);
 8012a46:	1d3b      	adds	r3, r7, #4
 8012a48:	681a      	ldr	r2, [r3, #0]
 8012a4a:	1d3b      	adds	r3, r7, #4
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8012a52:	4619      	mov	r1, r3
 8012a54:	4610      	mov	r0, r2
 8012a56:	f7fc ffa7 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_value);
 8012a5a:	1d3b      	adds	r3, r7, #4
 8012a5c:	681a      	ldr	r2, [r3, #0]
 8012a5e:	1d3b      	adds	r3, r7, #4
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	e003      	b.n	8012a6c <_ZN15Screen1ViewBaseC1Ev+0x2bc4>
 8012a64:	2000682c 	.word	0x2000682c
 8012a68:	0802e948 	.word	0x0802e948
 8012a6c:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8012a70:	4619      	mov	r1, r3
 8012a72:	4610      	mov	r0, r2
 8012a74:	f7fc ff98 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_label);
 8012a78:	1d3b      	adds	r3, r7, #4
 8012a7a:	681a      	ldr	r2, [r3, #0]
 8012a7c:	1d3b      	adds	r3, r7, #4
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8012a84:	4619      	mov	r1, r3
 8012a86:	4610      	mov	r0, r2
 8012a88:	f7fc ff8e 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_units);
 8012a8c:	1d3b      	adds	r3, r7, #4
 8012a8e:	681a      	ldr	r2, [r3, #0]
 8012a90:	1d3b      	adds	r3, r7, #4
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8012a98:	4619      	mov	r1, r3
 8012a9a:	4610      	mov	r0, r2
 8012a9c:	f7fc ff84 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_value);
 8012aa0:	1d3b      	adds	r3, r7, #4
 8012aa2:	681a      	ldr	r2, [r3, #0]
 8012aa4:	1d3b      	adds	r3, r7, #4
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8012aac:	4619      	mov	r1, r3
 8012aae:	4610      	mov	r0, r2
 8012ab0:	f7fc ff7a 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_label);
 8012ab4:	1d3b      	adds	r3, r7, #4
 8012ab6:	681a      	ldr	r2, [r3, #0]
 8012ab8:	1d3b      	adds	r3, r7, #4
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 8012ac0:	4619      	mov	r1, r3
 8012ac2:	4610      	mov	r0, r2
 8012ac4:	f7fc ff70 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_units);
 8012ac8:	1d3b      	adds	r3, r7, #4
 8012aca:	681a      	ldr	r2, [r3, #0]
 8012acc:	1d3b      	adds	r3, r7, #4
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	4610      	mov	r0, r2
 8012ad8:	f7fc ff66 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_value);
 8012adc:	1d3b      	adds	r3, r7, #4
 8012ade:	681a      	ldr	r2, [r3, #0]
 8012ae0:	1d3b      	adds	r3, r7, #4
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8012ae8:	4619      	mov	r1, r3
 8012aea:	4610      	mov	r0, r2
 8012aec:	f7fc ff5c 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_label);
 8012af0:	1d3b      	adds	r3, r7, #4
 8012af2:	681a      	ldr	r2, [r3, #0]
 8012af4:	1d3b      	adds	r3, r7, #4
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8012afc:	4619      	mov	r1, r3
 8012afe:	4610      	mov	r0, r2
 8012b00:	f7fc ff52 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_units);
 8012b04:	1d3b      	adds	r3, r7, #4
 8012b06:	681a      	ldr	r2, [r3, #0]
 8012b08:	1d3b      	adds	r3, r7, #4
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8012b10:	4619      	mov	r1, r3
 8012b12:	4610      	mov	r0, r2
 8012b14:	f7fc ff48 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gauge1);
 8012b18:	1d3b      	adds	r3, r7, #4
 8012b1a:	681a      	ldr	r2, [r3, #0]
 8012b1c:	1d3b      	adds	r3, r7, #4
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8012b24:	4619      	mov	r1, r3
 8012b26:	4610      	mov	r0, r2
 8012b28:	f7fc ff3e 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2);
 8012b2c:	1d3b      	adds	r3, r7, #4
 8012b2e:	681a      	ldr	r2, [r3, #0]
 8012b30:	1d3b      	adds	r3, r7, #4
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	f503 631f 	add.w	r3, r3, #2544	; 0x9f0
 8012b38:	4619      	mov	r1, r3
 8012b3a:	4610      	mov	r0, r2
 8012b3c:	f7fc ff34 	bl	800f9a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8012b40:	1d3b      	adds	r3, r7, #4
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	4618      	mov	r0, r3
 8012b46:	f207 4794 	addw	r7, r7, #1172	; 0x494
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	bd90      	pop	{r4, r7, pc}
 8012b4e:	bf00      	nop

08012b50 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8012b50:	b480      	push	{r7}
 8012b52:	b083      	sub	sp, #12
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]

}
 8012b58:	bf00      	nop
 8012b5a:	370c      	adds	r7, #12
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b62:	4770      	bx	lr

08012b64 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b082      	sub	sp, #8
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f009 fb86 	bl	801c280 <_ZN8touchgfx6ScreenC1Ev>
 8012b74:	4a05      	ldr	r2, [pc, #20]	; (8012b8c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	601a      	str	r2, [r3, #0]
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	4618      	mov	r0, r3
 8012b84:	3708      	adds	r7, #8
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}
 8012b8a:	bf00      	nop
 8012b8c:	0802f228 	.word	0x0802f228

08012b90 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b082      	sub	sp, #8
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
 8012b98:	4a05      	ldr	r2, [pc, #20]	; (8012bb0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	601a      	str	r2, [r3, #0]
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f7fc fd49 	bl	800f638 <_ZN8touchgfx8DrawableD1Ev>
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3708      	adds	r7, #8
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}
 8012bb0:	0802fc4c 	.word	0x0802fc4c

08012bb4 <_ZN8touchgfx9ContainerD0Ev>:
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b082      	sub	sp, #8
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	6878      	ldr	r0, [r7, #4]
 8012bbe:	f7ff ffe7 	bl	8012b90 <_ZN8touchgfx9ContainerD1Ev>
 8012bc2:	212c      	movs	r1, #44	; 0x2c
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f018 ff70 	bl	802baaa <_ZdlPvj>
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	4618      	mov	r0, r3
 8012bce:	3708      	adds	r7, #8
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	bd80      	pop	{r7, pc}

08012bd4 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b082      	sub	sp, #8
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
 8012bdc:	4a05      	ldr	r2, [pc, #20]	; (8012bf4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	601a      	str	r2, [r3, #0]
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	4618      	mov	r0, r3
 8012be6:	f7fc ff23 	bl	800fa30 <_ZN8touchgfx6WidgetD1Ev>
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	4618      	mov	r0, r3
 8012bee:	3708      	adds	r7, #8
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}
 8012bf4:	08030aac 	.word	0x08030aac

08012bf8 <_ZN8touchgfx3BoxD0Ev>:
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b082      	sub	sp, #8
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	6878      	ldr	r0, [r7, #4]
 8012c02:	f7ff ffe7 	bl	8012bd4 <_ZN8touchgfx3BoxD1Ev>
 8012c06:	212c      	movs	r1, #44	; 0x2c
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f018 ff4e 	bl	802baaa <_ZdlPvj>
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	4618      	mov	r0, r3
 8012c12:	3708      	adds	r7, #8
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}

08012c18 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
 8012c20:	4a05      	ldr	r2, [pc, #20]	; (8012c38 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	601a      	str	r2, [r3, #0]
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f7fc ff01 	bl	800fa30 <_ZN8touchgfx6WidgetD1Ev>
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	4618      	mov	r0, r3
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	08030d18 	.word	0x08030d18

08012c3c <_ZN8touchgfx5ImageD0Ev>:
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b082      	sub	sp, #8
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
 8012c44:	6878      	ldr	r0, [r7, #4]
 8012c46:	f7ff ffe7 	bl	8012c18 <_ZN8touchgfx5ImageD1Ev>
 8012c4a:	212c      	movs	r1, #44	; 0x2c
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f018 ff2c 	bl	802baaa <_ZdlPvj>
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	4618      	mov	r0, r3
 8012c56:	3708      	adds	r7, #8
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	4a05      	ldr	r2, [pc, #20]	; (8012c7c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	601a      	str	r2, [r3, #0]
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7fc ffa9 	bl	800fbc4 <_ZN8touchgfx8TextAreaD1Ev>
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	4618      	mov	r0, r3
 8012c76:	3708      	adds	r7, #8
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}
 8012c7c:	08030c70 	.word	0x08030c70

08012c80 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b082      	sub	sp, #8
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f7ff ffe7 	bl	8012c5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012c8e:	2140      	movs	r1, #64	; 0x40
 8012c90:	6878      	ldr	r0, [r7, #4]
 8012c92:	f018 ff0a 	bl	802baaa <_ZdlPvj>
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	4618      	mov	r0, r3
 8012c9a:	3708      	adds	r7, #8
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}

08012ca0 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b082      	sub	sp, #8
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
 8012ca8:	4a0a      	ldr	r2, [pc, #40]	; (8012cd4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	601a      	str	r2, [r3, #0]
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	3358      	adds	r3, #88	; 0x58
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f7ff ff6c 	bl	8012b90 <_ZN8touchgfx9ContainerD1Ev>
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	332c      	adds	r3, #44	; 0x2c
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7ff ffab 	bl	8012c18 <_ZN8touchgfx5ImageD1Ev>
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7ff ff63 	bl	8012b90 <_ZN8touchgfx9ContainerD1Ev>
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3708      	adds	r7, #8
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}
 8012cd4:	0802fa5c 	.word	0x0802fa5c

08012cd8 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b082      	sub	sp, #8
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
 8012ce0:	6878      	ldr	r0, [r7, #4]
 8012ce2:	f7ff ffdd 	bl	8012ca0 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8012ce6:	21b0      	movs	r1, #176	; 0xb0
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	f018 fede 	bl	802baaa <_ZdlPvj>
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	3708      	adds	r7, #8
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bd80      	pop	{r7, pc}

08012cf8 <_ZN8touchgfx13TextureMapperD1Ev>:
 * @note The drawing of this widget is not trivial and typically has a significant performance
 *       penalty. The number of pixels drawn, the presence of global alpha or per pixel alpha
 *       inflicts the computation and should be considered.
 * @note This widget does not support 1 bit per pixel color depth.
 */
class TextureMapper : public Image
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b082      	sub	sp, #8
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
 8012d00:	4a05      	ldr	r2, [pc, #20]	; (8012d18 <_ZN8touchgfx13TextureMapperD1Ev+0x20>)
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	601a      	str	r2, [r3, #0]
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f7ff ff85 	bl	8012c18 <_ZN8touchgfx5ImageD1Ev>
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	4618      	mov	r0, r3
 8012d12:	3708      	adds	r7, #8
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}
 8012d18:	08030834 	.word	0x08030834

08012d1c <_ZN8touchgfx13TextureMapperD0Ev>:
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	6878      	ldr	r0, [r7, #4]
 8012d26:	f7ff ffe7 	bl	8012cf8 <_ZN8touchgfx13TextureMapperD1Ev>
 8012d2a:	2190      	movs	r1, #144	; 0x90
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f018 febc 	bl	802baaa <_ZdlPvj>
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	4618      	mov	r0, r3
 8012d36:	3708      	adds	r7, #8
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}

08012d3c <_ZN8touchgfx12CanvasWidgetD1Ev>:
 * Class for drawing complex polygons on the display using CanvasWidgetRenderer. The
 * CanvasWidget is used by passing it to a Canvas object, drawing the outline of the
 * object and then having CanvasWidget render the outline on the display using the
 * assigned painter.
 */
class CanvasWidget : public Widget
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b082      	sub	sp, #8
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
 8012d44:	4a05      	ldr	r2, [pc, #20]	; (8012d5c <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	601a      	str	r2, [r3, #0]
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7fc fe6f 	bl	800fa30 <_ZN8touchgfx6WidgetD1Ev>
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	4618      	mov	r0, r3
 8012d56:	3708      	adds	r7, #8
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}
 8012d5c:	08030768 	.word	0x08030768

08012d60 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f7ff ffe7 	bl	8012d3c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8012d6e:	2130      	movs	r1, #48	; 0x30
 8012d70:	6878      	ldr	r0, [r7, #4]
 8012d72:	f018 fe9a 	bl	802baaa <_ZdlPvj>
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	4618      	mov	r0, r3
 8012d7a:	3708      	adds	r7, #8
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bd80      	pop	{r7, pc}

08012d80 <_ZN8touchgfx6CircleD1Ev>:
 *            int x, y, r;
 *            circle.getCenter(&amp;x, &amp;y); // Will return (1, 1)
 *            circle.getRadius(&amp;r); // Will return 0
 *       @endcode.
 */
class Circle : public CanvasWidget
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b082      	sub	sp, #8
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
 8012d88:	4a05      	ldr	r2, [pc, #20]	; (8012da0 <_ZN8touchgfx6CircleD1Ev+0x20>)
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	601a      	str	r2, [r3, #0]
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7ff ffd3 	bl	8012d3c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3708      	adds	r7, #8
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	08030688 	.word	0x08030688

08012da4 <_ZN8touchgfx6CircleD0Ev>:
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b082      	sub	sp, #8
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f7ff ffe7 	bl	8012d80 <_ZN8touchgfx6CircleD1Ev>
 8012db2:	214c      	movs	r1, #76	; 0x4c
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f018 fe78 	bl	802baaa <_ZdlPvj>
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3708      	adds	r7, #8
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}

08012dc4 <_ZN8touchgfx5GaugeD1Ev>:
 * Much like a progress indicator, the minimum and maximum value of the Gauge, as well as steps
 * can be set. For more information on this, consult the documentation on ProgressIndicators.
 *
 * A Gauge has a needle and optionally an arc that follows the needle.
 */
class Gauge : public AbstractProgressIndicator
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
 8012dcc:	4a0b      	ldr	r2, [pc, #44]	; (8012dfc <_ZN8touchgfx5GaugeD1Ev+0x38>)
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	601a      	str	r2, [r3, #0]
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f7ff ffd1 	bl	8012d80 <_ZN8touchgfx6CircleD1Ev>
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	33b0      	adds	r3, #176	; 0xb0
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7ff ff88 	bl	8012cf8 <_ZN8touchgfx13TextureMapperD1Ev>
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7ff ff58 	bl	8012ca0 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	4618      	mov	r0, r3
 8012df4:	3708      	adds	r7, #8
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}
 8012dfa:	bf00      	nop
 8012dfc:	08030b54 	.word	0x08030b54

08012e00 <_ZN8touchgfx5GaugeD0Ev>:
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b082      	sub	sp, #8
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
 8012e08:	6878      	ldr	r0, [r7, #4]
 8012e0a:	f7ff ffdb 	bl	8012dc4 <_ZN8touchgfx5GaugeD1Ev>
 8012e0e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f018 fe49 	bl	802baaa <_ZdlPvj>
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3708      	adds	r7, #8
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}
	...

08012e24 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8012e24:	b480      	push	{r7}
 8012e26:	af00      	add	r7, sp, #0
    return bitmap_database;
 8012e28:	4b02      	ldr	r3, [pc, #8]	; (8012e34 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e32:	4770      	bx	lr
 8012e34:	0802f2b8 	.word	0x0802f2b8

08012e38 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8012e38:	b480      	push	{r7}
 8012e3a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8012e3c:	230d      	movs	r3, #13
}
 8012e3e:	4618      	mov	r0, r3
 8012e40:	46bd      	mov	sp, r7
 8012e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e46:	4770      	bx	lr

08012e48 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8012e48:	b480      	push	{r7}
 8012e4a:	b085      	sub	sp, #20
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	60f8      	str	r0, [r7, #12]
 8012e50:	460b      	mov	r3, r1
 8012e52:	607a      	str	r2, [r7, #4]
 8012e54:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8012e56:	2300      	movs	r3, #0
    }
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3714      	adds	r7, #20
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e62:	4770      	bx	lr

08012e64 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8012e64:	b480      	push	{r7}
 8012e66:	b083      	sub	sp, #12
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8012e6c:	2300      	movs	r3, #0
    }
 8012e6e:	4618      	mov	r0, r3
 8012e70:	370c      	adds	r7, #12
 8012e72:	46bd      	mov	sp, r7
 8012e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e78:	4770      	bx	lr

08012e7a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8012e7a:	b480      	push	{r7}
 8012e7c:	b083      	sub	sp, #12
 8012e7e:	af00      	add	r7, sp, #0
 8012e80:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8012e82:	2300      	movs	r3, #0
    }
 8012e84:	4618      	mov	r0, r3
 8012e86:	370c      	adds	r7, #12
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8e:	4770      	bx	lr

08012e90 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8012e90:	b480      	push	{r7}
 8012e92:	b085      	sub	sp, #20
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	60f8      	str	r0, [r7, #12]
 8012e98:	60b9      	str	r1, [r7, #8]
 8012e9a:	4613      	mov	r3, r2
 8012e9c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8012e9e:	4a07      	ldr	r2, [pc, #28]	; (8012ebc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	6013      	str	r3, [r2, #0]
        fonts = f;
 8012ea4:	4a06      	ldr	r2, [pc, #24]	; (8012ec0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8012eaa:	4a06      	ldr	r2, [pc, #24]	; (8012ec4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8012eac:	88fb      	ldrh	r3, [r7, #6]
 8012eae:	8013      	strh	r3, [r2, #0]
    }
 8012eb0:	bf00      	nop
 8012eb2:	3714      	adds	r7, #20
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eba:	4770      	bx	lr
 8012ebc:	20006820 	.word	0x20006820
 8012ec0:	20006828 	.word	0x20006828
 8012ec4:	20006824 	.word	0x20006824

08012ec8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8012ec8:	b40e      	push	{r1, r2, r3}
 8012eca:	b580      	push	{r7, lr}
 8012ecc:	b085      	sub	sp, #20
 8012ece:	af00      	add	r7, sp, #0
 8012ed0:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8012ed2:	f107 0320 	add.w	r3, r7, #32
 8012ed6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8012ed8:	68bb      	ldr	r3, [r7, #8]
 8012eda:	69fa      	ldr	r2, [r7, #28]
 8012edc:	2100      	movs	r1, #0
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f008 fcc2 	bl	801b868 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8012ee8:	89fb      	ldrh	r3, [r7, #14]
}
 8012eea:	4618      	mov	r0, r3
 8012eec:	3714      	adds	r7, #20
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012ef4:	b003      	add	sp, #12
 8012ef6:	4770      	bx	lr

08012ef8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8012ef8:	b40c      	push	{r2, r3}
 8012efa:	b580      	push	{r7, lr}
 8012efc:	b084      	sub	sp, #16
 8012efe:	af00      	add	r7, sp, #0
 8012f00:	6078      	str	r0, [r7, #4]
 8012f02:	460b      	mov	r3, r1
 8012f04:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8012f06:	f107 031c 	add.w	r3, r7, #28
 8012f0a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8012f0c:	78f9      	ldrb	r1, [r7, #3]
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	69ba      	ldr	r2, [r7, #24]
 8012f12:	6878      	ldr	r0, [r7, #4]
 8012f14:	f008 fca8 	bl	801b868 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8012f1c:	89fb      	ldrh	r3, [r7, #14]
}
 8012f1e:	4618      	mov	r0, r3
 8012f20:	3710      	adds	r7, #16
 8012f22:	46bd      	mov	sp, r7
 8012f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012f28:	b002      	add	sp, #8
 8012f2a:	4770      	bx	lr

08012f2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b08a      	sub	sp, #40	; 0x28
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
 8012f34:	460b      	mov	r3, r1
 8012f36:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d016      	beq.n	8012f6e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	331a      	adds	r3, #26
 8012f44:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8012f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f48:	8adb      	ldrh	r3, [r3, #22]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d105      	bne.n	8012f5a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8012f4e:	4b43      	ldr	r3, [pc, #268]	; (801305c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8012f50:	4a43      	ldr	r2, [pc, #268]	; (8013060 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8012f52:	21bf      	movs	r1, #191	; 0xbf
 8012f54:	4843      	ldr	r0, [pc, #268]	; (8013064 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012f56:	f019 fbc7 	bl	802c6e8 <__assert_func>
            return buffer[pos];
 8012f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5c:	8a9b      	ldrh	r3, [r3, #20]
 8012f5e:	461a      	mov	r2, r3
 8012f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d001      	beq.n	8012f6e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	e000      	b.n	8012f70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8012f6e:	2300      	movs	r3, #0
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d06a      	beq.n	801304a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f00a f891 	bl	801d09c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	331a      	adds	r3, #26
 8012f7e:	623b      	str	r3, [r7, #32]
 8012f80:	2301      	movs	r3, #1
 8012f82:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8012f84:	6a3b      	ldr	r3, [r7, #32]
 8012f86:	8adb      	ldrh	r3, [r3, #22]
 8012f88:	8bfa      	ldrh	r2, [r7, #30]
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d305      	bcc.n	8012f9a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8012f8e:	4b36      	ldr	r3, [pc, #216]	; (8013068 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8012f90:	4a36      	ldr	r2, [pc, #216]	; (801306c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8012f92:	21c4      	movs	r1, #196	; 0xc4
 8012f94:	4833      	ldr	r0, [pc, #204]	; (8013064 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012f96:	f019 fba7 	bl	802c6e8 <__assert_func>
            const uint16_t index = pos + offset;
 8012f9a:	6a3b      	ldr	r3, [r7, #32]
 8012f9c:	8a9a      	ldrh	r2, [r3, #20]
 8012f9e:	8bfb      	ldrh	r3, [r7, #30]
 8012fa0:	4413      	add	r3, r2
 8012fa2:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8012fa4:	8bbb      	ldrh	r3, [r7, #28]
 8012fa6:	2b09      	cmp	r3, #9
 8012fa8:	d801      	bhi.n	8012fae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8012faa:	8bbb      	ldrh	r3, [r7, #28]
 8012fac:	e001      	b.n	8012fb2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8012fae:	8bbb      	ldrh	r3, [r7, #28]
 8012fb0:	3b0a      	subs	r3, #10
 8012fb2:	6a3a      	ldr	r2, [r7, #32]
 8012fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012fb8:	f640 123f 	movw	r2, #2367	; 0x93f
 8012fbc:	4293      	cmp	r3, r2
 8012fbe:	bf0c      	ite	eq
 8012fc0:	2301      	moveq	r3, #1
 8012fc2:	2300      	movne	r3, #0
 8012fc4:	b2db      	uxtb	r3, r3
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d03f      	beq.n	801304a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	331a      	adds	r3, #26
 8012fce:	687a      	ldr	r2, [r7, #4]
 8012fd0:	321a      	adds	r2, #26
 8012fd2:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8012fd4:	68ba      	ldr	r2, [r7, #8]
 8012fd6:	8ad2      	ldrh	r2, [r2, #22]
 8012fd8:	2a00      	cmp	r2, #0
 8012fda:	d105      	bne.n	8012fe8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8012fdc:	4b1f      	ldr	r3, [pc, #124]	; (801305c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8012fde:	4a20      	ldr	r2, [pc, #128]	; (8013060 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8012fe0:	21bf      	movs	r1, #191	; 0xbf
 8012fe2:	4820      	ldr	r0, [pc, #128]	; (8013064 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012fe4:	f019 fb80 	bl	802c6e8 <__assert_func>
            return buffer[pos];
 8012fe8:	68ba      	ldr	r2, [r7, #8]
 8012fea:	8a92      	ldrh	r2, [r2, #20]
 8012fec:	4611      	mov	r1, r2
 8012fee:	68ba      	ldr	r2, [r7, #8]
 8012ff0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8012ff4:	613b      	str	r3, [r7, #16]
 8012ff6:	4613      	mov	r3, r2
 8012ff8:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8012ffa:	693b      	ldr	r3, [r7, #16]
 8012ffc:	8adb      	ldrh	r3, [r3, #22]
 8012ffe:	2b01      	cmp	r3, #1
 8013000:	d806      	bhi.n	8013010 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8013002:	4b1b      	ldr	r3, [pc, #108]	; (8013070 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8013004:	4a1b      	ldr	r2, [pc, #108]	; (8013074 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8013006:	f44f 7186 	mov.w	r1, #268	; 0x10c
 801300a:	4816      	ldr	r0, [pc, #88]	; (8013064 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801300c:	f019 fb6c 	bl	802c6e8 <__assert_func>
            const uint16_t index = pos + 1;
 8013010:	693b      	ldr	r3, [r7, #16]
 8013012:	8a9b      	ldrh	r3, [r3, #20]
 8013014:	3301      	adds	r3, #1
 8013016:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8013018:	89bb      	ldrh	r3, [r7, #12]
 801301a:	2b09      	cmp	r3, #9
 801301c:	d801      	bhi.n	8013022 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 801301e:	89bb      	ldrh	r3, [r7, #12]
 8013020:	e000      	b.n	8013024 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8013022:	2300      	movs	r3, #0
 8013024:	693a      	ldr	r2, [r7, #16]
 8013026:	89f9      	ldrh	r1, [r7, #14]
 8013028:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 801302c:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	331a      	adds	r3, #26
 8013032:	61bb      	str	r3, [r7, #24]
 8013034:	f640 133f 	movw	r3, #2367	; 0x93f
 8013038:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 801303a:	69bb      	ldr	r3, [r7, #24]
 801303c:	8a9b      	ldrh	r3, [r3, #20]
 801303e:	4619      	mov	r1, r3
 8013040:	69bb      	ldr	r3, [r7, #24]
 8013042:	8afa      	ldrh	r2, [r7, #22]
 8013044:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8013048:	bf00      	nop
        }
    }
    return getNextChar();
 801304a:	6878      	ldr	r0, [r7, #4]
 801304c:	f009 ff0a 	bl	801ce64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013050:	4603      	mov	r3, r0
}
 8013052:	4618      	mov	r0, r3
 8013054:	3728      	adds	r7, #40	; 0x28
 8013056:	46bd      	mov	sp, r7
 8013058:	bd80      	pop	{r7, pc}
 801305a:	bf00      	nop
 801305c:	0802e94c 	.word	0x0802e94c
 8013060:	0802e958 	.word	0x0802e958
 8013064:	0802ea04 	.word	0x0802ea04
 8013068:	0802ea4c 	.word	0x0802ea4c
 801306c:	0802ea5c 	.word	0x0802ea5c
 8013070:	0802eb30 	.word	0x0802eb30
 8013074:	0802eb3c 	.word	0x0802eb3c

08013078 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b082      	sub	sp, #8
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8013080:	6878      	ldr	r0, [r7, #4]
 8013082:	f009 fea9 	bl	801cdd8 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8013086:	bf00      	nop
 8013088:	3708      	adds	r7, #8
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}

0801308e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 801308e:	b580      	push	{r7, lr}
 8013090:	b088      	sub	sp, #32
 8013092:	af02      	add	r7, sp, #8
 8013094:	60f8      	str	r0, [r7, #12]
 8013096:	1d38      	adds	r0, r7, #4
 8013098:	e880 0006 	stmia.w	r0, {r1, r2}
 801309c:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 801309e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80130a2:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80130a4:	1d39      	adds	r1, r7, #4
 80130a6:	697b      	ldr	r3, [r7, #20]
 80130a8:	9301      	str	r3, [sp, #4]
 80130aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ac:	9300      	str	r3, [sp, #0]
 80130ae:	6a3b      	ldr	r3, [r7, #32]
 80130b0:	683a      	ldr	r2, [r7, #0]
 80130b2:	68f8      	ldr	r0, [r7, #12]
 80130b4:	f007 f8cd 	bl	801a252 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80130b8:	bf00      	nop
 80130ba:	3718      	adds	r7, #24
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}

080130c0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80130c0:	b590      	push	{r4, r7, lr}
 80130c2:	b085      	sub	sp, #20
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	4603      	mov	r3, r0
 80130c8:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80130ca:	2300      	movs	r3, #0
 80130cc:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80130ce:	88fb      	ldrh	r3, [r7, #6]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d127      	bne.n	8013124 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80130d4:	88fb      	ldrh	r3, [r7, #6]
 80130d6:	4a1e      	ldr	r2, [pc, #120]	; (8013150 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80130d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d016      	beq.n	801310e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80130e0:	88fb      	ldrh	r3, [r7, #6]
 80130e2:	4a1b      	ldr	r2, [pc, #108]	; (8013150 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80130e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80130e8:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	68ba      	ldr	r2, [r7, #8]
 80130f0:	4413      	add	r3, r2
 80130f2:	4a18      	ldr	r2, [pc, #96]	; (8013154 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80130f4:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80130f6:	68bb      	ldr	r3, [r7, #8]
 80130f8:	685b      	ldr	r3, [r3, #4]
 80130fa:	68ba      	ldr	r2, [r7, #8]
 80130fc:	4413      	add	r3, r2
 80130fe:	4a16      	ldr	r2, [pc, #88]	; (8013158 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8013100:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8013102:	68bb      	ldr	r3, [r7, #8]
 8013104:	689b      	ldr	r3, [r3, #8]
 8013106:	68ba      	ldr	r2, [r7, #8]
 8013108:	4413      	add	r3, r2
 801310a:	60fb      	str	r3, [r7, #12]
 801310c:	e00a      	b.n	8013124 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 801310e:	4b11      	ldr	r3, [pc, #68]	; (8013154 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8013110:	4a12      	ldr	r2, [pc, #72]	; (801315c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8013112:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8013114:	4a12      	ldr	r2, [pc, #72]	; (8013160 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8013116:	4b10      	ldr	r3, [pc, #64]	; (8013158 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8013118:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 801311a:	88fb      	ldrh	r3, [r7, #6]
 801311c:	4a11      	ldr	r2, [pc, #68]	; (8013164 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 801311e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013122:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d00d      	beq.n	8013146 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 801312a:	4a0f      	ldr	r2, [pc, #60]	; (8013168 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 801312c:	88fb      	ldrh	r3, [r7, #6]
 801312e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8013130:	f000 f83e 	bl	80131b0 <_ZN17TypedTextDatabase8getFontsEv>
 8013134:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8013136:	f000 f833 	bl	80131a0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801313a:	4603      	mov	r3, r0
 801313c:	461a      	mov	r2, r3
 801313e:	4621      	mov	r1, r4
 8013140:	68f8      	ldr	r0, [r7, #12]
 8013142:	f7ff fea5 	bl	8012e90 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8013146:	bf00      	nop
 8013148:	3714      	adds	r7, #20
 801314a:	46bd      	mov	sp, r7
 801314c:	bd90      	pop	{r4, r7, pc}
 801314e:	bf00      	nop
 8013150:	20004b80 	.word	0x20004b80
 8013154:	20004b88 	.word	0x20004b88
 8013158:	20004b8c 	.word	0x20004b8c
 801315c:	080a47dc 	.word	0x080a47dc
 8013160:	080a471c 	.word	0x080a471c
 8013164:	080a4858 	.word	0x080a4858
 8013168:	20004b84 	.word	0x20004b84

0801316c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 801316c:	b480      	push	{r7}
 801316e:	b083      	sub	sp, #12
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
 8013174:	460b      	mov	r3, r1
 8013176:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8013178:	4b07      	ldr	r3, [pc, #28]	; (8013198 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 801317a:	681a      	ldr	r2, [r3, #0]
 801317c:	4b07      	ldr	r3, [pc, #28]	; (801319c <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801317e:	6819      	ldr	r1, [r3, #0]
 8013180:	887b      	ldrh	r3, [r7, #2]
 8013182:	009b      	lsls	r3, r3, #2
 8013184:	440b      	add	r3, r1
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	005b      	lsls	r3, r3, #1
 801318a:	4413      	add	r3, r2
}
 801318c:	4618      	mov	r0, r3
 801318e:	370c      	adds	r7, #12
 8013190:	46bd      	mov	sp, r7
 8013192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013196:	4770      	bx	lr
 8013198:	20004b88 	.word	0x20004b88
 801319c:	20004b8c 	.word	0x20004b8c

080131a0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80131a0:	b480      	push	{r7}
 80131a2:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80131a4:	2330      	movs	r3, #48	; 0x30
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	46bd      	mov	sp, r7
 80131aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ae:	4770      	bx	lr

080131b0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80131b0:	b480      	push	{r7}
 80131b2:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80131b4:	4b02      	ldr	r3, [pc, #8]	; (80131c0 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80131b6:	4618      	mov	r0, r3
 80131b8:	46bd      	mov	sp, r7
 80131ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131be:	4770      	bx	lr
 80131c0:	20004b90 	.word	0x20004b90

080131c4 <_Z41__static_initialization_and_destruction_0ii>:
    case 1:
        touchgfx_fonts[1] = &(getFont_bahnschrift_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b082      	sub	sp, #8
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
 80131cc:	6039      	str	r1, [r7, #0]
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	2b01      	cmp	r3, #1
 80131d2:	d10e      	bne.n	80131f2 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80131d4:	683b      	ldr	r3, [r7, #0]
 80131d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131da:	4293      	cmp	r3, r2
 80131dc:	d109      	bne.n	80131f2 <_Z41__static_initialization_and_destruction_0ii+0x2e>
    &(getFont_bahnschrift_55_4bpp()),
 80131de:	f7fb fc5d 	bl	800ea9c <_Z27getFont_bahnschrift_55_4bppv>
 80131e2:	4603      	mov	r3, r0
};
 80131e4:	4a05      	ldr	r2, [pc, #20]	; (80131fc <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80131e6:	6013      	str	r3, [r2, #0]
    &(getFont_bahnschrift_20_4bpp())
 80131e8:	f7fb fc02 	bl	800e9f0 <_Z27getFont_bahnschrift_20_4bppv>
 80131ec:	4603      	mov	r3, r0
};
 80131ee:	4a03      	ldr	r2, [pc, #12]	; (80131fc <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80131f0:	6053      	str	r3, [r2, #4]
} // namespace TypedTextDatabase
 80131f2:	bf00      	nop
 80131f4:	3708      	adds	r7, #8
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}
 80131fa:	bf00      	nop
 80131fc:	20004b90 	.word	0x20004b90

08013200 <_GLOBAL__sub_I_touchgfx_fonts>:
 8013200:	b580      	push	{r7, lr}
 8013202:	af00      	add	r7, sp, #0
 8013204:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013208:	2001      	movs	r0, #1
 801320a:	f7ff ffdb 	bl	80131c4 <_Z41__static_initialization_and_destruction_0ii>
 801320e:	bd80      	pop	{r7, pc}

08013210 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8013210:	b580      	push	{r7, lr}
 8013212:	b082      	sub	sp, #8
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
 8013218:	4a05      	ldr	r2, [pc, #20]	; (8013230 <_ZN19FrontendApplicationD1Ev+0x20>)
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	601a      	str	r2, [r3, #0]
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	4618      	mov	r0, r3
 8013222:	f7fb fe57 	bl	800eed4 <_ZN23FrontendApplicationBaseD1Ev>
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	4618      	mov	r0, r3
 801322a:	3708      	adds	r7, #8
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}
 8013230:	0802f418 	.word	0x0802f418

08013234 <_ZN19FrontendApplicationD0Ev>:
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f7ff ffe7 	bl	8013210 <_ZN19FrontendApplicationD1Ev>
 8013242:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013246:	6878      	ldr	r0, [r7, #4]
 8013248:	f018 fc2f 	bl	802baaa <_ZdlPvj>
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	4618      	mov	r0, r3
 8013250:	3708      	adds	r7, #8
 8013252:	46bd      	mov	sp, r7
 8013254:	bd80      	pop	{r7, pc}

08013256 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8013256:	b580      	push	{r7, lr}
 8013258:	b082      	sub	sp, #8
 801325a:	af00      	add	r7, sp, #0
 801325c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8013264:	4618      	mov	r0, r3
 8013266:	f000 f82d 	bl	80132c4 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	4618      	mov	r0, r3
 801326e:	f007 fb61 	bl	801a934 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8013272:	bf00      	nop
 8013274:	3708      	adds	r7, #8
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
	...

0801327c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 801327c:	b580      	push	{r7, lr}
 801327e:	b084      	sub	sp, #16
 8013280:	af00      	add	r7, sp, #0
 8013282:	60f8      	str	r0, [r7, #12]
 8013284:	60b9      	str	r1, [r7, #8]
 8013286:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	687a      	ldr	r2, [r7, #4]
 801328c:	68b9      	ldr	r1, [r7, #8]
 801328e:	4618      	mov	r0, r3
 8013290:	f7fb fe8c 	bl	800efac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8013294:	4a03      	ldr	r2, [pc, #12]	; (80132a4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	601a      	str	r2, [r3, #0]
{

}
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	4618      	mov	r0, r3
 801329e:	3710      	adds	r7, #16
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}
 80132a4:	0802f418 	.word	0x0802f418

080132a8 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80132a8:	b480      	push	{r7}
 80132aa:	b083      	sub	sp, #12
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	2200      	movs	r2, #0
 80132b4:	601a      	str	r2, [r3, #0]
{

}
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	4618      	mov	r0, r3
 80132ba:	370c      	adds	r7, #12
 80132bc:	46bd      	mov	sp, r7
 80132be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c2:	4770      	bx	lr

080132c4 <_ZN5Model4tickEv>:

void Model::tick()
{
 80132c4:	b480      	push	{r7}
 80132c6:	b083      	sub	sp, #12
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]

}
 80132cc:	bf00      	nop
 80132ce:	370c      	adds	r7, #12
 80132d0:	46bd      	mov	sp, r7
 80132d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d6:	4770      	bx	lr

080132d8 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80132d8:	b480      	push	{r7}
 80132da:	b083      	sub	sp, #12
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
    {
    }
 80132e0:	bf00      	nop
 80132e2:	370c      	adds	r7, #12
 80132e4:	46bd      	mov	sp, r7
 80132e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ea:	4770      	bx	lr

080132ec <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80132ec:	b480      	push	{r7}
 80132ee:	b083      	sub	sp, #12
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
    {
    }
 80132f4:	bf00      	nop
 80132f6:	370c      	adds	r7, #12
 80132f8:	46bd      	mov	sp, r7
 80132fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fe:	4770      	bx	lr

08013300 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8013300:	b480      	push	{r7}
 8013302:	b083      	sub	sp, #12
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
    {
 8013308:	4a04      	ldr	r2, [pc, #16]	; (801331c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	601a      	str	r2, [r3, #0]
    }
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	4618      	mov	r0, r3
 8013312:	370c      	adds	r7, #12
 8013314:	46bd      	mov	sp, r7
 8013316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331a:	4770      	bx	lr
 801331c:	0802f494 	.word	0x0802f494

08013320 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8013320:	b580      	push	{r7, lr}
 8013322:	b082      	sub	sp, #8
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
    }
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f7ff ffe9 	bl	8013300 <_ZN8touchgfx9PresenterD1Ev>
 801332e:	2104      	movs	r1, #4
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f018 fbba 	bl	802baaa <_ZdlPvj>
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	4618      	mov	r0, r3
 801333a:	3708      	adds	r7, #8
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}

08013340 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8013340:	b480      	push	{r7}
 8013342:	b083      	sub	sp, #12
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
    {
 8013348:	4a04      	ldr	r2, [pc, #16]	; (801335c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	601a      	str	r2, [r3, #0]
    }
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	4618      	mov	r0, r3
 8013352:	370c      	adds	r7, #12
 8013354:	46bd      	mov	sp, r7
 8013356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335a:	4770      	bx	lr
 801335c:	0802f494 	.word	0x0802f494

08013360 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8013360:	b480      	push	{r7}
 8013362:	b083      	sub	sp, #12
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	4a06      	ldr	r2, [pc, #24]	; (8013384 <_ZN13ModelListenerC1Ev+0x24>)
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	601a      	str	r2, [r3, #0]
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	2200      	movs	r2, #0
 8013372:	605a      	str	r2, [r3, #4]
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	4618      	mov	r0, r3
 8013378:	370c      	adds	r7, #12
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr
 8013382:	bf00      	nop
 8013384:	0802f484 	.word	0x0802f484

08013388 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8013388:	b480      	push	{r7}
 801338a:	b083      	sub	sp, #12
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
 8013390:	4a04      	ldr	r2, [pc, #16]	; (80133a4 <_ZN13ModelListenerD1Ev+0x1c>)
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	601a      	str	r2, [r3, #0]
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	4618      	mov	r0, r3
 801339a:	370c      	adds	r7, #12
 801339c:	46bd      	mov	sp, r7
 801339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a2:	4770      	bx	lr
 80133a4:	0802f484 	.word	0x0802f484

080133a8 <_ZN13ModelListenerD0Ev>:
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b082      	sub	sp, #8
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
 80133b0:	6878      	ldr	r0, [r7, #4]
 80133b2:	f7ff ffe9 	bl	8013388 <_ZN13ModelListenerD1Ev>
 80133b6:	2108      	movs	r1, #8
 80133b8:	6878      	ldr	r0, [r7, #4]
 80133ba:	f018 fb76 	bl	802baaa <_ZdlPvj>
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	4618      	mov	r0, r3
 80133c2:	3708      	adds	r7, #8
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}

080133c8 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b082      	sub	sp, #8
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	4a09      	ldr	r2, [pc, #36]	; (80133f8 <_ZN16Screen1PresenterD1Ev+0x30>)
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	601a      	str	r2, [r3, #0]
 80133d6:	4a09      	ldr	r2, [pc, #36]	; (80133fc <_ZN16Screen1PresenterD1Ev+0x34>)
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	605a      	str	r2, [r3, #4]
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	3304      	adds	r3, #4
 80133e0:	4618      	mov	r0, r3
 80133e2:	f7ff ffd1 	bl	8013388 <_ZN13ModelListenerD1Ev>
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	4618      	mov	r0, r3
 80133ea:	f7ff ff89 	bl	8013300 <_ZN8touchgfx9PresenterD1Ev>
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	4618      	mov	r0, r3
 80133f2:	3708      	adds	r7, #8
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}
 80133f8:	0802f45c 	.word	0x0802f45c
 80133fc:	0802f474 	.word	0x0802f474

08013400 <_ZThn4_N16Screen1PresenterD1Ev>:
 8013400:	f1a0 0004 	sub.w	r0, r0, #4
 8013404:	e7e0      	b.n	80133c8 <_ZN16Screen1PresenterD1Ev>
 8013406:	bf00      	nop

08013408 <_ZN16Screen1PresenterD0Ev>:
 8013408:	b580      	push	{r7, lr}
 801340a:	b082      	sub	sp, #8
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f7ff ffd9 	bl	80133c8 <_ZN16Screen1PresenterD1Ev>
 8013416:	2110      	movs	r1, #16
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f018 fb46 	bl	802baaa <_ZdlPvj>
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	4618      	mov	r0, r3
 8013422:	3708      	adds	r7, #8
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}

08013428 <_ZThn4_N16Screen1PresenterD0Ev>:
 8013428:	f1a0 0004 	sub.w	r0, r0, #4
 801342c:	e7ec      	b.n	8013408 <_ZN16Screen1PresenterD0Ev>
	...

08013430 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8013430:	b580      	push	{r7, lr}
 8013432:	b082      	sub	sp, #8
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	6039      	str	r1, [r7, #0]
    : view(v)
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	4618      	mov	r0, r3
 801343e:	f7ff ff7f 	bl	8013340 <_ZN8touchgfx9PresenterC1Ev>
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	3304      	adds	r3, #4
 8013446:	4618      	mov	r0, r3
 8013448:	f7ff ff8a 	bl	8013360 <_ZN13ModelListenerC1Ev>
 801344c:	4a06      	ldr	r2, [pc, #24]	; (8013468 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	601a      	str	r2, [r3, #0]
 8013452:	4a06      	ldr	r2, [pc, #24]	; (801346c <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	605a      	str	r2, [r3, #4]
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	683a      	ldr	r2, [r7, #0]
 801345c:	60da      	str	r2, [r3, #12]
{

}
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	4618      	mov	r0, r3
 8013462:	3708      	adds	r7, #8
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}
 8013468:	0802f45c 	.word	0x0802f45c
 801346c:	0802f474 	.word	0x0802f474

08013470 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8013470:	b480      	push	{r7}
 8013472:	b083      	sub	sp, #12
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]

}
 8013478:	bf00      	nop
 801347a:	370c      	adds	r7, #12
 801347c:	46bd      	mov	sp, r7
 801347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013482:	4770      	bx	lr

08013484 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8013484:	b480      	push	{r7}
 8013486:	b083      	sub	sp, #12
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]

}
 801348c:	bf00      	nop
 801348e:	370c      	adds	r7, #12
 8013490:	46bd      	mov	sp, r7
 8013492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013496:	4770      	bx	lr

08013498 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     * @return pointer to the first element in the buffer where the formatted string is
     *         placed.
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8013498:	b580      	push	{r7, lr}
 801349a:	b084      	sub	sp, #16
 801349c:	af00      	add	r7, sp, #0
 801349e:	60f8      	str	r0, [r7, #12]
 80134a0:	460b      	mov	r3, r1
 80134a2:	607a      	str	r2, [r7, #4]
 80134a4:	ed87 0a00 	vstr	s0, [r7]
 80134a8:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 80134aa:	463b      	mov	r3, r7
 80134ac:	8979      	ldrh	r1, [r7, #10]
 80134ae:	687a      	ldr	r2, [r7, #4]
 80134b0:	68f8      	ldr	r0, [r7, #12]
 80134b2:	f00a fec3 	bl	801e23c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 80134b6:	4603      	mov	r3, r0
    }
 80134b8:	4618      	mov	r0, r3
 80134ba:	3710      	adds	r7, #16
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}

080134c0 <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 80134c0:	b480      	push	{r7}
 80134c2:	b083      	sub	sp, #12
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
 80134c8:	460b      	mov	r3, r1
 80134ca:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	78fa      	ldrb	r2, [r7, #3]
 80134d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80134d4:	bf00      	nop
 80134d6:	370c      	adds	r7, #12
 80134d8:	46bd      	mov	sp, r7
 80134da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134de:	4770      	bx	lr

080134e0 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b082      	sub	sp, #8
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
 80134e8:	4a05      	ldr	r2, [pc, #20]	; (8013500 <_ZN11Screen1ViewD1Ev+0x20>)
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	601a      	str	r2, [r3, #0]
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	4618      	mov	r0, r3
 80134f2:	f7fc fbd5 	bl	800fca0 <_ZN15Screen1ViewBaseD1Ev>
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	4618      	mov	r0, r3
 80134fa:	3708      	adds	r7, #8
 80134fc:	46bd      	mov	sp, r7
 80134fe:	bd80      	pop	{r7, pc}
 8013500:	0802f4ac 	.word	0x0802f4ac

08013504 <_ZN11Screen1ViewD0Ev>:
 8013504:	b580      	push	{r7, lr}
 8013506:	b082      	sub	sp, #8
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
 801350c:	6878      	ldr	r0, [r7, #4]
 801350e:	f7ff ffe7 	bl	80134e0 <_ZN11Screen1ViewD1Ev>
 8013512:	f640 515c 	movw	r1, #3420	; 0xd5c
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f018 fac7 	bl	802baaa <_ZdlPvj>
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	4618      	mov	r0, r3
 8013520:	3708      	adds	r7, #8
 8013522:	46bd      	mov	sp, r7
 8013524:	bd80      	pop	{r7, pc}
	...

08013528 <_ZN11Screen1ViewC1Ev>:

#include "main.h"
#include "extern.h"
#include "BMPFileLoader.hpp"

Screen1View::Screen1View() {
 8013528:	b580      	push	{r7, lr}
 801352a:	b082      	sub	sp, #8
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	4618      	mov	r0, r3
 8013534:	f7fc fcb8 	bl	800fea8 <_ZN15Screen1ViewBaseC1Ev>
 8013538:	4a03      	ldr	r2, [pc, #12]	; (8013548 <_ZN11Screen1ViewC1Ev+0x20>)
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	601a      	str	r2, [r3, #0]

}
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	4618      	mov	r0, r3
 8013542:	3708      	adds	r7, #8
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}
 8013548:	0802f4ac 	.word	0x0802f4ac

0801354c <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen() {
 801354c:	b580      	push	{r7, lr}
 801354e:	b088      	sub	sp, #32
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::setupScreen();
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	4618      	mov	r0, r3
 8013558:	f7ff fafa 	bl	8012b50 <_ZN15Screen1ViewBase11setupScreenEv>

	Unicode::UnicodeChar buffer[10];

	//.................UNITS.................

	Unicode::strncpy(buffer, "BAR", 10);
 801355c:	f107 030c 	add.w	r3, r7, #12
 8013560:	220a      	movs	r2, #10
 8013562:	49d7      	ldr	r1, [pc, #860]	; (80138c0 <_ZN11Screen1View11setupScreenEv+0x374>)
 8013564:	4618      	mov	r0, r3
 8013566:	f00a f942 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(map_unitsBuffer, 10, "%s", buffer);
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	f503 6027 	add.w	r0, r3, #2672	; 0xa70
 8013570:	f107 030c 	add.w	r3, r7, #12
 8013574:	4ad3      	ldr	r2, [pc, #844]	; (80138c4 <_ZN11Screen1View11setupScreenEv+0x378>)
 8013576:	210a      	movs	r1, #10
 8013578:	f00a fca0 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8013582:	4618      	mov	r0, r3
 8013584:	f005 faae 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_units.invalidate();
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 801358e:	4618      	mov	r0, r3
 8013590:	f008 fa8b 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "Lambda", 10);
 8013594:	f107 030c 	add.w	r3, r7, #12
 8013598:	220a      	movs	r2, #10
 801359a:	49cb      	ldr	r1, [pc, #812]	; (80138c8 <_ZN11Screen1View11setupScreenEv+0x37c>)
 801359c:	4618      	mov	r0, r3
 801359e:	f00a f926 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(lambda_unitsBuffer, 10, "%s", buffer);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	f603 30a8 	addw	r0, r3, #2984	; 0xba8
 80135a8:	f107 030c 	add.w	r3, r7, #12
 80135ac:	4ac5      	ldr	r2, [pc, #788]	; (80138c4 <_ZN11Screen1View11setupScreenEv+0x378>)
 80135ae:	210a      	movs	r1, #10
 80135b0:	f00a fc84 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80135ba:	4618      	mov	r0, r3
 80135bc:	f005 fa92 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_units.invalidate();
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80135c6:	4618      	mov	r0, r3
 80135c8:	f008 fa6f 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BAR", 10);
 80135cc:	f107 030c 	add.w	r3, r7, #12
 80135d0:	220a      	movs	r2, #10
 80135d2:	49bb      	ldr	r1, [pc, #748]	; (80138c0 <_ZN11Screen1View11setupScreenEv+0x374>)
 80135d4:	4618      	mov	r0, r3
 80135d6:	f00a f90a 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(oilp_unitsBuffer, 10, "%s", buffer);
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	f503 604e 	add.w	r0, r3, #3296	; 0xce0
 80135e0:	f107 030c 	add.w	r3, r7, #12
 80135e4:	4ab7      	ldr	r2, [pc, #732]	; (80138c4 <_ZN11Screen1View11setupScreenEv+0x378>)
 80135e6:	210a      	movs	r1, #10
 80135e8:	f00a fc68 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_units.resizeToCurrentTextWithAlignment();
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 80135f2:	4618      	mov	r0, r3
 80135f4:	f005 fa76 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_units.invalidate();
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 80135fe:	4618      	mov	r0, r3
 8013600:	f008 fa53 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BAR", 10);
 8013604:	f107 030c 	add.w	r3, r7, #12
 8013608:	220a      	movs	r2, #10
 801360a:	49ad      	ldr	r1, [pc, #692]	; (80138c0 <_ZN11Screen1View11setupScreenEv+0x374>)
 801360c:	4618      	mov	r0, r3
 801360e:	f00a f8ee 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(fuelp_unitsBuffer, 10, "%s", buffer);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	f603 5048 	addw	r0, r3, #3400	; 0xd48
 8013618:	f107 030c 	add.w	r3, r7, #12
 801361c:	4aa9      	ldr	r2, [pc, #676]	; (80138c4 <_ZN11Screen1View11setupScreenEv+0x378>)
 801361e:	210a      	movs	r1, #10
 8013620:	f00a fc4c 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801362a:	4618      	mov	r0, r3
 801362c:	f005 fa5a 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8013636:	4618      	mov	r0, r3
 8013638:	f008 fa37 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "°C", 10);
 801363c:	f107 030c 	add.w	r3, r7, #12
 8013640:	220a      	movs	r2, #10
 8013642:	49a2      	ldr	r1, [pc, #648]	; (80138cc <_ZN11Screen1View11setupScreenEv+0x380>)
 8013644:	4618      	mov	r0, r3
 8013646:	f00a f8d2 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(ect_unitsBuffer, 10, "%s", buffer);
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	f503 6041 	add.w	r0, r3, #3088	; 0xc10
 8013650:	f107 030c 	add.w	r3, r7, #12
 8013654:	4a9b      	ldr	r2, [pc, #620]	; (80138c4 <_ZN11Screen1View11setupScreenEv+0x378>)
 8013656:	210a      	movs	r1, #10
 8013658:	f00a fc30 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8013662:	4618      	mov	r0, r3
 8013664:	f005 fa3e 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801366e:	4618      	mov	r0, r3
 8013670:	f008 fa1b 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "°C", 10);
 8013674:	f107 030c 	add.w	r3, r7, #12
 8013678:	220a      	movs	r2, #10
 801367a:	4994      	ldr	r1, [pc, #592]	; (80138cc <_ZN11Screen1View11setupScreenEv+0x380>)
 801367c:	4618      	mov	r0, r3
 801367e:	f00a f8b6 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(iat_unitsBuffer, 10, "%s", buffer);
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	f603 4078 	addw	r0, r3, #3192	; 0xc78
 8013688:	f107 030c 	add.w	r3, r7, #12
 801368c:	4a8d      	ldr	r2, [pc, #564]	; (80138c4 <_ZN11Screen1View11setupScreenEv+0x378>)
 801368e:	210a      	movs	r1, #10
 8013690:	f00a fc14 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801369a:	4618      	mov	r0, r3
 801369c:	f005 fa22 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80136a6:	4618      	mov	r0, r3
 80136a8:	f008 f9ff 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "V", 10);
 80136ac:	f107 030c 	add.w	r3, r7, #12
 80136b0:	220a      	movs	r2, #10
 80136b2:	4987      	ldr	r1, [pc, #540]	; (80138d0 <_ZN11Screen1View11setupScreenEv+0x384>)
 80136b4:	4618      	mov	r0, r3
 80136b6:	f00a f89a 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(batt_unitsBuffer, 10, "%s", buffer);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f603 20d8 	addw	r0, r3, #2776	; 0xad8
 80136c0:	f107 030c 	add.w	r3, r7, #12
 80136c4:	4a7f      	ldr	r2, [pc, #508]	; (80138c4 <_ZN11Screen1View11setupScreenEv+0x378>)
 80136c6:	210a      	movs	r1, #10
 80136c8:	f00a fbf8 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80136d2:	4618      	mov	r0, r3
 80136d4:	f005 fa06 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80136de:	4618      	mov	r0, r3
 80136e0:	f008 f9e3 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "%", 10);
 80136e4:	f107 030c 	add.w	r3, r7, #12
 80136e8:	220a      	movs	r2, #10
 80136ea:	497a      	ldr	r1, [pc, #488]	; (80138d4 <_ZN11Screen1View11setupScreenEv+0x388>)
 80136ec:	4618      	mov	r0, r3
 80136ee:	f00a f87e 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(tps_unitsBuffer, 10, "%s", buffer);
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f503 6034 	add.w	r0, r3, #2880	; 0xb40
 80136f8:	f107 030c 	add.w	r3, r7, #12
 80136fc:	4a71      	ldr	r2, [pc, #452]	; (80138c4 <_ZN11Screen1View11setupScreenEv+0x378>)
 80136fe:	210a      	movs	r1, #10
 8013700:	f00a fbdc 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801370a:	4618      	mov	r0, r3
 801370c:	f005 f9ea 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8013716:	4618      	mov	r0, r3
 8013718:	f008 f9c7 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	//.................LABELS.................

	Unicode::strncpy(buffer, "MAP", 10);
 801371c:	f107 030c 	add.w	r3, r7, #12
 8013720:	220a      	movs	r2, #10
 8013722:	496d      	ldr	r1, [pc, #436]	; (80138d8 <_ZN11Screen1View11setupScreenEv+0x38c>)
 8013724:	4618      	mov	r0, r3
 8013726:	f00a f862 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(map_labelBuffer, 10, "%s", buffer);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	f603 205c 	addw	r0, r3, #2652	; 0xa5c
 8013730:	f107 030c 	add.w	r3, r7, #12
 8013734:	4a63      	ldr	r2, [pc, #396]	; (80138c4 <_ZN11Screen1View11setupScreenEv+0x378>)
 8013736:	210a      	movs	r1, #10
 8013738:	f00a fbc0 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8013742:	4618      	mov	r0, r3
 8013744:	f005 f9ce 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_units.invalidate();
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 801374e:	4618      	mov	r0, r3
 8013750:	f008 f9ab 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "AFP", 10);
 8013754:	f107 030c 	add.w	r3, r7, #12
 8013758:	220a      	movs	r2, #10
 801375a:	4960      	ldr	r1, [pc, #384]	; (80138dc <_ZN11Screen1View11setupScreenEv+0x390>)
 801375c:	4618      	mov	r0, r3
 801375e:	f00a f846 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(lambda_labelBuffer, 10, "%s", buffer);
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	f603 3094 	addw	r0, r3, #2964	; 0xb94
 8013768:	f107 030c 	add.w	r3, r7, #12
 801376c:	4a55      	ldr	r2, [pc, #340]	; (80138c4 <_ZN11Screen1View11setupScreenEv+0x378>)
 801376e:	210a      	movs	r1, #10
 8013770:	f00a fba4 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 801377a:	4618      	mov	r0, r3
 801377c:	f005 f9b2 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_units.invalidate();
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8013786:	4618      	mov	r0, r3
 8013788:	f008 f98f 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "OIL P", 10);
 801378c:	f107 030c 	add.w	r3, r7, #12
 8013790:	220a      	movs	r2, #10
 8013792:	4953      	ldr	r1, [pc, #332]	; (80138e0 <_ZN11Screen1View11setupScreenEv+0x394>)
 8013794:	4618      	mov	r0, r3
 8013796:	f00a f82a 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(oilp_labelBuffer, 10, "%s", buffer);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	f603 40cc 	addw	r0, r3, #3276	; 0xccc
 80137a0:	f107 030c 	add.w	r3, r7, #12
 80137a4:	4a47      	ldr	r2, [pc, #284]	; (80138c4 <_ZN11Screen1View11setupScreenEv+0x378>)
 80137a6:	210a      	movs	r1, #10
 80137a8:	f00a fb88 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_units.resizeToCurrentTextWithAlignment();
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 80137b2:	4618      	mov	r0, r3
 80137b4:	f005 f996 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_units.invalidate();
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 80137be:	4618      	mov	r0, r3
 80137c0:	f008 f973 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "FUEL P", 10);
 80137c4:	f107 030c 	add.w	r3, r7, #12
 80137c8:	220a      	movs	r2, #10
 80137ca:	4946      	ldr	r1, [pc, #280]	; (80138e4 <_ZN11Screen1View11setupScreenEv+0x398>)
 80137cc:	4618      	mov	r0, r3
 80137ce:	f00a f80e 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(fuelp_labelBuffer, 10, "%s", buffer);
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f603 5034 	addw	r0, r3, #3380	; 0xd34
 80137d8:	f107 030c 	add.w	r3, r7, #12
 80137dc:	4a39      	ldr	r2, [pc, #228]	; (80138c4 <_ZN11Screen1View11setupScreenEv+0x378>)
 80137de:	210a      	movs	r1, #10
 80137e0:	f00a fb6c 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80137ea:	4618      	mov	r0, r3
 80137ec:	f005 f97a 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80137f6:	4618      	mov	r0, r3
 80137f8:	f008 f957 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "ECT", 10);
 80137fc:	f107 030c 	add.w	r3, r7, #12
 8013800:	220a      	movs	r2, #10
 8013802:	4939      	ldr	r1, [pc, #228]	; (80138e8 <_ZN11Screen1View11setupScreenEv+0x39c>)
 8013804:	4618      	mov	r0, r3
 8013806:	f009 fff2 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(ect_labelBuffer, 10, "%s", buffer);
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	f603 30fc 	addw	r0, r3, #3068	; 0xbfc
 8013810:	f107 030c 	add.w	r3, r7, #12
 8013814:	4a2b      	ldr	r2, [pc, #172]	; (80138c4 <_ZN11Screen1View11setupScreenEv+0x378>)
 8013816:	210a      	movs	r1, #10
 8013818:	f00a fb50 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8013822:	4618      	mov	r0, r3
 8013824:	f005 f95e 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801382e:	4618      	mov	r0, r3
 8013830:	f008 f93b 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "IAT", 10);
 8013834:	f107 030c 	add.w	r3, r7, #12
 8013838:	220a      	movs	r2, #10
 801383a:	492c      	ldr	r1, [pc, #176]	; (80138ec <_ZN11Screen1View11setupScreenEv+0x3a0>)
 801383c:	4618      	mov	r0, r3
 801383e:	f009 ffd6 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(iat_labelBuffer, 10, "%s", buffer);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	f603 4064 	addw	r0, r3, #3172	; 0xc64
 8013848:	f107 030c 	add.w	r3, r7, #12
 801384c:	4a1d      	ldr	r2, [pc, #116]	; (80138c4 <_ZN11Screen1View11setupScreenEv+0x378>)
 801384e:	210a      	movs	r1, #10
 8013850:	f00a fb34 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801385a:	4618      	mov	r0, r3
 801385c:	f005 f942 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8013866:	4618      	mov	r0, r3
 8013868:	f008 f91f 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BATTERY", 10);
 801386c:	f107 030c 	add.w	r3, r7, #12
 8013870:	220a      	movs	r2, #10
 8013872:	491f      	ldr	r1, [pc, #124]	; (80138f0 <_ZN11Screen1View11setupScreenEv+0x3a4>)
 8013874:	4618      	mov	r0, r3
 8013876:	f009 ffba 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(batt_labelBuffer, 10, "%s", buffer);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	f603 20c4 	addw	r0, r3, #2756	; 0xac4
 8013880:	f107 030c 	add.w	r3, r7, #12
 8013884:	4a0f      	ldr	r2, [pc, #60]	; (80138c4 <_ZN11Screen1View11setupScreenEv+0x378>)
 8013886:	210a      	movs	r1, #10
 8013888:	f00a fb18 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8013892:	4618      	mov	r0, r3
 8013894:	f005 f926 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801389e:	4618      	mov	r0, r3
 80138a0:	f008 f903 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "TPS", 10);
 80138a4:	f107 030c 	add.w	r3, r7, #12
 80138a8:	220a      	movs	r2, #10
 80138aa:	4912      	ldr	r1, [pc, #72]	; (80138f4 <_ZN11Screen1View11setupScreenEv+0x3a8>)
 80138ac:	4618      	mov	r0, r3
 80138ae:	f009 ff9e 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(tps_labelBuffer, 10, "%s", buffer);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	f603 302c 	addw	r0, r3, #2860	; 0xb2c
 80138b8:	f107 030c 	add.w	r3, r7, #12
 80138bc:	e01c      	b.n	80138f8 <_ZN11Screen1View11setupScreenEv+0x3ac>
 80138be:	bf00      	nop
 80138c0:	0802ebf0 	.word	0x0802ebf0
 80138c4:	0802ebf4 	.word	0x0802ebf4
 80138c8:	0802ebf8 	.word	0x0802ebf8
 80138cc:	0802ec00 	.word	0x0802ec00
 80138d0:	0802ec04 	.word	0x0802ec04
 80138d4:	0802ec08 	.word	0x0802ec08
 80138d8:	0802ec0c 	.word	0x0802ec0c
 80138dc:	0802ec10 	.word	0x0802ec10
 80138e0:	0802ec14 	.word	0x0802ec14
 80138e4:	0802ec1c 	.word	0x0802ec1c
 80138e8:	0802ec24 	.word	0x0802ec24
 80138ec:	0802ec28 	.word	0x0802ec28
 80138f0:	0802ec2c 	.word	0x0802ec2c
 80138f4:	0802ec34 	.word	0x0802ec34
 80138f8:	4a09      	ldr	r2, [pc, #36]	; (8013920 <_ZN11Screen1View11setupScreenEv+0x3d4>)
 80138fa:	210a      	movs	r1, #10
 80138fc:	f00a fade 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8013906:	4618      	mov	r0, r3
 8013908:	f005 f8ec 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8013912:	4618      	mov	r0, r3
 8013914:	f008 f8c9 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8013918:	bf00      	nop
 801391a:	3720      	adds	r7, #32
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}
 8013920:	0802ebf4 	.word	0x0802ebf4

08013924 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen() {
 8013924:	b580      	push	{r7, lr}
 8013926:	b082      	sub	sp, #8
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::tearDownScreen();
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	4618      	mov	r0, r3
 8013930:	f7fc f81a 	bl	800f968 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013934:	bf00      	nop
 8013936:	3708      	adds	r7, #8
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}

0801393c <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent() {
 801393c:	b580      	push	{r7, lr}
 801393e:	b08c      	sub	sp, #48	; 0x30
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
	Unicode::UnicodeChar buffer[16];

	if (BufferIsSet == 1) {
 8013944:	4bd1      	ldr	r3, [pc, #836]	; (8013c8c <_ZN11Screen1View15handleTickEventEv+0x350>)
 8013946:	781b      	ldrb	r3, [r3, #0]
 8013948:	2b01      	cmp	r3, #1
 801394a:	d108      	bne.n	801395e <_ZN11Screen1View15handleTickEventEv+0x22>
		uint16_t width, height;

		//Get the image dimensions from the BMP file
		BMPFileLoader::getBMP24Dimensions(FileBuffer, width, height);
 801394c:	4bd0      	ldr	r3, [pc, #832]	; (8013c90 <_ZN11Screen1View15handleTickEventEv+0x354>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	f107 020c 	add.w	r2, r7, #12
 8013954:	f107 010e 	add.w	r1, r7, #14
 8013958:	4618      	mov	r0, r3
 801395a:	f7ec fe57 	bl	800060c <_ZN13BMPFileLoader18getBMP24DimensionsEPvRtS1_>
		//Make Image show the loaded bitmap
		//image1.setBitmap(Bitmap(bmpId));

	}

	map_value.invalidate();
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8013964:	4618      	mov	r0, r3
 8013966:	f008 f8a0 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.MAP * PSI_TO_BAR));
 801396a:	4bca      	ldr	r3, [pc, #808]	; (8013c94 <_ZN11Screen1View15handleTickEventEv+0x358>)
 801396c:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 8013970:	ee07 3a90 	vmov	s15, r3
 8013974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013978:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8013c98 <_ZN11Screen1View15handleTickEventEv+0x35c>
 801397c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013980:	f107 0310 	add.w	r3, r7, #16
 8013984:	eeb0 0a67 	vmov.f32	s0, s15
 8013988:	4ac4      	ldr	r2, [pc, #784]	; (8013c9c <_ZN11Screen1View15handleTickEventEv+0x360>)
 801398a:	2110      	movs	r1, #16
 801398c:	4618      	mov	r0, r3
 801398e:	f7ff fd83 	bl	8013498 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(map_valueBuffer, 16, "%s", buffer);
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	f603 201c 	addw	r0, r3, #2588	; 0xa1c
 8013998:	f107 0310 	add.w	r3, r7, #16
 801399c:	4ac0      	ldr	r2, [pc, #768]	; (8013ca0 <_ZN11Screen1View15handleTickEventEv+0x364>)
 801399e:	2110      	movs	r1, #16
 80139a0:	f00a fa8c 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_value.resizeToCurrentTextWithAlignment();
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80139aa:	4618      	mov	r0, r3
 80139ac:	f005 f89a 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_value.invalidate();
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80139b6:	4618      	mov	r0, r3
 80139b8:	f008 f877 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	batt_value.invalidate();
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80139c2:	4618      	mov	r0, r3
 80139c4:	f008 f871 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f", (Current_Status.BATT / 100.00f));
 80139c8:	4bb2      	ldr	r3, [pc, #712]	; (8013c94 <_ZN11Screen1View15handleTickEventEv+0x358>)
 80139ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80139ce:	ee07 3a90 	vmov	s15, r3
 80139d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139d6:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8013ca4 <_ZN11Screen1View15handleTickEventEv+0x368>
 80139da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80139de:	f107 0310 	add.w	r3, r7, #16
 80139e2:	eeb0 0a47 	vmov.f32	s0, s14
 80139e6:	4aad      	ldr	r2, [pc, #692]	; (8013c9c <_ZN11Screen1View15handleTickEventEv+0x360>)
 80139e8:	2110      	movs	r1, #16
 80139ea:	4618      	mov	r0, r3
 80139ec:	f7ff fd54 	bl	8013498 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(batt_valueBuffer, 16, "%s", buffer);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	f603 2084 	addw	r0, r3, #2692	; 0xa84
 80139f6:	f107 0310 	add.w	r3, r7, #16
 80139fa:	4aa9      	ldr	r2, [pc, #676]	; (8013ca0 <_ZN11Screen1View15handleTickEventEv+0x364>)
 80139fc:	2110      	movs	r1, #16
 80139fe:	f00a fa5d 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	batt_value.resizeToCurrentTextWithAlignment();
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f005 f86b 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	batt_value.invalidate();
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8013a14:	4618      	mov	r0, r3
 8013a16:	f008 f848 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	tps_value.invalidate();
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8013a20:	4618      	mov	r0, r3
 8013a22:	f008 f842 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(tps_valueBuffer, 16, "%d", (Current_Status.TPS / 10));
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	f603 20ec 	addw	r0, r3, #2796	; 0xaec
 8013a2c:	4b99      	ldr	r3, [pc, #612]	; (8013c94 <_ZN11Screen1View15handleTickEventEv+0x358>)
 8013a2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013a32:	4a9d      	ldr	r2, [pc, #628]	; (8013ca8 <_ZN11Screen1View15handleTickEventEv+0x36c>)
 8013a34:	fba2 2303 	umull	r2, r3, r2, r3
 8013a38:	08db      	lsrs	r3, r3, #3
 8013a3a:	b29b      	uxth	r3, r3
 8013a3c:	4a9b      	ldr	r2, [pc, #620]	; (8013cac <_ZN11Screen1View15handleTickEventEv+0x370>)
 8013a3e:	2110      	movs	r1, #16
 8013a40:	f00a fa3c 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	tps_value.resizeToCurrentTextWithAlignment();
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f005 f84a 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	tps_value.invalidate();
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8013a56:	4618      	mov	r0, r3
 8013a58:	f008 f827 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	lambda_value.invalidate();
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8013a62:	4618      	mov	r0, r3
 8013a64:	f008 f821 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f",
			(Current_Status.LAMBDA1 * AFR_TO_LAMBDA / 100.00f));
 8013a68:	4b8a      	ldr	r3, [pc, #552]	; (8013c94 <_ZN11Screen1View15handleTickEventEv+0x358>)
 8013a6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013a6c:	ee07 3a90 	vmov	s15, r3
 8013a70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a74:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8013cb0 <_ZN11Screen1View15handleTickEventEv+0x374>
 8013a78:	ee67 7a87 	vmul.f32	s15, s15, s14
	Unicode::snprintfFloat(buffer, 16, "%.2f",
 8013a7c:	eddf 6a89 	vldr	s13, [pc, #548]	; 8013ca4 <_ZN11Screen1View15handleTickEventEv+0x368>
 8013a80:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013a84:	f107 0310 	add.w	r3, r7, #16
 8013a88:	eeb0 0a47 	vmov.f32	s0, s14
 8013a8c:	4a89      	ldr	r2, [pc, #548]	; (8013cb4 <_ZN11Screen1View15handleTickEventEv+0x378>)
 8013a8e:	2110      	movs	r1, #16
 8013a90:	4618      	mov	r0, r3
 8013a92:	f7ff fd01 	bl	8013498 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(lambda_valueBuffer, 16, "%s", buffer);
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f603 3054 	addw	r0, r3, #2900	; 0xb54
 8013a9c:	f107 0310 	add.w	r3, r7, #16
 8013aa0:	4a7f      	ldr	r2, [pc, #508]	; (8013ca0 <_ZN11Screen1View15handleTickEventEv+0x364>)
 8013aa2:	2110      	movs	r1, #16
 8013aa4:	f00a fa0a 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	lambda_value.resizeToCurrentTextWithAlignment();
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f005 f818 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_value.invalidate();
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8013aba:	4618      	mov	r0, r3
 8013abc:	f007 fff5 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	ect_value.invalidate();
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f007 ffef 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(ect_valueBuffer, 16, "%d", Current_Status.ECT - 50);
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	f603 30bc 	addw	r0, r3, #3004	; 0xbbc
 8013ad2:	4b70      	ldr	r3, [pc, #448]	; (8013c94 <_ZN11Screen1View15handleTickEventEv+0x358>)
 8013ad4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013ad8:	3b32      	subs	r3, #50	; 0x32
 8013ada:	4a74      	ldr	r2, [pc, #464]	; (8013cac <_ZN11Screen1View15handleTickEventEv+0x370>)
 8013adc:	2110      	movs	r1, #16
 8013ade:	f00a f9ed 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ect_value.resizeToCurrentTextWithAlignment();
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f004 fffb 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ect_value.invalidate();
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 8013af4:	4618      	mov	r0, r3
 8013af6:	f007 ffd8 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	iat_value.invalidate();
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8013b00:	4618      	mov	r0, r3
 8013b02:	f007 ffd2 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(iat_valueBuffer, 16, "%d", Current_Status.IAT - 50);
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f603 4024 	addw	r0, r3, #3108	; 0xc24
 8013b0c:	4b61      	ldr	r3, [pc, #388]	; (8013c94 <_ZN11Screen1View15handleTickEventEv+0x358>)
 8013b0e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013b12:	3b32      	subs	r3, #50	; 0x32
 8013b14:	4a65      	ldr	r2, [pc, #404]	; (8013cac <_ZN11Screen1View15handleTickEventEv+0x370>)
 8013b16:	2110      	movs	r1, #16
 8013b18:	f00a f9d0 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	iat_value.resizeToCurrentTextWithAlignment();
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8013b22:	4618      	mov	r0, r3
 8013b24:	f004 ffde 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	iat_value.invalidate();
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f007 ffbb 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	oilp_value.invalidate();
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f007 ffb5 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.OILP * PSI_TO_BAR));
 8013b40:	4b54      	ldr	r3, [pc, #336]	; (8013c94 <_ZN11Screen1View15handleTickEventEv+0x358>)
 8013b42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013b46:	ee07 3a90 	vmov	s15, r3
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 8013b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b4e:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8013c98 <_ZN11Screen1View15handleTickEventEv+0x35c>
 8013b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b56:	f107 0310 	add.w	r3, r7, #16
 8013b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8013b5e:	4a4f      	ldr	r2, [pc, #316]	; (8013c9c <_ZN11Screen1View15handleTickEventEv+0x360>)
 8013b60:	2110      	movs	r1, #16
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7ff fc98 	bl	8013498 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(oilp_valueBuffer, 16, "%s", buffer);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	f603 408c 	addw	r0, r3, #3212	; 0xc8c
 8013b6e:	f107 0310 	add.w	r3, r7, #16
 8013b72:	4a4b      	ldr	r2, [pc, #300]	; (8013ca0 <_ZN11Screen1View15handleTickEventEv+0x364>)
 8013b74:	2110      	movs	r1, #16
 8013b76:	f00a f9a1 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_value.resizeToCurrentTextWithAlignment();
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8013b80:	4618      	mov	r0, r3
 8013b82:	f004 ffaf 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_value.invalidate();
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f007 ff8c 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	fuelp_value.invalidate();
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f007 ff86 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.FUELP * PSI_TO_BAR));
 8013b9e:	4b3d      	ldr	r3, [pc, #244]	; (8013c94 <_ZN11Screen1View15handleTickEventEv+0x358>)
 8013ba0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8013ba4:	ee07 3a90 	vmov	s15, r3
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 8013ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013bac:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8013c98 <_ZN11Screen1View15handleTickEventEv+0x35c>
 8013bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013bb4:	f107 0310 	add.w	r3, r7, #16
 8013bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8013bbc:	4a37      	ldr	r2, [pc, #220]	; (8013c9c <_ZN11Screen1View15handleTickEventEv+0x360>)
 8013bbe:	2110      	movs	r1, #16
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f7ff fc69 	bl	8013498 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(fuelp_valueBuffer, 16, "%s", buffer);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	f603 40f4 	addw	r0, r3, #3316	; 0xcf4
 8013bcc:	f107 0310 	add.w	r3, r7, #16
 8013bd0:	4a33      	ldr	r2, [pc, #204]	; (8013ca0 <_ZN11Screen1View15handleTickEventEv+0x364>)
 8013bd2:	2110      	movs	r1, #16
 8013bd4:	f00a f972 	bl	801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_value.resizeToCurrentTextWithAlignment();
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8013bde:	4618      	mov	r0, r3
 8013be0:	f004 ff80 	bl	8018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_value.invalidate();
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8013bea:	4618      	mov	r0, r3
 8013bec:	f007 ff5d 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indLeft.setVisible(Current_Status.IND_LEFT);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8013bf6:	4b27      	ldr	r3, [pc, #156]	; (8013c94 <_ZN11Screen1View15handleTickEventEv+0x358>)
 8013bf8:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	bf14      	ite	ne
 8013c00:	2301      	movne	r3, #1
 8013c02:	2300      	moveq	r3, #0
 8013c04:	b2db      	uxtb	r3, r3
 8013c06:	4619      	mov	r1, r3
 8013c08:	4610      	mov	r0, r2
 8013c0a:	f7ff fc59 	bl	80134c0 <_ZN8touchgfx8Drawable10setVisibleEb>
	indLeft.invalidate();
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	3398      	adds	r3, #152	; 0x98
 8013c12:	4618      	mov	r0, r3
 8013c14:	f007 ff49 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indHigh.setVisible(Current_Status.IND_HIGH);
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8013c1e:	4b1d      	ldr	r3, [pc, #116]	; (8013c94 <_ZN11Screen1View15handleTickEventEv+0x358>)
 8013c20:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	bf14      	ite	ne
 8013c28:	2301      	movne	r3, #1
 8013c2a:	2300      	moveq	r3, #0
 8013c2c:	b2db      	uxtb	r3, r3
 8013c2e:	4619      	mov	r1, r3
 8013c30:	4610      	mov	r0, r2
 8013c32:	f7ff fc45 	bl	80134c0 <_ZN8touchgfx8Drawable10setVisibleEb>
	indHigh.invalidate();
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	33f0      	adds	r3, #240	; 0xf0
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f007 ff35 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indFuel.setVisible(Current_Status.IND_FUEL);
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8013c46:	4b13      	ldr	r3, [pc, #76]	; (8013c94 <_ZN11Screen1View15handleTickEventEv+0x358>)
 8013c48:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	bf14      	ite	ne
 8013c50:	2301      	movne	r3, #1
 8013c52:	2300      	moveq	r3, #0
 8013c54:	b2db      	uxtb	r3, r3
 8013c56:	4619      	mov	r1, r3
 8013c58:	4610      	mov	r0, r2
 8013c5a:	f7ff fc31 	bl	80134c0 <_ZN8touchgfx8Drawable10setVisibleEb>
	indFuel.invalidate();
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013c64:	4618      	mov	r0, r3
 8013c66:	f007 ff20 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indOil.setVisible(Current_Status.IND_OIL);
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 8013c70:	4b08      	ldr	r3, [pc, #32]	; (8013c94 <_ZN11Screen1View15handleTickEventEv+0x358>)
 8013c72:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	bf14      	ite	ne
 8013c7a:	2301      	movne	r3, #1
 8013c7c:	2300      	moveq	r3, #0
 8013c7e:	b2db      	uxtb	r3, r3
 8013c80:	4619      	mov	r1, r3
 8013c82:	4610      	mov	r0, r2
 8013c84:	f7ff fc1c 	bl	80134c0 <_ZN8touchgfx8Drawable10setVisibleEb>
	indOil.invalidate();
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	e015      	b.n	8013cb8 <_ZN11Screen1View15handleTickEventEv+0x37c>
 8013c8c:	20007bd8 	.word	0x20007bd8
 8013c90:	20007ae4 	.word	0x20007ae4
 8013c94:	20007c38 	.word	0x20007c38
 8013c98:	3d8d3466 	.word	0x3d8d3466
 8013c9c:	0802ec38 	.word	0x0802ec38
 8013ca0:	0802ebf4 	.word	0x0802ebf4
 8013ca4:	42c80000 	.word	0x42c80000
 8013ca8:	cccccccd 	.word	0xcccccccd
 8013cac:	0802ec40 	.word	0x0802ec40
 8013cb0:	416b3333 	.word	0x416b3333
 8013cb4:	0802ec44 	.word	0x0802ec44
 8013cb8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f007 fef4 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indBatt.setVisible(Current_Status.IND_BATT);
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 8013cc8:	4b43      	ldr	r3, [pc, #268]	; (8013dd8 <_ZN11Screen1View15handleTickEventEv+0x49c>)
 8013cca:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	bf14      	ite	ne
 8013cd2:	2301      	movne	r3, #1
 8013cd4:	2300      	moveq	r3, #0
 8013cd6:	b2db      	uxtb	r3, r3
 8013cd8:	4619      	mov	r1, r3
 8013cda:	4610      	mov	r0, r2
 8013cdc:	f7ff fbf0 	bl	80134c0 <_ZN8touchgfx8Drawable10setVisibleEb>
	indBatt.invalidate();
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	f007 fedf 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indPark.setVisible(Current_Status.IND_PARK);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8013cf2:	4b39      	ldr	r3, [pc, #228]	; (8013dd8 <_ZN11Screen1View15handleTickEventEv+0x49c>)
 8013cf4:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	bf14      	ite	ne
 8013cfc:	2301      	movne	r3, #1
 8013cfe:	2300      	moveq	r3, #0
 8013d00:	b2db      	uxtb	r3, r3
 8013d02:	4619      	mov	r1, r3
 8013d04:	4610      	mov	r0, r2
 8013d06:	f7ff fbdb 	bl	80134c0 <_ZN8touchgfx8Drawable10setVisibleEb>
	indPark.invalidate();
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8013d10:	4618      	mov	r0, r3
 8013d12:	f007 feca 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indDTC.setVisible(Current_Status.IND_DTC);
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f503 72e6 	add.w	r2, r3, #460	; 0x1cc
 8013d1c:	4b2e      	ldr	r3, [pc, #184]	; (8013dd8 <_ZN11Screen1View15handleTickEventEv+0x49c>)
 8013d1e:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	bf14      	ite	ne
 8013d26:	2301      	movne	r3, #1
 8013d28:	2300      	moveq	r3, #0
 8013d2a:	b2db      	uxtb	r3, r3
 8013d2c:	4619      	mov	r1, r3
 8013d2e:	4610      	mov	r0, r2
 8013d30:	f7ff fbc6 	bl	80134c0 <_ZN8touchgfx8Drawable10setVisibleEb>
	indDTC.invalidate();
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f007 feb5 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indECT.setVisible(Current_Status.IND_ECT);
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8013d46:	4b24      	ldr	r3, [pc, #144]	; (8013dd8 <_ZN11Screen1View15handleTickEventEv+0x49c>)
 8013d48:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	bf14      	ite	ne
 8013d50:	2301      	movne	r3, #1
 8013d52:	2300      	moveq	r3, #0
 8013d54:	b2db      	uxtb	r3, r3
 8013d56:	4619      	mov	r1, r3
 8013d58:	4610      	mov	r0, r2
 8013d5a:	f7ff fbb1 	bl	80134c0 <_ZN8touchgfx8Drawable10setVisibleEb>
	indECT.invalidate();
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8013d64:	4618      	mov	r0, r3
 8013d66:	f007 fea0 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indLow.setVisible(Current_Status.IND_LOW);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	f503 7209 	add.w	r2, r3, #548	; 0x224
 8013d70:	4b19      	ldr	r3, [pc, #100]	; (8013dd8 <_ZN11Screen1View15handleTickEventEv+0x49c>)
 8013d72:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	bf14      	ite	ne
 8013d7a:	2301      	movne	r3, #1
 8013d7c:	2300      	moveq	r3, #0
 8013d7e:	b2db      	uxtb	r3, r3
 8013d80:	4619      	mov	r1, r3
 8013d82:	4610      	mov	r0, r2
 8013d84:	f7ff fb9c 	bl	80134c0 <_ZN8touchgfx8Drawable10setVisibleEb>
	indLow.invalidate();
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f007 fe8b 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indRight.setVisible(Current_Status.IND_RIGHT);
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8013d9a:	4b0f      	ldr	r3, [pc, #60]	; (8013dd8 <_ZN11Screen1View15handleTickEventEv+0x49c>)
 8013d9c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	bf14      	ite	ne
 8013da4:	2301      	movne	r3, #1
 8013da6:	2300      	moveq	r3, #0
 8013da8:	b2db      	uxtb	r3, r3
 8013daa:	4619      	mov	r1, r3
 8013dac:	4610      	mov	r0, r2
 8013dae:	f7ff fb87 	bl	80134c0 <_ZN8touchgfx8Drawable10setVisibleEb>
	indRight.invalidate();
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	33c4      	adds	r3, #196	; 0xc4
 8013db6:	4618      	mov	r0, r3
 8013db8:	f007 fe77 	bl	801baaa <_ZNK8touchgfx8Drawable10invalidateEv>

	gauge1.updateValue(Current_Status.RPM, 0);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8013dc2:	4a05      	ldr	r2, [pc, #20]	; (8013dd8 <_ZN11Screen1View15handleTickEventEv+0x49c>)
 8013dc4:	8812      	ldrh	r2, [r2, #0]
 8013dc6:	4611      	mov	r1, r2
 8013dc8:	2200      	movs	r2, #0
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f001 fedd 	bl	8015b8a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>
	//gauge1.set
	//gauge1.invalidate();

}
 8013dd0:	bf00      	nop
 8013dd2:	3730      	adds	r7, #48	; 0x30
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}
 8013dd8:	20007c38 	.word	0x20007c38

08013ddc <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8013ddc:	b480      	push	{r7}
 8013dde:	b083      	sub	sp, #12
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
    {
 8013de4:	4a04      	ldr	r2, [pc, #16]	; (8013df8 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	601a      	str	r2, [r3, #0]
    }
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	4618      	mov	r0, r3
 8013dee:	370c      	adds	r7, #12
 8013df0:	46bd      	mov	sp, r7
 8013df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df6:	4770      	bx	lr
 8013df8:	0802f4f8 	.word	0x0802f4f8

08013dfc <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
    }
 8013e04:	6878      	ldr	r0, [r7, #4]
 8013e06:	f7ff ffe9 	bl	8013ddc <_ZN8touchgfx15TouchControllerD1Ev>
 8013e0a:	2104      	movs	r1, #4
 8013e0c:	6878      	ldr	r0, [r7, #4]
 8013e0e:	f017 fe4c 	bl	802baaa <_ZdlPvj>
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	4618      	mov	r0, r3
 8013e16:	3708      	adds	r7, #8
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	bd80      	pop	{r7, pc}

08013e1c <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8013e1c:	b480      	push	{r7}
 8013e1e:	b083      	sub	sp, #12
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8013e24:	bf00      	nop
 8013e26:	370c      	adds	r7, #12
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2e:	4770      	bx	lr

08013e30 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8013e30:	b480      	push	{r7}
 8013e32:	b085      	sub	sp, #20
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	60f8      	str	r0, [r7, #12]
 8013e38:	60b9      	str	r1, [r7, #8]
 8013e3a:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8013e3c:	2300      	movs	r3, #0
}
 8013e3e:	4618      	mov	r0, r3
 8013e40:	3714      	adds	r7, #20
 8013e42:	46bd      	mov	sp, r7
 8013e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e48:	4770      	bx	lr
	...

08013e4c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b082      	sub	sp, #8
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
 8013e54:	4a05      	ldr	r2, [pc, #20]	; (8013e6c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	601a      	str	r2, [r3, #0]
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	f7ff ffbd 	bl	8013ddc <_ZN8touchgfx15TouchControllerD1Ev>
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	4618      	mov	r0, r3
 8013e66:	3708      	adds	r7, #8
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}
 8013e6c:	0802f4e0 	.word	0x0802f4e0

08013e70 <_ZN20STM32TouchControllerD0Ev>:
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b082      	sub	sp, #8
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f7ff ffe7 	bl	8013e4c <_ZN20STM32TouchControllerD1Ev>
 8013e7e:	2104      	movs	r1, #4
 8013e80:	6878      	ldr	r0, [r7, #4]
 8013e82:	f017 fe12 	bl	802baaa <_ZdlPvj>
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	4618      	mov	r0, r3
 8013e8a:	3708      	adds	r7, #8
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bd80      	pop	{r7, pc}

08013e90 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8013e90:	b480      	push	{r7}
 8013e92:	b083      	sub	sp, #12
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	4603      	mov	r3, r0
 8013e98:	71fb      	strb	r3, [r7, #7]

}
 8013e9a:	bf00      	nop
 8013e9c:	370c      	adds	r7, #12
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea4:	4770      	bx	lr

08013ea6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8013ea6:	b480      	push	{r7}
 8013ea8:	b083      	sub	sp, #12
 8013eaa:	af00      	add	r7, sp, #0
 8013eac:	4603      	mov	r3, r0
 8013eae:	71fb      	strb	r3, [r7, #7]

}
 8013eb0:	bf00      	nop
 8013eb2:	370c      	adds	r7, #12
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eba:	4770      	bx	lr

08013ebc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8013ebc:	b480      	push	{r7}
 8013ebe:	b083      	sub	sp, #12
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	71fb      	strb	r3, [r7, #7]

}
 8013ec6:	bf00      	nop
 8013ec8:	370c      	adds	r7, #12
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed0:	4770      	bx	lr
	...

08013ed4 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8013ed4:	b480      	push	{r7}
 8013ed6:	b083      	sub	sp, #12
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
    {
 8013edc:	4a04      	ldr	r2, [pc, #16]	; (8013ef0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	601a      	str	r2, [r3, #0]
    }
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	370c      	adds	r7, #12
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eee:	4770      	bx	lr
 8013ef0:	0802ff70 	.word	0x0802ff70

08013ef4 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b082      	sub	sp, #8
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
    }
 8013efc:	6878      	ldr	r0, [r7, #4]
 8013efe:	f7ff ffe9 	bl	8013ed4 <_ZN8touchgfx3HALD1Ev>
 8013f02:	217c      	movs	r1, #124	; 0x7c
 8013f04:	6878      	ldr	r0, [r7, #4]
 8013f06:	f017 fdd0 	bl	802baaa <_ZdlPvj>
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3708      	adds	r7, #8
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}

08013f14 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8013f14:	b480      	push	{r7}
 8013f16:	b083      	sub	sp, #12
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
 8013f1c:	460b      	mov	r3, r1
 8013f1e:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	78fa      	ldrb	r2, [r7, #3]
 8013f24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	2201      	movs	r2, #1
 8013f2c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8013f30:	bf00      	nop
 8013f32:	370c      	adds	r7, #12
 8013f34:	46bd      	mov	sp, r7
 8013f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3a:	4770      	bx	lr

08013f3c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b082      	sub	sp, #8
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d009      	beq.n	8013f62 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	685a      	ldr	r2, [r3, #4]
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	685b      	ldr	r3, [r3, #4]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	4610      	mov	r0, r2
 8013f5c:	4798      	blx	r3
 8013f5e:	4603      	mov	r3, r0
 8013f60:	e000      	b.n	8013f64 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 8013f62:	2300      	movs	r3, #0
        }
    }
 8013f64:	4618      	mov	r0, r3
 8013f66:	3708      	adds	r7, #8
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}

08013f6c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b082      	sub	sp, #8
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8013f74:	6878      	ldr	r0, [r7, #4]
 8013f76:	f002 ff95 	bl	8016ea4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	33a0      	adds	r3, #160	; 0xa0
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	6878      	ldr	r0, [r7, #4]
 8013f84:	4798      	blx	r3
    }
 8013f86:	bf00      	nop
 8013f88:	3708      	adds	r7, #8
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}

08013f8e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8013f8e:	b480      	push	{r7}
 8013f90:	b083      	sub	sp, #12
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	6078      	str	r0, [r7, #4]
 8013f96:	6039      	str	r1, [r7, #0]
    {
        return false;
 8013f98:	2300      	movs	r3, #0
    }
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	370c      	adds	r7, #12
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa4:	4770      	bx	lr
	...

08013fa8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b084      	sub	sp, #16
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	60f8      	str	r0, [r7, #12]
 8013fb0:	60b9      	str	r1, [r7, #8]
 8013fb2:	607a      	str	r2, [r7, #4]
 8013fb4:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d106      	bne.n	8013fca <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8013fbc:	4b11      	ldr	r3, [pc, #68]	; (8014004 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8013fbe:	4a12      	ldr	r2, [pc, #72]	; (8014008 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8013fc0:	f44f 7125 	mov.w	r1, #660	; 0x294
 8013fc4:	4811      	ldr	r0, [pc, #68]	; (801400c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8013fc6:	f018 fb8f 	bl	802c6e8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	68ba      	ldr	r2, [r7, #8]
 8013fce:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	687a      	ldr	r2, [r7, #4]
 8013fd4:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	683a      	ldr	r2, [r7, #0]
 8013fda:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	bf14      	ite	ne
 8013fe2:	2301      	movne	r3, #1
 8013fe4:	2300      	moveq	r3, #0
 8013fe6:	b2da      	uxtb	r2, r3
 8013fe8:	4b09      	ldr	r3, [pc, #36]	; (8014010 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8013fea:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8013fec:	683b      	ldr	r3, [r7, #0]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	bf14      	ite	ne
 8013ff2:	2301      	movne	r3, #1
 8013ff4:	2300      	moveq	r3, #0
 8013ff6:	b2da      	uxtb	r2, r3
 8013ff8:	4b06      	ldr	r3, [pc, #24]	; (8014014 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8013ffa:	701a      	strb	r2, [r3, #0]
    }
 8013ffc:	bf00      	nop
 8013ffe:	3710      	adds	r7, #16
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}
 8014004:	0802ec4c 	.word	0x0802ec4c
 8014008:	0802ec84 	.word	0x0802ec84
 801400c:	0802ecd4 	.word	0x0802ecd4
 8014010:	200067ce 	.word	0x200067ce
 8014014:	200067cf 	.word	0x200067cf

08014018 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8014018:	b480      	push	{r7}
 801401a:	b083      	sub	sp, #12
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8014020:	2300      	movs	r3, #0
    }
 8014022:	4618      	mov	r0, r3
 8014024:	370c      	adds	r7, #12
 8014026:	46bd      	mov	sp, r7
 8014028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402c:	4770      	bx	lr

0801402e <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 801402e:	b580      	push	{r7, lr}
 8014030:	b082      	sub	sp, #8
 8014032:	af00      	add	r7, sp, #0
 8014034:	6078      	str	r0, [r7, #4]
 8014036:	460b      	mov	r3, r1
 8014038:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801403e:	2b00      	cmp	r3, #0
 8014040:	d004      	beq.n	801404c <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014046:	887a      	ldrh	r2, [r7, #2]
 8014048:	4610      	mov	r0, r2
 801404a:	4798      	blx	r3
        }
    }
 801404c:	bf00      	nop
 801404e:	3708      	adds	r7, #8
 8014050:	46bd      	mov	sp, r7
 8014052:	bd80      	pop	{r7, pc}

08014054 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8014054:	b480      	push	{r7}
 8014056:	b083      	sub	sp, #12
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 801405c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8014060:	4618      	mov	r0, r3
 8014062:	370c      	adds	r7, #12
 8014064:	46bd      	mov	sp, r7
 8014066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406a:	4770      	bx	lr

0801406c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 801406c:	b580      	push	{r7, lr}
 801406e:	b082      	sub	sp, #8
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	685a      	ldr	r2, [r3, #4]
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	685b      	ldr	r3, [r3, #4]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	3318      	adds	r3, #24
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	4610      	mov	r0, r2
 8014084:	4798      	blx	r3
 8014086:	4603      	mov	r3, r0
    }
 8014088:	4618      	mov	r0, r3
 801408a:	3708      	adds	r7, #8
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}

08014090 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8014090:	b480      	push	{r7}
 8014092:	b083      	sub	sp, #12
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80140a4:	429a      	cmp	r2, r3
 80140a6:	d017      	beq.n	80140d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80140a8:	4b1a      	ldr	r3, [pc, #104]	; (8014114 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80140aa:	781b      	ldrb	r3, [r3, #0]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d12a      	bne.n	8014106 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80140b0:	4b19      	ldr	r3, [pc, #100]	; (8014118 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80140b2:	881a      	ldrh	r2, [r3, #0]
 80140b4:	4b19      	ldr	r3, [pc, #100]	; (801411c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80140b6:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80140b8:	4b19      	ldr	r3, [pc, #100]	; (8014120 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80140ba:	881a      	ldrh	r2, [r3, #0]
 80140bc:	4b19      	ldr	r3, [pc, #100]	; (8014124 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80140be:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80140c0:	4b16      	ldr	r3, [pc, #88]	; (801411c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80140c2:	881a      	ldrh	r2, [r3, #0]
 80140c4:	4b16      	ldr	r3, [pc, #88]	; (8014120 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80140c6:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80140c8:	4b16      	ldr	r3, [pc, #88]	; (8014124 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80140ca:	881a      	ldrh	r2, [r3, #0]
 80140cc:	4b12      	ldr	r3, [pc, #72]	; (8014118 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80140ce:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80140d0:	4b10      	ldr	r3, [pc, #64]	; (8014114 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80140d2:	2201      	movs	r2, #1
 80140d4:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80140d6:	e016      	b.n	8014106 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80140d8:	4b0e      	ldr	r3, [pc, #56]	; (8014114 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80140da:	781b      	ldrb	r3, [r3, #0]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d012      	beq.n	8014106 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80140e0:	4b0f      	ldr	r3, [pc, #60]	; (8014120 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80140e2:	881a      	ldrh	r2, [r3, #0]
 80140e4:	4b0d      	ldr	r3, [pc, #52]	; (801411c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80140e6:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80140e8:	4b0b      	ldr	r3, [pc, #44]	; (8014118 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80140ea:	881a      	ldrh	r2, [r3, #0]
 80140ec:	4b0d      	ldr	r3, [pc, #52]	; (8014124 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80140ee:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80140f0:	4b0c      	ldr	r3, [pc, #48]	; (8014124 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80140f2:	881a      	ldrh	r2, [r3, #0]
 80140f4:	4b0a      	ldr	r3, [pc, #40]	; (8014120 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80140f6:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80140f8:	4b08      	ldr	r3, [pc, #32]	; (801411c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80140fa:	881a      	ldrh	r2, [r3, #0]
 80140fc:	4b06      	ldr	r3, [pc, #24]	; (8014118 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80140fe:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8014100:	4b04      	ldr	r3, [pc, #16]	; (8014114 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014102:	2200      	movs	r2, #0
 8014104:	701a      	strb	r2, [r3, #0]
    }
 8014106:	bf00      	nop
 8014108:	370c      	adds	r7, #12
 801410a:	46bd      	mov	sp, r7
 801410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014110:	4770      	bx	lr
 8014112:	bf00      	nop
 8014114:	200067c8 	.word	0x200067c8
 8014118:	200067c4 	.word	0x200067c4
 801411c:	200067ca 	.word	0x200067ca
 8014120:	200067c6 	.word	0x200067c6
 8014124:	200067cc 	.word	0x200067cc

08014128 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8014128:	b480      	push	{r7}
 801412a:	b083      	sub	sp, #12
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
    {
    }
 8014130:	bf00      	nop
 8014132:	370c      	adds	r7, #12
 8014134:	46bd      	mov	sp, r7
 8014136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413a:	4770      	bx	lr

0801413c <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 801413c:	b480      	push	{r7}
 801413e:	b083      	sub	sp, #12
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
    {
    }
 8014144:	bf00      	nop
 8014146:	370c      	adds	r7, #12
 8014148:	46bd      	mov	sp, r7
 801414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414e:	4770      	bx	lr

08014150 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	4618      	mov	r0, r3
 801415c:	f002 f858 	bl	8016210 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8014160:	bf00      	nop
 8014162:	3708      	adds	r7, #8
 8014164:	46bd      	mov	sp, r7
 8014166:	bd80      	pop	{r7, pc}

08014168 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8014168:	b580      	push	{r7, lr}
 801416a:	b082      	sub	sp, #8
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
 8014170:	4a05      	ldr	r2, [pc, #20]	; (8014188 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	601a      	str	r2, [r3, #0]
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	4618      	mov	r0, r3
 801417a:	f7ff feab 	bl	8013ed4 <_ZN8touchgfx3HALD1Ev>
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	4618      	mov	r0, r3
 8014182:	3708      	adds	r7, #8
 8014184:	46bd      	mov	sp, r7
 8014186:	bd80      	pop	{r7, pc}
 8014188:	0802f724 	.word	0x0802f724

0801418c <_ZN20TouchGFXGeneratedHALD0Ev>:
 801418c:	b580      	push	{r7, lr}
 801418e:	b082      	sub	sp, #8
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
 8014194:	6878      	ldr	r0, [r7, #4]
 8014196:	f7ff ffe7 	bl	8014168 <_ZN20TouchGFXGeneratedHALD1Ev>
 801419a:	217c      	movs	r1, #124	; 0x7c
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	f017 fc84 	bl	802baaa <_ZdlPvj>
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	4618      	mov	r0, r3
 80141a6:	3708      	adds	r7, #8
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}

080141ac <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	4618      	mov	r0, r3
 80141b8:	f7ff ffca 	bl	8014150 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80141bc:	bf00      	nop
 80141be:	3708      	adds	r7, #8
 80141c0:	46bd      	mov	sp, r7
 80141c2:	bd80      	pop	{r7, pc}

080141c4 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b082      	sub	sp, #8
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	4618      	mov	r0, r3
 80141d0:	f001 faf6 	bl	80157c0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80141d4:	bf00      	nop
 80141d6:	3708      	adds	r7, #8
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}

080141dc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b082      	sub	sp, #8
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	4618      	mov	r0, r3
 80141e8:	f001 fb82 	bl	80158f0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80141ec:	4603      	mov	r3, r0
}
 80141ee:	4618      	mov	r0, r3
 80141f0:	3708      	adds	r7, #8
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}

080141f6 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80141f6:	b580      	push	{r7, lr}
 80141f8:	b082      	sub	sp, #8
 80141fa:	af00      	add	r7, sp, #0
 80141fc:	6078      	str	r0, [r7, #4]
 80141fe:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	6839      	ldr	r1, [r7, #0]
 8014204:	4618      	mov	r0, r3
 8014206:	f001 fb81 	bl	801590c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801420a:	bf00      	nop
 801420c:	3708      	adds	r7, #8
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}

08014212 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8014212:	b580      	push	{r7, lr}
 8014214:	b082      	sub	sp, #8
 8014216:	af00      	add	r7, sp, #0
 8014218:	6078      	str	r0, [r7, #4]
 801421a:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	6839      	ldr	r1, [r7, #0]
 8014220:	4618      	mov	r0, r3
 8014222:	f001 fb89 	bl	8015938 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8014226:	bf00      	nop
 8014228:	3708      	adds	r7, #8
 801422a:	46bd      	mov	sp, r7
 801422c:	bd80      	pop	{r7, pc}

0801422e <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801422e:	b580      	push	{r7, lr}
 8014230:	b084      	sub	sp, #16
 8014232:	af00      	add	r7, sp, #0
 8014234:	60f8      	str	r0, [r7, #12]
 8014236:	60b9      	str	r1, [r7, #8]
 8014238:	607a      	str	r2, [r7, #4]
 801423a:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 801423c:	68f8      	ldr	r0, [r7, #12]
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	687a      	ldr	r2, [r7, #4]
 8014242:	68b9      	ldr	r1, [r7, #8]
 8014244:	f001 fb86 	bl	8015954 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8014248:	4603      	mov	r3, r0
}
 801424a:	4618      	mov	r0, r3
 801424c:	3710      	adds	r7, #16
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}

08014252 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8014252:	b580      	push	{r7, lr}
 8014254:	b082      	sub	sp, #8
 8014256:	af00      	add	r7, sp, #0
 8014258:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	4618      	mov	r0, r3
 801425e:	f001 fad3 	bl	8015808 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8014262:	bf00      	nop
 8014264:	3708      	adds	r7, #8
 8014266:	46bd      	mov	sp, r7
 8014268:	bd80      	pop	{r7, pc}

0801426a <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801426a:	b580      	push	{r7, lr}
 801426c:	b082      	sub	sp, #8
 801426e:	af00      	add	r7, sp, #0
 8014270:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	4618      	mov	r0, r3
 8014276:	f001 fad7 	bl	8015828 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801427a:	bf00      	nop
 801427c:	3708      	adds	r7, #8
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}

08014282 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8014282:	b580      	push	{r7, lr}
 8014284:	b082      	sub	sp, #8
 8014286:	af00      	add	r7, sp, #0
 8014288:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	4618      	mov	r0, r3
 801428e:	f001 fad9 	bl	8015844 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8014292:	bf00      	nop
 8014294:	3708      	adds	r7, #8
 8014296:	46bd      	mov	sp, r7
 8014298:	bd80      	pop	{r7, pc}

0801429a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 801429a:	b580      	push	{r7, lr}
 801429c:	b082      	sub	sp, #8
 801429e:	af00      	add	r7, sp, #0
 80142a0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	4618      	mov	r0, r3
 80142a6:	f001 fadb 	bl	8015860 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80142aa:	bf00      	nop
 80142ac:	3708      	adds	r7, #8
 80142ae:	46bd      	mov	sp, r7
 80142b0:	bd80      	pop	{r7, pc}
	...

080142b4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b082      	sub	sp, #8
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
 80142bc:	4a05      	ldr	r2, [pc, #20]	; (80142d4 <_ZN11TouchGFXHALD1Ev+0x20>)
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	601a      	str	r2, [r3, #0]
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	4618      	mov	r0, r3
 80142c6:	f7ff ff4f 	bl	8014168 <_ZN20TouchGFXGeneratedHALD1Ev>
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	4618      	mov	r0, r3
 80142ce:	3708      	adds	r7, #8
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bd80      	pop	{r7, pc}
 80142d4:	0802f510 	.word	0x0802f510

080142d8 <_ZN11TouchGFXHALD0Ev>:
 80142d8:	b580      	push	{r7, lr}
 80142da:	b082      	sub	sp, #8
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
 80142e0:	6878      	ldr	r0, [r7, #4]
 80142e2:	f7ff ffe7 	bl	80142b4 <_ZN11TouchGFXHALD1Ev>
 80142e6:	217c      	movs	r1, #124	; 0x7c
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f017 fbde 	bl	802baaa <_ZdlPvj>
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	4618      	mov	r0, r3
 80142f2:	3708      	adds	r7, #8
 80142f4:	46bd      	mov	sp, r7
 80142f6:	bd80      	pop	{r7, pc}

080142f8 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80142fc:	2200      	movs	r2, #0
 80142fe:	2101      	movs	r1, #1
 8014300:	2001      	movs	r0, #1
 8014302:	f7f6 fe22 	bl	800af4a <osSemaphoreNew>
 8014306:	4603      	mov	r3, r0
 8014308:	4a0f      	ldr	r2, [pc, #60]	; (8014348 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801430a:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 801430c:	4b0e      	ldr	r3, [pc, #56]	; (8014348 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d105      	bne.n	8014320 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8014314:	4b0d      	ldr	r3, [pc, #52]	; (801434c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8014316:	4a0e      	ldr	r2, [pc, #56]	; (8014350 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8014318:	2127      	movs	r1, #39	; 0x27
 801431a:	480e      	ldr	r0, [pc, #56]	; (8014354 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801431c:	f018 f9e4 	bl	802c6e8 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8014320:	2200      	movs	r2, #0
 8014322:	2104      	movs	r1, #4
 8014324:	2001      	movs	r0, #1
 8014326:	f7f6 ff53 	bl	800b1d0 <osMessageQueueNew>
 801432a:	4603      	mov	r3, r0
 801432c:	4a0a      	ldr	r2, [pc, #40]	; (8014358 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801432e:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8014330:	4b09      	ldr	r3, [pc, #36]	; (8014358 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d105      	bne.n	8014344 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8014338:	4b08      	ldr	r3, [pc, #32]	; (801435c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801433a:	4a05      	ldr	r2, [pc, #20]	; (8014350 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 801433c:	212b      	movs	r1, #43	; 0x2b
 801433e:	4805      	ldr	r0, [pc, #20]	; (8014354 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8014340:	f018 f9d2 	bl	802c6e8 <__assert_func>
}
 8014344:	bf00      	nop
 8014346:	bd80      	pop	{r7, pc}
 8014348:	20004b98 	.word	0x20004b98
 801434c:	0802ed18 	.word	0x0802ed18
 8014350:	0802ed64 	.word	0x0802ed64
 8014354:	0802ed94 	.word	0x0802ed94
 8014358:	20004b9c 	.word	0x20004b9c
 801435c:	0802edc0 	.word	0x0802edc0

08014360 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8014360:	b580      	push	{r7, lr}
 8014362:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8014364:	4b04      	ldr	r3, [pc, #16]	; (8014378 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	f04f 31ff 	mov.w	r1, #4294967295
 801436c:	4618      	mov	r0, r3
 801436e:	f7f6 fe75 	bl	800b05c <osSemaphoreAcquire>
}
 8014372:	bf00      	nop
 8014374:	bd80      	pop	{r7, pc}
 8014376:	bf00      	nop
 8014378:	20004b98 	.word	0x20004b98

0801437c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 801437c:	b580      	push	{r7, lr}
 801437e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8014380:	4b03      	ldr	r3, [pc, #12]	; (8014390 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	4618      	mov	r0, r3
 8014386:	f7f6 febb 	bl	800b100 <osSemaphoreRelease>
}
 801438a:	bf00      	nop
 801438c:	bd80      	pop	{r7, pc}
 801438e:	bf00      	nop
 8014390:	20004b98 	.word	0x20004b98

08014394 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8014394:	b580      	push	{r7, lr}
 8014396:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8014398:	4b03      	ldr	r3, [pc, #12]	; (80143a8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	2100      	movs	r1, #0
 801439e:	4618      	mov	r0, r3
 80143a0:	f7f6 fe5c 	bl	800b05c <osSemaphoreAcquire>
}
 80143a4:	bf00      	nop
 80143a6:	bd80      	pop	{r7, pc}
 80143a8:	20004b98 	.word	0x20004b98

080143ac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80143b0:	4b03      	ldr	r3, [pc, #12]	; (80143c0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7f6 fea3 	bl	800b100 <osSemaphoreRelease>
}
 80143ba:	bf00      	nop
 80143bc:	bd80      	pop	{r7, pc}
 80143be:	bf00      	nop
 80143c0:	20004b98 	.word	0x20004b98

080143c4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80143c8:	4b04      	ldr	r3, [pc, #16]	; (80143dc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80143ca:	6818      	ldr	r0, [r3, #0]
 80143cc:	2300      	movs	r3, #0
 80143ce:	2200      	movs	r2, #0
 80143d0:	4903      	ldr	r1, [pc, #12]	; (80143e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80143d2:	f7f6 ff71 	bl	800b2b8 <osMessageQueuePut>
}
 80143d6:	bf00      	nop
 80143d8:	bd80      	pop	{r7, pc}
 80143da:	bf00      	nop
 80143dc:	20004b9c 	.word	0x20004b9c
 80143e0:	20000014 	.word	0x20000014

080143e4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b082      	sub	sp, #8
 80143e8:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80143ea:	4b09      	ldr	r3, [pc, #36]	; (8014410 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80143ec:	6818      	ldr	r0, [r3, #0]
 80143ee:	1d39      	adds	r1, r7, #4
 80143f0:	2300      	movs	r3, #0
 80143f2:	2200      	movs	r2, #0
 80143f4:	f7f6 ffc0 	bl	800b378 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80143f8:	4b05      	ldr	r3, [pc, #20]	; (8014410 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80143fa:	6818      	ldr	r0, [r3, #0]
 80143fc:	1d39      	adds	r1, r7, #4
 80143fe:	f04f 33ff 	mov.w	r3, #4294967295
 8014402:	2200      	movs	r2, #0
 8014404:	f7f6 ffb8 	bl	800b378 <osMessageQueueGet>
}
 8014408:	bf00      	nop
 801440a:	3708      	adds	r7, #8
 801440c:	46bd      	mov	sp, r7
 801440e:	bd80      	pop	{r7, pc}
 8014410:	20004b9c 	.word	0x20004b9c

08014414 <_ZN8touchgfx10OSWrappers9taskYieldEv>:
 * system to change to another task of similar priority. When
 * running without an operating system, the implementation can run
 * a very short task and return.
 */
void OSWrappers::taskYield()
{
 8014414:	b580      	push	{r7, lr}
 8014416:	af00      	add	r7, sp, #0
    osThreadYield();
 8014418:	f7f6 fd5c 	bl	800aed4 <osThreadYield>
}
 801441c:	bf00      	nop
 801441e:	bd80      	pop	{r7, pc}

08014420 <__NVIC_EnableIRQ>:
{
 8014420:	b480      	push	{r7}
 8014422:	b083      	sub	sp, #12
 8014424:	af00      	add	r7, sp, #0
 8014426:	4603      	mov	r3, r0
 8014428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801442a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801442e:	2b00      	cmp	r3, #0
 8014430:	db0b      	blt.n	801444a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014432:	79fb      	ldrb	r3, [r7, #7]
 8014434:	f003 021f 	and.w	r2, r3, #31
 8014438:	4907      	ldr	r1, [pc, #28]	; (8014458 <__NVIC_EnableIRQ+0x38>)
 801443a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801443e:	095b      	lsrs	r3, r3, #5
 8014440:	2001      	movs	r0, #1
 8014442:	fa00 f202 	lsl.w	r2, r0, r2
 8014446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801444a:	bf00      	nop
 801444c:	370c      	adds	r7, #12
 801444e:	46bd      	mov	sp, r7
 8014450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014454:	4770      	bx	lr
 8014456:	bf00      	nop
 8014458:	e000e100 	.word	0xe000e100

0801445c <__NVIC_DisableIRQ>:
{
 801445c:	b480      	push	{r7}
 801445e:	b083      	sub	sp, #12
 8014460:	af00      	add	r7, sp, #0
 8014462:	4603      	mov	r3, r0
 8014464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801446a:	2b00      	cmp	r3, #0
 801446c:	db12      	blt.n	8014494 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801446e:	79fb      	ldrb	r3, [r7, #7]
 8014470:	f003 021f 	and.w	r2, r3, #31
 8014474:	490a      	ldr	r1, [pc, #40]	; (80144a0 <__NVIC_DisableIRQ+0x44>)
 8014476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801447a:	095b      	lsrs	r3, r3, #5
 801447c:	2001      	movs	r0, #1
 801447e:	fa00 f202 	lsl.w	r2, r0, r2
 8014482:	3320      	adds	r3, #32
 8014484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8014488:	f3bf 8f4f 	dsb	sy
}
 801448c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801448e:	f3bf 8f6f 	isb	sy
}
 8014492:	bf00      	nop
}
 8014494:	bf00      	nop
 8014496:	370c      	adds	r7, #12
 8014498:	46bd      	mov	sp, r7
 801449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449e:	4770      	bx	lr
 80144a0:	e000e100 	.word	0xe000e100

080144a4 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 80144a4:	b480      	push	{r7}
 80144a6:	b083      	sub	sp, #12
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
        : color(0)
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	2200      	movs	r2, #0
 80144b0:	601a      	str	r2, [r3, #0]
    }
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	4618      	mov	r0, r3
 80144b6:	370c      	adds	r7, #12
 80144b8:	46bd      	mov	sp, r7
 80144ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144be:	4770      	bx	lr

080144c0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80144c0:	b480      	push	{r7}
 80144c2:	b083      	sub	sp, #12
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
    {
 80144c8:	4a04      	ldr	r2, [pc, #16]	; (80144dc <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	601a      	str	r2, [r3, #0]
    }
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	4618      	mov	r0, r3
 80144d2:	370c      	adds	r7, #12
 80144d4:	46bd      	mov	sp, r7
 80144d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144da:	4770      	bx	lr
 80144dc:	0802f62c 	.word	0x0802f62c

080144e0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b082      	sub	sp, #8
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
    }
 80144e8:	6878      	ldr	r0, [r7, #4]
 80144ea:	f7ff ffe9 	bl	80144c0 <_ZN8touchgfx9DMA_QueueD1Ev>
 80144ee:	2104      	movs	r1, #4
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f017 fada 	bl	802baaa <_ZdlPvj>
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	4618      	mov	r0, r3
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}

08014500 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8014500:	b580      	push	{r7, lr}
 8014502:	b082      	sub	sp, #8
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	3344      	adds	r3, #68	; 0x44
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	6878      	ldr	r0, [r7, #4]
 8014512:	4798      	blx	r3
    }
 8014514:	bf00      	nop
 8014516:	3708      	adds	r7, #8
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}

0801451c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 801451c:	b480      	push	{r7}
 801451e:	b083      	sub	sp, #12
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
    {
 8014524:	4a04      	ldr	r2, [pc, #16]	; (8014538 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	601a      	str	r2, [r3, #0]
    }
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	4618      	mov	r0, r3
 801452e:	370c      	adds	r7, #12
 8014530:	46bd      	mov	sp, r7
 8014532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014536:	4770      	bx	lr
 8014538:	080304b0 	.word	0x080304b0

0801453c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 801453c:	b580      	push	{r7, lr}
 801453e:	b082      	sub	sp, #8
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
    }
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	f7ff ffe9 	bl	801451c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801454a:	210c      	movs	r1, #12
 801454c:	6878      	ldr	r0, [r7, #4]
 801454e:	f017 faac 	bl	802baaa <_ZdlPvj>
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	4618      	mov	r0, r3
 8014556:	3708      	adds	r7, #8
 8014558:	46bd      	mov	sp, r7
 801455a:	bd80      	pop	{r7, pc}

0801455c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 801455c:	b480      	push	{r7}
 801455e:	b083      	sub	sp, #12
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
 8014564:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8014566:	4a09      	ldr	r2, [pc, #36]	; (801458c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	601a      	str	r2, [r3, #0]
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	683a      	ldr	r2, [r7, #0]
 8014570:	605a      	str	r2, [r3, #4]
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	2200      	movs	r2, #0
 8014576:	721a      	strb	r2, [r3, #8]
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	2200      	movs	r2, #0
 801457c:	725a      	strb	r2, [r3, #9]
    {
    }
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	4618      	mov	r0, r3
 8014582:	370c      	adds	r7, #12
 8014584:	46bd      	mov	sp, r7
 8014586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458a:	4770      	bx	lr
 801458c:	080304b0 	.word	0x080304b0

08014590 <_ZN10STM32F4DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8014590:	b480      	push	{r7}
 8014592:	b083      	sub	sp, #12
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8014598:	2301      	movs	r3, #1
    }
 801459a:	4618      	mov	r0, r3
 801459c:	370c      	adds	r7, #12
 801459e:	46bd      	mov	sp, r7
 80145a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a4:	4770      	bx	lr

080145a6 <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80145a6:	b580      	push	{r7, lr}
 80145a8:	b082      	sub	sp, #8
 80145aa:	af00      	add	r7, sp, #0
 80145ac:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80145ae:	687a      	ldr	r2, [r7, #4]
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	3328      	adds	r3, #40	; 0x28
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	4610      	mov	r0, r2
 80145ba:	4798      	blx	r3
    }
 80145bc:	bf00      	nop
 80145be:	3708      	adds	r7, #8
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}

080145c4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b082      	sub	sp, #8
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	685a      	ldr	r2, [r3, #4]
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	3314      	adds	r3, #20
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	4610      	mov	r0, r2
 80145dc:	4798      	blx	r3
    }
 80145de:	bf00      	nop
 80145e0:	3708      	adds	r7, #8
 80145e2:	46bd      	mov	sp, r7
 80145e4:	bd80      	pop	{r7, pc}

080145e6 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 80145e6:	b580      	push	{r7, lr}
 80145e8:	b082      	sub	sp, #8
 80145ea:	af00      	add	r7, sp, #0
 80145ec:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 80145ee:	f7fa fcb5 	bl	800ef5c <_ZN8touchgfx3HAL11getInstanceEv>
 80145f2:	4603      	mov	r3, r0
 80145f4:	4618      	mov	r0, r3
 80145f6:	f7ff ffe5 	bl	80145c4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 80145fa:	bf00      	nop
 80145fc:	3708      	adds	r7, #8
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}

08014602 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8014602:	b580      	push	{r7, lr}
 8014604:	b082      	sub	sp, #8
 8014606:	af00      	add	r7, sp, #0
 8014608:	6078      	str	r0, [r7, #4]
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	330c      	adds	r3, #12
 801460e:	4618      	mov	r0, r3
 8014610:	f7ff ff48 	bl	80144a4 <_ZN8touchgfx9colortypeC1Ev>
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	4618      	mov	r0, r3
 8014618:	3708      	adds	r7, #8
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
	...

08014620 <_ZN10STM32F4DMAC1Ev>:
}

STM32F4DMA::STM32F4DMA()
 8014620:	b5b0      	push	{r4, r5, r7, lr}
 8014622:	b082      	sub	sp, #8
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8014628:	687a      	ldr	r2, [r7, #4]
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	330c      	adds	r3, #12
 801462e:	4619      	mov	r1, r3
 8014630:	4610      	mov	r0, r2
 8014632:	f7ff ff93 	bl	801455c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8014636:	4a0e      	ldr	r2, [pc, #56]	; (8014670 <_ZN10STM32F4DMAC1Ev+0x50>)
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	601a      	str	r2, [r3, #0]
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	f103 000c 	add.w	r0, r3, #12
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	3320      	adds	r3, #32
 8014646:	2260      	movs	r2, #96	; 0x60
 8014648:	4619      	mov	r1, r3
 801464a:	f002 fd61 	bl	8017110 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	3320      	adds	r3, #32
 8014652:	245f      	movs	r4, #95	; 0x5f
 8014654:	461d      	mov	r5, r3
 8014656:	2c00      	cmp	r4, #0
 8014658:	db05      	blt.n	8014666 <_ZN10STM32F4DMAC1Ev+0x46>
 801465a:	4628      	mov	r0, r5
 801465c:	f7ff ffd1 	bl	8014602 <_ZN8touchgfx6BlitOpC1Ev>
 8014660:	3520      	adds	r5, #32
 8014662:	3c01      	subs	r4, #1
 8014664:	e7f7      	b.n	8014656 <_ZN10STM32F4DMAC1Ev+0x36>
{
}
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	4618      	mov	r0, r3
 801466a:	3708      	adds	r7, #8
 801466c:	46bd      	mov	sp, r7
 801466e:	bdb0      	pop	{r4, r5, r7, pc}
 8014670:	0802f5dc 	.word	0x0802f5dc

08014674 <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 8014674:	b580      	push	{r7, lr}
 8014676:	b082      	sub	sp, #8
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
 801467c:	4a09      	ldr	r2, [pc, #36]	; (80146a4 <_ZN10STM32F4DMAD1Ev+0x30>)
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014682:	205a      	movs	r0, #90	; 0x5a
 8014684:	f7ff feea 	bl	801445c <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	330c      	adds	r3, #12
 801468c:	4618      	mov	r0, r3
 801468e:	f000 fb25 	bl	8014cdc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	4618      	mov	r0, r3
 8014696:	f7ff ff41 	bl	801451c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	4618      	mov	r0, r3
 801469e:	3708      	adds	r7, #8
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd80      	pop	{r7, pc}
 80146a4:	0802f5dc 	.word	0x0802f5dc

080146a8 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b082      	sub	sp, #8
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
}
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	f7ff ffdf 	bl	8014674 <_ZN10STM32F4DMAD1Ev>
 80146b6:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f017 f9f5 	bl	802baaa <_ZdlPvj>
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	4618      	mov	r0, r3
 80146c4:	3708      	adds	r7, #8
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bd80      	pop	{r7, pc}
	...

080146cc <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b084      	sub	sp, #16
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80146d4:	2300      	movs	r3, #0
 80146d6:	60fb      	str	r3, [r7, #12]
 80146d8:	4b10      	ldr	r3, [pc, #64]	; (801471c <_ZN10STM32F4DMA10initializeEv+0x50>)
 80146da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146dc:	4a0f      	ldr	r2, [pc, #60]	; (801471c <_ZN10STM32F4DMA10initializeEv+0x50>)
 80146de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80146e2:	6313      	str	r3, [r2, #48]	; 0x30
 80146e4:	4b0d      	ldr	r3, [pc, #52]	; (801471c <_ZN10STM32F4DMA10initializeEv+0x50>)
 80146e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80146ec:	60fb      	str	r3, [r7, #12]
 80146ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80146f0:	4b0a      	ldr	r3, [pc, #40]	; (801471c <_ZN10STM32F4DMA10initializeEv+0x50>)
 80146f2:	691b      	ldr	r3, [r3, #16]
 80146f4:	4a09      	ldr	r2, [pc, #36]	; (801471c <_ZN10STM32F4DMA10initializeEv+0x50>)
 80146f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80146fa:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80146fc:	4b07      	ldr	r3, [pc, #28]	; (801471c <_ZN10STM32F4DMA10initializeEv+0x50>)
 80146fe:	691b      	ldr	r3, [r3, #16]
 8014700:	4a06      	ldr	r2, [pc, #24]	; (801471c <_ZN10STM32F4DMA10initializeEv+0x50>)
 8014702:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8014706:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8014708:	4b05      	ldr	r3, [pc, #20]	; (8014720 <_ZN10STM32F4DMA10initializeEv+0x54>)
 801470a:	4a06      	ldr	r2, [pc, #24]	; (8014724 <_ZN10STM32F4DMA10initializeEv+0x58>)
 801470c:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 801470e:	205a      	movs	r0, #90	; 0x5a
 8014710:	f7ff fe86 	bl	8014420 <__NVIC_EnableIRQ>
}
 8014714:	bf00      	nop
 8014716:	3710      	adds	r7, #16
 8014718:	46bd      	mov	sp, r7
 801471a:	bd80      	pop	{r7, pc}
 801471c:	40023800 	.word	0x40023800
 8014720:	20008740 	.word	0x20008740
 8014724:	080145e7 	.word	0x080145e7

08014728 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F4DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b084      	sub	sp, #16
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
 8014730:	460b      	mov	r3, r1
 8014732:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8014734:	2300      	movs	r3, #0
 8014736:	60fb      	str	r3, [r7, #12]

    switch (format)
 8014738:	78fb      	ldrb	r3, [r7, #3]
 801473a:	2b0b      	cmp	r3, #11
 801473c:	d826      	bhi.n	801478c <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 801473e:	a201      	add	r2, pc, #4	; (adr r2, 8014744 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8014740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014744:	08014781 	.word	0x08014781
 8014748:	0801477b 	.word	0x0801477b
 801474c:	08014775 	.word	0x08014775
 8014750:	0801478d 	.word	0x0801478d
 8014754:	0801478d 	.word	0x0801478d
 8014758:	0801478d 	.word	0x0801478d
 801475c:	0801478d 	.word	0x0801478d
 8014760:	08014787 	.word	0x08014787
 8014764:	08014787 	.word	0x08014787
 8014768:	08014787 	.word	0x08014787
 801476c:	08014787 	.word	0x08014787
 8014770:	08014787 	.word	0x08014787
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8014774:	2300      	movs	r3, #0
 8014776:	60fb      	str	r3, [r7, #12]
        break;
 8014778:	e00e      	b.n	8014798 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 801477a:	2301      	movs	r3, #1
 801477c:	60fb      	str	r3, [r7, #12]
        break;
 801477e:	e00b      	b.n	8014798 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8014780:	2302      	movs	r3, #2
 8014782:	60fb      	str	r3, [r7, #12]
        break;
 8014784:	e008      	b.n	8014798 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8014786:	2305      	movs	r3, #5
 8014788:	60fb      	str	r3, [r7, #12]
        break;
 801478a:	e005      	b.n	8014798 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 801478c:	4b05      	ldr	r3, [pc, #20]	; (80147a4 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 801478e:	4a06      	ldr	r2, [pc, #24]	; (80147a8 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8014790:	2165      	movs	r1, #101	; 0x65
 8014792:	4806      	ldr	r0, [pc, #24]	; (80147ac <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8014794:	f017 ffa8 	bl	802c6e8 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8014798:	68fb      	ldr	r3, [r7, #12]
}
 801479a:	4618      	mov	r0, r3
 801479c:	3710      	adds	r7, #16
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	0802ee04 	.word	0x0802ee04
 80147a8:	0802ee20 	.word	0x0802ee20
 80147ac:	0802ee6c 	.word	0x0802ee6c

080147b0 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F4DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b084      	sub	sp, #16
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
 80147b8:	460b      	mov	r3, r1
 80147ba:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80147bc:	2300      	movs	r3, #0
 80147be:	60fb      	str	r3, [r7, #12]

    switch (format)
 80147c0:	78fb      	ldrb	r3, [r7, #3]
 80147c2:	2b0a      	cmp	r3, #10
 80147c4:	d821      	bhi.n	801480a <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80147c6:	a201      	add	r2, pc, #4	; (adr r2, 80147cc <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80147c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147cc:	08014805 	.word	0x08014805
 80147d0:	080147ff 	.word	0x080147ff
 80147d4:	080147f9 	.word	0x080147f9
 80147d8:	0801480b 	.word	0x0801480b
 80147dc:	0801480b 	.word	0x0801480b
 80147e0:	0801480b 	.word	0x0801480b
 80147e4:	0801480b 	.word	0x0801480b
 80147e8:	080147ff 	.word	0x080147ff
 80147ec:	080147ff 	.word	0x080147ff
 80147f0:	080147ff 	.word	0x080147ff
 80147f4:	080147ff 	.word	0x080147ff
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80147f8:	2300      	movs	r3, #0
 80147fa:	60fb      	str	r3, [r7, #12]
        break;
 80147fc:	e00b      	b.n	8014816 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80147fe:	2301      	movs	r3, #1
 8014800:	60fb      	str	r3, [r7, #12]
        break;
 8014802:	e008      	b.n	8014816 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8014804:	2302      	movs	r3, #2
 8014806:	60fb      	str	r3, [r7, #12]
        break;
 8014808:	e005      	b.n	8014816 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 801480a:	4b05      	ldr	r3, [pc, #20]	; (8014820 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 801480c:	4a05      	ldr	r2, [pc, #20]	; (8014824 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 801480e:	2186      	movs	r1, #134	; 0x86
 8014810:	4805      	ldr	r0, [pc, #20]	; (8014828 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8014812:	f017 ff69 	bl	802c6e8 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8014816:	68fb      	ldr	r3, [r7, #12]
}
 8014818:	4618      	mov	r0, r3
 801481a:	3710      	adds	r7, #16
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}
 8014820:	0802ee04 	.word	0x0802ee04
 8014824:	0802ee98 	.word	0x0802ee98
 8014828:	0802ee6c 	.word	0x0802ee6c

0801482c <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 801482c:	b480      	push	{r7}
 801482e:	b083      	sub	sp, #12
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8014834:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8014838:	4618      	mov	r0, r3
 801483a:	370c      	adds	r7, #12
 801483c:	46bd      	mov	sp, r7
 801483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014842:	4770      	bx	lr

08014844 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 8014844:	b590      	push	{r4, r7, lr}
 8014846:	b089      	sub	sp, #36	; 0x24
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
 801484c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 801484e:	683b      	ldr	r3, [r7, #0]
 8014850:	7f5b      	ldrb	r3, [r3, #29]
 8014852:	4619      	mov	r1, r3
 8014854:	6878      	ldr	r0, [r7, #4]
 8014856:	f7ff ff67 	bl	8014728 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801485a:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	7f9b      	ldrb	r3, [r3, #30]
 8014860:	4619      	mov	r1, r3
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f7ff ff60 	bl	8014728 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8014868:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	7f9b      	ldrb	r3, [r3, #30]
 801486e:	4619      	mov	r1, r3
 8014870:	6878      	ldr	r0, [r7, #4]
 8014872:	f7ff ff9d 	bl	80147b0 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8014876:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014878:	683b      	ldr	r3, [r7, #0]
 801487a:	8b5b      	ldrh	r3, [r3, #26]
 801487c:	461a      	mov	r2, r3
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	8a9b      	ldrh	r3, [r3, #20]
 8014882:	1ad2      	subs	r2, r2, r3
 8014884:	4ba3      	ldr	r3, [pc, #652]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014886:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	8b5b      	ldrh	r3, [r3, #26]
 801488c:	461a      	mov	r2, r3
 801488e:	683b      	ldr	r3, [r7, #0]
 8014890:	8a9b      	ldrh	r3, [r3, #20]
 8014892:	1ad2      	subs	r2, r2, r3
 8014894:	4b9f      	ldr	r3, [pc, #636]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014896:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8014898:	683b      	ldr	r3, [r7, #0]
 801489a:	8b1b      	ldrh	r3, [r3, #24]
 801489c:	461a      	mov	r2, r3
 801489e:	683b      	ldr	r3, [r7, #0]
 80148a0:	8a9b      	ldrh	r3, [r3, #20]
 80148a2:	1ad2      	subs	r2, r2, r3
 80148a4:	4b9b      	ldr	r3, [pc, #620]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80148a6:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80148a8:	4a9a      	ldr	r2, [pc, #616]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80148aa:	693b      	ldr	r3, [r7, #16]
 80148ac:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	8adb      	ldrh	r3, [r3, #22]
 80148b2:	461a      	mov	r2, r3
 80148b4:	683b      	ldr	r3, [r7, #0]
 80148b6:	8a9b      	ldrh	r3, [r3, #20]
 80148b8:	041b      	lsls	r3, r3, #16
 80148ba:	431a      	orrs	r2, r3
 80148bc:	4b95      	ldr	r3, [pc, #596]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80148be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80148c0:	683b      	ldr	r3, [r7, #0]
 80148c2:	691a      	ldr	r2, [r3, #16]
 80148c4:	4b93      	ldr	r3, [pc, #588]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80148c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	685a      	ldr	r2, [r3, #4]
 80148cc:	4b91      	ldr	r3, [pc, #580]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80148ce:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80148d0:	683b      	ldr	r3, [r7, #0]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80148d8:	d04f      	beq.n	801497a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 80148da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80148de:	f200 8125 	bhi.w	8014b2c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e8>
 80148e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80148e6:	d015      	beq.n	8014914 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80148e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80148ec:	f200 811e 	bhi.w	8014b2c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e8>
 80148f0:	2b80      	cmp	r3, #128	; 0x80
 80148f2:	f000 808a 	beq.w	8014a0a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c6>
 80148f6:	2b80      	cmp	r3, #128	; 0x80
 80148f8:	f200 8118 	bhi.w	8014b2c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e8>
 80148fc:	2b40      	cmp	r3, #64	; 0x40
 80148fe:	f000 80f4 	beq.w	8014aea <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a6>
 8014902:	2b40      	cmp	r3, #64	; 0x40
 8014904:	f200 8112 	bhi.w	8014b2c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e8>
 8014908:	2b04      	cmp	r3, #4
 801490a:	d069      	beq.n	80149e0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>
 801490c:	2b20      	cmp	r3, #32
 801490e:	f000 80ec 	beq.w	8014aea <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a6>
 8014912:	e10b      	b.n	8014b2c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e8>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	7f1b      	ldrb	r3, [r3, #28]
 8014918:	061b      	lsls	r3, r3, #24
 801491a:	4a7e      	ldr	r2, [pc, #504]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 801491c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014920:	f043 030a 	orr.w	r3, r3, #10
 8014924:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	330c      	adds	r3, #12
 801492a:	4618      	mov	r0, r3
 801492c:	f7eb fe3b 	bl	80005a6 <_ZNK8touchgfx9colortypecvmEv>
 8014930:	4603      	mov	r3, r0
 8014932:	021b      	lsls	r3, r3, #8
 8014934:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 8014938:	683b      	ldr	r3, [r7, #0]
 801493a:	330c      	adds	r3, #12
 801493c:	4618      	mov	r0, r3
 801493e:	f7eb fe32 	bl	80005a6 <_ZNK8touchgfx9colortypecvmEv>
 8014942:	4603      	mov	r3, r0
 8014944:	015b      	lsls	r3, r3, #5
 8014946:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 801494a:	431c      	orrs	r4, r3
 801494c:	683b      	ldr	r3, [r7, #0]
 801494e:	330c      	adds	r3, #12
 8014950:	4618      	mov	r0, r3
 8014952:	f7eb fe28 	bl	80005a6 <_ZNK8touchgfx9colortypecvmEv>
 8014956:	4603      	mov	r3, r0
 8014958:	00db      	lsls	r3, r3, #3
 801495a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801495e:	4a6d      	ldr	r2, [pc, #436]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014960:	4323      	orrs	r3, r4
 8014962:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014964:	4a6b      	ldr	r2, [pc, #428]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014966:	697b      	ldr	r3, [r7, #20]
 8014968:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	691a      	ldr	r2, [r3, #16]
 801496e:	4b69      	ldr	r3, [pc, #420]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014970:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014972:	4b68      	ldr	r3, [pc, #416]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014974:	4a68      	ldr	r2, [pc, #416]	; (8014b18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>)
 8014976:	601a      	str	r2, [r3, #0]
        break;
 8014978:	e0f1      	b.n	8014b5e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	7f1b      	ldrb	r3, [r3, #28]
 801497e:	061b      	lsls	r3, r3, #24
 8014980:	4a64      	ldr	r2, [pc, #400]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014986:	f043 0309 	orr.w	r3, r3, #9
 801498a:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	330c      	adds	r3, #12
 8014990:	4618      	mov	r0, r3
 8014992:	f7eb fe08 	bl	80005a6 <_ZNK8touchgfx9colortypecvmEv>
 8014996:	4603      	mov	r3, r0
 8014998:	021b      	lsls	r3, r3, #8
 801499a:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 801499e:	683b      	ldr	r3, [r7, #0]
 80149a0:	330c      	adds	r3, #12
 80149a2:	4618      	mov	r0, r3
 80149a4:	f7eb fdff 	bl	80005a6 <_ZNK8touchgfx9colortypecvmEv>
 80149a8:	4603      	mov	r3, r0
 80149aa:	015b      	lsls	r3, r3, #5
 80149ac:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 80149b0:	431c      	orrs	r4, r3
 80149b2:	683b      	ldr	r3, [r7, #0]
 80149b4:	330c      	adds	r3, #12
 80149b6:	4618      	mov	r0, r3
 80149b8:	f7eb fdf5 	bl	80005a6 <_ZNK8touchgfx9colortypecvmEv>
 80149bc:	4603      	mov	r3, r0
 80149be:	00db      	lsls	r3, r3, #3
 80149c0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80149c4:	4a53      	ldr	r2, [pc, #332]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80149c6:	4323      	orrs	r3, r4
 80149c8:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80149ca:	4a52      	ldr	r2, [pc, #328]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80149cc:	697b      	ldr	r3, [r7, #20]
 80149ce:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80149d0:	683b      	ldr	r3, [r7, #0]
 80149d2:	691a      	ldr	r2, [r3, #16]
 80149d4:	4b4f      	ldr	r3, [pc, #316]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80149d6:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80149d8:	4b4e      	ldr	r3, [pc, #312]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80149da:	4a4f      	ldr	r2, [pc, #316]	; (8014b18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>)
 80149dc:	601a      	str	r2, [r3, #0]
        break;
 80149de:	e0be      	b.n	8014b5e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80149e0:	683b      	ldr	r3, [r7, #0]
 80149e2:	7f1b      	ldrb	r3, [r3, #28]
 80149e4:	061b      	lsls	r3, r3, #24
 80149e6:	461a      	mov	r2, r3
 80149e8:	69bb      	ldr	r3, [r7, #24]
 80149ea:	4313      	orrs	r3, r2
 80149ec:	4a49      	ldr	r2, [pc, #292]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80149ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80149f2:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80149f4:	4a47      	ldr	r2, [pc, #284]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 80149f6:	697b      	ldr	r3, [r7, #20]
 80149f8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80149fa:	683b      	ldr	r3, [r7, #0]
 80149fc:	691a      	ldr	r2, [r3, #16]
 80149fe:	4b45      	ldr	r3, [pc, #276]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a00:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014a02:	4b44      	ldr	r3, [pc, #272]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a04:	4a44      	ldr	r2, [pc, #272]	; (8014b18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>)
 8014a06:	601a      	str	r2, [r3, #0]
        break;
 8014a08:	e0a9      	b.n	8014b5e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8014a0a:	2301      	movs	r3, #1
 8014a0c:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	689b      	ldr	r3, [r3, #8]
 8014a12:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	1d1a      	adds	r2, r3, #4
 8014a18:	4b3e      	ldr	r3, [pc, #248]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a1a:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	7f1b      	ldrb	r3, [r3, #28]
 8014a20:	061b      	lsls	r3, r3, #24
 8014a22:	461a      	mov	r2, r3
 8014a24:	69bb      	ldr	r3, [r7, #24]
 8014a26:	4313      	orrs	r3, r2
 8014a28:	4a3a      	ldr	r2, [pc, #232]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014a2e:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014a30:	4a38      	ldr	r2, [pc, #224]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a32:	697b      	ldr	r3, [r7, #20]
 8014a34:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014a36:	683b      	ldr	r3, [r7, #0]
 8014a38:	691a      	ldr	r2, [r3, #16]
 8014a3a:	4b36      	ldr	r3, [pc, #216]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a3c:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	881b      	ldrh	r3, [r3, #0]
 8014a42:	b2db      	uxtb	r3, r3
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d002      	beq.n	8014a4e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20a>
 8014a48:	2b01      	cmp	r3, #1
 8014a4a:	d00f      	beq.n	8014a6c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
 8014a4c:	e024      	b.n	8014a98 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x254>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8014a4e:	4b31      	ldr	r3, [pc, #196]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a50:	69db      	ldr	r3, [r3, #28]
 8014a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014a56:	f023 0310 	bic.w	r3, r3, #16
 8014a5a:	68fa      	ldr	r2, [r7, #12]
 8014a5c:	8852      	ldrh	r2, [r2, #2]
 8014a5e:	3a01      	subs	r2, #1
 8014a60:	0212      	lsls	r2, r2, #8
 8014a62:	4611      	mov	r1, r2
 8014a64:	4a2b      	ldr	r2, [pc, #172]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a66:	430b      	orrs	r3, r1
 8014a68:	61d3      	str	r3, [r2, #28]
                break;
 8014a6a:	e01c      	b.n	8014aa6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	7f1b      	ldrb	r3, [r3, #28]
 8014a70:	2bff      	cmp	r3, #255	; 0xff
 8014a72:	d101      	bne.n	8014a78 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>
                {
                  blend = false;
 8014a74:	2300      	movs	r3, #0
 8014a76:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8014a78:	4b26      	ldr	r3, [pc, #152]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a7a:	69db      	ldr	r3, [r3, #28]
 8014a7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014a80:	f023 0310 	bic.w	r3, r3, #16
 8014a84:	68fa      	ldr	r2, [r7, #12]
 8014a86:	8852      	ldrh	r2, [r2, #2]
 8014a88:	3a01      	subs	r2, #1
 8014a8a:	0212      	lsls	r2, r2, #8
 8014a8c:	4313      	orrs	r3, r2
 8014a8e:	4a21      	ldr	r2, [pc, #132]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014a90:	f043 0310 	orr.w	r3, r3, #16
 8014a94:	61d3      	str	r3, [r2, #28]
                break;
 8014a96:	e006      	b.n	8014aa6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8014a98:	4b20      	ldr	r3, [pc, #128]	; (8014b1c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d8>)
 8014a9a:	4a21      	ldr	r2, [pc, #132]	; (8014b20 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2dc>)
 8014a9c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8014aa0:	4820      	ldr	r0, [pc, #128]	; (8014b24 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e0>)
 8014aa2:	f017 fe21 	bl	802c6e8 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8014aa6:	4b1b      	ldr	r3, [pc, #108]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014aa8:	69db      	ldr	r3, [r3, #28]
 8014aaa:	4a1a      	ldr	r2, [pc, #104]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014aac:	f043 0320 	orr.w	r3, r3, #32
 8014ab0:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8014ab2:	4b18      	ldr	r3, [pc, #96]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014ab4:	69db      	ldr	r3, [r3, #28]
 8014ab6:	f003 0320 	and.w	r3, r3, #32
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	bf14      	ite	ne
 8014abe:	2301      	movne	r3, #1
 8014ac0:	2300      	moveq	r3, #0
 8014ac2:	b2db      	uxtb	r3, r3
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d002      	beq.n	8014ace <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
            {
                OSWrappers::taskYield();
 8014ac8:	f7ff fca4 	bl	8014414 <_ZN8touchgfx10OSWrappers9taskYieldEv>
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8014acc:	e7f1      	b.n	8014ab2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8014ace:	4b11      	ldr	r3, [pc, #68]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014ad0:	2210      	movs	r2, #16
 8014ad2:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8014ad4:	7ffb      	ldrb	r3, [r7, #31]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d003      	beq.n	8014ae2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29e>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014ada:	4b0e      	ldr	r3, [pc, #56]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014adc:	4a0e      	ldr	r2, [pc, #56]	; (8014b18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>)
 8014ade:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
      break;
 8014ae0:	e03d      	b.n	8014b5e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8014ae2:	4b0c      	ldr	r3, [pc, #48]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014ae4:	4a10      	ldr	r2, [pc, #64]	; (8014b28 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e4>)
 8014ae6:	601a      	str	r2, [r3, #0]
      break;
 8014ae8:	e039      	b.n	8014b5e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	7f1b      	ldrb	r3, [r3, #28]
 8014aee:	061b      	lsls	r3, r3, #24
 8014af0:	461a      	mov	r2, r3
 8014af2:	69bb      	ldr	r3, [r7, #24]
 8014af4:	4313      	orrs	r3, r2
 8014af6:	4a07      	ldr	r2, [pc, #28]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014afc:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014afe:	4a05      	ldr	r2, [pc, #20]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014b00:	697b      	ldr	r3, [r7, #20]
 8014b02:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014b04:	683b      	ldr	r3, [r7, #0]
 8014b06:	691a      	ldr	r2, [r3, #16]
 8014b08:	4b02      	ldr	r3, [pc, #8]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014b0a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014b0c:	4b01      	ldr	r3, [pc, #4]	; (8014b14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 8014b0e:	4a02      	ldr	r2, [pc, #8]	; (8014b18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>)
 8014b10:	601a      	str	r2, [r3, #0]
        break;
 8014b12:	e024      	b.n	8014b5e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
 8014b14:	4002b000 	.word	0x4002b000
 8014b18:	00020201 	.word	0x00020201
 8014b1c:	0802eee8 	.word	0x0802eee8
 8014b20:	0802ef04 	.word	0x0802ef04
 8014b24:	0802ee6c 	.word	0x0802ee6c
 8014b28:	00010201 	.word	0x00010201
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	7f1b      	ldrb	r3, [r3, #28]
 8014b30:	061b      	lsls	r3, r3, #24
 8014b32:	461a      	mov	r2, r3
 8014b34:	69bb      	ldr	r3, [r7, #24]
 8014b36:	4313      	orrs	r3, r2
 8014b38:	4a0b      	ldr	r2, [pc, #44]	; (8014b68 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>)
 8014b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014b3e:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8014b40:	683b      	ldr	r3, [r7, #0]
 8014b42:	7f5a      	ldrb	r2, [r3, #29]
 8014b44:	683b      	ldr	r3, [r7, #0]
 8014b46:	7f9b      	ldrb	r3, [r3, #30]
 8014b48:	429a      	cmp	r2, r3
 8014b4a:	d003      	beq.n	8014b54 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x310>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8014b4c:	4b06      	ldr	r3, [pc, #24]	; (8014b68 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>)
 8014b4e:	4a07      	ldr	r2, [pc, #28]	; (8014b6c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x328>)
 8014b50:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8014b52:	e003      	b.n	8014b5c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x318>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8014b54:	4b04      	ldr	r3, [pc, #16]	; (8014b68 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>)
 8014b56:	f240 2201 	movw	r2, #513	; 0x201
 8014b5a:	601a      	str	r2, [r3, #0]
        break;
 8014b5c:	bf00      	nop
    }
}
 8014b5e:	bf00      	nop
 8014b60:	3724      	adds	r7, #36	; 0x24
 8014b62:	46bd      	mov	sp, r7
 8014b64:	bd90      	pop	{r4, r7, pc}
 8014b66:	bf00      	nop
 8014b68:	4002b000 	.word	0x4002b000
 8014b6c:	00010201 	.word	0x00010201

08014b70 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F4DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 8014b70:	b590      	push	{r4, r7, lr}
 8014b72:	b085      	sub	sp, #20
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
 8014b78:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	7f9b      	ldrb	r3, [r3, #30]
 8014b7e:	4619      	mov	r1, r3
 8014b80:	6878      	ldr	r0, [r7, #4]
 8014b82:	f7ff fe15 	bl	80147b0 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8014b86:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8014b88:	4a51      	ldr	r2, [pc, #324]	; (8014cd0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8014b8e:	683b      	ldr	r3, [r7, #0]
 8014b90:	8adb      	ldrh	r3, [r3, #22]
 8014b92:	461a      	mov	r2, r3
 8014b94:	683b      	ldr	r3, [r7, #0]
 8014b96:	8a9b      	ldrh	r3, [r3, #20]
 8014b98:	041b      	lsls	r3, r3, #16
 8014b9a:	431a      	orrs	r2, r3
 8014b9c:	4b4c      	ldr	r3, [pc, #304]	; (8014cd0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014b9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014ba0:	683b      	ldr	r3, [r7, #0]
 8014ba2:	691a      	ldr	r2, [r3, #16]
 8014ba4:	4b4a      	ldr	r3, [pc, #296]	; (8014cd0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014ba6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014ba8:	683b      	ldr	r3, [r7, #0]
 8014baa:	8b5b      	ldrh	r3, [r3, #26]
 8014bac:	461a      	mov	r2, r3
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	8a9b      	ldrh	r3, [r3, #20]
 8014bb2:	1ad2      	subs	r2, r2, r3
 8014bb4:	4b46      	ldr	r3, [pc, #280]	; (8014cd0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014bb6:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	2b08      	cmp	r3, #8
 8014bbe:	d148      	bne.n	8014c52 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	8b5b      	ldrh	r3, [r3, #26]
 8014bc4:	461a      	mov	r2, r3
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	8a9b      	ldrh	r3, [r3, #20]
 8014bca:	1ad2      	subs	r2, r2, r3
 8014bcc:	4b40      	ldr	r3, [pc, #256]	; (8014cd0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014bce:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014bd0:	683b      	ldr	r3, [r7, #0]
 8014bd2:	8b5b      	ldrh	r3, [r3, #26]
 8014bd4:	461a      	mov	r2, r3
 8014bd6:	683b      	ldr	r3, [r7, #0]
 8014bd8:	8a9b      	ldrh	r3, [r3, #20]
 8014bda:	1ad2      	subs	r2, r2, r3
 8014bdc:	4b3c      	ldr	r3, [pc, #240]	; (8014cd0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014bde:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014be0:	4a3b      	ldr	r2, [pc, #236]	; (8014cd0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8014be6:	683b      	ldr	r3, [r7, #0]
 8014be8:	7f1b      	ldrb	r3, [r3, #28]
 8014bea:	061b      	lsls	r3, r3, #24
 8014bec:	4a38      	ldr	r2, [pc, #224]	; (8014cd0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014bf2:	f043 0309 	orr.w	r3, r3, #9
 8014bf6:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, (((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3)) & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8014bf8:	683b      	ldr	r3, [r7, #0]
 8014bfa:	330c      	adds	r3, #12
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f7eb fcd2 	bl	80005a6 <_ZNK8touchgfx9colortypecvmEv>
 8014c02:	4603      	mov	r3, r0
 8014c04:	021b      	lsls	r3, r3, #8
 8014c06:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 8014c0a:	683b      	ldr	r3, [r7, #0]
 8014c0c:	330c      	adds	r3, #12
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f7eb fcc9 	bl	80005a6 <_ZNK8touchgfx9colortypecvmEv>
 8014c14:	4603      	mov	r3, r0
 8014c16:	015b      	lsls	r3, r3, #5
 8014c18:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8014c1c:	431c      	orrs	r4, r3
 8014c1e:	683b      	ldr	r3, [r7, #0]
 8014c20:	330c      	adds	r3, #12
 8014c22:	4618      	mov	r0, r3
 8014c24:	f7eb fcbf 	bl	80005a6 <_ZNK8touchgfx9colortypecvmEv>
 8014c28:	4603      	mov	r3, r0
 8014c2a:	00db      	lsls	r3, r3, #3
 8014c2c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8014c30:	4323      	orrs	r3, r4
 8014c32:	4a27      	ldr	r2, [pc, #156]	; (8014cd0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014c34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014c38:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014c3a:	683b      	ldr	r3, [r7, #0]
 8014c3c:	691a      	ldr	r2, [r3, #16]
 8014c3e:	4b24      	ldr	r3, [pc, #144]	; (8014cd0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014c40:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014c42:	683b      	ldr	r3, [r7, #0]
 8014c44:	691a      	ldr	r2, [r3, #16]
 8014c46:	4b22      	ldr	r3, [pc, #136]	; (8014cd0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014c48:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8014c4a:	4b21      	ldr	r3, [pc, #132]	; (8014cd0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014c4c:	4a21      	ldr	r2, [pc, #132]	; (8014cd4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x164>)
 8014c4e:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8014c50:	e039      	b.n	8014cc6 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x156>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014c52:	4a1f      	ldr	r2, [pc, #124]	; (8014cd0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8014c58:	4b1d      	ldr	r3, [pc, #116]	; (8014cd0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	7f9b      	ldrb	r3, [r3, #30]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d108      	bne.n	8014c78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>
            WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8014c66:	683b      	ldr	r3, [r7, #0]
 8014c68:	330c      	adds	r3, #12
 8014c6a:	4c19      	ldr	r4, [pc, #100]	; (8014cd0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	f7eb fc9a 	bl	80005a6 <_ZNK8touchgfx9colortypecvmEv>
 8014c72:	4603      	mov	r3, r0
 8014c74:	63a3      	str	r3, [r4, #56]	; 0x38
 8014c76:	e023      	b.n	8014cc0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x150>
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8014c78:	683b      	ldr	r3, [r7, #0]
 8014c7a:	7f1b      	ldrb	r3, [r3, #28]
 8014c7c:	061b      	lsls	r3, r3, #24
 8014c7e:	461c      	mov	r4, r3
 8014c80:	683b      	ldr	r3, [r7, #0]
 8014c82:	330c      	adds	r3, #12
 8014c84:	4618      	mov	r0, r3
 8014c86:	f7eb fc8e 	bl	80005a6 <_ZNK8touchgfx9colortypecvmEv>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	021b      	lsls	r3, r3, #8
 8014c8e:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8014c92:	431c      	orrs	r4, r3
 8014c94:	683b      	ldr	r3, [r7, #0]
 8014c96:	330c      	adds	r3, #12
 8014c98:	4618      	mov	r0, r3
 8014c9a:	f7eb fc84 	bl	80005a6 <_ZNK8touchgfx9colortypecvmEv>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	015b      	lsls	r3, r3, #5
 8014ca2:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8014ca6:	431c      	orrs	r4, r3
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	330c      	adds	r3, #12
 8014cac:	4618      	mov	r0, r3
 8014cae:	f7eb fc7a 	bl	80005a6 <_ZNK8touchgfx9colortypecvmEv>
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	00db      	lsls	r3, r3, #3
 8014cb6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8014cba:	4a05      	ldr	r2, [pc, #20]	; (8014cd0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014cbc:	4323      	orrs	r3, r4
 8014cbe:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8014cc0:	4b03      	ldr	r3, [pc, #12]	; (8014cd0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 8014cc2:	4a05      	ldr	r2, [pc, #20]	; (8014cd8 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8014cc4:	601a      	str	r2, [r3, #0]
}
 8014cc6:	bf00      	nop
 8014cc8:	3714      	adds	r7, #20
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd90      	pop	{r4, r7, pc}
 8014cce:	bf00      	nop
 8014cd0:	4002b000 	.word	0x4002b000
 8014cd4:	00020201 	.word	0x00020201
 8014cd8:	00030201 	.word	0x00030201

08014cdc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	b082      	sub	sp, #8
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	6078      	str	r0, [r7, #4]
 8014ce4:	4a05      	ldr	r2, [pc, #20]	; (8014cfc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	601a      	str	r2, [r3, #0]
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	4618      	mov	r0, r3
 8014cee:	f7ff fbe7 	bl	80144c0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3708      	adds	r7, #8
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}
 8014cfc:	08030500 	.word	0x08030500

08014d00 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b082      	sub	sp, #8
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
 8014d08:	6878      	ldr	r0, [r7, #4]
 8014d0a:	f7ff ffe7 	bl	8014cdc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014d0e:	2114      	movs	r1, #20
 8014d10:	6878      	ldr	r0, [r7, #4]
 8014d12:	f016 feca 	bl	802baaa <_ZdlPvj>
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	4618      	mov	r0, r3
 8014d1a:	3708      	adds	r7, #8
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd80      	pop	{r7, pc}

08014d20 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8014d20:	b480      	push	{r7}
 8014d22:	b083      	sub	sp, #12
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	6078      	str	r0, [r7, #4]
        texts = t;
 8014d28:	4a04      	ldr	r2, [pc, #16]	; (8014d3c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	6013      	str	r3, [r2, #0]
    }
 8014d2e:	bf00      	nop
 8014d30:	370c      	adds	r7, #12
 8014d32:	46bd      	mov	sp, r7
 8014d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d38:	4770      	bx	lr
 8014d3a:	bf00      	nop
 8014d3c:	2000682c 	.word	0x2000682c

08014d40 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014d40:	b480      	push	{r7}
 8014d42:	b085      	sub	sp, #20
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	60f8      	str	r0, [r7, #12]
 8014d48:	60b9      	str	r1, [r7, #8]
 8014d4a:	607a      	str	r2, [r7, #4]
 8014d4c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8014d4e:	4a0b      	ldr	r2, [pc, #44]	; (8014d7c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	601a      	str	r2, [r3, #0]
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	68ba      	ldr	r2, [r7, #8]
 8014d58:	605a      	str	r2, [r3, #4]
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	687a      	ldr	r2, [r7, #4]
 8014d5e:	609a      	str	r2, [r3, #8]
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	683a      	ldr	r2, [r7, #0]
 8014d64:	60da      	str	r2, [r3, #12]
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	69ba      	ldr	r2, [r7, #24]
 8014d6a:	611a      	str	r2, [r3, #16]
    {
    }
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	4618      	mov	r0, r3
 8014d70:	3714      	adds	r7, #20
 8014d72:	46bd      	mov	sp, r7
 8014d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d78:	4770      	bx	lr
 8014d7a:	bf00      	nop
 8014d7c:	0802f714 	.word	0x0802f714

08014d80 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8014d80:	b480      	push	{r7}
 8014d82:	b083      	sub	sp, #12
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
    {
 8014d88:	4a04      	ldr	r2, [pc, #16]	; (8014d9c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	601a      	str	r2, [r3, #0]
    }
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	4618      	mov	r0, r3
 8014d92:	370c      	adds	r7, #12
 8014d94:	46bd      	mov	sp, r7
 8014d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9a:	4770      	bx	lr
 8014d9c:	0802f714 	.word	0x0802f714

08014da0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b082      	sub	sp, #8
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
    }
 8014da8:	6878      	ldr	r0, [r7, #4]
 8014daa:	f7ff ffe9 	bl	8014d80 <_ZN8touchgfx7MVPHeapD1Ev>
 8014dae:	2114      	movs	r1, #20
 8014db0:	6878      	ldr	r0, [r7, #4]
 8014db2:	f016 fe7a 	bl	802baaa <_ZdlPvj>
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	4618      	mov	r0, r3
 8014dba:	3708      	adds	r7, #8
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	bd80      	pop	{r7, pc}

08014dc0 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8014dc0:	b480      	push	{r7}
 8014dc2:	b083      	sub	sp, #12
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
    {
 8014dc8:	4a04      	ldr	r2, [pc, #16]	; (8014ddc <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	601a      	str	r2, [r3, #0]
    }
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	370c      	adds	r7, #12
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dda:	4770      	bx	lr
 8014ddc:	08030d80 	.word	0x08030d80

08014de0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b082      	sub	sp, #8
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
    }
 8014de8:	6878      	ldr	r0, [r7, #4]
 8014dea:	f7ff ffe9 	bl	8014dc0 <_ZN8touchgfx3LCDD1Ev>
 8014dee:	2108      	movs	r1, #8
 8014df0:	6878      	ldr	r0, [r7, #4]
 8014df2:	f016 fe5a 	bl	802baaa <_ZdlPvj>
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3708      	adds	r7, #8
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd80      	pop	{r7, pc}

08014e00 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8014e00:	b480      	push	{r7}
 8014e02:	b083      	sub	sp, #12
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	801a      	strh	r2, [r3, #0]
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	2200      	movs	r2, #0
 8014e12:	805a      	strh	r2, [r3, #2]
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	2200      	movs	r2, #0
 8014e18:	809a      	strh	r2, [r3, #4]
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	80da      	strh	r2, [r3, #6]
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	2200      	movs	r2, #0
 8014e24:	811a      	strh	r2, [r3, #8]
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	2200      	movs	r2, #0
 8014e2a:	815a      	strh	r2, [r3, #10]
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	2200      	movs	r2, #0
 8014e30:	819a      	strh	r2, [r3, #12]
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	2200      	movs	r2, #0
 8014e36:	739a      	strb	r2, [r3, #14]
        {
        }
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	370c      	adds	r7, #12
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e44:	4770      	bx	lr

08014e46 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8014e46:	b580      	push	{r7, lr}
 8014e48:	b082      	sub	sp, #8
 8014e4a:	af00      	add	r7, sp, #0
 8014e4c:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	4618      	mov	r0, r3
 8014e52:	f7ff ffd5 	bl	8014e00 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	2200      	movs	r2, #0
 8014e5a:	611a      	str	r2, [r3, #16]
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	2200      	movs	r2, #0
 8014e60:	829a      	strh	r2, [r3, #20]
    {
    }
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	4618      	mov	r0, r3
 8014e66:	3708      	adds	r7, #8
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	bd80      	pop	{r7, pc}

08014e6c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b084      	sub	sp, #16
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	60f8      	str	r0, [r7, #12]
 8014e74:	60b9      	str	r1, [r7, #8]
 8014e76:	607a      	str	r2, [r7, #4]
 8014e78:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8014e7a:	4a55      	ldr	r2, [pc, #340]	; (8014fd0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	601a      	str	r2, [r3, #0]
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	68ba      	ldr	r2, [r7, #8]
 8014e84:	605a      	str	r2, [r3, #4]
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	687a      	ldr	r2, [r7, #4]
 8014e8a:	609a      	str	r2, [r3, #8]
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	683a      	ldr	r2, [r7, #0]
 8014e90:	60da      	str	r2, [r3, #12]
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	2200      	movs	r2, #0
 8014e96:	611a      	str	r2, [r3, #16]
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	615a      	str	r2, [r3, #20]
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	619a      	str	r2, [r3, #24]
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	331c      	adds	r3, #28
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	f7ff ffcc 	bl	8014e46 <_ZN8touchgfx8GesturesC1Ev>
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	2200      	movs	r2, #0
 8014eba:	639a      	str	r2, [r3, #56]	; 0x38
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	63da      	str	r2, [r3, #60]	; 0x3c
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	641a      	str	r2, [r3, #64]	; 0x40
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	2200      	movs	r2, #0
 8014ecc:	645a      	str	r2, [r3, #68]	; 0x44
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	2201      	movs	r2, #1
 8014eda:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	2200      	movs	r2, #0
 8014eea:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	64da      	str	r2, [r3, #76]	; 0x4c
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	3350      	adds	r3, #80	; 0x50
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f7fa fb45 	bl	800f588 <_ZN8touchgfx4RectC1Ev>
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	2200      	movs	r2, #0
 8014f02:	659a      	str	r2, [r3, #88]	; 0x58
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	2200      	movs	r2, #0
 8014f08:	65da      	str	r2, [r3, #92]	; 0x5c
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	661a      	str	r2, [r3, #96]	; 0x60
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	2201      	movs	r2, #1
 8014f14:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	2200      	movs	r2, #0
 8014f24:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	2201      	movs	r2, #1
 8014f2c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	2200      	movs	r2, #0
 8014f34:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	2200      	movs	r2, #0
 8014f44:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	2200      	movs	r2, #0
 8014f54:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	671a      	str	r2, [r3, #112]	; 0x70
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	2200      	movs	r2, #0
 8014f62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	2200      	movs	r2, #0
 8014f6a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	2200      	movs	r2, #0
 8014f72:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	2201      	movs	r2, #1
 8014f7a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	2201      	movs	r2, #1
 8014f82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8014f86:	4a13      	ldr	r2, [pc, #76]	; (8014fd4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8014f8c:	4a12      	ldr	r2, [pc, #72]	; (8014fd8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8014f8e:	8b3b      	ldrh	r3, [r7, #24]
 8014f90:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8014f92:	4a12      	ldr	r2, [pc, #72]	; (8014fdc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8014f94:	8bbb      	ldrh	r3, [r7, #28]
 8014f96:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8014f98:	4b11      	ldr	r3, [pc, #68]	; (8014fe0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014f9e:	4b0e      	ldr	r3, [pc, #56]	; (8014fd8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8014fa0:	881a      	ldrh	r2, [r3, #0]
 8014fa2:	4b10      	ldr	r3, [pc, #64]	; (8014fe4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8014fa4:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014fa6:	4b0d      	ldr	r3, [pc, #52]	; (8014fdc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8014fa8:	881a      	ldrh	r2, [r3, #0]
 8014faa:	4b0f      	ldr	r3, [pc, #60]	; (8014fe8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8014fac:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8014fae:	8b3a      	ldrh	r2, [r7, #24]
 8014fb0:	8bbb      	ldrh	r3, [r7, #28]
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	bf34      	ite	cc
 8014fb6:	2301      	movcc	r3, #1
 8014fb8:	2300      	movcs	r3, #0
 8014fba:	b2db      	uxtb	r3, r3
 8014fbc:	461a      	mov	r2, r3
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	3710      	adds	r7, #16
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	bd80      	pop	{r7, pc}
 8014fce:	bf00      	nop
 8014fd0:	0802ff70 	.word	0x0802ff70
 8014fd4:	200067d0 	.word	0x200067d0
 8014fd8:	200067c4 	.word	0x200067c4
 8014fdc:	200067c6 	.word	0x200067c6
 8014fe0:	200067c8 	.word	0x200067c8
 8014fe4:	200067ca 	.word	0x200067ca
 8014fe8:	200067cc 	.word	0x200067cc

08014fec <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b082      	sub	sp, #8
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
 8014ff4:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8014ff6:	683b      	ldr	r3, [r7, #0]
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	f7fa f833 	bl	800f064 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8014ffe:	bf00      	nop
 8015000:	3708      	adds	r7, #8
 8015002:	46bd      	mov	sp, r7
 8015004:	bd80      	pop	{r7, pc}
	...

08015008 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8015008:	b580      	push	{r7, lr}
 801500a:	b086      	sub	sp, #24
 801500c:	af02      	add	r7, sp, #8
 801500e:	60f8      	str	r0, [r7, #12]
 8015010:	60b9      	str	r1, [r7, #8]
 8015012:	607a      	str	r2, [r7, #4]
 8015014:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8015016:	68f8      	ldr	r0, [r7, #12]
 8015018:	69bb      	ldr	r3, [r7, #24]
 801501a:	9300      	str	r3, [sp, #0]
 801501c:	683b      	ldr	r3, [r7, #0]
 801501e:	687a      	ldr	r2, [r7, #4]
 8015020:	68b9      	ldr	r1, [r7, #8]
 8015022:	f7ff fe8d 	bl	8014d40 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8015026:	4a04      	ldr	r2, [pc, #16]	; (8015038 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	601a      	str	r2, [r3, #0]
    {

    }
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	4618      	mov	r0, r3
 8015030:	3710      	adds	r7, #16
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	0802f700 	.word	0x0802f700

0801503c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801503c:	b580      	push	{r7, lr}
 801503e:	af00      	add	r7, sp, #0
 8015040:	4801      	ldr	r0, [pc, #4]	; (8015048 <__tcf_0+0xc>)
 8015042:	f000 f95f 	bl	8015304 <_ZN12FrontendHeapD1Ev>
 8015046:	bd80      	pop	{r7, pc}
 8015048:	20004ba0 	.word	0x20004ba0

0801504c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801504c:	b580      	push	{r7, lr}
 801504e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8015050:	4b12      	ldr	r3, [pc, #72]	; (801509c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8015052:	781b      	ldrb	r3, [r3, #0]
 8015054:	f3bf 8f5b 	dmb	ish
 8015058:	b2db      	uxtb	r3, r3
 801505a:	f003 0301 	and.w	r3, r3, #1
 801505e:	2b00      	cmp	r3, #0
 8015060:	bf0c      	ite	eq
 8015062:	2301      	moveq	r3, #1
 8015064:	2300      	movne	r3, #0
 8015066:	b2db      	uxtb	r3, r3
 8015068:	2b00      	cmp	r3, #0
 801506a:	d013      	beq.n	8015094 <_ZN12FrontendHeap11getInstanceEv+0x48>
 801506c:	480b      	ldr	r0, [pc, #44]	; (801509c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801506e:	f016 fd1e 	bl	802baae <__cxa_guard_acquire>
 8015072:	4603      	mov	r3, r0
 8015074:	2b00      	cmp	r3, #0
 8015076:	bf14      	ite	ne
 8015078:	2301      	movne	r3, #1
 801507a:	2300      	moveq	r3, #0
 801507c:	b2db      	uxtb	r3, r3
 801507e:	2b00      	cmp	r3, #0
 8015080:	d008      	beq.n	8015094 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8015082:	4807      	ldr	r0, [pc, #28]	; (80150a0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8015084:	f000 f868 	bl	8015158 <_ZN12FrontendHeapC1Ev>
 8015088:	4804      	ldr	r0, [pc, #16]	; (801509c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801508a:	f016 fd1c 	bl	802bac6 <__cxa_guard_release>
 801508e:	4805      	ldr	r0, [pc, #20]	; (80150a4 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8015090:	f017 fb48 	bl	802c724 <atexit>
        return instance;
 8015094:	4b02      	ldr	r3, [pc, #8]	; (80150a0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8015096:	4618      	mov	r0, r3
 8015098:	bd80      	pop	{r7, pc}
 801509a:	bf00      	nop
 801509c:	20005aa0 	.word	0x20005aa0
 80150a0:	20004ba0 	.word	0x20004ba0
 80150a4:	0801503d 	.word	0x0801503d

080150a8 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b082      	sub	sp, #8
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
 80150b0:	4a05      	ldr	r2, [pc, #20]	; (80150c8 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	601a      	str	r2, [r3, #0]
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	4618      	mov	r0, r3
 80150ba:	f7ff fe61 	bl	8014d80 <_ZN8touchgfx7MVPHeapD1Ev>
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	4618      	mov	r0, r3
 80150c2:	3708      	adds	r7, #8
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}
 80150c8:	0802f700 	.word	0x0802f700

080150cc <_ZN16FrontendHeapBaseD0Ev>:
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b082      	sub	sp, #8
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
 80150d4:	6878      	ldr	r0, [r7, #4]
 80150d6:	f7ff ffe7 	bl	80150a8 <_ZN16FrontendHeapBaseD1Ev>
 80150da:	2114      	movs	r1, #20
 80150dc:	6878      	ldr	r0, [r7, #4]
 80150de:	f016 fce4 	bl	802baaa <_ZdlPvj>
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	4618      	mov	r0, r3
 80150e6:	3708      	adds	r7, #8
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}

080150ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b082      	sub	sp, #8
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	4618      	mov	r0, r3
 80150f8:	f000 fd04 	bl	8015b04 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80150fc:	4a03      	ldr	r2, [pc, #12]	; (801510c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	601a      	str	r2, [r3, #0]
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	4618      	mov	r0, r3
 8015106:	3708      	adds	r7, #8
 8015108:	46bd      	mov	sp, r7
 801510a:	bd80      	pop	{r7, pc}
 801510c:	0802f6cc 	.word	0x0802f6cc

08015110 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8015110:	b580      	push	{r7, lr}
 8015112:	b082      	sub	sp, #8
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	4618      	mov	r0, r3
 801511c:	f000 fcf2 	bl	8015b04 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015120:	4a03      	ldr	r2, [pc, #12]	; (8015130 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	601a      	str	r2, [r3, #0]
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	4618      	mov	r0, r3
 801512a:	3708      	adds	r7, #8
 801512c:	46bd      	mov	sp, r7
 801512e:	bd80      	pop	{r7, pc}
 8015130:	0802f698 	.word	0x0802f698

08015134 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8015134:	b580      	push	{r7, lr}
 8015136:	b082      	sub	sp, #8
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	4618      	mov	r0, r3
 8015140:	f000 fce0 	bl	8015b04 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015144:	4a03      	ldr	r2, [pc, #12]	; (8015154 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	601a      	str	r2, [r3, #0]
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	4618      	mov	r0, r3
 801514e:	3708      	adds	r7, #8
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}
 8015154:	0802f664 	.word	0x0802f664

08015158 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8015158:	b590      	push	{r4, r7, lr}
 801515a:	b085      	sub	sp, #20
 801515c:	af02      	add	r7, sp, #8
 801515e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8015160:	6878      	ldr	r0, [r7, #4]
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	f103 0114 	add.w	r1, r3, #20
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	f503 6459 	add.w	r4, r3, #3472	; 0xd90
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	f603 53a4 	addw	r3, r3, #3492	; 0xda4
                     app(model, *this)
 801517a:	9300      	str	r3, [sp, #0]
 801517c:	4623      	mov	r3, r4
 801517e:	f7ff ff43 	bl	8015008 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8015182:	4a18      	ldr	r2, [pc, #96]	; (80151e4 <_ZN12FrontendHeapC1Ev+0x8c>)
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	601a      	str	r2, [r3, #0]
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	3314      	adds	r3, #20
 801518c:	4618      	mov	r0, r3
 801518e:	f7ff ffad 	bl	80150ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	332c      	adds	r3, #44	; 0x2c
 8015196:	4618      	mov	r0, r3
 8015198:	f7ff ffba 	bl	8015110 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	f503 6359 	add.w	r3, r3, #3472	; 0xd90
 80151a2:	4618      	mov	r0, r3
 80151a4:	f7ff ffc6 	bl	8015134 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	f603 50a4 	addw	r0, r3, #3492	; 0xda4
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	f603 63fc 	addw	r3, r3, #3836	; 0xefc
 80151b4:	687a      	ldr	r2, [r7, #4]
 80151b6:	4619      	mov	r1, r3
 80151b8:	f7fe f860 	bl	801327c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	f603 63fc 	addw	r3, r3, #3836	; 0xefc
 80151c2:	4618      	mov	r0, r3
 80151c4:	f7fe f870 	bl	80132a8 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 80151c8:	687a      	ldr	r2, [r7, #4]
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	f603 53a4 	addw	r3, r3, #3492	; 0xda4
 80151d0:	4619      	mov	r1, r3
 80151d2:	4610      	mov	r0, r2
 80151d4:	f7ff ff0a 	bl	8014fec <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	4618      	mov	r0, r3
 80151dc:	370c      	adds	r7, #12
 80151de:	46bd      	mov	sp, r7
 80151e0:	bd90      	pop	{r4, r7, pc}
 80151e2:	bf00      	nop
 80151e4:	0802f650 	.word	0x0802f650

080151e8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b086      	sub	sp, #24
 80151ec:	af02      	add	r7, sp, #8
 80151ee:	60f8      	str	r0, [r7, #12]
 80151f0:	60b9      	str	r1, [r7, #8]
 80151f2:	607a      	str	r2, [r7, #4]
 80151f4:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80151f6:	68f8      	ldr	r0, [r7, #12]
 80151f8:	8bbb      	ldrh	r3, [r7, #28]
 80151fa:	9301      	str	r3, [sp, #4]
 80151fc:	8b3b      	ldrh	r3, [r7, #24]
 80151fe:	9300      	str	r3, [sp, #0]
 8015200:	683b      	ldr	r3, [r7, #0]
 8015202:	687a      	ldr	r2, [r7, #4]
 8015204:	68b9      	ldr	r1, [r7, #8]
 8015206:	f7ff fe31 	bl	8014e6c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801520a:	4a04      	ldr	r2, [pc, #16]	; (801521c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	601a      	str	r2, [r3, #0]
    }
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	4618      	mov	r0, r3
 8015214:	3710      	adds	r7, #16
 8015216:	46bd      	mov	sp, r7
 8015218:	bd80      	pop	{r7, pc}
 801521a:	bf00      	nop
 801521c:	0802f724 	.word	0x0802f724

08015220 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8015220:	b580      	push	{r7, lr}
 8015222:	b086      	sub	sp, #24
 8015224:	af02      	add	r7, sp, #8
 8015226:	60f8      	str	r0, [r7, #12]
 8015228:	60b9      	str	r1, [r7, #8]
 801522a:	607a      	str	r2, [r7, #4]
 801522c:	603b      	str	r3, [r7, #0]
 801522e:	68f8      	ldr	r0, [r7, #12]
 8015230:	8bbb      	ldrh	r3, [r7, #28]
 8015232:	9301      	str	r3, [sp, #4]
 8015234:	8b3b      	ldrh	r3, [r7, #24]
 8015236:	9300      	str	r3, [sp, #0]
 8015238:	683b      	ldr	r3, [r7, #0]
 801523a:	687a      	ldr	r2, [r7, #4]
 801523c:	68b9      	ldr	r1, [r7, #8]
 801523e:	f7ff ffd3 	bl	80151e8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015242:	4a04      	ldr	r2, [pc, #16]	; (8015254 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	601a      	str	r2, [r3, #0]
    }
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	4618      	mov	r0, r3
 801524c:	3710      	adds	r7, #16
 801524e:	46bd      	mov	sp, r7
 8015250:	bd80      	pop	{r7, pc}
 8015252:	bf00      	nop
 8015254:	0802f510 	.word	0x0802f510

08015258 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8015258:	b480      	push	{r7}
 801525a:	b083      	sub	sp, #12
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
 8015260:	4a04      	ldr	r2, [pc, #16]	; (8015274 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	601a      	str	r2, [r3, #0]
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	4618      	mov	r0, r3
 801526a:	370c      	adds	r7, #12
 801526c:	46bd      	mov	sp, r7
 801526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015272:	4770      	bx	lr
 8015274:	0802f4f8 	.word	0x0802f4f8

08015278 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8015278:	b580      	push	{r7, lr}
 801527a:	b082      	sub	sp, #8
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	4618      	mov	r0, r3
 8015284:	f7ff ffe8 	bl	8015258 <_ZN8touchgfx15TouchControllerC1Ev>
 8015288:	4a03      	ldr	r2, [pc, #12]	; (8015298 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	601a      	str	r2, [r3, #0]
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	4618      	mov	r0, r3
 8015292:	3708      	adds	r7, #8
 8015294:	46bd      	mov	sp, r7
 8015296:	bd80      	pop	{r7, pc}
 8015298:	0802f4e0 	.word	0x0802f4e0

0801529c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 801529c:	b590      	push	{r4, r7, lr}
 801529e:	b085      	sub	sp, #20
 80152a0:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80152a2:	f7fd fdbf 	bl	8012e24 <_ZN14BitmapDatabase11getInstanceEv>
 80152a6:	4604      	mov	r4, r0
 80152a8:	f7fd fdc6 	bl	8012e38 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80152ac:	4603      	mov	r3, r0
 80152ae:	4619      	mov	r1, r3
 80152b0:	2300      	movs	r3, #0
 80152b2:	9300      	str	r3, [sp, #0]
 80152b4:	2300      	movs	r3, #0
 80152b6:	2200      	movs	r2, #0
 80152b8:	4620      	mov	r0, r4
 80152ba:	f009 f887 	bl	801e3cc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80152be:	4809      	ldr	r0, [pc, #36]	; (80152e4 <touchgfx_init+0x48>)
 80152c0:	f7ff fd2e 	bl	8014d20 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80152c4:	2000      	movs	r0, #0
 80152c6:	f7fd fefb 	bl	80130c0 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80152ca:	4807      	ldr	r0, [pc, #28]	; (80152e8 <touchgfx_init+0x4c>)
 80152cc:	f008 ffc0 	bl	801e250 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80152d0:	f7ff febc 	bl	801504c <_ZN12FrontendHeap11getInstanceEv>
 80152d4:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80152d6:	4805      	ldr	r0, [pc, #20]	; (80152ec <touchgfx_init+0x50>)
 80152d8:	f7fe ff74 	bl	80141c4 <_ZN11TouchGFXHAL10initializeEv>
}
 80152dc:	bf00      	nop
 80152de:	370c      	adds	r7, #12
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bd90      	pop	{r4, r7, pc}
 80152e4:	20006740 	.word	0x20006740
 80152e8:	20000018 	.word	0x20000018
 80152ec:	20006744 	.word	0x20006744

080152f0 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80152f4:	4802      	ldr	r0, [pc, #8]	; (8015300 <touchgfx_taskEntry+0x10>)
 80152f6:	f000 fff0 	bl	80162da <_ZN8touchgfx3HAL9taskEntryEv>
}
 80152fa:	bf00      	nop
 80152fc:	bd80      	pop	{r7, pc}
 80152fe:	bf00      	nop
 8015300:	20006744 	.word	0x20006744

08015304 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8015304:	b580      	push	{r7, lr}
 8015306:	b082      	sub	sp, #8
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
 801530c:	4a10      	ldr	r2, [pc, #64]	; (8015350 <_ZN12FrontendHeapD1Ev+0x4c>)
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	601a      	str	r2, [r3, #0]
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f603 53a4 	addw	r3, r3, #3492	; 0xda4
 8015318:	4618      	mov	r0, r3
 801531a:	f7fd ff79 	bl	8013210 <_ZN19FrontendApplicationD1Ev>
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	f503 6359 	add.w	r3, r3, #3472	; 0xd90
 8015324:	4618      	mov	r0, r3
 8015326:	f000 f827 	bl	8015378 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	332c      	adds	r3, #44	; 0x2c
 801532e:	4618      	mov	r0, r3
 8015330:	f000 f844 	bl	80153bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	3314      	adds	r3, #20
 8015338:	4618      	mov	r0, r3
 801533a:	f000 f863 	bl	8015404 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	4618      	mov	r0, r3
 8015342:	f7ff feb1 	bl	80150a8 <_ZN16FrontendHeapBaseD1Ev>
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	4618      	mov	r0, r3
 801534a:	3708      	adds	r7, #8
 801534c:	46bd      	mov	sp, r7
 801534e:	bd80      	pop	{r7, pc}
 8015350:	0802f650 	.word	0x0802f650

08015354 <_ZN12FrontendHeapD0Ev>:
 8015354:	b580      	push	{r7, lr}
 8015356:	b082      	sub	sp, #8
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
 801535c:	6878      	ldr	r0, [r7, #4]
 801535e:	f7ff ffd1 	bl	8015304 <_ZN12FrontendHeapD1Ev>
 8015362:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8015366:	6878      	ldr	r0, [r7, #4]
 8015368:	f016 fb9f 	bl	802baaa <_ZdlPvj>
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	4618      	mov	r0, r3
 8015370:	3708      	adds	r7, #8
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}
	...

08015378 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8015378:	b580      	push	{r7, lr}
 801537a:	b082      	sub	sp, #8
 801537c:	af00      	add	r7, sp, #0
 801537e:	6078      	str	r0, [r7, #4]
 8015380:	4a05      	ldr	r2, [pc, #20]	; (8015398 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	601a      	str	r2, [r3, #0]
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	4618      	mov	r0, r3
 801538a:	f000 fbb9 	bl	8015b00 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	4618      	mov	r0, r3
 8015392:	3708      	adds	r7, #8
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}
 8015398:	0802f664 	.word	0x0802f664

0801539c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801539c:	b580      	push	{r7, lr}
 801539e:	b082      	sub	sp, #8
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]
 80153a4:	6878      	ldr	r0, [r7, #4]
 80153a6:	f7ff ffe7 	bl	8015378 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80153aa:	2114      	movs	r1, #20
 80153ac:	6878      	ldr	r0, [r7, #4]
 80153ae:	f016 fb7c 	bl	802baaa <_ZdlPvj>
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	4618      	mov	r0, r3
 80153b6:	3708      	adds	r7, #8
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd80      	pop	{r7, pc}

080153bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80153bc:	b580      	push	{r7, lr}
 80153be:	b082      	sub	sp, #8
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
 80153c4:	4a05      	ldr	r2, [pc, #20]	; (80153dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	601a      	str	r2, [r3, #0]
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	4618      	mov	r0, r3
 80153ce:	f000 fb97 	bl	8015b00 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	4618      	mov	r0, r3
 80153d6:	3708      	adds	r7, #8
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}
 80153dc:	0802f698 	.word	0x0802f698

080153e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b082      	sub	sp, #8
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	6078      	str	r0, [r7, #4]
 80153e8:	6878      	ldr	r0, [r7, #4]
 80153ea:	f7ff ffe7 	bl	80153bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80153ee:	f640 5164 	movw	r1, #3428	; 0xd64
 80153f2:	6878      	ldr	r0, [r7, #4]
 80153f4:	f016 fb59 	bl	802baaa <_ZdlPvj>
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	4618      	mov	r0, r3
 80153fc:	3708      	adds	r7, #8
 80153fe:	46bd      	mov	sp, r7
 8015400:	bd80      	pop	{r7, pc}
	...

08015404 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8015404:	b580      	push	{r7, lr}
 8015406:	b082      	sub	sp, #8
 8015408:	af00      	add	r7, sp, #0
 801540a:	6078      	str	r0, [r7, #4]
 801540c:	4a05      	ldr	r2, [pc, #20]	; (8015424 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	601a      	str	r2, [r3, #0]
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	4618      	mov	r0, r3
 8015416:	f000 fb73 	bl	8015b00 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	4618      	mov	r0, r3
 801541e:	3708      	adds	r7, #8
 8015420:	46bd      	mov	sp, r7
 8015422:	bd80      	pop	{r7, pc}
 8015424:	0802f6cc 	.word	0x0802f6cc

08015428 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8015428:	b580      	push	{r7, lr}
 801542a:	b082      	sub	sp, #8
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	6878      	ldr	r0, [r7, #4]
 8015432:	f7ff ffe7 	bl	8015404 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015436:	2118      	movs	r1, #24
 8015438:	6878      	ldr	r0, [r7, #4]
 801543a:	f016 fb36 	bl	802baaa <_ZdlPvj>
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	4618      	mov	r0, r3
 8015442:	3708      	adds	r7, #8
 8015444:	46bd      	mov	sp, r7
 8015446:	bd80      	pop	{r7, pc}

08015448 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8015448:	b580      	push	{r7, lr}
 801544a:	b082      	sub	sp, #8
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
 8015450:	4a05      	ldr	r2, [pc, #20]	; (8015468 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	601a      	str	r2, [r3, #0]
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	4618      	mov	r0, r3
 801545a:	f7ff fcb1 	bl	8014dc0 <_ZN8touchgfx3LCDD1Ev>
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	4618      	mov	r0, r3
 8015462:	3708      	adds	r7, #8
 8015464:	46bd      	mov	sp, r7
 8015466:	bd80      	pop	{r7, pc}
 8015468:	08031f20 	.word	0x08031f20

0801546c <_ZN8touchgfx8LCD16bppD0Ev>:
 801546c:	b580      	push	{r7, lr}
 801546e:	b082      	sub	sp, #8
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
 8015474:	6878      	ldr	r0, [r7, #4]
 8015476:	f7ff ffe7 	bl	8015448 <_ZN8touchgfx8LCD16bppD1Ev>
 801547a:	2178      	movs	r1, #120	; 0x78
 801547c:	6878      	ldr	r0, [r7, #4]
 801547e:	f016 fb14 	bl	802baaa <_ZdlPvj>
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	4618      	mov	r0, r3
 8015486:	3708      	adds	r7, #8
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}

0801548c <_Z41__static_initialization_and_destruction_0ii>:
 801548c:	b580      	push	{r7, lr}
 801548e:	b084      	sub	sp, #16
 8015490:	af02      	add	r7, sp, #8
 8015492:	6078      	str	r0, [r7, #4]
 8015494:	6039      	str	r1, [r7, #0]
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	2b01      	cmp	r3, #1
 801549a:	d119      	bne.n	80154d0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 801549c:	683b      	ldr	r3, [r7, #0]
 801549e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80154a2:	4293      	cmp	r3, r2
 80154a4:	d114      	bne.n	80154d0 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80154a6:	4818      	ldr	r0, [pc, #96]	; (8015508 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80154a8:	f7ff fee6 	bl	8015278 <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 80154ac:	4817      	ldr	r0, [pc, #92]	; (801550c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80154ae:	f7ff f8b7 	bl	8014620 <_ZN10STM32F4DMAC1Ev>
static LCD16bpp display;
 80154b2:	4817      	ldr	r0, [pc, #92]	; (8015510 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80154b4:	f00c f804 	bl	80214c0 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80154b8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80154bc:	9301      	str	r3, [sp, #4]
 80154be:	f44f 7348 	mov.w	r3, #800	; 0x320
 80154c2:	9300      	str	r3, [sp, #0]
 80154c4:	4b10      	ldr	r3, [pc, #64]	; (8015508 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80154c6:	4a12      	ldr	r2, [pc, #72]	; (8015510 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80154c8:	4910      	ldr	r1, [pc, #64]	; (801550c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80154ca:	4812      	ldr	r0, [pc, #72]	; (8015514 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80154cc:	f7ff fea8 	bl	8015220 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d113      	bne.n	80154fe <_Z41__static_initialization_and_destruction_0ii+0x72>
 80154d6:	683b      	ldr	r3, [r7, #0]
 80154d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80154dc:	4293      	cmp	r3, r2
 80154de:	d10e      	bne.n	80154fe <_Z41__static_initialization_and_destruction_0ii+0x72>
 80154e0:	480c      	ldr	r0, [pc, #48]	; (8015514 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80154e2:	f7fe fee7 	bl	80142b4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80154e6:	480c      	ldr	r0, [pc, #48]	; (8015518 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80154e8:	f7f9 f8ae 	bl	800e648 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 80154ec:	4808      	ldr	r0, [pc, #32]	; (8015510 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80154ee:	f7ff ffab 	bl	8015448 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F4DMA dma;
 80154f2:	4806      	ldr	r0, [pc, #24]	; (801550c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80154f4:	f7ff f8be 	bl	8014674 <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 80154f8:	4803      	ldr	r0, [pc, #12]	; (8015508 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80154fa:	f7fe fca7 	bl	8013e4c <_ZN20STM32TouchControllerD1Ev>
}
 80154fe:	bf00      	nop
 8015500:	3708      	adds	r7, #8
 8015502:	46bd      	mov	sp, r7
 8015504:	bd80      	pop	{r7, pc}
 8015506:	bf00      	nop
 8015508:	20005aa4 	.word	0x20005aa4
 801550c:	20005aa8 	.word	0x20005aa8
 8015510:	200066c8 	.word	0x200066c8
 8015514:	20006744 	.word	0x20006744
 8015518:	20000018 	.word	0x20000018

0801551c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 801551c:	b480      	push	{r7}
 801551e:	b083      	sub	sp, #12
 8015520:	af00      	add	r7, sp, #0
 8015522:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8015524:	2301      	movs	r3, #1
    }
 8015526:	4618      	mov	r0, r3
 8015528:	370c      	adds	r7, #12
 801552a:	46bd      	mov	sp, r7
 801552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015530:	4770      	bx	lr

08015532 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8015532:	b480      	push	{r7}
 8015534:	b083      	sub	sp, #12
 8015536:	af00      	add	r7, sp, #0
 8015538:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801553a:	230c      	movs	r3, #12
    }
 801553c:	4618      	mov	r0, r3
 801553e:	370c      	adds	r7, #12
 8015540:	46bd      	mov	sp, r7
 8015542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015546:	4770      	bx	lr

08015548 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8015548:	b480      	push	{r7}
 801554a:	b083      	sub	sp, #12
 801554c:	af00      	add	r7, sp, #0
 801554e:	6078      	str	r0, [r7, #4]
 8015550:	460b      	mov	r3, r1
 8015552:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015554:	887a      	ldrh	r2, [r7, #2]
 8015556:	4613      	mov	r3, r2
 8015558:	005b      	lsls	r3, r3, #1
 801555a:	4413      	add	r3, r2
 801555c:	009b      	lsls	r3, r3, #2
 801555e:	3308      	adds	r3, #8
 8015560:	687a      	ldr	r2, [r7, #4]
 8015562:	4413      	add	r3, r2
    }
 8015564:	4618      	mov	r0, r3
 8015566:	370c      	adds	r7, #12
 8015568:	46bd      	mov	sp, r7
 801556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556e:	4770      	bx	lr

08015570 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8015570:	b480      	push	{r7}
 8015572:	b083      	sub	sp, #12
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
 8015578:	460b      	mov	r3, r1
 801557a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801557c:	887a      	ldrh	r2, [r7, #2]
 801557e:	4613      	mov	r3, r2
 8015580:	005b      	lsls	r3, r3, #1
 8015582:	4413      	add	r3, r2
 8015584:	009b      	lsls	r3, r3, #2
 8015586:	3308      	adds	r3, #8
 8015588:	687a      	ldr	r2, [r7, #4]
 801558a:	4413      	add	r3, r2
    }
 801558c:	4618      	mov	r0, r3
 801558e:	370c      	adds	r7, #12
 8015590:	46bd      	mov	sp, r7
 8015592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015596:	4770      	bx	lr

08015598 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8015598:	b480      	push	{r7}
 801559a:	b083      	sub	sp, #12
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80155a0:	2301      	movs	r3, #1
    }
 80155a2:	4618      	mov	r0, r3
 80155a4:	370c      	adds	r7, #12
 80155a6:	46bd      	mov	sp, r7
 80155a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ac:	4770      	bx	lr

080155ae <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80155ae:	b480      	push	{r7}
 80155b0:	b083      	sub	sp, #12
 80155b2:	af00      	add	r7, sp, #0
 80155b4:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80155b6:	f640 535c 	movw	r3, #3420	; 0xd5c
    }
 80155ba:	4618      	mov	r0, r3
 80155bc:	370c      	adds	r7, #12
 80155be:	46bd      	mov	sp, r7
 80155c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c4:	4770      	bx	lr

080155c6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80155c6:	b480      	push	{r7}
 80155c8:	b083      	sub	sp, #12
 80155ca:	af00      	add	r7, sp, #0
 80155cc:	6078      	str	r0, [r7, #4]
 80155ce:	460b      	mov	r3, r1
 80155d0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80155d2:	887b      	ldrh	r3, [r7, #2]
 80155d4:	f640 525c 	movw	r2, #3420	; 0xd5c
 80155d8:	fb02 f303 	mul.w	r3, r2, r3
 80155dc:	3308      	adds	r3, #8
 80155de:	687a      	ldr	r2, [r7, #4]
 80155e0:	4413      	add	r3, r2
    }
 80155e2:	4618      	mov	r0, r3
 80155e4:	370c      	adds	r7, #12
 80155e6:	46bd      	mov	sp, r7
 80155e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ec:	4770      	bx	lr

080155ee <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80155ee:	b480      	push	{r7}
 80155f0:	b083      	sub	sp, #12
 80155f2:	af00      	add	r7, sp, #0
 80155f4:	6078      	str	r0, [r7, #4]
 80155f6:	460b      	mov	r3, r1
 80155f8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80155fa:	887b      	ldrh	r3, [r7, #2]
 80155fc:	f640 525c 	movw	r2, #3420	; 0xd5c
 8015600:	fb02 f303 	mul.w	r3, r2, r3
 8015604:	3308      	adds	r3, #8
 8015606:	687a      	ldr	r2, [r7, #4]
 8015608:	4413      	add	r3, r2
    }
 801560a:	4618      	mov	r0, r3
 801560c:	370c      	adds	r7, #12
 801560e:	46bd      	mov	sp, r7
 8015610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015614:	4770      	bx	lr

08015616 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8015616:	b480      	push	{r7}
 8015618:	b083      	sub	sp, #12
 801561a:	af00      	add	r7, sp, #0
 801561c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801561e:	2301      	movs	r3, #1
    }
 8015620:	4618      	mov	r0, r3
 8015622:	370c      	adds	r7, #12
 8015624:	46bd      	mov	sp, r7
 8015626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562a:	4770      	bx	lr

0801562c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801562c:	b480      	push	{r7}
 801562e:	b083      	sub	sp, #12
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8015634:	2310      	movs	r3, #16
    }
 8015636:	4618      	mov	r0, r3
 8015638:	370c      	adds	r7, #12
 801563a:	46bd      	mov	sp, r7
 801563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015640:	4770      	bx	lr

08015642 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8015642:	b480      	push	{r7}
 8015644:	b083      	sub	sp, #12
 8015646:	af00      	add	r7, sp, #0
 8015648:	6078      	str	r0, [r7, #4]
 801564a:	460b      	mov	r3, r1
 801564c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801564e:	887b      	ldrh	r3, [r7, #2]
 8015650:	011b      	lsls	r3, r3, #4
 8015652:	3308      	adds	r3, #8
 8015654:	687a      	ldr	r2, [r7, #4]
 8015656:	4413      	add	r3, r2
    }
 8015658:	4618      	mov	r0, r3
 801565a:	370c      	adds	r7, #12
 801565c:	46bd      	mov	sp, r7
 801565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015662:	4770      	bx	lr

08015664 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8015664:	b480      	push	{r7}
 8015666:	b083      	sub	sp, #12
 8015668:	af00      	add	r7, sp, #0
 801566a:	6078      	str	r0, [r7, #4]
 801566c:	460b      	mov	r3, r1
 801566e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015670:	887b      	ldrh	r3, [r7, #2]
 8015672:	011b      	lsls	r3, r3, #4
 8015674:	3308      	adds	r3, #8
 8015676:	687a      	ldr	r2, [r7, #4]
 8015678:	4413      	add	r3, r2
    }
 801567a:	4618      	mov	r0, r3
 801567c:	370c      	adds	r7, #12
 801567e:	46bd      	mov	sp, r7
 8015680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015684:	4770      	bx	lr

08015686 <_GLOBAL__sub_I_touchgfx_init>:
 8015686:	b580      	push	{r7, lr}
 8015688:	af00      	add	r7, sp, #0
 801568a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801568e:	2001      	movs	r0, #1
 8015690:	f7ff fefc 	bl	801548c <_Z41__static_initialization_and_destruction_0ii>
 8015694:	bd80      	pop	{r7, pc}

08015696 <_GLOBAL__sub_D_touchgfx_init>:
 8015696:	b580      	push	{r7, lr}
 8015698:	af00      	add	r7, sp, #0
 801569a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801569e:	2000      	movs	r0, #0
 80156a0:	f7ff fef4 	bl	801548c <_Z41__static_initialization_and_destruction_0ii>
 80156a4:	bd80      	pop	{r7, pc}

080156a6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80156a6:	b580      	push	{r7, lr}
 80156a8:	b082      	sub	sp, #8
 80156aa:	af00      	add	r7, sp, #0
 80156ac:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	331c      	adds	r3, #28
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	6878      	ldr	r0, [r7, #4]
 80156b8:	4798      	blx	r3
    }
 80156ba:	bf00      	nop
 80156bc:	3708      	adds	r7, #8
 80156be:	46bd      	mov	sp, r7
 80156c0:	bd80      	pop	{r7, pc}

080156c2 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80156c2:	b480      	push	{r7}
 80156c4:	b083      	sub	sp, #12
 80156c6:	af00      	add	r7, sp, #0
 80156c8:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80156d0:	3301      	adds	r3, #1
 80156d2:	b2da      	uxtb	r2, r3
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80156da:	bf00      	nop
 80156dc:	370c      	adds	r7, #12
 80156de:	46bd      	mov	sp, r7
 80156e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e4:	4770      	bx	lr
	...

080156e8 <__NVIC_EnableIRQ>:
{
 80156e8:	b480      	push	{r7}
 80156ea:	b083      	sub	sp, #12
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	4603      	mov	r3, r0
 80156f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80156f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	db0b      	blt.n	8015712 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80156fa:	79fb      	ldrb	r3, [r7, #7]
 80156fc:	f003 021f 	and.w	r2, r3, #31
 8015700:	4907      	ldr	r1, [pc, #28]	; (8015720 <__NVIC_EnableIRQ+0x38>)
 8015702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015706:	095b      	lsrs	r3, r3, #5
 8015708:	2001      	movs	r0, #1
 801570a:	fa00 f202 	lsl.w	r2, r0, r2
 801570e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015712:	bf00      	nop
 8015714:	370c      	adds	r7, #12
 8015716:	46bd      	mov	sp, r7
 8015718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571c:	4770      	bx	lr
 801571e:	bf00      	nop
 8015720:	e000e100 	.word	0xe000e100

08015724 <__NVIC_DisableIRQ>:
{
 8015724:	b480      	push	{r7}
 8015726:	b083      	sub	sp, #12
 8015728:	af00      	add	r7, sp, #0
 801572a:	4603      	mov	r3, r0
 801572c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801572e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015732:	2b00      	cmp	r3, #0
 8015734:	db12      	blt.n	801575c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015736:	79fb      	ldrb	r3, [r7, #7]
 8015738:	f003 021f 	and.w	r2, r3, #31
 801573c:	490a      	ldr	r1, [pc, #40]	; (8015768 <__NVIC_DisableIRQ+0x44>)
 801573e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015742:	095b      	lsrs	r3, r3, #5
 8015744:	2001      	movs	r0, #1
 8015746:	fa00 f202 	lsl.w	r2, r0, r2
 801574a:	3320      	adds	r3, #32
 801574c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8015750:	f3bf 8f4f 	dsb	sy
}
 8015754:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015756:	f3bf 8f6f 	isb	sy
}
 801575a:	bf00      	nop
}
 801575c:	bf00      	nop
 801575e:	370c      	adds	r7, #12
 8015760:	46bd      	mov	sp, r7
 8015762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015766:	4770      	bx	lr
 8015768:	e000e100 	.word	0xe000e100

0801576c <__NVIC_SetPriority>:
{
 801576c:	b480      	push	{r7}
 801576e:	b083      	sub	sp, #12
 8015770:	af00      	add	r7, sp, #0
 8015772:	4603      	mov	r3, r0
 8015774:	6039      	str	r1, [r7, #0]
 8015776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801577c:	2b00      	cmp	r3, #0
 801577e:	db0a      	blt.n	8015796 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	b2da      	uxtb	r2, r3
 8015784:	490c      	ldr	r1, [pc, #48]	; (80157b8 <__NVIC_SetPriority+0x4c>)
 8015786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801578a:	0112      	lsls	r2, r2, #4
 801578c:	b2d2      	uxtb	r2, r2
 801578e:	440b      	add	r3, r1
 8015790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015794:	e00a      	b.n	80157ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015796:	683b      	ldr	r3, [r7, #0]
 8015798:	b2da      	uxtb	r2, r3
 801579a:	4908      	ldr	r1, [pc, #32]	; (80157bc <__NVIC_SetPriority+0x50>)
 801579c:	79fb      	ldrb	r3, [r7, #7]
 801579e:	f003 030f 	and.w	r3, r3, #15
 80157a2:	3b04      	subs	r3, #4
 80157a4:	0112      	lsls	r2, r2, #4
 80157a6:	b2d2      	uxtb	r2, r2
 80157a8:	440b      	add	r3, r1
 80157aa:	761a      	strb	r2, [r3, #24]
}
 80157ac:	bf00      	nop
 80157ae:	370c      	adds	r7, #12
 80157b0:	46bd      	mov	sp, r7
 80157b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b6:	4770      	bx	lr
 80157b8:	e000e100 	.word	0xe000e100
 80157bc:	e000ed00 	.word	0xe000ed00

080157c0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80157c0:	b5b0      	push	{r4, r5, r7, lr}
 80157c2:	b082      	sub	sp, #8
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	4618      	mov	r0, r3
 80157cc:	f000 fd73 	bl	80162b6 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80157d0:	687d      	ldr	r5, [r7, #4]
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	335c      	adds	r3, #92	; 0x5c
 80157d8:	681c      	ldr	r4, [r3, #0]
 80157da:	f005 f9a7 	bl	801ab2c <_ZN8touchgfx11Application11getInstanceEv>
 80157de:	4603      	mov	r3, r0
 80157e0:	4619      	mov	r1, r3
 80157e2:	4628      	mov	r0, r5
 80157e4:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD00BB800, (void*)0);
 80157e6:	6878      	ldr	r0, [r7, #4]
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	3380      	adds	r3, #128	; 0x80
 80157ee:	681c      	ldr	r4, [r3, #0]
 80157f0:	2300      	movs	r3, #0
 80157f2:	4a04      	ldr	r2, [pc, #16]	; (8015804 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80157f4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80157f8:	47a0      	blx	r4
}
 80157fa:	bf00      	nop
 80157fc:	3708      	adds	r7, #8
 80157fe:	46bd      	mov	sp, r7
 8015800:	bdb0      	pop	{r4, r5, r7, pc}
 8015802:	bf00      	nop
 8015804:	d00bb800 	.word	0xd00bb800

08015808 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b082      	sub	sp, #8
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8015810:	2109      	movs	r1, #9
 8015812:	205a      	movs	r0, #90	; 0x5a
 8015814:	f7ff ffaa 	bl	801576c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8015818:	2109      	movs	r1, #9
 801581a:	2058      	movs	r0, #88	; 0x58
 801581c:	f7ff ffa6 	bl	801576c <__NVIC_SetPriority>
}
 8015820:	bf00      	nop
 8015822:	3708      	adds	r7, #8
 8015824:	46bd      	mov	sp, r7
 8015826:	bd80      	pop	{r7, pc}

08015828 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8015830:	205a      	movs	r0, #90	; 0x5a
 8015832:	f7ff ff59 	bl	80156e8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8015836:	2058      	movs	r0, #88	; 0x58
 8015838:	f7ff ff56 	bl	80156e8 <__NVIC_EnableIRQ>
}
 801583c:	bf00      	nop
 801583e:	3708      	adds	r7, #8
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}

08015844 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b082      	sub	sp, #8
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 801584c:	205a      	movs	r0, #90	; 0x5a
 801584e:	f7ff ff69 	bl	8015724 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8015852:	2058      	movs	r0, #88	; 0x58
 8015854:	f7ff ff66 	bl	8015724 <__NVIC_DisableIRQ>
}
 8015858:	bf00      	nop
 801585a:	3708      	adds	r7, #8
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}

08015860 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8015860:	b480      	push	{r7}
 8015862:	b083      	sub	sp, #12
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8015868:	4b11      	ldr	r3, [pc, #68]	; (80158b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801586a:	68db      	ldr	r3, [r3, #12]
 801586c:	b29b      	uxth	r3, r3
 801586e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015872:	b29b      	uxth	r3, r3
 8015874:	3b01      	subs	r3, #1
 8015876:	b29a      	uxth	r2, r3
 8015878:	4b0e      	ldr	r3, [pc, #56]	; (80158b4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801587a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801587c:	4b0c      	ldr	r3, [pc, #48]	; (80158b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801587e:	691b      	ldr	r3, [r3, #16]
 8015880:	b29b      	uxth	r3, r3
 8015882:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015886:	b29b      	uxth	r3, r3
 8015888:	3b01      	subs	r3, #1
 801588a:	b29a      	uxth	r2, r3
 801588c:	4b0a      	ldr	r3, [pc, #40]	; (80158b8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801588e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8015890:	4b08      	ldr	r3, [pc, #32]	; (80158b4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8015892:	881a      	ldrh	r2, [r3, #0]
 8015894:	4b06      	ldr	r3, [pc, #24]	; (80158b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015896:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8015898:	4b05      	ldr	r3, [pc, #20]	; (80158b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801589a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801589c:	4a04      	ldr	r2, [pc, #16]	; (80158b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801589e:	f043 0301 	orr.w	r3, r3, #1
 80158a2:	6353      	str	r3, [r2, #52]	; 0x34
}
 80158a4:	bf00      	nop
 80158a6:	370c      	adds	r7, #12
 80158a8:	46bd      	mov	sp, r7
 80158aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ae:	4770      	bx	lr
 80158b0:	40016800 	.word	0x40016800
 80158b4:	200067c0 	.word	0x200067c0
 80158b8:	200067c2 	.word	0x200067c2

080158bc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80158bc:	b580      	push	{r7, lr}
 80158be:	b082      	sub	sp, #8
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	4618      	mov	r0, r3
 80158c8:	f000 fcdc 	bl	8016284 <_ZN8touchgfx3HAL10beginFrameEv>
 80158cc:	4603      	mov	r3, r0
}
 80158ce:	4618      	mov	r0, r3
 80158d0:	3708      	adds	r7, #8
 80158d2:	46bd      	mov	sp, r7
 80158d4:	bd80      	pop	{r7, pc}

080158d6 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80158d6:	b580      	push	{r7, lr}
 80158d8:	b082      	sub	sp, #8
 80158da:	af00      	add	r7, sp, #0
 80158dc:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	4618      	mov	r0, r3
 80158e2:	f000 fcdb 	bl	801629c <_ZN8touchgfx3HAL8endFrameEv>
}
 80158e6:	bf00      	nop
 80158e8:	3708      	adds	r7, #8
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bd80      	pop	{r7, pc}
	...

080158f0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80158f0:	b480      	push	{r7}
 80158f2:	b083      	sub	sp, #12
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80158f8:	4b03      	ldr	r3, [pc, #12]	; (8015908 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80158fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80158fc:	4618      	mov	r0, r3
 80158fe:	370c      	adds	r7, #12
 8015900:	46bd      	mov	sp, r7
 8015902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015906:	4770      	bx	lr
 8015908:	40016884 	.word	0x40016884

0801590c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 801590c:	b480      	push	{r7}
 801590e:	b083      	sub	sp, #12
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
 8015914:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8015916:	4a06      	ldr	r2, [pc, #24]	; (8015930 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8015918:	683b      	ldr	r3, [r7, #0]
 801591a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 801591c:	4b05      	ldr	r3, [pc, #20]	; (8015934 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 801591e:	2201      	movs	r2, #1
 8015920:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015922:	bf00      	nop
 8015924:	370c      	adds	r7, #12
 8015926:	46bd      	mov	sp, r7
 8015928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592c:	4770      	bx	lr
 801592e:	bf00      	nop
 8015930:	40016884 	.word	0x40016884
 8015934:	40016800 	.word	0x40016800

08015938 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b082      	sub	sp, #8
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
 8015940:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	6839      	ldr	r1, [r7, #0]
 8015946:	4618      	mov	r0, r3
 8015948:	f000 fc68 	bl	801621c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 801594c:	bf00      	nop
 801594e:	3708      	adds	r7, #8
 8015950:	46bd      	mov	sp, r7
 8015952:	bd80      	pop	{r7, pc}

08015954 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8015954:	b580      	push	{r7, lr}
 8015956:	b084      	sub	sp, #16
 8015958:	af00      	add	r7, sp, #0
 801595a:	60f8      	str	r0, [r7, #12]
 801595c:	60b9      	str	r1, [r7, #8]
 801595e:	607a      	str	r2, [r7, #4]
 8015960:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8015962:	68f8      	ldr	r0, [r7, #12]
 8015964:	683b      	ldr	r3, [r7, #0]
 8015966:	687a      	ldr	r2, [r7, #4]
 8015968:	68b9      	ldr	r1, [r7, #8]
 801596a:	f000 fdc0 	bl	80164ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801596e:	4603      	mov	r3, r0
}
 8015970:	4618      	mov	r0, r3
 8015972:	3710      	adds	r7, #16
 8015974:	46bd      	mov	sp, r7
 8015976:	bd80      	pop	{r7, pc}

08015978 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8015978:	b580      	push	{r7, lr}
 801597a:	b082      	sub	sp, #8
 801597c:	af00      	add	r7, sp, #0
 801597e:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8015980:	4b1a      	ldr	r3, [pc, #104]	; (80159ec <HAL_LTDC_LineEventCallback+0x74>)
 8015982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015984:	4a1a      	ldr	r2, [pc, #104]	; (80159f0 <HAL_LTDC_LineEventCallback+0x78>)
 8015986:	8812      	ldrh	r2, [r2, #0]
 8015988:	4293      	cmp	r3, r2
 801598a:	bf0c      	ite	eq
 801598c:	2301      	moveq	r3, #1
 801598e:	2300      	movne	r3, #0
 8015990:	b2db      	uxtb	r3, r3
 8015992:	2b00      	cmp	r3, #0
 8015994:	d017      	beq.n	80159c6 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8015996:	4b17      	ldr	r3, [pc, #92]	; (80159f4 <HAL_LTDC_LineEventCallback+0x7c>)
 8015998:	881b      	ldrh	r3, [r3, #0]
 801599a:	4619      	mov	r1, r3
 801599c:	6878      	ldr	r0, [r7, #4]
 801599e:	f7ed ff33 	bl	8003808 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80159a2:	f7f9 fadb 	bl	800ef5c <_ZN8touchgfx3HAL11getInstanceEv>
 80159a6:	4603      	mov	r3, r0
 80159a8:	4618      	mov	r0, r3
 80159aa:	f7ff fe8a 	bl	80156c2 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80159ae:	f7fe fd09 	bl	80143c4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80159b2:	f7f9 fad3 	bl	800ef5c <_ZN8touchgfx3HAL11getInstanceEv>
 80159b6:	4603      	mov	r3, r0
 80159b8:	4618      	mov	r0, r3
 80159ba:	f001 fa73 	bl	8016ea4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80159be:	2000      	movs	r0, #0
 80159c0:	f7fe fa66 	bl	8013e90 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 80159c4:	e00e      	b.n	80159e4 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80159c6:	4b0a      	ldr	r3, [pc, #40]	; (80159f0 <HAL_LTDC_LineEventCallback+0x78>)
 80159c8:	881b      	ldrh	r3, [r3, #0]
 80159ca:	4619      	mov	r1, r3
 80159cc:	6878      	ldr	r0, [r7, #4]
 80159ce:	f7ed ff1b 	bl	8003808 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80159d2:	2000      	movs	r0, #0
 80159d4:	f7fe fa67 	bl	8013ea6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 80159d8:	f7f9 fac0 	bl	800ef5c <_ZN8touchgfx3HAL11getInstanceEv>
 80159dc:	4603      	mov	r3, r0
 80159de:	4618      	mov	r0, r3
 80159e0:	f7ff fe61 	bl	80156a6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 80159e4:	bf00      	nop
 80159e6:	3708      	adds	r7, #8
 80159e8:	46bd      	mov	sp, r7
 80159ea:	bd80      	pop	{r7, pc}
 80159ec:	40016800 	.word	0x40016800
 80159f0:	200067c0 	.word	0x200067c0
 80159f4:	200067c2 	.word	0x200067c2

080159f8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80159f8:	8880      	ldrh	r0, [r0, #4]
 80159fa:	4770      	bx	lr

080159fc <_ZN8touchgfx17AbstractPartition5clearEv>:
 80159fc:	2300      	movs	r3, #0
 80159fe:	8083      	strh	r3, [r0, #4]
 8015a00:	4770      	bx	lr
	...

08015a04 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8015a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a06:	6803      	ldr	r3, [r0, #0]
 8015a08:	4605      	mov	r5, r0
 8015a0a:	460e      	mov	r6, r1
 8015a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a0e:	2100      	movs	r1, #0
 8015a10:	4798      	blx	r3
 8015a12:	682b      	ldr	r3, [r5, #0]
 8015a14:	4604      	mov	r4, r0
 8015a16:	6a1b      	ldr	r3, [r3, #32]
 8015a18:	4628      	mov	r0, r5
 8015a1a:	4798      	blx	r3
 8015a1c:	88ab      	ldrh	r3, [r5, #4]
 8015a1e:	1b34      	subs	r4, r6, r4
 8015a20:	b2a4      	uxth	r4, r4
 8015a22:	fbb4 f4f0 	udiv	r4, r4, r0
 8015a26:	42a3      	cmp	r3, r4
 8015a28:	d805      	bhi.n	8015a36 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8015a2a:	4b0e      	ldr	r3, [pc, #56]	; (8015a64 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8015a2c:	4a0e      	ldr	r2, [pc, #56]	; (8015a68 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8015a2e:	211e      	movs	r1, #30
 8015a30:	480e      	ldr	r0, [pc, #56]	; (8015a6c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8015a32:	f016 fe59 	bl	802c6e8 <__assert_func>
 8015a36:	682b      	ldr	r3, [r5, #0]
 8015a38:	2100      	movs	r1, #0
 8015a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a3c:	4628      	mov	r0, r5
 8015a3e:	4798      	blx	r3
 8015a40:	682b      	ldr	r3, [r5, #0]
 8015a42:	4607      	mov	r7, r0
 8015a44:	6a1b      	ldr	r3, [r3, #32]
 8015a46:	4628      	mov	r0, r5
 8015a48:	4798      	blx	r3
 8015a4a:	1bf3      	subs	r3, r6, r7
 8015a4c:	b29b      	uxth	r3, r3
 8015a4e:	fbb3 f2f0 	udiv	r2, r3, r0
 8015a52:	fb02 3010 	mls	r0, r2, r0, r3
 8015a56:	b118      	cbz	r0, 8015a60 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8015a58:	4b05      	ldr	r3, [pc, #20]	; (8015a70 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8015a5a:	4a03      	ldr	r2, [pc, #12]	; (8015a68 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8015a5c:	211f      	movs	r1, #31
 8015a5e:	e7e7      	b.n	8015a30 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8015a60:	4620      	mov	r0, r4
 8015a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a64:	0802f7e8 	.word	0x0802f7e8
 8015a68:	0802f956 	.word	0x0802f956
 8015a6c:	0802f7fd 	.word	0x0802f7fd
 8015a70:	0802f82b 	.word	0x0802f82b

08015a74 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8015a74:	b538      	push	{r3, r4, r5, lr}
 8015a76:	6803      	ldr	r3, [r0, #0]
 8015a78:	6a1b      	ldr	r3, [r3, #32]
 8015a7a:	460d      	mov	r5, r1
 8015a7c:	4604      	mov	r4, r0
 8015a7e:	4798      	blx	r3
 8015a80:	4285      	cmp	r5, r0
 8015a82:	d905      	bls.n	8015a90 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8015a84:	4b0c      	ldr	r3, [pc, #48]	; (8015ab8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8015a86:	4a0d      	ldr	r2, [pc, #52]	; (8015abc <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015a88:	2130      	movs	r1, #48	; 0x30
 8015a8a:	480d      	ldr	r0, [pc, #52]	; (8015ac0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8015a8c:	f016 fe2c 	bl	802c6e8 <__assert_func>
 8015a90:	6823      	ldr	r3, [r4, #0]
 8015a92:	88a5      	ldrh	r5, [r4, #4]
 8015a94:	69db      	ldr	r3, [r3, #28]
 8015a96:	4620      	mov	r0, r4
 8015a98:	4798      	blx	r3
 8015a9a:	4285      	cmp	r5, r0
 8015a9c:	d303      	bcc.n	8015aa6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8015a9e:	4b09      	ldr	r3, [pc, #36]	; (8015ac4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8015aa0:	4a06      	ldr	r2, [pc, #24]	; (8015abc <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015aa2:	2131      	movs	r1, #49	; 0x31
 8015aa4:	e7f1      	b.n	8015a8a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8015aa6:	6823      	ldr	r3, [r4, #0]
 8015aa8:	88a1      	ldrh	r1, [r4, #4]
 8015aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aac:	4620      	mov	r0, r4
 8015aae:	4798      	blx	r3
 8015ab0:	88a3      	ldrh	r3, [r4, #4]
 8015ab2:	3301      	adds	r3, #1
 8015ab4:	80a3      	strh	r3, [r4, #4]
 8015ab6:	bd38      	pop	{r3, r4, r5, pc}
 8015ab8:	0802f8a5 	.word	0x0802f8a5
 8015abc:	0802f999 	.word	0x0802f999
 8015ac0:	0802f7fd 	.word	0x0802f7fd
 8015ac4:	0802f8bc 	.word	0x0802f8bc

08015ac8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015ac8:	b570      	push	{r4, r5, r6, lr}
 8015aca:	6803      	ldr	r3, [r0, #0]
 8015acc:	6a1b      	ldr	r3, [r3, #32]
 8015ace:	4616      	mov	r6, r2
 8015ad0:	4604      	mov	r4, r0
 8015ad2:	460d      	mov	r5, r1
 8015ad4:	4798      	blx	r3
 8015ad6:	4286      	cmp	r6, r0
 8015ad8:	d905      	bls.n	8015ae6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8015ada:	4b06      	ldr	r3, [pc, #24]	; (8015af4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8015adc:	4a06      	ldr	r2, [pc, #24]	; (8015af8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8015ade:	4807      	ldr	r0, [pc, #28]	; (8015afc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8015ae0:	213a      	movs	r1, #58	; 0x3a
 8015ae2:	f016 fe01 	bl	802c6e8 <__assert_func>
 8015ae6:	6823      	ldr	r3, [r4, #0]
 8015ae8:	4629      	mov	r1, r5
 8015aea:	4620      	mov	r0, r4
 8015aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015af2:	4718      	bx	r3
 8015af4:	0802f8a5 	.word	0x0802f8a5
 8015af8:	0802f90c 	.word	0x0802f90c
 8015afc:	0802f7fd 	.word	0x0802f7fd

08015b00 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8015b00:	4770      	bx	lr
	...

08015b04 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8015b04:	4a02      	ldr	r2, [pc, #8]	; (8015b10 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8015b06:	6002      	str	r2, [r0, #0]
 8015b08:	2200      	movs	r2, #0
 8015b0a:	8082      	strh	r2, [r0, #4]
 8015b0c:	4770      	bx	lr
 8015b0e:	bf00      	nop
 8015b10:	0802f8e0 	.word	0x0802f8e0

08015b14 <_ZN8touchgfx9Container13getFirstChildEv>:
 8015b14:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8015b16:	4770      	bx	lr

08015b18 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8015b18:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8015b1c:	4770      	bx	lr

08015b1e <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8015b1e:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8015b22:	4770      	bx	lr

08015b24 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8015b24:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8015b28:	4770      	bx	lr

08015b2a <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8015b2a:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8015b2e:	4770      	bx	lr

08015b30 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8015b30:	b510      	push	{r4, lr}
 8015b32:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8015b36:	600c      	str	r4, [r1, #0]
 8015b38:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8015b3c:	6011      	str	r1, [r2, #0]
 8015b3e:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8015b42:	801a      	strh	r2, [r3, #0]
 8015b44:	9b02      	ldr	r3, [sp, #8]
 8015b46:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 8015b4a:	801a      	strh	r2, [r3, #0]
 8015b4c:	bd10      	pop	{r4, pc}

08015b4e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 8015b4e:	b510      	push	{r4, lr}
 8015b50:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8015b54:	600c      	str	r4, [r1, #0]
 8015b56:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8015b5a:	6011      	str	r1, [r2, #0]
 8015b5c:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8015b60:	801a      	strh	r2, [r3, #0]
 8015b62:	bd10      	pop	{r4, pc}

08015b64 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8015b64:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8015b68:	600b      	str	r3, [r1, #0]
 8015b6a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8015b6e:	6013      	str	r3, [r2, #0]
 8015b70:	4770      	bx	lr

08015b72 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8015b72:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8015b76:	4770      	bx	lr

08015b78 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8015b78:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8015b7c:	4770      	bx	lr

08015b7e <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 8015b7e:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8015b82:	4770      	bx	lr

08015b84 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8015b84:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 8015b88:	4770      	bx	lr

08015b8a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8015b8a:	b570      	push	{r4, r5, r6, lr}
 8015b8c:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8015b90:	428d      	cmp	r5, r1
 8015b92:	bfb8      	it	lt
 8015b94:	460d      	movlt	r5, r1
 8015b96:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8015b9a:	428d      	cmp	r5, r1
 8015b9c:	4604      	mov	r4, r0
 8015b9e:	bfa8      	it	ge
 8015ba0:	460d      	movge	r5, r1
 8015ba2:	4616      	mov	r6, r2
 8015ba4:	b99a      	cbnz	r2, 8015bce <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8015ba6:	6803      	ldr	r3, [r0, #0]
 8015ba8:	4629      	mov	r1, r5
 8015baa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015bae:	4798      	blx	r3
 8015bb0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8015bb4:	b338      	cbz	r0, 8015c06 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x7c>
 8015bb6:	6803      	ldr	r3, [r0, #0]
 8015bb8:	68db      	ldr	r3, [r3, #12]
 8015bba:	4798      	blx	r3
 8015bbc:	b318      	cbz	r0, 8015c06 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x7c>
 8015bbe:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8015bc2:	6803      	ldr	r3, [r0, #0]
 8015bc4:	4621      	mov	r1, r4
 8015bc6:	689b      	ldr	r3, [r3, #8]
 8015bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015bcc:	4718      	bx	r3
 8015bce:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	dd04      	ble.n	8015be0 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x56>
 8015bd6:	f004 ffa9 	bl	801ab2c <_ZN8touchgfx11Application11getInstanceEv>
 8015bda:	4621      	mov	r1, r4
 8015bdc:	f004 ffde 	bl	801ab9c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8015be0:	6823      	ldr	r3, [r4, #0]
 8015be2:	4620      	mov	r0, r4
 8015be4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015be8:	4798      	blx	r3
 8015bea:	2300      	movs	r3, #0
 8015bec:	e9c4 0526 	strd	r0, r5, [r4, #152]	; 0x98
 8015bf0:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 8015bf4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8015bf8:	f004 ff98 	bl	801ab2c <_ZN8touchgfx11Application11getInstanceEv>
 8015bfc:	4621      	mov	r1, r4
 8015bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c02:	f004 bf99 	b.w	801ab38 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8015c06:	bd70      	pop	{r4, r5, r6, pc}

08015c08 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8015c08:	b510      	push	{r4, lr}
 8015c0a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8015c0e:	4299      	cmp	r1, r3
 8015c10:	bfb8      	it	lt
 8015c12:	4619      	movlt	r1, r3
 8015c14:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8015c18:	4299      	cmp	r1, r3
 8015c1a:	bfa8      	it	ge
 8015c1c:	4619      	movge	r1, r3
 8015c1e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8015c22:	428b      	cmp	r3, r1
 8015c24:	4604      	mov	r4, r0
 8015c26:	d010      	beq.n	8015c4a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8015c28:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8015c2c:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8015c30:	b158      	cbz	r0, 8015c4a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8015c32:	6803      	ldr	r3, [r0, #0]
 8015c34:	68db      	ldr	r3, [r3, #12]
 8015c36:	4798      	blx	r3
 8015c38:	b138      	cbz	r0, 8015c4a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8015c3a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8015c3e:	6803      	ldr	r3, [r0, #0]
 8015c40:	4621      	mov	r1, r4
 8015c42:	689b      	ldr	r3, [r3, #8]
 8015c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c48:	4718      	bx	r3
 8015c4a:	bd10      	pop	{r4, pc}

08015c4c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8015c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c50:	4291      	cmp	r1, r2
 8015c52:	4604      	mov	r4, r0
 8015c54:	460e      	mov	r6, r1
 8015c56:	4615      	mov	r5, r2
 8015c58:	4698      	mov	r8, r3
 8015c5a:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8015c5e:	db05      	blt.n	8015c6c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 8015c60:	4b11      	ldr	r3, [pc, #68]	; (8015ca8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 8015c62:	4a12      	ldr	r2, [pc, #72]	; (8015cac <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8015c64:	214b      	movs	r1, #75	; 0x4b
 8015c66:	4812      	ldr	r0, [pc, #72]	; (8015cb0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 8015c68:	f016 fd3e 	bl	802c6e8 <__assert_func>
 8015c6c:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 8015c70:	6803      	ldr	r3, [r0, #0]
 8015c72:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8015c76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015c7a:	4798      	blx	r3
 8015c7c:	f1b8 0f00 	cmp.w	r8, #0
 8015c80:	d10c      	bne.n	8015c9c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 8015c82:	1bad      	subs	r5, r5, r6
 8015c84:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 8015c88:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 8015c8c:	f8a4 7092 	strh.w	r7, [r4, #146]	; 0x92
 8015c90:	42bb      	cmp	r3, r7
 8015c92:	d806      	bhi.n	8015ca2 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 8015c94:	4b07      	ldr	r3, [pc, #28]	; (8015cb4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 8015c96:	4a05      	ldr	r2, [pc, #20]	; (8015cac <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8015c98:	2158      	movs	r1, #88	; 0x58
 8015c9a:	e7e4      	b.n	8015c66 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 8015c9c:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
 8015ca0:	e7f2      	b.n	8015c88 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 8015ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ca6:	bf00      	nop
 8015ca8:	0802f9d7 	.word	0x0802f9d7
 8015cac:	0802fb20 	.word	0x0802fb20
 8015cb0:	0802f9e1 	.word	0x0802f9e1
 8015cb4:	0802fa38 	.word	0x0802fa38

08015cb8 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8015cb8:	b570      	push	{r4, r5, r6, lr}
 8015cba:	4604      	mov	r4, r0
 8015cbc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8015cc0:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 8015cc4:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 8015cc8:	3001      	adds	r0, #1
 8015cca:	1ad2      	subs	r2, r2, r3
 8015ccc:	b212      	sxth	r2, r2
 8015cce:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 8015cd2:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8015cd6:	2100      	movs	r1, #0
 8015cd8:	b280      	uxth	r0, r0
 8015cda:	47a8      	blx	r5
 8015cdc:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8015ce0:	6823      	ldr	r3, [r4, #0]
 8015ce2:	4401      	add	r1, r0
 8015ce4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015ce8:	4620      	mov	r0, r4
 8015cea:	4798      	blx	r3
 8015cec:	e9d4 3228 	ldrd	r3, r2, [r4, #160]	; 0xa0
 8015cf0:	429a      	cmp	r2, r3
 8015cf2:	db16      	blt.n	8015d22 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	e9c4 3328 	strd	r3, r3, [r4, #160]	; 0xa0
 8015cfa:	f004 ff17 	bl	801ab2c <_ZN8touchgfx11Application11getInstanceEv>
 8015cfe:	4621      	mov	r1, r4
 8015d00:	f004 ff4c 	bl	801ab9c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8015d04:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8015d08:	b158      	cbz	r0, 8015d22 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 8015d0a:	6803      	ldr	r3, [r0, #0]
 8015d0c:	68db      	ldr	r3, [r3, #12]
 8015d0e:	4798      	blx	r3
 8015d10:	b138      	cbz	r0, 8015d22 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 8015d12:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8015d16:	6803      	ldr	r3, [r0, #0]
 8015d18:	4621      	mov	r1, r4
 8015d1a:	689b      	ldr	r3, [r3, #8]
 8015d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d20:	4718      	bx	r3
 8015d22:	bd70      	pop	{r4, r5, r6, pc}

08015d24 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8015d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015d26:	4604      	mov	r4, r0
 8015d28:	460d      	mov	r5, r1
 8015d2a:	b1a9      	cbz	r1, 8015d58 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8015d2c:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 8015d30:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 8015d34:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8015d38:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 8015d3c:	ab01      	add	r3, sp, #4
 8015d3e:	1a12      	subs	r2, r2, r0
 8015d40:	1b89      	subs	r1, r1, r6
 8015d42:	1a38      	subs	r0, r7, r0
 8015d44:	f006 f890 	bl	801be68 <_ZN8touchgfx6muldivElllRl>
 8015d48:	4629      	mov	r1, r5
 8015d4a:	ab01      	add	r3, sp, #4
 8015d4c:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 8015d50:	4430      	add	r0, r6
 8015d52:	f006 f889 	bl	801be68 <_ZN8touchgfx6muldivElllRl>
 8015d56:	b285      	uxth	r5, r0
 8015d58:	4628      	mov	r0, r5
 8015d5a:	b003      	add	sp, #12
 8015d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015d5e <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8015d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d62:	4604      	mov	r4, r0
 8015d64:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8015d68:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 8015d6c:	460e      	mov	r6, r1
 8015d6e:	4615      	mov	r5, r2
 8015d70:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8015d74:	4619      	mov	r1, r3
 8015d76:	463a      	mov	r2, r7
 8015d78:	3058      	adds	r0, #88	; 0x58
 8015d7a:	4698      	mov	r8, r3
 8015d7c:	f7f9 fd22 	bl	800f7c4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015d80:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8015d84:	4446      	add	r6, r8
 8015d86:	42b3      	cmp	r3, r6
 8015d88:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015d8c:	bfb8      	it	lt
 8015d8e:	8126      	strhlt	r6, [r4, #8]
 8015d90:	443d      	add	r5, r7
 8015d92:	42ab      	cmp	r3, r5
 8015d94:	bfb8      	it	lt
 8015d96:	8165      	strhlt	r5, [r4, #10]
 8015d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015d9c <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8015d9c:	b510      	push	{r4, lr}
 8015d9e:	4604      	mov	r4, r0
 8015da0:	302c      	adds	r0, #44	; 0x2c
 8015da2:	f003 f9d1 	bl	8019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015da6:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 8015daa:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8015dae:	4620      	mov	r0, r4
 8015db0:	f7f9 fd08 	bl	800f7c4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015db4:	bd10      	pop	{r4, pc}
	...

08015db8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8015db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015dba:	4604      	mov	r4, r0
 8015dbc:	4626      	mov	r6, r4
 8015dbe:	2500      	movs	r5, #0
 8015dc0:	f7f9 fc0a 	bl	800f5d8 <_ZN8touchgfx8DrawableC1Ev>
 8015dc4:	4b22      	ldr	r3, [pc, #136]	; (8015e50 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x98>)
 8015dc6:	62a5      	str	r5, [r4, #40]	; 0x28
 8015dc8:	f846 3b2c 	str.w	r3, [r6], #44
 8015dcc:	2226      	movs	r2, #38	; 0x26
 8015dce:	4629      	mov	r1, r5
 8015dd0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8015dd4:	4630      	mov	r0, r6
 8015dd6:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015dda:	f017 f825 	bl	802ce28 <memset>
 8015dde:	4630      	mov	r0, r6
 8015de0:	f7f9 fbfa 	bl	800f5d8 <_ZN8touchgfx8DrawableC1Ev>
 8015de4:	a902      	add	r1, sp, #8
 8015de6:	4b1b      	ldr	r3, [pc, #108]	; (8015e54 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8015de8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015dea:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8015dee:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8015df2:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 8015df6:	4630      	mov	r0, r6
 8015df8:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8015dfc:	f003 f9a4 	bl	8019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015e00:	4638      	mov	r0, r7
 8015e02:	f7f9 fbe9 	bl	800f5d8 <_ZN8touchgfx8DrawableC1Ev>
 8015e06:	4b14      	ldr	r3, [pc, #80]	; (8015e58 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8015e08:	65a3      	str	r3, [r4, #88]	; 0x58
 8015e0a:	2364      	movs	r3, #100	; 0x64
 8015e0c:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 8015e10:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8015e14:	4b11      	ldr	r3, [pc, #68]	; (8015e5c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8015e16:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8015e1a:	e9c4 3525 	strd	r3, r5, [r4, #148]	; 0x94
 8015e1e:	4629      	mov	r1, r5
 8015e20:	4630      	mov	r0, r6
 8015e22:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8015e26:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8015e2a:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8015e2e:	f7f9 fc4f 	bl	800f6d0 <_ZN8touchgfx8Drawable4setXEs>
 8015e32:	4629      	mov	r1, r5
 8015e34:	4630      	mov	r0, r6
 8015e36:	f7f9 fc5a 	bl	800f6ee <_ZN8touchgfx8Drawable4setYEs>
 8015e3a:	4631      	mov	r1, r6
 8015e3c:	4620      	mov	r0, r4
 8015e3e:	f000 f8a7 	bl	8015f90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015e42:	4620      	mov	r0, r4
 8015e44:	4639      	mov	r1, r7
 8015e46:	f000 f8a3 	bl	8015f90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015e4a:	4620      	mov	r0, r4
 8015e4c:	b003      	add	sp, #12
 8015e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e50:	0802fa5c 	.word	0x0802fa5c
 8015e54:	08030d18 	.word	0x08030d18
 8015e58:	0802fc4c 	.word	0x0802fc4c
 8015e5c:	0801c587 	.word	0x0801c587

08015e60 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8015e60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015e62:	2000      	movs	r0, #0
 8015e64:	b12b      	cbz	r3, 8015e72 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015e66:	b920      	cbnz	r0, 8015e72 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015e68:	1a5a      	subs	r2, r3, r1
 8015e6a:	4250      	negs	r0, r2
 8015e6c:	4150      	adcs	r0, r2
 8015e6e:	699b      	ldr	r3, [r3, #24]
 8015e70:	e7f8      	b.n	8015e64 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8015e72:	4770      	bx	lr

08015e74 <_ZN8touchgfx9Container9removeAllEv>:
 8015e74:	2200      	movs	r2, #0
 8015e76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015e78:	b123      	cbz	r3, 8015e84 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8015e7a:	6999      	ldr	r1, [r3, #24]
 8015e7c:	6281      	str	r1, [r0, #40]	; 0x28
 8015e7e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8015e82:	e7f8      	b.n	8015e76 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8015e84:	4770      	bx	lr

08015e86 <_ZN8touchgfx9Container6unlinkEv>:
 8015e86:	2300      	movs	r3, #0
 8015e88:	6283      	str	r3, [r0, #40]	; 0x28
 8015e8a:	4770      	bx	lr

08015e8c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8015e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e90:	461f      	mov	r7, r3
 8015e92:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8015e96:	460d      	mov	r5, r1
 8015e98:	4616      	mov	r6, r2
 8015e9a:	b103      	cbz	r3, 8015e9e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8015e9c:	6038      	str	r0, [r7, #0]
 8015e9e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015ea0:	b314      	cbz	r4, 8015ee8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8015ea2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015ea6:	b1eb      	cbz	r3, 8015ee4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015ea8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015eac:	428d      	cmp	r5, r1
 8015eae:	db19      	blt.n	8015ee4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015eb0:	8923      	ldrh	r3, [r4, #8]
 8015eb2:	b289      	uxth	r1, r1
 8015eb4:	440b      	add	r3, r1
 8015eb6:	b21b      	sxth	r3, r3
 8015eb8:	429d      	cmp	r5, r3
 8015eba:	da13      	bge.n	8015ee4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015ebc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015ec0:	4296      	cmp	r6, r2
 8015ec2:	db0f      	blt.n	8015ee4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015ec4:	8963      	ldrh	r3, [r4, #10]
 8015ec6:	b292      	uxth	r2, r2
 8015ec8:	4413      	add	r3, r2
 8015eca:	b21b      	sxth	r3, r3
 8015ecc:	429e      	cmp	r6, r3
 8015ece:	da09      	bge.n	8015ee4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015ed0:	6823      	ldr	r3, [r4, #0]
 8015ed2:	1ab2      	subs	r2, r6, r2
 8015ed4:	1a69      	subs	r1, r5, r1
 8015ed6:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8015eda:	b212      	sxth	r2, r2
 8015edc:	463b      	mov	r3, r7
 8015ede:	b209      	sxth	r1, r1
 8015ee0:	4620      	mov	r0, r4
 8015ee2:	47c0      	blx	r8
 8015ee4:	69a4      	ldr	r4, [r4, #24]
 8015ee6:	e7db      	b.n	8015ea0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015eec <_ZNK8touchgfx9Container12getSolidRectEv>:
 8015eec:	2200      	movs	r2, #0
 8015eee:	8002      	strh	r2, [r0, #0]
 8015ef0:	8042      	strh	r2, [r0, #2]
 8015ef2:	8082      	strh	r2, [r0, #4]
 8015ef4:	80c2      	strh	r2, [r0, #6]
 8015ef6:	4770      	bx	lr

08015ef8 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015ef8:	b570      	push	{r4, r5, r6, lr}
 8015efa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015efc:	460d      	mov	r5, r1
 8015efe:	4616      	mov	r6, r2
 8015f00:	b13c      	cbz	r4, 8015f12 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015f02:	6823      	ldr	r3, [r4, #0]
 8015f04:	4620      	mov	r0, r4
 8015f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f08:	4632      	mov	r2, r6
 8015f0a:	4629      	mov	r1, r5
 8015f0c:	4798      	blx	r3
 8015f0e:	69a4      	ldr	r4, [r4, #24]
 8015f10:	e7f6      	b.n	8015f00 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015f12:	bd70      	pop	{r4, r5, r6, pc}

08015f14 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015f14:	b538      	push	{r3, r4, r5, lr}
 8015f16:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015f18:	460d      	mov	r5, r1
 8015f1a:	b134      	cbz	r4, 8015f2a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015f1c:	682b      	ldr	r3, [r5, #0]
 8015f1e:	4621      	mov	r1, r4
 8015f20:	689b      	ldr	r3, [r3, #8]
 8015f22:	4628      	mov	r0, r5
 8015f24:	4798      	blx	r3
 8015f26:	69a4      	ldr	r4, [r4, #24]
 8015f28:	e7f7      	b.n	8015f1a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8015f2a:	bd38      	pop	{r3, r4, r5, pc}

08015f2c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8015f2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015f2e:	b19b      	cbz	r3, 8015f58 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015f30:	428b      	cmp	r3, r1
 8015f32:	d109      	bne.n	8015f48 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015f34:	699a      	ldr	r2, [r3, #24]
 8015f36:	2100      	movs	r1, #0
 8015f38:	6159      	str	r1, [r3, #20]
 8015f3a:	6282      	str	r2, [r0, #40]	; 0x28
 8015f3c:	b902      	cbnz	r2, 8015f40 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8015f3e:	4770      	bx	lr
 8015f40:	6199      	str	r1, [r3, #24]
 8015f42:	4770      	bx	lr
 8015f44:	4613      	mov	r3, r2
 8015f46:	b13a      	cbz	r2, 8015f58 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015f48:	699a      	ldr	r2, [r3, #24]
 8015f4a:	428a      	cmp	r2, r1
 8015f4c:	d1fa      	bne.n	8015f44 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8015f4e:	698a      	ldr	r2, [r1, #24]
 8015f50:	619a      	str	r2, [r3, #24]
 8015f52:	2300      	movs	r3, #0
 8015f54:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8015f58:	4770      	bx	lr

08015f5a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8015f5a:	b410      	push	{r4}
 8015f5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015f5e:	4604      	mov	r4, r0
 8015f60:	b92b      	cbnz	r3, 8015f6e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015f62:	6803      	ldr	r3, [r0, #0]
 8015f64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015f6a:	4611      	mov	r1, r2
 8015f6c:	4718      	bx	r3
 8015f6e:	b941      	cbnz	r1, 8015f82 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015f70:	6193      	str	r3, [r2, #24]
 8015f72:	6282      	str	r2, [r0, #40]	; 0x28
 8015f74:	6154      	str	r4, [r2, #20]
 8015f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f7a:	4770      	bx	lr
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	2800      	cmp	r0, #0
 8015f80:	d0f9      	beq.n	8015f76 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015f82:	4299      	cmp	r1, r3
 8015f84:	6998      	ldr	r0, [r3, #24]
 8015f86:	d1f9      	bne.n	8015f7c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8015f88:	6190      	str	r0, [r2, #24]
 8015f8a:	618a      	str	r2, [r1, #24]
 8015f8c:	e7f2      	b.n	8015f74 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08015f90 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015f90:	4288      	cmp	r0, r1
 8015f92:	b508      	push	{r3, lr}
 8015f94:	d105      	bne.n	8015fa2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8015f96:	4b11      	ldr	r3, [pc, #68]	; (8015fdc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8015f98:	4a11      	ldr	r2, [pc, #68]	; (8015fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015f9a:	2121      	movs	r1, #33	; 0x21
 8015f9c:	4811      	ldr	r0, [pc, #68]	; (8015fe4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8015f9e:	f016 fba3 	bl	802c6e8 <__assert_func>
 8015fa2:	694b      	ldr	r3, [r1, #20]
 8015fa4:	b11b      	cbz	r3, 8015fae <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8015fa6:	4b10      	ldr	r3, [pc, #64]	; (8015fe8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8015fa8:	4a0d      	ldr	r2, [pc, #52]	; (8015fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015faa:	2122      	movs	r1, #34	; 0x22
 8015fac:	e7f6      	b.n	8015f9c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015fae:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8015fb2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015fb4:	b913      	cbnz	r3, 8015fbc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8015fb6:	6281      	str	r1, [r0, #40]	; 0x28
 8015fb8:	bd08      	pop	{r3, pc}
 8015fba:	4613      	mov	r3, r2
 8015fbc:	699a      	ldr	r2, [r3, #24]
 8015fbe:	b12a      	cbz	r2, 8015fcc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8015fc0:	428b      	cmp	r3, r1
 8015fc2:	d1fa      	bne.n	8015fba <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8015fc4:	4b09      	ldr	r3, [pc, #36]	; (8015fec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015fc6:	4a06      	ldr	r2, [pc, #24]	; (8015fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015fc8:	2133      	movs	r1, #51	; 0x33
 8015fca:	e7e7      	b.n	8015f9c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015fcc:	428b      	cmp	r3, r1
 8015fce:	d103      	bne.n	8015fd8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8015fd0:	4b06      	ldr	r3, [pc, #24]	; (8015fec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015fd2:	4a03      	ldr	r2, [pc, #12]	; (8015fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015fd4:	2136      	movs	r1, #54	; 0x36
 8015fd6:	e7e1      	b.n	8015f9c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015fd8:	6199      	str	r1, [r3, #24]
 8015fda:	e7ed      	b.n	8015fb8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8015fdc:	0802fb79 	.word	0x0802fb79
 8015fe0:	0802fccc 	.word	0x0802fccc
 8015fe4:	0802fba5 	.word	0x0802fba5
 8015fe8:	0802fbd8 	.word	0x0802fbd8
 8015fec:	0802fc0e 	.word	0x0802fc0e

08015ff0 <_ZN8touchgfx4RectaNERKS0_>:
 8015ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ff4:	f9b1 7000 	ldrsh.w	r7, [r1]
 8015ff8:	888c      	ldrh	r4, [r1, #4]
 8015ffa:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015ffe:	443c      	add	r4, r7
 8016000:	b2a4      	uxth	r4, r4
 8016002:	fa0f f884 	sxth.w	r8, r4
 8016006:	45c1      	cmp	r9, r8
 8016008:	da2f      	bge.n	801606a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801600a:	8882      	ldrh	r2, [r0, #4]
 801600c:	444a      	add	r2, r9
 801600e:	b292      	uxth	r2, r2
 8016010:	fa0f fe82 	sxth.w	lr, r2
 8016014:	4577      	cmp	r7, lr
 8016016:	da28      	bge.n	801606a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016018:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801601c:	88cb      	ldrh	r3, [r1, #6]
 801601e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8016022:	442b      	add	r3, r5
 8016024:	b21b      	sxth	r3, r3
 8016026:	429e      	cmp	r6, r3
 8016028:	da1f      	bge.n	801606a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801602a:	88c3      	ldrh	r3, [r0, #6]
 801602c:	4433      	add	r3, r6
 801602e:	b29b      	uxth	r3, r3
 8016030:	fa0f fc83 	sxth.w	ip, r3
 8016034:	4565      	cmp	r5, ip
 8016036:	da18      	bge.n	801606a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016038:	454f      	cmp	r7, r9
 801603a:	bfb8      	it	lt
 801603c:	464f      	movlt	r7, r9
 801603e:	42b5      	cmp	r5, r6
 8016040:	bfb8      	it	lt
 8016042:	4635      	movlt	r5, r6
 8016044:	45f0      	cmp	r8, lr
 8016046:	bfd8      	it	le
 8016048:	4622      	movle	r2, r4
 801604a:	1bd2      	subs	r2, r2, r7
 801604c:	8082      	strh	r2, [r0, #4]
 801604e:	884a      	ldrh	r2, [r1, #2]
 8016050:	88c9      	ldrh	r1, [r1, #6]
 8016052:	8007      	strh	r7, [r0, #0]
 8016054:	440a      	add	r2, r1
 8016056:	b292      	uxth	r2, r2
 8016058:	b211      	sxth	r1, r2
 801605a:	458c      	cmp	ip, r1
 801605c:	bfa8      	it	ge
 801605e:	4613      	movge	r3, r2
 8016060:	1b5b      	subs	r3, r3, r5
 8016062:	80c3      	strh	r3, [r0, #6]
 8016064:	8045      	strh	r5, [r0, #2]
 8016066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801606a:	2300      	movs	r3, #0
 801606c:	8003      	strh	r3, [r0, #0]
 801606e:	8043      	strh	r3, [r0, #2]
 8016070:	8083      	strh	r3, [r0, #4]
 8016072:	80c3      	strh	r3, [r0, #6]
 8016074:	e7f7      	b.n	8016066 <_ZN8touchgfx4RectaNERKS0_+0x76>

08016076 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8016076:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801607a:	2b00      	cmp	r3, #0
 801607c:	dd06      	ble.n	801608c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801607e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8016082:	2800      	cmp	r0, #0
 8016084:	bfcc      	ite	gt
 8016086:	2000      	movgt	r0, #0
 8016088:	2001      	movle	r0, #1
 801608a:	4770      	bx	lr
 801608c:	2001      	movs	r0, #1
 801608e:	4770      	bx	lr

08016090 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8016090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016094:	2300      	movs	r3, #0
 8016096:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8016098:	8003      	strh	r3, [r0, #0]
 801609a:	4604      	mov	r4, r0
 801609c:	8043      	strh	r3, [r0, #2]
 801609e:	8083      	strh	r3, [r0, #4]
 80160a0:	80c3      	strh	r3, [r0, #6]
 80160a2:	2d00      	cmp	r5, #0
 80160a4:	d040      	beq.n	8016128 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80160a6:	1d28      	adds	r0, r5, #4
 80160a8:	f7ff ffe5 	bl	8016076 <_ZNK8touchgfx4Rect7isEmptyEv>
 80160ac:	b988      	cbnz	r0, 80160d2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80160ae:	4620      	mov	r0, r4
 80160b0:	f7ff ffe1 	bl	8016076 <_ZNK8touchgfx4Rect7isEmptyEv>
 80160b4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80160b8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80160bc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80160c0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80160c4:	b138      	cbz	r0, 80160d6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80160c6:	8022      	strh	r2, [r4, #0]
 80160c8:	8063      	strh	r3, [r4, #2]
 80160ca:	f8a4 e004 	strh.w	lr, [r4, #4]
 80160ce:	f8a4 c006 	strh.w	ip, [r4, #6]
 80160d2:	69ad      	ldr	r5, [r5, #24]
 80160d4:	e7e5      	b.n	80160a2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80160d6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80160da:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80160de:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80160e2:	4290      	cmp	r0, r2
 80160e4:	4607      	mov	r7, r0
 80160e6:	bfa8      	it	ge
 80160e8:	4617      	movge	r7, r2
 80160ea:	4472      	add	r2, lr
 80160ec:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80160f0:	8027      	strh	r7, [r4, #0]
 80160f2:	4299      	cmp	r1, r3
 80160f4:	460e      	mov	r6, r1
 80160f6:	4440      	add	r0, r8
 80160f8:	bfa8      	it	ge
 80160fa:	461e      	movge	r6, r3
 80160fc:	4471      	add	r1, lr
 80160fe:	4463      	add	r3, ip
 8016100:	b200      	sxth	r0, r0
 8016102:	b212      	sxth	r2, r2
 8016104:	b209      	sxth	r1, r1
 8016106:	b21b      	sxth	r3, r3
 8016108:	4290      	cmp	r0, r2
 801610a:	bfac      	ite	ge
 801610c:	ebc7 0200 	rsbge	r2, r7, r0
 8016110:	ebc7 0202 	rsblt	r2, r7, r2
 8016114:	4299      	cmp	r1, r3
 8016116:	bfac      	ite	ge
 8016118:	ebc6 0301 	rsbge	r3, r6, r1
 801611c:	ebc6 0303 	rsblt	r3, r6, r3
 8016120:	8066      	strh	r6, [r4, #2]
 8016122:	80a2      	strh	r2, [r4, #4]
 8016124:	80e3      	strh	r3, [r4, #6]
 8016126:	e7d4      	b.n	80160d2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016128:	4620      	mov	r0, r4
 801612a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801612e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801612e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016132:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016136:	b383      	cbz	r3, 801619a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016138:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801613a:	b374      	cbz	r4, 801619a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801613c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8016140:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8016144:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8016148:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801614c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016150:	b303      	cbz	r3, 8016194 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016152:	4668      	mov	r0, sp
 8016154:	1d21      	adds	r1, r4, #4
 8016156:	f8ad 5000 	strh.w	r5, [sp]
 801615a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801615e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016162:	f8ad 8006 	strh.w	r8, [sp, #6]
 8016166:	f7ff ff43 	bl	8015ff0 <_ZN8touchgfx4RectaNERKS0_>
 801616a:	4668      	mov	r0, sp
 801616c:	f7ff ff83 	bl	8016076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016170:	b980      	cbnz	r0, 8016194 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016172:	f8bd 3000 	ldrh.w	r3, [sp]
 8016176:	88a2      	ldrh	r2, [r4, #4]
 8016178:	1a9b      	subs	r3, r3, r2
 801617a:	f8ad 3000 	strh.w	r3, [sp]
 801617e:	88e2      	ldrh	r2, [r4, #6]
 8016180:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016184:	1a9b      	subs	r3, r3, r2
 8016186:	f8ad 3002 	strh.w	r3, [sp, #2]
 801618a:	6823      	ldr	r3, [r4, #0]
 801618c:	4669      	mov	r1, sp
 801618e:	689b      	ldr	r3, [r3, #8]
 8016190:	4620      	mov	r0, r4
 8016192:	4798      	blx	r3
 8016194:	69a4      	ldr	r4, [r4, #24]
 8016196:	2c00      	cmp	r4, #0
 8016198:	d1d8      	bne.n	801614c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801619a:	b002      	add	sp, #8
 801619c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080161a0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80161a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80161a2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80161a6:	460d      	mov	r5, r1
 80161a8:	4616      	mov	r6, r2
 80161aa:	b323      	cbz	r3, 80161f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80161ac:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80161ae:	b314      	cbz	r4, 80161f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80161b0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80161b4:	b1eb      	cbz	r3, 80161f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80161b6:	6828      	ldr	r0, [r5, #0]
 80161b8:	6869      	ldr	r1, [r5, #4]
 80161ba:	466b      	mov	r3, sp
 80161bc:	c303      	stmia	r3!, {r0, r1}
 80161be:	4668      	mov	r0, sp
 80161c0:	1d21      	adds	r1, r4, #4
 80161c2:	f7ff ff15 	bl	8015ff0 <_ZN8touchgfx4RectaNERKS0_>
 80161c6:	4668      	mov	r0, sp
 80161c8:	f7ff ff55 	bl	8016076 <_ZNK8touchgfx4Rect7isEmptyEv>
 80161cc:	b988      	cbnz	r0, 80161f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80161ce:	f8bd 3000 	ldrh.w	r3, [sp]
 80161d2:	88a2      	ldrh	r2, [r4, #4]
 80161d4:	1a9b      	subs	r3, r3, r2
 80161d6:	f8ad 3000 	strh.w	r3, [sp]
 80161da:	88e2      	ldrh	r2, [r4, #6]
 80161dc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80161e0:	1a9b      	subs	r3, r3, r2
 80161e2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80161e6:	6823      	ldr	r3, [r4, #0]
 80161e8:	4632      	mov	r2, r6
 80161ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80161ec:	4669      	mov	r1, sp
 80161ee:	4620      	mov	r0, r4
 80161f0:	4798      	blx	r3
 80161f2:	69a4      	ldr	r4, [r4, #24]
 80161f4:	e7db      	b.n	80161ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80161f6:	b002      	add	sp, #8
 80161f8:	bd70      	pop	{r4, r5, r6, pc}

080161fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80161fa:	b513      	push	{r0, r1, r4, lr}
 80161fc:	6803      	ldr	r3, [r0, #0]
 80161fe:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8016202:	2300      	movs	r3, #0
 8016204:	e9cd 3300 	strd	r3, r3, [sp]
 8016208:	466b      	mov	r3, sp
 801620a:	47a0      	blx	r4
 801620c:	b002      	add	sp, #8
 801620e:	bd10      	pop	{r4, pc}

08016210 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8016210:	2301      	movs	r3, #1
 8016212:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016216:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801621a:	4770      	bx	lr

0801621c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801621c:	2301      	movs	r3, #1
 801621e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016222:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016226:	4770      	bx	lr

08016228 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8016228:	6843      	ldr	r3, [r0, #4]
 801622a:	2201      	movs	r2, #1
 801622c:	725a      	strb	r2, [r3, #9]
 801622e:	6840      	ldr	r0, [r0, #4]
 8016230:	6803      	ldr	r3, [r0, #0]
 8016232:	691b      	ldr	r3, [r3, #16]
 8016234:	4718      	bx	r3

08016236 <_ZN8touchgfx3HAL8flushDMAEv>:
 8016236:	6840      	ldr	r0, [r0, #4]
 8016238:	6803      	ldr	r3, [r0, #0]
 801623a:	689b      	ldr	r3, [r3, #8]
 801623c:	4718      	bx	r3

0801623e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 801623e:	b530      	push	{r4, r5, lr}
 8016240:	b08b      	sub	sp, #44	; 0x2c
 8016242:	6804      	ldr	r4, [r0, #0]
 8016244:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8016248:	9508      	str	r5, [sp, #32]
 801624a:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801624e:	9507      	str	r5, [sp, #28]
 8016250:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8016254:	9506      	str	r5, [sp, #24]
 8016256:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801625a:	9505      	str	r5, [sp, #20]
 801625c:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8016260:	9504      	str	r5, [sp, #16]
 8016262:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8016266:	9503      	str	r5, [sp, #12]
 8016268:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801626c:	9502      	str	r5, [sp, #8]
 801626e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8016272:	e9cd 3500 	strd	r3, r5, [sp]
 8016276:	4613      	mov	r3, r2
 8016278:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801627a:	2200      	movs	r2, #0
 801627c:	47a0      	blx	r4
 801627e:	b00b      	add	sp, #44	; 0x2c
 8016280:	bd30      	pop	{r4, r5, pc}
	...

08016284 <_ZN8touchgfx3HAL10beginFrameEv>:
 8016284:	4b04      	ldr	r3, [pc, #16]	; (8016298 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8016286:	781b      	ldrb	r3, [r3, #0]
 8016288:	b123      	cbz	r3, 8016294 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801628a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801628e:	f080 0001 	eor.w	r0, r0, #1
 8016292:	4770      	bx	lr
 8016294:	2001      	movs	r0, #1
 8016296:	4770      	bx	lr
 8016298:	200067ce 	.word	0x200067ce

0801629c <_ZN8touchgfx3HAL8endFrameEv>:
 801629c:	b510      	push	{r4, lr}
 801629e:	4604      	mov	r4, r0
 80162a0:	6840      	ldr	r0, [r0, #4]
 80162a2:	6803      	ldr	r3, [r0, #0]
 80162a4:	689b      	ldr	r3, [r3, #8]
 80162a6:	4798      	blx	r3
 80162a8:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80162ac:	b113      	cbz	r3, 80162b4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80162ae:	2301      	movs	r3, #1
 80162b0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80162b4:	bd10      	pop	{r4, pc}

080162b6 <_ZN8touchgfx3HAL10initializeEv>:
 80162b6:	b510      	push	{r4, lr}
 80162b8:	4604      	mov	r4, r0
 80162ba:	f7fe f81d 	bl	80142f8 <_ZN8touchgfx10OSWrappers10initializeEv>
 80162be:	6860      	ldr	r0, [r4, #4]
 80162c0:	6803      	ldr	r3, [r0, #0]
 80162c2:	68db      	ldr	r3, [r3, #12]
 80162c4:	4798      	blx	r3
 80162c6:	68e0      	ldr	r0, [r4, #12]
 80162c8:	6803      	ldr	r3, [r0, #0]
 80162ca:	689b      	ldr	r3, [r3, #8]
 80162cc:	4798      	blx	r3
 80162ce:	6823      	ldr	r3, [r4, #0]
 80162d0:	4620      	mov	r0, r4
 80162d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162d8:	4718      	bx	r3

080162da <_ZN8touchgfx3HAL9taskEntryEv>:
 80162da:	b508      	push	{r3, lr}
 80162dc:	6803      	ldr	r3, [r0, #0]
 80162de:	4604      	mov	r4, r0
 80162e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80162e2:	4798      	blx	r3
 80162e4:	6823      	ldr	r3, [r4, #0]
 80162e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162e8:	4620      	mov	r0, r4
 80162ea:	4798      	blx	r3
 80162ec:	f7fe f87a 	bl	80143e4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80162f0:	6823      	ldr	r3, [r4, #0]
 80162f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80162f4:	e7f8      	b.n	80162e8 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080162f8 <_ZN8touchgfx3HAL4tickEv>:
 80162f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80162fa:	6803      	ldr	r3, [r0, #0]
 80162fc:	4d5c      	ldr	r5, [pc, #368]	; (8016470 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80162fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8016302:	4604      	mov	r4, r0
 8016304:	4798      	blx	r3
 8016306:	2800      	cmp	r0, #0
 8016308:	f000 8097 	beq.w	801643a <_ZN8touchgfx3HAL4tickEv+0x142>
 801630c:	2001      	movs	r0, #1
 801630e:	f7fd fdbf 	bl	8013e90 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8016312:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8016316:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801631a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801631e:	2600      	movs	r6, #0
 8016320:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8016324:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8016328:	b133      	cbz	r3, 8016338 <_ZN8touchgfx3HAL4tickEv+0x40>
 801632a:	6823      	ldr	r3, [r4, #0]
 801632c:	4620      	mov	r0, r4
 801632e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016332:	4798      	blx	r3
 8016334:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8016338:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801633c:	6862      	ldr	r2, [r4, #4]
 801633e:	f083 0301 	eor.w	r3, r3, #1
 8016342:	7253      	strb	r3, [r2, #9]
 8016344:	2601      	movs	r6, #1
 8016346:	702e      	strb	r6, [r5, #0]
 8016348:	f004 fbf0 	bl	801ab2c <_ZN8touchgfx11Application11getInstanceEv>
 801634c:	6803      	ldr	r3, [r0, #0]
 801634e:	4631      	mov	r1, r6
 8016350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016352:	4798      	blx	r3
 8016354:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016358:	b90b      	cbnz	r3, 801635e <_ZN8touchgfx3HAL4tickEv+0x66>
 801635a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801635e:	f004 fbe5 	bl	801ab2c <_ZN8touchgfx11Application11getInstanceEv>
 8016362:	6803      	ldr	r3, [r0, #0]
 8016364:	695b      	ldr	r3, [r3, #20]
 8016366:	4798      	blx	r3
 8016368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801636a:	6803      	ldr	r3, [r0, #0]
 801636c:	691b      	ldr	r3, [r3, #16]
 801636e:	4798      	blx	r3
 8016370:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016374:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8016378:	3b01      	subs	r3, #1
 801637a:	b2db      	uxtb	r3, r3
 801637c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016380:	b10a      	cbz	r2, 8016386 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8016382:	2b00      	cmp	r3, #0
 8016384:	d1eb      	bne.n	801635e <_ZN8touchgfx3HAL4tickEv+0x66>
 8016386:	4a3b      	ldr	r2, [pc, #236]	; (8016474 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8016388:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801638c:	7813      	ldrb	r3, [r2, #0]
 801638e:	3301      	adds	r3, #1
 8016390:	b25b      	sxtb	r3, r3
 8016392:	4299      	cmp	r1, r3
 8016394:	7013      	strb	r3, [r2, #0]
 8016396:	dc10      	bgt.n	80163ba <_ZN8touchgfx3HAL4tickEv+0xc2>
 8016398:	68e0      	ldr	r0, [r4, #12]
 801639a:	2300      	movs	r3, #0
 801639c:	7013      	strb	r3, [r2, #0]
 801639e:	6803      	ldr	r3, [r0, #0]
 80163a0:	aa03      	add	r2, sp, #12
 80163a2:	68db      	ldr	r3, [r3, #12]
 80163a4:	a902      	add	r1, sp, #8
 80163a6:	4798      	blx	r3
 80163a8:	6823      	ldr	r3, [r4, #0]
 80163aa:	2800      	cmp	r0, #0
 80163ac:	d051      	beq.n	8016452 <_ZN8touchgfx3HAL4tickEv+0x15a>
 80163ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80163b2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80163b6:	4620      	mov	r0, r4
 80163b8:	4798      	blx	r3
 80163ba:	6960      	ldr	r0, [r4, #20]
 80163bc:	2300      	movs	r3, #0
 80163be:	f88d 3007 	strb.w	r3, [sp, #7]
 80163c2:	b158      	cbz	r0, 80163dc <_ZN8touchgfx3HAL4tickEv+0xe4>
 80163c4:	6803      	ldr	r3, [r0, #0]
 80163c6:	f10d 0107 	add.w	r1, sp, #7
 80163ca:	68db      	ldr	r3, [r3, #12]
 80163cc:	4798      	blx	r3
 80163ce:	b128      	cbz	r0, 80163dc <_ZN8touchgfx3HAL4tickEv+0xe4>
 80163d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80163d2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80163d6:	6803      	ldr	r3, [r0, #0]
 80163d8:	68db      	ldr	r3, [r3, #12]
 80163da:	4798      	blx	r3
 80163dc:	f104 001c 	add.w	r0, r4, #28
 80163e0:	f013 fde4 	bl	8029fac <_ZN8touchgfx8Gestures4tickEv>
 80163e4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80163e8:	b30b      	cbz	r3, 801642e <_ZN8touchgfx3HAL4tickEv+0x136>
 80163ea:	6920      	ldr	r0, [r4, #16]
 80163ec:	6803      	ldr	r3, [r0, #0]
 80163ee:	691b      	ldr	r3, [r3, #16]
 80163f0:	4798      	blx	r3
 80163f2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80163f4:	4606      	mov	r6, r0
 80163f6:	b903      	cbnz	r3, 80163fa <_ZN8touchgfx3HAL4tickEv+0x102>
 80163f8:	6720      	str	r0, [r4, #112]	; 0x70
 80163fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80163fc:	4a1e      	ldr	r2, [pc, #120]	; (8016478 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80163fe:	1af3      	subs	r3, r6, r3
 8016400:	4293      	cmp	r3, r2
 8016402:	d914      	bls.n	801642e <_ZN8touchgfx3HAL4tickEv+0x136>
 8016404:	6920      	ldr	r0, [r4, #16]
 8016406:	6803      	ldr	r3, [r0, #0]
 8016408:	699b      	ldr	r3, [r3, #24]
 801640a:	4798      	blx	r3
 801640c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801640e:	2264      	movs	r2, #100	; 0x64
 8016410:	1af3      	subs	r3, r6, r3
 8016412:	fbb3 f3f2 	udiv	r3, r3, r2
 8016416:	fbb0 f0f3 	udiv	r0, r0, r3
 801641a:	2800      	cmp	r0, #0
 801641c:	dc1e      	bgt.n	801645c <_ZN8touchgfx3HAL4tickEv+0x164>
 801641e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8016422:	6920      	ldr	r0, [r4, #16]
 8016424:	6803      	ldr	r3, [r0, #0]
 8016426:	2100      	movs	r1, #0
 8016428:	69db      	ldr	r3, [r3, #28]
 801642a:	4798      	blx	r3
 801642c:	6726      	str	r6, [r4, #112]	; 0x70
 801642e:	f004 fb7d 	bl	801ab2c <_ZN8touchgfx11Application11getInstanceEv>
 8016432:	6803      	ldr	r3, [r0, #0]
 8016434:	2100      	movs	r1, #0
 8016436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016438:	4798      	blx	r3
 801643a:	6823      	ldr	r3, [r4, #0]
 801643c:	4620      	mov	r0, r4
 801643e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016442:	4798      	blx	r3
 8016444:	2001      	movs	r0, #1
 8016446:	f7fd fd2e 	bl	8013ea6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801644a:	2300      	movs	r3, #0
 801644c:	702b      	strb	r3, [r5, #0]
 801644e:	b004      	add	sp, #16
 8016450:	bd70      	pop	{r4, r5, r6, pc}
 8016452:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016456:	4620      	mov	r0, r4
 8016458:	4798      	blx	r3
 801645a:	e7ae      	b.n	80163ba <_ZN8touchgfx3HAL4tickEv+0xc2>
 801645c:	2863      	cmp	r0, #99	; 0x63
 801645e:	bfcb      	itete	gt
 8016460:	2300      	movgt	r3, #0
 8016462:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8016466:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801646a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801646e:	e7d8      	b.n	8016422 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8016470:	200067d4 	.word	0x200067d4
 8016474:	200067d5 	.word	0x200067d5
 8016478:	05f5e100 	.word	0x05f5e100

0801647c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801647c:	f7fd bf7e 	b.w	801437c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016480 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8016480:	6581      	str	r1, [r0, #88]	; 0x58
 8016482:	301c      	adds	r0, #28
 8016484:	f013 bd90 	b.w	8029fa8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08016488 <_ZN8touchgfx3HAL5touchEll>:
 8016488:	b530      	push	{r4, r5, lr}
 801648a:	b087      	sub	sp, #28
 801648c:	4604      	mov	r4, r0
 801648e:	a804      	add	r0, sp, #16
 8016490:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016494:	f004 f91a 	bl	801a6cc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8016498:	9b04      	ldr	r3, [sp, #16]
 801649a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801649e:	a906      	add	r1, sp, #24
 80164a0:	9b05      	ldr	r3, [sp, #20]
 80164a2:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80164a6:	a803      	add	r0, sp, #12
 80164a8:	f004 f94e 	bl	801a748 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80164ac:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80164b0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80164b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80164b8:	f104 001c 	add.w	r0, r4, #28
 80164bc:	b189      	cbz	r1, 80164e2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80164be:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80164c2:	9300      	str	r3, [sp, #0]
 80164c4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80164c8:	4613      	mov	r3, r2
 80164ca:	462a      	mov	r2, r5
 80164cc:	f013 fd7c 	bl	8029fc8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80164d0:	b128      	cbz	r0, 80164de <_ZN8touchgfx3HAL5touchEll+0x56>
 80164d2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80164d6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80164d8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80164dc:	6623      	str	r3, [r4, #96]	; 0x60
 80164de:	b007      	add	sp, #28
 80164e0:	bd30      	pop	{r4, r5, pc}
 80164e2:	f013 fdb5 	bl	802a050 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80164e6:	2301      	movs	r3, #1
 80164e8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80164ec:	e7f1      	b.n	80164d2 <_ZN8touchgfx3HAL5touchEll+0x4a>

080164ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80164ee:	b570      	push	{r4, r5, r6, lr}
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d050      	beq.n	8016596 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80164f4:	ea81 0002 	eor.w	r0, r1, r2
 80164f8:	07c6      	lsls	r6, r0, #31
 80164fa:	d508      	bpl.n	801650e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80164fc:	3a01      	subs	r2, #1
 80164fe:	18cc      	adds	r4, r1, r3
 8016500:	42a1      	cmp	r1, r4
 8016502:	d048      	beq.n	8016596 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016504:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016508:	f801 0b01 	strb.w	r0, [r1], #1
 801650c:	e7f8      	b.n	8016500 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801650e:	07d5      	lsls	r5, r2, #31
 8016510:	bf42      	ittt	mi
 8016512:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8016516:	f801 0b01 	strbmi.w	r0, [r1], #1
 801651a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801651e:	2b01      	cmp	r3, #1
 8016520:	d915      	bls.n	801654e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016522:	ea82 0001 	eor.w	r0, r2, r1
 8016526:	0784      	lsls	r4, r0, #30
 8016528:	d02d      	beq.n	8016586 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801652a:	1e94      	subs	r4, r2, #2
 801652c:	4608      	mov	r0, r1
 801652e:	18ce      	adds	r6, r1, r3
 8016530:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8016534:	f820 5b02 	strh.w	r5, [r0], #2
 8016538:	1a35      	subs	r5, r6, r0
 801653a:	2d01      	cmp	r5, #1
 801653c:	d8f8      	bhi.n	8016530 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 801653e:	1e98      	subs	r0, r3, #2
 8016540:	f020 0001 	bic.w	r0, r0, #1
 8016544:	3002      	adds	r0, #2
 8016546:	4401      	add	r1, r0
 8016548:	4402      	add	r2, r0
 801654a:	f003 0301 	and.w	r3, r3, #1
 801654e:	1f14      	subs	r4, r2, #4
 8016550:	4608      	mov	r0, r1
 8016552:	18ce      	adds	r6, r1, r3
 8016554:	1a35      	subs	r5, r6, r0
 8016556:	2d03      	cmp	r5, #3
 8016558:	d810      	bhi.n	801657c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801655a:	089c      	lsrs	r4, r3, #2
 801655c:	00a0      	lsls	r0, r4, #2
 801655e:	4401      	add	r1, r0
 8016560:	3801      	subs	r0, #1
 8016562:	4402      	add	r2, r0
 8016564:	f06f 0003 	mvn.w	r0, #3
 8016568:	fb00 3404 	mla	r4, r0, r4, r3
 801656c:	440c      	add	r4, r1
 801656e:	42a1      	cmp	r1, r4
 8016570:	d011      	beq.n	8016596 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016572:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8016576:	f801 3b01 	strb.w	r3, [r1], #1
 801657a:	e7f8      	b.n	801656e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 801657c:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8016580:	f840 5b04 	str.w	r5, [r0], #4
 8016584:	e7e6      	b.n	8016554 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8016586:	0790      	lsls	r0, r2, #30
 8016588:	d0e1      	beq.n	801654e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801658a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801658e:	f821 0b02 	strh.w	r0, [r1], #2
 8016592:	3b02      	subs	r3, #2
 8016594:	e7db      	b.n	801654e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016596:	2001      	movs	r0, #1
 8016598:	bd70      	pop	{r4, r5, r6, pc}

0801659a <_ZN8touchgfx3HAL7noTouchEv>:
 801659a:	b510      	push	{r4, lr}
 801659c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80165a0:	4604      	mov	r4, r0
 80165a2:	b153      	cbz	r3, 80165ba <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80165a4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80165a8:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80165ac:	2101      	movs	r1, #1
 80165ae:	301c      	adds	r0, #28
 80165b0:	f013 fd4e 	bl	802a050 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80165b4:	2300      	movs	r3, #0
 80165b6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80165ba:	bd10      	pop	{r4, pc}

080165bc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80165bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80165c0:	4604      	mov	r4, r0
 80165c2:	6980      	ldr	r0, [r0, #24]
 80165c4:	b085      	sub	sp, #20
 80165c6:	460f      	mov	r7, r1
 80165c8:	4690      	mov	r8, r2
 80165ca:	4699      	mov	r9, r3
 80165cc:	b930      	cbnz	r0, 80165dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80165ce:	4b1c      	ldr	r3, [pc, #112]	; (8016640 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 80165d0:	4a1c      	ldr	r2, [pc, #112]	; (8016644 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80165d2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80165d6:	481c      	ldr	r0, [pc, #112]	; (8016648 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 80165d8:	f016 f886 	bl	802c6e8 <__assert_func>
 80165dc:	ad04      	add	r5, sp, #16
 80165de:	2600      	movs	r6, #0
 80165e0:	f845 6d04 	str.w	r6, [r5, #-4]!
 80165e4:	6806      	ldr	r6, [r0, #0]
 80165e6:	9501      	str	r5, [sp, #4]
 80165e8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80165ec:	9500      	str	r5, [sp, #0]
 80165ee:	6835      	ldr	r5, [r6, #0]
 80165f0:	47a8      	blx	r5
 80165f2:	4d16      	ldr	r5, [pc, #88]	; (801664c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80165f4:	4606      	mov	r6, r0
 80165f6:	f8a5 9000 	strh.w	r9, [r5]
 80165fa:	f7f8 fcbb 	bl	800ef74 <_ZN8touchgfx3HAL3lcdEv>
 80165fe:	6803      	ldr	r3, [r0, #0]
 8016600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016602:	4798      	blx	r3
 8016604:	2801      	cmp	r0, #1
 8016606:	d012      	beq.n	801662e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8016608:	d306      	bcc.n	8016618 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 801660a:	280d      	cmp	r0, #13
 801660c:	d80b      	bhi.n	8016626 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 801660e:	4b10      	ldr	r3, [pc, #64]	; (8016650 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8016610:	4a0c      	ldr	r2, [pc, #48]	; (8016644 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8016612:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8016616:	e7de      	b.n	80165d6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8016618:	882b      	ldrh	r3, [r5, #0]
 801661a:	fb08 7203 	mla	r2, r8, r3, r7
 801661e:	9b03      	ldr	r3, [sp, #12]
 8016620:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8016624:	63e3      	str	r3, [r4, #60]	; 0x3c
 8016626:	4630      	mov	r0, r6
 8016628:	b005      	add	sp, #20
 801662a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801662e:	882a      	ldrh	r2, [r5, #0]
 8016630:	9b03      	ldr	r3, [sp, #12]
 8016632:	fb08 7202 	mla	r2, r8, r2, r7
 8016636:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801663a:	1a9a      	subs	r2, r3, r2
 801663c:	63e2      	str	r2, [r4, #60]	; 0x3c
 801663e:	e7f2      	b.n	8016626 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8016640:	0802fe74 	.word	0x0802fe74
 8016644:	080301f9 	.word	0x080301f9
 8016648:	0802feb9 	.word	0x0802feb9
 801664c:	200067ca 	.word	0x200067ca
 8016650:	0802fedf 	.word	0x0802fedf

08016654 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8016654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016656:	b08b      	sub	sp, #44	; 0x2c
 8016658:	4617      	mov	r7, r2
 801665a:	4604      	mov	r4, r0
 801665c:	460e      	mov	r6, r1
 801665e:	461d      	mov	r5, r3
 8016660:	f7f8 fc88 	bl	800ef74 <_ZN8touchgfx3HAL3lcdEv>
 8016664:	6803      	ldr	r3, [r0, #0]
 8016666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016668:	4798      	blx	r3
 801666a:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801666e:	4b0e      	ldr	r3, [pc, #56]	; (80166a8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x54>)
 8016670:	6822      	ldr	r2, [r4, #0]
 8016672:	881b      	ldrh	r3, [r3, #0]
 8016674:	9306      	str	r3, [sp, #24]
 8016676:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801667a:	9305      	str	r3, [sp, #20]
 801667c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016680:	9304      	str	r3, [sp, #16]
 8016682:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016686:	9303      	str	r3, [sp, #12]
 8016688:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801668c:	9302      	str	r3, [sp, #8]
 801668e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016692:	e9cd 5300 	strd	r5, r3, [sp]
 8016696:	4631      	mov	r1, r6
 8016698:	6b95      	ldr	r5, [r2, #56]	; 0x38
 801669a:	463b      	mov	r3, r7
 801669c:	2200      	movs	r2, #0
 801669e:	4620      	mov	r0, r4
 80166a0:	47a8      	blx	r5
 80166a2:	b00b      	add	sp, #44	; 0x2c
 80166a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166a6:	bf00      	nop
 80166a8:	200067ca 	.word	0x200067ca

080166ac <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 80166ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166b0:	4698      	mov	r8, r3
 80166b2:	6803      	ldr	r3, [r0, #0]
 80166b4:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80166b6:	4b13      	ldr	r3, [pc, #76]	; (8016704 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80166b8:	b08b      	sub	sp, #44	; 0x2c
 80166ba:	4617      	mov	r7, r2
 80166bc:	f8b3 9000 	ldrh.w	r9, [r3]
 80166c0:	460e      	mov	r6, r1
 80166c2:	4604      	mov	r4, r0
 80166c4:	f7f8 fc56 	bl	800ef74 <_ZN8touchgfx3HAL3lcdEv>
 80166c8:	6803      	ldr	r3, [r0, #0]
 80166ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166cc:	4798      	blx	r3
 80166ce:	2302      	movs	r3, #2
 80166d0:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80166d4:	2301      	movs	r3, #1
 80166d6:	9305      	str	r3, [sp, #20]
 80166d8:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80166dc:	9304      	str	r3, [sp, #16]
 80166de:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80166e2:	9303      	str	r3, [sp, #12]
 80166e4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80166e8:	9302      	str	r3, [sp, #8]
 80166ea:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80166ee:	9008      	str	r0, [sp, #32]
 80166f0:	e9cd 8300 	strd	r8, r3, [sp]
 80166f4:	2200      	movs	r2, #0
 80166f6:	463b      	mov	r3, r7
 80166f8:	4631      	mov	r1, r6
 80166fa:	4620      	mov	r0, r4
 80166fc:	47a8      	blx	r5
 80166fe:	b00b      	add	sp, #44	; 0x2c
 8016700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016704:	200067ca 	.word	0x200067ca

08016708 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8016708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801670c:	4698      	mov	r8, r3
 801670e:	6803      	ldr	r3, [r0, #0]
 8016710:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8016712:	4b0f      	ldr	r3, [pc, #60]	; (8016750 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8016714:	b087      	sub	sp, #28
 8016716:	f8b3 9000 	ldrh.w	r9, [r3]
 801671a:	460e      	mov	r6, r1
 801671c:	4617      	mov	r7, r2
 801671e:	4604      	mov	r4, r0
 8016720:	f7f8 fc28 	bl	800ef74 <_ZN8touchgfx3HAL3lcdEv>
 8016724:	6803      	ldr	r3, [r0, #0]
 8016726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016728:	4798      	blx	r3
 801672a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801672e:	9302      	str	r3, [sp, #8]
 8016730:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016734:	9301      	str	r3, [sp, #4]
 8016736:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801673a:	9300      	str	r3, [sp, #0]
 801673c:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8016740:	4643      	mov	r3, r8
 8016742:	463a      	mov	r2, r7
 8016744:	4631      	mov	r1, r6
 8016746:	4620      	mov	r0, r4
 8016748:	47a8      	blx	r5
 801674a:	b007      	add	sp, #28
 801674c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016750:	200067ca 	.word	0x200067ca

08016754 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016758:	4604      	mov	r4, r0
 801675a:	b08f      	sub	sp, #60	; 0x3c
 801675c:	4610      	mov	r0, r2
 801675e:	460d      	mov	r5, r1
 8016760:	4691      	mov	r9, r2
 8016762:	461e      	mov	r6, r3
 8016764:	f007 fd8c 	bl	801e280 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016768:	2800      	cmp	r0, #0
 801676a:	f000 80b3 	beq.w	80168d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x180>
 801676e:	6823      	ldr	r3, [r4, #0]
 8016770:	f8df b190 	ldr.w	fp, [pc, #400]	; 8016904 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>
 8016774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016776:	f8df a190 	ldr.w	sl, [pc, #400]	; 8016908 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 801677a:	4f5f      	ldr	r7, [pc, #380]	; (80168f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 801677c:	4620      	mov	r0, r4
 801677e:	4798      	blx	r3
 8016780:	6823      	ldr	r3, [r4, #0]
 8016782:	4620      	mov	r0, r4
 8016784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016786:	4798      	blx	r3
 8016788:	f8bb 3000 	ldrh.w	r3, [fp]
 801678c:	9300      	str	r3, [sp, #0]
 801678e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8016792:	f8ba 3000 	ldrh.w	r3, [sl]
 8016796:	9301      	str	r3, [sp, #4]
 8016798:	883b      	ldrh	r3, [r7, #0]
 801679a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801679e:	9302      	str	r3, [sp, #8]
 80167a0:	4b56      	ldr	r3, [pc, #344]	; (80168fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80167a2:	9304      	str	r3, [sp, #16]
 80167a4:	881a      	ldrh	r2, [r3, #0]
 80167a6:	9203      	str	r2, [sp, #12]
 80167a8:	4640      	mov	r0, r8
 80167aa:	f007 fe23 	bl	801e3f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80167ae:	8038      	strh	r0, [r7, #0]
 80167b0:	4640      	mov	r0, r8
 80167b2:	f007 fe59 	bl	801e468 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80167b6:	9b04      	ldr	r3, [sp, #16]
 80167b8:	8018      	strh	r0, [r3, #0]
 80167ba:	4b51      	ldr	r3, [pc, #324]	; (8016900 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80167bc:	781b      	ldrb	r3, [r3, #0]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	f040 808b 	bne.w	80168da <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x186>
 80167c4:	883b      	ldrh	r3, [r7, #0]
 80167c6:	f8ab 3000 	strh.w	r3, [fp]
 80167ca:	f8aa 0000 	strh.w	r0, [sl]
 80167ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80167d0:	9304      	str	r3, [sp, #16]
 80167d2:	4648      	mov	r0, r9
 80167d4:	6c27      	ldr	r7, [r4, #64]	; 0x40
 80167d6:	f007 fd53 	bl	801e280 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80167da:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80167de:	2200      	movs	r2, #0
 80167e0:	4611      	mov	r1, r2
 80167e2:	4628      	mov	r0, r5
 80167e4:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80167e8:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80167ec:	f7f8 ff8e 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
 80167f0:	2301      	movs	r3, #1
 80167f2:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80167f6:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80167fa:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	dd71      	ble.n	80168e6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 8016802:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016806:	2b00      	cmp	r3, #0
 8016808:	dd6d      	ble.n	80168e6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 801680a:	462a      	mov	r2, r5
 801680c:	ab0a      	add	r3, sp, #40	; 0x28
 801680e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016812:	6851      	ldr	r1, [r2, #4]
 8016814:	c303      	stmia	r3!, {r0, r1}
 8016816:	4631      	mov	r1, r6
 8016818:	a80a      	add	r0, sp, #40	; 0x28
 801681a:	f7ff fbe9 	bl	8015ff0 <_ZN8touchgfx4RectaNERKS0_>
 801681e:	4b36      	ldr	r3, [pc, #216]	; (80168f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8016820:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016824:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8016828:	4b34      	ldr	r3, [pc, #208]	; (80168fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 801682a:	aa0a      	add	r2, sp, #40	; 0x28
 801682c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016834:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8016838:	ab08      	add	r3, sp, #32
 801683a:	e883 0003 	stmia.w	r3, {r0, r1}
 801683e:	2600      	movs	r6, #0
 8016840:	4618      	mov	r0, r3
 8016842:	a90c      	add	r1, sp, #48	; 0x30
 8016844:	960c      	str	r6, [sp, #48]	; 0x30
 8016846:	f7ff fbd3 	bl	8015ff0 <_ZN8touchgfx4RectaNERKS0_>
 801684a:	a807      	add	r0, sp, #28
 801684c:	f007 ff64 	bl	801e718 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016850:	4680      	mov	r8, r0
 8016852:	f7f8 fb8f 	bl	800ef74 <_ZN8touchgfx3HAL3lcdEv>
 8016856:	6802      	ldr	r2, [r0, #0]
 8016858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801685a:	4790      	blx	r2
 801685c:	4580      	cmp	r8, r0
 801685e:	d049      	beq.n	80168f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a0>
 8016860:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8016862:	b150      	cbz	r0, 801687a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 8016864:	a807      	add	r0, sp, #28
 8016866:	f007 ff57 	bl	801e718 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801686a:	4606      	mov	r6, r0
 801686c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801686e:	6803      	ldr	r3, [r0, #0]
 8016870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016872:	4798      	blx	r3
 8016874:	1a33      	subs	r3, r6, r0
 8016876:	4258      	negs	r0, r3
 8016878:	4158      	adcs	r0, r3
 801687a:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801687e:	2600      	movs	r6, #0
 8016880:	682a      	ldr	r2, [r5, #0]
 8016882:	696b      	ldr	r3, [r5, #20]
 8016884:	616e      	str	r6, [r5, #20]
 8016886:	9305      	str	r3, [sp, #20]
 8016888:	6892      	ldr	r2, [r2, #8]
 801688a:	a908      	add	r1, sp, #32
 801688c:	4628      	mov	r0, r5
 801688e:	4790      	blx	r2
 8016890:	9b05      	ldr	r3, [sp, #20]
 8016892:	616b      	str	r3, [r5, #20]
 8016894:	4652      	mov	r2, sl
 8016896:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801689a:	4649      	mov	r1, r9
 801689c:	4628      	mov	r0, r5
 801689e:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80168a2:	f7f8 ff33 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
 80168a6:	9b04      	ldr	r3, [sp, #16]
 80168a8:	9a00      	ldr	r2, [sp, #0]
 80168aa:	e9c4 370f 	strd	r3, r7, [r4, #60]	; 0x3c
 80168ae:	4b15      	ldr	r3, [pc, #84]	; (8016904 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80168b0:	801a      	strh	r2, [r3, #0]
 80168b2:	4b15      	ldr	r3, [pc, #84]	; (8016908 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80168b4:	9a01      	ldr	r2, [sp, #4]
 80168b6:	801a      	strh	r2, [r3, #0]
 80168b8:	4b0f      	ldr	r3, [pc, #60]	; (80168f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 80168ba:	9a02      	ldr	r2, [sp, #8]
 80168bc:	801a      	strh	r2, [r3, #0]
 80168be:	4b0f      	ldr	r3, [pc, #60]	; (80168fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80168c0:	9a03      	ldr	r2, [sp, #12]
 80168c2:	801a      	strh	r2, [r3, #0]
 80168c4:	6823      	ldr	r3, [r4, #0]
 80168c6:	4620      	mov	r0, r4
 80168c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168ca:	4798      	blx	r3
 80168cc:	6823      	ldr	r3, [r4, #0]
 80168ce:	4620      	mov	r0, r4
 80168d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168d2:	4798      	blx	r3
 80168d4:	b00f      	add	sp, #60	; 0x3c
 80168d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168da:	883b      	ldrh	r3, [r7, #0]
 80168dc:	f8ab 0000 	strh.w	r0, [fp]
 80168e0:	f8aa 3000 	strh.w	r3, [sl]
 80168e4:	e773      	b.n	80167ce <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80168e6:	462a      	mov	r2, r5
 80168e8:	ab0a      	add	r3, sp, #40	; 0x28
 80168ea:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80168ee:	6851      	ldr	r1, [r2, #4]
 80168f0:	c303      	stmia	r3!, {r0, r1}
 80168f2:	e794      	b.n	801681e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xca>
 80168f4:	4630      	mov	r0, r6
 80168f6:	e7c0      	b.n	801687a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 80168f8:	200067c4 	.word	0x200067c4
 80168fc:	200067c6 	.word	0x200067c6
 8016900:	200067c8 	.word	0x200067c8
 8016904:	200067ca 	.word	0x200067ca
 8016908:	200067cc 	.word	0x200067cc

0801690c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801690c:	b510      	push	{r4, lr}
 801690e:	4b07      	ldr	r3, [pc, #28]	; (801692c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8016910:	781b      	ldrb	r3, [r3, #0]
 8016912:	4604      	mov	r4, r0
 8016914:	b13b      	cbz	r3, 8016926 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016916:	6803      	ldr	r3, [r0, #0]
 8016918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801691a:	4798      	blx	r3
 801691c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801691e:	4283      	cmp	r3, r0
 8016920:	d101      	bne.n	8016926 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016922:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016924:	bd10      	pop	{r4, pc}
 8016926:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8016928:	e7fc      	b.n	8016924 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801692a:	bf00      	nop
 801692c:	200067ce 	.word	0x200067ce

08016930 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8016930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016934:	b088      	sub	sp, #32
 8016936:	461c      	mov	r4, r3
 8016938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801693c:	2500      	movs	r5, #0
 801693e:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8016942:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8016946:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 801694a:	9503      	str	r5, [sp, #12]
 801694c:	e9cd 3100 	strd	r3, r1, [sp]
 8016950:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016954:	f8ad 8014 	strh.w	r8, [sp, #20]
 8016958:	4692      	mov	sl, r2
 801695a:	4606      	mov	r6, r0
 801695c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8016960:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016964:	f88d 501c 	strb.w	r5, [sp, #28]
 8016968:	f7ff ffd0 	bl	801690c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801696c:	fb09 a404 	mla	r4, r9, r4, sl
 8016970:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8016974:	9404      	str	r4, [sp, #16]
 8016976:	f8ad 901a 	strh.w	r9, [sp, #26]
 801697a:	f88d 501e 	strb.w	r5, [sp, #30]
 801697e:	f88d 501d 	strb.w	r5, [sp, #29]
 8016982:	f1b8 0f00 	cmp.w	r8, #0
 8016986:	d000      	beq.n	801698a <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5a>
 8016988:	b937      	cbnz	r7, 8016998 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x68>
 801698a:	4b0d      	ldr	r3, [pc, #52]	; (80169c0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x90>)
 801698c:	4a0d      	ldr	r2, [pc, #52]	; (80169c4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 801698e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8016992:	480d      	ldr	r0, [pc, #52]	; (80169c8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8016994:	f015 fea8 	bl	802c6e8 <__assert_func>
 8016998:	6833      	ldr	r3, [r6, #0]
 801699a:	9c00      	ldr	r4, [sp, #0]
 801699c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801699e:	4630      	mov	r0, r6
 80169a0:	4798      	blx	r3
 80169a2:	4220      	tst	r0, r4
 80169a4:	d104      	bne.n	80169b0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x80>
 80169a6:	4b09      	ldr	r3, [pc, #36]	; (80169cc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 80169a8:	4a06      	ldr	r2, [pc, #24]	; (80169c4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 80169aa:	f240 2105 	movw	r1, #517	; 0x205
 80169ae:	e7f0      	b.n	8016992 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 80169b0:	6870      	ldr	r0, [r6, #4]
 80169b2:	6803      	ldr	r3, [r0, #0]
 80169b4:	4669      	mov	r1, sp
 80169b6:	685b      	ldr	r3, [r3, #4]
 80169b8:	4798      	blx	r3
 80169ba:	b008      	add	sp, #32
 80169bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169c0:	0802fd07 	.word	0x0802fd07
 80169c4:	08030034 	.word	0x08030034
 80169c8:	0802feb9 	.word	0x0802feb9
 80169cc:	0802fd3f 	.word	0x0802fd3f

080169d0 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80169d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169d4:	b089      	sub	sp, #36	; 0x24
 80169d6:	2400      	movs	r4, #0
 80169d8:	461d      	mov	r5, r3
 80169da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80169de:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 80169e2:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 80169e6:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 80169ea:	9403      	str	r4, [sp, #12]
 80169ec:	468a      	mov	sl, r1
 80169ee:	4693      	mov	fp, r2
 80169f0:	4606      	mov	r6, r0
 80169f2:	e9cd 3400 	strd	r3, r4, [sp]
 80169f6:	f7ff ff89 	bl	801690c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80169fa:	fb09 b505 	mla	r5, r9, r5, fp
 80169fe:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8016a02:	9504      	str	r5, [sp, #16]
 8016a04:	f8ad 8014 	strh.w	r8, [sp, #20]
 8016a08:	f8ad 7016 	strh.w	r7, [sp, #22]
 8016a0c:	f8ad 4018 	strh.w	r4, [sp, #24]
 8016a10:	f8ad 901a 	strh.w	r9, [sp, #26]
 8016a14:	f8cd a00c 	str.w	sl, [sp, #12]
 8016a18:	f8ad 401c 	strh.w	r4, [sp, #28]
 8016a1c:	f88d 401e 	strb.w	r4, [sp, #30]
 8016a20:	f1b8 0f00 	cmp.w	r8, #0
 8016a24:	d000      	beq.n	8016a28 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x58>
 8016a26:	b937      	cbnz	r7, 8016a36 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x66>
 8016a28:	4b0d      	ldr	r3, [pc, #52]	; (8016a60 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x90>)
 8016a2a:	4a0e      	ldr	r2, [pc, #56]	; (8016a64 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8016a2c:	f240 2119 	movw	r1, #537	; 0x219
 8016a30:	480d      	ldr	r0, [pc, #52]	; (8016a68 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8016a32:	f015 fe59 	bl	802c6e8 <__assert_func>
 8016a36:	6833      	ldr	r3, [r6, #0]
 8016a38:	9c00      	ldr	r4, [sp, #0]
 8016a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a3c:	4630      	mov	r0, r6
 8016a3e:	4798      	blx	r3
 8016a40:	4220      	tst	r0, r4
 8016a42:	d104      	bne.n	8016a4e <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x7e>
 8016a44:	4b09      	ldr	r3, [pc, #36]	; (8016a6c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8016a46:	4a07      	ldr	r2, [pc, #28]	; (8016a64 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8016a48:	f240 211a 	movw	r1, #538	; 0x21a
 8016a4c:	e7f0      	b.n	8016a30 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 8016a4e:	6870      	ldr	r0, [r6, #4]
 8016a50:	6803      	ldr	r3, [r0, #0]
 8016a52:	4669      	mov	r1, sp
 8016a54:	685b      	ldr	r3, [r3, #4]
 8016a56:	4798      	blx	r3
 8016a58:	b009      	add	sp, #36	; 0x24
 8016a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a5e:	bf00      	nop
 8016a60:	0802fd84 	.word	0x0802fd84
 8016a64:	080300aa 	.word	0x080300aa
 8016a68:	0802feb9 	.word	0x0802feb9
 8016a6c:	0802fdbc 	.word	0x0802fdbc

08016a70 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8016a70:	b510      	push	{r4, lr}
 8016a72:	4b0b      	ldr	r3, [pc, #44]	; (8016aa0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8016a74:	781b      	ldrb	r3, [r3, #0]
 8016a76:	4604      	mov	r4, r0
 8016a78:	b95b      	cbnz	r3, 8016a92 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016a7a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8016a7e:	2b02      	cmp	r3, #2
 8016a80:	d007      	beq.n	8016a92 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016a82:	6840      	ldr	r0, [r0, #4]
 8016a84:	f000 fb50 	bl	8017128 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016a88:	b118      	cbz	r0, 8016a92 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016a8a:	6862      	ldr	r2, [r4, #4]
 8016a8c:	7a53      	ldrb	r3, [r2, #9]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d0fc      	beq.n	8016a8c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016a92:	f7fd fc65 	bl	8014360 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016a96:	4620      	mov	r0, r4
 8016a98:	f7ff ff38 	bl	801690c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016a9c:	bd10      	pop	{r4, pc}
 8016a9e:	bf00      	nop
 8016aa0:	200067ce 	.word	0x200067ce

08016aa4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8016aa4:	b508      	push	{r3, lr}
 8016aa6:	290d      	cmp	r1, #13
 8016aa8:	d817      	bhi.n	8016ada <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8016aaa:	e8df f001 	tbb	[pc, r1]
 8016aae:	090b      	.short	0x090b
 8016ab0:	0d0d0d07 	.word	0x0d0d0d07
 8016ab4:	1414140d 	.word	0x1414140d
 8016ab8:	0d0d1414 	.word	0x0d0d1414
 8016abc:	2020      	movs	r0, #32
 8016abe:	bd08      	pop	{r3, pc}
 8016ac0:	2018      	movs	r0, #24
 8016ac2:	e7fc      	b.n	8016abe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016ac4:	2010      	movs	r0, #16
 8016ac6:	e7fa      	b.n	8016abe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016ac8:	4b05      	ldr	r3, [pc, #20]	; (8016ae0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8016aca:	4a06      	ldr	r2, [pc, #24]	; (8016ae4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8016acc:	4806      	ldr	r0, [pc, #24]	; (8016ae8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8016ace:	f240 2177 	movw	r1, #631	; 0x277
 8016ad2:	f015 fe09 	bl	802c6e8 <__assert_func>
 8016ad6:	2008      	movs	r0, #8
 8016ad8:	e7f1      	b.n	8016abe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016ada:	2000      	movs	r0, #0
 8016adc:	e7ef      	b.n	8016abe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016ade:	bf00      	nop
 8016ae0:	0802ff35 	.word	0x0802ff35
 8016ae4:	080303c3 	.word	0x080303c3
 8016ae8:	0802feb9 	.word	0x0802feb9

08016aec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8016aec:	b570      	push	{r4, r5, r6, lr}
 8016aee:	460d      	mov	r5, r1
 8016af0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8016af4:	4616      	mov	r6, r2
 8016af6:	461c      	mov	r4, r3
 8016af8:	f7ff ffd4 	bl	8016aa4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8016afc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8016b00:	10c0      	asrs	r0, r0, #3
 8016b02:	fb06 5101 	mla	r1, r6, r1, r5
 8016b06:	fb00 4001 	mla	r0, r0, r1, r4
 8016b0a:	bd70      	pop	{r4, r5, r6, pc}

08016b0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8016b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b10:	b08a      	sub	sp, #40	; 0x28
 8016b12:	f04f 0c00 	mov.w	ip, #0
 8016b16:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8016b1a:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8016b1e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8016b22:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8016b26:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8016b2a:	f8cd c014 	str.w	ip, [sp, #20]
 8016b2e:	2d0b      	cmp	r5, #11
 8016b30:	4604      	mov	r4, r0
 8016b32:	469a      	mov	sl, r3
 8016b34:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8016b38:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016b3c:	d129      	bne.n	8016b92 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x86>
 8016b3e:	2080      	movs	r0, #128	; 0x80
 8016b40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016b44:	9204      	str	r2, [sp, #16]
 8016b46:	4620      	mov	r0, r4
 8016b48:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8016b4c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016b50:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016b54:	f8ad 701c 	strh.w	r7, [sp, #28]
 8016b58:	f8ad 601e 	strh.w	r6, [sp, #30]
 8016b5c:	f7ff fed6 	bl	801690c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016b60:	e9cd 9800 	strd	r9, r8, [sp]
 8016b64:	4603      	mov	r3, r0
 8016b66:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8016b6a:	4651      	mov	r1, sl
 8016b6c:	4620      	mov	r0, r4
 8016b6e:	f7ff ffbd 	bl	8016aec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016b72:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8016b76:	9006      	str	r0, [sp, #24]
 8016b78:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8016b7c:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8016b80:	b107      	cbz	r7, 8016b84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x78>
 8016b82:	b9d6      	cbnz	r6, 8016bba <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xae>
 8016b84:	4b17      	ldr	r3, [pc, #92]	; (8016be4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8016b86:	4a18      	ldr	r2, [pc, #96]	; (8016be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8016b88:	f240 11cf 	movw	r1, #463	; 0x1cf
 8016b8c:	4817      	ldr	r0, [pc, #92]	; (8016bec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe0>)
 8016b8e:	f015 fdab 	bl	802c6e8 <__assert_func>
 8016b92:	2d02      	cmp	r5, #2
 8016b94:	d108      	bne.n	8016ba8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x9c>
 8016b96:	2bff      	cmp	r3, #255	; 0xff
 8016b98:	d104      	bne.n	8016ba4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x98>
 8016b9a:	2800      	cmp	r0, #0
 8016b9c:	bf14      	ite	ne
 8016b9e:	2040      	movne	r0, #64	; 0x40
 8016ba0:	2020      	moveq	r0, #32
 8016ba2:	e7cd      	b.n	8016b40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8016ba4:	2040      	movs	r0, #64	; 0x40
 8016ba6:	e7cb      	b.n	8016b40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8016ba8:	2bff      	cmp	r3, #255	; 0xff
 8016baa:	d104      	bne.n	8016bb6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xaa>
 8016bac:	2800      	cmp	r0, #0
 8016bae:	bf14      	ite	ne
 8016bb0:	2004      	movne	r0, #4
 8016bb2:	2001      	moveq	r0, #1
 8016bb4:	e7c4      	b.n	8016b40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8016bb6:	2004      	movs	r0, #4
 8016bb8:	e7c2      	b.n	8016b40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8016bba:	6823      	ldr	r3, [r4, #0]
 8016bbc:	9d02      	ldr	r5, [sp, #8]
 8016bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016bc0:	4620      	mov	r0, r4
 8016bc2:	4798      	blx	r3
 8016bc4:	4228      	tst	r0, r5
 8016bc6:	d104      	bne.n	8016bd2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc6>
 8016bc8:	4b09      	ldr	r3, [pc, #36]	; (8016bf0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe4>)
 8016bca:	4a07      	ldr	r2, [pc, #28]	; (8016be8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8016bcc:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8016bd0:	e7dc      	b.n	8016b8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x80>
 8016bd2:	6860      	ldr	r0, [r4, #4]
 8016bd4:	6803      	ldr	r3, [r0, #0]
 8016bd6:	a902      	add	r1, sp, #8
 8016bd8:	685b      	ldr	r3, [r3, #4]
 8016bda:	4798      	blx	r3
 8016bdc:	b00a      	add	sp, #40	; 0x28
 8016bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016be2:	bf00      	nop
 8016be4:	0802fd07 	.word	0x0802fd07
 8016be8:	0803025d 	.word	0x0803025d
 8016bec:	0802feb9 	.word	0x0802feb9
 8016bf0:	0802fd3f 	.word	0x0802fd3f

08016bf4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8016bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bf8:	b08b      	sub	sp, #44	; 0x2c
 8016bfa:	469b      	mov	fp, r3
 8016bfc:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8016c00:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8016c04:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8016c08:	2fff      	cmp	r7, #255	; 0xff
 8016c0a:	bf14      	ite	ne
 8016c0c:	2308      	movne	r3, #8
 8016c0e:	2302      	moveq	r3, #2
 8016c10:	2600      	movs	r6, #0
 8016c12:	4604      	mov	r4, r0
 8016c14:	4689      	mov	r9, r1
 8016c16:	4692      	mov	sl, r2
 8016c18:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8016c1c:	9605      	str	r6, [sp, #20]
 8016c1e:	f7ff fe75 	bl	801690c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016c22:	e9cd 8500 	strd	r8, r5, [sp]
 8016c26:	4603      	mov	r3, r0
 8016c28:	465a      	mov	r2, fp
 8016c2a:	4651      	mov	r1, sl
 8016c2c:	4620      	mov	r0, r4
 8016c2e:	f7ff ff5d 	bl	8016aec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016c32:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016c36:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016c3a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016c3e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016c42:	6823      	ldr	r3, [r4, #0]
 8016c44:	9006      	str	r0, [sp, #24]
 8016c46:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8016c4a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8016c4e:	f8ad 6020 	strh.w	r6, [sp, #32]
 8016c52:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8016c56:	f8cd 9014 	str.w	r9, [sp, #20]
 8016c5a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8016c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c60:	9d02      	ldr	r5, [sp, #8]
 8016c62:	4620      	mov	r0, r4
 8016c64:	4798      	blx	r3
 8016c66:	4228      	tst	r0, r5
 8016c68:	d106      	bne.n	8016c78 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8016c6a:	4b07      	ldr	r3, [pc, #28]	; (8016c88 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8016c6c:	4a07      	ldr	r2, [pc, #28]	; (8016c8c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8016c6e:	4808      	ldr	r0, [pc, #32]	; (8016c90 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8016c70:	f240 212e 	movw	r1, #558	; 0x22e
 8016c74:	f015 fd38 	bl	802c6e8 <__assert_func>
 8016c78:	6860      	ldr	r0, [r4, #4]
 8016c7a:	6803      	ldr	r3, [r0, #0]
 8016c7c:	a902      	add	r1, sp, #8
 8016c7e:	685b      	ldr	r3, [r3, #4]
 8016c80:	4798      	blx	r3
 8016c82:	b00b      	add	sp, #44	; 0x2c
 8016c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c88:	0802fd3f 	.word	0x0802fd3f
 8016c8c:	0803032e 	.word	0x0803032e
 8016c90:	0802feb9 	.word	0x0802feb9

08016c94 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016c94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016c98:	461f      	mov	r7, r3
 8016c9a:	4b0b      	ldr	r3, [pc, #44]	; (8016cc8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016c9c:	460d      	mov	r5, r1
 8016c9e:	f8b3 8000 	ldrh.w	r8, [r3]
 8016ca2:	4616      	mov	r6, r2
 8016ca4:	4604      	mov	r4, r0
 8016ca6:	f7f8 f965 	bl	800ef74 <_ZN8touchgfx3HAL3lcdEv>
 8016caa:	6803      	ldr	r3, [r0, #0]
 8016cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cae:	4798      	blx	r3
 8016cb0:	463b      	mov	r3, r7
 8016cb2:	e9cd 8000 	strd	r8, r0, [sp]
 8016cb6:	4632      	mov	r2, r6
 8016cb8:	4629      	mov	r1, r5
 8016cba:	4620      	mov	r0, r4
 8016cbc:	f7ff ff16 	bl	8016aec <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016cc0:	b002      	add	sp, #8
 8016cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cc6:	bf00      	nop
 8016cc8:	200067ca 	.word	0x200067ca

08016ccc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8016ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cd0:	b088      	sub	sp, #32
 8016cd2:	4698      	mov	r8, r3
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	9303      	str	r3, [sp, #12]
 8016cd8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016cdc:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8016ce0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016ce4:	f8ad 6014 	strh.w	r6, [sp, #20]
 8016ce8:	e9cd 3100 	strd	r3, r1, [sp]
 8016cec:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016cf0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016cf4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8016cf8:	f88d 301c 	strb.w	r3, [sp, #28]
 8016cfc:	4617      	mov	r7, r2
 8016cfe:	4604      	mov	r4, r0
 8016d00:	f8ad 5016 	strh.w	r5, [sp, #22]
 8016d04:	f7ff fe02 	bl	801690c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016d08:	4642      	mov	r2, r8
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	4639      	mov	r1, r7
 8016d0e:	4620      	mov	r0, r4
 8016d10:	f7ff ffc0 	bl	8016c94 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016d14:	4b16      	ldr	r3, [pc, #88]	; (8016d70 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8016d16:	9004      	str	r0, [sp, #16]
 8016d18:	881b      	ldrh	r3, [r3, #0]
 8016d1a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016d1e:	f7f8 f929 	bl	800ef74 <_ZN8touchgfx3HAL3lcdEv>
 8016d22:	6803      	ldr	r3, [r0, #0]
 8016d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d26:	4798      	blx	r3
 8016d28:	f88d 001e 	strb.w	r0, [sp, #30]
 8016d2c:	f88d 001d 	strb.w	r0, [sp, #29]
 8016d30:	b106      	cbz	r6, 8016d34 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8016d32:	b935      	cbnz	r5, 8016d42 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8016d34:	4b0f      	ldr	r3, [pc, #60]	; (8016d74 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8016d36:	4a10      	ldr	r2, [pc, #64]	; (8016d78 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016d38:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8016d3c:	480f      	ldr	r0, [pc, #60]	; (8016d7c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8016d3e:	f015 fcd3 	bl	802c6e8 <__assert_func>
 8016d42:	6823      	ldr	r3, [r4, #0]
 8016d44:	9d00      	ldr	r5, [sp, #0]
 8016d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d48:	4620      	mov	r0, r4
 8016d4a:	4798      	blx	r3
 8016d4c:	4228      	tst	r0, r5
 8016d4e:	d104      	bne.n	8016d5a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8016d50:	4b0b      	ldr	r3, [pc, #44]	; (8016d80 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8016d52:	4a09      	ldr	r2, [pc, #36]	; (8016d78 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016d54:	f240 11ed 	movw	r1, #493	; 0x1ed
 8016d58:	e7f0      	b.n	8016d3c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8016d5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016d5c:	6860      	ldr	r0, [r4, #4]
 8016d5e:	9303      	str	r3, [sp, #12]
 8016d60:	6803      	ldr	r3, [r0, #0]
 8016d62:	4669      	mov	r1, sp
 8016d64:	685b      	ldr	r3, [r3, #4]
 8016d66:	4798      	blx	r3
 8016d68:	b008      	add	sp, #32
 8016d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d6e:	bf00      	nop
 8016d70:	200067ca 	.word	0x200067ca
 8016d74:	0802fd07 	.word	0x0802fd07
 8016d78:	0803010f 	.word	0x0803010f
 8016d7c:	0802feb9 	.word	0x0802feb9
 8016d80:	0802fd3f 	.word	0x0802fd3f

08016d84 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016d84:	b570      	push	{r4, r5, r6, lr}
 8016d86:	b08a      	sub	sp, #40	; 0x28
 8016d88:	466b      	mov	r3, sp
 8016d8a:	e883 0006 	stmia.w	r3, {r1, r2}
 8016d8e:	4b20      	ldr	r3, [pc, #128]	; (8016e10 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8016d90:	781b      	ldrb	r3, [r3, #0]
 8016d92:	4604      	mov	r4, r0
 8016d94:	b933      	cbnz	r3, 8016da4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8016d96:	4b1f      	ldr	r3, [pc, #124]	; (8016e14 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8016d98:	4a1f      	ldr	r2, [pc, #124]	; (8016e18 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8016d9a:	4820      	ldr	r0, [pc, #128]	; (8016e1c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8016d9c:	f240 213f 	movw	r1, #575	; 0x23f
 8016da0:	f015 fca2 	bl	802c6e8 <__assert_func>
 8016da4:	2300      	movs	r3, #0
 8016da6:	9305      	str	r3, [sp, #20]
 8016da8:	2301      	movs	r3, #1
 8016daa:	9302      	str	r3, [sp, #8]
 8016dac:	6803      	ldr	r3, [r0, #0]
 8016dae:	f8bd 5000 	ldrh.w	r5, [sp]
 8016db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016db4:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8016db8:	4798      	blx	r3
 8016dba:	4632      	mov	r2, r6
 8016dbc:	4629      	mov	r1, r5
 8016dbe:	4603      	mov	r3, r0
 8016dc0:	4620      	mov	r0, r4
 8016dc2:	f7ff ff67 	bl	8016c94 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016dc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016dc8:	9306      	str	r3, [sp, #24]
 8016dca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016dce:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016dd2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016dd6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016dda:	4b11      	ldr	r3, [pc, #68]	; (8016e20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8016ddc:	9003      	str	r0, [sp, #12]
 8016dde:	881b      	ldrh	r3, [r3, #0]
 8016de0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016de4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016de8:	f7f8 f8c4 	bl	800ef74 <_ZN8touchgfx3HAL3lcdEv>
 8016dec:	6803      	ldr	r3, [r0, #0]
 8016dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016df0:	4798      	blx	r3
 8016df2:	23ff      	movs	r3, #255	; 0xff
 8016df4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016df8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016dfc:	6860      	ldr	r0, [r4, #4]
 8016dfe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016e02:	6803      	ldr	r3, [r0, #0]
 8016e04:	a902      	add	r1, sp, #8
 8016e06:	685b      	ldr	r3, [r3, #4]
 8016e08:	4798      	blx	r3
 8016e0a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8016e0c:	b00a      	add	sp, #40	; 0x28
 8016e0e:	bd70      	pop	{r4, r5, r6, pc}
 8016e10:	200067cf 	.word	0x200067cf
 8016e14:	0802fe06 	.word	0x0802fe06
 8016e18:	080301b3 	.word	0x080301b3
 8016e1c:	0802feb9 	.word	0x0802feb9
 8016e20:	200067ca 	.word	0x200067ca

08016e24 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e26:	b08b      	sub	sp, #44	; 0x2c
 8016e28:	466d      	mov	r5, sp
 8016e2a:	e885 0006 	stmia.w	r5, {r1, r2}
 8016e2e:	461d      	mov	r5, r3
 8016e30:	2300      	movs	r3, #0
 8016e32:	9305      	str	r3, [sp, #20]
 8016e34:	2301      	movs	r3, #1
 8016e36:	9302      	str	r3, [sp, #8]
 8016e38:	6803      	ldr	r3, [r0, #0]
 8016e3a:	f8bd 6000 	ldrh.w	r6, [sp]
 8016e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e40:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016e44:	4604      	mov	r4, r0
 8016e46:	4798      	blx	r3
 8016e48:	463a      	mov	r2, r7
 8016e4a:	4631      	mov	r1, r6
 8016e4c:	4603      	mov	r3, r0
 8016e4e:	4620      	mov	r0, r4
 8016e50:	f7ff ff20 	bl	8016c94 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016e54:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016e58:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016e5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016e60:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016e64:	4b0e      	ldr	r3, [pc, #56]	; (8016ea0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8016e66:	9003      	str	r0, [sp, #12]
 8016e68:	881b      	ldrh	r3, [r3, #0]
 8016e6a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016e6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016e70:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016e74:	9506      	str	r5, [sp, #24]
 8016e76:	f7f8 f87d 	bl	800ef74 <_ZN8touchgfx3HAL3lcdEv>
 8016e7a:	6803      	ldr	r3, [r0, #0]
 8016e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e7e:	4798      	blx	r3
 8016e80:	23ff      	movs	r3, #255	; 0xff
 8016e82:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016e86:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016e8a:	6860      	ldr	r0, [r4, #4]
 8016e8c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016e90:	6803      	ldr	r3, [r0, #0]
 8016e92:	a902      	add	r1, sp, #8
 8016e94:	685b      	ldr	r3, [r3, #4]
 8016e96:	4798      	blx	r3
 8016e98:	4628      	mov	r0, r5
 8016e9a:	b00b      	add	sp, #44	; 0x2c
 8016e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e9e:	bf00      	nop
 8016ea0:	200067ca 	.word	0x200067ca

08016ea4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016ea4:	b570      	push	{r4, r5, r6, lr}
 8016ea6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8016eaa:	4604      	mov	r4, r0
 8016eac:	b19b      	cbz	r3, 8016ed6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8016eae:	2002      	movs	r0, #2
 8016eb0:	f7fd f804 	bl	8013ebc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016eba:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8016ebe:	6823      	ldr	r3, [r4, #0]
 8016ec0:	4620      	mov	r0, r4
 8016ec2:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8016ec6:	f7ff fd21 	bl	801690c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016eca:	462b      	mov	r3, r5
 8016ecc:	4601      	mov	r1, r0
 8016ece:	4620      	mov	r0, r4
 8016ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ed4:	4718      	bx	r3
 8016ed6:	bd70      	pop	{r4, r5, r6, pc}

08016ed8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8016ed8:	4770      	bx	lr

08016eda <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016eda:	4770      	bx	lr

08016edc <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8016edc:	2000      	movs	r0, #0
 8016ede:	4770      	bx	lr

08016ee0 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016ee0:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016ee4:	1a13      	subs	r3, r2, r0
 8016ee6:	4258      	negs	r0, r3
 8016ee8:	4158      	adcs	r0, r3
 8016eea:	4770      	bx	lr

08016eec <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016eec:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016ef0:	1a9b      	subs	r3, r3, r2
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	bfdc      	itt	le
 8016ef6:	6882      	ldrle	r2, [r0, #8]
 8016ef8:	189b      	addle	r3, r3, r2
 8016efa:	2b01      	cmp	r3, #1
 8016efc:	bfcc      	ite	gt
 8016efe:	2000      	movgt	r0, #0
 8016f00:	2001      	movle	r0, #1
 8016f02:	4770      	bx	lr

08016f04 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016f04:	6902      	ldr	r2, [r0, #16]
 8016f06:	6840      	ldr	r0, [r0, #4]
 8016f08:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8016f0c:	4770      	bx	lr

08016f0e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016f0e:	6803      	ldr	r3, [r0, #0]
 8016f10:	691b      	ldr	r3, [r3, #16]
 8016f12:	4718      	bx	r3

08016f14 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016f14:	4770      	bx	lr

08016f16 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016f16:	4770      	bx	lr

08016f18 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016f18:	b570      	push	{r4, r5, r6, lr}
 8016f1a:	2301      	movs	r3, #1
 8016f1c:	7203      	strb	r3, [r0, #8]
 8016f1e:	4604      	mov	r4, r0
 8016f20:	6840      	ldr	r0, [r0, #4]
 8016f22:	6803      	ldr	r3, [r0, #0]
 8016f24:	699b      	ldr	r3, [r3, #24]
 8016f26:	4798      	blx	r3
 8016f28:	6803      	ldr	r3, [r0, #0]
 8016f2a:	2b40      	cmp	r3, #64	; 0x40
 8016f2c:	4605      	mov	r5, r0
 8016f2e:	d039      	beq.n	8016fa4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016f30:	d815      	bhi.n	8016f5e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8016f32:	2b04      	cmp	r3, #4
 8016f34:	d022      	beq.n	8016f7c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016f36:	d808      	bhi.n	8016f4a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016f38:	2b01      	cmp	r3, #1
 8016f3a:	d033      	beq.n	8016fa4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016f3c:	2b02      	cmp	r3, #2
 8016f3e:	d108      	bne.n	8016f52 <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8016f40:	6823      	ldr	r3, [r4, #0]
 8016f42:	4620      	mov	r0, r4
 8016f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f46:	4798      	blx	r3
 8016f48:	e025      	b.n	8016f96 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8016f4a:	2b08      	cmp	r3, #8
 8016f4c:	d01e      	beq.n	8016f8c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8016f4e:	2b20      	cmp	r3, #32
 8016f50:	d028      	beq.n	8016fa4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016f52:	4b17      	ldr	r3, [pc, #92]	; (8016fb0 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8016f54:	4a17      	ldr	r2, [pc, #92]	; (8016fb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8016f56:	4818      	ldr	r0, [pc, #96]	; (8016fb8 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8016f58:	218b      	movs	r1, #139	; 0x8b
 8016f5a:	f015 fbc5 	bl	802c6e8 <__assert_func>
 8016f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016f62:	d01f      	beq.n	8016fa4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016f64:	d804      	bhi.n	8016f70 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 8016f66:	2b80      	cmp	r3, #128	; 0x80
 8016f68:	d01c      	beq.n	8016fa4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f6e:	e7ef      	b.n	8016f50 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8016f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016f74:	d016      	beq.n	8016fa4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016f7a:	e7e0      	b.n	8016f3e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8016f7c:	6823      	ldr	r3, [r4, #0]
 8016f7e:	7f01      	ldrb	r1, [r0, #28]
 8016f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f82:	4620      	mov	r0, r4
 8016f84:	4798      	blx	r3
 8016f86:	6823      	ldr	r3, [r4, #0]
 8016f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f8a:	e006      	b.n	8016f9a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8016f8c:	6823      	ldr	r3, [r4, #0]
 8016f8e:	7f01      	ldrb	r1, [r0, #28]
 8016f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f92:	4620      	mov	r0, r4
 8016f94:	4798      	blx	r3
 8016f96:	6823      	ldr	r3, [r4, #0]
 8016f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f9a:	4629      	mov	r1, r5
 8016f9c:	4620      	mov	r0, r4
 8016f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016fa2:	4718      	bx	r3
 8016fa4:	6823      	ldr	r3, [r4, #0]
 8016fa6:	4620      	mov	r0, r4
 8016fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016faa:	4798      	blx	r3
 8016fac:	e7eb      	b.n	8016f86 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8016fae:	bf00      	nop
 8016fb0:	0803040c 	.word	0x0803040c
 8016fb4:	0803051c 	.word	0x0803051c
 8016fb8:	08030431 	.word	0x08030431

08016fbc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016fbc:	b570      	push	{r4, r5, r6, lr}
 8016fbe:	4604      	mov	r4, r0
 8016fc0:	460e      	mov	r6, r1
 8016fc2:	6860      	ldr	r0, [r4, #4]
 8016fc4:	6803      	ldr	r3, [r0, #0]
 8016fc6:	685b      	ldr	r3, [r3, #4]
 8016fc8:	4798      	blx	r3
 8016fca:	2800      	cmp	r0, #0
 8016fcc:	d1f9      	bne.n	8016fc2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016fce:	4d0d      	ldr	r5, [pc, #52]	; (8017004 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016fd0:	6828      	ldr	r0, [r5, #0]
 8016fd2:	6803      	ldr	r3, [r0, #0]
 8016fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016fd6:	4798      	blx	r3
 8016fd8:	f7fd f9dc 	bl	8014394 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016fdc:	6828      	ldr	r0, [r5, #0]
 8016fde:	2101      	movs	r1, #1
 8016fe0:	f7ff ff7a 	bl	8016ed8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016fe4:	6860      	ldr	r0, [r4, #4]
 8016fe6:	6803      	ldr	r3, [r0, #0]
 8016fe8:	4631      	mov	r1, r6
 8016fea:	689b      	ldr	r3, [r3, #8]
 8016fec:	4798      	blx	r3
 8016fee:	6823      	ldr	r3, [r4, #0]
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ff4:	4798      	blx	r3
 8016ff6:	6828      	ldr	r0, [r5, #0]
 8016ff8:	6803      	ldr	r3, [r0, #0]
 8016ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017000:	4718      	bx	r3
 8017002:	bf00      	nop
 8017004:	200067d0 	.word	0x200067d0

08017008 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8017008:	b508      	push	{r3, lr}
 801700a:	f7fd f9a9 	bl	8014360 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801700e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017012:	f7fd b9b3 	b.w	801437c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017016 <_ZN8touchgfx13DMA_Interface5startEv>:
 8017016:	b510      	push	{r4, lr}
 8017018:	4604      	mov	r4, r0
 801701a:	6840      	ldr	r0, [r0, #4]
 801701c:	6803      	ldr	r3, [r0, #0]
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	4798      	blx	r3
 8017022:	b948      	cbnz	r0, 8017038 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017024:	7a63      	ldrb	r3, [r4, #9]
 8017026:	b13b      	cbz	r3, 8017038 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017028:	7a23      	ldrb	r3, [r4, #8]
 801702a:	b92b      	cbnz	r3, 8017038 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801702c:	6823      	ldr	r3, [r4, #0]
 801702e:	4620      	mov	r0, r4
 8017030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017036:	4718      	bx	r3
 8017038:	bd10      	pop	{r4, pc}
	...

0801703c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801703c:	b510      	push	{r4, lr}
 801703e:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8017042:	1b12      	subs	r2, r2, r4
 8017044:	2a00      	cmp	r2, #0
 8017046:	bfdc      	itt	le
 8017048:	6883      	ldrle	r3, [r0, #8]
 801704a:	18d2      	addle	r2, r2, r3
 801704c:	2a01      	cmp	r2, #1
 801704e:	dd18      	ble.n	8017082 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8017050:	6843      	ldr	r3, [r0, #4]
 8017052:	f101 021c 	add.w	r2, r1, #28
 8017056:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801705a:	f851 4b04 	ldr.w	r4, [r1], #4
 801705e:	f843 4b04 	str.w	r4, [r3], #4
 8017062:	4291      	cmp	r1, r2
 8017064:	d1f9      	bne.n	801705a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8017066:	880a      	ldrh	r2, [r1, #0]
 8017068:	801a      	strh	r2, [r3, #0]
 801706a:	788a      	ldrb	r2, [r1, #2]
 801706c:	709a      	strb	r2, [r3, #2]
 801706e:	68c3      	ldr	r3, [r0, #12]
 8017070:	6882      	ldr	r2, [r0, #8]
 8017072:	f3bf 8f5b 	dmb	ish
 8017076:	3301      	adds	r3, #1
 8017078:	429a      	cmp	r2, r3
 801707a:	bfd8      	it	le
 801707c:	1a9b      	suble	r3, r3, r2
 801707e:	60c3      	str	r3, [r0, #12]
 8017080:	bd10      	pop	{r4, pc}
 8017082:	4b03      	ldr	r3, [pc, #12]	; (8017090 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8017084:	4a03      	ldr	r2, [pc, #12]	; (8017094 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8017086:	4804      	ldr	r0, [pc, #16]	; (8017098 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8017088:	2139      	movs	r1, #57	; 0x39
 801708a:	f015 fb2d 	bl	802c6e8 <__assert_func>
 801708e:	bf00      	nop
 8017090:	08030457 	.word	0x08030457
 8017094:	0803054c 	.word	0x0803054c
 8017098:	08030431 	.word	0x08030431

0801709c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801709c:	b510      	push	{r4, lr}
 801709e:	6803      	ldr	r3, [r0, #0]
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	4604      	mov	r4, r0
 80170a4:	4798      	blx	r3
 80170a6:	b128      	cbz	r0, 80170b4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80170a8:	4b07      	ldr	r3, [pc, #28]	; (80170c8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80170aa:	4a08      	ldr	r2, [pc, #32]	; (80170cc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80170ac:	4808      	ldr	r0, [pc, #32]	; (80170d0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80170ae:	213f      	movs	r1, #63	; 0x3f
 80170b0:	f015 fb1a 	bl	802c6e8 <__assert_func>
 80170b4:	6923      	ldr	r3, [r4, #16]
 80170b6:	68a2      	ldr	r2, [r4, #8]
 80170b8:	f3bf 8f5b 	dmb	ish
 80170bc:	3301      	adds	r3, #1
 80170be:	429a      	cmp	r2, r3
 80170c0:	bfd8      	it	le
 80170c2:	1a9b      	suble	r3, r3, r2
 80170c4:	6123      	str	r3, [r4, #16]
 80170c6:	bd10      	pop	{r4, pc}
 80170c8:	0803047a 	.word	0x0803047a
 80170cc:	0803059a 	.word	0x0803059a
 80170d0:	08030431 	.word	0x08030431

080170d4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80170d4:	b570      	push	{r4, r5, r6, lr}
 80170d6:	4604      	mov	r4, r0
 80170d8:	6840      	ldr	r0, [r0, #4]
 80170da:	6803      	ldr	r3, [r0, #0]
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	4798      	blx	r3
 80170e0:	4605      	mov	r5, r0
 80170e2:	b930      	cbnz	r0, 80170f2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80170e4:	7a23      	ldrb	r3, [r4, #8]
 80170e6:	b123      	cbz	r3, 80170f2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80170e8:	6860      	ldr	r0, [r4, #4]
 80170ea:	6803      	ldr	r3, [r0, #0]
 80170ec:	695b      	ldr	r3, [r3, #20]
 80170ee:	4798      	blx	r3
 80170f0:	7225      	strb	r5, [r4, #8]
 80170f2:	6860      	ldr	r0, [r4, #4]
 80170f4:	6803      	ldr	r3, [r0, #0]
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	4798      	blx	r3
 80170fa:	b928      	cbnz	r0, 8017108 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80170fc:	6823      	ldr	r3, [r4, #0]
 80170fe:	4620      	mov	r0, r4
 8017100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017106:	4718      	bx	r3
 8017108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801710c:	f7fd b94e 	b.w	80143ac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08017110 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8017110:	b510      	push	{r4, lr}
 8017112:	4c04      	ldr	r4, [pc, #16]	; (8017124 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8017114:	6082      	str	r2, [r0, #8]
 8017116:	2200      	movs	r2, #0
 8017118:	e9c0 4100 	strd	r4, r1, [r0]
 801711c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017120:	bd10      	pop	{r4, pc}
 8017122:	bf00      	nop
 8017124:	08030500 	.word	0x08030500

08017128 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8017128:	6840      	ldr	r0, [r0, #4]
 801712a:	6803      	ldr	r3, [r0, #0]
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	4718      	bx	r3

08017130 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8017130:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8017134:	4770      	bx	lr

08017136 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8017136:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801713a:	4770      	bx	lr

0801713c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801713c:	b507      	push	{r0, r1, r2, lr}
 801713e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8017142:	ab01      	add	r3, sp, #4
 8017144:	6809      	ldr	r1, [r1, #0]
 8017146:	6800      	ldr	r0, [r0, #0]
 8017148:	f004 fe8e 	bl	801be68 <_ZN8touchgfx6muldivElllRl>
 801714c:	b003      	add	sp, #12
 801714e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08017154 <_ZN8touchgfx7CWRUtil4sineEi>:
 8017154:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017158:	fb90 f3f2 	sdiv	r3, r0, r2
 801715c:	fb03 0312 	mls	r3, r3, r2, r0
 8017160:	4413      	add	r3, r2
 8017162:	fb93 f0f2 	sdiv	r0, r3, r2
 8017166:	fb02 3010 	mls	r0, r2, r0, r3
 801716a:	285a      	cmp	r0, #90	; 0x5a
 801716c:	4b09      	ldr	r3, [pc, #36]	; (8017194 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 801716e:	dc02      	bgt.n	8017176 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8017170:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8017174:	4770      	bx	lr
 8017176:	28b4      	cmp	r0, #180	; 0xb4
 8017178:	dc02      	bgt.n	8017180 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 801717a:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801717e:	e7f7      	b.n	8017170 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8017180:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8017184:	bfd4      	ite	le
 8017186:	38b4      	suble	r0, #180	; 0xb4
 8017188:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 801718c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8017190:	4240      	negs	r0, r0
 8017192:	4770      	bx	lr
 8017194:	080305ca 	.word	0x080305ca

08017198 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8017198:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 801719c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801719e:	fb90 f3f2 	sdiv	r3, r0, r2
 80171a2:	fb03 0012 	mls	r0, r3, r2, r0
 80171a6:	4410      	add	r0, r2
 80171a8:	fb90 f4f2 	sdiv	r4, r0, r2
 80171ac:	fb02 0414 	mls	r4, r2, r4, r0
 80171b0:	f004 061f 	and.w	r6, r4, #31
 80171b4:	1164      	asrs	r4, r4, #5
 80171b6:	4620      	mov	r0, r4
 80171b8:	f7ff ffcc 	bl	8017154 <_ZN8touchgfx7CWRUtil4sineEi>
 80171bc:	4605      	mov	r5, r0
 80171be:	b90e      	cbnz	r6, 80171c4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 80171c0:	b002      	add	sp, #8
 80171c2:	bd70      	pop	{r4, r5, r6, pc}
 80171c4:	1c60      	adds	r0, r4, #1
 80171c6:	f7ff ffc5 	bl	8017154 <_ZN8touchgfx7CWRUtil4sineEi>
 80171ca:	ab01      	add	r3, sp, #4
 80171cc:	2220      	movs	r2, #32
 80171ce:	4631      	mov	r1, r6
 80171d0:	1b40      	subs	r0, r0, r5
 80171d2:	f004 fe49 	bl	801be68 <_ZN8touchgfx6muldivElllRl>
 80171d6:	4428      	add	r0, r5
 80171d8:	e7f2      	b.n	80171c0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

080171da <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 80171da:	b508      	push	{r3, lr}
 80171dc:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 80171e0:	f7ff ffda 	bl	8017198 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80171e4:	bd08      	pop	{r3, pc}
	...

080171e8 <_ZN8touchgfx6CircleC1Ev>:
 80171e8:	b510      	push	{r4, lr}
 80171ea:	4604      	mov	r4, r0
 80171ec:	f000 fcde 	bl	8017bac <_ZN8touchgfx12CanvasWidgetC1Ev>
 80171f0:	4b08      	ldr	r3, [pc, #32]	; (8017214 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 80171f2:	6023      	str	r3, [r4, #0]
 80171f4:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 80171f8:	2300      	movs	r3, #0
 80171fa:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 80171fe:	f24b 4205 	movw	r2, #46085	; 0xb405
 8017202:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8017206:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801720a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 801720e:	60a3      	str	r3, [r4, #8]
 8017210:	4620      	mov	r0, r4
 8017212:	bd10      	pop	{r4, pc}
 8017214:	08030688 	.word	0x08030688

08017218 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8017218:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801721c:	4606      	mov	r6, r0
 801721e:	6810      	ldr	r0, [r2, #0]
 8017220:	4698      	mov	r8, r3
 8017222:	4691      	mov	r9, r2
 8017224:	460f      	mov	r7, r1
 8017226:	f7ff ffb7 	bl	8017198 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801722a:	a902      	add	r1, sp, #8
 801722c:	2402      	movs	r4, #2
 801722e:	f841 0d08 	str.w	r0, [r1, #-8]!
 8017232:	4640      	mov	r0, r8
 8017234:	f7ff ff82 	bl	801713c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017238:	6b35      	ldr	r5, [r6, #48]	; 0x30
 801723a:	fb90 f0f4 	sdiv	r0, r0, r4
 801723e:	4405      	add	r5, r0
 8017240:	f8d9 0000 	ldr.w	r0, [r9]
 8017244:	f7ff ffc9 	bl	80171da <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017248:	a902      	add	r1, sp, #8
 801724a:	f841 0d04 	str.w	r0, [r1, #-4]!
 801724e:	4640      	mov	r0, r8
 8017250:	f7ff ff74 	bl	801713c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017254:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8017256:	fb90 f0f4 	sdiv	r0, r0, r4
 801725a:	4629      	mov	r1, r5
 801725c:	1a12      	subs	r2, r2, r0
 801725e:	4638      	mov	r0, r7
 8017260:	f013 f973 	bl	802a54a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8017264:	b003      	add	sp, #12
 8017266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801726a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 801726a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801726e:	9e08      	ldr	r6, [sp, #32]
 8017270:	6830      	ldr	r0, [r6, #0]
 8017272:	4698      	mov	r8, r3
 8017274:	4615      	mov	r5, r2
 8017276:	460f      	mov	r7, r1
 8017278:	f7ff ff8e 	bl	8017198 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801727c:	a902      	add	r1, sp, #8
 801727e:	2402      	movs	r4, #2
 8017280:	f841 0d08 	str.w	r0, [r1, #-8]!
 8017284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017286:	f7ff ff59 	bl	801713c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801728a:	682d      	ldr	r5, [r5, #0]
 801728c:	fb90 f0f4 	sdiv	r0, r0, r4
 8017290:	4405      	add	r5, r0
 8017292:	6830      	ldr	r0, [r6, #0]
 8017294:	f7ff ffa1 	bl	80171da <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017298:	a902      	add	r1, sp, #8
 801729a:	f841 0d04 	str.w	r0, [r1, #-4]!
 801729e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80172a0:	f7ff ff4c 	bl	801713c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80172a4:	f8d8 2000 	ldr.w	r2, [r8]
 80172a8:	fb90 f0f4 	sdiv	r0, r0, r4
 80172ac:	4629      	mov	r1, r5
 80172ae:	1a12      	subs	r2, r2, r0
 80172b0:	4638      	mov	r0, r7
 80172b2:	f013 f8d9 	bl	802a468 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80172b6:	b002      	add	sp, #8
 80172b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080172bc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 80172bc:	b513      	push	{r0, r1, r4, lr}
 80172be:	e9cd 2300 	strd	r2, r3, [sp]
 80172c2:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80172c6:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80172ca:	f7ff ffce 	bl	801726a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 80172ce:	b002      	add	sp, #8
 80172d0:	bd10      	pop	{r4, pc}

080172d2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 80172d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172d4:	680e      	ldr	r6, [r1, #0]
 80172d6:	681f      	ldr	r7, [r3, #0]
 80172d8:	9807      	ldr	r0, [sp, #28]
 80172da:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 80172de:	42be      	cmp	r6, r7
 80172e0:	bfb8      	it	lt
 80172e2:	601e      	strlt	r6, [r3, #0]
 80172e4:	680b      	ldr	r3, [r1, #0]
 80172e6:	6829      	ldr	r1, [r5, #0]
 80172e8:	428b      	cmp	r3, r1
 80172ea:	bfc8      	it	gt
 80172ec:	602b      	strgt	r3, [r5, #0]
 80172ee:	6813      	ldr	r3, [r2, #0]
 80172f0:	6821      	ldr	r1, [r4, #0]
 80172f2:	428b      	cmp	r3, r1
 80172f4:	bfb8      	it	lt
 80172f6:	6023      	strlt	r3, [r4, #0]
 80172f8:	6813      	ldr	r3, [r2, #0]
 80172fa:	6802      	ldr	r2, [r0, #0]
 80172fc:	4293      	cmp	r3, r2
 80172fe:	bfc8      	it	gt
 8017300:	6003      	strgt	r3, [r0, #0]
 8017302:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017304 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8017304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017308:	4606      	mov	r6, r0
 801730a:	b089      	sub	sp, #36	; 0x24
 801730c:	6808      	ldr	r0, [r1, #0]
 801730e:	4690      	mov	r8, r2
 8017310:	461f      	mov	r7, r3
 8017312:	4689      	mov	r9, r1
 8017314:	f7ff ff40 	bl	8017198 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017318:	ad08      	add	r5, sp, #32
 801731a:	2402      	movs	r4, #2
 801731c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8017320:	4640      	mov	r0, r8
 8017322:	4629      	mov	r1, r5
 8017324:	f7ff ff0a 	bl	801713c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017328:	6b33      	ldr	r3, [r6, #48]	; 0x30
 801732a:	fb90 f0f4 	sdiv	r0, r0, r4
 801732e:	4418      	add	r0, r3
 8017330:	9005      	str	r0, [sp, #20]
 8017332:	f8d9 0000 	ldr.w	r0, [r9]
 8017336:	f7ff ff50 	bl	80171da <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801733a:	4629      	mov	r1, r5
 801733c:	9007      	str	r0, [sp, #28]
 801733e:	4640      	mov	r0, r8
 8017340:	f7ff fefc 	bl	801713c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017344:	fb90 f0f4 	sdiv	r0, r0, r4
 8017348:	6b74      	ldr	r4, [r6, #52]	; 0x34
 801734a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801734c:	aa08      	add	r2, sp, #32
 801734e:	1a24      	subs	r4, r4, r0
 8017350:	f842 4d08 	str.w	r4, [r2, #-8]!
 8017354:	9302      	str	r3, [sp, #8]
 8017356:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017358:	9301      	str	r3, [sp, #4]
 801735a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801735c:	9300      	str	r3, [sp, #0]
 801735e:	a905      	add	r1, sp, #20
 8017360:	463b      	mov	r3, r7
 8017362:	4630      	mov	r0, r6
 8017364:	f7ff ffb5 	bl	80172d2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017368:	b009      	add	sp, #36	; 0x24
 801736a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801736e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 801736e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017372:	4291      	cmp	r1, r2
 8017374:	b08d      	sub	sp, #52	; 0x34
 8017376:	e9cd 2106 	strd	r2, r1, [sp, #24]
 801737a:	bfc8      	it	gt
 801737c:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 8017380:	461e      	mov	r6, r3
 8017382:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017386:	1a9b      	subs	r3, r3, r2
 8017388:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801738c:	bfa2      	ittt	ge
 801738e:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8017392:	2200      	movge	r2, #0
 8017394:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 8017398:	6b82      	ldr	r2, [r0, #56]	; 0x38
 801739a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801739c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80173a0:	ad0c      	add	r5, sp, #48	; 0x30
 80173a2:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 80173a6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80173aa:	f845 3d04 	str.w	r3, [r5, #-4]!
 80173ae:	a907      	add	r1, sp, #28
 80173b0:	4633      	mov	r3, r6
 80173b2:	462a      	mov	r2, r5
 80173b4:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80173b8:	9700      	str	r7, [sp, #0]
 80173ba:	4604      	mov	r4, r0
 80173bc:	f7ff ffa2 	bl	8017304 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80173c0:	9b07      	ldr	r3, [sp, #28]
 80173c2:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 80173c6:	f103 0120 	add.w	r1, r3, #32
 80173ca:	fb91 f3f0 	sdiv	r3, r1, r0
 80173ce:	fb00 1313 	mls	r3, r0, r3, r1
 80173d2:	1ac3      	subs	r3, r0, r3
 80173d4:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 80173d8:	fb93 f2f0 	sdiv	r2, r3, r0
 80173dc:	fb00 3312 	mls	r3, r0, r2, r3
 80173e0:	440b      	add	r3, r1
 80173e2:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 80173e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80173e8:	9906      	ldr	r1, [sp, #24]
 80173ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80173ec:	4291      	cmp	r1, r2
 80173ee:	db11      	blt.n	8017414 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 80173f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80173f2:	9700      	str	r7, [sp, #0]
 80173f4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80173f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80173fa:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80173fe:	4633      	mov	r3, r6
 8017400:	462a      	mov	r2, r5
 8017402:	4651      	mov	r1, sl
 8017404:	4620      	mov	r0, r4
 8017406:	f7ff ff7d 	bl	8017304 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801740a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801740c:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8017410:	9309      	str	r3, [sp, #36]	; 0x24
 8017412:	e7e8      	b.n	80173e6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8017414:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 8017418:	4291      	cmp	r1, r2
 801741a:	dd0c      	ble.n	8017436 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 801741c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801741e:	9700      	str	r7, [sp, #0]
 8017420:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017424:	930b      	str	r3, [sp, #44]	; 0x2c
 8017426:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801742a:	4633      	mov	r3, r6
 801742c:	462a      	mov	r2, r5
 801742e:	a906      	add	r1, sp, #24
 8017430:	4620      	mov	r0, r4
 8017432:	f7ff ff67 	bl	8017304 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017436:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017438:	2b00      	cmp	r3, #0
 801743a:	f040 8097 	bne.w	801756c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 801743e:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8017442:	1a52      	subs	r2, r2, r1
 8017444:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 8017448:	da0a      	bge.n	8017460 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 801744a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801744e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8017452:	9700      	str	r7, [sp, #0]
 8017454:	4633      	mov	r3, r6
 8017456:	462a      	mov	r2, r5
 8017458:	a90a      	add	r1, sp, #40	; 0x28
 801745a:	4620      	mov	r0, r4
 801745c:	f7ff ff52 	bl	8017304 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017460:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8017464:	2bb3      	cmp	r3, #179	; 0xb3
 8017466:	d87e      	bhi.n	8017566 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8017468:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 801746c:	1a1b      	subs	r3, r3, r0
 801746e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017472:	da78      	bge.n	8017566 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8017474:	f7ff fe90 	bl	8017198 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017478:	ad0c      	add	r5, sp, #48	; 0x30
 801747a:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 801747e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8017482:	4658      	mov	r0, fp
 8017484:	4629      	mov	r1, r5
 8017486:	f7ff fe59 	bl	801713c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801748a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801748c:	18c3      	adds	r3, r0, r3
 801748e:	9807      	ldr	r0, [sp, #28]
 8017490:	9305      	str	r3, [sp, #20]
 8017492:	f7ff fea2 	bl	80171da <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017496:	4629      	mov	r1, r5
 8017498:	900b      	str	r0, [sp, #44]	; 0x2c
 801749a:	4658      	mov	r0, fp
 801749c:	f7ff fe4e 	bl	801713c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80174a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80174a2:	9a05      	ldr	r2, [sp, #20]
 80174a4:	9700      	str	r7, [sp, #0]
 80174a6:	1a1b      	subs	r3, r3, r0
 80174a8:	f04f 0a02 	mov.w	sl, #2
 80174ac:	9304      	str	r3, [sp, #16]
 80174ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80174b0:	fb93 f3fa 	sdiv	r3, r3, sl
 80174b4:	1ad2      	subs	r2, r2, r3
 80174b6:	920a      	str	r2, [sp, #40]	; 0x28
 80174b8:	9a04      	ldr	r2, [sp, #16]
 80174ba:	1ad3      	subs	r3, r2, r3
 80174bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80174be:	462a      	mov	r2, r5
 80174c0:	4633      	mov	r3, r6
 80174c2:	a90a      	add	r1, sp, #40	; 0x28
 80174c4:	4620      	mov	r0, r4
 80174c6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80174ca:	f7ff ff02 	bl	80172d2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80174ce:	9a05      	ldr	r2, [sp, #20]
 80174d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80174d2:	fb93 f3fa 	sdiv	r3, r3, sl
 80174d6:	189a      	adds	r2, r3, r2
 80174d8:	920a      	str	r2, [sp, #40]	; 0x28
 80174da:	9a04      	ldr	r2, [sp, #16]
 80174dc:	9700      	str	r7, [sp, #0]
 80174de:	4413      	add	r3, r2
 80174e0:	a90a      	add	r1, sp, #40	; 0x28
 80174e2:	462a      	mov	r2, r5
 80174e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80174e6:	4620      	mov	r0, r4
 80174e8:	4633      	mov	r3, r6
 80174ea:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80174ee:	f7ff fef0 	bl	80172d2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80174f2:	9806      	ldr	r0, [sp, #24]
 80174f4:	f7ff fe50 	bl	8017198 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80174f8:	4629      	mov	r1, r5
 80174fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80174fc:	4658      	mov	r0, fp
 80174fe:	f7ff fe1d 	bl	801713c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017502:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017504:	18c3      	adds	r3, r0, r3
 8017506:	9806      	ldr	r0, [sp, #24]
 8017508:	9304      	str	r3, [sp, #16]
 801750a:	f7ff fe66 	bl	80171da <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801750e:	4629      	mov	r1, r5
 8017510:	900b      	str	r0, [sp, #44]	; 0x2c
 8017512:	4658      	mov	r0, fp
 8017514:	f7ff fe12 	bl	801713c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017518:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801751a:	9a04      	ldr	r2, [sp, #16]
 801751c:	9700      	str	r7, [sp, #0]
 801751e:	eba3 0b00 	sub.w	fp, r3, r0
 8017522:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017524:	fb93 f3fa 	sdiv	r3, r3, sl
 8017528:	1ad2      	subs	r2, r2, r3
 801752a:	ebab 0303 	sub.w	r3, fp, r3
 801752e:	920a      	str	r2, [sp, #40]	; 0x28
 8017530:	930b      	str	r3, [sp, #44]	; 0x2c
 8017532:	462a      	mov	r2, r5
 8017534:	4633      	mov	r3, r6
 8017536:	a90a      	add	r1, sp, #40	; 0x28
 8017538:	4620      	mov	r0, r4
 801753a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801753e:	f7ff fec8 	bl	80172d2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017542:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017544:	fb93 fafa 	sdiv	sl, r3, sl
 8017548:	9b04      	ldr	r3, [sp, #16]
 801754a:	9700      	str	r7, [sp, #0]
 801754c:	4453      	add	r3, sl
 801754e:	930a      	str	r3, [sp, #40]	; 0x28
 8017550:	eb0a 030b 	add.w	r3, sl, fp
 8017554:	930b      	str	r3, [sp, #44]	; 0x2c
 8017556:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801755a:	4633      	mov	r3, r6
 801755c:	462a      	mov	r2, r5
 801755e:	a90a      	add	r1, sp, #40	; 0x28
 8017560:	4620      	mov	r0, r4
 8017562:	f7ff feb6 	bl	80172d2 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017566:	b00d      	add	sp, #52	; 0x34
 8017568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801756c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801756e:	9700      	str	r7, [sp, #0]
 8017570:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017574:	930b      	str	r3, [sp, #44]	; 0x2c
 8017576:	462a      	mov	r2, r5
 8017578:	4633      	mov	r3, r6
 801757a:	a907      	add	r1, sp, #28
 801757c:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017580:	4620      	mov	r0, r4
 8017582:	f7ff febf 	bl	8017304 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017586:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017588:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801758a:	9700      	str	r7, [sp, #0]
 801758c:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017590:	930b      	str	r3, [sp, #44]	; 0x2c
 8017592:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017596:	4633      	mov	r3, r6
 8017598:	462a      	mov	r2, r5
 801759a:	a906      	add	r1, sp, #24
 801759c:	e75d      	b.n	801745a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

0801759e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 801759e:	b530      	push	{r4, r5, lr}
 80175a0:	4604      	mov	r4, r0
 80175a2:	4608      	mov	r0, r1
 80175a4:	4611      	mov	r1, r2
 80175a6:	461a      	mov	r2, r3
 80175a8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80175ac:	b089      	sub	sp, #36	; 0x24
 80175ae:	015b      	lsls	r3, r3, #5
 80175b0:	9304      	str	r3, [sp, #16]
 80175b2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80175b6:	2500      	movs	r5, #0
 80175b8:	015b      	lsls	r3, r3, #5
 80175ba:	e9cd 3506 	strd	r3, r5, [sp, #24]
 80175be:	ab07      	add	r3, sp, #28
 80175c0:	9302      	str	r3, [sp, #8]
 80175c2:	ab06      	add	r3, sp, #24
 80175c4:	9301      	str	r3, [sp, #4]
 80175c6:	ab05      	add	r3, sp, #20
 80175c8:	9300      	str	r3, [sp, #0]
 80175ca:	ab04      	add	r3, sp, #16
 80175cc:	9505      	str	r5, [sp, #20]
 80175ce:	f7ff fece 	bl	801736e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 80175d2:	2520      	movs	r5, #32
 80175d4:	9a04      	ldr	r2, [sp, #16]
 80175d6:	9805      	ldr	r0, [sp, #20]
 80175d8:	fb92 f2f5 	sdiv	r2, r2, r5
 80175dc:	fb90 f0f5 	sdiv	r0, r0, r5
 80175e0:	b292      	uxth	r2, r2
 80175e2:	3002      	adds	r0, #2
 80175e4:	1a80      	subs	r0, r0, r2
 80175e6:	9b06      	ldr	r3, [sp, #24]
 80175e8:	9907      	ldr	r1, [sp, #28]
 80175ea:	fb93 f3f5 	sdiv	r3, r3, r5
 80175ee:	fb91 f1f5 	sdiv	r1, r1, r5
 80175f2:	b29b      	uxth	r3, r3
 80175f4:	3102      	adds	r1, #2
 80175f6:	1ac9      	subs	r1, r1, r3
 80175f8:	3a01      	subs	r2, #1
 80175fa:	3b01      	subs	r3, #1
 80175fc:	80a0      	strh	r0, [r4, #4]
 80175fe:	4620      	mov	r0, r4
 8017600:	8022      	strh	r2, [r4, #0]
 8017602:	8063      	strh	r3, [r4, #2]
 8017604:	80e1      	strh	r1, [r4, #6]
 8017606:	b009      	add	sp, #36	; 0x24
 8017608:	bd30      	pop	{r4, r5, pc}

0801760a <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 801760a:	b510      	push	{r4, lr}
 801760c:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8017610:	4604      	mov	r4, r0
 8017612:	f7ff ffc4 	bl	801759e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8017616:	4620      	mov	r0, r4
 8017618:	bd10      	pop	{r4, pc}

0801761a <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 801761a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801761c:	e9d1 540f 	ldrd	r5, r4, [r1, #60]	; 0x3c
 8017620:	4606      	mov	r6, r0
 8017622:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
 8017626:	6813      	ldr	r3, [r2, #0]
 8017628:	42a5      	cmp	r5, r4
 801762a:	ea4f 1040 	mov.w	r0, r0, lsl #5
 801762e:	da2b      	bge.n	8017688 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 8017630:	42a3      	cmp	r3, r4
 8017632:	dd14      	ble.n	801765e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 8017634:	b168      	cbz	r0, 8017652 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8017636:	4267      	negs	r7, r4
 8017638:	fb97 f2f0 	sdiv	r2, r7, r0
 801763c:	fb00 7212 	mls	r2, r0, r2, r7
 8017640:	1a82      	subs	r2, r0, r2
 8017642:	fb92 f7f0 	sdiv	r7, r2, r0
 8017646:	fb00 2017 	mls	r0, r0, r7, r2
 801764a:	1a24      	subs	r4, r4, r0
 801764c:	42ac      	cmp	r4, r5
 801764e:	bfb8      	it	lt
 8017650:	462c      	movlt	r4, r5
 8017652:	4630      	mov	r0, r6
 8017654:	4622      	mov	r2, r4
 8017656:	f7ff ffa2 	bl	801759e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 801765a:	4630      	mov	r0, r6
 801765c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801765e:	42ab      	cmp	r3, r5
 8017660:	dd0e      	ble.n	8017680 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8017662:	b168      	cbz	r0, 8017680 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8017664:	425f      	negs	r7, r3
 8017666:	fb97 f2f0 	sdiv	r2, r7, r0
 801766a:	fb00 7212 	mls	r2, r0, r2, r7
 801766e:	1a82      	subs	r2, r0, r2
 8017670:	fb92 f7f0 	sdiv	r7, r2, r0
 8017674:	fb00 2017 	mls	r0, r0, r7, r2
 8017678:	1a1b      	subs	r3, r3, r0
 801767a:	42ab      	cmp	r3, r5
 801767c:	bfb8      	it	lt
 801767e:	462b      	movlt	r3, r5
 8017680:	4622      	mov	r2, r4
 8017682:	461c      	mov	r4, r3
 8017684:	4613      	mov	r3, r2
 8017686:	e7e4      	b.n	8017652 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8017688:	42a3      	cmp	r3, r4
 801768a:	da10      	bge.n	80176ae <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 801768c:	b148      	cbz	r0, 80176a2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 801768e:	fb94 f2f0 	sdiv	r2, r4, r0
 8017692:	fb00 4212 	mls	r2, r0, r2, r4
 8017696:	1a82      	subs	r2, r0, r2
 8017698:	fb92 f7f0 	sdiv	r7, r2, r0
 801769c:	fb00 2017 	mls	r0, r0, r7, r2
 80176a0:	4404      	add	r4, r0
 80176a2:	42a5      	cmp	r5, r4
 80176a4:	bfa8      	it	ge
 80176a6:	4625      	movge	r5, r4
 80176a8:	461c      	mov	r4, r3
 80176aa:	462b      	mov	r3, r5
 80176ac:	e7d1      	b.n	8017652 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 80176ae:	42ab      	cmp	r3, r5
 80176b0:	dacf      	bge.n	8017652 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 80176b2:	2800      	cmp	r0, #0
 80176b4:	d0cd      	beq.n	8017652 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 80176b6:	fb93 f2f0 	sdiv	r2, r3, r0
 80176ba:	fb00 3212 	mls	r2, r0, r2, r3
 80176be:	1a82      	subs	r2, r0, r2
 80176c0:	fb92 f7f0 	sdiv	r7, r2, r0
 80176c4:	fb00 2017 	mls	r0, r0, r7, r2
 80176c8:	4403      	add	r3, r0
 80176ca:	42ab      	cmp	r3, r5
 80176cc:	bfa8      	it	ge
 80176ce:	462b      	movge	r3, r5
 80176d0:	e7bf      	b.n	8017652 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

080176d2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 80176d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176d6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80176d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80176da:	b0ba      	sub	sp, #232	; 0xe8
 80176dc:	429a      	cmp	r2, r3
 80176de:	9303      	str	r3, [sp, #12]
 80176e0:	9204      	str	r2, [sp, #16]
 80176e2:	bfb8      	it	lt
 80176e4:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 80176e8:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80176ec:	1a9b      	subs	r3, r3, r2
 80176ee:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80176f2:	bfa2      	ittt	ge
 80176f4:	2200      	movge	r2, #0
 80176f6:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 80176fa:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 80176fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017700:	4604      	mov	r4, r0
 8017702:	460f      	mov	r7, r1
 8017704:	ae0a      	add	r6, sp, #40	; 0x28
 8017706:	2a00      	cmp	r2, #0
 8017708:	d131      	bne.n	801776e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 801770a:	463a      	mov	r2, r7
 801770c:	4621      	mov	r1, r4
 801770e:	a80b      	add	r0, sp, #44	; 0x2c
 8017710:	f012 fd50 	bl	802a1b4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8017714:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017716:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017718:	9205      	str	r2, [sp, #20]
 801771a:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801771e:	9306      	str	r3, [sp, #24]
 8017720:	dc6d      	bgt.n	80177fe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x12c>
 8017722:	9b03      	ldr	r3, [sp, #12]
 8017724:	9307      	str	r3, [sp, #28]
 8017726:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 801772a:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 801772e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017732:	930a      	str	r3, [sp, #40]	; 0x28
 8017734:	aa07      	add	r2, sp, #28
 8017736:	4633      	mov	r3, r6
 8017738:	a90b      	add	r1, sp, #44	; 0x2c
 801773a:	4620      	mov	r0, r4
 801773c:	016d      	lsls	r5, r5, #5
 801773e:	f7ff fd6b 	bl	8017218 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017742:	9f07      	ldr	r7, [sp, #28]
 8017744:	2d00      	cmp	r5, #0
 8017746:	d163      	bne.n	8017810 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x13e>
 8017748:	3720      	adds	r7, #32
 801774a:	9a04      	ldr	r2, [sp, #16]
 801774c:	9b06      	ldr	r3, [sp, #24]
 801774e:	4639      	mov	r1, r7
 8017750:	4291      	cmp	r1, r2
 8017752:	442f      	add	r7, r5
 8017754:	dc69      	bgt.n	801782a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x158>
 8017756:	9a05      	ldr	r2, [sp, #20]
 8017758:	9107      	str	r1, [sp, #28]
 801775a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801775e:	930a      	str	r3, [sp, #40]	; 0x28
 8017760:	aa07      	add	r2, sp, #28
 8017762:	4633      	mov	r3, r6
 8017764:	a90b      	add	r1, sp, #44	; 0x2c
 8017766:	4620      	mov	r0, r4
 8017768:	f7ff fda8 	bl	80172bc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801776c:	e7ed      	b.n	801774a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 801776e:	f9b1 c000 	ldrsh.w	ip, [r1]
 8017772:	88bd      	ldrh	r5, [r7, #4]
 8017774:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8017778:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 801777c:	4465      	add	r5, ip
 801777e:	b22d      	sxth	r5, r5
 8017780:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 8017784:	2d00      	cmp	r5, #0
 8017786:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 801778a:	bfb8      	it	lt
 801778c:	426d      	neglt	r5, r5
 801778e:	2b00      	cmp	r3, #0
 8017790:	bfb8      	it	lt
 8017792:	425b      	neglt	r3, r3
 8017794:	429d      	cmp	r5, r3
 8017796:	bfb8      	it	lt
 8017798:	461d      	movlt	r5, r3
 801779a:	88fb      	ldrh	r3, [r7, #6]
 801779c:	4403      	add	r3, r0
 801779e:	b21b      	sxth	r3, r3
 80177a0:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 80177aa:	bfb8      	it	lt
 80177ac:	425b      	neglt	r3, r3
 80177ae:	2900      	cmp	r1, #0
 80177b0:	bfb8      	it	lt
 80177b2:	4249      	neglt	r1, r1
 80177b4:	428b      	cmp	r3, r1
 80177b6:	bfb8      	it	lt
 80177b8:	460b      	movlt	r3, r1
 80177ba:	115b      	asrs	r3, r3, #5
 80177bc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80177c0:	116d      	asrs	r5, r5, #5
 80177c2:	3301      	adds	r3, #1
 80177c4:	435b      	muls	r3, r3
 80177c6:	3501      	adds	r5, #1
 80177c8:	fb05 3505 	mla	r5, r5, r5, r3
 80177cc:	3001      	adds	r0, #1
 80177ce:	2302      	movs	r3, #2
 80177d0:	fb92 f2f3 	sdiv	r2, r2, r3
 80177d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80177d6:	1040      	asrs	r0, r0, #1
 80177d8:	1a9a      	subs	r2, r3, r2
 80177da:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80177de:	920a      	str	r2, [sp, #40]	; 0x28
 80177e0:	f7ff fcb8 	bl	8017154 <_ZN8touchgfx7CWRUtil4sineEi>
 80177e4:	a90b      	add	r1, sp, #44	; 0x2c
 80177e6:	900b      	str	r0, [sp, #44]	; 0x2c
 80177e8:	4630      	mov	r0, r6
 80177ea:	f7ff fca7 	bl	801713c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80177ee:	2320      	movs	r3, #32
 80177f0:	fb90 f0f3 	sdiv	r0, r0, r3
 80177f4:	4340      	muls	r0, r0
 80177f6:	42a8      	cmp	r0, r5
 80177f8:	dd87      	ble.n	801770a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 80177fa:	2401      	movs	r4, #1
 80177fc:	e037      	b.n	801786e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19c>
 80177fe:	2102      	movs	r1, #2
 8017800:	fb93 f3f1 	sdiv	r3, r3, r1
 8017804:	4413      	add	r3, r2
 8017806:	9306      	str	r3, [sp, #24]
 8017808:	fb93 f3f1 	sdiv	r3, r3, r1
 801780c:	9305      	str	r3, [sp, #20]
 801780e:	e788      	b.n	8017722 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 8017810:	f107 0320 	add.w	r3, r7, #32
 8017814:	fb93 f7f5 	sdiv	r7, r3, r5
 8017818:	fb05 3717 	mls	r7, r5, r7, r3
 801781c:	1bea      	subs	r2, r5, r7
 801781e:	fb92 f7f5 	sdiv	r7, r2, r5
 8017822:	fb05 2717 	mls	r7, r5, r7, r2
 8017826:	441f      	add	r7, r3
 8017828:	e78f      	b.n	801774a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 801782a:	9907      	ldr	r1, [sp, #28]
 801782c:	428a      	cmp	r2, r1
 801782e:	dd09      	ble.n	8017844 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x172>
 8017830:	9a05      	ldr	r2, [sp, #20]
 8017832:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017836:	930a      	str	r3, [sp, #40]	; 0x28
 8017838:	aa04      	add	r2, sp, #16
 801783a:	4633      	mov	r3, r6
 801783c:	a90b      	add	r1, sp, #44	; 0x2c
 801783e:	4620      	mov	r0, r4
 8017840:	f7ff fd3c 	bl	80172bc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017844:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8017848:	9a06      	ldr	r2, [sp, #24]
 801784a:	1ac3      	subs	r3, r0, r3
 801784c:	b99a      	cbnz	r2, 8017876 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a4>
 801784e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017852:	da04      	bge.n	801785e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 8017854:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8017858:	a80b      	add	r0, sp, #44	; 0x2c
 801785a:	f012 fe05 	bl	802a468 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801785e:	21ff      	movs	r1, #255	; 0xff
 8017860:	a80b      	add	r0, sp, #44	; 0x2c
 8017862:	f012 ff76 	bl	802a752 <_ZN8touchgfx6Canvas6renderEh>
 8017866:	4604      	mov	r4, r0
 8017868:	a80b      	add	r0, sp, #44	; 0x2c
 801786a:	f012 ffb1 	bl	802a7d0 <_ZN8touchgfx6CanvasD1Ev>
 801786e:	4620      	mov	r0, r4
 8017870:	b03a      	add	sp, #232	; 0xe8
 8017872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017876:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 801787a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801787e:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8017882:	da2b      	bge.n	80178dc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20a>
 8017884:	f7ff fc88 	bl	8017198 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017888:	4631      	mov	r1, r6
 801788a:	900a      	str	r0, [sp, #40]	; 0x28
 801788c:	a805      	add	r0, sp, #20
 801788e:	f7ff fc55 	bl	801713c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017892:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017894:	4418      	add	r0, r3
 8017896:	9008      	str	r0, [sp, #32]
 8017898:	9804      	ldr	r0, [sp, #16]
 801789a:	f7ff fc9e 	bl	80171da <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801789e:	4631      	mov	r1, r6
 80178a0:	900a      	str	r0, [sp, #40]	; 0x28
 80178a2:	a805      	add	r0, sp, #20
 80178a4:	f7ff fc4a 	bl	801713c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80178a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80178aa:	1a18      	subs	r0, r3, r0
 80178ac:	9b04      	ldr	r3, [sp, #16]
 80178ae:	9009      	str	r0, [sp, #36]	; 0x24
 80178b0:	443b      	add	r3, r7
 80178b2:	930a      	str	r3, [sp, #40]	; 0x28
 80178b4:	f10d 0818 	add.w	r8, sp, #24
 80178b8:	9b04      	ldr	r3, [sp, #16]
 80178ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80178bc:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80178c0:	4293      	cmp	r3, r2
 80178c2:	dd0b      	ble.n	80178dc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20a>
 80178c4:	ab09      	add	r3, sp, #36	; 0x24
 80178c6:	e9cd 6800 	strd	r6, r8, [sp]
 80178ca:	aa08      	add	r2, sp, #32
 80178cc:	a90b      	add	r1, sp, #44	; 0x2c
 80178ce:	4620      	mov	r0, r4
 80178d0:	f7ff fccb 	bl	801726a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 80178d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178d6:	443b      	add	r3, r7
 80178d8:	930a      	str	r3, [sp, #40]	; 0x28
 80178da:	e7ed      	b.n	80178b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e6>
 80178dc:	9a04      	ldr	r2, [sp, #16]
 80178de:	9b07      	ldr	r3, [sp, #28]
 80178e0:	429a      	cmp	r2, r3
 80178e2:	dd0a      	ble.n	80178fa <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x228>
 80178e4:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80178e8:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80178ec:	930a      	str	r3, [sp, #40]	; 0x28
 80178ee:	aa04      	add	r2, sp, #16
 80178f0:	4633      	mov	r3, r6
 80178f2:	a90b      	add	r1, sp, #44	; 0x2c
 80178f4:	4620      	mov	r0, r4
 80178f6:	f7ff fce1 	bl	80172bc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80178fa:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80178fe:	9b03      	ldr	r3, [sp, #12]
 8017900:	4642      	mov	r2, r8
 8017902:	429a      	cmp	r2, r3
 8017904:	eba8 0805 	sub.w	r8, r8, r5
 8017908:	db0c      	blt.n	8017924 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x252>
 801790a:	9207      	str	r2, [sp, #28]
 801790c:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8017910:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017914:	930a      	str	r3, [sp, #40]	; 0x28
 8017916:	aa07      	add	r2, sp, #28
 8017918:	4633      	mov	r3, r6
 801791a:	a90b      	add	r1, sp, #44	; 0x2c
 801791c:	4620      	mov	r0, r4
 801791e:	f7ff fccd 	bl	80172bc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017922:	e7ec      	b.n	80178fe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22c>
 8017924:	9a07      	ldr	r2, [sp, #28]
 8017926:	4293      	cmp	r3, r2
 8017928:	da0a      	bge.n	8017940 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x26e>
 801792a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 801792e:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017932:	930a      	str	r3, [sp, #40]	; 0x28
 8017934:	aa03      	add	r2, sp, #12
 8017936:	4633      	mov	r3, r6
 8017938:	a90b      	add	r1, sp, #44	; 0x2c
 801793a:	4620      	mov	r0, r4
 801793c:	f7ff fcbe 	bl	80172bc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017940:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 8017944:	1a1b      	subs	r3, r3, r0
 8017946:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801794a:	da88      	bge.n	801785e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 801794c:	f7ff fc24 	bl	8017198 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017950:	4631      	mov	r1, r6
 8017952:	900a      	str	r0, [sp, #40]	; 0x28
 8017954:	a805      	add	r0, sp, #20
 8017956:	f7ff fbf1 	bl	801713c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801795a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801795c:	4418      	add	r0, r3
 801795e:	9008      	str	r0, [sp, #32]
 8017960:	9803      	ldr	r0, [sp, #12]
 8017962:	f7ff fc3a 	bl	80171da <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017966:	4631      	mov	r1, r6
 8017968:	900a      	str	r0, [sp, #40]	; 0x28
 801796a:	a805      	add	r0, sp, #20
 801796c:	f7ff fbe6 	bl	801713c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017970:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017972:	1a18      	subs	r0, r3, r0
 8017974:	9b03      	ldr	r3, [sp, #12]
 8017976:	9009      	str	r0, [sp, #36]	; 0x24
 8017978:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 801797c:	443b      	add	r3, r7
 801797e:	930a      	str	r3, [sp, #40]	; 0x28
 8017980:	ad06      	add	r5, sp, #24
 8017982:	9a03      	ldr	r2, [sp, #12]
 8017984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017986:	429a      	cmp	r2, r3
 8017988:	f77f af69 	ble.w	801785e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 801798c:	ab09      	add	r3, sp, #36	; 0x24
 801798e:	e9cd 6500 	strd	r6, r5, [sp]
 8017992:	aa08      	add	r2, sp, #32
 8017994:	a90b      	add	r1, sp, #44	; 0x2c
 8017996:	4620      	mov	r0, r4
 8017998:	f7ff fc67 	bl	801726a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 801799c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801799e:	443b      	add	r3, r7
 80179a0:	930a      	str	r3, [sp, #40]	; 0x28
 80179a2:	e7ee      	b.n	8017982 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b0>

080179a4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 80179a4:	6281      	str	r1, [r0, #40]	; 0x28
 80179a6:	4770      	bx	lr

080179a8 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 80179a8:	b510      	push	{r4, lr}
 80179aa:	2200      	movs	r2, #0
 80179ac:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80179b0:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80179b4:	8002      	strh	r2, [r0, #0]
 80179b6:	8042      	strh	r2, [r0, #2]
 80179b8:	8084      	strh	r4, [r0, #4]
 80179ba:	80c1      	strh	r1, [r0, #6]
 80179bc:	bd10      	pop	{r4, pc}

080179be <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80179be:	2200      	movs	r2, #0
 80179c0:	8002      	strh	r2, [r0, #0]
 80179c2:	8042      	strh	r2, [r0, #2]
 80179c4:	8082      	strh	r2, [r0, #4]
 80179c6:	80c2      	strh	r2, [r0, #6]
 80179c8:	4770      	bx	lr
	...

080179cc <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 80179cc:	b508      	push	{r3, lr}
 80179ce:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80179d0:	b928      	cbnz	r0, 80179de <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 80179d2:	4b03      	ldr	r3, [pc, #12]	; (80179e0 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 80179d4:	4a03      	ldr	r2, [pc, #12]	; (80179e4 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 80179d6:	4804      	ldr	r0, [pc, #16]	; (80179e8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 80179d8:	2126      	movs	r1, #38	; 0x26
 80179da:	f014 fe85 	bl	802c6e8 <__assert_func>
 80179de:	bd08      	pop	{r3, pc}
 80179e0:	080306fc 	.word	0x080306fc
 80179e4:	080307dc 	.word	0x080307dc
 80179e8:	08030723 	.word	0x08030723

080179ec <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80179ec:	b510      	push	{r4, lr}
 80179ee:	f9b1 4000 	ldrsh.w	r4, [r1]
 80179f2:	888a      	ldrh	r2, [r1, #4]
 80179f4:	f9b0 3000 	ldrsh.w	r3, [r0]
 80179f8:	4422      	add	r2, r4
 80179fa:	b212      	sxth	r2, r2
 80179fc:	4293      	cmp	r3, r2
 80179fe:	da15      	bge.n	8017a2c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017a00:	8882      	ldrh	r2, [r0, #4]
 8017a02:	4413      	add	r3, r2
 8017a04:	b21b      	sxth	r3, r3
 8017a06:	429c      	cmp	r4, r3
 8017a08:	da10      	bge.n	8017a2c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017a0a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017a0e:	88c9      	ldrh	r1, [r1, #6]
 8017a10:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017a14:	4419      	add	r1, r3
 8017a16:	b209      	sxth	r1, r1
 8017a18:	428a      	cmp	r2, r1
 8017a1a:	da07      	bge.n	8017a2c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017a1c:	88c0      	ldrh	r0, [r0, #6]
 8017a1e:	4410      	add	r0, r2
 8017a20:	b200      	sxth	r0, r0
 8017a22:	4283      	cmp	r3, r0
 8017a24:	bfac      	ite	ge
 8017a26:	2000      	movge	r0, #0
 8017a28:	2001      	movlt	r0, #1
 8017a2a:	bd10      	pop	{r4, pc}
 8017a2c:	2000      	movs	r0, #0
 8017a2e:	e7fc      	b.n	8017a2a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08017a30 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8017a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a34:	4604      	mov	r4, r0
 8017a36:	b08b      	sub	sp, #44	; 0x2c
 8017a38:	6808      	ldr	r0, [r1, #0]
 8017a3a:	6849      	ldr	r1, [r1, #4]
 8017a3c:	ab04      	add	r3, sp, #16
 8017a3e:	c303      	stmia	r3!, {r0, r1}
 8017a40:	4b37      	ldr	r3, [pc, #220]	; (8017b20 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 8017a42:	781b      	ldrb	r3, [r3, #0]
 8017a44:	2b01      	cmp	r3, #1
 8017a46:	6823      	ldr	r3, [r4, #0]
 8017a48:	4621      	mov	r1, r4
 8017a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a4c:	a806      	add	r0, sp, #24
 8017a4e:	bf1f      	itttt	ne
 8017a50:	f10d 090e 	addne.w	r9, sp, #14
 8017a54:	ae05      	addne	r6, sp, #20
 8017a56:	f10d 0516 	addne.w	r5, sp, #22
 8017a5a:	f10d 0812 	addne.w	r8, sp, #18
 8017a5e:	bf01      	itttt	eq
 8017a60:	f10d 0916 	addeq.w	r9, sp, #22
 8017a64:	f10d 060e 	addeq.w	r6, sp, #14
 8017a68:	ad05      	addeq	r5, sp, #20
 8017a6a:	f10d 0810 	addeq.w	r8, sp, #16
 8017a6e:	4798      	blx	r3
 8017a70:	f04f 0a00 	mov.w	sl, #0
 8017a74:	f647 7bff 	movw	fp, #32767	; 0x7fff
 8017a78:	f9b5 3000 	ldrsh.w	r3, [r5]
 8017a7c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d042      	beq.n	8017b0a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 8017a84:	4293      	cmp	r3, r2
 8017a86:	bfa8      	it	ge
 8017a88:	4613      	movge	r3, r2
 8017a8a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017a8e:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8017a92:	2f00      	cmp	r7, #0
 8017a94:	dd21      	ble.n	8017ada <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 8017a96:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8017a9a:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8017a9e:	f9b6 2000 	ldrsh.w	r2, [r6]
 8017aa2:	f9b9 3000 	ldrsh.w	r3, [r9]
 8017aa6:	f8ad 0020 	strh.w	r0, [sp, #32]
 8017aaa:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8017aae:	a808      	add	r0, sp, #32
 8017ab0:	a906      	add	r1, sp, #24
 8017ab2:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8017ab6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017aba:	f7ff ff97 	bl	80179ec <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017abe:	9001      	str	r0, [sp, #4]
 8017ac0:	b1d0      	cbz	r0, 8017af8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8017ac2:	6822      	ldr	r2, [r4, #0]
 8017ac4:	a908      	add	r1, sp, #32
 8017ac6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8017ac8:	4620      	mov	r0, r4
 8017aca:	4790      	blx	r2
 8017acc:	b9a0      	cbnz	r0, 8017af8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8017ace:	9b01      	ldr	r3, [sp, #4]
 8017ad0:	107f      	asrs	r7, r7, #1
 8017ad2:	f8ad 700e 	strh.w	r7, [sp, #14]
 8017ad6:	469a      	mov	sl, r3
 8017ad8:	e7d9      	b.n	8017a8e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8017ada:	d10d      	bne.n	8017af8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8017adc:	2301      	movs	r3, #1
 8017ade:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017ae2:	f8b8 2000 	ldrh.w	r2, [r8]
 8017ae6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8017aea:	440a      	add	r2, r1
 8017aec:	f8a8 2000 	strh.w	r2, [r8]
 8017af0:	882b      	ldrh	r3, [r5, #0]
 8017af2:	1a5b      	subs	r3, r3, r1
 8017af4:	802b      	strh	r3, [r5, #0]
 8017af6:	e7bf      	b.n	8017a78 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017af8:	f1ba 0f00 	cmp.w	sl, #0
 8017afc:	d0f1      	beq.n	8017ae2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8017afe:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8017b02:	455b      	cmp	r3, fp
 8017b04:	bf08      	it	eq
 8017b06:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8017b08:	e7eb      	b.n	8017ae2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8017b0a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017b0e:	429a      	cmp	r2, r3
 8017b10:	bf04      	itt	eq
 8017b12:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8017b16:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8017b18:	b00b      	add	sp, #44	; 0x2c
 8017b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b1e:	bf00      	nop
 8017b20:	200067c8 	.word	0x200067c8

08017b24 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8017b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b26:	6803      	ldr	r3, [r0, #0]
 8017b28:	b085      	sub	sp, #20
 8017b2a:	4604      	mov	r4, r0
 8017b2c:	4601      	mov	r1, r0
 8017b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b30:	4668      	mov	r0, sp
 8017b32:	4798      	blx	r3
 8017b34:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 8017b38:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8017b3c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8017b40:	2300      	movs	r3, #0
 8017b42:	a902      	add	r1, sp, #8
 8017b44:	4668      	mov	r0, sp
 8017b46:	9302      	str	r3, [sp, #8]
 8017b48:	f8ad 500e 	strh.w	r5, [sp, #14]
 8017b4c:	f7ff ff4e 	bl	80179ec <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017b50:	b340      	cbz	r0, 8017ba4 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 8017b52:	f9bd 2000 	ldrsh.w	r2, [sp]
 8017b56:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 8017b5a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8017b5e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8017b62:	443a      	add	r2, r7
 8017b64:	b292      	uxth	r2, r2
 8017b66:	b217      	sxth	r7, r2
 8017b68:	42be      	cmp	r6, r7
 8017b6a:	bfd8      	it	le
 8017b6c:	b2b2      	uxthle	r2, r6
 8017b6e:	1a12      	subs	r2, r2, r0
 8017b70:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017b74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017b78:	f8ad 0000 	strh.w	r0, [sp]
 8017b7c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 8017b80:	4413      	add	r3, r2
 8017b82:	b29b      	uxth	r3, r3
 8017b84:	b21a      	sxth	r2, r3
 8017b86:	4295      	cmp	r5, r2
 8017b88:	bfd8      	it	le
 8017b8a:	b2ab      	uxthle	r3, r5
 8017b8c:	1a5b      	subs	r3, r3, r1
 8017b8e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017b92:	f8ad 1002 	strh.w	r1, [sp, #2]
 8017b96:	6823      	ldr	r3, [r4, #0]
 8017b98:	4669      	mov	r1, sp
 8017b9a:	691b      	ldr	r3, [r3, #16]
 8017b9c:	4620      	mov	r0, r4
 8017b9e:	4798      	blx	r3
 8017ba0:	b005      	add	sp, #20
 8017ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ba4:	e9cd 0000 	strd	r0, r0, [sp]
 8017ba8:	e7f5      	b.n	8017b96 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

08017bac <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8017bac:	2200      	movs	r2, #0
 8017bae:	8082      	strh	r2, [r0, #4]
 8017bb0:	80c2      	strh	r2, [r0, #6]
 8017bb2:	8102      	strh	r2, [r0, #8]
 8017bb4:	8142      	strh	r2, [r0, #10]
 8017bb6:	8182      	strh	r2, [r0, #12]
 8017bb8:	81c2      	strh	r2, [r0, #14]
 8017bba:	8202      	strh	r2, [r0, #16]
 8017bbc:	8242      	strh	r2, [r0, #18]
 8017bbe:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017bc2:	61c2      	str	r2, [r0, #28]
 8017bc4:	8402      	strh	r2, [r0, #32]
 8017bc6:	8442      	strh	r2, [r0, #34]	; 0x22
 8017bc8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8017bcc:	2101      	movs	r1, #1
 8017bce:	6282      	str	r2, [r0, #40]	; 0x28
 8017bd0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017bd4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8017bd8:	8582      	strh	r2, [r0, #44]	; 0x2c
 8017bda:	4903      	ldr	r1, [pc, #12]	; (8017be8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 8017bdc:	6001      	str	r1, [r0, #0]
 8017bde:	22ff      	movs	r2, #255	; 0xff
 8017be0:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8017be4:	4770      	bx	lr
 8017be6:	bf00      	nop
 8017be8:	08030768 	.word	0x08030768

08017bec <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 8017bec:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8017bf0:	4770      	bx	lr

08017bf2 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 8017bf2:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8017bf6:	4770      	bx	lr

08017bf8 <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 8017bf8:	6802      	ldr	r2, [r0, #0]
 8017bfa:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8017bfe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8017c00:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8017c04:	4710      	bx	r2

08017c06 <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 8017c06:	6802      	ldr	r2, [r0, #0]
 8017c08:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8017c0c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8017c0e:	eef0 0a40 	vmov.f32	s1, s0
 8017c12:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8017c16:	4710      	bx	r2

08017c18 <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 8017c18:	6802      	ldr	r2, [r0, #0]
 8017c1a:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8017c1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8017c20:	eeb0 1a40 	vmov.f32	s2, s0
 8017c24:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8017c28:	4710      	bx	r2

08017c2a <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 8017c2a:	6802      	ldr	r2, [r0, #0]
 8017c2c:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8017c30:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017c32:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8017c36:	4710      	bx	r2

08017c38 <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 8017c38:	6802      	ldr	r2, [r0, #0]
 8017c3a:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8017c3e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017c40:	eef0 0a40 	vmov.f32	s1, s0
 8017c44:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8017c48:	4710      	bx	r2

08017c4a <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 8017c4a:	6802      	ldr	r2, [r0, #0]
 8017c4c:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8017c50:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017c52:	eeb0 1a40 	vmov.f32	s2, s0
 8017c56:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8017c5a:	4710      	bx	r2

08017c5c <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 8017c5c:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8017c60:	4770      	bx	lr

08017c62 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 8017c62:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 8017c66:	4770      	bx	lr

08017c68 <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 8017c68:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 8017c6c:	4770      	bx	lr

08017c6e <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 8017c6e:	ed90 0a10 	vldr	s0, [r0, #64]	; 0x40
 8017c72:	4770      	bx	lr

08017c74 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 8017c74:	ed90 0a11 	vldr	s0, [r0, #68]	; 0x44
 8017c78:	4770      	bx	lr

08017c7a <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 8017c7a:	ed90 0a12 	vldr	s0, [r0, #72]	; 0x48
 8017c7e:	4770      	bx	lr

08017c80 <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 8017c80:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 8017c84:	4770      	bx	lr

08017c86 <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 8017c86:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
 8017c8a:	4770      	bx	lr

08017c8c <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 8017c8c:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 8017c90:	4770      	bx	lr

08017c92 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 8017c92:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
 8017c96:	4770      	bx	lr

08017c98 <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 8017c98:	ee07 2a90 	vmov	s15, r2
 8017c9c:	6803      	ldr	r3, [r0, #0]
 8017c9e:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8017ca2:	ee07 1a90 	vmov	s15, r1
 8017ca6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017caa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8017cae:	4718      	bx	r3

08017cb0 <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 8017cb0:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 8017cb4:	4770      	bx	lr

08017cb6 <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 8017cb6:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 8017cba:	4770      	bx	lr

08017cbc <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 8017cbc:	ed90 0a17 	vldr	s0, [r0, #92]	; 0x5c
 8017cc0:	4770      	bx	lr

08017cc2 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 8017cc2:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 8017cc6:	4770      	bx	lr

08017cc8 <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 8017cc8:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
 8017ccc:	4770      	bx	lr

08017cce <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 8017cce:	ed90 0a20 	vldr	s0, [r0, #128]	; 0x80
 8017cd2:	4770      	bx	lr

08017cd4 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 8017cd4:	ed90 0a18 	vldr	s0, [r0, #96]	; 0x60
 8017cd8:	4770      	bx	lr

08017cda <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 8017cda:	ed90 0a1b 	vldr	s0, [r0, #108]	; 0x6c
 8017cde:	4770      	bx	lr

08017ce0 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 8017ce0:	ed90 0a1e 	vldr	s0, [r0, #120]	; 0x78
 8017ce4:	4770      	bx	lr

08017ce6 <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 8017ce6:	ed90 0a21 	vldr	s0, [r0, #132]	; 0x84
 8017cea:	4770      	bx	lr

08017cec <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 8017cec:	ed90 0a19 	vldr	s0, [r0, #100]	; 0x64
 8017cf0:	4770      	bx	lr

08017cf2 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 8017cf2:	ed90 0a1c 	vldr	s0, [r0, #112]	; 0x70
 8017cf6:	4770      	bx	lr

08017cf8 <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 8017cf8:	ed90 0a1f 	vldr	s0, [r0, #124]	; 0x7c
 8017cfc:	4770      	bx	lr

08017cfe <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 8017cfe:	ed90 0a22 	vldr	s0, [r0, #136]	; 0x88
 8017d02:	4770      	bx	lr

08017d04 <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 8017d04:	2200      	movs	r2, #0
 8017d06:	8002      	strh	r2, [r0, #0]
 8017d08:	8042      	strh	r2, [r0, #2]
 8017d0a:	8082      	strh	r2, [r0, #4]
 8017d0c:	80c2      	strh	r2, [r0, #6]
 8017d0e:	4770      	bx	lr

08017d10 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 8017d10:	b538      	push	{r3, r4, r5, lr}
 8017d12:	2500      	movs	r5, #0
 8017d14:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8017d18:	2301      	movs	r3, #1
 8017d1a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 8017d1e:	4b1f      	ldr	r3, [pc, #124]	; (8017d9c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 8017d20:	8085      	strh	r5, [r0, #4]
 8017d22:	80c5      	strh	r5, [r0, #6]
 8017d24:	8105      	strh	r5, [r0, #8]
 8017d26:	8145      	strh	r5, [r0, #10]
 8017d28:	8185      	strh	r5, [r0, #12]
 8017d2a:	81c5      	strh	r5, [r0, #14]
 8017d2c:	8205      	strh	r5, [r0, #16]
 8017d2e:	8245      	strh	r5, [r0, #18]
 8017d30:	61c5      	str	r5, [r0, #28]
 8017d32:	8405      	strh	r5, [r0, #32]
 8017d34:	8445      	strh	r5, [r0, #34]	; 0x22
 8017d36:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8017d3a:	6003      	str	r3, [r0, #0]
 8017d3c:	880b      	ldrh	r3, [r1, #0]
 8017d3e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8017d40:	23ff      	movs	r3, #255	; 0xff
 8017d42:	4604      	mov	r4, r0
 8017d44:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8017d48:	f001 f9fe 	bl	8019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017d4c:	4b14      	ldr	r3, [pc, #80]	; (8017da0 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 8017d4e:	6023      	str	r3, [r4, #0]
 8017d50:	2300      	movs	r3, #0
 8017d52:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017d56:	4913      	ldr	r1, [pc, #76]	; (8017da4 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 8017d58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017d5a:	6323      	str	r3, [r4, #48]	; 0x30
 8017d5c:	6363      	str	r3, [r4, #52]	; 0x34
 8017d5e:	63a3      	str	r3, [r4, #56]	; 0x38
 8017d60:	63e3      	str	r3, [r4, #60]	; 0x3c
 8017d62:	6463      	str	r3, [r4, #68]	; 0x44
 8017d64:	64a3      	str	r3, [r4, #72]	; 0x48
 8017d66:	6523      	str	r3, [r4, #80]	; 0x50
 8017d68:	6563      	str	r3, [r4, #84]	; 0x54
 8017d6a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017d6c:	6623      	str	r3, [r4, #96]	; 0x60
 8017d6e:	66a3      	str	r3, [r4, #104]	; 0x68
 8017d70:	66e3      	str	r3, [r4, #108]	; 0x6c
 8017d72:	6763      	str	r3, [r4, #116]	; 0x74
 8017d74:	67a3      	str	r3, [r4, #120]	; 0x78
 8017d76:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8017d7a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8017d7e:	230c      	movs	r3, #12
 8017d80:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 8017d84:	6422      	str	r2, [r4, #64]	; 0x40
 8017d86:	64e1      	str	r1, [r4, #76]	; 0x4c
 8017d88:	65a1      	str	r1, [r4, #88]	; 0x58
 8017d8a:	6662      	str	r2, [r4, #100]	; 0x64
 8017d8c:	6722      	str	r2, [r4, #112]	; 0x70
 8017d8e:	67e2      	str	r2, [r4, #124]	; 0x7c
 8017d90:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8017d94:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 8017d98:	4620      	mov	r0, r4
 8017d9a:	bd38      	pop	{r3, r4, r5, pc}
 8017d9c:	08030d18 	.word	0x08030d18
 8017da0:	08030834 	.word	0x08030834
 8017da4:	447a0000 	.word	0x447a0000

08017da8 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 8017da8:	b570      	push	{r4, r5, r6, lr}
 8017daa:	ed2d 8b04 	vpush	{d8-d9}
 8017dae:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 8017db2:	add0      	add	r5, sp, #832	; 0x340
 8017db4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8017db6:	f825 3d40 	strh.w	r3, [r5, #-64]!
 8017dba:	4604      	mov	r4, r0
 8017dbc:	4628      	mov	r0, r5
 8017dbe:	f006 fb19 	bl	801e3f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017dc2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8017dc4:	f8ad 3300 	strh.w	r3, [sp, #768]	; 0x300
 8017dc8:	4606      	mov	r6, r0
 8017dca:	4628      	mov	r0, r5
 8017dcc:	f006 fb4c 	bl	801e468 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017dd0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017dd4:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8017dd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017dda:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 8017dde:	9312      	str	r3, [sp, #72]	; 0x48
 8017de0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017de4:	1c72      	adds	r2, r6, #1
 8017de6:	3001      	adds	r0, #1
 8017de8:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8017dec:	ee07 2a90 	vmov	s15, r2
 8017df0:	ee06 0a90 	vmov	s13, r0
 8017df4:	ee36 6a47 	vsub.f32	s12, s12, s14
 8017df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017dfc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017e00:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017e04:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017e08:	9316      	str	r3, [sp, #88]	; 0x58
 8017e0a:	931a      	str	r3, [sp, #104]	; 0x68
 8017e0c:	931e      	str	r3, [sp, #120]	; 0x78
 8017e0e:	2300      	movs	r3, #0
 8017e10:	9320      	str	r3, [sp, #128]	; 0x80
 8017e12:	9321      	str	r3, [sp, #132]	; 0x84
 8017e14:	9322      	str	r3, [sp, #136]	; 0x88
 8017e16:	9324      	str	r3, [sp, #144]	; 0x90
 8017e18:	9325      	str	r3, [sp, #148]	; 0x94
 8017e1a:	9326      	str	r3, [sp, #152]	; 0x98
 8017e1c:	9328      	str	r3, [sp, #160]	; 0xa0
 8017e1e:	9329      	str	r3, [sp, #164]	; 0xa4
 8017e20:	932a      	str	r3, [sp, #168]	; 0xa8
 8017e22:	932c      	str	r3, [sp, #176]	; 0xb0
 8017e24:	932d      	str	r3, [sp, #180]	; 0xb4
 8017e26:	932e      	str	r3, [sp, #184]	; 0xb8
 8017e28:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017e2c:	edcd 5a11 	vstr	s11, [sp, #68]	; 0x44
 8017e30:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 8017e34:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8017e38:	edcd 5a15 	vstr	s11, [sp, #84]	; 0x54
 8017e3c:	ed8d 7a17 	vstr	s14, [sp, #92]	; 0x5c
 8017e40:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 8017e44:	edcd 6a19 	vstr	s13, [sp, #100]	; 0x64
 8017e48:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 8017e4c:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 8017e50:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8017e54:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
 8017e58:	a830      	add	r0, sp, #192	; 0xc0
 8017e5a:	edd4 8a12 	vldr	s17, [r4, #72]	; 0x48
 8017e5e:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 8017e62:	f005 f979 	bl	801d158 <_ZN8touchgfx9Matrix4x4C1Ev>
 8017e66:	eeb1 0a49 	vneg.f32	s0, s18
 8017e6a:	a830      	add	r0, sp, #192	; 0xc0
 8017e6c:	f005 fa48 	bl	801d300 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8017e70:	eeb1 0a68 	vneg.f32	s0, s17
 8017e74:	f005 fa52 	bl	801d31c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8017e78:	eeb1 0a48 	vneg.f32	s0, s16
 8017e7c:	f005 fa5d 	bl	801d33a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8017e80:	a840      	add	r0, sp, #256	; 0x100
 8017e82:	f005 f969 	bl	801d158 <_ZN8touchgfx9Matrix4x4C1Ev>
 8017e86:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8017e8a:	a840      	add	r0, sp, #256	; 0x100
 8017e8c:	f005 f9bc 	bl	801d208 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 8017e90:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 8017e94:	f005 f9e2 	bl	801d25c <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 8017e98:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 8017e9c:	f005 fa07 	bl	801d2ae <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 8017ea0:	a850      	add	r0, sp, #320	; 0x140
 8017ea2:	f005 f959 	bl	801d158 <_ZN8touchgfx9Matrix4x4C1Ev>
 8017ea6:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8017eaa:	a850      	add	r0, sp, #320	; 0x140
 8017eac:	f005 fa54 	bl	801d358 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 8017eb0:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8017eb4:	f005 fa5c 	bl	801d370 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 8017eb8:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8017ebc:	f005 fa65 	bl	801d38a <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 8017ec0:	a860      	add	r0, sp, #384	; 0x180
 8017ec2:	f005 f949 	bl	801d158 <_ZN8touchgfx9Matrix4x4C1Ev>
 8017ec6:	eeb0 0a49 	vmov.f32	s0, s18
 8017eca:	a860      	add	r0, sp, #384	; 0x180
 8017ecc:	f005 fa18 	bl	801d300 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8017ed0:	eeb0 0a68 	vmov.f32	s0, s17
 8017ed4:	f005 fa22 	bl	801d31c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8017ed8:	eeb0 0a48 	vmov.f32	s0, s16
 8017edc:	f005 fa2d 	bl	801d33a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8017ee0:	aa50      	add	r2, sp, #320	; 0x140
 8017ee2:	a960      	add	r1, sp, #384	; 0x180
 8017ee4:	a8b0      	add	r0, sp, #704	; 0x2c0
 8017ee6:	f005 f951 	bl	801d18c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017eea:	4628      	mov	r0, r5
 8017eec:	aa40      	add	r2, sp, #256	; 0x100
 8017eee:	a9b0      	add	r1, sp, #704	; 0x2c0
 8017ef0:	f005 f94c 	bl	801d18c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017ef4:	4629      	mov	r1, r5
 8017ef6:	aa30      	add	r2, sp, #192	; 0xc0
 8017ef8:	a870      	add	r0, sp, #448	; 0x1c0
 8017efa:	f005 f947 	bl	801d18c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017efe:	a880      	add	r0, sp, #512	; 0x200
 8017f00:	f005 f92a 	bl	801d158 <_ZN8touchgfx9Matrix4x4C1Ev>
 8017f04:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 8017f08:	a880      	add	r0, sp, #512	; 0x200
 8017f0a:	eeb1 0a40 	vneg.f32	s0, s0
 8017f0e:	f005 f9f7 	bl	801d300 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8017f12:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8017f16:	a880      	add	r0, sp, #512	; 0x200
 8017f18:	eeb1 0a40 	vneg.f32	s0, s0
 8017f1c:	f005 f9fe 	bl	801d31c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8017f20:	a890      	add	r0, sp, #576	; 0x240
 8017f22:	f005 f919 	bl	801d158 <_ZN8touchgfx9Matrix4x4C1Ev>
 8017f26:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
 8017f2a:	a890      	add	r0, sp, #576	; 0x240
 8017f2c:	f005 f95c 	bl	801d1e8 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 8017f30:	a8a0      	add	r0, sp, #640	; 0x280
 8017f32:	f005 f911 	bl	801d158 <_ZN8touchgfx9Matrix4x4C1Ev>
 8017f36:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 8017f3a:	a8a0      	add	r0, sp, #640	; 0x280
 8017f3c:	f005 f9e0 	bl	801d300 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8017f40:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8017f44:	f005 f9ea 	bl	801d31c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8017f48:	aa90      	add	r2, sp, #576	; 0x240
 8017f4a:	a9a0      	add	r1, sp, #640	; 0x280
 8017f4c:	a8b0      	add	r0, sp, #704	; 0x2c0
 8017f4e:	f005 f91d 	bl	801d18c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017f52:	4628      	mov	r0, r5
 8017f54:	aa80      	add	r2, sp, #512	; 0x200
 8017f56:	a9b0      	add	r1, sp, #704	; 0x2c0
 8017f58:	f005 f918 	bl	801d18c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017f5c:	4629      	mov	r1, r5
 8017f5e:	aa70      	add	r2, sp, #448	; 0x1c0
 8017f60:	4668      	mov	r0, sp
 8017f62:	466d      	mov	r5, sp
 8017f64:	f005 f912 	bl	801d18c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8017f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017f6a:	ae70      	add	r6, sp, #448	; 0x1c0
 8017f6c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017f70:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017f74:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017f76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8017f7a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8017f7e:	2500      	movs	r5, #0
 8017f80:	0129      	lsls	r1, r5, #4
 8017f82:	ab20      	add	r3, sp, #128	; 0x80
 8017f84:	185e      	adds	r6, r3, r1
 8017f86:	ab10      	add	r3, sp, #64	; 0x40
 8017f88:	4419      	add	r1, r3
 8017f8a:	a870      	add	r0, sp, #448	; 0x1c0
 8017f8c:	f005 f8b4 	bl	801d0f8 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 8017f90:	3501      	adds	r5, #1
 8017f92:	2d04      	cmp	r5, #4
 8017f94:	ed86 0a00 	vstr	s0, [r6]
 8017f98:	edc6 0a01 	vstr	s1, [r6, #4]
 8017f9c:	ed86 1a02 	vstr	s2, [r6, #8]
 8017fa0:	edc6 1a03 	vstr	s3, [r6, #12]
 8017fa4:	d1ec      	bne.n	8017f80 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 8017fa6:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 8017faa:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 8017fae:	ed9d 7a22 	vldr	s14, [sp, #136]	; 0x88
 8017fb2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017fb6:	ed84 7a19 	vstr	s14, [r4, #100]	; 0x64
 8017fba:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017fbe:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 8017fc2:	ed84 6a17 	vstr	s12, [r4, #92]	; 0x5c
 8017fc6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017fca:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017fce:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
 8017fd2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017fd6:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 8017fda:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017fde:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 8017fe2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017fe6:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 8017fea:	ed84 6a1a 	vstr	s12, [r4, #104]	; 0x68
 8017fee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017ff2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017ff6:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 8017ffa:	ed9d 7a2a 	vldr	s14, [sp, #168]	; 0xa8
 8017ffe:	ed84 6a1b 	vstr	s12, [r4, #108]	; 0x6c
 8018002:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8018006:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 801800a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801800e:	eddd 6a29 	vldr	s13, [sp, #164]	; 0xa4
 8018012:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
 8018016:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801801a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801801e:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 8018022:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8018026:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
 801802a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801802e:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
 8018032:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8018036:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 801803a:	ed84 6a20 	vstr	s12, [r4, #128]	; 0x80
 801803e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018042:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8018046:	edc4 6a21 	vstr	s13, [r4, #132]	; 0x84
 801804a:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
 801804e:	ecbd 8b04 	vpop	{d8-d9}
 8018052:	bd70      	pop	{r4, r5, r6, pc}

08018054 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 8018054:	b510      	push	{r4, lr}
 8018056:	4604      	mov	r4, r0
 8018058:	f001 f876 	bl	8019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801805c:	4620      	mov	r0, r4
 801805e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018062:	f7ff bea1 	b.w	8017da8 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08018066 <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 8018066:	ed80 0a0d 	vstr	s0, [r0, #52]	; 0x34
 801806a:	edc0 0a0e 	vstr	s1, [r0, #56]	; 0x38
 801806e:	ed80 1a0f 	vstr	s2, [r0, #60]	; 0x3c
 8018072:	f7ff be99 	b.w	8017da8 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08018076 <_ZN8touchgfx13TextureMapper8setScaleEf>:
 8018076:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
 801807a:	f7ff be95 	b.w	8017da8 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801807e <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 801807e:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
 8018082:	edc0 0a0c 	vstr	s1, [r0, #48]	; 0x30
 8018086:	f7ff be8f 	b.w	8017da8 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801808a <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 801808a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801808e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018096:	bfd8      	it	le
 8018098:	eeb0 0a67 	vmovle.f32	s0, s15
 801809c:	ed80 0a16 	vstr	s0, [r0, #88]	; 0x58
 80180a0:	f7ff be82 	b.w	8017da8 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080180a4 <_ZN8touchgfx13TextureMapper9setCameraEff>:
 80180a4:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
 80180a8:	edc0 0a15 	vstr	s1, [r0, #84]	; 0x54
 80180ac:	f7ff be7c 	b.w	8017da8 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080180b0 <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 80180b0:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 80180b4:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 80180b8:	f7ff be76 	b.w	8017da8 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080180bc <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 80180bc:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 80180c0:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 80180c4:	ed80 1a13 	vstr	s2, [r0, #76]	; 0x4c
 80180c8:	f7ff be6e 	b.w	8017da8 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080180cc <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 80180cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180d0:	ed2d 8b04 	vpush	{d8-d9}
 80180d4:	edd1 9a1a 	vldr	s19, [r1, #104]	; 0x68
 80180d8:	ed91 8a17 	vldr	s16, [r1, #92]	; 0x5c
 80180dc:	ed91 9a1d 	vldr	s18, [r1, #116]	; 0x74
 80180e0:	edd1 8a20 	vldr	s17, [r1, #128]	; 0x80
 80180e4:	eeb4 8ae9 	vcmpe.f32	s16, s19
 80180e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180ec:	bf54      	ite	pl
 80180ee:	eeb0 0a69 	vmovpl.f32	s0, s19
 80180f2:	eeb0 0a48 	vmovmi.f32	s0, s16
 80180f6:	eeb4 9ac0 	vcmpe.f32	s18, s0
 80180fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180fe:	bfd8      	it	le
 8018100:	eeb0 0a49 	vmovle.f32	s0, s18
 8018104:	eef4 8ac0 	vcmpe.f32	s17, s0
 8018108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801810c:	bfd8      	it	le
 801810e:	eeb0 0a68 	vmovle.f32	s0, s17
 8018112:	460c      	mov	r4, r1
 8018114:	4607      	mov	r7, r0
 8018116:	f013 fd73 	bl	802bc00 <floorf>
 801811a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801811e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018122:	bf58      	it	pl
 8018124:	eebd 0ac0 	vcvtpl.s32.f32	s0, s0
 8018128:	eeb4 8ae9 	vcmpe.f32	s16, s19
 801812c:	bf56      	itet	pl
 801812e:	ee10 3a10 	vmovpl	r3, s0
 8018132:	2600      	movmi	r6, #0
 8018134:	b21e      	sxthpl	r6, r3
 8018136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801813a:	bfd8      	it	le
 801813c:	eeb0 8a69 	vmovle.f32	s16, s19
 8018140:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8018144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018148:	bf58      	it	pl
 801814a:	eeb0 8a49 	vmovpl.f32	s16, s18
 801814e:	eef4 8ac8 	vcmpe.f32	s17, s16
 8018152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018156:	bf54      	ite	pl
 8018158:	eeb0 0a68 	vmovpl.f32	s0, s17
 801815c:	eeb0 0a48 	vmovmi.f32	s0, s16
 8018160:	f013 fccc 	bl	802bafc <ceilf>
 8018164:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 8018168:	edd4 9a1b 	vldr	s19, [r4, #108]	; 0x6c
 801816c:	ed94 8a18 	vldr	s16, [r4, #96]	; 0x60
 8018170:	ed94 9a1e 	vldr	s18, [r4, #120]	; 0x78
 8018174:	edd4 8a21 	vldr	s17, [r4, #132]	; 0x84
 8018178:	ee07 8a90 	vmov	s15, r8
 801817c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018180:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018188:	bfd8      	it	le
 801818a:	eebd 0ac0 	vcvtle.s32.f32	s0, s0
 801818e:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8018192:	bfdc      	itt	le
 8018194:	ee10 3a10 	vmovle	r3, s0
 8018198:	fa0f f883 	sxthle.w	r8, r3
 801819c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181a0:	bf54      	ite	pl
 80181a2:	eeb0 0a69 	vmovpl.f32	s0, s19
 80181a6:	eeb0 0a48 	vmovmi.f32	s0, s16
 80181aa:	eeb4 9ac0 	vcmpe.f32	s18, s0
 80181ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181b2:	bfd8      	it	le
 80181b4:	eeb0 0a49 	vmovle.f32	s0, s18
 80181b8:	eef4 8ac0 	vcmpe.f32	s17, s0
 80181bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181c0:	bfd8      	it	le
 80181c2:	eeb0 0a68 	vmovle.f32	s0, s17
 80181c6:	f013 fd1b 	bl	802bc00 <floorf>
 80181ca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80181ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181d2:	bf58      	it	pl
 80181d4:	eebd 0ac0 	vcvtpl.s32.f32	s0, s0
 80181d8:	eeb4 8ae9 	vcmpe.f32	s16, s19
 80181dc:	bf56      	itet	pl
 80181de:	ee10 3a10 	vmovpl	r3, s0
 80181e2:	2500      	movmi	r5, #0
 80181e4:	b21d      	sxthpl	r5, r3
 80181e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181ea:	bfd8      	it	le
 80181ec:	eeb0 8a69 	vmovle.f32	s16, s19
 80181f0:	eeb4 9ac8 	vcmpe.f32	s18, s16
 80181f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181f8:	bf58      	it	pl
 80181fa:	eeb0 8a49 	vmovpl.f32	s16, s18
 80181fe:	eef4 8ac8 	vcmpe.f32	s17, s16
 8018202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018206:	bf54      	ite	pl
 8018208:	eeb0 0a68 	vmovpl.f32	s0, s17
 801820c:	eeb0 0a48 	vmovmi.f32	s0, s16
 8018210:	f013 fc74 	bl	802bafc <ceilf>
 8018214:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018218:	803e      	strh	r6, [r7, #0]
 801821a:	ee07 3a90 	vmov	s15, r3
 801821e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018222:	807d      	strh	r5, [r7, #2]
 8018224:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801822c:	bfd8      	it	le
 801822e:	eebd 0ac0 	vcvtle.s32.f32	s0, s0
 8018232:	eba8 0606 	sub.w	r6, r8, r6
 8018236:	bfdc      	itt	le
 8018238:	ee10 3a10 	vmovle	r3, s0
 801823c:	b21b      	sxthle	r3, r3
 801823e:	1b5d      	subs	r5, r3, r5
 8018240:	80be      	strh	r6, [r7, #4]
 8018242:	80fd      	strh	r5, [r7, #6]
 8018244:	ecbd 8b04 	vpop	{d8-d9}
 8018248:	4638      	mov	r0, r7
 801824a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801824e <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 801824e:	b510      	push	{r4, lr}
 8018250:	ed2d 8b04 	vpush	{d8-d9}
 8018254:	4604      	mov	r4, r0
 8018256:	b084      	sub	sp, #16
 8018258:	4601      	mov	r1, r0
 801825a:	4668      	mov	r0, sp
 801825c:	eeb0 8a40 	vmov.f32	s16, s0
 8018260:	eef0 8a60 	vmov.f32	s17, s1
 8018264:	eeb0 9a41 	vmov.f32	s18, s2
 8018268:	f7ff ff30 	bl	80180cc <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 801826c:	6823      	ldr	r3, [r4, #0]
 801826e:	4669      	mov	r1, sp
 8018270:	4620      	mov	r0, r4
 8018272:	691b      	ldr	r3, [r3, #16]
 8018274:	4798      	blx	r3
 8018276:	6823      	ldr	r3, [r4, #0]
 8018278:	eeb0 1a49 	vmov.f32	s2, s18
 801827c:	eef0 0a68 	vmov.f32	s1, s17
 8018280:	eeb0 0a48 	vmov.f32	s0, s16
 8018284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018286:	4620      	mov	r0, r4
 8018288:	4798      	blx	r3
 801828a:	4621      	mov	r1, r4
 801828c:	a802      	add	r0, sp, #8
 801828e:	f7ff ff1d 	bl	80180cc <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 8018292:	6823      	ldr	r3, [r4, #0]
 8018294:	a902      	add	r1, sp, #8
 8018296:	691b      	ldr	r3, [r3, #16]
 8018298:	4620      	mov	r0, r4
 801829a:	4798      	blx	r3
 801829c:	b004      	add	sp, #16
 801829e:	ecbd 8b04 	vpop	{d8-d9}
 80182a2:	bd10      	pop	{r4, pc}

080182a4 <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 80182a4:	b510      	push	{r4, lr}
 80182a6:	ed2d 8b02 	vpush	{d8}
 80182aa:	4604      	mov	r4, r0
 80182ac:	b084      	sub	sp, #16
 80182ae:	4601      	mov	r1, r0
 80182b0:	4668      	mov	r0, sp
 80182b2:	eeb0 8a40 	vmov.f32	s16, s0
 80182b6:	f7ff ff09 	bl	80180cc <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 80182ba:	6823      	ldr	r3, [r4, #0]
 80182bc:	4669      	mov	r1, sp
 80182be:	4620      	mov	r0, r4
 80182c0:	691b      	ldr	r3, [r3, #16]
 80182c2:	4798      	blx	r3
 80182c4:	6823      	ldr	r3, [r4, #0]
 80182c6:	eeb0 0a48 	vmov.f32	s0, s16
 80182ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80182ce:	4620      	mov	r0, r4
 80182d0:	4798      	blx	r3
 80182d2:	4621      	mov	r1, r4
 80182d4:	a802      	add	r0, sp, #8
 80182d6:	f7ff fef9 	bl	80180cc <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 80182da:	6823      	ldr	r3, [r4, #0]
 80182dc:	a902      	add	r1, sp, #8
 80182de:	691b      	ldr	r3, [r3, #16]
 80182e0:	4620      	mov	r0, r4
 80182e2:	4798      	blx	r3
 80182e4:	b004      	add	sp, #16
 80182e6:	ecbd 8b02 	vpop	{d8}
 80182ea:	bd10      	pop	{r4, pc}

080182ec <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 80182ec:	4603      	mov	r3, r0
 80182ee:	3026      	adds	r0, #38	; 0x26
 80182f0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80182f4:	b90b      	cbnz	r3, 80182fa <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 80182f6:	f003 bd2c 	b.w	801bd52 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 80182fa:	f003 bd3a 	b.w	801bd72 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08018300 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8018300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018304:	ed2d 8b04 	vpush	{d8-d9}
 8018308:	4604      	mov	r4, r0
 801830a:	469b      	mov	fp, r3
 801830c:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8018310:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018314:	f9b1 6000 	ldrsh.w	r6, [r1]
 8018318:	8888      	ldrh	r0, [r1, #4]
 801831a:	b0b3      	sub	sp, #204	; 0xcc
 801831c:	4430      	add	r0, r6
 801831e:	b280      	uxth	r0, r0
 8018320:	9206      	str	r2, [sp, #24]
 8018322:	fa0f fe80 	sxth.w	lr, r0
 8018326:	2200      	movs	r2, #0
 8018328:	4596      	cmp	lr, r2
 801832a:	f8dd a100 	ldr.w	sl, [sp, #256]	; 0x100
 801832e:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 8018332:	f8dd 8108 	ldr.w	r8, [sp, #264]	; 0x108
 8018336:	9f43      	ldr	r7, [sp, #268]	; 0x10c
 8018338:	9211      	str	r2, [sp, #68]	; 0x44
 801833a:	f340 8129 	ble.w	8018590 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801833e:	45b4      	cmp	ip, r6
 8018340:	f340 8126 	ble.w	8018590 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8018344:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8018348:	88ca      	ldrh	r2, [r1, #6]
 801834a:	442a      	add	r2, r5
 801834c:	b292      	uxth	r2, r2
 801834e:	b211      	sxth	r1, r2
 8018350:	2900      	cmp	r1, #0
 8018352:	f340 811d 	ble.w	8018590 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8018356:	42ab      	cmp	r3, r5
 8018358:	f340 811a 	ble.w	8018590 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801835c:	45f4      	cmp	ip, lr
 801835e:	bfb8      	it	lt
 8018360:	fa1f f08c 	uxthlt.w	r0, ip
 8018364:	428b      	cmp	r3, r1
 8018366:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801836a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801836e:	bfb8      	it	lt
 8018370:	b29a      	uxthlt	r2, r3
 8018372:	1b80      	subs	r0, r0, r6
 8018374:	1b52      	subs	r2, r2, r5
 8018376:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 801837a:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 801837e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8018382:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8018386:	ab11      	add	r3, sp, #68	; 0x44
 8018388:	e893 0003 	ldmia.w	r3, {r0, r1}
 801838c:	6822      	ldr	r2, [r4, #0]
 801838e:	9307      	str	r3, [sp, #28]
 8018390:	ad13      	add	r5, sp, #76	; 0x4c
 8018392:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8018394:	e885 0003 	stmia.w	r5, {r0, r1}
 8018398:	4629      	mov	r1, r5
 801839a:	4620      	mov	r0, r4
 801839c:	4790      	blx	r2
 801839e:	4621      	mov	r1, r4
 80183a0:	a815      	add	r0, sp, #84	; 0x54
 80183a2:	f003 fc30 	bl	801bc06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80183a6:	a815      	add	r0, sp, #84	; 0x54
 80183a8:	f002 fa58 	bl	801a85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80183ac:	9b07      	ldr	r3, [sp, #28]
 80183ae:	1d26      	adds	r6, r4, #4
 80183b0:	4618      	mov	r0, r3
 80183b2:	4631      	mov	r1, r6
 80183b4:	f002 fa3a 	bl	801a82c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80183b8:	4628      	mov	r0, r5
 80183ba:	f104 0526 	add.w	r5, r4, #38	; 0x26
 80183be:	f002 fa4d 	bl	801a85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80183c2:	4628      	mov	r0, r5
 80183c4:	f006 f91e 	bl	801e604 <_ZNK8touchgfx6Bitmap7getDataEv>
 80183c8:	9007      	str	r0, [sp, #28]
 80183ca:	2800      	cmp	r0, #0
 80183cc:	f000 80db 	beq.w	8018586 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 80183d0:	f8db 2000 	ldr.w	r2, [fp]
 80183d4:	9209      	str	r2, [sp, #36]	; 0x24
 80183d6:	f8db 2004 	ldr.w	r2, [fp, #4]
 80183da:	920a      	str	r2, [sp, #40]	; 0x28
 80183dc:	f8db 2008 	ldr.w	r2, [fp, #8]
 80183e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80183e2:	f8db 200c 	ldr.w	r2, [fp, #12]
 80183e6:	920c      	str	r2, [sp, #48]	; 0x30
 80183e8:	f8da 2000 	ldr.w	r2, [sl]
 80183ec:	920d      	str	r2, [sp, #52]	; 0x34
 80183ee:	f8da 2004 	ldr.w	r2, [sl, #4]
 80183f2:	920e      	str	r2, [sp, #56]	; 0x38
 80183f4:	f8da 2008 	ldr.w	r2, [sl, #8]
 80183f8:	920f      	str	r2, [sp, #60]	; 0x3c
 80183fa:	f8da 200c 	ldr.w	r2, [sl, #12]
 80183fe:	9210      	str	r2, [sp, #64]	; 0x40
 8018400:	a90d      	add	r1, sp, #52	; 0x34
 8018402:	4632      	mov	r2, r6
 8018404:	a809      	add	r0, sp, #36	; 0x24
 8018406:	f002 f9f5 	bl	801a7f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801840a:	4632      	mov	r2, r6
 801840c:	a90e      	add	r1, sp, #56	; 0x38
 801840e:	a80a      	add	r0, sp, #40	; 0x28
 8018410:	f002 f9f0 	bl	801a7f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8018414:	4632      	mov	r2, r6
 8018416:	a90f      	add	r1, sp, #60	; 0x3c
 8018418:	a80b      	add	r0, sp, #44	; 0x2c
 801841a:	f002 f9eb 	bl	801a7f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801841e:	4632      	mov	r2, r6
 8018420:	a910      	add	r1, sp, #64	; 0x40
 8018422:	a80c      	add	r0, sp, #48	; 0x30
 8018424:	f002 f9e6 	bl	801a7f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8018428:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801842c:	edd7 4a00 	vldr	s9, [r7]
 8018430:	edd7 5a01 	vldr	s11, [r7, #4]
 8018434:	ed98 4a00 	vldr	s8, [r8]
 8018438:	ed98 5a01 	vldr	s10, [r8, #4]
 801843c:	ed99 9a00 	vldr	s18, [r9]
 8018440:	ed99 8a01 	vldr	s16, [r9, #4]
 8018444:	edd9 8a02 	vldr	s17, [r9, #8]
 8018448:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 801844c:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8018450:	ed8d 4a21 	vstr	s8, [sp, #132]	; 0x84
 8018454:	eef0 6a67 	vmov.f32	s13, s15
 8018458:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801845c:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 8018460:	eeb0 7a67 	vmov.f32	s14, s15
 8018464:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8018468:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 801846c:	eeb0 6a67 	vmov.f32	s12, s15
 8018470:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8018474:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8018478:	edcd 5a27 	vstr	s11, [sp, #156]	; 0x9c
 801847c:	ee16 6a10 	vmov	r6, s12
 8018480:	eeb0 6a67 	vmov.f32	s12, s15
 8018484:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8018488:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 801848c:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8018490:	f8d8 b008 	ldr.w	fp, [r8, #8]
 8018494:	68ff      	ldr	r7, [r7, #12]
 8018496:	9624      	str	r6, [sp, #144]	; 0x90
 8018498:	ee16 0a10 	vmov	r0, s12
 801849c:	eeb0 6a67 	vmov.f32	s12, s15
 80184a0:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80184a4:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 80184a8:	ed8d 9a20 	vstr	s18, [sp, #128]	; 0x80
 80184ac:	ee16 1a10 	vmov	r1, s12
 80184b0:	eeb0 6a67 	vmov.f32	s12, s15
 80184b4:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80184b8:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 80184bc:	ee16 2a10 	vmov	r2, s12
 80184c0:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 80184c4:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 80184c8:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 80184cc:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 80184d0:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80184d4:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 80184d8:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 80184dc:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 80184e0:	ed8d 8a25 	vstr	s16, [sp, #148]	; 0x94
 80184e4:	edcd 8a2a 	vstr	s17, [sp, #168]	; 0xa8
 80184e8:	922d      	str	r2, [sp, #180]	; 0xb4
 80184ea:	4a2b      	ldr	r2, [pc, #172]	; (8018598 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 80184ec:	9b06      	ldr	r3, [sp, #24]
 80184ee:	8812      	ldrh	r2, [r2, #0]
 80184f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80184f2:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 80184f6:	9b07      	ldr	r3, [sp, #28]
 80184f8:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 80184fc:	4628      	mov	r0, r5
 80184fe:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 8018502:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 8018506:	9218      	str	r2, [sp, #96]	; 0x60
 8018508:	9319      	str	r3, [sp, #100]	; 0x64
 801850a:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 801850e:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8018512:	9731      	str	r7, [sp, #196]	; 0xc4
 8018514:	f006 f8a8 	bl	801e668 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8018518:	901a      	str	r0, [sp, #104]	; 0x68
 801851a:	4628      	mov	r0, r5
 801851c:	f005 ff6a 	bl	801e3f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018520:	901b      	str	r0, [sp, #108]	; 0x6c
 8018522:	4628      	mov	r0, r5
 8018524:	f005 ffa0 	bl	801e468 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018528:	901c      	str	r0, [sp, #112]	; 0x70
 801852a:	4628      	mov	r0, r5
 801852c:	f005 ff62 	bl	801e3f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018530:	eeb4 9a48 	vcmp.f32	s18, s16
 8018534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018538:	901d      	str	r0, [sp, #116]	; 0x74
 801853a:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 801853e:	d107      	bne.n	8018550 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 8018540:	eeb4 8a68 	vcmp.f32	s16, s17
 8018544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801854c:	bf08      	it	eq
 801854e:	461e      	moveq	r6, r3
 8018550:	4b12      	ldr	r3, [pc, #72]	; (801859c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018558:	b10a      	cbz	r2, 801855e <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 801855a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801855c:	b905      	cbnz	r5, 8018560 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 801855e:	689d      	ldr	r5, [r3, #8]
 8018560:	682b      	ldr	r3, [r5, #0]
 8018562:	4620      	mov	r0, r4
 8018564:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8018566:	f7ff fec1 	bl	80182ec <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 801856a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801856e:	9604      	str	r6, [sp, #16]
 8018570:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8018574:	ab13      	add	r3, sp, #76	; 0x4c
 8018576:	9301      	str	r3, [sp, #4]
 8018578:	ab15      	add	r3, sp, #84	; 0x54
 801857a:	9300      	str	r3, [sp, #0]
 801857c:	aa1e      	add	r2, sp, #120	; 0x78
 801857e:	ab19      	add	r3, sp, #100	; 0x64
 8018580:	a917      	add	r1, sp, #92	; 0x5c
 8018582:	4628      	mov	r0, r5
 8018584:	47b8      	blx	r7
 8018586:	b033      	add	sp, #204	; 0xcc
 8018588:	ecbd 8b04 	vpop	{d8-d9}
 801858c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018590:	2300      	movs	r3, #0
 8018592:	9312      	str	r3, [sp, #72]	; 0x48
 8018594:	e6f7      	b.n	8018386 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 8018596:	bf00      	nop
 8018598:	200067ca 	.word	0x200067ca
 801859c:	200067d0 	.word	0x200067d0

080185a0 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 80185a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185a4:	ed2d 8b02 	vpush	{d8}
 80185a8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80185ac:	b098      	sub	sp, #96	; 0x60
 80185ae:	4604      	mov	r4, r0
 80185b0:	4688      	mov	r8, r1
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d077      	beq.n	80186a6 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 80185b6:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80185ba:	4628      	mov	r0, r5
 80185bc:	f005 ff1a 	bl	801e3f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80185c0:	ee07 0a90 	vmov	s15, r0
 80185c4:	4628      	mov	r0, r5
 80185c6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80185ca:	f005 ff4d 	bl	801e468 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80185ce:	4b4e      	ldr	r3, [pc, #312]	; (8018708 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 80185d0:	781b      	ldrb	r3, [r3, #0]
 80185d2:	ee07 0a90 	vmov	s15, r0
 80185d6:	2b01      	cmp	r3, #1
 80185d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80185dc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80185e0:	d066      	beq.n	80186b0 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 80185e2:	eeb0 6a47 	vmov.f32	s12, s14
 80185e6:	ee17 3a10 	vmov	r3, s14
 80185ea:	eeb0 4a48 	vmov.f32	s8, s16
 80185ee:	eeb0 7a48 	vmov.f32	s14, s16
 80185f2:	eef0 4a67 	vmov.f32	s9, s15
 80185f6:	eeb0 8a67 	vmov.f32	s16, s15
 80185fa:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 80185fe:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 8018602:	ed94 3a1b 	vldr	s6, [r4, #108]	; 0x6c
 8018606:	edd4 2a1d 	vldr	s5, [r4, #116]	; 0x74
 801860a:	ed94 2a1a 	vldr	s4, [r4, #104]	; 0x68
 801860e:	edd4 3a1e 	vldr	s7, [r4, #120]	; 0x78
 8018612:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8018614:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8018616:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8018618:	f8d4 c080 	ldr.w	ip, [r4, #128]	; 0x80
 801861c:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 8018620:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8018624:	ee73 1a65 	vsub.f32	s3, s6, s11
 8018628:	ee72 6ac5 	vsub.f32	s13, s5, s10
 801862c:	ee32 1a45 	vsub.f32	s2, s4, s10
 8018630:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 8018634:	ee73 1ae5 	vsub.f32	s3, s7, s11
 8018638:	eee1 6a21 	vfma.f32	s13, s2, s3
 801863c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8018640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018644:	dd3d      	ble.n	80186c2 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 8018646:	ed8d 5a04 	vstr	s10, [sp, #16]
 801864a:	ed8d 2a05 	vstr	s4, [sp, #20]
 801864e:	edcd 2a06 	vstr	s5, [sp, #24]
 8018652:	f8cd c01c 	str.w	ip, [sp, #28]
 8018656:	edcd 5a08 	vstr	s11, [sp, #32]
 801865a:	ed8d 3a09 	vstr	s6, [sp, #36]	; 0x24
 801865e:	edcd 3a0a 	vstr	s7, [sp, #40]	; 0x28
 8018662:	970b      	str	r7, [sp, #44]	; 0x2c
 8018664:	960c      	str	r6, [sp, #48]	; 0x30
 8018666:	950d      	str	r5, [sp, #52]	; 0x34
 8018668:	920e      	str	r2, [sp, #56]	; 0x38
 801866a:	900f      	str	r0, [sp, #60]	; 0x3c
 801866c:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 8018670:	ed8d 4a11 	vstr	s8, [sp, #68]	; 0x44
 8018674:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 8018678:	edcd 4a13 	vstr	s9, [sp, #76]	; 0x4c
 801867c:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
 8018680:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 8018684:	9316      	str	r3, [sp, #88]	; 0x58
 8018686:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c
 801868a:	ab14      	add	r3, sp, #80	; 0x50
 801868c:	9303      	str	r3, [sp, #12]
 801868e:	ab10      	add	r3, sp, #64	; 0x40
 8018690:	9302      	str	r3, [sp, #8]
 8018692:	ab0c      	add	r3, sp, #48	; 0x30
 8018694:	9301      	str	r3, [sp, #4]
 8018696:	ab08      	add	r3, sp, #32
 8018698:	9300      	str	r3, [sp, #0]
 801869a:	2200      	movs	r2, #0
 801869c:	ab04      	add	r3, sp, #16
 801869e:	4641      	mov	r1, r8
 80186a0:	4620      	mov	r0, r4
 80186a2:	f7ff fe2d 	bl	8018300 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 80186a6:	b018      	add	sp, #96	; 0x60
 80186a8:	ecbd 8b02 	vpop	{d8}
 80186ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186b0:	eeb0 6a48 	vmov.f32	s12, s16
 80186b4:	eef0 4a47 	vmov.f32	s9, s14
 80186b8:	ee17 3a90 	vmov	r3, s15
 80186bc:	eeb0 4a67 	vmov.f32	s8, s15
 80186c0:	e79b      	b.n	80185fa <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 80186c2:	ed8d 5a05 	vstr	s10, [sp, #20]
 80186c6:	ed8d 2a04 	vstr	s4, [sp, #16]
 80186ca:	f8cd c018 	str.w	ip, [sp, #24]
 80186ce:	edcd 2a07 	vstr	s5, [sp, #28]
 80186d2:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 80186d6:	ed8d 3a08 	vstr	s6, [sp, #32]
 80186da:	970a      	str	r7, [sp, #40]	; 0x28
 80186dc:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
 80186e0:	960d      	str	r6, [sp, #52]	; 0x34
 80186e2:	950c      	str	r5, [sp, #48]	; 0x30
 80186e4:	900e      	str	r0, [sp, #56]	; 0x38
 80186e6:	920f      	str	r2, [sp, #60]	; 0x3c
 80186e8:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 80186ec:	ed8d 4a10 	vstr	s8, [sp, #64]	; 0x40
 80186f0:	edcd 4a12 	vstr	s9, [sp, #72]	; 0x48
 80186f4:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 80186f8:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 80186fc:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8018700:	ed8d 6a16 	vstr	s12, [sp, #88]	; 0x58
 8018704:	9317      	str	r3, [sp, #92]	; 0x5c
 8018706:	e7c0      	b.n	801868a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 8018708:	200067c8 	.word	0x200067c8

0801870c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801870c:	2200      	movs	r2, #0
 801870e:	8002      	strh	r2, [r0, #0]
 8018710:	8042      	strh	r2, [r0, #2]
 8018712:	8082      	strh	r2, [r0, #4]
 8018714:	80c2      	strh	r2, [r0, #6]
 8018716:	4770      	bx	lr

08018718 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8018718:	b570      	push	{r4, r5, r6, lr}
 801871a:	6803      	ldr	r3, [r0, #0]
 801871c:	4604      	mov	r4, r0
 801871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018720:	4615      	mov	r5, r2
 8018722:	4798      	blx	r3
 8018724:	6823      	ldr	r3, [r4, #0]
 8018726:	4629      	mov	r1, r5
 8018728:	4620      	mov	r0, r4
 801872a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801872c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018730:	4718      	bx	r3
	...

08018734 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8018734:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018736:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801873c:	4299      	cmp	r1, r3
 801873e:	d029      	beq.n	8018794 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8018740:	4b15      	ldr	r3, [pc, #84]	; (8018798 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	b92b      	cbnz	r3, 8018752 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8018746:	4b15      	ldr	r3, [pc, #84]	; (801879c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8018748:	4a15      	ldr	r2, [pc, #84]	; (80187a0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801874a:	21ae      	movs	r1, #174	; 0xae
 801874c:	4815      	ldr	r0, [pc, #84]	; (80187a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801874e:	f013 ffcb 	bl	802c6e8 <__assert_func>
 8018752:	4a15      	ldr	r2, [pc, #84]	; (80187a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8018754:	8812      	ldrh	r2, [r2, #0]
 8018756:	428a      	cmp	r2, r1
 8018758:	d803      	bhi.n	8018762 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 801875a:	4b14      	ldr	r3, [pc, #80]	; (80187ac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 801875c:	4a10      	ldr	r2, [pc, #64]	; (80187a0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801875e:	21af      	movs	r1, #175	; 0xaf
 8018760:	e7f4      	b.n	801874c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8018762:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8018766:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801876a:	4b11      	ldr	r3, [pc, #68]	; (80187b0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 801876c:	7854      	ldrb	r4, [r2, #1]
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8018774:	682b      	ldr	r3, [r5, #0]
 8018776:	69de      	ldr	r6, [r3, #28]
 8018778:	4b0e      	ldr	r3, [pc, #56]	; (80187b4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 801877a:	6818      	ldr	r0, [r3, #0]
 801877c:	f7fa fcf6 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8018780:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8018784:	2300      	movs	r3, #0
 8018786:	4602      	mov	r2, r0
 8018788:	9300      	str	r3, [sp, #0]
 801878a:	4621      	mov	r1, r4
 801878c:	4628      	mov	r0, r5
 801878e:	47b0      	blx	r6
 8018790:	b002      	add	sp, #8
 8018792:	bd70      	pop	{r4, r5, r6, pc}
 8018794:	2000      	movs	r0, #0
 8018796:	e7fb      	b.n	8018790 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8018798:	20006820 	.word	0x20006820
 801879c:	0803093c 	.word	0x0803093c
 80187a0:	08030a74 	.word	0x08030a74
 80187a4:	0803097e 	.word	0x0803097e
 80187a8:	20006824 	.word	0x20006824
 80187ac:	080309a7 	.word	0x080309a7
 80187b0:	20006828 	.word	0x20006828
 80187b4:	2000682c 	.word	0x2000682c

080187b8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 80187b8:	b570      	push	{r4, r5, r6, lr}
 80187ba:	6803      	ldr	r3, [r0, #0]
 80187bc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80187be:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80187c0:	4b11      	ldr	r3, [pc, #68]	; (8018808 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	4604      	mov	r4, r0
 80187c6:	b28d      	uxth	r5, r1
 80187c8:	b92b      	cbnz	r3, 80187d6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 80187ca:	4b10      	ldr	r3, [pc, #64]	; (801880c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80187cc:	4a10      	ldr	r2, [pc, #64]	; (8018810 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80187ce:	21ae      	movs	r1, #174	; 0xae
 80187d0:	4810      	ldr	r0, [pc, #64]	; (8018814 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80187d2:	f013 ff89 	bl	802c6e8 <__assert_func>
 80187d6:	4910      	ldr	r1, [pc, #64]	; (8018818 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80187d8:	8809      	ldrh	r1, [r1, #0]
 80187da:	4291      	cmp	r1, r2
 80187dc:	d803      	bhi.n	80187e6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80187de:	4b0f      	ldr	r3, [pc, #60]	; (801881c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80187e0:	4a0b      	ldr	r2, [pc, #44]	; (8018810 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80187e2:	21af      	movs	r1, #175	; 0xaf
 80187e4:	e7f4      	b.n	80187d0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 80187e6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80187ea:	4b0d      	ldr	r3, [pc, #52]	; (8018820 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80187f2:	6803      	ldr	r3, [r0, #0]
 80187f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187f6:	4798      	blx	r3
 80187f8:	1a29      	subs	r1, r5, r0
 80187fa:	4633      	mov	r3, r6
 80187fc:	4620      	mov	r0, r4
 80187fe:	b209      	sxth	r1, r1
 8018800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018804:	4718      	bx	r3
 8018806:	bf00      	nop
 8018808:	20006820 	.word	0x20006820
 801880c:	0803093c 	.word	0x0803093c
 8018810:	08030a74 	.word	0x08030a74
 8018814:	0803097e 	.word	0x0803097e
 8018818:	20006824 	.word	0x20006824
 801881c:	080309a7 	.word	0x080309a7
 8018820:	20006828 	.word	0x20006828

08018824 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8018824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018828:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801882a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801882e:	4293      	cmp	r3, r2
 8018830:	b08c      	sub	sp, #48	; 0x30
 8018832:	4604      	mov	r4, r0
 8018834:	4688      	mov	r8, r1
 8018836:	d05f      	beq.n	80188f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8018838:	4e31      	ldr	r6, [pc, #196]	; (8018900 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 801883a:	6832      	ldr	r2, [r6, #0]
 801883c:	b92a      	cbnz	r2, 801884a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801883e:	4b31      	ldr	r3, [pc, #196]	; (8018904 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8018840:	4a31      	ldr	r2, [pc, #196]	; (8018908 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8018842:	21ae      	movs	r1, #174	; 0xae
 8018844:	4831      	ldr	r0, [pc, #196]	; (801890c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8018846:	f013 ff4f 	bl	802c6e8 <__assert_func>
 801884a:	4d31      	ldr	r5, [pc, #196]	; (8018910 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 801884c:	8829      	ldrh	r1, [r5, #0]
 801884e:	4299      	cmp	r1, r3
 8018850:	d803      	bhi.n	801885a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8018852:	4b30      	ldr	r3, [pc, #192]	; (8018914 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8018854:	4a2c      	ldr	r2, [pc, #176]	; (8018908 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8018856:	21af      	movs	r1, #175	; 0xaf
 8018858:	e7f4      	b.n	8018844 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 801885a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801885e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018862:	4b2d      	ldr	r3, [pc, #180]	; (8018918 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801886a:	2a00      	cmp	r2, #0
 801886c:	d044      	beq.n	80188f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801886e:	784b      	ldrb	r3, [r1, #1]
 8018870:	9207      	str	r2, [sp, #28]
 8018872:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8018876:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801887a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801887e:	4b27      	ldr	r3, [pc, #156]	; (801891c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8018880:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 801888a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801888e:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8018892:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8018896:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801889a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801889c:	f88d a020 	strb.w	sl, [sp, #32]
 80188a0:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 80188a4:	9009      	str	r0, [sp, #36]	; 0x24
 80188a6:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80188aa:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80188ae:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 80188b2:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80188b6:	b10a      	cbz	r2, 80188bc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 80188b8:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 80188ba:	b907      	cbnz	r7, 80188be <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 80188bc:	689f      	ldr	r7, [r3, #8]
 80188be:	f10d 0914 	add.w	r9, sp, #20
 80188c2:	4621      	mov	r1, r4
 80188c4:	4648      	mov	r0, r9
 80188c6:	f003 f99e 	bl	801bc06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80188ca:	6833      	ldr	r3, [r6, #0]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d0b6      	beq.n	801883e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 80188d0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80188d2:	882b      	ldrh	r3, [r5, #0]
 80188d4:	428b      	cmp	r3, r1
 80188d6:	d9bc      	bls.n	8018852 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 80188d8:	4b11      	ldr	r3, [pc, #68]	; (8018920 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 80188da:	6818      	ldr	r0, [r3, #0]
 80188dc:	f7fa fc46 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 80188e0:	2300      	movs	r3, #0
 80188e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80188e6:	ab07      	add	r3, sp, #28
 80188e8:	9001      	str	r0, [sp, #4]
 80188ea:	9300      	str	r3, [sp, #0]
 80188ec:	e899 0006 	ldmia.w	r9, {r1, r2}
 80188f0:	4643      	mov	r3, r8
 80188f2:	4638      	mov	r0, r7
 80188f4:	f7fa fbcb 	bl	801308e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80188f8:	b00c      	add	sp, #48	; 0x30
 80188fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188fe:	bf00      	nop
 8018900:	20006820 	.word	0x20006820
 8018904:	0803093c 	.word	0x0803093c
 8018908:	08030a74 	.word	0x08030a74
 801890c:	0803097e 	.word	0x0803097e
 8018910:	20006824 	.word	0x20006824
 8018914:	080309a7 	.word	0x080309a7
 8018918:	20006828 	.word	0x20006828
 801891c:	200067d0 	.word	0x200067d0
 8018920:	2000682c 	.word	0x2000682c

08018924 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8018924:	b40e      	push	{r1, r2, r3}
 8018926:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801892a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801892c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018930:	4293      	cmp	r3, r2
 8018932:	b09a      	sub	sp, #104	; 0x68
 8018934:	4605      	mov	r5, r0
 8018936:	d067      	beq.n	8018a08 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>
 8018938:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8018a1c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>
 801893c:	aa24      	add	r2, sp, #144	; 0x90
 801893e:	9202      	str	r2, [sp, #8]
 8018940:	f8da 2000 	ldr.w	r2, [sl]
 8018944:	b92a      	cbnz	r2, 8018952 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8018946:	4b31      	ldr	r3, [pc, #196]	; (8018a0c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8018948:	4a31      	ldr	r2, [pc, #196]	; (8018a10 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 801894a:	21ae      	movs	r1, #174	; 0xae
 801894c:	4831      	ldr	r0, [pc, #196]	; (8018a14 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 801894e:	f013 fecb 	bl	802c6e8 <__assert_func>
 8018952:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8018a20 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>
 8018956:	f8b8 1000 	ldrh.w	r1, [r8]
 801895a:	4299      	cmp	r1, r3
 801895c:	d803      	bhi.n	8018966 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 801895e:	4b2e      	ldr	r3, [pc, #184]	; (8018a18 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8018960:	4a2b      	ldr	r2, [pc, #172]	; (8018a10 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 8018962:	21af      	movs	r1, #175	; 0xaf
 8018964:	e7f2      	b.n	801894c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8018966:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8018a24 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 801896a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801896e:	f8d9 3000 	ldr.w	r3, [r9]
 8018972:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8018976:	6823      	ldr	r3, [r4, #0]
 8018978:	4620      	mov	r0, r4
 801897a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801897c:	4798      	blx	r3
 801897e:	4607      	mov	r7, r0
 8018980:	b206      	sxth	r6, r0
 8018982:	a803      	add	r0, sp, #12
 8018984:	f003 fe2e 	bl	801c5e4 <_ZN8touchgfx12TextProviderC1Ev>
 8018988:	6823      	ldr	r3, [r4, #0]
 801898a:	4620      	mov	r0, r4
 801898c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801898e:	4798      	blx	r3
 8018990:	6823      	ldr	r3, [r4, #0]
 8018992:	4683      	mov	fp, r0
 8018994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018996:	4620      	mov	r0, r4
 8018998:	4798      	blx	r3
 801899a:	465b      	mov	r3, fp
 801899c:	9000      	str	r0, [sp, #0]
 801899e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80189a0:	9a02      	ldr	r2, [sp, #8]
 80189a2:	a803      	add	r0, sp, #12
 80189a4:	f003 fe6b 	bl	801c67e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80189a8:	f8da 3000 	ldr.w	r3, [sl]
 80189ac:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d0c8      	beq.n	8018946 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 80189b4:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80189b6:	f8b8 0000 	ldrh.w	r0, [r8]
 80189ba:	4290      	cmp	r0, r2
 80189bc:	d9cf      	bls.n	801895e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 80189be:	eb03 0442 	add.w	r4, r3, r2, lsl #1
 80189c2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80189c6:	7862      	ldrb	r2, [r4, #1]
 80189c8:	f8d9 3000 	ldr.w	r3, [r9]
 80189cc:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 80189d0:	9400      	str	r4, [sp, #0]
 80189d2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80189d6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80189da:	a803      	add	r0, sp, #12
 80189dc:	f001 fc14 	bl	801a208 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80189e0:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 80189e4:	18b1      	adds	r1, r6, r2
 80189e6:	2900      	cmp	r1, #0
 80189e8:	b203      	sxth	r3, r0
 80189ea:	dd0b      	ble.n	8018a04 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>
 80189ec:	3b01      	subs	r3, #1
 80189ee:	fb13 f302 	smulbb	r3, r3, r2
 80189f2:	fb17 3300 	smlabb	r3, r7, r0, r3
 80189f6:	b21e      	sxth	r6, r3
 80189f8:	4630      	mov	r0, r6
 80189fa:	b01a      	add	sp, #104	; 0x68
 80189fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a00:	b003      	add	sp, #12
 8018a02:	4770      	bx	lr
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	dcf7      	bgt.n	80189f8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8018a08:	2600      	movs	r6, #0
 8018a0a:	e7f5      	b.n	80189f8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8018a0c:	0803093c 	.word	0x0803093c
 8018a10:	08030a74 	.word	0x08030a74
 8018a14:	0803097e 	.word	0x0803097e
 8018a18:	080309a7 	.word	0x080309a7
 8018a1c:	20006820 	.word	0x20006820
 8018a20:	20006824 	.word	0x20006824
 8018a24:	20006828 	.word	0x20006828

08018a28 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8018a28:	b570      	push	{r4, r5, r6, lr}
 8018a2a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018a2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a30:	4299      	cmp	r1, r3
 8018a32:	4604      	mov	r4, r0
 8018a34:	d01e      	beq.n	8018a74 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8018a36:	6803      	ldr	r3, [r0, #0]
 8018a38:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8018a3a:	4b0f      	ldr	r3, [pc, #60]	; (8018a78 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	b92b      	cbnz	r3, 8018a4c <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8018a40:	4b0e      	ldr	r3, [pc, #56]	; (8018a7c <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8018a42:	4a0f      	ldr	r2, [pc, #60]	; (8018a80 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8018a44:	21ae      	movs	r1, #174	; 0xae
 8018a46:	480f      	ldr	r0, [pc, #60]	; (8018a84 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8018a48:	f013 fe4e 	bl	802c6e8 <__assert_func>
 8018a4c:	4b0e      	ldr	r3, [pc, #56]	; (8018a88 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8018a4e:	881b      	ldrh	r3, [r3, #0]
 8018a50:	428b      	cmp	r3, r1
 8018a52:	d803      	bhi.n	8018a5c <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8018a54:	4b0d      	ldr	r3, [pc, #52]	; (8018a8c <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8018a56:	4a0a      	ldr	r2, [pc, #40]	; (8018a80 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8018a58:	21af      	movs	r1, #175	; 0xaf
 8018a5a:	e7f4      	b.n	8018a46 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8018a5c:	4b0c      	ldr	r3, [pc, #48]	; (8018a90 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8018a5e:	6818      	ldr	r0, [r3, #0]
 8018a60:	f7fa fb84 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8018a64:	2300      	movs	r3, #0
 8018a66:	4601      	mov	r1, r0
 8018a68:	46ac      	mov	ip, r5
 8018a6a:	4620      	mov	r0, r4
 8018a6c:	461a      	mov	r2, r3
 8018a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a72:	4760      	bx	ip
 8018a74:	2000      	movs	r0, #0
 8018a76:	bd70      	pop	{r4, r5, r6, pc}
 8018a78:	20006820 	.word	0x20006820
 8018a7c:	0803093c 	.word	0x0803093c
 8018a80:	08030a74 	.word	0x08030a74
 8018a84:	0803097e 	.word	0x0803097e
 8018a88:	20006824 	.word	0x20006824
 8018a8c:	080309a7 	.word	0x080309a7
 8018a90:	2000682c 	.word	0x2000682c

08018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8018a94:	b538      	push	{r3, r4, r5, lr}
 8018a96:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a9c:	429a      	cmp	r2, r3
 8018a9e:	4604      	mov	r4, r0
 8018aa0:	d014      	beq.n	8018acc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8018aa2:	6803      	ldr	r3, [r0, #0]
 8018aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018aa6:	4798      	blx	r3
 8018aa8:	6823      	ldr	r3, [r4, #0]
 8018aaa:	4605      	mov	r5, r0
 8018aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018aae:	4620      	mov	r0, r4
 8018ab0:	4798      	blx	r3
 8018ab2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018ab6:	b22d      	sxth	r5, r5
 8018ab8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018abc:	4601      	mov	r1, r0
 8018abe:	bf06      	itte	eq
 8018ac0:	4602      	moveq	r2, r0
 8018ac2:	4629      	moveq	r1, r5
 8018ac4:	462a      	movne	r2, r5
 8018ac6:	4620      	mov	r0, r4
 8018ac8:	f7f6 fe7c 	bl	800f7c4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018acc:	bd38      	pop	{r3, r4, r5, pc}

08018ace <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8018ace:	888a      	ldrh	r2, [r1, #4]
 8018ad0:	8582      	strh	r2, [r0, #44]	; 0x2c
 8018ad2:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8018ad6:	b922      	cbnz	r2, 8018ae2 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8018ad8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018adc:	b90b      	cbnz	r3, 8018ae2 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8018ade:	f7ff bfd9 	b.w	8018a94 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8018ae2:	4770      	bx	lr

08018ae4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>:
 8018ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ae8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018aea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018aee:	429a      	cmp	r2, r3
 8018af0:	4604      	mov	r4, r0
 8018af2:	d054      	beq.n	8018b9e <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xba>
 8018af4:	4b42      	ldr	r3, [pc, #264]	; (8018c00 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x11c>)
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	b92b      	cbnz	r3, 8018b06 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x22>
 8018afa:	4b42      	ldr	r3, [pc, #264]	; (8018c04 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x120>)
 8018afc:	4a42      	ldr	r2, [pc, #264]	; (8018c08 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x124>)
 8018afe:	21ae      	movs	r1, #174	; 0xae
 8018b00:	4842      	ldr	r0, [pc, #264]	; (8018c0c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x128>)
 8018b02:	f013 fdf1 	bl	802c6e8 <__assert_func>
 8018b06:	4942      	ldr	r1, [pc, #264]	; (8018c10 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x12c>)
 8018b08:	8809      	ldrh	r1, [r1, #0]
 8018b0a:	4291      	cmp	r1, r2
 8018b0c:	d803      	bhi.n	8018b16 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x32>
 8018b0e:	4b41      	ldr	r3, [pc, #260]	; (8018c14 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x130>)
 8018b10:	4a3d      	ldr	r2, [pc, #244]	; (8018c08 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x124>)
 8018b12:	21af      	movs	r1, #175	; 0xaf
 8018b14:	e7f4      	b.n	8018b00 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x1c>
 8018b16:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018b1a:	f893 9001 	ldrb.w	r9, [r3, #1]
 8018b1e:	6803      	ldr	r3, [r0, #0]
 8018b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018b22:	4798      	blx	r3
 8018b24:	6823      	ldr	r3, [r4, #0]
 8018b26:	4680      	mov	r8, r0
 8018b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018b2a:	4620      	mov	r0, r4
 8018b2c:	4798      	blx	r3
 8018b2e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018b32:	f009 0903 	and.w	r9, r9, #3
 8018b36:	4605      	mov	r5, r0
 8018b38:	b287      	uxth	r7, r0
 8018b3a:	fa0f f688 	sxth.w	r6, r8
 8018b3e:	b1cb      	cbz	r3, 8018b74 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x90>
 8018b40:	2b02      	cmp	r3, #2
 8018b42:	d12e      	bne.n	8018ba2 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xbe>
 8018b44:	f1b9 0f02 	cmp.w	r9, #2
 8018b48:	d017      	beq.n	8018b7a <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x96>
 8018b4a:	8920      	ldrh	r0, [r4, #8]
 8018b4c:	88a1      	ldrh	r1, [r4, #4]
 8018b4e:	6822      	ldr	r2, [r4, #0]
 8018b50:	f1b9 0f01 	cmp.w	r9, #1
 8018b54:	bf13      	iteet	ne
 8018b56:	1840      	addne	r0, r0, r1
 8018b58:	2302      	moveq	r3, #2
 8018b5a:	eba0 0008 	subeq.w	r0, r0, r8
 8018b5e:	eba0 0108 	subne.w	r1, r0, r8
 8018b62:	bf04      	itt	eq
 8018b64:	fb90 f3f3 	sdiveq	r3, r0, r3
 8018b68:	18c9      	addeq	r1, r1, r3
 8018b6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8018b6c:	b209      	sxth	r1, r1
 8018b6e:	4620      	mov	r0, r4
 8018b70:	4790      	blx	r2
 8018b72:	e002      	b.n	8018b7a <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x96>
 8018b74:	f1b9 0f00 	cmp.w	r9, #0
 8018b78:	d1e7      	bne.n	8018b4a <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x66>
 8018b7a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018b7e:	2b02      	cmp	r3, #2
 8018b80:	d108      	bne.n	8018b94 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xb0>
 8018b82:	88e3      	ldrh	r3, [r4, #6]
 8018b84:	8961      	ldrh	r1, [r4, #10]
 8018b86:	4419      	add	r1, r3
 8018b88:	6823      	ldr	r3, [r4, #0]
 8018b8a:	1bc9      	subs	r1, r1, r7
 8018b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b8e:	b209      	sxth	r1, r1
 8018b90:	4620      	mov	r0, r4
 8018b92:	4798      	blx	r3
 8018b94:	462a      	mov	r2, r5
 8018b96:	4631      	mov	r1, r6
 8018b98:	4620      	mov	r0, r4
 8018b9a:	f7f6 fe13 	bl	800f7c4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ba2:	2b01      	cmp	r3, #1
 8018ba4:	d112      	bne.n	8018bcc <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xe8>
 8018ba6:	f1b9 0f00 	cmp.w	r9, #0
 8018baa:	d114      	bne.n	8018bd6 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xf2>
 8018bac:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018bb0:	2b01      	cmp	r3, #1
 8018bb2:	d108      	bne.n	8018bc6 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xe2>
 8018bb4:	88a3      	ldrh	r3, [r4, #4]
 8018bb6:	8921      	ldrh	r1, [r4, #8]
 8018bb8:	4419      	add	r1, r3
 8018bba:	6823      	ldr	r3, [r4, #0]
 8018bbc:	1bc9      	subs	r1, r1, r7
 8018bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bc0:	b209      	sxth	r1, r1
 8018bc2:	4620      	mov	r0, r4
 8018bc4:	4798      	blx	r3
 8018bc6:	4632      	mov	r2, r6
 8018bc8:	4629      	mov	r1, r5
 8018bca:	e7e5      	b.n	8018b98 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xb4>
 8018bcc:	2b03      	cmp	r3, #3
 8018bce:	d102      	bne.n	8018bd6 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xf2>
 8018bd0:	f1b9 0f02 	cmp.w	r9, #2
 8018bd4:	d0ea      	beq.n	8018bac <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xc8>
 8018bd6:	8963      	ldrh	r3, [r4, #10]
 8018bd8:	88e1      	ldrh	r1, [r4, #6]
 8018bda:	6822      	ldr	r2, [r4, #0]
 8018bdc:	f1b9 0f01 	cmp.w	r9, #1
 8018be0:	bf0b      	itete	eq
 8018be2:	2002      	moveq	r0, #2
 8018be4:	185b      	addne	r3, r3, r1
 8018be6:	eba3 0308 	subeq.w	r3, r3, r8
 8018bea:	eba3 0108 	subne.w	r1, r3, r8
 8018bee:	bf04      	itt	eq
 8018bf0:	fb93 f0f0 	sdiveq	r0, r3, r0
 8018bf4:	1809      	addeq	r1, r1, r0
 8018bf6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8018bf8:	b209      	sxth	r1, r1
 8018bfa:	4620      	mov	r0, r4
 8018bfc:	4790      	blx	r2
 8018bfe:	e7d5      	b.n	8018bac <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xc8>
 8018c00:	20006820 	.word	0x20006820
 8018c04:	0803093c 	.word	0x0803093c
 8018c08:	08030a74 	.word	0x08030a74
 8018c0c:	0803097e 	.word	0x0803097e
 8018c10:	20006824 	.word	0x20006824
 8018c14:	080309a7 	.word	0x080309a7

08018c18 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8018c18:	2300      	movs	r3, #0
 8018c1a:	8083      	strh	r3, [r0, #4]
 8018c1c:	80c3      	strh	r3, [r0, #6]
 8018c1e:	8003      	strh	r3, [r0, #0]
 8018c20:	8043      	strh	r3, [r0, #2]
 8018c22:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8018c26:	2bff      	cmp	r3, #255	; 0xff
 8018c28:	bf01      	itttt	eq
 8018c2a:	890b      	ldrheq	r3, [r1, #8]
 8018c2c:	8083      	strheq	r3, [r0, #4]
 8018c2e:	894b      	ldrheq	r3, [r1, #10]
 8018c30:	80c3      	strheq	r3, [r0, #6]
 8018c32:	4770      	bx	lr

08018c34 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8018c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018c36:	4604      	mov	r4, r0
 8018c38:	6808      	ldr	r0, [r1, #0]
 8018c3a:	6849      	ldr	r1, [r1, #4]
 8018c3c:	466b      	mov	r3, sp
 8018c3e:	c303      	stmia	r3!, {r0, r1}
 8018c40:	6823      	ldr	r3, [r4, #0]
 8018c42:	4669      	mov	r1, sp
 8018c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c46:	4620      	mov	r0, r4
 8018c48:	4798      	blx	r3
 8018c4a:	4b08      	ldr	r3, [pc, #32]	; (8018c6c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018c52:	b10a      	cbz	r2, 8018c58 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8018c54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018c56:	b900      	cbnz	r0, 8018c5a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8018c58:	6898      	ldr	r0, [r3, #8]
 8018c5a:	6803      	ldr	r3, [r0, #0]
 8018c5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8018c5e:	699d      	ldr	r5, [r3, #24]
 8018c60:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8018c64:	4669      	mov	r1, sp
 8018c66:	47a8      	blx	r5
 8018c68:	b003      	add	sp, #12
 8018c6a:	bd30      	pop	{r4, r5, pc}
 8018c6c:	200067d0 	.word	0x200067d0

08018c70 <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
 8018c70:	f9b0 314c 	ldrsh.w	r3, [r0, #332]	; 0x14c
 8018c74:	600b      	str	r3, [r1, #0]
 8018c76:	f9b0 314e 	ldrsh.w	r3, [r0, #334]	; 0x14e
 8018c7a:	6013      	str	r3, [r2, #0]
 8018c7c:	4770      	bx	lr

08018c7e <_ZN8touchgfx5Gauge8setWidthEs>:
 8018c7e:	8101      	strh	r1, [r0, #8]
 8018c80:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8
 8018c84:	f8a0 115c 	strh.w	r1, [r0, #348]	; 0x15c
 8018c88:	4770      	bx	lr

08018c8a <_ZN8touchgfx5Gauge9setHeightEs>:
 8018c8a:	8141      	strh	r1, [r0, #10]
 8018c8c:	f8a0 10ba 	strh.w	r1, [r0, #186]	; 0xba
 8018c90:	f8a0 115e 	strh.w	r1, [r0, #350]	; 0x15e
 8018c94:	4770      	bx	lr

08018c96 <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 8018c96:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 8018c9a:	4770      	bx	lr

08018c9c <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 8018c9c:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 8018ca0:	4770      	bx	lr

08018ca2 <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 8018ca2:	4770      	bx	lr

08018ca4 <_ZN8touchgfx5Gauge8setAlphaEh>:
 8018ca4:	b538      	push	{r3, r4, r5, lr}
 8018ca6:	4604      	mov	r4, r0
 8018ca8:	460d      	mov	r5, r1
 8018caa:	f7fc ff68 	bl	8015b7e <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 8018cae:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
 8018cb2:	f884 5182 	strb.w	r5, [r4, #386]	; 0x182
 8018cb6:	bd38      	pop	{r3, r4, r5, pc}

08018cb8 <_ZN8touchgfx5GaugeC1Ev>:
 8018cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018cba:	4604      	mov	r4, r0
 8018cbc:	4626      	mov	r6, r4
 8018cbe:	f7fd f87b 	bl	8015db8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8018cc2:	4b18      	ldr	r3, [pc, #96]	; (8018d24 <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 8018cc4:	f846 3bb0 	str.w	r3, [r6], #176
 8018cc8:	a902      	add	r1, sp, #8
 8018cca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018cce:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8018cd2:	4630      	mov	r0, r6
 8018cd4:	f7ff f81c 	bl	8017d10 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 8018cd8:	2500      	movs	r5, #0
 8018cda:	2301      	movs	r3, #1
 8018cdc:	f504 77aa 	add.w	r7, r4, #340	; 0x154
 8018ce0:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
 8018ce4:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
 8018ce8:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 8018cec:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 8018cf0:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 8018cf4:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
 8018cf8:	4638      	mov	r0, r7
 8018cfa:	f7fe fa75 	bl	80171e8 <_ZN8touchgfx6CircleC1Ev>
 8018cfe:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8018d02:	4620      	mov	r0, r4
 8018d04:	f7fd f912 	bl	8015f2c <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8018d08:	4639      	mov	r1, r7
 8018d0a:	4620      	mov	r0, r4
 8018d0c:	f7fd f940 	bl	8015f90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018d10:	4620      	mov	r0, r4
 8018d12:	4631      	mov	r1, r6
 8018d14:	f7fd f93c 	bl	8015f90 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018d18:	4620      	mov	r0, r4
 8018d1a:	f884 5179 	strb.w	r5, [r4, #377]	; 0x179
 8018d1e:	b003      	add	sp, #12
 8018d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d22:	bf00      	nop
 8018d24:	08030b54 	.word	0x08030b54

08018d28 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 8018d28:	f880 1140 	strb.w	r1, [r0, #320]	; 0x140
 8018d2c:	4770      	bx	lr

08018d2e <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 8018d2e:	f880 1141 	strb.w	r1, [r0, #321]	; 0x141
 8018d32:	4770      	bx	lr

08018d34 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 8018d34:	b538      	push	{r3, r4, r5, lr}
 8018d36:	8902      	ldrh	r2, [r0, #8]
 8018d38:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018d3c:	f8a0 20b8 	strh.w	r2, [r0, #184]	; 0xb8
 8018d40:	4604      	mov	r4, r0
 8018d42:	f100 05b0 	add.w	r5, r0, #176	; 0xb0
 8018d46:	2200      	movs	r2, #0
 8018d48:	4611      	mov	r1, r2
 8018d4a:	f8a0 30ba 	strh.w	r3, [r0, #186]	; 0xba
 8018d4e:	4628      	mov	r0, r5
 8018d50:	f7f6 fcdc 	bl	800f70c <_ZN8touchgfx8Drawable5setXYEss>
 8018d54:	f9b4 2152 	ldrsh.w	r2, [r4, #338]	; 0x152
 8018d58:	f9b4 314e 	ldrsh.w	r3, [r4, #334]	; 0x14e
 8018d5c:	1a9b      	subs	r3, r3, r2
 8018d5e:	ee07 3a90 	vmov	s15, r3
 8018d62:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	; 0x150
 8018d66:	f9b4 314c 	ldrsh.w	r3, [r4, #332]	; 0x14c
 8018d6a:	1a9b      	subs	r3, r3, r2
 8018d6c:	ee07 3a10 	vmov	s14, r3
 8018d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d78:	edc4 7a38 	vstr	s15, [r4, #224]	; 0xe0
 8018d7c:	ed84 7a37 	vstr	s14, [r4, #220]	; 0xdc
 8018d80:	4628      	mov	r0, r5
 8018d82:	f7ff f811 	bl	8017da8 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8018d86:	4b16      	ldr	r3, [pc, #88]	; (8018de0 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 8018d88:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 8018d8c:	4628      	mov	r0, r5
 8018d8e:	f7ff f80b 	bl	8017da8 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8018d92:	f9b4 314e 	ldrsh.w	r3, [r4, #334]	; 0x14e
 8018d96:	f9b4 214c 	ldrsh.w	r2, [r4, #332]	; 0x14c
 8018d9a:	ee07 3a90 	vmov	s15, r3
 8018d9e:	ee07 2a10 	vmov	s14, r2
 8018da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018da6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018daa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8018dae:	ed84 7a3d 	vstr	s14, [r4, #244]	; 0xf4
 8018db2:	edc4 7a3e 	vstr	s15, [r4, #248]	; 0xf8
 8018db6:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 8018dba:	4628      	mov	r0, r5
 8018dbc:	f7fe fff4 	bl	8017da8 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8018dc0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 8018dc4:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
 8018dc8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8018dcc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8018dd0:	4628      	mov	r0, r5
 8018dd2:	f7fe ffe9 	bl	8017da8 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8018dd6:	2301      	movs	r3, #1
 8018dd8:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
 8018ddc:	bd38      	pop	{r3, r4, r5, pc}
 8018dde:	bf00      	nop
 8018de0:	43960000 	.word	0x43960000

08018de4 <_ZN8touchgfx5Gauge9setNeedleEtss>:
 8018de4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018de6:	4604      	mov	r4, r0
 8018de8:	a802      	add	r0, sp, #8
 8018dea:	4616      	mov	r6, r2
 8018dec:	f820 1d04 	strh.w	r1, [r0, #-4]!
 8018df0:	461d      	mov	r5, r3
 8018df2:	4601      	mov	r1, r0
 8018df4:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8018df8:	f7ff f92c 	bl	8018054 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 8018dfc:	f8a4 6150 	strh.w	r6, [r4, #336]	; 0x150
 8018e00:	f8a4 5152 	strh.w	r5, [r4, #338]	; 0x152
 8018e04:	4620      	mov	r0, r4
 8018e06:	f7ff ff95 	bl	8018d34 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 8018e0a:	b002      	add	sp, #8
 8018e0c:	bd70      	pop	{r4, r5, r6, pc}

08018e0e <_ZN8touchgfx5Gauge9setCenterEii>:
 8018e0e:	b570      	push	{r4, r5, r6, lr}
 8018e10:	4606      	mov	r6, r0
 8018e12:	460d      	mov	r5, r1
 8018e14:	f8a6 114c 	strh.w	r1, [r6, #332]	; 0x14c
 8018e18:	f8a6 214e 	strh.w	r2, [r6, #334]	; 0x14e
 8018e1c:	4614      	mov	r4, r2
 8018e1e:	f7ff ff89 	bl	8018d34 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 8018e22:	f9b6 215a 	ldrsh.w	r2, [r6, #346]	; 0x15a
 8018e26:	f9b6 1158 	ldrsh.w	r1, [r6, #344]	; 0x158
 8018e2a:	1aa4      	subs	r4, r4, r2
 8018e2c:	1a6d      	subs	r5, r5, r1
 8018e2e:	0164      	lsls	r4, r4, #5
 8018e30:	016d      	lsls	r5, r5, #5
 8018e32:	3410      	adds	r4, #16
 8018e34:	3510      	adds	r5, #16
 8018e36:	f8c6 5184 	str.w	r5, [r6, #388]	; 0x184
 8018e3a:	f8c6 4188 	str.w	r4, [r6, #392]	; 0x188
 8018e3e:	bd70      	pop	{r4, r5, r6, pc}

08018e40 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 8018e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018e42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8018e44:	0149      	lsls	r1, r1, #5
 8018e46:	4299      	cmp	r1, r3
 8018e48:	4604      	mov	r4, r0
 8018e4a:	9101      	str	r1, [sp, #4]
 8018e4c:	d00b      	beq.n	8018e66 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 8018e4e:	4601      	mov	r1, r0
 8018e50:	aa01      	add	r2, sp, #4
 8018e52:	a802      	add	r0, sp, #8
 8018e54:	f7fe fbe1 	bl	801761a <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 8018e58:	9b01      	ldr	r3, [sp, #4]
 8018e5a:	6423      	str	r3, [r4, #64]	; 0x40
 8018e5c:	6823      	ldr	r3, [r4, #0]
 8018e5e:	a902      	add	r1, sp, #8
 8018e60:	691b      	ldr	r3, [r3, #16]
 8018e62:	4620      	mov	r0, r4
 8018e64:	4798      	blx	r3
 8018e66:	b004      	add	sp, #16
 8018e68:	bd10      	pop	{r4, pc}
	...

08018e6c <_ZN8touchgfx5Gauge8setValueEi>:
 8018e6c:	b570      	push	{r4, r5, r6, lr}
 8018e6e:	4604      	mov	r4, r0
 8018e70:	f7fc feca 	bl	8015c08 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8018e74:	e9d4 3228 	ldrd	r3, r2, [r4, #160]	; 0xa0
 8018e78:	429a      	cmp	r2, r3
 8018e7a:	bfac      	ite	ge
 8018e7c:	f894 3141 	ldrbge.w	r3, [r4, #321]	; 0x141
 8018e80:	f894 3140 	ldrblt.w	r3, [r4, #320]	; 0x140
 8018e84:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
 8018e88:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 8018e8c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8018e90:	1ac9      	subs	r1, r1, r3
 8018e92:	2900      	cmp	r1, #0
 8018e94:	bfb8      	it	lt
 8018e96:	4249      	neglt	r1, r1
 8018e98:	b289      	uxth	r1, r1
 8018e9a:	4620      	mov	r0, r4
 8018e9c:	f7fc ff42 	bl	8015d24 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8018ea0:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8018ea4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 8018ea8:	eddf 6a19 	vldr	s13, [pc, #100]	; 8018f10 <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 8018eac:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8018f14 <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 8018eb0:	429a      	cmp	r2, r3
 8018eb2:	4605      	mov	r5, r0
 8018eb4:	f504 76aa 	add.w	r6, r4, #340	; 0x154
 8018eb8:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8018ebc:	da15      	bge.n	8018eea <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 8018ebe:	1b5b      	subs	r3, r3, r5
 8018ec0:	ee07 3a90 	vmov	s15, r3
 8018ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ec8:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
 8018ecc:	ed94 0a39 	vldr	s0, [r4, #228]	; 0xe4
 8018ed0:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 8018ed4:	ee21 1a07 	vmul.f32	s2, s2, s14
 8018ed8:	f7ff f9b9 	bl	801824e <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 8018edc:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
 8018ee0:	1b49      	subs	r1, r1, r5
 8018ee2:	4630      	mov	r0, r6
 8018ee4:	f7ff ffac 	bl	8018e40 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 8018ee8:	bd70      	pop	{r4, r5, r6, pc}
 8018eea:	442b      	add	r3, r5
 8018eec:	ee07 3a90 	vmov	s15, r3
 8018ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ef4:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
 8018ef8:	ed94 0a39 	vldr	s0, [r4, #228]	; 0xe4
 8018efc:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 8018f00:	ee21 1a07 	vmul.f32	s2, s2, s14
 8018f04:	f7ff f9a3 	bl	801824e <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 8018f08:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
 8018f0c:	4429      	add	r1, r5
 8018f0e:	e7e8      	b.n	8018ee2 <_ZN8touchgfx5Gauge8setValueEi+0x76>
 8018f10:	43340000 	.word	0x43340000
 8018f14:	40490fdb 	.word	0x40490fdb

08018f18 <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 8018f18:	4291      	cmp	r1, r2
 8018f1a:	b510      	push	{r4, lr}
 8018f1c:	4604      	mov	r4, r0
 8018f1e:	d105      	bne.n	8018f2c <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x14>
 8018f20:	4b0b      	ldr	r3, [pc, #44]	; (8018f50 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x38>)
 8018f22:	4a0c      	ldr	r2, [pc, #48]	; (8018f54 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x3c>)
 8018f24:	480c      	ldr	r0, [pc, #48]	; (8018f58 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x40>)
 8018f26:	215e      	movs	r1, #94	; 0x5e
 8018f28:	f013 fbde 	bl	802c6e8 <__assert_func>
 8018f2c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
 8018f30:	f8c0 2148 	str.w	r2, [r0, #328]	; 0x148
 8018f34:	0149      	lsls	r1, r1, #5
 8018f36:	0152      	lsls	r2, r2, #5
 8018f38:	f8c0 1190 	str.w	r1, [r0, #400]	; 0x190
 8018f3c:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
 8018f40:	f7fc fe1a 	bl	8015b78 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 8018f44:	4601      	mov	r1, r0
 8018f46:	4620      	mov	r0, r4
 8018f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f4c:	f7ff bf8e 	b.w	8018e6c <_ZN8touchgfx5Gauge8setValueEi>
 8018f50:	08030b08 	.word	0x08030b08
 8018f54:	08030c2c 	.word	0x08030c2c
 8018f58:	08030b1f 	.word	0x08030b1f

08018f5c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8018f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018f5e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f64:	4299      	cmp	r1, r3
 8018f66:	4606      	mov	r6, r0
 8018f68:	d02a      	beq.n	8018fc0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8018f6a:	4b16      	ldr	r3, [pc, #88]	; (8018fc4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	b92b      	cbnz	r3, 8018f7c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8018f70:	4b15      	ldr	r3, [pc, #84]	; (8018fc8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8018f72:	4a16      	ldr	r2, [pc, #88]	; (8018fcc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8018f74:	21ae      	movs	r1, #174	; 0xae
 8018f76:	4816      	ldr	r0, [pc, #88]	; (8018fd0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8018f78:	f013 fbb6 	bl	802c6e8 <__assert_func>
 8018f7c:	4a15      	ldr	r2, [pc, #84]	; (8018fd4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8018f7e:	8812      	ldrh	r2, [r2, #0]
 8018f80:	428a      	cmp	r2, r1
 8018f82:	d803      	bhi.n	8018f8c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8018f84:	4b14      	ldr	r3, [pc, #80]	; (8018fd8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8018f86:	4a11      	ldr	r2, [pc, #68]	; (8018fcc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8018f88:	21af      	movs	r1, #175	; 0xaf
 8018f8a:	e7f4      	b.n	8018f76 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8018f8c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8018f90:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8018f94:	4b11      	ldr	r3, [pc, #68]	; (8018fdc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8018f96:	7854      	ldrb	r4, [r2, #1]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8018f9e:	682b      	ldr	r3, [r5, #0]
 8018fa0:	69df      	ldr	r7, [r3, #28]
 8018fa2:	4b0f      	ldr	r3, [pc, #60]	; (8018fe0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8018fa4:	6818      	ldr	r0, [r3, #0]
 8018fa6:	f7fa f8e1 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8018faa:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8018fae:	2300      	movs	r3, #0
 8018fb0:	9300      	str	r3, [sp, #0]
 8018fb2:	4602      	mov	r2, r0
 8018fb4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8018fb6:	4621      	mov	r1, r4
 8018fb8:	4628      	mov	r0, r5
 8018fba:	47b8      	blx	r7
 8018fbc:	b003      	add	sp, #12
 8018fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fc0:	2000      	movs	r0, #0
 8018fc2:	e7fb      	b.n	8018fbc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8018fc4:	20006820 	.word	0x20006820
 8018fc8:	0803093c 	.word	0x0803093c
 8018fcc:	08030ce0 	.word	0x08030ce0
 8018fd0:	0803097e 	.word	0x0803097e
 8018fd4:	20006824 	.word	0x20006824
 8018fd8:	080309a7 	.word	0x080309a7
 8018fdc:	20006828 	.word	0x20006828
 8018fe0:	2000682c 	.word	0x2000682c

08018fe4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8018fe4:	b570      	push	{r4, r5, r6, lr}
 8018fe6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018fec:	4299      	cmp	r1, r3
 8018fee:	4604      	mov	r4, r0
 8018ff0:	d01e      	beq.n	8019030 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8018ff2:	6803      	ldr	r3, [r0, #0]
 8018ff4:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8018ff6:	4b0f      	ldr	r3, [pc, #60]	; (8019034 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	b92b      	cbnz	r3, 8019008 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8018ffc:	4b0e      	ldr	r3, [pc, #56]	; (8019038 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8018ffe:	4a0f      	ldr	r2, [pc, #60]	; (801903c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8019000:	21ae      	movs	r1, #174	; 0xae
 8019002:	480f      	ldr	r0, [pc, #60]	; (8019040 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8019004:	f013 fb70 	bl	802c6e8 <__assert_func>
 8019008:	4b0e      	ldr	r3, [pc, #56]	; (8019044 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 801900a:	881b      	ldrh	r3, [r3, #0]
 801900c:	428b      	cmp	r3, r1
 801900e:	d803      	bhi.n	8019018 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8019010:	4b0d      	ldr	r3, [pc, #52]	; (8019048 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8019012:	4a0a      	ldr	r2, [pc, #40]	; (801903c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8019014:	21af      	movs	r1, #175	; 0xaf
 8019016:	e7f4      	b.n	8019002 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8019018:	4b0c      	ldr	r3, [pc, #48]	; (801904c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 801901a:	6818      	ldr	r0, [r3, #0]
 801901c:	f7fa f8a6 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8019020:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8019022:	4601      	mov	r1, r0
 8019024:	46ac      	mov	ip, r5
 8019026:	4620      	mov	r0, r4
 8019028:	2300      	movs	r3, #0
 801902a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801902e:	4760      	bx	ip
 8019030:	2000      	movs	r0, #0
 8019032:	bd70      	pop	{r4, r5, r6, pc}
 8019034:	20006820 	.word	0x20006820
 8019038:	0803093c 	.word	0x0803093c
 801903c:	08030ce0 	.word	0x08030ce0
 8019040:	0803097e 	.word	0x0803097e
 8019044:	20006824 	.word	0x20006824
 8019048:	080309a7 	.word	0x080309a7
 801904c:	2000682c 	.word	0x2000682c

08019050 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8019050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019054:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8019056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801905a:	4293      	cmp	r3, r2
 801905c:	b08c      	sub	sp, #48	; 0x30
 801905e:	4604      	mov	r4, r0
 8019060:	460e      	mov	r6, r1
 8019062:	d05d      	beq.n	8019120 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8019064:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8019144 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8019068:	f8d8 2000 	ldr.w	r2, [r8]
 801906c:	b92a      	cbnz	r2, 801907a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801906e:	4b2e      	ldr	r3, [pc, #184]	; (8019128 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8019070:	4a2e      	ldr	r2, [pc, #184]	; (801912c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8019072:	21ae      	movs	r1, #174	; 0xae
 8019074:	482e      	ldr	r0, [pc, #184]	; (8019130 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8019076:	f013 fb37 	bl	802c6e8 <__assert_func>
 801907a:	4f2e      	ldr	r7, [pc, #184]	; (8019134 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 801907c:	8839      	ldrh	r1, [r7, #0]
 801907e:	4299      	cmp	r1, r3
 8019080:	d803      	bhi.n	801908a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8019082:	4b2d      	ldr	r3, [pc, #180]	; (8019138 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8019084:	4a29      	ldr	r2, [pc, #164]	; (801912c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8019086:	21af      	movs	r1, #175	; 0xaf
 8019088:	e7f4      	b.n	8019074 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 801908a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801908e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019092:	4b2a      	ldr	r3, [pc, #168]	; (801913c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801909a:	2a00      	cmp	r2, #0
 801909c:	d040      	beq.n	8019120 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801909e:	784b      	ldrb	r3, [r1, #1]
 80190a0:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80190a4:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80190a8:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80190ac:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 80190b0:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 80190b4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80190b6:	9207      	str	r2, [sp, #28]
 80190b8:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80190bc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80190c0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80190c4:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 80190c8:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80190cc:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80190d0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80190d4:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80190d8:	f88d a020 	strb.w	sl, [sp, #32]
 80190dc:	9009      	str	r0, [sp, #36]	; 0x24
 80190de:	f7f5 ff49 	bl	800ef74 <_ZN8touchgfx3HAL3lcdEv>
 80190e2:	ad05      	add	r5, sp, #20
 80190e4:	4681      	mov	r9, r0
 80190e6:	4621      	mov	r1, r4
 80190e8:	4628      	mov	r0, r5
 80190ea:	f002 fd8c 	bl	801bc06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80190ee:	f8d8 3000 	ldr.w	r3, [r8]
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d0bb      	beq.n	801906e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 80190f6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80190f8:	883b      	ldrh	r3, [r7, #0]
 80190fa:	428b      	cmp	r3, r1
 80190fc:	d9c1      	bls.n	8019082 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 80190fe:	4b10      	ldr	r3, [pc, #64]	; (8019140 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8019100:	6818      	ldr	r0, [r3, #0]
 8019102:	f7fa f833 	bl	801316c <_ZNK8touchgfx5Texts7getTextEt>
 8019106:	2300      	movs	r3, #0
 8019108:	9303      	str	r3, [sp, #12]
 801910a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801910c:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8019110:	ab07      	add	r3, sp, #28
 8019112:	9300      	str	r3, [sp, #0]
 8019114:	e895 0006 	ldmia.w	r5, {r1, r2}
 8019118:	4633      	mov	r3, r6
 801911a:	4648      	mov	r0, r9
 801911c:	f7f9 ffb7 	bl	801308e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019120:	b00c      	add	sp, #48	; 0x30
 8019122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019126:	bf00      	nop
 8019128:	0803093c 	.word	0x0803093c
 801912c:	08030ce0 	.word	0x08030ce0
 8019130:	0803097e 	.word	0x0803097e
 8019134:	20006824 	.word	0x20006824
 8019138:	080309a7 	.word	0x080309a7
 801913c:	20006828 	.word	0x20006828
 8019140:	2000682c 	.word	0x2000682c
 8019144:	20006820 	.word	0x20006820

08019148 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8019148:	b570      	push	{r4, r5, r6, lr}
 801914a:	880b      	ldrh	r3, [r1, #0]
 801914c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801914e:	4604      	mov	r4, r0
 8019150:	4608      	mov	r0, r1
 8019152:	460d      	mov	r5, r1
 8019154:	f005 f94e 	bl	801e3f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019158:	4606      	mov	r6, r0
 801915a:	4628      	mov	r0, r5
 801915c:	f005 f984 	bl	801e468 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019160:	6823      	ldr	r3, [r4, #0]
 8019162:	4605      	mov	r5, r0
 8019164:	b231      	sxth	r1, r6
 8019166:	4620      	mov	r0, r4
 8019168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801916a:	4798      	blx	r3
 801916c:	6823      	ldr	r3, [r4, #0]
 801916e:	b229      	sxth	r1, r5
 8019170:	4620      	mov	r0, r4
 8019172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019178:	4718      	bx	r3

0801917a <_ZNK8touchgfx5Image12getSolidRectEv>:
 801917a:	b510      	push	{r4, lr}
 801917c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8019180:	2bff      	cmp	r3, #255	; 0xff
 8019182:	4604      	mov	r4, r0
 8019184:	d006      	beq.n	8019194 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8019186:	2300      	movs	r3, #0
 8019188:	8003      	strh	r3, [r0, #0]
 801918a:	8043      	strh	r3, [r0, #2]
 801918c:	8083      	strh	r3, [r0, #4]
 801918e:	80c3      	strh	r3, [r0, #6]
 8019190:	4620      	mov	r0, r4
 8019192:	bd10      	pop	{r4, pc}
 8019194:	3126      	adds	r1, #38	; 0x26
 8019196:	f005 f9a1 	bl	801e4dc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801919a:	e7f9      	b.n	8019190 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801919c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801919c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191a0:	4604      	mov	r4, r0
 80191a2:	b088      	sub	sp, #32
 80191a4:	f854 3b26 	ldr.w	r3, [r4], #38
 80191a8:	2500      	movs	r5, #0
 80191aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191ac:	460f      	mov	r7, r1
 80191ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80191b2:	a904      	add	r1, sp, #16
 80191b4:	4606      	mov	r6, r0
 80191b6:	4798      	blx	r3
 80191b8:	4620      	mov	r0, r4
 80191ba:	f005 f91b 	bl	801e3f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80191be:	4680      	mov	r8, r0
 80191c0:	4620      	mov	r0, r4
 80191c2:	f005 f951 	bl	801e468 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80191c6:	9506      	str	r5, [sp, #24]
 80191c8:	ad06      	add	r5, sp, #24
 80191ca:	f8ad 001e 	strh.w	r0, [sp, #30]
 80191ce:	4639      	mov	r1, r7
 80191d0:	4628      	mov	r0, r5
 80191d2:	f8ad 801c 	strh.w	r8, [sp, #28]
 80191d6:	f7fc ff0b 	bl	8015ff0 <_ZN8touchgfx4RectaNERKS0_>
 80191da:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80191de:	2b00      	cmp	r3, #0
 80191e0:	dd19      	ble.n	8019216 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80191e2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	dd15      	ble.n	8019216 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80191ea:	4b0c      	ldr	r3, [pc, #48]	; (801921c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80191f2:	b10a      	cbz	r2, 80191f8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80191f4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80191f6:	b900      	cbnz	r0, 80191fa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80191f8:	6898      	ldr	r0, [r3, #8]
 80191fa:	6801      	ldr	r1, [r0, #0]
 80191fc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019200:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019204:	2701      	movs	r7, #1
 8019206:	9702      	str	r7, [sp, #8]
 8019208:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801920c:	e9cd 5600 	strd	r5, r6, [sp]
 8019210:	688d      	ldr	r5, [r1, #8]
 8019212:	4621      	mov	r1, r4
 8019214:	47a8      	blx	r5
 8019216:	b008      	add	sp, #32
 8019218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801921c:	200067d0 	.word	0x200067d0

08019220 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8019220:	4b01      	ldr	r3, [pc, #4]	; (8019228 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8019222:	6019      	str	r1, [r3, #0]
 8019224:	4770      	bx	lr
 8019226:	bf00      	nop
 8019228:	200067d8 	.word	0x200067d8

0801922c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801922c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019230:	4696      	mov	lr, r2
 8019232:	4605      	mov	r5, r0
 8019234:	4614      	mov	r4, r2
 8019236:	460e      	mov	r6, r1
 8019238:	461f      	mov	r7, r3
 801923a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801923e:	b097      	sub	sp, #92	; 0x5c
 8019240:	f10d 0c1c 	add.w	ip, sp, #28
 8019244:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019248:	f8de 3000 	ldr.w	r3, [lr]
 801924c:	f8cc 3000 	str.w	r3, [ip]
 8019250:	f104 0e14 	add.w	lr, r4, #20
 8019254:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019258:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801925c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019260:	f8de 3000 	ldr.w	r3, [lr]
 8019264:	f8cc 3000 	str.w	r3, [ip]
 8019268:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801926c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019270:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8019274:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019278:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801927c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8019280:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8019284:	f8de 3000 	ldr.w	r3, [lr]
 8019288:	f8cc 3000 	str.w	r3, [ip]
 801928c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801928e:	682b      	ldr	r3, [r5, #0]
 8019290:	9201      	str	r2, [sp, #4]
 8019292:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019296:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019298:	9200      	str	r2, [sp, #0]
 801929a:	f8cd 8008 	str.w	r8, [sp, #8]
 801929e:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 80192a2:	aa07      	add	r2, sp, #28
 80192a4:	463b      	mov	r3, r7
 80192a6:	4631      	mov	r1, r6
 80192a8:	4628      	mov	r0, r5
 80192aa:	47d8      	blx	fp
 80192ac:	46a6      	mov	lr, r4
 80192ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80192b2:	f10d 0c1c 	add.w	ip, sp, #28
 80192b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80192ba:	f8de 3000 	ldr.w	r3, [lr]
 80192be:	f8cc 3000 	str.w	r3, [ip]
 80192c2:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80192c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80192ca:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80192ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80192d2:	343c      	adds	r4, #60	; 0x3c
 80192d4:	f8de 3000 	ldr.w	r3, [lr]
 80192d8:	f8cc 3000 	str.w	r3, [ip]
 80192dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80192de:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80192e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80192e6:	6823      	ldr	r3, [r4, #0]
 80192e8:	f8cc 3000 	str.w	r3, [ip]
 80192ec:	682b      	ldr	r3, [r5, #0]
 80192ee:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80192f2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80192f4:	9201      	str	r2, [sp, #4]
 80192f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80192f8:	9200      	str	r2, [sp, #0]
 80192fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80192fe:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8019300:	aa07      	add	r2, sp, #28
 8019302:	463b      	mov	r3, r7
 8019304:	4631      	mov	r1, r6
 8019306:	4628      	mov	r0, r5
 8019308:	47a0      	blx	r4
 801930a:	b017      	add	sp, #92	; 0x5c
 801930c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019310 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019310:	2000      	movs	r0, #0
 8019312:	4770      	bx	lr

08019314 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8019314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019318:	b08d      	sub	sp, #52	; 0x34
 801931a:	4688      	mov	r8, r1
 801931c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801931e:	f8d3 c000 	ldr.w	ip, [r3]
 8019322:	680f      	ldr	r7, [r1, #0]
 8019324:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8019328:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801932c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8019330:	edd3 6a07 	vldr	s13, [r3, #28]
 8019334:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019336:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801933a:	f9b1 9000 	ldrsh.w	r9, [r1]
 801933e:	f9ba 1000 	ldrsh.w	r1, [sl]
 8019342:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8019346:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801934a:	eba7 070c 	sub.w	r7, r7, ip
 801934e:	42bc      	cmp	r4, r7
 8019350:	bfa8      	it	ge
 8019352:	463c      	movge	r4, r7
 8019354:	ee07 4a90 	vmov	s15, r4
 8019358:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801935c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8019360:	ee25 4a04 	vmul.f32	s8, s10, s8
 8019364:	ee65 4a24 	vmul.f32	s9, s10, s9
 8019368:	ee25 5a27 	vmul.f32	s10, s10, s15
 801936c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019370:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019374:	eb09 0e0c 	add.w	lr, r9, ip
 8019378:	4571      	cmp	r1, lr
 801937a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801937e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8019382:	ee36 0a84 	vadd.f32	s0, s13, s8
 8019386:	ee61 1a87 	vmul.f32	s3, s3, s14
 801938a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801938e:	f340 808d 	ble.w	80194ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 8019392:	eba1 060e 	sub.w	r6, r1, lr
 8019396:	fb96 f5f4 	sdiv	r5, r6, r4
 801939a:	ee07 5a10 	vmov	s14, r5
 801939e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80193a2:	2d00      	cmp	r5, #0
 80193a4:	fb04 6615 	mls	r6, r4, r5, r6
 80193a8:	eea7 0a04 	vfma.f32	s0, s14, s8
 80193ac:	eee7 0a24 	vfma.f32	s1, s14, s9
 80193b0:	eea7 1a05 	vfma.f32	s2, s14, s10
 80193b4:	dd13      	ble.n	80193de <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 80193b6:	ee70 6a44 	vsub.f32	s13, s0, s8
 80193ba:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80193be:	eef5 6a40 	vcmp.f32	s13, #0.0
 80193c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193c6:	bf18      	it	ne
 80193c8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80193cc:	ee31 2a45 	vsub.f32	s4, s2, s10
 80193d0:	bf08      	it	eq
 80193d2:	eeb0 7a67 	vmoveq.f32	s14, s15
 80193d6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80193da:	ee22 2a07 	vmul.f32	s4, s4, s14
 80193de:	fb05 f204 	mul.w	r2, r5, r4
 80193e2:	1abf      	subs	r7, r7, r2
 80193e4:	4494      	add	ip, r2
 80193e6:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80193ea:	4411      	add	r1, r2
 80193ec:	eb09 020c 	add.w	r2, r9, ip
 80193f0:	443a      	add	r2, r7
 80193f2:	b209      	sxth	r1, r1
 80193f4:	428a      	cmp	r2, r1
 80193f6:	bfc4      	itt	gt
 80193f8:	eba1 0209 	subgt.w	r2, r1, r9
 80193fc:	eba2 070c 	subgt.w	r7, r2, ip
 8019400:	2f00      	cmp	r7, #0
 8019402:	dd50      	ble.n	80194a6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 8019404:	fb97 f1f4 	sdiv	r1, r7, r4
 8019408:	fb04 7211 	mls	r2, r4, r1, r7
 801940c:	b90a      	cbnz	r2, 8019412 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 801940e:	3901      	subs	r1, #1
 8019410:	4622      	mov	r2, r4
 8019412:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8019416:	6840      	ldr	r0, [r0, #4]
 8019418:	900b      	str	r0, [sp, #44]	; 0x2c
 801941a:	f8d0 a000 	ldr.w	sl, [r0]
 801941e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019420:	9008      	str	r0, [sp, #32]
 8019422:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8019426:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019428:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801942c:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8019430:	695b      	ldr	r3, [r3, #20]
 8019432:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019434:	445b      	add	r3, fp
 8019436:	eef0 6a42 	vmov.f32	s13, s4
 801943a:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801943e:	ee21 3a23 	vmul.f32	s6, s2, s7
 8019442:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8019446:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801944a:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801944e:	9307      	str	r3, [sp, #28]
 8019450:	ee17 7a90 	vmov	r7, s15
 8019454:	ee73 7a42 	vsub.f32	s15, s6, s4
 8019458:	eeb0 7a61 	vmov.f32	s14, s3
 801945c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019460:	ee16 3a90 	vmov	r3, s13
 8019464:	fb97 f7f4 	sdiv	r7, r7, r4
 8019468:	ee17 ca90 	vmov	ip, s15
 801946c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8019470:	fb9c fcf4 	sdiv	ip, ip, r4
 8019474:	fb0c 3306 	mla	r3, ip, r6, r3
 8019478:	9302      	str	r3, [sp, #8]
 801947a:	ee17 3a10 	vmov	r3, s14
 801947e:	44b6      	add	lr, r6
 8019480:	fb04 e505 	mla	r5, r4, r5, lr
 8019484:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8019488:	fb07 3706 	mla	r7, r7, r6, r3
 801948c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8019490:	e9cd 4700 	strd	r4, r7, [sp]
 8019494:	2900      	cmp	r1, #0
 8019496:	bfcc      	ite	gt
 8019498:	46a1      	movgt	r9, r4
 801949a:	4691      	movle	r9, r2
 801949c:	eba9 0306 	sub.w	r3, r9, r6
 80194a0:	f8da 4008 	ldr.w	r4, [sl, #8]
 80194a4:	47a0      	blx	r4
 80194a6:	b00d      	add	sp, #52	; 0x34
 80194a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194ac:	2500      	movs	r5, #0
 80194ae:	462e      	mov	r6, r5
 80194b0:	e799      	b.n	80193e6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

080194b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80194b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194b8:	b0db      	sub	sp, #364	; 0x16c
 80194ba:	461d      	mov	r5, r3
 80194bc:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80194c0:	930a      	str	r3, [sp, #40]	; 0x28
 80194c2:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80194c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80194c8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80194cc:	9310      	str	r3, [sp, #64]	; 0x40
 80194ce:	6803      	ldr	r3, [r0, #0]
 80194d0:	910f      	str	r1, [sp, #60]	; 0x3c
 80194d2:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80194d4:	9009      	str	r0, [sp, #36]	; 0x24
 80194d6:	4614      	mov	r4, r2
 80194d8:	4629      	mov	r1, r5
 80194da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80194de:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80194e2:	47b8      	blx	r7
 80194e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194e6:	6058      	str	r0, [r3, #4]
 80194e8:	2800      	cmp	r0, #0
 80194ea:	f000 83a1 	beq.w	8019c30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80194ee:	682b      	ldr	r3, [r5, #0]
 80194f0:	9314      	str	r3, [sp, #80]	; 0x50
 80194f2:	686b      	ldr	r3, [r5, #4]
 80194f4:	9315      	str	r3, [sp, #84]	; 0x54
 80194f6:	4bc4      	ldr	r3, [pc, #784]	; (8019808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80194f8:	ed94 7a02 	vldr	s14, [r4, #8]
 80194fc:	7819      	ldrb	r1, [r3, #0]
 80194fe:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8019502:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8019506:	2900      	cmp	r1, #0
 8019508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801950c:	bf16      	itet	ne
 801950e:	4619      	movne	r1, r3
 8019510:	4611      	moveq	r1, r2
 8019512:	4613      	movne	r3, r2
 8019514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019518:	9116      	str	r1, [sp, #88]	; 0x58
 801951a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801951e:	f240 8387 	bls.w	8019c30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019522:	ed94 7a07 	vldr	s14, [r4, #28]
 8019526:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801952a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801952e:	f240 837f 	bls.w	8019c30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019532:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8019536:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801953a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801953e:	f240 8377 	bls.w	8019c30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019542:	6822      	ldr	r2, [r4, #0]
 8019544:	4bb1      	ldr	r3, [pc, #708]	; (801980c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8019546:	429a      	cmp	r2, r3
 8019548:	f2c0 8372 	blt.w	8019c30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801954c:	49b0      	ldr	r1, [pc, #704]	; (8019810 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801954e:	6963      	ldr	r3, [r4, #20]
 8019550:	428a      	cmp	r2, r1
 8019552:	f300 836d 	bgt.w	8019c30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019556:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801955a:	48ae      	ldr	r0, [pc, #696]	; (8019814 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801955c:	33ff      	adds	r3, #255	; 0xff
 801955e:	4283      	cmp	r3, r0
 8019560:	f200 8366 	bhi.w	8019c30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019564:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019566:	4dac      	ldr	r5, [pc, #688]	; (8019818 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8019568:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801956c:	33ff      	adds	r3, #255	; 0xff
 801956e:	42ab      	cmp	r3, r5
 8019570:	f200 835e 	bhi.w	8019c30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019574:	6862      	ldr	r2, [r4, #4]
 8019576:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801957a:	33ff      	adds	r3, #255	; 0xff
 801957c:	4283      	cmp	r3, r0
 801957e:	f200 8357 	bhi.w	8019c30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019582:	69a1      	ldr	r1, [r4, #24]
 8019584:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8019588:	33ff      	adds	r3, #255	; 0xff
 801958a:	4283      	cmp	r3, r0
 801958c:	f200 8350 	bhi.w	8019c30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019590:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019592:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8019596:	30ff      	adds	r0, #255	; 0xff
 8019598:	42a8      	cmp	r0, r5
 801959a:	f200 8349 	bhi.w	8019c30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801959e:	428a      	cmp	r2, r1
 80195a0:	f280 8110 	bge.w	80197c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80195a4:	429a      	cmp	r2, r3
 80195a6:	f300 8119 	bgt.w	80197dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80195aa:	4299      	cmp	r1, r3
 80195ac:	f280 811d 	bge.w	80197ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80195b0:	2502      	movs	r5, #2
 80195b2:	2701      	movs	r7, #1
 80195b4:	46a9      	mov	r9, r5
 80195b6:	46b8      	mov	r8, r7
 80195b8:	f04f 0a00 	mov.w	sl, #0
 80195bc:	4621      	mov	r1, r4
 80195be:	a849      	add	r0, sp, #292	; 0x124
 80195c0:	f003 ff28 	bl	801d414 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80195c4:	4622      	mov	r2, r4
 80195c6:	4653      	mov	r3, sl
 80195c8:	a949      	add	r1, sp, #292	; 0x124
 80195ca:	f8cd 9000 	str.w	r9, [sp]
 80195ce:	a819      	add	r0, sp, #100	; 0x64
 80195d0:	f004 f850 	bl	801d674 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80195d4:	4622      	mov	r2, r4
 80195d6:	4653      	mov	r3, sl
 80195d8:	a949      	add	r1, sp, #292	; 0x124
 80195da:	f8cd 8000 	str.w	r8, [sp]
 80195de:	a829      	add	r0, sp, #164	; 0xa4
 80195e0:	f004 f848 	bl	801d674 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80195e4:	4643      	mov	r3, r8
 80195e6:	4622      	mov	r2, r4
 80195e8:	a949      	add	r1, sp, #292	; 0x124
 80195ea:	f8cd 9000 	str.w	r9, [sp]
 80195ee:	a839      	add	r0, sp, #228	; 0xe4
 80195f0:	f004 f840 	bl	801d674 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80195f4:	42af      	cmp	r7, r5
 80195f6:	bfb5      	itete	lt
 80195f8:	2300      	movlt	r3, #0
 80195fa:	2301      	movge	r3, #1
 80195fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80195fe:	930e      	strge	r3, [sp, #56]	; 0x38
 8019600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019602:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019606:	af12      	add	r7, sp, #72	; 0x48
 8019608:	bfb9      	ittee	lt
 801960a:	ad29      	addlt	r5, sp, #164	; 0xa4
 801960c:	ac19      	addlt	r4, sp, #100	; 0x64
 801960e:	ad19      	addge	r5, sp, #100	; 0x64
 8019610:	ac29      	addge	r4, sp, #164	; 0xa4
 8019612:	e887 0003 	stmia.w	r7, {r0, r1}
 8019616:	b928      	cbnz	r0, 8019624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8019618:	4b80      	ldr	r3, [pc, #512]	; (801981c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801961a:	6818      	ldr	r0, [r3, #0]
 801961c:	6803      	ldr	r3, [r0, #0]
 801961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019620:	4798      	blx	r3
 8019622:	6038      	str	r0, [r7, #0]
 8019624:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019626:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801962a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801962e:	930c      	str	r3, [sp, #48]	; 0x30
 8019630:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019632:	6963      	ldr	r3, [r4, #20]
 8019634:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019636:	440b      	add	r3, r1
 8019638:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801963c:	4408      	add	r0, r1
 801963e:	b200      	sxth	r0, r0
 8019640:	4283      	cmp	r3, r0
 8019642:	900d      	str	r0, [sp, #52]	; 0x34
 8019644:	f280 80dd 	bge.w	8019802 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8019648:	428b      	cmp	r3, r1
 801964a:	da08      	bge.n	801965e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801964c:	2a00      	cmp	r2, #0
 801964e:	dd06      	ble.n	801965e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019650:	1acb      	subs	r3, r1, r3
 8019652:	429a      	cmp	r2, r3
 8019654:	f2c0 80e4 	blt.w	8019820 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8019658:	2b00      	cmp	r3, #0
 801965a:	f300 80e2 	bgt.w	8019822 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801965e:	6967      	ldr	r7, [r4, #20]
 8019660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019662:	443b      	add	r3, r7
 8019664:	461f      	mov	r7, r3
 8019666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019668:	1bdf      	subs	r7, r3, r7
 801966a:	4297      	cmp	r7, r2
 801966c:	bfa8      	it	ge
 801966e:	4617      	movge	r7, r2
 8019670:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019674:	2f00      	cmp	r7, #0
 8019676:	f340 8166 	ble.w	8019946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801967a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801967c:	6829      	ldr	r1, [r5, #0]
 801967e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019682:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019686:	6820      	ldr	r0, [r4, #0]
 8019688:	4411      	add	r1, r2
 801968a:	4299      	cmp	r1, r3
 801968c:	dd1a      	ble.n	80196c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801968e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019692:	440b      	add	r3, r1
 8019694:	4402      	add	r2, r0
 8019696:	b21b      	sxth	r3, r3
 8019698:	429a      	cmp	r2, r3
 801969a:	dc13      	bgt.n	80196c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801969c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801969e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80196a0:	681b      	ldr	r3, [r3, #0]
 80196a2:	9206      	str	r2, [sp, #24]
 80196a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80196a6:	9205      	str	r2, [sp, #20]
 80196a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80196aa:	9500      	str	r5, [sp, #0]
 80196ac:	e9cd b203 	strd	fp, r2, [sp, #12]
 80196b0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80196b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80196b4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80196b8:	a912      	add	r1, sp, #72	; 0x48
 80196ba:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 80196be:	aa49      	add	r2, sp, #292	; 0x124
 80196c0:	4623      	mov	r3, r4
 80196c2:	47c8      	blx	r9
 80196c4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80196c8:	441a      	add	r2, r3
 80196ca:	6963      	ldr	r3, [r4, #20]
 80196cc:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80196d0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80196d4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80196d8:	68a1      	ldr	r1, [r4, #8]
 80196da:	ed94 6a08 	vldr	s12, [r4, #32]
 80196de:	6022      	str	r2, [r4, #0]
 80196e0:	3301      	adds	r3, #1
 80196e2:	6163      	str	r3, [r4, #20]
 80196e4:	69a3      	ldr	r3, [r4, #24]
 80196e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80196ea:	3b01      	subs	r3, #1
 80196ec:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80196f0:	61a3      	str	r3, [r4, #24]
 80196f2:	6923      	ldr	r3, [r4, #16]
 80196f4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80196f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80196fc:	edd4 6a07 	vldr	s13, [r4, #28]
 8019700:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019704:	440b      	add	r3, r1
 8019706:	68e1      	ldr	r1, [r4, #12]
 8019708:	6123      	str	r3, [r4, #16]
 801970a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801970e:	428b      	cmp	r3, r1
 8019710:	edc4 6a07 	vstr	s13, [r4, #28]
 8019714:	db15      	blt.n	8019742 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8019716:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801971a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801971e:	3201      	adds	r2, #1
 8019720:	edc4 6a07 	vstr	s13, [r4, #28]
 8019724:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019728:	6022      	str	r2, [r4, #0]
 801972a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801972e:	1a5b      	subs	r3, r3, r1
 8019730:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019734:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019738:	6123      	str	r3, [r4, #16]
 801973a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801973e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019742:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019746:	441a      	add	r2, r3
 8019748:	696b      	ldr	r3, [r5, #20]
 801974a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801974e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019752:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019756:	68a9      	ldr	r1, [r5, #8]
 8019758:	ed95 6a08 	vldr	s12, [r5, #32]
 801975c:	602a      	str	r2, [r5, #0]
 801975e:	3301      	adds	r3, #1
 8019760:	616b      	str	r3, [r5, #20]
 8019762:	69ab      	ldr	r3, [r5, #24]
 8019764:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019768:	3b01      	subs	r3, #1
 801976a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801976e:	61ab      	str	r3, [r5, #24]
 8019770:	692b      	ldr	r3, [r5, #16]
 8019772:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801977a:	edd5 6a07 	vldr	s13, [r5, #28]
 801977e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019782:	440b      	add	r3, r1
 8019784:	68e9      	ldr	r1, [r5, #12]
 8019786:	612b      	str	r3, [r5, #16]
 8019788:	ee76 6a86 	vadd.f32	s13, s13, s12
 801978c:	428b      	cmp	r3, r1
 801978e:	edc5 6a07 	vstr	s13, [r5, #28]
 8019792:	db15      	blt.n	80197c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019794:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019798:	ee76 6a26 	vadd.f32	s13, s12, s13
 801979c:	3201      	adds	r2, #1
 801979e:	edc5 6a07 	vstr	s13, [r5, #28]
 80197a2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80197a6:	602a      	str	r2, [r5, #0]
 80197a8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80197ac:	1a5b      	subs	r3, r3, r1
 80197ae:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80197b2:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80197b6:	612b      	str	r3, [r5, #16]
 80197b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80197bc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80197c0:	3f01      	subs	r7, #1
 80197c2:	e757      	b.n	8019674 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80197c4:	4299      	cmp	r1, r3
 80197c6:	dc13      	bgt.n	80197f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80197c8:	429a      	cmp	r2, r3
 80197ca:	da14      	bge.n	80197f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80197cc:	2502      	movs	r5, #2
 80197ce:	2703      	movs	r7, #3
 80197d0:	46a9      	mov	r9, r5
 80197d2:	f04f 0800 	mov.w	r8, #0
 80197d6:	f04f 0a01 	mov.w	sl, #1
 80197da:	e6ef      	b.n	80195bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80197dc:	2501      	movs	r5, #1
 80197de:	2700      	movs	r7, #0
 80197e0:	46a9      	mov	r9, r5
 80197e2:	46b8      	mov	r8, r7
 80197e4:	f04f 0a02 	mov.w	sl, #2
 80197e8:	e6e8      	b.n	80195bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80197ea:	2501      	movs	r5, #1
 80197ec:	2702      	movs	r7, #2
 80197ee:	e6e1      	b.n	80195b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80197f0:	2500      	movs	r5, #0
 80197f2:	2701      	movs	r7, #1
 80197f4:	e7f4      	b.n	80197e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80197f6:	2702      	movs	r7, #2
 80197f8:	2503      	movs	r5, #3
 80197fa:	f04f 0900 	mov.w	r9, #0
 80197fe:	46b8      	mov	r8, r7
 8019800:	e7e9      	b.n	80197d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8019802:	4613      	mov	r3, r2
 8019804:	e728      	b.n	8019658 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8019806:	bf00      	nop
 8019808:	200067c8 	.word	0x200067c8
 801980c:	fffd8f01 	.word	0xfffd8f01
 8019810:	00027100 	.word	0x00027100
 8019814:	0004e1ff 	.word	0x0004e1ff
 8019818:	0004e1fe 	.word	0x0004e1fe
 801981c:	200067d0 	.word	0x200067d0
 8019820:	4613      	mov	r3, r2
 8019822:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019824:	9111      	str	r1, [sp, #68]	; 0x44
 8019826:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801982a:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801982e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8019830:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8019834:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8019838:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801983c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8019840:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8019844:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8019848:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801984c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8019850:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8019854:	469e      	mov	lr, r3
 8019856:	469c      	mov	ip, r3
 8019858:	f04f 0900 	mov.w	r9, #0
 801985c:	f1bc 0f00 	cmp.w	ip, #0
 8019860:	d147      	bne.n	80198f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8019862:	eb03 0c07 	add.w	ip, r3, r7
 8019866:	1ad7      	subs	r7, r2, r3
 8019868:	f1b9 0f00 	cmp.w	r9, #0
 801986c:	d009      	beq.n	8019882 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801986e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8019872:	9029      	str	r0, [sp, #164]	; 0xa4
 8019874:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8019878:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801987c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8019880:	912d      	str	r1, [sp, #180]	; 0xb4
 8019882:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019884:	9111      	str	r1, [sp, #68]	; 0x44
 8019886:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801988a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801988e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019892:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019896:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801989a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801989e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80198a2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80198a6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80198aa:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80198ae:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80198b2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80198b6:	f04f 0800 	mov.w	r8, #0
 80198ba:	f1be 0f00 	cmp.w	lr, #0
 80198be:	d031      	beq.n	8019924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80198c0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80198c2:	4431      	add	r1, r6
 80198c4:	4549      	cmp	r1, r9
 80198c6:	4450      	add	r0, sl
 80198c8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80198cc:	ee37 7a04 	vadd.f32	s14, s14, s8
 80198d0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80198d4:	db08      	blt.n	80198e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80198d6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80198da:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80198de:	ee37 7a06 	vadd.f32	s14, s14, s12
 80198e2:	3001      	adds	r0, #1
 80198e4:	eba1 0109 	sub.w	r1, r1, r9
 80198e8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80198ec:	f04f 0801 	mov.w	r8, #1
 80198f0:	e7e3      	b.n	80198ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80198f2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80198f4:	4431      	add	r1, r6
 80198f6:	4541      	cmp	r1, r8
 80198f8:	4450      	add	r0, sl
 80198fa:	ee37 7a24 	vadd.f32	s14, s14, s9
 80198fe:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019902:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019906:	db08      	blt.n	801991a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8019908:	ee76 6a85 	vadd.f32	s13, s13, s10
 801990c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019910:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019914:	3001      	adds	r0, #1
 8019916:	eba1 0108 	sub.w	r1, r1, r8
 801991a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801991e:	f04f 0901 	mov.w	r9, #1
 8019922:	e79b      	b.n	801985c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8019924:	449c      	add	ip, r3
 8019926:	1aff      	subs	r7, r7, r3
 8019928:	f1b8 0f00 	cmp.w	r8, #0
 801992c:	d009      	beq.n	8019942 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801992e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8019932:	9019      	str	r0, [sp, #100]	; 0x64
 8019934:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019938:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801993c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019940:	911d      	str	r1, [sp, #116]	; 0x74
 8019942:	1ad2      	subs	r2, r2, r3
 8019944:	e68b      	b.n	801965e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019948:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801994a:	2b00      	cmp	r3, #0
 801994c:	f000 80d1 	beq.w	8019af2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8019950:	ad19      	add	r5, sp, #100	; 0x64
 8019952:	ac39      	add	r4, sp, #228	; 0xe4
 8019954:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019956:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801995a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801995e:	930c      	str	r3, [sp, #48]	; 0x30
 8019960:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019962:	6963      	ldr	r3, [r4, #20]
 8019964:	440b      	add	r3, r1
 8019966:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801996a:	4408      	add	r0, r1
 801996c:	b200      	sxth	r0, r0
 801996e:	4283      	cmp	r3, r0
 8019970:	900d      	str	r0, [sp, #52]	; 0x34
 8019972:	f280 80c1 	bge.w	8019af8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019976:	428b      	cmp	r3, r1
 8019978:	da08      	bge.n	801998c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801997a:	2a00      	cmp	r2, #0
 801997c:	dd06      	ble.n	801998c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801997e:	1acb      	subs	r3, r1, r3
 8019980:	429a      	cmp	r2, r3
 8019982:	f2c0 80bb 	blt.w	8019afc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019986:	2b00      	cmp	r3, #0
 8019988:	f300 80b9 	bgt.w	8019afe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801998c:	6967      	ldr	r7, [r4, #20]
 801998e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019990:	443b      	add	r3, r7
 8019992:	461f      	mov	r7, r3
 8019994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019996:	1bdf      	subs	r7, r3, r7
 8019998:	4297      	cmp	r7, r2
 801999a:	bfa8      	it	ge
 801999c:	4617      	movge	r7, r2
 801999e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80199a2:	2f00      	cmp	r7, #0
 80199a4:	f340 813c 	ble.w	8019c20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80199a8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80199aa:	6829      	ldr	r1, [r5, #0]
 80199ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80199b0:	f9bb 3000 	ldrsh.w	r3, [fp]
 80199b4:	6820      	ldr	r0, [r4, #0]
 80199b6:	4411      	add	r1, r2
 80199b8:	4299      	cmp	r1, r3
 80199ba:	dd1a      	ble.n	80199f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80199bc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80199c0:	440b      	add	r3, r1
 80199c2:	4402      	add	r2, r0
 80199c4:	b21b      	sxth	r3, r3
 80199c6:	429a      	cmp	r2, r3
 80199c8:	dc13      	bgt.n	80199f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80199ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80199ce:	681b      	ldr	r3, [r3, #0]
 80199d0:	9206      	str	r2, [sp, #24]
 80199d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80199d4:	9205      	str	r2, [sp, #20]
 80199d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80199d8:	9500      	str	r5, [sp, #0]
 80199da:	e9cd b203 	strd	fp, r2, [sp, #12]
 80199de:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80199e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80199e2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80199e6:	a912      	add	r1, sp, #72	; 0x48
 80199e8:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 80199ec:	aa49      	add	r2, sp, #292	; 0x124
 80199ee:	4623      	mov	r3, r4
 80199f0:	47c8      	blx	r9
 80199f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80199f6:	441a      	add	r2, r3
 80199f8:	6963      	ldr	r3, [r4, #20]
 80199fa:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80199fe:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019a02:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8019a06:	68a1      	ldr	r1, [r4, #8]
 8019a08:	ed94 6a08 	vldr	s12, [r4, #32]
 8019a0c:	6022      	str	r2, [r4, #0]
 8019a0e:	3301      	adds	r3, #1
 8019a10:	6163      	str	r3, [r4, #20]
 8019a12:	69a3      	ldr	r3, [r4, #24]
 8019a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019a18:	3b01      	subs	r3, #1
 8019a1a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8019a1e:	61a3      	str	r3, [r4, #24]
 8019a20:	6923      	ldr	r3, [r4, #16]
 8019a22:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019a2a:	edd4 6a07 	vldr	s13, [r4, #28]
 8019a2e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019a32:	440b      	add	r3, r1
 8019a34:	68e1      	ldr	r1, [r4, #12]
 8019a36:	6123      	str	r3, [r4, #16]
 8019a38:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019a3c:	428b      	cmp	r3, r1
 8019a3e:	edc4 6a07 	vstr	s13, [r4, #28]
 8019a42:	db15      	blt.n	8019a70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8019a44:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8019a48:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019a4c:	3201      	adds	r2, #1
 8019a4e:	edc4 6a07 	vstr	s13, [r4, #28]
 8019a52:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019a56:	6022      	str	r2, [r4, #0]
 8019a58:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019a5c:	1a5b      	subs	r3, r3, r1
 8019a5e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019a62:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019a66:	6123      	str	r3, [r4, #16]
 8019a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a6c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019a70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019a74:	441a      	add	r2, r3
 8019a76:	696b      	ldr	r3, [r5, #20]
 8019a78:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019a7c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019a80:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019a84:	68a9      	ldr	r1, [r5, #8]
 8019a86:	ed95 6a08 	vldr	s12, [r5, #32]
 8019a8a:	602a      	str	r2, [r5, #0]
 8019a8c:	3301      	adds	r3, #1
 8019a8e:	616b      	str	r3, [r5, #20]
 8019a90:	69ab      	ldr	r3, [r5, #24]
 8019a92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019a96:	3b01      	subs	r3, #1
 8019a98:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019a9c:	61ab      	str	r3, [r5, #24]
 8019a9e:	692b      	ldr	r3, [r5, #16]
 8019aa0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019aa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019aa8:	edd5 6a07 	vldr	s13, [r5, #28]
 8019aac:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019ab0:	440b      	add	r3, r1
 8019ab2:	68e9      	ldr	r1, [r5, #12]
 8019ab4:	612b      	str	r3, [r5, #16]
 8019ab6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019aba:	428b      	cmp	r3, r1
 8019abc:	edc5 6a07 	vstr	s13, [r5, #28]
 8019ac0:	db15      	blt.n	8019aee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8019ac2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019ac6:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019aca:	3201      	adds	r2, #1
 8019acc:	edc5 6a07 	vstr	s13, [r5, #28]
 8019ad0:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019ad4:	602a      	str	r2, [r5, #0]
 8019ad6:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019ada:	1a5b      	subs	r3, r3, r1
 8019adc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019ae0:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019ae4:	612b      	str	r3, [r5, #16]
 8019ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019aea:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019aee:	3f01      	subs	r7, #1
 8019af0:	e757      	b.n	80199a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8019af2:	ad39      	add	r5, sp, #228	; 0xe4
 8019af4:	ac19      	add	r4, sp, #100	; 0x64
 8019af6:	e72d      	b.n	8019954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8019af8:	4613      	mov	r3, r2
 8019afa:	e744      	b.n	8019986 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8019afc:	4613      	mov	r3, r2
 8019afe:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8019b02:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8019b04:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8019b08:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8019b0c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8019b10:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8019b14:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8019b18:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8019b1c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8019b20:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8019b22:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8019b26:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8019b2a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8019b2e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8019b32:	960e      	str	r6, [sp, #56]	; 0x38
 8019b34:	469e      	mov	lr, r3
 8019b36:	461f      	mov	r7, r3
 8019b38:	f04f 0900 	mov.w	r9, #0
 8019b3c:	2f00      	cmp	r7, #0
 8019b3e:	d146      	bne.n	8019bce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8019b40:	449c      	add	ip, r3
 8019b42:	1ad7      	subs	r7, r2, r3
 8019b44:	f1b9 0f00 	cmp.w	r9, #0
 8019b48:	d009      	beq.n	8019b5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8019b4a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8019b4e:	9039      	str	r0, [sp, #228]	; 0xe4
 8019b50:	913d      	str	r1, [sp, #244]	; 0xf4
 8019b52:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8019b56:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8019b5a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8019b5e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019b60:	910e      	str	r1, [sp, #56]	; 0x38
 8019b62:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019b66:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019b6a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019b6e:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019b72:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019b76:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019b7a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019b7e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019b82:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019b86:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019b8a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019b8e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019b92:	f04f 0800 	mov.w	r8, #0
 8019b96:	f1be 0f00 	cmp.w	lr, #0
 8019b9a:	d030      	beq.n	8019bfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8019b9c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019b9e:	4431      	add	r1, r6
 8019ba0:	4549      	cmp	r1, r9
 8019ba2:	4450      	add	r0, sl
 8019ba4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019ba8:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019bac:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019bb0:	db08      	blt.n	8019bc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8019bb2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019bb6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019bba:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019bbe:	3001      	adds	r0, #1
 8019bc0:	eba1 0109 	sub.w	r1, r1, r9
 8019bc4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019bc8:	f04f 0801 	mov.w	r8, #1
 8019bcc:	e7e3      	b.n	8019b96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8019bce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019bd0:	4431      	add	r1, r6
 8019bd2:	4541      	cmp	r1, r8
 8019bd4:	4450      	add	r0, sl
 8019bd6:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019bda:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019bde:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019be2:	db08      	blt.n	8019bf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8019be4:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019be8:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019bec:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019bf0:	3001      	adds	r0, #1
 8019bf2:	eba1 0108 	sub.w	r1, r1, r8
 8019bf6:	3f01      	subs	r7, #1
 8019bf8:	f04f 0901 	mov.w	r9, #1
 8019bfc:	e79e      	b.n	8019b3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8019bfe:	449c      	add	ip, r3
 8019c00:	1aff      	subs	r7, r7, r3
 8019c02:	f1b8 0f00 	cmp.w	r8, #0
 8019c06:	d009      	beq.n	8019c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8019c08:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8019c0c:	9019      	str	r0, [sp, #100]	; 0x64
 8019c0e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019c12:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019c16:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019c1a:	911d      	str	r1, [sp, #116]	; 0x74
 8019c1c:	1ad2      	subs	r2, r2, r3
 8019c1e:	e6b5      	b.n	801998c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019c20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	b923      	cbnz	r3, 8019c30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019c26:	4b04      	ldr	r3, [pc, #16]	; (8019c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8019c28:	6818      	ldr	r0, [r3, #0]
 8019c2a:	6803      	ldr	r3, [r0, #0]
 8019c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c2e:	4798      	blx	r3
 8019c30:	b05b      	add	sp, #364	; 0x16c
 8019c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c36:	bf00      	nop
 8019c38:	200067d0 	.word	0x200067d0

08019c3c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8019c3c:	b570      	push	{r4, r5, r6, lr}
 8019c3e:	4604      	mov	r4, r0
 8019c40:	2500      	movs	r5, #0
 8019c42:	7223      	strb	r3, [r4, #8]
 8019c44:	9804      	ldr	r0, [sp, #16]
 8019c46:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019c4a:	8025      	strh	r5, [r4, #0]
 8019c4c:	6061      	str	r1, [r4, #4]
 8019c4e:	7263      	strb	r3, [r4, #9]
 8019c50:	60e0      	str	r0, [r4, #12]
 8019c52:	8222      	strh	r2, [r4, #16]
 8019c54:	8265      	strh	r5, [r4, #18]
 8019c56:	82a5      	strh	r5, [r4, #20]
 8019c58:	82e5      	strh	r5, [r4, #22]
 8019c5a:	8325      	strh	r5, [r4, #24]
 8019c5c:	8365      	strh	r5, [r4, #26]
 8019c5e:	83a5      	strh	r5, [r4, #28]
 8019c60:	77a5      	strb	r5, [r4, #30]
 8019c62:	6803      	ldr	r3, [r0, #0]
 8019c64:	695b      	ldr	r3, [r3, #20]
 8019c66:	4798      	blx	r3
 8019c68:	4606      	mov	r6, r0
 8019c6a:	b1f8      	cbz	r0, 8019cac <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019c6c:	68e0      	ldr	r0, [r4, #12]
 8019c6e:	6803      	ldr	r3, [r0, #0]
 8019c70:	4631      	mov	r1, r6
 8019c72:	68db      	ldr	r3, [r3, #12]
 8019c74:	4798      	blx	r3
 8019c76:	7b43      	ldrb	r3, [r0, #13]
 8019c78:	7a82      	ldrb	r2, [r0, #10]
 8019c7a:	005b      	lsls	r3, r3, #1
 8019c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c80:	4313      	orrs	r3, r2
 8019c82:	83a3      	strh	r3, [r4, #28]
 8019c84:	7a63      	ldrb	r3, [r4, #9]
 8019c86:	2b04      	cmp	r3, #4
 8019c88:	4605      	mov	r5, r0
 8019c8a:	d10f      	bne.n	8019cac <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019c8c:	68e0      	ldr	r0, [r4, #12]
 8019c8e:	6803      	ldr	r3, [r0, #0]
 8019c90:	462a      	mov	r2, r5
 8019c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c94:	4631      	mov	r1, r6
 8019c96:	4798      	blx	r3
 8019c98:	7b6b      	ldrb	r3, [r5, #13]
 8019c9a:	005b      	lsls	r3, r3, #1
 8019c9c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019ca0:	7aab      	ldrb	r3, [r5, #10]
 8019ca2:	4313      	orrs	r3, r2
 8019ca4:	4418      	add	r0, r3
 8019ca6:	8ba3      	ldrh	r3, [r4, #28]
 8019ca8:	4418      	add	r0, r3
 8019caa:	83a0      	strh	r0, [r4, #28]
 8019cac:	4620      	mov	r0, r4
 8019cae:	bd70      	pop	{r4, r5, r6, pc}

08019cb0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8019cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cb4:	2400      	movs	r4, #0
 8019cb6:	b085      	sub	sp, #20
 8019cb8:	4681      	mov	r9, r0
 8019cba:	4688      	mov	r8, r1
 8019cbc:	4692      	mov	sl, r2
 8019cbe:	469b      	mov	fp, r3
 8019cc0:	4627      	mov	r7, r4
 8019cc2:	4625      	mov	r5, r4
 8019cc4:	4626      	mov	r6, r4
 8019cc6:	4554      	cmp	r4, sl
 8019cc8:	da2a      	bge.n	8019d20 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019cca:	2300      	movs	r3, #0
 8019ccc:	9303      	str	r3, [sp, #12]
 8019cce:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019cd2:	429d      	cmp	r5, r3
 8019cd4:	d004      	beq.n	8019ce0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8019cd6:	f242 030b 	movw	r3, #8203	; 0x200b
 8019cda:	429d      	cmp	r5, r3
 8019cdc:	bf18      	it	ne
 8019cde:	462f      	movne	r7, r5
 8019ce0:	ab03      	add	r3, sp, #12
 8019ce2:	4642      	mov	r2, r8
 8019ce4:	4659      	mov	r1, fp
 8019ce6:	4648      	mov	r0, r9
 8019ce8:	f002 ffc4 	bl	801cc74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019cec:	4605      	mov	r5, r0
 8019cee:	b1b8      	cbz	r0, 8019d20 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019cf0:	280a      	cmp	r0, #10
 8019cf2:	d015      	beq.n	8019d20 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019cf4:	9a03      	ldr	r2, [sp, #12]
 8019cf6:	b18a      	cbz	r2, 8019d1c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8019cf8:	7b50      	ldrb	r0, [r2, #13]
 8019cfa:	7a93      	ldrb	r3, [r2, #10]
 8019cfc:	8895      	ldrh	r5, [r2, #4]
 8019cfe:	0040      	lsls	r0, r0, #1
 8019d00:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019d04:	4303      	orrs	r3, r0
 8019d06:	9301      	str	r3, [sp, #4]
 8019d08:	f8d8 3000 	ldr.w	r3, [r8]
 8019d0c:	4639      	mov	r1, r7
 8019d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d10:	4640      	mov	r0, r8
 8019d12:	4798      	blx	r3
 8019d14:	9b01      	ldr	r3, [sp, #4]
 8019d16:	4418      	add	r0, r3
 8019d18:	4406      	add	r6, r0
 8019d1a:	b2b6      	uxth	r6, r6
 8019d1c:	3401      	adds	r4, #1
 8019d1e:	e7d2      	b.n	8019cc6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8019d20:	4630      	mov	r0, r6
 8019d22:	b005      	add	sp, #20
 8019d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019d28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8019d28:	2a02      	cmp	r2, #2
 8019d2a:	b530      	push	{r4, r5, lr}
 8019d2c:	d011      	beq.n	8019d52 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8019d2e:	2a03      	cmp	r2, #3
 8019d30:	d01c      	beq.n	8019d6c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8019d32:	2a01      	cmp	r2, #1
 8019d34:	d10c      	bne.n	8019d50 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019d36:	888b      	ldrh	r3, [r1, #4]
 8019d38:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8019d3c:	8801      	ldrh	r1, [r0, #0]
 8019d3e:	8844      	ldrh	r4, [r0, #2]
 8019d40:	8004      	strh	r4, [r0, #0]
 8019d42:	1a9b      	subs	r3, r3, r2
 8019d44:	1a5b      	subs	r3, r3, r1
 8019d46:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019d4a:	8043      	strh	r3, [r0, #2]
 8019d4c:	8081      	strh	r1, [r0, #4]
 8019d4e:	80c2      	strh	r2, [r0, #6]
 8019d50:	bd30      	pop	{r4, r5, pc}
 8019d52:	88cb      	ldrh	r3, [r1, #6]
 8019d54:	88c2      	ldrh	r2, [r0, #6]
 8019d56:	1a9b      	subs	r3, r3, r2
 8019d58:	8842      	ldrh	r2, [r0, #2]
 8019d5a:	1a9b      	subs	r3, r3, r2
 8019d5c:	888a      	ldrh	r2, [r1, #4]
 8019d5e:	8881      	ldrh	r1, [r0, #4]
 8019d60:	8043      	strh	r3, [r0, #2]
 8019d62:	1a52      	subs	r2, r2, r1
 8019d64:	8801      	ldrh	r1, [r0, #0]
 8019d66:	1a52      	subs	r2, r2, r1
 8019d68:	8002      	strh	r2, [r0, #0]
 8019d6a:	e7f1      	b.n	8019d50 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019d6c:	88cb      	ldrh	r3, [r1, #6]
 8019d6e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019d72:	8841      	ldrh	r1, [r0, #2]
 8019d74:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019d78:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019d7c:	8045      	strh	r5, [r0, #2]
 8019d7e:	1a9b      	subs	r3, r3, r2
 8019d80:	1a5b      	subs	r3, r3, r1
 8019d82:	8003      	strh	r3, [r0, #0]
 8019d84:	8082      	strh	r2, [r0, #4]
 8019d86:	80c4      	strh	r4, [r0, #6]
 8019d88:	e7e2      	b.n	8019d50 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08019d8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019d8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d8e:	b09f      	sub	sp, #124	; 0x7c
 8019d90:	9116      	str	r1, [sp, #88]	; 0x58
 8019d92:	9317      	str	r3, [sp, #92]	; 0x5c
 8019d94:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019d96:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019d98:	8809      	ldrh	r1, [r1, #0]
 8019d9a:	889b      	ldrh	r3, [r3, #4]
 8019d9c:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8019da0:	9212      	str	r2, [sp, #72]	; 0x48
 8019da2:	440b      	add	r3, r1
 8019da4:	b21b      	sxth	r3, r3
 8019da6:	9310      	str	r3, [sp, #64]	; 0x40
 8019da8:	f8d8 3000 	ldr.w	r3, [r8]
 8019dac:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8019db0:	7a59      	ldrb	r1, [r3, #9]
 8019db2:	7a1b      	ldrb	r3, [r3, #8]
 8019db4:	9315      	str	r3, [sp, #84]	; 0x54
 8019db6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019db8:	9011      	str	r0, [sp, #68]	; 0x44
 8019dba:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8019dbe:	9114      	str	r1, [sp, #80]	; 0x50
 8019dc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019dc4:	2a00      	cmp	r2, #0
 8019dc6:	d067      	beq.n	8019e98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8019dc8:	f898 3010 	ldrb.w	r3, [r8, #16]
 8019dcc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019dce:	2b04      	cmp	r3, #4
 8019dd0:	bf14      	ite	ne
 8019dd2:	2301      	movne	r3, #1
 8019dd4:	2302      	moveq	r3, #2
 8019dd6:	4413      	add	r3, r2
 8019dd8:	f04f 0900 	mov.w	r9, #0
 8019ddc:	930f      	str	r3, [sp, #60]	; 0x3c
 8019dde:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019de2:	464c      	mov	r4, r9
 8019de4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8019de8:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8019dec:	4293      	cmp	r3, r2
 8019dee:	f280 808c 	bge.w	8019f0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019df2:	2300      	movs	r3, #0
 8019df4:	931c      	str	r3, [sp, #112]	; 0x70
 8019df6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019dfa:	429c      	cmp	r4, r3
 8019dfc:	d006      	beq.n	8019e0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8019dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e00:	f242 020b 	movw	r2, #8203	; 0x200b
 8019e04:	4294      	cmp	r4, r2
 8019e06:	bf18      	it	ne
 8019e08:	4623      	movne	r3, r4
 8019e0a:	930d      	str	r3, [sp, #52]	; 0x34
 8019e0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e0e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8019e10:	f8d8 2000 	ldr.w	r2, [r8]
 8019e14:	428b      	cmp	r3, r1
 8019e16:	db41      	blt.n	8019e9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8019e18:	6813      	ldr	r3, [r2, #0]
 8019e1a:	4610      	mov	r0, r2
 8019e1c:	695b      	ldr	r3, [r3, #20]
 8019e1e:	4798      	blx	r3
 8019e20:	4604      	mov	r4, r0
 8019e22:	f8d8 0000 	ldr.w	r0, [r8]
 8019e26:	6803      	ldr	r3, [r0, #0]
 8019e28:	aa1d      	add	r2, sp, #116	; 0x74
 8019e2a:	689e      	ldr	r6, [r3, #8]
 8019e2c:	4621      	mov	r1, r4
 8019e2e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019e32:	47b0      	blx	r6
 8019e34:	901c      	str	r0, [sp, #112]	; 0x70
 8019e36:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019e3a:	429c      	cmp	r4, r3
 8019e3c:	f000 80e9 	beq.w	801a012 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019e40:	f242 030b 	movw	r3, #8203	; 0x200b
 8019e44:	429c      	cmp	r4, r3
 8019e46:	f000 80e4 	beq.w	801a012 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019e4a:	2c00      	cmp	r4, #0
 8019e4c:	f000 80f6 	beq.w	801a03c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8019e50:	2c0a      	cmp	r4, #10
 8019e52:	d060      	beq.n	8019f16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8019e54:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019e56:	b36a      	cbz	r2, 8019eb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8019e58:	8894      	ldrh	r4, [r2, #4]
 8019e5a:	f1bb 0f00 	cmp.w	fp, #0
 8019e5e:	d03b      	beq.n	8019ed8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8019e60:	f892 900d 	ldrb.w	r9, [r2, #13]
 8019e64:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019e68:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8019e6c:	f892 900a 	ldrb.w	r9, [r2, #10]
 8019e70:	f1bb 0f01 	cmp.w	fp, #1
 8019e74:	ea49 0903 	orr.w	r9, r9, r3
 8019e78:	d134      	bne.n	8019ee4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8019e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e7c:	eba5 0509 	sub.w	r5, r5, r9
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	d14f      	bne.n	8019f24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019e84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019e86:	eb09 0305 	add.w	r3, r9, r5
 8019e8a:	4413      	add	r3, r2
 8019e8c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019e8e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019e92:	4293      	cmp	r3, r2
 8019e94:	da51      	bge.n	8019f3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8019e96:	e038      	b.n	8019f0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019e98:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019e9a:	e79d      	b.n	8019dd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8019e9c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019ea0:	9301      	str	r3, [sp, #4]
 8019ea2:	ab1d      	add	r3, sp, #116	; 0x74
 8019ea4:	9300      	str	r3, [sp, #0]
 8019ea6:	4659      	mov	r1, fp
 8019ea8:	ab1c      	add	r3, sp, #112	; 0x70
 8019eaa:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019eac:	f002 ff3a 	bl	801cd24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019eb0:	4604      	mov	r4, r0
 8019eb2:	e7c0      	b.n	8019e36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8019eb4:	f8d8 0000 	ldr.w	r0, [r8]
 8019eb8:	6803      	ldr	r3, [r0, #0]
 8019eba:	691b      	ldr	r3, [r3, #16]
 8019ebc:	4798      	blx	r3
 8019ebe:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019ec2:	4298      	cmp	r0, r3
 8019ec4:	f000 80a5 	beq.w	801a012 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019ec8:	f242 030b 	movw	r3, #8203	; 0x200b
 8019ecc:	4298      	cmp	r0, r3
 8019ece:	f000 80a0 	beq.w	801a012 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019ed2:	f1bb 0f00 	cmp.w	fp, #0
 8019ed6:	d100      	bne.n	8019eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8019ed8:	444d      	add	r5, r9
 8019eda:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019edc:	2a00      	cmp	r2, #0
 8019ede:	d1bf      	bne.n	8019e60 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8019ee0:	4691      	mov	r9, r2
 8019ee2:	e096      	b.n	801a012 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	f000 80aa 	beq.w	801a040 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 8019eec:	f1bb 0f00 	cmp.w	fp, #0
 8019ef0:	d118      	bne.n	8019f24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019ef2:	f8d8 0000 	ldr.w	r0, [r8]
 8019ef6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019ef8:	6803      	ldr	r3, [r0, #0]
 8019efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019efc:	4798      	blx	r3
 8019efe:	4405      	add	r5, r0
 8019f00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019f02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019f04:	1aeb      	subs	r3, r5, r3
 8019f06:	4293      	cmp	r3, r2
 8019f08:	dd17      	ble.n	8019f3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8019f0a:	2c00      	cmp	r4, #0
 8019f0c:	f000 8096 	beq.w	801a03c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8019f10:	2c0a      	cmp	r4, #10
 8019f12:	f040 8084 	bne.w	801a01e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 8019f16:	240a      	movs	r4, #10
 8019f18:	fab4 f084 	clz	r0, r4
 8019f1c:	0940      	lsrs	r0, r0, #5
 8019f1e:	b01f      	add	sp, #124	; 0x7c
 8019f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f24:	f8d8 0000 	ldr.w	r0, [r8]
 8019f28:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019f2a:	6803      	ldr	r3, [r0, #0]
 8019f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019f2e:	4798      	blx	r3
 8019f30:	f1bb 0f01 	cmp.w	fp, #1
 8019f34:	eba5 0500 	sub.w	r5, r5, r0
 8019f38:	d0a4      	beq.n	8019e84 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8019f3a:	981c      	ldr	r0, [sp, #112]	; 0x70
 8019f3c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019f3e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8019f42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019f46:	7b43      	ldrb	r3, [r0, #13]
 8019f48:	015b      	lsls	r3, r3, #5
 8019f4a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019f4e:	7983      	ldrb	r3, [r0, #6]
 8019f50:	4429      	add	r1, r5
 8019f52:	4313      	orrs	r3, r2
 8019f54:	440b      	add	r3, r1
 8019f56:	42b3      	cmp	r3, r6
 8019f58:	db5b      	blt.n	801a012 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019f5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019f5c:	4299      	cmp	r1, r3
 8019f5e:	da58      	bge.n	801a012 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019f60:	f8d8 0000 	ldr.w	r0, [r8]
 8019f64:	6803      	ldr	r3, [r0, #0]
 8019f66:	42ae      	cmp	r6, r5
 8019f68:	bfc8      	it	gt
 8019f6a:	1b76      	subgt	r6, r6, r5
 8019f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f6e:	bfcc      	ite	gt
 8019f70:	b2b6      	uxthgt	r6, r6
 8019f72:	2600      	movle	r6, #0
 8019f74:	4798      	blx	r3
 8019f76:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019f78:	7b5a      	ldrb	r2, [r3, #13]
 8019f7a:	00d1      	lsls	r1, r2, #3
 8019f7c:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8019f80:	7a19      	ldrb	r1, [r3, #8]
 8019f82:	4339      	orrs	r1, r7
 8019f84:	0657      	lsls	r7, r2, #25
 8019f86:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8019f88:	bf44      	itt	mi
 8019f8a:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8019f8e:	b209      	sxthmi	r1, r1
 8019f90:	19c7      	adds	r7, r0, r7
 8019f92:	1a7f      	subs	r7, r7, r1
 8019f94:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019f96:	b2bf      	uxth	r7, r7
 8019f98:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8019f9c:	fa0f fa87 	sxth.w	sl, r7
 8019fa0:	4551      	cmp	r1, sl
 8019fa2:	dd3a      	ble.n	801a01a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8019fa4:	0112      	lsls	r2, r2, #4
 8019fa6:	79d8      	ldrb	r0, [r3, #7]
 8019fa8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019fac:	4302      	orrs	r2, r0
 8019fae:	4492      	add	sl, r2
 8019fb0:	4551      	cmp	r1, sl
 8019fb2:	dc2e      	bgt.n	801a012 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8019fb4:	1bcf      	subs	r7, r1, r7
 8019fb6:	b2bf      	uxth	r7, r7
 8019fb8:	468a      	mov	sl, r1
 8019fba:	9319      	str	r3, [sp, #100]	; 0x64
 8019fbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019fbe:	f8d8 0000 	ldr.w	r0, [r8]
 8019fc2:	681a      	ldr	r2, [r3, #0]
 8019fc4:	6801      	ldr	r1, [r0, #0]
 8019fc6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8019fc8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019fca:	9313      	str	r3, [sp, #76]	; 0x4c
 8019fcc:	9218      	str	r2, [sp, #96]	; 0x60
 8019fce:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8019fd0:	4788      	blx	r1
 8019fd2:	f898 1006 	ldrb.w	r1, [r8, #6]
 8019fd6:	910b      	str	r1, [sp, #44]	; 0x2c
 8019fd8:	f898 100e 	ldrb.w	r1, [r8, #14]
 8019fdc:	910a      	str	r1, [sp, #40]	; 0x28
 8019fde:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8019fe2:	9109      	str	r1, [sp, #36]	; 0x24
 8019fe4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019fe6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8019fea:	9305      	str	r3, [sp, #20]
 8019fec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019fee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019ff0:	9206      	str	r2, [sp, #24]
 8019ff2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8019ff6:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8019ffa:	e9cd a601 	strd	sl, r6, [sp, #4]
 8019ffe:	442e      	add	r6, r5
 801a000:	b236      	sxth	r6, r6
 801a002:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a004:	9600      	str	r6, [sp, #0]
 801a006:	681a      	ldr	r2, [r3, #0]
 801a008:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a00a:	685b      	ldr	r3, [r3, #4]
 801a00c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a00e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a010:	47b0      	blx	r6
 801a012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a014:	3301      	adds	r3, #1
 801a016:	930e      	str	r3, [sp, #56]	; 0x38
 801a018:	e6e6      	b.n	8019de8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801a01a:	2700      	movs	r7, #0
 801a01c:	e7cd      	b.n	8019fba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 801a01e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801a020:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a022:	3501      	adds	r5, #1
 801a024:	429d      	cmp	r5, r3
 801a026:	f6bf af77 	bge.w	8019f18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a02a:	4659      	mov	r1, fp
 801a02c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a02e:	f7f8 ff7d 	bl	8012f2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a032:	4604      	mov	r4, r0
 801a034:	b110      	cbz	r0, 801a03c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801a036:	280a      	cmp	r0, #10
 801a038:	d1f2      	bne.n	801a020 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801a03a:	e76c      	b.n	8019f16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a03c:	2400      	movs	r4, #0
 801a03e:	e76b      	b.n	8019f18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a040:	f1bb 0f00 	cmp.w	fp, #0
 801a044:	f43f af5c 	beq.w	8019f00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801a048:	e777      	b.n	8019f3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801a04a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801a04a:	b530      	push	{r4, r5, lr}
 801a04c:	8a44      	ldrh	r4, [r0, #18]
 801a04e:	8ac5      	ldrh	r5, [r0, #22]
 801a050:	82c3      	strh	r3, [r0, #22]
 801a052:	442c      	add	r4, r5
 801a054:	1ae4      	subs	r4, r4, r3
 801a056:	8244      	strh	r4, [r0, #18]
 801a058:	8b03      	ldrh	r3, [r0, #24]
 801a05a:	8a84      	ldrh	r4, [r0, #20]
 801a05c:	4422      	add	r2, r4
 801a05e:	440c      	add	r4, r1
 801a060:	1a59      	subs	r1, r3, r1
 801a062:	8342      	strh	r2, [r0, #26]
 801a064:	8284      	strh	r4, [r0, #20]
 801a066:	8301      	strh	r1, [r0, #24]
 801a068:	bd30      	pop	{r4, r5, pc}

0801a06a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801a06a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a06e:	7a43      	ldrb	r3, [r0, #9]
 801a070:	1eda      	subs	r2, r3, #3
 801a072:	b087      	sub	sp, #28
 801a074:	4604      	mov	r4, r0
 801a076:	b2d2      	uxtb	r2, r2
 801a078:	460f      	mov	r7, r1
 801a07a:	2900      	cmp	r1, #0
 801a07c:	d036      	beq.n	801a0ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801a07e:	2a01      	cmp	r2, #1
 801a080:	d932      	bls.n	801a0e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801a082:	1e58      	subs	r0, r3, #1
 801a084:	f1d0 0b00 	rsbs	fp, r0, #0
 801a088:	eb4b 0b00 	adc.w	fp, fp, r0
 801a08c:	1e99      	subs	r1, r3, #2
 801a08e:	424b      	negs	r3, r1
 801a090:	414b      	adcs	r3, r1
 801a092:	9303      	str	r3, [sp, #12]
 801a094:	2300      	movs	r3, #0
 801a096:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801a09a:	2500      	movs	r5, #0
 801a09c:	8265      	strh	r5, [r4, #18]
 801a09e:	82a5      	strh	r5, [r4, #20]
 801a0a0:	46a9      	mov	r9, r5
 801a0a2:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	9305      	str	r3, [sp, #20]
 801a0aa:	8823      	ldrh	r3, [r4, #0]
 801a0ac:	2b20      	cmp	r3, #32
 801a0ae:	d02b      	beq.n	801a108 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801a0b0:	eba3 020a 	sub.w	r2, r3, sl
 801a0b4:	4256      	negs	r6, r2
 801a0b6:	4156      	adcs	r6, r2
 801a0b8:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a0bc:	4293      	cmp	r3, r2
 801a0be:	d004      	beq.n	801a0ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801a0c0:	4553      	cmp	r3, sl
 801a0c2:	bf16      	itet	ne
 801a0c4:	4699      	movne	r9, r3
 801a0c6:	2601      	moveq	r6, #1
 801a0c8:	2600      	movne	r6, #0
 801a0ca:	ab05      	add	r3, sp, #20
 801a0cc:	68e2      	ldr	r2, [r4, #12]
 801a0ce:	7a21      	ldrb	r1, [r4, #8]
 801a0d0:	6860      	ldr	r0, [r4, #4]
 801a0d2:	f002 fdcf 	bl	801cc74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a0d6:	8020      	strh	r0, [r4, #0]
 801a0d8:	b9c8      	cbnz	r0, 801a10e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801a0da:	8b22      	ldrh	r2, [r4, #24]
 801a0dc:	2300      	movs	r3, #0
 801a0de:	4611      	mov	r1, r2
 801a0e0:	4620      	mov	r0, r4
 801a0e2:	f7ff ffb2 	bl	801a04a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a0e6:	e066      	b.n	801a1b6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801a0e8:	468b      	mov	fp, r1
 801a0ea:	e7cf      	b.n	801a08c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801a0ec:	3b01      	subs	r3, #1
 801a0ee:	2a01      	cmp	r2, #1
 801a0f0:	bf8c      	ite	hi
 801a0f2:	2200      	movhi	r2, #0
 801a0f4:	2201      	movls	r2, #1
 801a0f6:	2b01      	cmp	r3, #1
 801a0f8:	bf8c      	ite	hi
 801a0fa:	2300      	movhi	r3, #0
 801a0fc:	2301      	movls	r3, #1
 801a0fe:	9202      	str	r2, [sp, #8]
 801a100:	9301      	str	r3, [sp, #4]
 801a102:	9103      	str	r1, [sp, #12]
 801a104:	468b      	mov	fp, r1
 801a106:	e7c8      	b.n	801a09a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801a108:	4699      	mov	r9, r3
 801a10a:	2601      	movs	r6, #1
 801a10c:	e7dd      	b.n	801a0ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801a10e:	8ae3      	ldrh	r3, [r4, #22]
 801a110:	280a      	cmp	r0, #10
 801a112:	f103 0301 	add.w	r3, r3, #1
 801a116:	82e3      	strh	r3, [r4, #22]
 801a118:	d0df      	beq.n	801a0da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801a11a:	9a05      	ldr	r2, [sp, #20]
 801a11c:	bb42      	cbnz	r2, 801a170 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801a11e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a122:	4298      	cmp	r0, r3
 801a124:	d001      	beq.n	801a12a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801a126:	4550      	cmp	r0, sl
 801a128:	d1bd      	bne.n	801a0a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a12a:	8823      	ldrh	r3, [r4, #0]
 801a12c:	8b21      	ldrh	r1, [r4, #24]
 801a12e:	2b20      	cmp	r3, #32
 801a130:	d001      	beq.n	801a136 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801a132:	4553      	cmp	r3, sl
 801a134:	d131      	bne.n	801a19a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801a136:	2e00      	cmp	r6, #0
 801a138:	bf0a      	itet	eq
 801a13a:	460d      	moveq	r5, r1
 801a13c:	4630      	movne	r0, r6
 801a13e:	2001      	moveq	r0, #1
 801a140:	440a      	add	r2, r1
 801a142:	8aa3      	ldrh	r3, [r4, #20]
 801a144:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801a148:	b292      	uxth	r2, r2
 801a14a:	8322      	strh	r2, [r4, #24]
 801a14c:	4413      	add	r3, r2
 801a14e:	2f00      	cmp	r7, #0
 801a150:	d03a      	beq.n	801a1c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801a152:	f1bb 0f00 	cmp.w	fp, #0
 801a156:	d102      	bne.n	801a15e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801a158:	9903      	ldr	r1, [sp, #12]
 801a15a:	b301      	cbz	r1, 801a19e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801a15c:	b1f8      	cbz	r0, 801a19e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801a15e:	8ba1      	ldrh	r1, [r4, #28]
 801a160:	4419      	add	r1, r3
 801a162:	458c      	cmp	ip, r1
 801a164:	da2a      	bge.n	801a1bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a166:	8a61      	ldrh	r1, [r4, #18]
 801a168:	b341      	cbz	r1, 801a1bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a16a:	4563      	cmp	r3, ip
 801a16c:	dd9b      	ble.n	801a0a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a16e:	e01c      	b.n	801a1aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801a170:	8893      	ldrh	r3, [r2, #4]
 801a172:	8023      	strh	r3, [r4, #0]
 801a174:	f892 800d 	ldrb.w	r8, [r2, #13]
 801a178:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801a17c:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801a180:	f892 800a 	ldrb.w	r8, [r2, #10]
 801a184:	ea48 0800 	orr.w	r8, r8, r0
 801a188:	68e0      	ldr	r0, [r4, #12]
 801a18a:	6803      	ldr	r3, [r0, #0]
 801a18c:	4649      	mov	r1, r9
 801a18e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a190:	4798      	blx	r3
 801a192:	eb08 0200 	add.w	r2, r8, r0
 801a196:	b292      	uxth	r2, r2
 801a198:	e7c7      	b.n	801a12a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801a19a:	2000      	movs	r0, #0
 801a19c:	e7d0      	b.n	801a140 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801a19e:	4563      	cmp	r3, ip
 801a1a0:	dd81      	ble.n	801a0a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a1a2:	8a63      	ldrh	r3, [r4, #18]
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	f43f af7e 	beq.w	801a0a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a1aa:	2301      	movs	r3, #1
 801a1ac:	77a3      	strb	r3, [r4, #30]
 801a1ae:	8ba2      	ldrh	r2, [r4, #28]
 801a1b0:	8b63      	ldrh	r3, [r4, #26]
 801a1b2:	4413      	add	r3, r2
 801a1b4:	8363      	strh	r3, [r4, #26]
 801a1b6:	b007      	add	sp, #28
 801a1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1bc:	2300      	movs	r3, #0
 801a1be:	4611      	mov	r1, r2
 801a1c0:	4620      	mov	r0, r4
 801a1c2:	f7ff ff42 	bl	801a04a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a1c6:	e76e      	b.n	801a0a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a1c8:	4563      	cmp	r3, ip
 801a1ca:	dd14      	ble.n	801a1f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801a1cc:	9b02      	ldr	r3, [sp, #8]
 801a1ce:	b113      	cbz	r3, 801a1d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801a1d0:	2301      	movs	r3, #1
 801a1d2:	460a      	mov	r2, r1
 801a1d4:	e783      	b.n	801a0de <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801a1d6:	9b01      	ldr	r3, [sp, #4]
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	f43f af64 	beq.w	801a0a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a1de:	2800      	cmp	r0, #0
 801a1e0:	f47f af61 	bne.w	801a0a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a1e4:	b116      	cbz	r6, 801a1ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801a1e6:	2301      	movs	r3, #1
 801a1e8:	462a      	mov	r2, r5
 801a1ea:	e779      	b.n	801a0e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801a1ec:	8a63      	ldrh	r3, [r4, #18]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	f43f af59 	beq.w	801a0a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a1f4:	e7df      	b.n	801a1b6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801a1f6:	2800      	cmp	r0, #0
 801a1f8:	f47f af55 	bne.w	801a0a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a1fc:	2e00      	cmp	r6, #0
 801a1fe:	f43f af52 	beq.w	801a0a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a202:	2301      	movs	r3, #1
 801a204:	462a      	mov	r2, r5
 801a206:	e7db      	b.n	801a1c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801a208 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a208:	b530      	push	{r4, r5, lr}
 801a20a:	4605      	mov	r5, r0
 801a20c:	b08b      	sub	sp, #44	; 0x2c
 801a20e:	b191      	cbz	r1, 801a236 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801a210:	e9cd 3100 	strd	r3, r1, [sp]
 801a214:	4613      	mov	r3, r2
 801a216:	4601      	mov	r1, r0
 801a218:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801a21c:	a802      	add	r0, sp, #8
 801a21e:	f7ff fd0d 	bl	8019c3c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a222:	2401      	movs	r4, #1
 801a224:	2100      	movs	r1, #0
 801a226:	a802      	add	r0, sp, #8
 801a228:	f7ff ff1f 	bl	801a06a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a22c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a230:	b163      	cbz	r3, 801a24c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801a232:	3401      	adds	r4, #1
 801a234:	e7f6      	b.n	801a224 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801a236:	f002 fe15 	bl	801ce64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a23a:	2401      	movs	r4, #1
 801a23c:	280a      	cmp	r0, #10
 801a23e:	4628      	mov	r0, r5
 801a240:	bf08      	it	eq
 801a242:	3401      	addeq	r4, #1
 801a244:	f002 fe0e 	bl	801ce64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a248:	2800      	cmp	r0, #0
 801a24a:	d1f7      	bne.n	801a23c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801a24c:	b2a0      	uxth	r0, r4
 801a24e:	b00b      	add	sp, #44	; 0x2c
 801a250:	bd30      	pop	{r4, r5, pc}

0801a252 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a252:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a256:	b0df      	sub	sp, #380	; 0x17c
 801a258:	4689      	mov	r9, r1
 801a25a:	f8dd a1a0 	ldr.w	sl, [sp, #416]	; 0x1a0
 801a25e:	900a      	str	r0, [sp, #40]	; 0x28
 801a260:	461c      	mov	r4, r3
 801a262:	f1ba 0f00 	cmp.w	sl, #0
 801a266:	f000 80b1 	beq.w	801a3cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	f000 80ad 	beq.w	801a3cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801a272:	7ba3      	ldrb	r3, [r4, #14]
 801a274:	2b00      	cmp	r3, #0
 801a276:	f000 80a9 	beq.w	801a3cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801a27a:	6810      	ldr	r0, [r2, #0]
 801a27c:	6851      	ldr	r1, [r2, #4]
 801a27e:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801a282:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801a286:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801a28a:	4643      	mov	r3, r8
 801a28c:	c303      	stmia	r3!, {r0, r1}
 801a28e:	2500      	movs	r5, #0
 801a290:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801a294:	79a2      	ldrb	r2, [r4, #6]
 801a296:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a29a:	a90f      	add	r1, sp, #60	; 0x3c
 801a29c:	4640      	mov	r0, r8
 801a29e:	950f      	str	r5, [sp, #60]	; 0x3c
 801a2a0:	f7ff fd42 	bl	8019d28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a2a4:	a90f      	add	r1, sp, #60	; 0x3c
 801a2a6:	4608      	mov	r0, r1
 801a2a8:	79a2      	ldrb	r2, [r4, #6]
 801a2aa:	af19      	add	r7, sp, #100	; 0x64
 801a2ac:	f7ff fd3c 	bl	8019d28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a2b0:	4638      	mov	r0, r7
 801a2b2:	f002 f997 	bl	801c5e4 <_ZN8touchgfx12TextProviderC1Ev>
 801a2b6:	6820      	ldr	r0, [r4, #0]
 801a2b8:	6803      	ldr	r3, [r0, #0]
 801a2ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a2bc:	4798      	blx	r3
 801a2be:	4606      	mov	r6, r0
 801a2c0:	6820      	ldr	r0, [r4, #0]
 801a2c2:	6803      	ldr	r3, [r0, #0]
 801a2c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a2c6:	4798      	blx	r3
 801a2c8:	4633      	mov	r3, r6
 801a2ca:	9000      	str	r0, [sp, #0]
 801a2cc:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 801a2ce:	4651      	mov	r1, sl
 801a2d0:	4638      	mov	r0, r7
 801a2d2:	f002 f9d4 	bl	801c67e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a2d6:	6820      	ldr	r0, [r4, #0]
 801a2d8:	7923      	ldrb	r3, [r4, #4]
 801a2da:	9308      	str	r3, [sp, #32]
 801a2dc:	6803      	ldr	r3, [r0, #0]
 801a2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a2e0:	4798      	blx	r3
 801a2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a2e6:	181e      	adds	r6, r3, r0
 801a2e8:	42ae      	cmp	r6, r5
 801a2ea:	dd06      	ble.n	801a2fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801a2ec:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801a2f0:	4282      	cmp	r2, r0
 801a2f2:	bfa4      	itt	ge
 801a2f4:	189d      	addge	r5, r3, r2
 801a2f6:	fb95 f5f6 	sdivge	r5, r5, r6
 801a2fa:	a830      	add	r0, sp, #192	; 0xc0
 801a2fc:	f002 f972 	bl	801c5e4 <_ZN8touchgfx12TextProviderC1Ev>
 801a300:	7c23      	ldrb	r3, [r4, #16]
 801a302:	b17b      	cbz	r3, 801a324 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801a304:	6820      	ldr	r0, [r4, #0]
 801a306:	6803      	ldr	r3, [r0, #0]
 801a308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a30a:	4798      	blx	r3
 801a30c:	4683      	mov	fp, r0
 801a30e:	6820      	ldr	r0, [r4, #0]
 801a310:	6803      	ldr	r3, [r0, #0]
 801a312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a314:	4798      	blx	r3
 801a316:	465b      	mov	r3, fp
 801a318:	9000      	str	r0, [sp, #0]
 801a31a:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 801a31c:	4651      	mov	r1, sl
 801a31e:	a830      	add	r0, sp, #192	; 0xc0
 801a320:	f002 f9ad 	bl	801c67e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a324:	7c21      	ldrb	r1, [r4, #16]
 801a326:	9101      	str	r1, [sp, #4]
 801a328:	6821      	ldr	r1, [r4, #0]
 801a32a:	7963      	ldrb	r3, [r4, #5]
 801a32c:	9100      	str	r1, [sp, #0]
 801a32e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801a332:	a930      	add	r1, sp, #192	; 0xc0
 801a334:	a811      	add	r0, sp, #68	; 0x44
 801a336:	f7ff fc81 	bl	8019c3c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a33a:	7c23      	ldrb	r3, [r4, #16]
 801a33c:	b9bb      	cbnz	r3, 801a36e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11c>
 801a33e:	fa1f fa86 	uxth.w	sl, r6
 801a342:	2d00      	cmp	r5, #0
 801a344:	dd45      	ble.n	801a3d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a346:	4638      	mov	r0, r7
 801a348:	f002 fd8c 	bl	801ce64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a34c:	2800      	cmp	r0, #0
 801a34e:	d03d      	beq.n	801a3cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801a350:	280a      	cmp	r0, #10
 801a352:	d1f6      	bne.n	801a342 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 801a354:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a358:	4453      	add	r3, sl
 801a35a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a35e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801a362:	eba3 030a 	sub.w	r3, r3, sl
 801a366:	3d01      	subs	r5, #1
 801a368:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a36c:	e7e9      	b.n	801a342 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 801a36e:	0073      	lsls	r3, r6, #1
 801a370:	9309      	str	r3, [sp, #36]	; 0x24
 801a372:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801a376:	fa1f fa86 	uxth.w	sl, r6
 801a37a:	2d00      	cmp	r5, #0
 801a37c:	dd29      	ble.n	801a3d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a37e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801a382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a384:	428b      	cmp	r3, r1
 801a386:	bfd4      	ite	le
 801a388:	2100      	movle	r1, #0
 801a38a:	2101      	movgt	r1, #1
 801a38c:	a811      	add	r0, sp, #68	; 0x44
 801a38e:	f7ff fe6c 	bl	801a06a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a392:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801a396:	3b01      	subs	r3, #1
 801a398:	b29b      	uxth	r3, r3
 801a39a:	455b      	cmp	r3, fp
 801a39c:	930b      	str	r3, [sp, #44]	; 0x2c
 801a39e:	d005      	beq.n	801a3ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15a>
 801a3a0:	7961      	ldrb	r1, [r4, #5]
 801a3a2:	4638      	mov	r0, r7
 801a3a4:	f7f8 fdc2 	bl	8012f2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a3a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a3aa:	e7f4      	b.n	801a396 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801a3ac:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a3b0:	4453      	add	r3, sl
 801a3b2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a3b6:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801a3ba:	eba3 030a 	sub.w	r3, r3, sl
 801a3be:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a3c2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a3c6:	3d01      	subs	r5, #1
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d1d6      	bne.n	801a37a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x128>
 801a3cc:	b05f      	add	sp, #380	; 0x17c
 801a3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3d2:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801a3d6:	ad47      	add	r5, sp, #284	; 0x11c
 801a3d8:	f04f 0b00 	mov.w	fp, #0
 801a3dc:	7c23      	ldrb	r3, [r4, #16]
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d067      	beq.n	801a4b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801a3e2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801a3e6:	458a      	cmp	sl, r1
 801a3e8:	bfd4      	ite	le
 801a3ea:	2100      	movle	r1, #0
 801a3ec:	2101      	movgt	r1, #1
 801a3ee:	a811      	add	r0, sp, #68	; 0x44
 801a3f0:	f7ff fe3b 	bl	801a06a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a3f4:	9b08      	ldr	r3, [sp, #32]
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d056      	beq.n	801a4a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a3fa:	7c23      	ldrb	r3, [r4, #16]
 801a3fc:	9309      	str	r3, [sp, #36]	; 0x24
 801a3fe:	225c      	movs	r2, #92	; 0x5c
 801a400:	4639      	mov	r1, r7
 801a402:	4628      	mov	r0, r5
 801a404:	f012 fd02 	bl	802ce0c <memcpy>
 801a408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d059      	beq.n	801a4c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801a40e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801a412:	7922      	ldrb	r2, [r4, #4]
 801a414:	2a01      	cmp	r2, #1
 801a416:	d13d      	bne.n	801a494 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801a418:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801a41c:	1ac0      	subs	r0, r0, r3
 801a41e:	2302      	movs	r3, #2
 801a420:	fb90 f0f3 	sdiv	r0, r0, r3
 801a424:	b200      	sxth	r0, r0
 801a426:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801a42a:	4418      	add	r0, r3
 801a42c:	7c23      	ldrb	r3, [r4, #16]
 801a42e:	f8ad 011c 	strh.w	r0, [sp, #284]	; 0x11c
 801a432:	2b00      	cmp	r3, #0
 801a434:	d03a      	beq.n	801a4ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801a436:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801a43a:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801a43e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801a442:	9500      	str	r5, [sp, #0]
 801a444:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a448:	e9cd b703 	strd	fp, r7, [sp, #12]
 801a44c:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801a450:	464a      	mov	r2, r9
 801a452:	2100      	movs	r1, #0
 801a454:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a456:	f7ff fc98 	bl	8019d8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a45a:	2800      	cmp	r0, #0
 801a45c:	d1b6      	bne.n	801a3cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801a45e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a462:	b2b2      	uxth	r2, r6
 801a464:	4611      	mov	r1, r2
 801a466:	4413      	add	r3, r2
 801a468:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801a46c:	1a52      	subs	r2, r2, r1
 801a46e:	7c21      	ldrb	r1, [r4, #16]
 801a470:	b21b      	sxth	r3, r3
 801a472:	b212      	sxth	r2, r2
 801a474:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a478:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801a47c:	b109      	cbz	r1, 801a482 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 801a47e:	42b2      	cmp	r2, r6
 801a480:	dba4      	blt.n	801a3cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801a482:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801a486:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801a48a:	440a      	add	r2, r1
 801a48c:	b212      	sxth	r2, r2
 801a48e:	4293      	cmp	r3, r2
 801a490:	dda4      	ble.n	801a3dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 801a492:	e79b      	b.n	801a3cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801a494:	2a02      	cmp	r2, #2
 801a496:	d105      	bne.n	801a4a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a498:	7be2      	ldrb	r2, [r4, #15]
 801a49a:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801a49e:	1a80      	subs	r0, r0, r2
 801a4a0:	1ac0      	subs	r0, r0, r3
 801a4a2:	e7bf      	b.n	801a424 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d2>
 801a4a4:	2000      	movs	r0, #0
 801a4a6:	e7be      	b.n	801a426 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801a4a8:	7be0      	ldrb	r0, [r4, #15]
 801a4aa:	e7bc      	b.n	801a426 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801a4ac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a4b0:	e7c3      	b.n	801a43a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 801a4b2:	9b08      	ldr	r3, [sp, #32]
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d0f7      	beq.n	801a4a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a4b8:	225c      	movs	r2, #92	; 0x5c
 801a4ba:	4639      	mov	r1, r7
 801a4bc:	4628      	mov	r0, r5
 801a4be:	f012 fca5 	bl	802ce0c <memcpy>
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a4c8:	6821      	ldr	r1, [r4, #0]
 801a4ca:	4628      	mov	r0, r5
 801a4cc:	f7ff fbf0 	bl	8019cb0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a4d0:	b203      	sxth	r3, r0
 801a4d2:	e79e      	b.n	801a412 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>

0801a4d4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a4d4:	b510      	push	{r4, lr}
 801a4d6:	2b02      	cmp	r3, #2
 801a4d8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a4dc:	d00b      	beq.n	801a4f6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801a4de:	2b03      	cmp	r3, #3
 801a4e0:	d00e      	beq.n	801a500 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801a4e2:	2b01      	cmp	r3, #1
 801a4e4:	d001      	beq.n	801a4ea <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801a4e6:	1860      	adds	r0, r4, r1
 801a4e8:	bd10      	pop	{r4, pc}
 801a4ea:	8880      	ldrh	r0, [r0, #4]
 801a4ec:	4420      	add	r0, r4
 801a4ee:	b200      	sxth	r0, r0
 801a4f0:	1a80      	subs	r0, r0, r2
 801a4f2:	3801      	subs	r0, #1
 801a4f4:	e7f8      	b.n	801a4e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801a4f6:	8880      	ldrh	r0, [r0, #4]
 801a4f8:	4420      	add	r0, r4
 801a4fa:	b200      	sxth	r0, r0
 801a4fc:	1a40      	subs	r0, r0, r1
 801a4fe:	e7f8      	b.n	801a4f2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a500:	18a0      	adds	r0, r4, r2
 801a502:	e7f1      	b.n	801a4e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801a504 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a504:	b510      	push	{r4, lr}
 801a506:	2b02      	cmp	r3, #2
 801a508:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801a50c:	d006      	beq.n	801a51c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801a50e:	2b03      	cmp	r3, #3
 801a510:	d00a      	beq.n	801a528 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a512:	2b01      	cmp	r3, #1
 801a514:	bf14      	ite	ne
 801a516:	18a0      	addne	r0, r4, r2
 801a518:	1860      	addeq	r0, r4, r1
 801a51a:	bd10      	pop	{r4, pc}
 801a51c:	88c0      	ldrh	r0, [r0, #6]
 801a51e:	4420      	add	r0, r4
 801a520:	b200      	sxth	r0, r0
 801a522:	1a80      	subs	r0, r0, r2
 801a524:	3801      	subs	r0, #1
 801a526:	e7f8      	b.n	801a51a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801a528:	88c0      	ldrh	r0, [r0, #6]
 801a52a:	4420      	add	r0, r4
 801a52c:	b200      	sxth	r0, r0
 801a52e:	1a40      	subs	r0, r0, r1
 801a530:	e7f8      	b.n	801a524 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801a534 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a534:	4b01      	ldr	r3, [pc, #4]	; (801a53c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a536:	2200      	movs	r2, #0
 801a538:	601a      	str	r2, [r3, #0]
 801a53a:	4770      	bx	lr
 801a53c:	200067d8 	.word	0x200067d8

0801a540 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801a540:	4603      	mov	r3, r0
 801a542:	b1c8      	cbz	r0, 801a578 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801a544:	0c02      	lsrs	r2, r0, #16
 801a546:	0412      	lsls	r2, r2, #16
 801a548:	b9a2      	cbnz	r2, 801a574 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801a54a:	0403      	lsls	r3, r0, #16
 801a54c:	2010      	movs	r0, #16
 801a54e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a552:	bf04      	itt	eq
 801a554:	021b      	lsleq	r3, r3, #8
 801a556:	3008      	addeq	r0, #8
 801a558:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a55c:	bf04      	itt	eq
 801a55e:	011b      	lsleq	r3, r3, #4
 801a560:	3004      	addeq	r0, #4
 801a562:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a566:	bf04      	itt	eq
 801a568:	009b      	lsleq	r3, r3, #2
 801a56a:	3002      	addeq	r0, #2
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	db04      	blt.n	801a57a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801a570:	3001      	adds	r0, #1
 801a572:	4770      	bx	lr
 801a574:	2000      	movs	r0, #0
 801a576:	e7ea      	b.n	801a54e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801a578:	2020      	movs	r0, #32
 801a57a:	4770      	bx	lr

0801a57c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801a57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a580:	b087      	sub	sp, #28
 801a582:	4681      	mov	r9, r0
 801a584:	4698      	mov	r8, r3
 801a586:	4610      	mov	r0, r2
 801a588:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801a58c:	460d      	mov	r5, r1
 801a58e:	b981      	cbnz	r1, 801a5b2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801a590:	b14b      	cbz	r3, 801a5a6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801a592:	460b      	mov	r3, r1
 801a594:	e9cd 4700 	strd	r4, r7, [sp]
 801a598:	464a      	mov	r2, r9
 801a59a:	4641      	mov	r1, r8
 801a59c:	f7ff ffee 	bl	801a57c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a5a0:	b007      	add	sp, #28
 801a5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5a6:	f04f 33ff 	mov.w	r3, #4294967295
 801a5aa:	603b      	str	r3, [r7, #0]
 801a5ac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801a5b0:	e7f6      	b.n	801a5a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a5b2:	fa32 fa01 	lsrs.w	sl, r2, r1
 801a5b6:	d107      	bne.n	801a5c8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801a5b8:	fb09 f602 	mul.w	r6, r9, r2
 801a5bc:	fbb6 f0f4 	udiv	r0, r6, r4
 801a5c0:	fb04 6610 	mls	r6, r4, r0, r6
 801a5c4:	603e      	str	r6, [r7, #0]
 801a5c6:	e7eb      	b.n	801a5a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a5c8:	2601      	movs	r6, #1
 801a5ca:	408e      	lsls	r6, r1
 801a5cc:	3e01      	subs	r6, #1
 801a5ce:	4016      	ands	r6, r2
 801a5d0:	fa09 fb01 	lsl.w	fp, r9, r1
 801a5d4:	4630      	mov	r0, r6
 801a5d6:	fbbb f3f4 	udiv	r3, fp, r4
 801a5da:	9302      	str	r3, [sp, #8]
 801a5dc:	fb0a f303 	mul.w	r3, sl, r3
 801a5e0:	9303      	str	r3, [sp, #12]
 801a5e2:	f7ff ffad 	bl	801a540 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a5e6:	464a      	mov	r2, r9
 801a5e8:	460b      	mov	r3, r1
 801a5ea:	e9cd 4700 	strd	r4, r7, [sp]
 801a5ee:	4601      	mov	r1, r0
 801a5f0:	4630      	mov	r0, r6
 801a5f2:	f7ff ffc3 	bl	801a57c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a5f6:	9b02      	ldr	r3, [sp, #8]
 801a5f8:	fb04 bb13 	mls	fp, r4, r3, fp
 801a5fc:	4606      	mov	r6, r0
 801a5fe:	4658      	mov	r0, fp
 801a600:	eb05 0108 	add.w	r1, r5, r8
 801a604:	f7ff ff9c 	bl	801a540 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a608:	ab05      	add	r3, sp, #20
 801a60a:	e9cd 4300 	strd	r4, r3, [sp]
 801a60e:	465a      	mov	r2, fp
 801a610:	4603      	mov	r3, r0
 801a612:	4650      	mov	r0, sl
 801a614:	f7ff ffb2 	bl	801a57c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a618:	6839      	ldr	r1, [r7, #0]
 801a61a:	9a05      	ldr	r2, [sp, #20]
 801a61c:	9b03      	ldr	r3, [sp, #12]
 801a61e:	4411      	add	r1, r2
 801a620:	fbb1 f2f4 	udiv	r2, r1, r4
 801a624:	18d3      	adds	r3, r2, r3
 801a626:	441e      	add	r6, r3
 801a628:	fb04 1412 	mls	r4, r4, r2, r1
 801a62c:	4430      	add	r0, r6
 801a62e:	603c      	str	r4, [r7, #0]
 801a630:	e7b6      	b.n	801a5a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801a632 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801a632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a636:	b085      	sub	sp, #20
 801a638:	f1b0 0900 	subs.w	r9, r0, #0
 801a63c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a63e:	461d      	mov	r5, r3
 801a640:	bfbf      	itttt	lt
 801a642:	6823      	ldrlt	r3, [r4, #0]
 801a644:	425b      	neglt	r3, r3
 801a646:	f1c9 0900 	rsblt	r9, r9, #0
 801a64a:	6023      	strlt	r3, [r4, #0]
 801a64c:	bfb4      	ite	lt
 801a64e:	f04f 36ff 	movlt.w	r6, #4294967295
 801a652:	2601      	movge	r6, #1
 801a654:	2a00      	cmp	r2, #0
 801a656:	4617      	mov	r7, r2
 801a658:	da04      	bge.n	801a664 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801a65a:	6823      	ldr	r3, [r4, #0]
 801a65c:	425b      	negs	r3, r3
 801a65e:	4257      	negs	r7, r2
 801a660:	4276      	negs	r6, r6
 801a662:	6023      	str	r3, [r4, #0]
 801a664:	2d00      	cmp	r5, #0
 801a666:	4638      	mov	r0, r7
 801a668:	bfba      	itte	lt
 801a66a:	426d      	neglt	r5, r5
 801a66c:	f04f 38ff 	movlt.w	r8, #4294967295
 801a670:	f04f 0801 	movge.w	r8, #1
 801a674:	f7ff ff64 	bl	801a540 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a678:	ab03      	add	r3, sp, #12
 801a67a:	e9cd 5300 	strd	r5, r3, [sp]
 801a67e:	463a      	mov	r2, r7
 801a680:	4603      	mov	r3, r0
 801a682:	4648      	mov	r0, r9
 801a684:	f7ff ff7a 	bl	801a57c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a688:	6823      	ldr	r3, [r4, #0]
 801a68a:	9a03      	ldr	r2, [sp, #12]
 801a68c:	4546      	cmp	r6, r8
 801a68e:	441a      	add	r2, r3
 801a690:	fb92 f3f5 	sdiv	r3, r2, r5
 801a694:	4418      	add	r0, r3
 801a696:	bf18      	it	ne
 801a698:	4240      	negne	r0, r0
 801a69a:	fb05 2313 	mls	r3, r5, r3, r2
 801a69e:	1c72      	adds	r2, r6, #1
 801a6a0:	6023      	str	r3, [r4, #0]
 801a6a2:	d105      	bne.n	801a6b0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	f1c3 0200 	rsb	r2, r3, #0
 801a6aa:	db0b      	blt.n	801a6c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801a6ac:	6022      	str	r2, [r4, #0]
 801a6ae:	e006      	b.n	801a6be <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a6b0:	2e01      	cmp	r6, #1
 801a6b2:	d104      	bne.n	801a6be <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	da02      	bge.n	801a6be <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a6b8:	442b      	add	r3, r5
 801a6ba:	3801      	subs	r0, #1
 801a6bc:	6023      	str	r3, [r4, #0]
 801a6be:	b005      	add	sp, #20
 801a6c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a6c4:	3801      	subs	r0, #1
 801a6c6:	1b52      	subs	r2, r2, r5
 801a6c8:	e7f0      	b.n	801a6ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801a6cc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a6cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a6d0:	4c1c      	ldr	r4, [pc, #112]	; (801a744 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801a6d2:	6807      	ldr	r7, [r0, #0]
 801a6d4:	69a3      	ldr	r3, [r4, #24]
 801a6d6:	4605      	mov	r5, r0
 801a6d8:	b92b      	cbnz	r3, 801a6e6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801a6da:	6840      	ldr	r0, [r0, #4]
 801a6dc:	e9c5 7000 	strd	r7, r0, [r5]
 801a6e0:	b004      	add	sp, #16
 801a6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6e6:	68a2      	ldr	r2, [r4, #8]
 801a6e8:	6820      	ldr	r0, [r4, #0]
 801a6ea:	ae04      	add	r6, sp, #16
 801a6ec:	f04f 0802 	mov.w	r8, #2
 801a6f0:	fb93 f1f8 	sdiv	r1, r3, r8
 801a6f4:	440a      	add	r2, r1
 801a6f6:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a6fa:	69e1      	ldr	r1, [r4, #28]
 801a6fc:	9600      	str	r6, [sp, #0]
 801a6fe:	463a      	mov	r2, r7
 801a700:	f7ff ff97 	bl	801a632 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a704:	69a3      	ldr	r3, [r4, #24]
 801a706:	686a      	ldr	r2, [r5, #4]
 801a708:	6a21      	ldr	r1, [r4, #32]
 801a70a:	9600      	str	r6, [sp, #0]
 801a70c:	4607      	mov	r7, r0
 801a70e:	6860      	ldr	r0, [r4, #4]
 801a710:	f7ff ff8f 	bl	801a632 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a714:	6962      	ldr	r2, [r4, #20]
 801a716:	69a3      	ldr	r3, [r4, #24]
 801a718:	fb93 f8f8 	sdiv	r8, r3, r8
 801a71c:	4442      	add	r2, r8
 801a71e:	9203      	str	r2, [sp, #12]
 801a720:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a722:	682a      	ldr	r2, [r5, #0]
 801a724:	9600      	str	r6, [sp, #0]
 801a726:	4407      	add	r7, r0
 801a728:	68e0      	ldr	r0, [r4, #12]
 801a72a:	f7ff ff82 	bl	801a632 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a72e:	9600      	str	r6, [sp, #0]
 801a730:	4680      	mov	r8, r0
 801a732:	69a3      	ldr	r3, [r4, #24]
 801a734:	686a      	ldr	r2, [r5, #4]
 801a736:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a738:	6920      	ldr	r0, [r4, #16]
 801a73a:	f7ff ff7a 	bl	801a632 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a73e:	4440      	add	r0, r8
 801a740:	e7cc      	b.n	801a6dc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801a742:	bf00      	nop
 801a744:	200067dc 	.word	0x200067dc

0801a748 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801a748:	b510      	push	{r4, lr}
 801a74a:	4b07      	ldr	r3, [pc, #28]	; (801a768 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801a74c:	781b      	ldrb	r3, [r3, #0]
 801a74e:	2b01      	cmp	r3, #1
 801a750:	d108      	bne.n	801a764 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801a752:	4b06      	ldr	r3, [pc, #24]	; (801a76c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801a754:	880c      	ldrh	r4, [r1, #0]
 801a756:	881b      	ldrh	r3, [r3, #0]
 801a758:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a75c:	3b01      	subs	r3, #1
 801a75e:	1b1b      	subs	r3, r3, r4
 801a760:	8003      	strh	r3, [r0, #0]
 801a762:	800a      	strh	r2, [r1, #0]
 801a764:	bd10      	pop	{r4, pc}
 801a766:	bf00      	nop
 801a768:	200067c8 	.word	0x200067c8
 801a76c:	200067cc 	.word	0x200067cc

0801a770 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801a770:	b510      	push	{r4, lr}
 801a772:	4b0a      	ldr	r3, [pc, #40]	; (801a79c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801a774:	781b      	ldrb	r3, [r3, #0]
 801a776:	2b01      	cmp	r3, #1
 801a778:	d10e      	bne.n	801a798 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801a77a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a77e:	8843      	ldrh	r3, [r0, #2]
 801a780:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a784:	8044      	strh	r4, [r0, #2]
 801a786:	18ca      	adds	r2, r1, r3
 801a788:	4b05      	ldr	r3, [pc, #20]	; (801a7a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801a78a:	881b      	ldrh	r3, [r3, #0]
 801a78c:	1a9b      	subs	r3, r3, r2
 801a78e:	8003      	strh	r3, [r0, #0]
 801a790:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a794:	80c3      	strh	r3, [r0, #6]
 801a796:	8081      	strh	r1, [r0, #4]
 801a798:	bd10      	pop	{r4, pc}
 801a79a:	bf00      	nop
 801a79c:	200067c8 	.word	0x200067c8
 801a7a0:	200067c4 	.word	0x200067c4

0801a7a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801a7a4:	b510      	push	{r4, lr}
 801a7a6:	4b07      	ldr	r3, [pc, #28]	; (801a7c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801a7a8:	781b      	ldrb	r3, [r3, #0]
 801a7aa:	2b01      	cmp	r3, #1
 801a7ac:	d108      	bne.n	801a7c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801a7ae:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a7b2:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a7b6:	8003      	strh	r3, [r0, #0]
 801a7b8:	8893      	ldrh	r3, [r2, #4]
 801a7ba:	3b01      	subs	r3, #1
 801a7bc:	1b1b      	subs	r3, r3, r4
 801a7be:	800b      	strh	r3, [r1, #0]
 801a7c0:	bd10      	pop	{r4, pc}
 801a7c2:	bf00      	nop
 801a7c4:	200067c8 	.word	0x200067c8

0801a7c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801a7c8:	b513      	push	{r0, r1, r4, lr}
 801a7ca:	4b08      	ldr	r3, [pc, #32]	; (801a7ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801a7cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a7d0:	4b07      	ldr	r3, [pc, #28]	; (801a7f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801a7d2:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a7d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a7da:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a7de:	2400      	movs	r4, #0
 801a7e0:	466a      	mov	r2, sp
 801a7e2:	9400      	str	r4, [sp, #0]
 801a7e4:	f7ff ffde 	bl	801a7a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a7e8:	b002      	add	sp, #8
 801a7ea:	bd10      	pop	{r4, pc}
 801a7ec:	200067c4 	.word	0x200067c4
 801a7f0:	200067c6 	.word	0x200067c6

0801a7f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801a7f4:	4b0b      	ldr	r3, [pc, #44]	; (801a824 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801a7f6:	781b      	ldrb	r3, [r3, #0]
 801a7f8:	2b01      	cmp	r3, #1
 801a7fa:	d111      	bne.n	801a820 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801a7fc:	680b      	ldr	r3, [r1, #0]
 801a7fe:	ed90 7a00 	vldr	s14, [r0]
 801a802:	6003      	str	r3, [r0, #0]
 801a804:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801a808:	eddf 6a07 	vldr	s13, [pc, #28]	; 801a828 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801a80c:	ee07 3a90 	vmov	s15, r3
 801a810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a814:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a818:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a81c:	edc1 7a00 	vstr	s15, [r1]
 801a820:	4770      	bx	lr
 801a822:	bf00      	nop
 801a824:	200067c8 	.word	0x200067c8
 801a828:	38d1b717 	.word	0x38d1b717

0801a82c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801a82c:	b510      	push	{r4, lr}
 801a82e:	4b0a      	ldr	r3, [pc, #40]	; (801a858 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801a830:	781b      	ldrb	r3, [r3, #0]
 801a832:	2b01      	cmp	r3, #1
 801a834:	460a      	mov	r2, r1
 801a836:	d10d      	bne.n	801a854 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801a838:	8881      	ldrh	r1, [r0, #4]
 801a83a:	8803      	ldrh	r3, [r0, #0]
 801a83c:	440b      	add	r3, r1
 801a83e:	4601      	mov	r1, r0
 801a840:	3b01      	subs	r3, #1
 801a842:	f821 3b02 	strh.w	r3, [r1], #2
 801a846:	f7ff ffad 	bl	801a7a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a84a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a84e:	88c2      	ldrh	r2, [r0, #6]
 801a850:	8082      	strh	r2, [r0, #4]
 801a852:	80c3      	strh	r3, [r0, #6]
 801a854:	bd10      	pop	{r4, pc}
 801a856:	bf00      	nop
 801a858:	200067c8 	.word	0x200067c8

0801a85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801a85c:	b507      	push	{r0, r1, r2, lr}
 801a85e:	4b09      	ldr	r3, [pc, #36]	; (801a884 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801a860:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a864:	4b08      	ldr	r3, [pc, #32]	; (801a888 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801a866:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a86a:	2100      	movs	r1, #0
 801a86c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a870:	9100      	str	r1, [sp, #0]
 801a872:	4669      	mov	r1, sp
 801a874:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a878:	f7ff ffd8 	bl	801a82c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a87c:	b003      	add	sp, #12
 801a87e:	f85d fb04 	ldr.w	pc, [sp], #4
 801a882:	bf00      	nop
 801a884:	200067c4 	.word	0x200067c4
 801a888:	200067c6 	.word	0x200067c6

0801a88c <_ZN8touchgfx11Application13requestRedrawEv>:
 801a88c:	4b06      	ldr	r3, [pc, #24]	; (801a8a8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801a88e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a892:	4b06      	ldr	r3, [pc, #24]	; (801a8ac <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801a894:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801a898:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a89c:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801a8a0:	2100      	movs	r1, #0
 801a8a2:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801a8a6:	4770      	bx	lr
 801a8a8:	200067c4 	.word	0x200067c4
 801a8ac:	200067c6 	.word	0x200067c6

0801a8b0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801a8b0:	4b03      	ldr	r3, [pc, #12]	; (801a8c0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801a8b2:	6818      	ldr	r0, [r3, #0]
 801a8b4:	b110      	cbz	r0, 801a8bc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801a8b6:	6803      	ldr	r3, [r0, #0]
 801a8b8:	699b      	ldr	r3, [r3, #24]
 801a8ba:	4718      	bx	r3
 801a8bc:	4770      	bx	lr
 801a8be:	bf00      	nop
 801a8c0:	2000680c 	.word	0x2000680c

0801a8c4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801a8c4:	4770      	bx	lr
	...

0801a8c8 <_ZN8touchgfx11Application4drawEv>:
 801a8c8:	b507      	push	{r0, r1, r2, lr}
 801a8ca:	4b09      	ldr	r3, [pc, #36]	; (801a8f0 <_ZN8touchgfx11Application4drawEv+0x28>)
 801a8cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a8d0:	4b08      	ldr	r3, [pc, #32]	; (801a8f4 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801a8d2:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a8d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a8da:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a8de:	6803      	ldr	r3, [r0, #0]
 801a8e0:	2100      	movs	r1, #0
 801a8e2:	9100      	str	r1, [sp, #0]
 801a8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a8e6:	4669      	mov	r1, sp
 801a8e8:	4798      	blx	r3
 801a8ea:	b003      	add	sp, #12
 801a8ec:	f85d fb04 	ldr.w	pc, [sp], #4
 801a8f0:	200067c4 	.word	0x200067c4
 801a8f4:	200067c6 	.word	0x200067c6

0801a8f8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801a8f8:	4b03      	ldr	r3, [pc, #12]	; (801a908 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801a8fa:	6818      	ldr	r0, [r3, #0]
 801a8fc:	b110      	cbz	r0, 801a904 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801a8fe:	6803      	ldr	r3, [r0, #0]
 801a900:	69db      	ldr	r3, [r3, #28]
 801a902:	4718      	bx	r3
 801a904:	4770      	bx	lr
 801a906:	bf00      	nop
 801a908:	2000680c 	.word	0x2000680c

0801a90c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801a90c:	4b03      	ldr	r3, [pc, #12]	; (801a91c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801a90e:	6818      	ldr	r0, [r3, #0]
 801a910:	b110      	cbz	r0, 801a918 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801a912:	6803      	ldr	r3, [r0, #0]
 801a914:	6a1b      	ldr	r3, [r3, #32]
 801a916:	4718      	bx	r3
 801a918:	4770      	bx	lr
 801a91a:	bf00      	nop
 801a91c:	2000680c 	.word	0x2000680c

0801a920 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801a920:	4b03      	ldr	r3, [pc, #12]	; (801a930 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801a922:	6818      	ldr	r0, [r3, #0]
 801a924:	b110      	cbz	r0, 801a92c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801a926:	6803      	ldr	r3, [r0, #0]
 801a928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a92a:	4718      	bx	r3
 801a92c:	4770      	bx	lr
 801a92e:	bf00      	nop
 801a930:	2000680c 	.word	0x2000680c

0801a934 <_ZN8touchgfx11Application15handleTickEventEv>:
 801a934:	b570      	push	{r4, r5, r6, lr}
 801a936:	4d34      	ldr	r5, [pc, #208]	; (801aa08 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 801a938:	4604      	mov	r4, r0
 801a93a:	6828      	ldr	r0, [r5, #0]
 801a93c:	b140      	cbz	r0, 801a950 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a93e:	7a03      	ldrb	r3, [r0, #8]
 801a940:	b933      	cbnz	r3, 801a950 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a942:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801a946:	6803      	ldr	r3, [r0, #0]
 801a948:	689b      	ldr	r3, [r3, #8]
 801a94a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a94e:	4718      	bx	r3
 801a950:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801a954:	b97b      	cbnz	r3, 801a976 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a956:	b170      	cbz	r0, 801a976 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a958:	7a03      	ldrb	r3, [r0, #8]
 801a95a:	b163      	cbz	r3, 801a976 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a95c:	4b2b      	ldr	r3, [pc, #172]	; (801aa0c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801a95e:	6818      	ldr	r0, [r3, #0]
 801a960:	b110      	cbz	r0, 801a968 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801a962:	6803      	ldr	r3, [r0, #0]
 801a964:	691b      	ldr	r3, [r3, #16]
 801a966:	4798      	blx	r3
 801a968:	6828      	ldr	r0, [r5, #0]
 801a96a:	6803      	ldr	r3, [r0, #0]
 801a96c:	68db      	ldr	r3, [r3, #12]
 801a96e:	4798      	blx	r3
 801a970:	2301      	movs	r3, #1
 801a972:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801a976:	2500      	movs	r5, #0
 801a978:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801a97c:	42a8      	cmp	r0, r5
 801a97e:	dd0c      	ble.n	801a99a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801a980:	1963      	adds	r3, r4, r5
 801a982:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801a986:	b132      	cbz	r2, 801a996 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801a988:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801a98c:	4413      	add	r3, r2
 801a98e:	6858      	ldr	r0, [r3, #4]
 801a990:	6803      	ldr	r3, [r0, #0]
 801a992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a994:	4798      	blx	r3
 801a996:	3501      	adds	r5, #1
 801a998:	e7ee      	b.n	801a978 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801a99a:	2300      	movs	r3, #0
 801a99c:	461a      	mov	r2, r3
 801a99e:	4298      	cmp	r0, r3
 801a9a0:	d114      	bne.n	801a9cc <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801a9a2:	1d25      	adds	r5, r4, #4
 801a9a4:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801a9a8:	1e48      	subs	r0, r1, #1
 801a9aa:	b280      	uxth	r0, r0
 801a9ac:	4291      	cmp	r1, r2
 801a9ae:	dd24      	ble.n	801a9fa <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801a9b0:	4288      	cmp	r0, r1
 801a9b2:	d2fb      	bcs.n	801a9ac <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 801a9b4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801a9b8:	3304      	adds	r3, #4
 801a9ba:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801a9be:	428b      	cmp	r3, r1
 801a9c0:	d018      	beq.n	801a9f4 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801a9c2:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801a9c6:	f843 6c04 	str.w	r6, [r3, #-4]
 801a9ca:	e7f8      	b.n	801a9be <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 801a9cc:	18e1      	adds	r1, r4, r3
 801a9ce:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801a9d2:	b16d      	cbz	r5, 801a9f0 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 801a9d4:	429a      	cmp	r2, r3
 801a9d6:	d00a      	beq.n	801a9ee <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 801a9d8:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801a9dc:	4431      	add	r1, r6
 801a9de:	684e      	ldr	r6, [r1, #4]
 801a9e0:	b291      	uxth	r1, r2
 801a9e2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801a9e6:	604e      	str	r6, [r1, #4]
 801a9e8:	18a1      	adds	r1, r4, r2
 801a9ea:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801a9ee:	3201      	adds	r2, #1
 801a9f0:	3301      	adds	r3, #1
 801a9f2:	e7d4      	b.n	801a99e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801a9f4:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801a9f8:	e7d4      	b.n	801a9a4 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801a9fa:	4b04      	ldr	r3, [pc, #16]	; (801aa0c <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801a9fc:	6818      	ldr	r0, [r3, #0]
 801a9fe:	b110      	cbz	r0, 801aa06 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801aa00:	6803      	ldr	r3, [r0, #0]
 801aa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa04:	e7a1      	b.n	801a94a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801aa06:	bd70      	pop	{r4, r5, r6, pc}
 801aa08:	20006810 	.word	0x20006810
 801aa0c:	2000680c 	.word	0x2000680c

0801aa10 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801aa10:	b570      	push	{r4, r5, r6, lr}
 801aa12:	4606      	mov	r6, r0
 801aa14:	460c      	mov	r4, r1
 801aa16:	b929      	cbnz	r1, 801aa24 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801aa18:	4b0c      	ldr	r3, [pc, #48]	; (801aa4c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801aa1a:	4a0d      	ldr	r2, [pc, #52]	; (801aa50 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801aa1c:	480d      	ldr	r0, [pc, #52]	; (801aa54 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801aa1e:	2167      	movs	r1, #103	; 0x67
 801aa20:	f011 fe62 	bl	802c6e8 <__assert_func>
 801aa24:	4d0c      	ldr	r5, [pc, #48]	; (801aa58 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801aa26:	2300      	movs	r3, #0
 801aa28:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801aa2c:	6828      	ldr	r0, [r5, #0]
 801aa2e:	b110      	cbz	r0, 801aa36 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801aa30:	6803      	ldr	r3, [r0, #0]
 801aa32:	695b      	ldr	r3, [r3, #20]
 801aa34:	4798      	blx	r3
 801aa36:	602c      	str	r4, [r5, #0]
 801aa38:	6823      	ldr	r3, [r4, #0]
 801aa3a:	4620      	mov	r0, r4
 801aa3c:	68db      	ldr	r3, [r3, #12]
 801aa3e:	4798      	blx	r3
 801aa40:	6833      	ldr	r3, [r6, #0]
 801aa42:	4630      	mov	r0, r6
 801aa44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa4a:	4718      	bx	r3
 801aa4c:	08030dc4 	.word	0x08030dc4
 801aa50:	08030ebc 	.word	0x08030ebc
 801aa54:	08030dce 	.word	0x08030dce
 801aa58:	2000680c 	.word	0x2000680c

0801aa5c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801aa5c:	b570      	push	{r4, r5, r6, lr}
 801aa5e:	f9b1 4000 	ldrsh.w	r4, [r1]
 801aa62:	f9b0 5000 	ldrsh.w	r5, [r0]
 801aa66:	42ac      	cmp	r4, r5
 801aa68:	db18      	blt.n	801aa9c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801aa6a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801aa6e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801aa72:	429a      	cmp	r2, r3
 801aa74:	db12      	blt.n	801aa9c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801aa76:	8886      	ldrh	r6, [r0, #4]
 801aa78:	4435      	add	r5, r6
 801aa7a:	888e      	ldrh	r6, [r1, #4]
 801aa7c:	4434      	add	r4, r6
 801aa7e:	b22d      	sxth	r5, r5
 801aa80:	b224      	sxth	r4, r4
 801aa82:	42a5      	cmp	r5, r4
 801aa84:	db0a      	blt.n	801aa9c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801aa86:	88c0      	ldrh	r0, [r0, #6]
 801aa88:	4418      	add	r0, r3
 801aa8a:	88cb      	ldrh	r3, [r1, #6]
 801aa8c:	441a      	add	r2, r3
 801aa8e:	b200      	sxth	r0, r0
 801aa90:	b212      	sxth	r2, r2
 801aa92:	4290      	cmp	r0, r2
 801aa94:	bfb4      	ite	lt
 801aa96:	2000      	movlt	r0, #0
 801aa98:	2001      	movge	r0, #1
 801aa9a:	bd70      	pop	{r4, r5, r6, pc}
 801aa9c:	2000      	movs	r0, #0
 801aa9e:	e7fc      	b.n	801aa9a <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801aaa0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801aaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aaa2:	4604      	mov	r4, r0
 801aaa4:	4608      	mov	r0, r1
 801aaa6:	460d      	mov	r5, r1
 801aaa8:	f7fb fae5 	bl	8016076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801aaac:	b978      	cbnz	r0, 801aace <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801aaae:	4620      	mov	r0, r4
 801aab0:	f7fb fae1 	bl	8016076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801aab4:	f9b5 6000 	ldrsh.w	r6, [r5]
 801aab8:	b150      	cbz	r0, 801aad0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801aaba:	8026      	strh	r6, [r4, #0]
 801aabc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801aac0:	8063      	strh	r3, [r4, #2]
 801aac2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801aac6:	80a3      	strh	r3, [r4, #4]
 801aac8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801aacc:	80e3      	strh	r3, [r4, #6]
 801aace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aad0:	f9b4 1000 	ldrsh.w	r1, [r4]
 801aad4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801aad8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801aadc:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801aae0:	88ed      	ldrh	r5, [r5, #6]
 801aae2:	42b1      	cmp	r1, r6
 801aae4:	460f      	mov	r7, r1
 801aae6:	bfa8      	it	ge
 801aae8:	4637      	movge	r7, r6
 801aaea:	4293      	cmp	r3, r2
 801aaec:	4618      	mov	r0, r3
 801aaee:	4466      	add	r6, ip
 801aaf0:	bfa8      	it	ge
 801aaf2:	4610      	movge	r0, r2
 801aaf4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801aaf8:	8027      	strh	r7, [r4, #0]
 801aafa:	442a      	add	r2, r5
 801aafc:	88e5      	ldrh	r5, [r4, #6]
 801aafe:	8060      	strh	r0, [r4, #2]
 801ab00:	4461      	add	r1, ip
 801ab02:	442b      	add	r3, r5
 801ab04:	b236      	sxth	r6, r6
 801ab06:	b209      	sxth	r1, r1
 801ab08:	b212      	sxth	r2, r2
 801ab0a:	b21b      	sxth	r3, r3
 801ab0c:	428e      	cmp	r6, r1
 801ab0e:	bfac      	ite	ge
 801ab10:	ebc7 0106 	rsbge	r1, r7, r6
 801ab14:	ebc7 0101 	rsblt	r1, r7, r1
 801ab18:	429a      	cmp	r2, r3
 801ab1a:	bfac      	ite	ge
 801ab1c:	ebc0 0202 	rsbge	r2, r0, r2
 801ab20:	ebc0 0203 	rsblt	r2, r0, r3
 801ab24:	80a1      	strh	r1, [r4, #4]
 801ab26:	80e2      	strh	r2, [r4, #6]
 801ab28:	e7d1      	b.n	801aace <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801ab2c <_ZN8touchgfx11Application11getInstanceEv>:
 801ab2c:	4b01      	ldr	r3, [pc, #4]	; (801ab34 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801ab2e:	6818      	ldr	r0, [r3, #0]
 801ab30:	4770      	bx	lr
 801ab32:	bf00      	nop
 801ab34:	2000681c 	.word	0x2000681c

0801ab38 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801ab38:	b570      	push	{r4, r5, r6, lr}
 801ab3a:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801ab3e:	1d04      	adds	r4, r0, #4
 801ab40:	2200      	movs	r2, #0
 801ab42:	b295      	uxth	r5, r2
 801ab44:	42ab      	cmp	r3, r5
 801ab46:	d90f      	bls.n	801ab68 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x30>
 801ab48:	f854 6b04 	ldr.w	r6, [r4], #4
 801ab4c:	428e      	cmp	r6, r1
 801ab4e:	4615      	mov	r5, r2
 801ab50:	f102 0201 	add.w	r2, r2, #1
 801ab54:	d1f5      	bne.n	801ab42 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801ab56:	4428      	add	r0, r5
 801ab58:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801ab5c:	2bff      	cmp	r3, #255	; 0xff
 801ab5e:	d002      	beq.n	801ab66 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801ab60:	3301      	adds	r3, #1
 801ab62:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801ab66:	bd70      	pop	{r4, r5, r6, pc}
 801ab68:	2b20      	cmp	r3, #32
 801ab6a:	d106      	bne.n	801ab7a <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x42>
 801ab6c:	4b08      	ldr	r3, [pc, #32]	; (801ab90 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801ab6e:	4a09      	ldr	r2, [pc, #36]	; (801ab94 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801ab70:	4809      	ldr	r0, [pc, #36]	; (801ab98 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801ab72:	f240 215f 	movw	r1, #607	; 0x25f
 801ab76:	f011 fdb7 	bl	802c6e8 <__assert_func>
 801ab7a:	18c2      	adds	r2, r0, r3
 801ab7c:	2401      	movs	r4, #1
 801ab7e:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801ab82:	191a      	adds	r2, r3, r4
 801ab84:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801ab88:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801ab8c:	6041      	str	r1, [r0, #4]
 801ab8e:	e7ea      	b.n	801ab66 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801ab90:	08030df8 	.word	0x08030df8
 801ab94:	08030f00 	.word	0x08030f00
 801ab98:	08030dce 	.word	0x08030dce

0801ab9c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801ab9c:	b570      	push	{r4, r5, r6, lr}
 801ab9e:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801aba2:	1d04      	adds	r4, r0, #4
 801aba4:	2300      	movs	r3, #0
 801aba6:	b29a      	uxth	r2, r3
 801aba8:	4296      	cmp	r6, r2
 801abaa:	d90a      	bls.n	801abc2 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801abac:	f854 2b04 	ldr.w	r2, [r4], #4
 801abb0:	428a      	cmp	r2, r1
 801abb2:	d107      	bne.n	801abc4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801abb4:	18c5      	adds	r5, r0, r3
 801abb6:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801abba:	b11a      	cbz	r2, 801abc4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801abbc:	3a01      	subs	r2, #1
 801abbe:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801abc2:	bd70      	pop	{r4, r5, r6, pc}
 801abc4:	3301      	adds	r3, #1
 801abc6:	e7ee      	b.n	801aba6 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801abc8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801abc8:	2300      	movs	r3, #0
 801abca:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801abce:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801abd2:	30a8      	adds	r0, #168	; 0xa8
 801abd4:	f802 3b01 	strb.w	r3, [r2], #1
 801abd8:	4282      	cmp	r2, r0
 801abda:	d1fb      	bne.n	801abd4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801abdc:	4770      	bx	lr

0801abde <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801abde:	4603      	mov	r3, r0
 801abe0:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801abe4:	2200      	movs	r2, #0
 801abe6:	801a      	strh	r2, [r3, #0]
 801abe8:	805a      	strh	r2, [r3, #2]
 801abea:	809a      	strh	r2, [r3, #4]
 801abec:	80da      	strh	r2, [r3, #6]
 801abee:	3308      	adds	r3, #8
 801abf0:	428b      	cmp	r3, r1
 801abf2:	d1f8      	bne.n	801abe6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801abf4:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801abf8:	4770      	bx	lr
	...

0801abfc <_ZN8touchgfx11ApplicationC1Ev>:
 801abfc:	b570      	push	{r4, r5, r6, lr}
 801abfe:	4b1a      	ldr	r3, [pc, #104]	; (801ac68 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801ac00:	6003      	str	r3, [r0, #0]
 801ac02:	2500      	movs	r5, #0
 801ac04:	4604      	mov	r4, r0
 801ac06:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 801ac0a:	30a8      	adds	r0, #168	; 0xa8
 801ac0c:	f7ff ffe7 	bl	801abde <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ac10:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801ac14:	f7ff ffe3 	bl	801abde <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ac18:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801ac1c:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801ac20:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801ac24:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801ac28:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801ac2c:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801ac30:	490e      	ldr	r1, [pc, #56]	; (801ac6c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801ac32:	480f      	ldr	r0, [pc, #60]	; (801ac70 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801ac34:	4e0f      	ldr	r6, [pc, #60]	; (801ac74 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801ac36:	f00f f965 	bl	8029f04 <CRC_Lock>
 801ac3a:	4b0f      	ldr	r3, [pc, #60]	; (801ac78 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801ac3c:	b158      	cbz	r0, 801ac56 <_ZN8touchgfx11ApplicationC1Ev+0x5a>
 801ac3e:	801d      	strh	r5, [r3, #0]
 801ac40:	4a0e      	ldr	r2, [pc, #56]	; (801ac7c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801ac42:	2300      	movs	r3, #0
 801ac44:	6013      	str	r3, [r2, #0]
 801ac46:	4a0e      	ldr	r2, [pc, #56]	; (801ac80 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801ac48:	6033      	str	r3, [r6, #0]
 801ac4a:	4620      	mov	r0, r4
 801ac4c:	6013      	str	r3, [r2, #0]
 801ac4e:	f7ff ffbb 	bl	801abc8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801ac52:	4620      	mov	r0, r4
 801ac54:	bd70      	pop	{r4, r5, r6, pc}
 801ac56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ac5a:	2002      	movs	r0, #2
 801ac5c:	801a      	strh	r2, [r3, #0]
 801ac5e:	6030      	str	r0, [r6, #0]
 801ac60:	f001 fb46 	bl	801c2f0 <_ZN8touchgfx6Screen4drawEv>
 801ac64:	e7ec      	b.n	801ac40 <_ZN8touchgfx11ApplicationC1Ev+0x44>
 801ac66:	bf00      	nop
 801ac68:	08030e80 	.word	0x08030e80
 801ac6c:	b5e8b5cd 	.word	0xb5e8b5cd
 801ac70:	f407a5c2 	.word	0xf407a5c2
 801ac74:	2000680c 	.word	0x2000680c
 801ac78:	2000001c 	.word	0x2000001c
 801ac7c:	2000681c 	.word	0x2000681c
 801ac80:	20006810 	.word	0x20006810

0801ac84 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801ac84:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801ac88:	428b      	cmp	r3, r1
 801ac8a:	b510      	push	{r4, lr}
 801ac8c:	d90e      	bls.n	801acac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801ac8e:	3b01      	subs	r3, #1
 801ac90:	b29b      	uxth	r3, r3
 801ac92:	428b      	cmp	r3, r1
 801ac94:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801ac98:	d908      	bls.n	801acac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801ac9a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801ac9e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801aca2:	681a      	ldr	r2, [r3, #0]
 801aca4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801aca8:	685a      	ldr	r2, [r3, #4]
 801acaa:	6062      	str	r2, [r4, #4]
 801acac:	bd10      	pop	{r4, pc}
	...

0801acb0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801acb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801acb2:	466b      	mov	r3, sp
 801acb4:	e883 0006 	stmia.w	r3, {r1, r2}
 801acb8:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801acbc:	2a07      	cmp	r2, #7
 801acbe:	4604      	mov	r4, r0
 801acc0:	d906      	bls.n	801acd0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801acc2:	4b09      	ldr	r3, [pc, #36]	; (801ace8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801acc4:	4a09      	ldr	r2, [pc, #36]	; (801acec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801acc6:	480a      	ldr	r0, [pc, #40]	; (801acf0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801acc8:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801accc:	f011 fd0c 	bl	802c6e8 <__assert_func>
 801acd0:	1c51      	adds	r1, r2, #1
 801acd2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801acd6:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801acda:	cb03      	ldmia	r3!, {r0, r1}
 801acdc:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801ace0:	6069      	str	r1, [r5, #4]
 801ace2:	b003      	add	sp, #12
 801ace4:	bd30      	pop	{r4, r5, pc}
 801ace6:	bf00      	nop
 801ace8:	08030e20 	.word	0x08030e20
 801acec:	08030f45 	.word	0x08030f45
 801acf0:	08030e4f 	.word	0x08030e4f

0801acf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acf8:	b08d      	sub	sp, #52	; 0x34
 801acfa:	ac08      	add	r4, sp, #32
 801acfc:	4683      	mov	fp, r0
 801acfe:	4620      	mov	r0, r4
 801ad00:	e884 0006 	stmia.w	r4, {r1, r2}
 801ad04:	f7fb f9b7 	bl	8016076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ad08:	2800      	cmp	r0, #0
 801ad0a:	d16a      	bne.n	801ade2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801ad0c:	9402      	str	r4, [sp, #8]
 801ad0e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801ad12:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801ad16:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801ad1a:	2400      	movs	r4, #0
 801ad1c:	9301      	str	r3, [sp, #4]
 801ad1e:	36a0      	adds	r6, #160	; 0xa0
 801ad20:	42a5      	cmp	r5, r4
 801ad22:	d00d      	beq.n	801ad40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801ad24:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801ad28:	9802      	ldr	r0, [sp, #8]
 801ad2a:	f7ff fe97 	bl	801aa5c <_ZNK8touchgfx4Rect8includesERKS0_>
 801ad2e:	b128      	cbz	r0, 801ad3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801ad30:	1e69      	subs	r1, r5, #1
 801ad32:	1b09      	subs	r1, r1, r4
 801ad34:	b289      	uxth	r1, r1
 801ad36:	9801      	ldr	r0, [sp, #4]
 801ad38:	f7ff ffa4 	bl	801ac84 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ad3c:	3401      	adds	r4, #1
 801ad3e:	e7ef      	b.n	801ad20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ad40:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801ad44:	9703      	str	r7, [sp, #12]
 801ad46:	1e7b      	subs	r3, r7, #1
 801ad48:	9300      	str	r3, [sp, #0]
 801ad4a:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801ad4e:	2400      	movs	r4, #0
 801ad50:	4655      	mov	r5, sl
 801ad52:	9704      	str	r7, [sp, #16]
 801ad54:	4626      	mov	r6, r4
 801ad56:	9b04      	ldr	r3, [sp, #16]
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	d078      	beq.n	801ae4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801ad5c:	9902      	ldr	r1, [sp, #8]
 801ad5e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801ad62:	f7fc fe43 	bl	80179ec <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ad66:	b360      	cbz	r0, 801adc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801ad68:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801ad6c:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801ad70:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801ad74:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801ad78:	45e6      	cmp	lr, ip
 801ad7a:	db35      	blt.n	801ade8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801ad7c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ad80:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801ad84:	4472      	add	r2, lr
 801ad86:	4463      	add	r3, ip
 801ad88:	b212      	sxth	r2, r2
 801ad8a:	b21b      	sxth	r3, r3
 801ad8c:	429a      	cmp	r2, r3
 801ad8e:	dc2b      	bgt.n	801ade8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801ad90:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801ad94:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801ad98:	fa1f f288 	uxth.w	r2, r8
 801ad9c:	4413      	add	r3, r2
 801ad9e:	b29b      	uxth	r3, r3
 801ada0:	45c1      	cmp	r9, r8
 801ada2:	fa0f fe83 	sxth.w	lr, r3
 801ada6:	fa1f fc89 	uxth.w	ip, r9
 801adaa:	db0f      	blt.n	801adcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801adac:	eba3 030c 	sub.w	r3, r3, ip
 801adb0:	1ac9      	subs	r1, r1, r3
 801adb2:	b209      	sxth	r1, r1
 801adb4:	2900      	cmp	r1, #0
 801adb6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801adba:	dd12      	ble.n	801ade2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801adbc:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801adc0:	4604      	mov	r4, r0
 801adc2:	9b04      	ldr	r3, [sp, #16]
 801adc4:	3b01      	subs	r3, #1
 801adc6:	9304      	str	r3, [sp, #16]
 801adc8:	3d08      	subs	r5, #8
 801adca:	e7c4      	b.n	801ad56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801adcc:	4461      	add	r1, ip
 801adce:	b209      	sxth	r1, r1
 801add0:	4571      	cmp	r1, lr
 801add2:	dc3a      	bgt.n	801ae4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801add4:	eba2 020c 	sub.w	r2, r2, ip
 801add8:	b212      	sxth	r2, r2
 801adda:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801adde:	2a00      	cmp	r2, #0
 801ade0:	dcee      	bgt.n	801adc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801ade2:	b00d      	add	sp, #52	; 0x34
 801ade4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ade8:	45c1      	cmp	r9, r8
 801adea:	db2e      	blt.n	801ae4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801adec:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801adf0:	4499      	add	r9, r3
 801adf2:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801adf6:	4498      	add	r8, r3
 801adf8:	fa0f f989 	sxth.w	r9, r9
 801adfc:	fa0f f888 	sxth.w	r8, r8
 801ae00:	45c1      	cmp	r9, r8
 801ae02:	dc22      	bgt.n	801ae4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801ae04:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801ae08:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801ae0c:	fa1f f28c 	uxth.w	r2, ip
 801ae10:	4413      	add	r3, r2
 801ae12:	b29b      	uxth	r3, r3
 801ae14:	45e6      	cmp	lr, ip
 801ae16:	fa1f f88e 	uxth.w	r8, lr
 801ae1a:	fa0f f983 	sxth.w	r9, r3
 801ae1e:	db0a      	blt.n	801ae36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801ae20:	eba3 0308 	sub.w	r3, r3, r8
 801ae24:	1ac9      	subs	r1, r1, r3
 801ae26:	b209      	sxth	r1, r1
 801ae28:	2900      	cmp	r1, #0
 801ae2a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801ae2e:	ddd8      	ble.n	801ade2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801ae30:	f8ad 9020 	strh.w	r9, [sp, #32]
 801ae34:	e7c4      	b.n	801adc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801ae36:	4441      	add	r1, r8
 801ae38:	b209      	sxth	r1, r1
 801ae3a:	4549      	cmp	r1, r9
 801ae3c:	dc05      	bgt.n	801ae4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801ae3e:	eba2 0208 	sub.w	r2, r2, r8
 801ae42:	b212      	sxth	r2, r2
 801ae44:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801ae48:	e7c9      	b.n	801adde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801ae4a:	4606      	mov	r6, r0
 801ae4c:	e7b9      	b.n	801adc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801ae4e:	2c00      	cmp	r4, #0
 801ae50:	f47f af7d 	bne.w	801ad4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801ae54:	2e00      	cmp	r6, #0
 801ae56:	f000 81dd 	beq.w	801b214 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801ae5a:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801ae5e:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801ae62:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ae66:	b2b9      	uxth	r1, r7
 801ae68:	9104      	str	r1, [sp, #16]
 801ae6a:	9804      	ldr	r0, [sp, #16]
 801ae6c:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801ae70:	4401      	add	r1, r0
 801ae72:	b2b3      	uxth	r3, r6
 801ae74:	b289      	uxth	r1, r1
 801ae76:	441a      	add	r2, r3
 801ae78:	9105      	str	r1, [sp, #20]
 801ae7a:	b292      	uxth	r2, r2
 801ae7c:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801ae80:	fa0f f882 	sxth.w	r8, r2
 801ae84:	4655      	mov	r5, sl
 801ae86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ae8a:	9b03      	ldr	r3, [sp, #12]
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d054      	beq.n	801af3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801ae90:	9902      	ldr	r1, [sp, #8]
 801ae92:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801ae96:	f7fc fda9 	bl	80179ec <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ae9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ae9e:	b1d8      	cbz	r0, 801aed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801aea0:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801aea4:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801aea8:	4576      	cmp	r6, lr
 801aeaa:	dc26      	bgt.n	801aefa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801aeac:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801aeb0:	44f4      	add	ip, lr
 801aeb2:	fa0f fc8c 	sxth.w	ip, ip
 801aeb6:	45e0      	cmp	r8, ip
 801aeb8:	db1f      	blt.n	801aefa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801aeba:	428f      	cmp	r7, r1
 801aebc:	fa1f fc81 	uxth.w	ip, r1
 801aec0:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801aec4:	dc0f      	bgt.n	801aee6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801aec6:	9805      	ldr	r0, [sp, #20]
 801aec8:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801aecc:	eba0 0c0c 	sub.w	ip, r0, ip
 801aed0:	eba1 010c 	sub.w	r1, r1, ip
 801aed4:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801aed8:	4620      	mov	r0, r4
 801aeda:	9903      	ldr	r1, [sp, #12]
 801aedc:	3901      	subs	r1, #1
 801aede:	9103      	str	r1, [sp, #12]
 801aee0:	3d08      	subs	r5, #8
 801aee2:	4604      	mov	r4, r0
 801aee4:	e7cf      	b.n	801ae86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801aee6:	4461      	add	r1, ip
 801aee8:	b209      	sxth	r1, r1
 801aeea:	4549      	cmp	r1, r9
 801aeec:	dcf5      	bgt.n	801aeda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801aeee:	9904      	ldr	r1, [sp, #16]
 801aef0:	eba1 0c0c 	sub.w	ip, r1, ip
 801aef4:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801aef8:	e7ee      	b.n	801aed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801aefa:	428f      	cmp	r7, r1
 801aefc:	dced      	bgt.n	801aeda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801aefe:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801af02:	4461      	add	r1, ip
 801af04:	b209      	sxth	r1, r1
 801af06:	4589      	cmp	r9, r1
 801af08:	dbe7      	blt.n	801aeda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801af0a:	4576      	cmp	r6, lr
 801af0c:	fa1f fc8e 	uxth.w	ip, lr
 801af10:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801af14:	dc08      	bgt.n	801af28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801af16:	eba2 0c0c 	sub.w	ip, r2, ip
 801af1a:	eba1 010c 	sub.w	r1, r1, ip
 801af1e:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801af22:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801af26:	e7d7      	b.n	801aed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801af28:	4461      	add	r1, ip
 801af2a:	b209      	sxth	r1, r1
 801af2c:	4588      	cmp	r8, r1
 801af2e:	dbd4      	blt.n	801aeda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801af30:	eba3 0c0c 	sub.w	ip, r3, ip
 801af34:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801af38:	e7ce      	b.n	801aed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801af3a:	2c00      	cmp	r4, #0
 801af3c:	f000 816a 	beq.w	801b214 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801af40:	9b00      	ldr	r3, [sp, #0]
 801af42:	3301      	adds	r3, #1
 801af44:	f000 8166 	beq.w	801b214 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801af48:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801af4c:	4621      	mov	r1, r4
 801af4e:	9802      	ldr	r0, [sp, #8]
 801af50:	f7ff fd84 	bl	801aa5c <_ZNK8touchgfx4Rect8includesERKS0_>
 801af54:	b120      	cbz	r0, 801af60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801af56:	f8bd 1000 	ldrh.w	r1, [sp]
 801af5a:	9801      	ldr	r0, [sp, #4]
 801af5c:	f7ff fe92 	bl	801ac84 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801af60:	9902      	ldr	r1, [sp, #8]
 801af62:	4620      	mov	r0, r4
 801af64:	f7fc fd42 	bl	80179ec <_ZNK8touchgfx4Rect9intersectERKS0_>
 801af68:	2800      	cmp	r0, #0
 801af6a:	f000 809b 	beq.w	801b0a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801af6e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801af72:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801af76:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801af7a:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801af7e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801af82:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801af86:	fa1f f288 	uxth.w	r2, r8
 801af8a:	19d5      	adds	r5, r2, r7
 801af8c:	fa1f f985 	uxth.w	r9, r5
 801af90:	fa0f f589 	sxth.w	r5, r9
 801af94:	b2a1      	uxth	r1, r4
 801af96:	440b      	add	r3, r1
 801af98:	9503      	str	r5, [sp, #12]
 801af9a:	45a0      	cmp	r8, r4
 801af9c:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801afa0:	9507      	str	r5, [sp, #28]
 801afa2:	b29b      	uxth	r3, r3
 801afa4:	f340 809d 	ble.w	801b0e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801afa8:	1a52      	subs	r2, r2, r1
 801afaa:	b292      	uxth	r2, r2
 801afac:	4584      	cmp	ip, r0
 801afae:	fa0f fe83 	sxth.w	lr, r3
 801afb2:	b215      	sxth	r5, r2
 801afb4:	dd2f      	ble.n	801b016 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801afb6:	9e00      	ldr	r6, [sp, #0]
 801afb8:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801afbc:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801afc0:	9e03      	ldr	r6, [sp, #12]
 801afc2:	eba6 060e 	sub.w	r6, r6, lr
 801afc6:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801afca:	fa1f fc8c 	uxth.w	ip, ip
 801afce:	b280      	uxth	r0, r0
 801afd0:	ebac 0300 	sub.w	r3, ip, r0
 801afd4:	448c      	add	ip, r1
 801afd6:	4470      	add	r0, lr
 801afd8:	b29b      	uxth	r3, r3
 801afda:	fa0f fc8c 	sxth.w	ip, ip
 801afde:	b200      	sxth	r0, r0
 801afe0:	b21c      	sxth	r4, r3
 801afe2:	ebac 0000 	sub.w	r0, ip, r0
 801afe6:	4366      	muls	r6, r4
 801afe8:	4368      	muls	r0, r5
 801afea:	4286      	cmp	r6, r0
 801afec:	db09      	blt.n	801b002 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801afee:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801aff2:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801aff6:	4417      	add	r7, r2
 801aff8:	f8ad 3020 	strh.w	r3, [sp, #32]
 801affc:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801b000:	e685      	b.n	801ad0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b002:	440b      	add	r3, r1
 801b004:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b008:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801b00c:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801b010:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b014:	e67b      	b.n	801ad0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b016:	9e03      	ldr	r6, [sp, #12]
 801b018:	45b6      	cmp	lr, r6
 801b01a:	da28      	bge.n	801b06e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801b01c:	9b00      	ldr	r3, [sp, #0]
 801b01e:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801b022:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801b026:	eb04 030c 	add.w	r3, r4, ip
 801b02a:	fa1f f883 	uxth.w	r8, r3
 801b02e:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801b032:	4403      	add	r3, r0
 801b034:	eba3 0308 	sub.w	r3, r3, r8
 801b038:	b29b      	uxth	r3, r3
 801b03a:	fa0f f988 	sxth.w	r9, r8
 801b03e:	eba0 000c 	sub.w	r0, r0, ip
 801b042:	fa0f f883 	sxth.w	r8, r3
 801b046:	eba6 060e 	sub.w	r6, r6, lr
 801b04a:	4368      	muls	r0, r5
 801b04c:	fb08 f606 	mul.w	r6, r8, r6
 801b050:	42b0      	cmp	r0, r6
 801b052:	dc06      	bgt.n	801b062 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801b054:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801b058:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801b05c:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801b060:	e7c9      	b.n	801aff6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801b062:	4423      	add	r3, r4
 801b064:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801b068:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b06c:	e64f      	b.n	801ad0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b06e:	9807      	ldr	r0, [sp, #28]
 801b070:	eba3 0309 	sub.w	r3, r3, r9
 801b074:	b29b      	uxth	r3, r3
 801b076:	2806      	cmp	r0, #6
 801b078:	fa0f fc83 	sxth.w	ip, r3
 801b07c:	d818      	bhi.n	801b0b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801b07e:	4652      	mov	r2, sl
 801b080:	ab0a      	add	r3, sp, #40	; 0x28
 801b082:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801b086:	6851      	ldr	r1, [r2, #4]
 801b088:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801b08c:	c303      	stmia	r3!, {r0, r1}
 801b08e:	9b03      	ldr	r3, [sp, #12]
 801b090:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801b094:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801b098:	ab0a      	add	r3, sp, #40	; 0x28
 801b09a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b09e:	9801      	ldr	r0, [sp, #4]
 801b0a0:	f7ff fe06 	bl	801acb0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b0a4:	9b00      	ldr	r3, [sp, #0]
 801b0a6:	3b01      	subs	r3, #1
 801b0a8:	9300      	str	r3, [sp, #0]
 801b0aa:	f1aa 0a08 	sub.w	sl, sl, #8
 801b0ae:	e747      	b.n	801af40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801b0b0:	9800      	ldr	r0, [sp, #0]
 801b0b2:	45ac      	cmp	ip, r5
 801b0b4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801b0b8:	db0c      	blt.n	801b0d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801b0ba:	4417      	add	r7, r2
 801b0bc:	b2bf      	uxth	r7, r7
 801b0be:	4458      	add	r0, fp
 801b0c0:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801b0c4:	440f      	add	r7, r1
 801b0c6:	f8ad 4020 	strh.w	r4, [sp, #32]
 801b0ca:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801b0ce:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801b0d2:	e61c      	b.n	801ad0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b0d4:	4458      	add	r0, fp
 801b0d6:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801b0da:	443b      	add	r3, r7
 801b0dc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801b0e0:	e615      	b.n	801ad0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b0e2:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801b0e6:	fa1f f18c 	uxth.w	r1, ip
 801b0ea:	eb01 0e05 	add.w	lr, r1, r5
 801b0ee:	b282      	uxth	r2, r0
 801b0f0:	fa1f fe8e 	uxth.w	lr, lr
 801b0f4:	9204      	str	r2, [sp, #16]
 801b0f6:	fa0f f28e 	sxth.w	r2, lr
 801b0fa:	9205      	str	r2, [sp, #20]
 801b0fc:	9e04      	ldr	r6, [sp, #16]
 801b0fe:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801b102:	4432      	add	r2, r6
 801b104:	b292      	uxth	r2, r2
 801b106:	4584      	cmp	ip, r0
 801b108:	9206      	str	r2, [sp, #24]
 801b10a:	da26      	bge.n	801b15a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801b10c:	eba3 0309 	sub.w	r3, r3, r9
 801b110:	eba2 020e 	sub.w	r2, r2, lr
 801b114:	b29b      	uxth	r3, r3
 801b116:	b292      	uxth	r2, r2
 801b118:	fa0f fa83 	sxth.w	sl, r3
 801b11c:	b211      	sxth	r1, r2
 801b11e:	eba0 000c 	sub.w	r0, r0, ip
 801b122:	eba4 0408 	sub.w	r4, r4, r8
 801b126:	fb0a f000 	mul.w	r0, sl, r0
 801b12a:	434c      	muls	r4, r1
 801b12c:	42a0      	cmp	r0, r4
 801b12e:	9800      	ldr	r0, [sp, #0]
 801b130:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801b134:	dc06      	bgt.n	801b144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801b136:	4458      	add	r0, fp
 801b138:	9a05      	ldr	r2, [sp, #20]
 801b13a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801b13e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801b142:	e7ca      	b.n	801b0da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801b144:	eb0b 0300 	add.w	r3, fp, r0
 801b148:	9903      	ldr	r1, [sp, #12]
 801b14a:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801b14e:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801b152:	442a      	add	r2, r5
 801b154:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801b158:	e5d9      	b.n	801ad0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b15a:	9e04      	ldr	r6, [sp, #16]
 801b15c:	9a03      	ldr	r2, [sp, #12]
 801b15e:	1b89      	subs	r1, r1, r6
 801b160:	b21e      	sxth	r6, r3
 801b162:	b289      	uxth	r1, r1
 801b164:	4296      	cmp	r6, r2
 801b166:	fa0f fc81 	sxth.w	ip, r1
 801b16a:	dd26      	ble.n	801b1ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c6>
 801b16c:	eba3 0309 	sub.w	r3, r3, r9
 801b170:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801b174:	9e05      	ldr	r6, [sp, #20]
 801b176:	b29b      	uxth	r3, r3
 801b178:	eba6 0902 	sub.w	r9, r6, r2
 801b17c:	b218      	sxth	r0, r3
 801b17e:	eba4 0408 	sub.w	r4, r4, r8
 801b182:	fb0c f404 	mul.w	r4, ip, r4
 801b186:	fb00 f909 	mul.w	r9, r0, r9
 801b18a:	9a00      	ldr	r2, [sp, #0]
 801b18c:	454c      	cmp	r4, r9
 801b18e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b192:	db03      	blt.n	801b19c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a8>
 801b194:	445a      	add	r2, fp
 801b196:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801b19a:	e79e      	b.n	801b0da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801b19c:	eb0b 0302 	add.w	r3, fp, r2
 801b1a0:	9a03      	ldr	r2, [sp, #12]
 801b1a2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801b1a6:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801b1aa:	4429      	add	r1, r5
 801b1ac:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801b1b0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b1b4:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801b1b8:	e5a9      	b.n	801ad0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b1ba:	9b06      	ldr	r3, [sp, #24]
 801b1bc:	9c07      	ldr	r4, [sp, #28]
 801b1be:	eba3 020e 	sub.w	r2, r3, lr
 801b1c2:	b292      	uxth	r2, r2
 801b1c4:	2c06      	cmp	r4, #6
 801b1c6:	b213      	sxth	r3, r2
 801b1c8:	d80d      	bhi.n	801b1e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f2>
 801b1ca:	4651      	mov	r1, sl
 801b1cc:	aa0a      	add	r2, sp, #40	; 0x28
 801b1ce:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801b1d2:	6849      	ldr	r1, [r1, #4]
 801b1d4:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801b1d8:	9b05      	ldr	r3, [sp, #20]
 801b1da:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801b1de:	c203      	stmia	r2!, {r0, r1}
 801b1e0:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801b1e4:	e758      	b.n	801b098 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801b1e6:	9c00      	ldr	r4, [sp, #0]
 801b1e8:	4563      	cmp	r3, ip
 801b1ea:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801b1ee:	db0d      	blt.n	801b20c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x518>
 801b1f0:	4429      	add	r1, r5
 801b1f2:	9a04      	ldr	r2, [sp, #16]
 801b1f4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b1f8:	b289      	uxth	r1, r1
 801b1fa:	445c      	add	r4, fp
 801b1fc:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801b200:	4411      	add	r1, r2
 801b202:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801b206:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801b20a:	e580      	b.n	801ad0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b20c:	445c      	add	r4, fp
 801b20e:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801b212:	e79e      	b.n	801b152 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801b214:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801b218:	2f07      	cmp	r7, #7
 801b21a:	d806      	bhi.n	801b22a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x536>
 801b21c:	ab08      	add	r3, sp, #32
 801b21e:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b222:	9801      	ldr	r0, [sp, #4]
 801b224:	f7ff fd44 	bl	801acb0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b228:	e5db      	b.n	801ade2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801b22a:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801b22e:	f107 39ff 	add.w	r9, r7, #4294967295
 801b232:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801b236:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801b23a:	f04f 35ff 	mov.w	r5, #4294967295
 801b23e:	2400      	movs	r4, #0
 801b240:	9304      	str	r3, [sp, #16]
 801b242:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801b246:	9300      	str	r3, [sp, #0]
 801b248:	f109 32ff 	add.w	r2, r9, #4294967295
 801b24c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801b250:	9303      	str	r3, [sp, #12]
 801b252:	4690      	mov	r8, r2
 801b254:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801b258:	f1b8 3fff 	cmp.w	r8, #4294967295
 801b25c:	bf14      	ite	ne
 801b25e:	9904      	ldrne	r1, [sp, #16]
 801b260:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801b264:	6818      	ldr	r0, [r3, #0]
 801b266:	9206      	str	r2, [sp, #24]
 801b268:	bf18      	it	ne
 801b26a:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801b26e:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801b272:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801b276:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801b27a:	9305      	str	r3, [sp, #20]
 801b27c:	fb16 f601 	smulbb	r6, r6, r1
 801b280:	6859      	ldr	r1, [r3, #4]
 801b282:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b286:	4671      	mov	r1, lr
 801b288:	a80a      	add	r0, sp, #40	; 0x28
 801b28a:	f7ff fc09 	bl	801aaa0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b28e:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801b292:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801b296:	9b03      	ldr	r3, [sp, #12]
 801b298:	9a00      	ldr	r2, [sp, #0]
 801b29a:	fb11 f100 	smulbb	r1, r1, r0
 801b29e:	fb02 6603 	mla	r6, r2, r3, r6
 801b2a2:	1b8e      	subs	r6, r1, r6
 801b2a4:	2008      	movs	r0, #8
 801b2a6:	fb91 f1f0 	sdiv	r1, r1, r0
 801b2aa:	42b1      	cmp	r1, r6
 801b2ac:	dc21      	bgt.n	801b2f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801b2ae:	4556      	cmp	r6, sl
 801b2b0:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801b2b4:	da03      	bge.n	801b2be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801b2b6:	b1e6      	cbz	r6, 801b2f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801b2b8:	46b2      	mov	sl, r6
 801b2ba:	4645      	mov	r5, r8
 801b2bc:	464c      	mov	r4, r9
 801b2be:	f108 38ff 	add.w	r8, r8, #4294967295
 801b2c2:	f118 0f02 	cmn.w	r8, #2
 801b2c6:	d1c7      	bne.n	801b258 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x564>
 801b2c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b2cc:	f1a7 0708 	sub.w	r7, r7, #8
 801b2d0:	4691      	mov	r9, r2
 801b2d2:	d1b6      	bne.n	801b242 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 801b2d4:	9b01      	ldr	r3, [sp, #4]
 801b2d6:	b2a6      	uxth	r6, r4
 801b2d8:	00e4      	lsls	r4, r4, #3
 801b2da:	1918      	adds	r0, r3, r4
 801b2dc:	1c6b      	adds	r3, r5, #1
 801b2de:	d10b      	bne.n	801b2f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 801b2e0:	4601      	mov	r1, r0
 801b2e2:	9802      	ldr	r0, [sp, #8]
 801b2e4:	f7ff fbdc 	bl	801aaa0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b2e8:	4631      	mov	r1, r6
 801b2ea:	9801      	ldr	r0, [sp, #4]
 801b2ec:	f7ff fcca 	bl	801ac84 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b2f0:	e50d      	b.n	801ad0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b2f2:	4645      	mov	r5, r8
 801b2f4:	464c      	mov	r4, r9
 801b2f6:	e7ed      	b.n	801b2d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e0>
 801b2f8:	9b01      	ldr	r3, [sp, #4]
 801b2fa:	00ed      	lsls	r5, r5, #3
 801b2fc:	1959      	adds	r1, r3, r5
 801b2fe:	f7ff fbcf 	bl	801aaa0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b302:	9b02      	ldr	r3, [sp, #8]
 801b304:	cb03      	ldmia	r3!, {r0, r1}
 801b306:	445d      	add	r5, fp
 801b308:	445c      	add	r4, fp
 801b30a:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801b30e:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801b312:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801b316:	9b02      	ldr	r3, [sp, #8]
 801b318:	6861      	ldr	r1, [r4, #4]
 801b31a:	c303      	stmia	r3!, {r0, r1}
 801b31c:	e7e4      	b.n	801b2e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f4>
	...

0801b320 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801b320:	b530      	push	{r4, r5, lr}
 801b322:	4b1d      	ldr	r3, [pc, #116]	; (801b398 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801b324:	b085      	sub	sp, #20
 801b326:	460c      	mov	r4, r1
 801b328:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b32c:	4b1b      	ldr	r3, [pc, #108]	; (801b39c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801b32e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b332:	2100      	movs	r1, #0
 801b334:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b338:	9100      	str	r1, [sp, #0]
 801b33a:	4605      	mov	r5, r0
 801b33c:	6861      	ldr	r1, [r4, #4]
 801b33e:	6820      	ldr	r0, [r4, #0]
 801b340:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b344:	ab02      	add	r3, sp, #8
 801b346:	c303      	stmia	r3!, {r0, r1}
 801b348:	4669      	mov	r1, sp
 801b34a:	a802      	add	r0, sp, #8
 801b34c:	f7fa fe50 	bl	8015ff0 <_ZN8touchgfx4RectaNERKS0_>
 801b350:	ab02      	add	r3, sp, #8
 801b352:	cb03      	ldmia	r3!, {r0, r1}
 801b354:	4b12      	ldr	r3, [pc, #72]	; (801b3a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801b356:	6020      	str	r0, [r4, #0]
 801b358:	6818      	ldr	r0, [r3, #0]
 801b35a:	6061      	str	r1, [r4, #4]
 801b35c:	b138      	cbz	r0, 801b36e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801b35e:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801b362:	b133      	cbz	r3, 801b372 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801b364:	6821      	ldr	r1, [r4, #0]
 801b366:	6862      	ldr	r2, [r4, #4]
 801b368:	4628      	mov	r0, r5
 801b36a:	f7ff fcc3 	bl	801acf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b36e:	b005      	add	sp, #20
 801b370:	bd30      	pop	{r4, r5, pc}
 801b372:	6803      	ldr	r3, [r0, #0]
 801b374:	4621      	mov	r1, r4
 801b376:	689b      	ldr	r3, [r3, #8]
 801b378:	4798      	blx	r3
 801b37a:	4b0a      	ldr	r3, [pc, #40]	; (801b3a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801b37c:	6818      	ldr	r0, [r3, #0]
 801b37e:	b118      	cbz	r0, 801b388 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801b380:	6803      	ldr	r3, [r0, #0]
 801b382:	4621      	mov	r1, r4
 801b384:	689b      	ldr	r3, [r3, #8]
 801b386:	4798      	blx	r3
 801b388:	4b07      	ldr	r3, [pc, #28]	; (801b3a8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801b38a:	6818      	ldr	r0, [r3, #0]
 801b38c:	6803      	ldr	r3, [r0, #0]
 801b38e:	4621      	mov	r1, r4
 801b390:	699b      	ldr	r3, [r3, #24]
 801b392:	4798      	blx	r3
 801b394:	e7eb      	b.n	801b36e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801b396:	bf00      	nop
 801b398:	200067c4 	.word	0x200067c4
 801b39c:	200067c6 	.word	0x200067c6
 801b3a0:	2000680c 	.word	0x2000680c
 801b3a4:	20006808 	.word	0x20006808
 801b3a8:	200067d0 	.word	0x200067d0

0801b3ac <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801b3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3b0:	4604      	mov	r4, r0
 801b3b2:	b09b      	sub	sp, #108	; 0x6c
 801b3b4:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801b3b8:	b129      	cbz	r1, 801b3c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801b3ba:	2300      	movs	r3, #0
 801b3bc:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801b3c0:	b01b      	add	sp, #108	; 0x6c
 801b3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3c6:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801b3ca:	4630      	mov	r0, r6
 801b3cc:	f7fa fe53 	bl	8016076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b3d0:	4605      	mov	r5, r0
 801b3d2:	b940      	cbnz	r0, 801b3e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801b3d4:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b3d8:	4620      	mov	r0, r4
 801b3da:	f7ff fc8b 	bl	801acf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b3de:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801b3e2:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801b3e6:	4ba7      	ldr	r3, [pc, #668]	; (801b684 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	b33b      	cbz	r3, 801b43c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801b3ec:	4da6      	ldr	r5, [pc, #664]	; (801b688 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801b3ee:	4628      	mov	r0, r5
 801b3f0:	f7fa fe41 	bl	8016076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b3f4:	4606      	mov	r6, r0
 801b3f6:	bb08      	cbnz	r0, 801b43c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801b3f8:	4628      	mov	r0, r5
 801b3fa:	f7ff f9b9 	bl	801a770 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b3fe:	6829      	ldr	r1, [r5, #0]
 801b400:	686a      	ldr	r2, [r5, #4]
 801b402:	4620      	mov	r0, r4
 801b404:	f7ff fc76 	bl	801acf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b408:	802e      	strh	r6, [r5, #0]
 801b40a:	806e      	strh	r6, [r5, #2]
 801b40c:	80ae      	strh	r6, [r5, #4]
 801b40e:	80ee      	strh	r6, [r5, #6]
 801b410:	4f9e      	ldr	r7, [pc, #632]	; (801b68c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801b412:	a809      	add	r0, sp, #36	; 0x24
 801b414:	f7ff fbe3 	bl	801abde <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b418:	883d      	ldrh	r5, [r7, #0]
 801b41a:	462e      	mov	r6, r5
 801b41c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b420:	42b3      	cmp	r3, r6
 801b422:	d910      	bls.n	801b446 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801b424:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b428:	a809      	add	r0, sp, #36	; 0x24
 801b42a:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801b42e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801b432:	3601      	adds	r6, #1
 801b434:	f7ff fc3c 	bl	801acb0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b438:	b2b6      	uxth	r6, r6
 801b43a:	e7ef      	b.n	801b41c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801b43c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b440:	2b00      	cmp	r3, #0
 801b442:	d1e5      	bne.n	801b410 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801b444:	e7bc      	b.n	801b3c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b446:	462e      	mov	r6, r5
 801b448:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801b44c:	42b3      	cmp	r3, r6
 801b44e:	d90b      	bls.n	801b468 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801b450:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b454:	4620      	mov	r0, r4
 801b456:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801b45a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801b45e:	3601      	adds	r6, #1
 801b460:	f7ff fc48 	bl	801acf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b464:	b2b6      	uxth	r6, r6
 801b466:	e7ef      	b.n	801b448 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801b468:	4a89      	ldr	r2, [pc, #548]	; (801b690 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801b46a:	6813      	ldr	r3, [r2, #0]
 801b46c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b470:	2b01      	cmp	r3, #1
 801b472:	4690      	mov	r8, r2
 801b474:	f040 8094 	bne.w	801b5a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801b478:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801b47c:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801b480:	33aa      	adds	r3, #170	; 0xaa
 801b482:	f04f 0900 	mov.w	r9, #0
 801b486:	42a8      	cmp	r0, r5
 801b488:	f103 0308 	add.w	r3, r3, #8
 801b48c:	dd0a      	ble.n	801b4a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801b48e:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801b492:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801b496:	440a      	add	r2, r1
 801b498:	b212      	sxth	r2, r2
 801b49a:	4591      	cmp	r9, r2
 801b49c:	bfb8      	it	lt
 801b49e:	4691      	movlt	r9, r2
 801b4a0:	3501      	adds	r5, #1
 801b4a2:	e7f0      	b.n	801b486 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801b4a4:	4b7b      	ldr	r3, [pc, #492]	; (801b694 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801b4a6:	4e7c      	ldr	r6, [pc, #496]	; (801b698 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801b4a8:	881d      	ldrh	r5, [r3, #0]
 801b4aa:	2300      	movs	r3, #0
 801b4ac:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801b4b0:	2d0f      	cmp	r5, #15
 801b4b2:	bf8c      	ite	hi
 801b4b4:	08ed      	lsrhi	r5, r5, #3
 801b4b6:	2501      	movls	r5, #1
 801b4b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b4bc:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801b4c0:	f8d8 0000 	ldr.w	r0, [r8]
 801b4c4:	440b      	add	r3, r1
 801b4c6:	b21b      	sxth	r3, r3
 801b4c8:	4599      	cmp	r9, r3
 801b4ca:	6802      	ldr	r2, [r0, #0]
 801b4cc:	dd4b      	ble.n	801b566 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801b4ce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 801b4d2:	4798      	blx	r3
 801b4d4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b4d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b4dc:	4413      	add	r3, r2
 801b4de:	b21b      	sxth	r3, r3
 801b4e0:	195a      	adds	r2, r3, r5
 801b4e2:	4290      	cmp	r0, r2
 801b4e4:	da07      	bge.n	801b4f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801b4e6:	4581      	cmp	r9, r0
 801b4e8:	dd05      	ble.n	801b4f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801b4ea:	4298      	cmp	r0, r3
 801b4ec:	da33      	bge.n	801b556 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	dd31      	ble.n	801b556 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801b4f2:	4648      	mov	r0, r9
 801b4f4:	e004      	b.n	801b500 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801b4f6:	4298      	cmp	r0, r3
 801b4f8:	dbfb      	blt.n	801b4f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801b4fa:	4548      	cmp	r0, r9
 801b4fc:	bfa8      	it	ge
 801b4fe:	4648      	movge	r0, r9
 801b500:	f9b6 2000 	ldrsh.w	r2, [r6]
 801b504:	f8b7 a000 	ldrh.w	sl, [r7]
 801b508:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b50c:	2100      	movs	r1, #0
 801b50e:	1ac0      	subs	r0, r0, r3
 801b510:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b514:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b518:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b51c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b520:	4553      	cmp	r3, sl
 801b522:	d9c9      	bls.n	801b4b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801b524:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801b528:	ab07      	add	r3, sp, #28
 801b52a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b52e:	6851      	ldr	r1, [r2, #4]
 801b530:	c303      	stmia	r3!, {r0, r1}
 801b532:	a807      	add	r0, sp, #28
 801b534:	a905      	add	r1, sp, #20
 801b536:	f7fa fd5b 	bl	8015ff0 <_ZN8touchgfx4RectaNERKS0_>
 801b53a:	a807      	add	r0, sp, #28
 801b53c:	f7fa fd9b 	bl	8016076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b540:	b920      	cbnz	r0, 801b54c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801b542:	6823      	ldr	r3, [r4, #0]
 801b544:	a907      	add	r1, sp, #28
 801b546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b548:	4620      	mov	r0, r4
 801b54a:	4798      	blx	r3
 801b54c:	f10a 0a01 	add.w	sl, sl, #1
 801b550:	fa1f fa8a 	uxth.w	sl, sl
 801b554:	e7e2      	b.n	801b51c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801b556:	f8d8 0000 	ldr.w	r0, [r8]
 801b55a:	6803      	ldr	r3, [r0, #0]
 801b55c:	2101      	movs	r1, #1
 801b55e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b562:	4798      	blx	r3
 801b564:	e7a8      	b.n	801b4b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801b566:	6a13      	ldr	r3, [r2, #32]
 801b568:	4798      	blx	r3
 801b56a:	4b4c      	ldr	r3, [pc, #304]	; (801b69c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801b56c:	781b      	ldrb	r3, [r3, #0]
 801b56e:	2b00      	cmp	r3, #0
 801b570:	f43f af26 	beq.w	801b3c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b574:	2300      	movs	r3, #0
 801b576:	883d      	ldrh	r5, [r7, #0]
 801b578:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801b57c:	34ea      	adds	r4, #234	; 0xea
 801b57e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801b582:	42ab      	cmp	r3, r5
 801b584:	f67f af1c 	bls.w	801b3c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b588:	ab1a      	add	r3, sp, #104	; 0x68
 801b58a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b58e:	3b44      	subs	r3, #68	; 0x44
 801b590:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b594:	4620      	mov	r0, r4
 801b596:	3501      	adds	r5, #1
 801b598:	f7ff fb8a 	bl	801acb0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b59c:	b2ad      	uxth	r5, r5
 801b59e:	e7ee      	b.n	801b57e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801b5a0:	2b02      	cmp	r3, #2
 801b5a2:	f040 813e 	bne.w	801b822 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x476>
 801b5a6:	4b3e      	ldr	r3, [pc, #248]	; (801b6a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>)
 801b5a8:	781b      	ldrb	r3, [r3, #0]
 801b5aa:	2b01      	cmp	r3, #1
 801b5ac:	d02c      	beq.n	801b608 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801b5ae:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801b5b2:	883a      	ldrh	r2, [r7, #0]
 801b5b4:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801b5b8:	3201      	adds	r2, #1
 801b5ba:	b292      	uxth	r2, r2
 801b5bc:	2900      	cmp	r1, #0
 801b5be:	d0d4      	beq.n	801b56a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801b5c0:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801b5c4:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801b5c8:	441d      	add	r5, r3
 801b5ca:	b22d      	sxth	r5, r5
 801b5cc:	4610      	mov	r0, r2
 801b5ce:	f04f 0a00 	mov.w	sl, #0
 801b5d2:	b283      	uxth	r3, r0
 801b5d4:	4299      	cmp	r1, r3
 801b5d6:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801b5da:	f240 80c5 	bls.w	801b768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3bc>
 801b5de:	4426      	add	r6, r4
 801b5e0:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801b5e4:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801b5e8:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801b5ec:	4573      	cmp	r3, lr
 801b5ee:	4684      	mov	ip, r0
 801b5f0:	f340 80a7 	ble.w	801b742 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x396>
 801b5f4:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801b5f8:	4475      	add	r5, lr
 801b5fa:	b22d      	sxth	r5, r5
 801b5fc:	429d      	cmp	r5, r3
 801b5fe:	bfa8      	it	ge
 801b600:	461d      	movge	r5, r3
 801b602:	3001      	adds	r0, #1
 801b604:	46e2      	mov	sl, ip
 801b606:	e7e4      	b.n	801b5d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801b608:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801b60c:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801b610:	f1bb 0f00 	cmp.w	fp, #0
 801b614:	d0a9      	beq.n	801b56a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801b616:	883b      	ldrh	r3, [r7, #0]
 801b618:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801b61c:	3301      	adds	r3, #1
 801b61e:	b29b      	uxth	r3, r3
 801b620:	2600      	movs	r6, #0
 801b622:	b299      	uxth	r1, r3
 801b624:	458b      	cmp	fp, r1
 801b626:	ea4f 05c6 	mov.w	r5, r6, lsl #3
 801b62a:	d93b      	bls.n	801b6a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f8>
 801b62c:	4425      	add	r5, r4
 801b62e:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801b632:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801b636:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801b63a:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801b63e:	4408      	add	r0, r1
 801b640:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801b644:	4471      	add	r1, lr
 801b646:	b200      	sxth	r0, r0
 801b648:	b209      	sxth	r1, r1
 801b64a:	4288      	cmp	r0, r1
 801b64c:	469c      	mov	ip, r3
 801b64e:	da06      	bge.n	801b65e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b2>
 801b650:	4586      	cmp	lr, r0
 801b652:	4672      	mov	r2, lr
 801b654:	bfb8      	it	lt
 801b656:	4602      	movlt	r2, r0
 801b658:	3301      	adds	r3, #1
 801b65a:	4666      	mov	r6, ip
 801b65c:	e7e1      	b.n	801b622 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801b65e:	d10b      	bne.n	801b678 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2cc>
 801b660:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801b664:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801b668:	458c      	cmp	ip, r1
 801b66a:	bfb4      	ite	lt
 801b66c:	469c      	movlt	ip, r3
 801b66e:	46b4      	movge	ip, r6
 801b670:	4572      	cmp	r2, lr
 801b672:	bfb8      	it	lt
 801b674:	4672      	movlt	r2, lr
 801b676:	e7ef      	b.n	801b658 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ac>
 801b678:	428a      	cmp	r2, r1
 801b67a:	bfb8      	it	lt
 801b67c:	460a      	movlt	r2, r1
 801b67e:	46b4      	mov	ip, r6
 801b680:	e7ea      	b.n	801b658 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ac>
 801b682:	bf00      	nop
 801b684:	20006808 	.word	0x20006808
 801b688:	20006814 	.word	0x20006814
 801b68c:	2000001c 	.word	0x2000001c
 801b690:	200067d0 	.word	0x200067d0
 801b694:	200067c6 	.word	0x200067c6
 801b698:	200067c4 	.word	0x200067c4
 801b69c:	200067ce 	.word	0x200067ce
 801b6a0:	200067c8 	.word	0x200067c8
 801b6a4:	1961      	adds	r1, r4, r5
 801b6a6:	ab07      	add	r3, sp, #28
 801b6a8:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801b6ac:	6849      	ldr	r1, [r1, #4]
 801b6ae:	c303      	stmia	r3!, {r0, r1}
 801b6b0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b6b4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b6b8:	2b13      	cmp	r3, #19
 801b6ba:	bfd8      	it	le
 801b6bc:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801b6c0:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b6c4:	440b      	add	r3, r1
 801b6c6:	1a9b      	subs	r3, r3, r2
 801b6c8:	a807      	add	r0, sp, #28
 801b6ca:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b6ce:	f7ff f8c5 	bl	801a85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b6d2:	a807      	add	r0, sp, #28
 801b6d4:	f7fa fccf 	bl	8016076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b6d8:	2800      	cmp	r0, #0
 801b6da:	d197      	bne.n	801b60c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801b6dc:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801b6e0:	f8d8 0000 	ldr.w	r0, [r8]
 801b6e4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b6e8:	f8d0 e000 	ldr.w	lr, [r0]
 801b6ec:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801b6f0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b6f4:	f1bc 0f14 	cmp.w	ip, #20
 801b6f8:	bfa8      	it	ge
 801b6fa:	f04f 0c14 	movge.w	ip, #20
 801b6fe:	fa1f fc8c 	uxth.w	ip, ip
 801b702:	f8cd c000 	str.w	ip, [sp]
 801b706:	f8de a084 	ldr.w	sl, [lr, #132]	; 0x84
 801b70a:	47d0      	blx	sl
 801b70c:	4682      	mov	sl, r0
 801b70e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b712:	a807      	add	r0, sp, #28
 801b714:	f7ff f82c 	bl	801a770 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b718:	6823      	ldr	r3, [r4, #0]
 801b71a:	4425      	add	r5, r4
 801b71c:	4620      	mov	r0, r4
 801b71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b720:	a907      	add	r1, sp, #28
 801b722:	4798      	blx	r3
 801b724:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801b728:	eba0 000a 	sub.w	r0, r0, sl
 801b72c:	b200      	sxth	r0, r0
 801b72e:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801b732:	2800      	cmp	r0, #0
 801b734:	f47f af6a 	bne.w	801b60c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801b738:	b2b1      	uxth	r1, r6
 801b73a:	4648      	mov	r0, r9
 801b73c:	f7ff faa2 	bl	801ac84 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b740:	e764      	b.n	801b60c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801b742:	d10c      	bne.n	801b75e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b2>
 801b744:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801b748:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801b74c:	45b4      	cmp	ip, r6
 801b74e:	bfb4      	ite	lt
 801b750:	4684      	movlt	ip, r0
 801b752:	46d4      	movge	ip, sl
 801b754:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801b758:	4433      	add	r3, r6
 801b75a:	b21b      	sxth	r3, r3
 801b75c:	e74e      	b.n	801b5fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801b75e:	4575      	cmp	r5, lr
 801b760:	bfa8      	it	ge
 801b762:	4675      	movge	r5, lr
 801b764:	46d4      	mov	ip, sl
 801b766:	e74c      	b.n	801b602 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801b768:	eb0b 0006 	add.w	r0, fp, r6
 801b76c:	4426      	add	r6, r4
 801b76e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801b772:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801b776:	f1b9 0f13 	cmp.w	r9, #19
 801b77a:	bfde      	ittt	le
 801b77c:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801b780:	444d      	addle	r5, r9
 801b782:	b22d      	sxthle	r5, r5
 801b784:	f7fa fc77 	bl	8016076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b788:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801b78c:	2800      	cmp	r0, #0
 801b78e:	f47f af15 	bne.w	801b5bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801b792:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801b796:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b79a:	eba5 050c 	sub.w	r5, r5, ip
 801b79e:	fa1f f28c 	uxth.w	r2, ip
 801b7a2:	fa1f f989 	uxth.w	r9, r9
 801b7a6:	eb02 0009 	add.w	r0, r2, r9
 801b7aa:	2d14      	cmp	r5, #20
 801b7ac:	bfa8      	it	ge
 801b7ae:	2514      	movge	r5, #20
 801b7b0:	b200      	sxth	r0, r0
 801b7b2:	fa1f fe85 	uxth.w	lr, r5
 801b7b6:	eba0 000c 	sub.w	r0, r0, ip
 801b7ba:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801b7be:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801b7c2:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b7c6:	4586      	cmp	lr, r0
 801b7c8:	f8d8 0000 	ldr.w	r0, [r8]
 801b7cc:	f8ad c01e 	strh.w	ip, [sp, #30]
 801b7d0:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b7d4:	bfb8      	it	lt
 801b7d6:	46f1      	movlt	r9, lr
 801b7d8:	6805      	ldr	r5, [r0, #0]
 801b7da:	f8cd 9000 	str.w	r9, [sp]
 801b7de:	b29b      	uxth	r3, r3
 801b7e0:	b289      	uxth	r1, r1
 801b7e2:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
 801b7e6:	47a8      	blx	r5
 801b7e8:	6823      	ldr	r3, [r4, #0]
 801b7ea:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b7f0:	a907      	add	r1, sp, #28
 801b7f2:	4620      	mov	r0, r4
 801b7f4:	4798      	blx	r3
 801b7f6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801b7fa:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801b7fe:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801b802:	1a5b      	subs	r3, r3, r1
 801b804:	440a      	add	r2, r1
 801b806:	b21b      	sxth	r3, r3
 801b808:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801b80c:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801b810:	2b00      	cmp	r3, #0
 801b812:	f47f aece 	bne.w	801b5b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801b816:	fa1f f18a 	uxth.w	r1, sl
 801b81a:	4658      	mov	r0, fp
 801b81c:	f7ff fa32 	bl	801ac84 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b820:	e6c7      	b.n	801b5b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801b822:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b826:	42ab      	cmp	r3, r5
 801b828:	f67f ae9f 	bls.w	801b56a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801b82c:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b830:	ab07      	add	r3, sp, #28
 801b832:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b836:	6851      	ldr	r1, [r2, #4]
 801b838:	c303      	stmia	r3!, {r0, r1}
 801b83a:	a807      	add	r0, sp, #28
 801b83c:	f7fa fc1b 	bl	8016076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b840:	b920      	cbnz	r0, 801b84c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x4a0>
 801b842:	6823      	ldr	r3, [r4, #0]
 801b844:	a907      	add	r1, sp, #28
 801b846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b848:	4620      	mov	r0, r4
 801b84a:	4798      	blx	r3
 801b84c:	3501      	adds	r5, #1
 801b84e:	b2ad      	uxth	r5, r5
 801b850:	e7e7      	b.n	801b822 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x476>
 801b852:	bf00      	nop

0801b854 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801b854:	4b03      	ldr	r3, [pc, #12]	; (801b864 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801b856:	2200      	movs	r2, #0
 801b858:	801a      	strh	r2, [r3, #0]
 801b85a:	805a      	strh	r2, [r3, #2]
 801b85c:	809a      	strh	r2, [r3, #4]
 801b85e:	80da      	strh	r2, [r3, #6]
 801b860:	4770      	bx	lr
 801b862:	bf00      	nop
 801b864:	20006814 	.word	0x20006814

0801b868 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b86c:	4606      	mov	r6, r0
 801b86e:	b09b      	sub	sp, #108	; 0x6c
 801b870:	a803      	add	r0, sp, #12
 801b872:	4614      	mov	r4, r2
 801b874:	468a      	mov	sl, r1
 801b876:	461d      	mov	r5, r3
 801b878:	f000 feb4 	bl	801c5e4 <_ZN8touchgfx12TextProviderC1Ev>
 801b87c:	6833      	ldr	r3, [r6, #0]
 801b87e:	4630      	mov	r0, r6
 801b880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b882:	4798      	blx	r3
 801b884:	6833      	ldr	r3, [r6, #0]
 801b886:	4607      	mov	r7, r0
 801b888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b88a:	4630      	mov	r0, r6
 801b88c:	4798      	blx	r3
 801b88e:	462a      	mov	r2, r5
 801b890:	9000      	str	r0, [sp, #0]
 801b892:	4621      	mov	r1, r4
 801b894:	463b      	mov	r3, r7
 801b896:	a803      	add	r0, sp, #12
 801b898:	f000 fef1 	bl	801c67e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b89c:	2500      	movs	r5, #0
 801b89e:	462c      	mov	r4, r5
 801b8a0:	46a9      	mov	r9, r5
 801b8a2:	46a8      	mov	r8, r5
 801b8a4:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801b8a8:	2300      	movs	r3, #0
 801b8aa:	9302      	str	r3, [sp, #8]
 801b8ac:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b8b0:	429c      	cmp	r4, r3
 801b8b2:	d002      	beq.n	801b8ba <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801b8b4:	455c      	cmp	r4, fp
 801b8b6:	bf18      	it	ne
 801b8b8:	4625      	movne	r5, r4
 801b8ba:	ab02      	add	r3, sp, #8
 801b8bc:	4632      	mov	r2, r6
 801b8be:	4651      	mov	r1, sl
 801b8c0:	a803      	add	r0, sp, #12
 801b8c2:	f001 f9d7 	bl	801cc74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b8c6:	4604      	mov	r4, r0
 801b8c8:	b108      	cbz	r0, 801b8ce <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801b8ca:	280a      	cmp	r0, #10
 801b8cc:	d10a      	bne.n	801b8e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801b8ce:	45c1      	cmp	r9, r8
 801b8d0:	bf38      	it	cc
 801b8d2:	46c1      	movcc	r9, r8
 801b8d4:	f04f 0800 	mov.w	r8, #0
 801b8d8:	2c00      	cmp	r4, #0
 801b8da:	d1e5      	bne.n	801b8a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b8dc:	4648      	mov	r0, r9
 801b8de:	b01b      	add	sp, #108	; 0x6c
 801b8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8e4:	9a02      	ldr	r2, [sp, #8]
 801b8e6:	2a00      	cmp	r2, #0
 801b8e8:	d0de      	beq.n	801b8a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b8ea:	7b57      	ldrb	r7, [r2, #13]
 801b8ec:	6833      	ldr	r3, [r6, #0]
 801b8ee:	8894      	ldrh	r4, [r2, #4]
 801b8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b8f2:	007f      	lsls	r7, r7, #1
 801b8f4:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801b8f8:	7a97      	ldrb	r7, [r2, #10]
 801b8fa:	4629      	mov	r1, r5
 801b8fc:	4307      	orrs	r7, r0
 801b8fe:	4630      	mov	r0, r6
 801b900:	4798      	blx	r3
 801b902:	4438      	add	r0, r7
 801b904:	4480      	add	r8, r0
 801b906:	fa1f f888 	uxth.w	r8, r8
 801b90a:	e7e5      	b.n	801b8d8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801b90c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801b90c:	b508      	push	{r3, lr}
 801b90e:	6803      	ldr	r3, [r0, #0]
 801b910:	68db      	ldr	r3, [r3, #12]
 801b912:	4798      	blx	r3
 801b914:	b128      	cbz	r0, 801b922 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801b916:	7b43      	ldrb	r3, [r0, #13]
 801b918:	7a80      	ldrb	r0, [r0, #10]
 801b91a:	005b      	lsls	r3, r3, #1
 801b91c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b920:	4318      	orrs	r0, r3
 801b922:	bd08      	pop	{r3, pc}

0801b924 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801b924:	b40e      	push	{r1, r2, r3}
 801b926:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b928:	b09c      	sub	sp, #112	; 0x70
 801b92a:	ab21      	add	r3, sp, #132	; 0x84
 801b92c:	4605      	mov	r5, r0
 801b92e:	f853 4b04 	ldr.w	r4, [r3], #4
 801b932:	9303      	str	r3, [sp, #12]
 801b934:	a805      	add	r0, sp, #20
 801b936:	f000 fe55 	bl	801c5e4 <_ZN8touchgfx12TextProviderC1Ev>
 801b93a:	682b      	ldr	r3, [r5, #0]
 801b93c:	4628      	mov	r0, r5
 801b93e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b940:	4798      	blx	r3
 801b942:	682b      	ldr	r3, [r5, #0]
 801b944:	4606      	mov	r6, r0
 801b946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b948:	4628      	mov	r0, r5
 801b94a:	4798      	blx	r3
 801b94c:	4633      	mov	r3, r6
 801b94e:	ae1c      	add	r6, sp, #112	; 0x70
 801b950:	4621      	mov	r1, r4
 801b952:	9000      	str	r0, [sp, #0]
 801b954:	9a03      	ldr	r2, [sp, #12]
 801b956:	2400      	movs	r4, #0
 801b958:	a805      	add	r0, sp, #20
 801b95a:	f000 fe90 	bl	801c67e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b95e:	f846 4d60 	str.w	r4, [r6, #-96]!
 801b962:	462a      	mov	r2, r5
 801b964:	4633      	mov	r3, r6
 801b966:	4621      	mov	r1, r4
 801b968:	a805      	add	r0, sp, #20
 801b96a:	f001 f983 	bl	801cc74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b96e:	b1f0      	cbz	r0, 801b9ae <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801b970:	280a      	cmp	r0, #10
 801b972:	d018      	beq.n	801b9a6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801b974:	9f04      	ldr	r7, [sp, #16]
 801b976:	b1b7      	cbz	r7, 801b9a6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801b978:	7b78      	ldrb	r0, [r7, #13]
 801b97a:	7a3b      	ldrb	r3, [r7, #8]
 801b97c:	88aa      	ldrh	r2, [r5, #4]
 801b97e:	00c1      	lsls	r1, r0, #3
 801b980:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b984:	4319      	orrs	r1, r3
 801b986:	0643      	lsls	r3, r0, #25
 801b988:	bf44      	itt	mi
 801b98a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801b98e:	b219      	sxthmi	r1, r3
 801b990:	0100      	lsls	r0, r0, #4
 801b992:	79fb      	ldrb	r3, [r7, #7]
 801b994:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b998:	4303      	orrs	r3, r0
 801b99a:	4413      	add	r3, r2
 801b99c:	1a5b      	subs	r3, r3, r1
 801b99e:	b29b      	uxth	r3, r3
 801b9a0:	42a3      	cmp	r3, r4
 801b9a2:	bfc8      	it	gt
 801b9a4:	b21c      	sxthgt	r4, r3
 801b9a6:	4633      	mov	r3, r6
 801b9a8:	462a      	mov	r2, r5
 801b9aa:	2100      	movs	r1, #0
 801b9ac:	e7dc      	b.n	801b968 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801b9ae:	b2a0      	uxth	r0, r4
 801b9b0:	b01c      	add	sp, #112	; 0x70
 801b9b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b9b6:	b003      	add	sp, #12
 801b9b8:	4770      	bx	lr

0801b9ba <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801b9ba:	b40e      	push	{r1, r2, r3}
 801b9bc:	b570      	push	{r4, r5, r6, lr}
 801b9be:	b09b      	sub	sp, #108	; 0x6c
 801b9c0:	ab1f      	add	r3, sp, #124	; 0x7c
 801b9c2:	4604      	mov	r4, r0
 801b9c4:	f853 5b04 	ldr.w	r5, [r3], #4
 801b9c8:	9302      	str	r3, [sp, #8]
 801b9ca:	a803      	add	r0, sp, #12
 801b9cc:	f000 fe0a 	bl	801c5e4 <_ZN8touchgfx12TextProviderC1Ev>
 801b9d0:	6823      	ldr	r3, [r4, #0]
 801b9d2:	4620      	mov	r0, r4
 801b9d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b9d6:	4798      	blx	r3
 801b9d8:	6823      	ldr	r3, [r4, #0]
 801b9da:	4606      	mov	r6, r0
 801b9dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b9de:	4620      	mov	r0, r4
 801b9e0:	4798      	blx	r3
 801b9e2:	4633      	mov	r3, r6
 801b9e4:	9000      	str	r0, [sp, #0]
 801b9e6:	9a02      	ldr	r2, [sp, #8]
 801b9e8:	4629      	mov	r1, r5
 801b9ea:	a803      	add	r0, sp, #12
 801b9ec:	f000 fe47 	bl	801c67e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b9f0:	a803      	add	r0, sp, #12
 801b9f2:	f001 fa37 	bl	801ce64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b9f6:	2401      	movs	r4, #1
 801b9f8:	b2a3      	uxth	r3, r4
 801b9fa:	b140      	cbz	r0, 801ba0e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801b9fc:	280a      	cmp	r0, #10
 801b9fe:	bf08      	it	eq
 801ba00:	3301      	addeq	r3, #1
 801ba02:	a803      	add	r0, sp, #12
 801ba04:	bf08      	it	eq
 801ba06:	b21c      	sxtheq	r4, r3
 801ba08:	f001 fa2c 	bl	801ce64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ba0c:	e7f4      	b.n	801b9f8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801ba0e:	4618      	mov	r0, r3
 801ba10:	b01b      	add	sp, #108	; 0x6c
 801ba12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba16:	b003      	add	sp, #12
 801ba18:	4770      	bx	lr

0801ba1a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801ba1a:	b40e      	push	{r1, r2, r3}
 801ba1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba1e:	b09c      	sub	sp, #112	; 0x70
 801ba20:	ab21      	add	r3, sp, #132	; 0x84
 801ba22:	4604      	mov	r4, r0
 801ba24:	f853 5b04 	ldr.w	r5, [r3], #4
 801ba28:	9303      	str	r3, [sp, #12]
 801ba2a:	a805      	add	r0, sp, #20
 801ba2c:	f000 fdda 	bl	801c5e4 <_ZN8touchgfx12TextProviderC1Ev>
 801ba30:	6823      	ldr	r3, [r4, #0]
 801ba32:	4620      	mov	r0, r4
 801ba34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ba36:	4798      	blx	r3
 801ba38:	6823      	ldr	r3, [r4, #0]
 801ba3a:	4606      	mov	r6, r0
 801ba3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ba3e:	4620      	mov	r0, r4
 801ba40:	4798      	blx	r3
 801ba42:	4633      	mov	r3, r6
 801ba44:	4629      	mov	r1, r5
 801ba46:	9000      	str	r0, [sp, #0]
 801ba48:	9a03      	ldr	r2, [sp, #12]
 801ba4a:	a805      	add	r0, sp, #20
 801ba4c:	ad1c      	add	r5, sp, #112	; 0x70
 801ba4e:	f000 fe16 	bl	801c67e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ba52:	2100      	movs	r1, #0
 801ba54:	f845 1d60 	str.w	r1, [r5, #-96]!
 801ba58:	4622      	mov	r2, r4
 801ba5a:	462b      	mov	r3, r5
 801ba5c:	a805      	add	r0, sp, #20
 801ba5e:	f001 f909 	bl	801cc74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ba62:	26ff      	movs	r6, #255	; 0xff
 801ba64:	b1d8      	cbz	r0, 801ba9e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801ba66:	280a      	cmp	r0, #10
 801ba68:	d012      	beq.n	801ba90 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801ba6a:	9804      	ldr	r0, [sp, #16]
 801ba6c:	b180      	cbz	r0, 801ba90 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801ba6e:	7b47      	ldrb	r7, [r0, #13]
 801ba70:	7922      	ldrb	r2, [r4, #4]
 801ba72:	00fb      	lsls	r3, r7, #3
 801ba74:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ba78:	7a03      	ldrb	r3, [r0, #8]
 801ba7a:	430b      	orrs	r3, r1
 801ba7c:	0679      	lsls	r1, r7, #25
 801ba7e:	bf44      	itt	mi
 801ba80:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ba84:	b21b      	sxthmi	r3, r3
 801ba86:	1ad3      	subs	r3, r2, r3
 801ba88:	b2db      	uxtb	r3, r3
 801ba8a:	429e      	cmp	r6, r3
 801ba8c:	bf28      	it	cs
 801ba8e:	461e      	movcs	r6, r3
 801ba90:	462b      	mov	r3, r5
 801ba92:	4622      	mov	r2, r4
 801ba94:	2100      	movs	r1, #0
 801ba96:	a805      	add	r0, sp, #20
 801ba98:	f001 f8ec 	bl	801cc74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ba9c:	e7e2      	b.n	801ba64 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801ba9e:	4630      	mov	r0, r6
 801baa0:	b01c      	add	sp, #112	; 0x70
 801baa2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801baa6:	b003      	add	sp, #12
 801baa8:	4770      	bx	lr

0801baaa <_ZNK8touchgfx8Drawable10invalidateEv>:
 801baaa:	b513      	push	{r0, r1, r4, lr}
 801baac:	1d01      	adds	r1, r0, #4
 801baae:	4603      	mov	r3, r0
 801bab0:	c903      	ldmia	r1, {r0, r1}
 801bab2:	466a      	mov	r2, sp
 801bab4:	e882 0003 	stmia.w	r2, {r0, r1}
 801bab8:	2100      	movs	r1, #0
 801baba:	9100      	str	r1, [sp, #0]
 801babc:	6819      	ldr	r1, [r3, #0]
 801babe:	4618      	mov	r0, r3
 801bac0:	690c      	ldr	r4, [r1, #16]
 801bac2:	4611      	mov	r1, r2
 801bac4:	47a0      	blx	r4
 801bac6:	b002      	add	sp, #8
 801bac8:	bd10      	pop	{r4, pc}

0801baca <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801baca:	b538      	push	{r3, r4, r5, lr}
 801bacc:	680b      	ldr	r3, [r1, #0]
 801bace:	460c      	mov	r4, r1
 801bad0:	68db      	ldr	r3, [r3, #12]
 801bad2:	4605      	mov	r5, r0
 801bad4:	4798      	blx	r3
 801bad6:	6823      	ldr	r3, [r4, #0]
 801bad8:	4620      	mov	r0, r4
 801bada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801badc:	4629      	mov	r1, r5
 801bade:	4798      	blx	r3
 801bae0:	4628      	mov	r0, r5
 801bae2:	bd38      	pop	{r3, r4, r5, pc}

0801bae4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801bae4:	b410      	push	{r4}
 801bae6:	880a      	ldrh	r2, [r1, #0]
 801bae8:	8884      	ldrh	r4, [r0, #4]
 801baea:	4422      	add	r2, r4
 801baec:	800a      	strh	r2, [r1, #0]
 801baee:	88c4      	ldrh	r4, [r0, #6]
 801baf0:	884a      	ldrh	r2, [r1, #2]
 801baf2:	4422      	add	r2, r4
 801baf4:	804a      	strh	r2, [r1, #2]
 801baf6:	6940      	ldr	r0, [r0, #20]
 801baf8:	b120      	cbz	r0, 801bb04 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801bafa:	6803      	ldr	r3, [r0, #0]
 801bafc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb02:	4718      	bx	r3
 801bb04:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb08:	4770      	bx	lr

0801bb0a <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801bb0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb0c:	460b      	mov	r3, r1
 801bb0e:	b085      	sub	sp, #20
 801bb10:	4604      	mov	r4, r0
 801bb12:	b901      	cbnz	r1, 801bb16 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801bb14:	b322      	cbz	r2, 801bb60 <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 801bb16:	1d27      	adds	r7, r4, #4
 801bb18:	e897 0003 	ldmia.w	r7, {r0, r1}
 801bb1c:	466e      	mov	r6, sp
 801bb1e:	e886 0003 	stmia.w	r6, {r0, r1}
 801bb22:	88a1      	ldrh	r1, [r4, #4]
 801bb24:	88e5      	ldrh	r5, [r4, #6]
 801bb26:	4419      	add	r1, r3
 801bb28:	6823      	ldr	r3, [r4, #0]
 801bb2a:	442a      	add	r2, r5
 801bb2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb2e:	b209      	sxth	r1, r1
 801bb30:	4620      	mov	r0, r4
 801bb32:	b215      	sxth	r5, r2
 801bb34:	4798      	blx	r3
 801bb36:	6823      	ldr	r3, [r4, #0]
 801bb38:	4629      	mov	r1, r5
 801bb3a:	4620      	mov	r0, r4
 801bb3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb3e:	4798      	blx	r3
 801bb40:	e897 0003 	ldmia.w	r7, {r0, r1}
 801bb44:	ad02      	add	r5, sp, #8
 801bb46:	e885 0003 	stmia.w	r5, {r0, r1}
 801bb4a:	6960      	ldr	r0, [r4, #20]
 801bb4c:	b150      	cbz	r0, 801bb64 <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 801bb4e:	6803      	ldr	r3, [r0, #0]
 801bb50:	4631      	mov	r1, r6
 801bb52:	691b      	ldr	r3, [r3, #16]
 801bb54:	4798      	blx	r3
 801bb56:	6960      	ldr	r0, [r4, #20]
 801bb58:	6803      	ldr	r3, [r0, #0]
 801bb5a:	691b      	ldr	r3, [r3, #16]
 801bb5c:	4629      	mov	r1, r5
 801bb5e:	4798      	blx	r3
 801bb60:	b005      	add	sp, #20
 801bb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb64:	f7fe ffe2 	bl	801ab2c <_ZN8touchgfx11Application11getInstanceEv>
 801bb68:	6803      	ldr	r3, [r0, #0]
 801bb6a:	4631      	mov	r1, r6
 801bb6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bb6e:	4798      	blx	r3
 801bb70:	f7fe ffdc 	bl	801ab2c <_ZN8touchgfx11Application11getInstanceEv>
 801bb74:	6803      	ldr	r3, [r0, #0]
 801bb76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bb78:	e7f0      	b.n	801bb5c <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

0801bb7a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801bb7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bb7c:	8882      	ldrh	r2, [r0, #4]
 801bb7e:	880b      	ldrh	r3, [r1, #0]
 801bb80:	4413      	add	r3, r2
 801bb82:	800b      	strh	r3, [r1, #0]
 801bb84:	88c2      	ldrh	r2, [r0, #6]
 801bb86:	884b      	ldrh	r3, [r1, #2]
 801bb88:	4413      	add	r3, r2
 801bb8a:	4602      	mov	r2, r0
 801bb8c:	804b      	strh	r3, [r1, #2]
 801bb8e:	4605      	mov	r5, r0
 801bb90:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801bb94:	460c      	mov	r4, r1
 801bb96:	6851      	ldr	r1, [r2, #4]
 801bb98:	466b      	mov	r3, sp
 801bb9a:	c303      	stmia	r3!, {r0, r1}
 801bb9c:	4621      	mov	r1, r4
 801bb9e:	4668      	mov	r0, sp
 801bba0:	f7fa fa26 	bl	8015ff0 <_ZN8touchgfx4RectaNERKS0_>
 801bba4:	466b      	mov	r3, sp
 801bba6:	cb03      	ldmia	r3!, {r0, r1}
 801bba8:	6020      	str	r0, [r4, #0]
 801bbaa:	6061      	str	r1, [r4, #4]
 801bbac:	6968      	ldr	r0, [r5, #20]
 801bbae:	b128      	cbz	r0, 801bbbc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801bbb0:	6803      	ldr	r3, [r0, #0]
 801bbb2:	691b      	ldr	r3, [r3, #16]
 801bbb4:	4621      	mov	r1, r4
 801bbb6:	4798      	blx	r3
 801bbb8:	b003      	add	sp, #12
 801bbba:	bd30      	pop	{r4, r5, pc}
 801bbbc:	f7fe ffb6 	bl	801ab2c <_ZN8touchgfx11Application11getInstanceEv>
 801bbc0:	6803      	ldr	r3, [r0, #0]
 801bbc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bbc4:	e7f6      	b.n	801bbb4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801bbc6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801bbc6:	b570      	push	{r4, r5, r6, lr}
 801bbc8:	8882      	ldrh	r2, [r0, #4]
 801bbca:	880b      	ldrh	r3, [r1, #0]
 801bbcc:	4413      	add	r3, r2
 801bbce:	800b      	strh	r3, [r1, #0]
 801bbd0:	88c2      	ldrh	r2, [r0, #6]
 801bbd2:	884b      	ldrh	r3, [r1, #2]
 801bbd4:	460c      	mov	r4, r1
 801bbd6:	4413      	add	r3, r2
 801bbd8:	804b      	strh	r3, [r1, #2]
 801bbda:	4605      	mov	r5, r0
 801bbdc:	1d01      	adds	r1, r0, #4
 801bbde:	4620      	mov	r0, r4
 801bbe0:	f7fa fa06 	bl	8015ff0 <_ZN8touchgfx4RectaNERKS0_>
 801bbe4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801bbe8:	2b00      	cmp	r3, #0
 801bbea:	dd0b      	ble.n	801bc04 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bbec:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	dd07      	ble.n	801bc04 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bbf4:	6968      	ldr	r0, [r5, #20]
 801bbf6:	b128      	cbz	r0, 801bc04 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bbf8:	6803      	ldr	r3, [r0, #0]
 801bbfa:	4621      	mov	r1, r4
 801bbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bc02:	4718      	bx	r3
 801bc04:	bd70      	pop	{r4, r5, r6, pc}

0801bc06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801bc06:	b510      	push	{r4, lr}
 801bc08:	4604      	mov	r4, r0
 801bc0a:	4608      	mov	r0, r1
 801bc0c:	2300      	movs	r3, #0
 801bc0e:	8023      	strh	r3, [r4, #0]
 801bc10:	8063      	strh	r3, [r4, #2]
 801bc12:	6803      	ldr	r3, [r0, #0]
 801bc14:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bc18:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801bc1c:	80a1      	strh	r1, [r4, #4]
 801bc1e:	80e2      	strh	r2, [r4, #6]
 801bc20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc22:	4621      	mov	r1, r4
 801bc24:	4798      	blx	r3
 801bc26:	4620      	mov	r0, r4
 801bc28:	bd10      	pop	{r4, pc}
	...

0801bc2c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801bc2c:	b530      	push	{r4, r5, lr}
 801bc2e:	8083      	strh	r3, [r0, #4]
 801bc30:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801bc34:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801bc38:	7183      	strb	r3, [r0, #6]
 801bc3a:	79c3      	ldrb	r3, [r0, #7]
 801bc3c:	6101      	str	r1, [r0, #16]
 801bc3e:	f365 0306 	bfi	r3, r5, #0, #7
 801bc42:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801bc46:	8282      	strh	r2, [r0, #20]
 801bc48:	f365 13c7 	bfi	r3, r5, #7, #1
 801bc4c:	71c3      	strb	r3, [r0, #7]
 801bc4e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801bc52:	7203      	strb	r3, [r0, #8]
 801bc54:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801bc58:	7243      	strb	r3, [r0, #9]
 801bc5a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801bc5e:	8143      	strh	r3, [r0, #10]
 801bc60:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801bc64:	8183      	strh	r3, [r0, #12]
 801bc66:	4b01      	ldr	r3, [pc, #4]	; (801bc6c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801bc68:	6003      	str	r3, [r0, #0]
 801bc6a:	bd30      	pop	{r4, r5, pc}
 801bc6c:	08031018 	.word	0x08031018

0801bc70 <_ZNK8touchgfx9ConstFont4findEt>:
 801bc70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc72:	6904      	ldr	r4, [r0, #16]
 801bc74:	b3bc      	cbz	r4, 801bce6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bc76:	88a3      	ldrh	r3, [r4, #4]
 801bc78:	8a82      	ldrh	r2, [r0, #20]
 801bc7a:	1acb      	subs	r3, r1, r3
 801bc7c:	f102 32ff 	add.w	r2, r2, #4294967295
 801bc80:	d431      	bmi.n	801bce6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bc82:	4293      	cmp	r3, r2
 801bc84:	dd0c      	ble.n	801bca0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801bc86:	230e      	movs	r3, #14
 801bc88:	fb03 4302 	mla	r3, r3, r2, r4
 801bc8c:	889b      	ldrh	r3, [r3, #4]
 801bc8e:	1a5b      	subs	r3, r3, r1
 801bc90:	1ad3      	subs	r3, r2, r3
 801bc92:	429a      	cmp	r2, r3
 801bc94:	db27      	blt.n	801bce6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	bfbc      	itt	lt
 801bc9a:	2302      	movlt	r3, #2
 801bc9c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801bca0:	2500      	movs	r5, #0
 801bca2:	260e      	movs	r6, #14
 801bca4:	4295      	cmp	r5, r2
 801bca6:	dc1e      	bgt.n	801bce6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bca8:	fb06 4003 	mla	r0, r6, r3, r4
 801bcac:	8887      	ldrh	r7, [r0, #4]
 801bcae:	42b9      	cmp	r1, r7
 801bcb0:	d01a      	beq.n	801bce8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801bcb2:	d20d      	bcs.n	801bcd0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801bcb4:	1e5a      	subs	r2, r3, #1
 801bcb6:	4295      	cmp	r5, r2
 801bcb8:	dc15      	bgt.n	801bce6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bcba:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801bcbe:	1a5b      	subs	r3, r3, r1
 801bcc0:	1ad3      	subs	r3, r2, r3
 801bcc2:	429a      	cmp	r2, r3
 801bcc4:	db0f      	blt.n	801bce6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bcc6:	429d      	cmp	r5, r3
 801bcc8:	ddec      	ble.n	801bca4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801bcca:	1953      	adds	r3, r2, r5
 801bccc:	105b      	asrs	r3, r3, #1
 801bcce:	e7e9      	b.n	801bca4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801bcd0:	1c5d      	adds	r5, r3, #1
 801bcd2:	42aa      	cmp	r2, r5
 801bcd4:	db07      	blt.n	801bce6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bcd6:	8a43      	ldrh	r3, [r0, #18]
 801bcd8:	1acb      	subs	r3, r1, r3
 801bcda:	442b      	add	r3, r5
 801bcdc:	429d      	cmp	r5, r3
 801bcde:	dc02      	bgt.n	801bce6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bce0:	429a      	cmp	r2, r3
 801bce2:	dadf      	bge.n	801bca4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801bce4:	e7f1      	b.n	801bcca <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801bce6:	2000      	movs	r0, #0
 801bce8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bcea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801bcea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcec:	4604      	mov	r4, r0
 801bcee:	4617      	mov	r7, r2
 801bcf0:	461e      	mov	r6, r3
 801bcf2:	b911      	cbnz	r1, 801bcfa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801bcf4:	2500      	movs	r5, #0
 801bcf6:	4628      	mov	r0, r5
 801bcf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bcfa:	290a      	cmp	r1, #10
 801bcfc:	d0fa      	beq.n	801bcf4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bcfe:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801bd02:	4291      	cmp	r1, r2
 801bd04:	d0f6      	beq.n	801bcf4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bd06:	f242 020b 	movw	r2, #8203	; 0x200b
 801bd0a:	4291      	cmp	r1, r2
 801bd0c:	d0f2      	beq.n	801bcf4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bd0e:	f7ff ffaf 	bl	801bc70 <_ZNK8touchgfx9ConstFont4findEt>
 801bd12:	4605      	mov	r5, r0
 801bd14:	b950      	cbnz	r0, 801bd2c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801bd16:	6823      	ldr	r3, [r4, #0]
 801bd18:	4620      	mov	r0, r4
 801bd1a:	691b      	ldr	r3, [r3, #16]
 801bd1c:	4798      	blx	r3
 801bd1e:	4601      	mov	r1, r0
 801bd20:	4620      	mov	r0, r4
 801bd22:	f7ff ffa5 	bl	801bc70 <_ZNK8touchgfx9ConstFont4findEt>
 801bd26:	4605      	mov	r5, r0
 801bd28:	2800      	cmp	r0, #0
 801bd2a:	d0e3      	beq.n	801bcf4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bd2c:	6823      	ldr	r3, [r4, #0]
 801bd2e:	4629      	mov	r1, r5
 801bd30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bd32:	4620      	mov	r0, r4
 801bd34:	4798      	blx	r3
 801bd36:	6038      	str	r0, [r7, #0]
 801bd38:	6823      	ldr	r3, [r4, #0]
 801bd3a:	4620      	mov	r0, r4
 801bd3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bd3e:	4798      	blx	r3
 801bd40:	7030      	strb	r0, [r6, #0]
 801bd42:	e7d8      	b.n	801bcf6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801bd44 <_ZN8touchgfx6memsetEPvhm>:
 801bd44:	4402      	add	r2, r0
 801bd46:	4290      	cmp	r0, r2
 801bd48:	d002      	beq.n	801bd50 <_ZN8touchgfx6memsetEPvhm+0xc>
 801bd4a:	f800 1b01 	strb.w	r1, [r0], #1
 801bd4e:	e7fa      	b.n	801bd46 <_ZN8touchgfx6memsetEPvhm+0x2>
 801bd50:	4770      	bx	lr

0801bd52 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801bd52:	b538      	push	{r3, r4, r5, lr}
 801bd54:	4605      	mov	r5, r0
 801bd56:	f002 fcdf 	bl	801e718 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801bd5a:	4604      	mov	r4, r0
 801bd5c:	4628      	mov	r0, r5
 801bd5e:	f002 fc17 	bl	801e590 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801bd62:	2800      	cmp	r0, #0
 801bd64:	bf14      	ite	ne
 801bd66:	2002      	movne	r0, #2
 801bd68:	2000      	moveq	r0, #0
 801bd6a:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801bd6e:	b280      	uxth	r0, r0
 801bd70:	bd38      	pop	{r3, r4, r5, pc}

0801bd72 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801bd72:	b538      	push	{r3, r4, r5, lr}
 801bd74:	4605      	mov	r5, r0
 801bd76:	f002 fccf 	bl	801e718 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801bd7a:	4604      	mov	r4, r0
 801bd7c:	4628      	mov	r0, r5
 801bd7e:	f002 fc07 	bl	801e590 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801bd82:	2800      	cmp	r0, #0
 801bd84:	bf14      	ite	ne
 801bd86:	2002      	movne	r0, #2
 801bd88:	2000      	moveq	r0, #0
 801bd8a:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801bd8e:	f040 0001 	orr.w	r0, r0, #1
 801bd92:	b280      	uxth	r0, r0
 801bd94:	bd38      	pop	{r3, r4, r5, pc}

0801bd96 <_ZN8touchgfx4clzuEm>:
 801bd96:	4603      	mov	r3, r0
 801bd98:	b1c8      	cbz	r0, 801bdce <_ZN8touchgfx4clzuEm+0x38>
 801bd9a:	0c02      	lsrs	r2, r0, #16
 801bd9c:	0412      	lsls	r2, r2, #16
 801bd9e:	b9a2      	cbnz	r2, 801bdca <_ZN8touchgfx4clzuEm+0x34>
 801bda0:	0403      	lsls	r3, r0, #16
 801bda2:	2010      	movs	r0, #16
 801bda4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801bda8:	bf04      	itt	eq
 801bdaa:	021b      	lsleq	r3, r3, #8
 801bdac:	3008      	addeq	r0, #8
 801bdae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801bdb2:	bf04      	itt	eq
 801bdb4:	011b      	lsleq	r3, r3, #4
 801bdb6:	3004      	addeq	r0, #4
 801bdb8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801bdbc:	bf04      	itt	eq
 801bdbe:	009b      	lsleq	r3, r3, #2
 801bdc0:	3002      	addeq	r0, #2
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	db04      	blt.n	801bdd0 <_ZN8touchgfx4clzuEm+0x3a>
 801bdc6:	3001      	adds	r0, #1
 801bdc8:	4770      	bx	lr
 801bdca:	2000      	movs	r0, #0
 801bdcc:	e7ea      	b.n	801bda4 <_ZN8touchgfx4clzuEm+0xe>
 801bdce:	2020      	movs	r0, #32
 801bdd0:	4770      	bx	lr

0801bdd2 <_ZN8touchgfx7muldivuEmmmRm>:
 801bdd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdd6:	4680      	mov	r8, r0
 801bdd8:	460f      	mov	r7, r1
 801bdda:	4615      	mov	r5, r2
 801bddc:	461e      	mov	r6, r3
 801bdde:	f7ff ffda 	bl	801bd96 <_ZN8touchgfx4clzuEm>
 801bde2:	b998      	cbnz	r0, 801be0c <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801bde4:	4608      	mov	r0, r1
 801bde6:	f7ff ffd6 	bl	801bd96 <_ZN8touchgfx4clzuEm>
 801bdea:	2800      	cmp	r0, #0
 801bdec:	dd08      	ble.n	801be00 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801bdee:	4633      	mov	r3, r6
 801bdf0:	462a      	mov	r2, r5
 801bdf2:	4641      	mov	r1, r8
 801bdf4:	4638      	mov	r0, r7
 801bdf6:	f7ff ffec 	bl	801bdd2 <_ZN8touchgfx7muldivuEmmmRm>
 801bdfa:	b003      	add	sp, #12
 801bdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be00:	f04f 33ff 	mov.w	r3, #4294967295
 801be04:	6033      	str	r3, [r6, #0]
 801be06:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801be0a:	e7f6      	b.n	801bdfa <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801be0c:	fa31 f900 	lsrs.w	r9, r1, r0
 801be10:	fb01 f308 	mul.w	r3, r1, r8
 801be14:	d105      	bne.n	801be22 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801be16:	fbb3 f0f5 	udiv	r0, r3, r5
 801be1a:	fb05 3510 	mls	r5, r5, r0, r3
 801be1e:	6035      	str	r5, [r6, #0]
 801be20:	e7eb      	b.n	801bdfa <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801be22:	2301      	movs	r3, #1
 801be24:	fa08 fb00 	lsl.w	fp, r8, r0
 801be28:	fa03 f000 	lsl.w	r0, r3, r0
 801be2c:	3801      	subs	r0, #1
 801be2e:	462a      	mov	r2, r5
 801be30:	4633      	mov	r3, r6
 801be32:	4641      	mov	r1, r8
 801be34:	4038      	ands	r0, r7
 801be36:	f7ff ffcc 	bl	801bdd2 <_ZN8touchgfx7muldivuEmmmRm>
 801be3a:	fbbb faf5 	udiv	sl, fp, r5
 801be3e:	462a      	mov	r2, r5
 801be40:	4607      	mov	r7, r0
 801be42:	ab01      	add	r3, sp, #4
 801be44:	fb05 b11a 	mls	r1, r5, sl, fp
 801be48:	4648      	mov	r0, r9
 801be4a:	f7ff ffc2 	bl	801bdd2 <_ZN8touchgfx7muldivuEmmmRm>
 801be4e:	9b01      	ldr	r3, [sp, #4]
 801be50:	6832      	ldr	r2, [r6, #0]
 801be52:	fb09 f40a 	mul.w	r4, r9, sl
 801be56:	441a      	add	r2, r3
 801be58:	fbb2 f3f5 	udiv	r3, r2, r5
 801be5c:	441c      	add	r4, r3
 801be5e:	443c      	add	r4, r7
 801be60:	4420      	add	r0, r4
 801be62:	fb05 2513 	mls	r5, r5, r3, r2
 801be66:	e7da      	b.n	801be1e <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801be68 <_ZN8touchgfx6muldivElllRl>:
 801be68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801be6a:	2800      	cmp	r0, #0
 801be6c:	bfba      	itte	lt
 801be6e:	4240      	neglt	r0, r0
 801be70:	f04f 34ff 	movlt.w	r4, #4294967295
 801be74:	2401      	movge	r4, #1
 801be76:	2900      	cmp	r1, #0
 801be78:	bfbc      	itt	lt
 801be7a:	4249      	neglt	r1, r1
 801be7c:	4264      	neglt	r4, r4
 801be7e:	2a00      	cmp	r2, #0
 801be80:	bfb6      	itet	lt
 801be82:	4265      	neglt	r5, r4
 801be84:	4625      	movge	r5, r4
 801be86:	4252      	neglt	r2, r2
 801be88:	4288      	cmp	r0, r1
 801be8a:	461e      	mov	r6, r3
 801be8c:	bfc2      	ittt	gt
 801be8e:	4603      	movgt	r3, r0
 801be90:	4608      	movgt	r0, r1
 801be92:	4619      	movgt	r1, r3
 801be94:	ab01      	add	r3, sp, #4
 801be96:	f7ff ff9c 	bl	801bdd2 <_ZN8touchgfx7muldivuEmmmRm>
 801be9a:	9b01      	ldr	r3, [sp, #4]
 801be9c:	4368      	muls	r0, r5
 801be9e:	435c      	muls	r4, r3
 801bea0:	6034      	str	r4, [r6, #0]
 801bea2:	b002      	add	sp, #8
 801bea4:	bd70      	pop	{r4, r5, r6, pc}

0801bea6 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801bea6:	2000      	movs	r0, #0
 801bea8:	4770      	bx	lr

0801beaa <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801beaa:	2001      	movs	r0, #1
 801beac:	4770      	bx	lr

0801beae <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801beae:	2002      	movs	r0, #2
 801beb0:	4770      	bx	lr

0801beb2 <_ZN8touchgfx12GestureEventD1Ev>:
 801beb2:	4770      	bx	lr

0801beb4 <_ZN8touchgfx9DragEventD1Ev>:
 801beb4:	4770      	bx	lr

0801beb6 <_ZN8touchgfx10ClickEventD1Ev>:
 801beb6:	4770      	bx	lr

0801beb8 <_ZN8touchgfx10ClickEventD0Ev>:
 801beb8:	b510      	push	{r4, lr}
 801beba:	210c      	movs	r1, #12
 801bebc:	4604      	mov	r4, r0
 801bebe:	f00f fdf4 	bl	802baaa <_ZdlPvj>
 801bec2:	4620      	mov	r0, r4
 801bec4:	bd10      	pop	{r4, pc}

0801bec6 <_ZN8touchgfx9DragEventD0Ev>:
 801bec6:	b510      	push	{r4, lr}
 801bec8:	2110      	movs	r1, #16
 801beca:	4604      	mov	r4, r0
 801becc:	f00f fded 	bl	802baaa <_ZdlPvj>
 801bed0:	4620      	mov	r0, r4
 801bed2:	bd10      	pop	{r4, pc}

0801bed4 <_ZN8touchgfx12GestureEventD0Ev>:
 801bed4:	b510      	push	{r4, lr}
 801bed6:	210c      	movs	r1, #12
 801bed8:	4604      	mov	r4, r0
 801beda:	f00f fde6 	bl	802baaa <_ZdlPvj>
 801bede:	4620      	mov	r0, r4
 801bee0:	bd10      	pop	{r4, pc}
	...

0801bee4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801bee4:	b530      	push	{r4, r5, lr}
 801bee6:	460d      	mov	r5, r1
 801bee8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801beea:	b087      	sub	sp, #28
 801beec:	4604      	mov	r4, r0
 801beee:	b301      	cbz	r1, 801bf32 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801bef0:	a801      	add	r0, sp, #4
 801bef2:	f7ff fe88 	bl	801bc06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bef6:	892a      	ldrh	r2, [r5, #8]
 801bef8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801befc:	7928      	ldrb	r0, [r5, #4]
 801befe:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801bf02:	f88d 0010 	strb.w	r0, [sp, #16]
 801bf06:	1ad2      	subs	r2, r2, r3
 801bf08:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801bf0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801bf0c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801bf10:	441a      	add	r2, r3
 801bf12:	896b      	ldrh	r3, [r5, #10]
 801bf14:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801bf18:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bf1c:	1b5b      	subs	r3, r3, r5
 801bf1e:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801bf20:	442b      	add	r3, r5
 801bf22:	4d05      	ldr	r5, [pc, #20]	; (801bf38 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801bf24:	9503      	str	r5, [sp, #12]
 801bf26:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bf2a:	6803      	ldr	r3, [r0, #0]
 801bf2c:	a903      	add	r1, sp, #12
 801bf2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bf30:	4798      	blx	r3
 801bf32:	b007      	add	sp, #28
 801bf34:	bd30      	pop	{r4, r5, pc}
 801bf36:	bf00      	nop
 801bf38:	08031098 	.word	0x08031098

0801bf3c <_ZNK8touchgfx4Rect9intersectEss>:
 801bf3c:	b510      	push	{r4, lr}
 801bf3e:	f9b0 3000 	ldrsh.w	r3, [r0]
 801bf42:	428b      	cmp	r3, r1
 801bf44:	dc10      	bgt.n	801bf68 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801bf46:	8884      	ldrh	r4, [r0, #4]
 801bf48:	4423      	add	r3, r4
 801bf4a:	b21b      	sxth	r3, r3
 801bf4c:	4299      	cmp	r1, r3
 801bf4e:	da0b      	bge.n	801bf68 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801bf50:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801bf54:	4293      	cmp	r3, r2
 801bf56:	dc07      	bgt.n	801bf68 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801bf58:	88c0      	ldrh	r0, [r0, #6]
 801bf5a:	4418      	add	r0, r3
 801bf5c:	b200      	sxth	r0, r0
 801bf5e:	4282      	cmp	r2, r0
 801bf60:	bfac      	ite	ge
 801bf62:	2000      	movge	r0, #0
 801bf64:	2001      	movlt	r0, #1
 801bf66:	bd10      	pop	{r4, pc}
 801bf68:	2000      	movs	r0, #0
 801bf6a:	e7fc      	b.n	801bf66 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801bf6c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801bf6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf6e:	460c      	mov	r4, r1
 801bf70:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801bf72:	b089      	sub	sp, #36	; 0x24
 801bf74:	4605      	mov	r5, r0
 801bf76:	2900      	cmp	r1, #0
 801bf78:	d054      	beq.n	801c024 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801bf7a:	4668      	mov	r0, sp
 801bf7c:	f7ff fe43 	bl	801bc06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bf80:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801bf82:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801bf84:	8922      	ldrh	r2, [r4, #8]
 801bf86:	88e1      	ldrh	r1, [r4, #6]
 801bf88:	443a      	add	r2, r7
 801bf8a:	4431      	add	r1, r6
 801bf8c:	b212      	sxth	r2, r2
 801bf8e:	b209      	sxth	r1, r1
 801bf90:	4668      	mov	r0, sp
 801bf92:	f7ff ffd3 	bl	801bf3c <_ZNK8touchgfx4Rect9intersectEss>
 801bf96:	b1d0      	cbz	r0, 801bfce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801bf98:	89a2      	ldrh	r2, [r4, #12]
 801bf9a:	8961      	ldrh	r1, [r4, #10]
 801bf9c:	443a      	add	r2, r7
 801bf9e:	4431      	add	r1, r6
 801bfa0:	b212      	sxth	r2, r2
 801bfa2:	b209      	sxth	r1, r1
 801bfa4:	4668      	mov	r0, sp
 801bfa6:	f7ff ffc9 	bl	801bf3c <_ZNK8touchgfx4Rect9intersectEss>
 801bfaa:	4603      	mov	r3, r0
 801bfac:	b978      	cbnz	r0, 801bfce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801bfae:	4a1e      	ldr	r2, [pc, #120]	; (801c028 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801bfb0:	9204      	str	r2, [sp, #16]
 801bfb2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801bfb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bfb8:	2202      	movs	r2, #2
 801bfba:	f88d 2014 	strb.w	r2, [sp, #20]
 801bfbe:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bfc2:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bfc6:	6803      	ldr	r3, [r0, #0]
 801bfc8:	a904      	add	r1, sp, #16
 801bfca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bfcc:	4798      	blx	r3
 801bfce:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801bfd0:	a802      	add	r0, sp, #8
 801bfd2:	f7ff fe18 	bl	801bc06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bfd6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801bfda:	88e0      	ldrh	r0, [r4, #6]
 801bfdc:	8961      	ldrh	r1, [r4, #10]
 801bfde:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801bfe2:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801bfe6:	8923      	ldrh	r3, [r4, #8]
 801bfe8:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801bfea:	7927      	ldrb	r7, [r4, #4]
 801bfec:	f88d 7014 	strb.w	r7, [sp, #20]
 801bff0:	1a80      	subs	r0, r0, r2
 801bff2:	1a89      	subs	r1, r1, r2
 801bff4:	89a2      	ldrh	r2, [r4, #12]
 801bff6:	4c0d      	ldr	r4, [pc, #52]	; (801c02c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801bff8:	9404      	str	r4, [sp, #16]
 801bffa:	4460      	add	r0, ip
 801bffc:	eba3 030e 	sub.w	r3, r3, lr
 801c000:	eba2 020e 	sub.w	r2, r2, lr
 801c004:	f8ad 0016 	strh.w	r0, [sp, #22]
 801c008:	4433      	add	r3, r6
 801c00a:	4461      	add	r1, ip
 801c00c:	4432      	add	r2, r6
 801c00e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c010:	f8ad 101a 	strh.w	r1, [sp, #26]
 801c014:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c018:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c01c:	6803      	ldr	r3, [r0, #0]
 801c01e:	a904      	add	r1, sp, #16
 801c020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c022:	4798      	blx	r3
 801c024:	b009      	add	sp, #36	; 0x24
 801c026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c028:	08031070 	.word	0x08031070
 801c02c:	08031084 	.word	0x08031084

0801c030 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801c030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c034:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801c038:	790b      	ldrb	r3, [r1, #4]
 801c03a:	b0a1      	sub	sp, #132	; 0x84
 801c03c:	4604      	mov	r4, r0
 801c03e:	460d      	mov	r5, r1
 801c040:	f1b9 0f00 	cmp.w	r9, #0
 801c044:	d00f      	beq.n	801c066 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801c046:	2b00      	cmp	r3, #0
 801c048:	f040 80a0 	bne.w	801c18c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 801c04c:	b021      	add	sp, #132	; 0x84
 801c04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c052:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801c056:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801c05a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c05e:	1d20      	adds	r0, r4, #4
 801c060:	f7f9 ff14 	bl	8015e8c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801c064:	e092      	b.n	801c18c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 801c066:	2b00      	cmp	r3, #0
 801c068:	d1f0      	bne.n	801c04c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801c06a:	4b5e      	ldr	r3, [pc, #376]	; (801c1e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801c072:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801c076:	f1ba 0f03 	cmp.w	sl, #3
 801c07a:	ddea      	ble.n	801c052 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801c07c:	f1ba 0f0c 	cmp.w	sl, #12
 801c080:	f04f 0303 	mov.w	r3, #3
 801c084:	bfdc      	itt	le
 801c086:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801c08a:	fb92 f3f3 	sdivle	r3, r2, r3
 801c08e:	9301      	str	r3, [sp, #4]
 801c090:	4b55      	ldr	r3, [pc, #340]	; (801c1e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801c092:	4956      	ldr	r1, [pc, #344]	; (801c1ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801c094:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c098:	4b55      	ldr	r3, [pc, #340]	; (801c1f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801c09a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801c09e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c0a2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c0a6:	ab0e      	add	r3, sp, #56	; 0x38
 801c0a8:	2248      	movs	r2, #72	; 0x48
 801c0aa:	2600      	movs	r6, #0
 801c0ac:	4618      	mov	r0, r3
 801c0ae:	960a      	str	r6, [sp, #40]	; 0x28
 801c0b0:	f010 feac 	bl	802ce0c <memcpy>
 801c0b4:	f04f 32ff 	mov.w	r2, #4294967295
 801c0b8:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801c0bc:	f8cd a008 	str.w	sl, [sp, #8]
 801c0c0:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c0c4:	fb93 f3f2 	sdiv	r3, r3, r2
 801c0c8:	b29b      	uxth	r3, r3
 801c0ca:	46b3      	mov	fp, r6
 801c0cc:	9303      	str	r3, [sp, #12]
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	9309      	str	r3, [sp, #36]	; 0x24
 801c0d2:	9b07      	ldr	r3, [sp, #28]
 801c0d4:	9a03      	ldr	r2, [sp, #12]
 801c0d6:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801c0da:	88ef      	ldrh	r7, [r5, #6]
 801c0dc:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801c0e0:	fb13 f302 	smulbb	r3, r3, r2
 801c0e4:	b29b      	uxth	r3, r3
 801c0e6:	9304      	str	r3, [sp, #16]
 801c0e8:	9b07      	ldr	r3, [sp, #28]
 801c0ea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c0ee:	a80a      	add	r0, sp, #40	; 0x28
 801c0f0:	685b      	ldr	r3, [r3, #4]
 801c0f2:	fb13 f302 	smulbb	r3, r3, r2
 801c0f6:	b29b      	uxth	r3, r3
 801c0f8:	9305      	str	r3, [sp, #20]
 801c0fa:	9b04      	ldr	r3, [sp, #16]
 801c0fc:	441f      	add	r7, r3
 801c0fe:	9b05      	ldr	r3, [sp, #20]
 801c100:	4498      	add	r8, r3
 801c102:	b23f      	sxth	r7, r7
 801c104:	fa0f f888 	sxth.w	r8, r8
 801c108:	4642      	mov	r2, r8
 801c10a:	4639      	mov	r1, r7
 801c10c:	f7ff ff16 	bl	801bf3c <_ZNK8touchgfx4Rect9intersectEss>
 801c110:	b380      	cbz	r0, 801c174 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801c112:	4639      	mov	r1, r7
 801c114:	ab09      	add	r3, sp, #36	; 0x24
 801c116:	4642      	mov	r2, r8
 801c118:	1d20      	adds	r0, r4, #4
 801c11a:	f7f9 feb7 	bl	8015e8c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801c11e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c120:	b341      	cbz	r1, 801c174 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801c122:	4549      	cmp	r1, r9
 801c124:	d026      	beq.n	801c174 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801c126:	a80c      	add	r0, sp, #48	; 0x30
 801c128:	f7ff fd6d 	bl	801bc06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c12c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801c130:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801c134:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801c138:	2002      	movs	r0, #2
 801c13a:	fb92 f2f0 	sdiv	r2, r2, r0
 801c13e:	440a      	add	r2, r1
 801c140:	1a99      	subs	r1, r3, r2
 801c142:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801c146:	fb93 f3f0 	sdiv	r3, r3, r0
 801c14a:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801c14e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801c152:	4403      	add	r3, r0
 801c154:	1ad3      	subs	r3, r2, r3
 801c156:	435b      	muls	r3, r3
 801c158:	9a06      	ldr	r2, [sp, #24]
 801c15a:	fb01 3301 	mla	r3, r1, r1, r3
 801c15e:	4293      	cmp	r3, r2
 801c160:	d208      	bcs.n	801c174 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801c162:	9a04      	ldr	r2, [sp, #16]
 801c164:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c168:	86a2      	strh	r2, [r4, #52]	; 0x34
 801c16a:	9a05      	ldr	r2, [sp, #20]
 801c16c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801c170:	86e2      	strh	r2, [r4, #54]	; 0x36
 801c172:	9306      	str	r3, [sp, #24]
 801c174:	f10b 0b02 	add.w	fp, fp, #2
 801c178:	f1bb 0f08 	cmp.w	fp, #8
 801c17c:	dda7      	ble.n	801c0ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c17e:	9b02      	ldr	r3, [sp, #8]
 801c180:	4453      	add	r3, sl
 801c182:	9302      	str	r3, [sp, #8]
 801c184:	9b01      	ldr	r3, [sp, #4]
 801c186:	3601      	adds	r6, #1
 801c188:	42b3      	cmp	r3, r6
 801c18a:	d199      	bne.n	801c0c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 801c18c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c18e:	2900      	cmp	r1, #0
 801c190:	f43f af5c 	beq.w	801c04c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801c194:	a80c      	add	r0, sp, #48	; 0x30
 801c196:	f7ff fd36 	bl	801bc06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c19a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801c19e:	88ea      	ldrh	r2, [r5, #6]
 801c1a0:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801c1a4:	7929      	ldrb	r1, [r5, #4]
 801c1a6:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801c1aa:	1ad2      	subs	r2, r2, r3
 801c1ac:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c1ae:	441a      	add	r2, r3
 801c1b0:	892b      	ldrh	r3, [r5, #8]
 801c1b2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801c1b6:	1a1b      	subs	r3, r3, r0
 801c1b8:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801c1ba:	4403      	add	r3, r0
 801c1bc:	480d      	ldr	r0, [pc, #52]	; (801c1f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801c1be:	900e      	str	r0, [sp, #56]	; 0x38
 801c1c0:	2600      	movs	r6, #0
 801c1c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c1c4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801c1c8:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801c1cc:	6803      	ldr	r3, [r0, #0]
 801c1ce:	a90e      	add	r1, sp, #56	; 0x38
 801c1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c1d2:	4798      	blx	r3
 801c1d4:	792b      	ldrb	r3, [r5, #4]
 801c1d6:	2b00      	cmp	r3, #0
 801c1d8:	f43f af38 	beq.w	801c04c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801c1dc:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801c1e0:	e734      	b.n	801c04c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801c1e2:	bf00      	nop
 801c1e4:	200067d0 	.word	0x200067d0
 801c1e8:	200067c4 	.word	0x200067c4
 801c1ec:	0802ef44 	.word	0x0802ef44
 801c1f0:	200067c6 	.word	0x200067c6
 801c1f4:	08031070 	.word	0x08031070

0801c1f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c1f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c1fa:	4604      	mov	r4, r0
 801c1fc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801c200:	3201      	adds	r2, #1
 801c202:	d112      	bne.n	801c22a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801c204:	6803      	ldr	r3, [r0, #0]
 801c206:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c20a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c20e:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c212:	2500      	movs	r5, #0
 801c214:	9500      	str	r5, [sp, #0]
 801c216:	466d      	mov	r5, sp
 801c218:	4629      	mov	r1, r5
 801c21a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c220:	4798      	blx	r3
 801c222:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c226:	e884 0003 	stmia.w	r4, {r0, r1}
 801c22a:	4620      	mov	r0, r4
 801c22c:	b003      	add	sp, #12
 801c22e:	bd30      	pop	{r4, r5, pc}

0801c230 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c230:	b513      	push	{r0, r1, r4, lr}
 801c232:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c236:	3301      	adds	r3, #1
 801c238:	4604      	mov	r4, r0
 801c23a:	d109      	bne.n	801c250 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c23c:	4601      	mov	r1, r0
 801c23e:	4668      	mov	r0, sp
 801c240:	f7ff fce1 	bl	801bc06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c244:	f8bd 3000 	ldrh.w	r3, [sp]
 801c248:	8423      	strh	r3, [r4, #32]
 801c24a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c24e:	8463      	strh	r3, [r4, #34]	; 0x22
 801c250:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c254:	b002      	add	sp, #8
 801c256:	bd10      	pop	{r4, pc}

0801c258 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c258:	b513      	push	{r0, r1, r4, lr}
 801c25a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801c25e:	3301      	adds	r3, #1
 801c260:	4604      	mov	r4, r0
 801c262:	d109      	bne.n	801c278 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c264:	4601      	mov	r1, r0
 801c266:	4668      	mov	r0, sp
 801c268:	f7ff fccd 	bl	801bc06 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c26c:	f8bd 3000 	ldrh.w	r3, [sp]
 801c270:	8423      	strh	r3, [r4, #32]
 801c272:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c276:	8463      	strh	r3, [r4, #34]	; 0x22
 801c278:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801c27c:	b002      	add	sp, #8
 801c27e:	bd10      	pop	{r4, pc}

0801c280 <_ZN8touchgfx6ScreenC1Ev>:
 801c280:	b570      	push	{r4, r5, r6, lr}
 801c282:	4605      	mov	r5, r0
 801c284:	4b16      	ldr	r3, [pc, #88]	; (801c2e0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801c286:	f845 3b04 	str.w	r3, [r5], #4
 801c28a:	2300      	movs	r3, #0
 801c28c:	8103      	strh	r3, [r0, #8]
 801c28e:	8143      	strh	r3, [r0, #10]
 801c290:	8183      	strh	r3, [r0, #12]
 801c292:	81c3      	strh	r3, [r0, #14]
 801c294:	8203      	strh	r3, [r0, #16]
 801c296:	8243      	strh	r3, [r0, #18]
 801c298:	8283      	strh	r3, [r0, #20]
 801c29a:	82c3      	strh	r3, [r0, #22]
 801c29c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801c2a0:	6203      	str	r3, [r0, #32]
 801c2a2:	8483      	strh	r3, [r0, #36]	; 0x24
 801c2a4:	84c3      	strh	r3, [r0, #38]	; 0x26
 801c2a6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801c2aa:	4a0e      	ldr	r2, [pc, #56]	; (801c2e4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801c2ac:	6343      	str	r3, [r0, #52]	; 0x34
 801c2ae:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801c2b2:	4b0d      	ldr	r3, [pc, #52]	; (801c2e8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c2b4:	6042      	str	r2, [r0, #4]
 801c2b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c2ba:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801c2bc:	4a0b      	ldr	r2, [pc, #44]	; (801c2ec <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c2be:	4604      	mov	r4, r0
 801c2c0:	2101      	movs	r1, #1
 801c2c2:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801c2c6:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801c2ca:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c2ce:	4628      	mov	r0, r5
 801c2d0:	4798      	blx	r3
 801c2d2:	6863      	ldr	r3, [r4, #4]
 801c2d4:	4628      	mov	r0, r5
 801c2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c2d8:	4631      	mov	r1, r6
 801c2da:	4798      	blx	r3
 801c2dc:	4620      	mov	r0, r4
 801c2de:	bd70      	pop	{r4, r5, r6, pc}
 801c2e0:	080310ac 	.word	0x080310ac
 801c2e4:	0802fc4c 	.word	0x0802fc4c
 801c2e8:	200067c6 	.word	0x200067c6
 801c2ec:	200067c4 	.word	0x200067c4

0801c2f0 <_ZN8touchgfx6Screen4drawEv>:
 801c2f0:	b507      	push	{r0, r1, r2, lr}
 801c2f2:	4b09      	ldr	r3, [pc, #36]	; (801c318 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801c2f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c2f8:	4b08      	ldr	r3, [pc, #32]	; (801c31c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801c2fa:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c2fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c302:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c306:	6803      	ldr	r3, [r0, #0]
 801c308:	2100      	movs	r1, #0
 801c30a:	9100      	str	r1, [sp, #0]
 801c30c:	689b      	ldr	r3, [r3, #8]
 801c30e:	4669      	mov	r1, sp
 801c310:	4798      	blx	r3
 801c312:	b003      	add	sp, #12
 801c314:	f85d fb04 	ldr.w	pc, [sp], #4
 801c318:	200067c4 	.word	0x200067c4
 801c31c:	200067c6 	.word	0x200067c6

0801c320 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801c320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c324:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c328:	2b00      	cmp	r3, #0
 801c32a:	b089      	sub	sp, #36	; 0x24
 801c32c:	4680      	mov	r8, r0
 801c32e:	460c      	mov	r4, r1
 801c330:	4615      	mov	r5, r2
 801c332:	dd0e      	ble.n	801c352 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c334:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c338:	2b00      	cmp	r3, #0
 801c33a:	dd0a      	ble.n	801c352 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c33c:	4628      	mov	r0, r5
 801c33e:	f7ff ff5b 	bl	801c1f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c342:	4621      	mov	r1, r4
 801c344:	f7fb fb52 	bl	80179ec <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c348:	69eb      	ldr	r3, [r5, #28]
 801c34a:	b928      	cbnz	r0, 801c358 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801c34c:	461d      	mov	r5, r3
 801c34e:	2b00      	cmp	r3, #0
 801c350:	d1f4      	bne.n	801c33c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801c352:	b009      	add	sp, #36	; 0x24
 801c354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c358:	ae04      	add	r6, sp, #16
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	f000 80b5 	beq.w	801c4ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c360:	682b      	ldr	r3, [r5, #0]
 801c362:	4629      	mov	r1, r5
 801c364:	68db      	ldr	r3, [r3, #12]
 801c366:	a802      	add	r0, sp, #8
 801c368:	4798      	blx	r3
 801c36a:	4628      	mov	r0, r5
 801c36c:	f7ff ff60 	bl	801c230 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c370:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801c374:	4407      	add	r7, r0
 801c376:	4628      	mov	r0, r5
 801c378:	f7ff ff6e 	bl	801c258 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c37c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c380:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801c384:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c388:	4418      	add	r0, r3
 801c38a:	4621      	mov	r1, r4
 801c38c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c390:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c394:	b23f      	sxth	r7, r7
 801c396:	4630      	mov	r0, r6
 801c398:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c39c:	f8ad 7010 	strh.w	r7, [sp, #16]
 801c3a0:	f7f9 fe26 	bl	8015ff0 <_ZN8touchgfx4RectaNERKS0_>
 801c3a4:	4628      	mov	r0, r5
 801c3a6:	f7ff ff27 	bl	801c1f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c3aa:	4602      	mov	r2, r0
 801c3ac:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c3b0:	ab06      	add	r3, sp, #24
 801c3b2:	e883 0003 	stmia.w	r3, {r0, r1}
 801c3b6:	4611      	mov	r1, r2
 801c3b8:	4618      	mov	r0, r3
 801c3ba:	f7f9 fe19 	bl	8015ff0 <_ZN8touchgfx4RectaNERKS0_>
 801c3be:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c3c2:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c3c6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801c3ca:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801c3ce:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801c3d2:	4299      	cmp	r1, r3
 801c3d4:	d10b      	bne.n	801c3ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c3d6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c3da:	4552      	cmp	r2, sl
 801c3dc:	d107      	bne.n	801c3ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c3de:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c3e2:	455a      	cmp	r2, fp
 801c3e4:	d103      	bne.n	801c3ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c3e6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c3ea:	454a      	cmp	r2, r9
 801c3ec:	d06d      	beq.n	801c4ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c3ee:	f1bb 0f00 	cmp.w	fp, #0
 801c3f2:	dd65      	ble.n	801c4c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c3f4:	f1b9 0f00 	cmp.w	r9, #0
 801c3f8:	dd62      	ble.n	801c4c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c3fa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c3fe:	fa1f f08a 	uxth.w	r0, sl
 801c402:	4552      	cmp	r2, sl
 801c404:	9000      	str	r0, [sp, #0]
 801c406:	da12      	bge.n	801c42e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801c408:	9301      	str	r3, [sp, #4]
 801c40a:	9b00      	ldr	r3, [sp, #0]
 801c40c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c410:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c414:	1a9a      	subs	r2, r3, r2
 801c416:	f8ad 1010 	strh.w	r1, [sp, #16]
 801c41a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c41e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801c422:	69ea      	ldr	r2, [r5, #28]
 801c424:	4631      	mov	r1, r6
 801c426:	4640      	mov	r0, r8
 801c428:	f7ff ff7a 	bl	801c320 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c42c:	9b01      	ldr	r3, [sp, #4]
 801c42e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c432:	429a      	cmp	r2, r3
 801c434:	b29f      	uxth	r7, r3
 801c436:	da0d      	bge.n	801c454 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801c438:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c43c:	1aba      	subs	r2, r7, r2
 801c43e:	f8ad a012 	strh.w	sl, [sp, #18]
 801c442:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c446:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c44a:	69ea      	ldr	r2, [r5, #28]
 801c44c:	4631      	mov	r1, r6
 801c44e:	4640      	mov	r0, r8
 801c450:	f7ff ff66 	bl	801c320 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c454:	8822      	ldrh	r2, [r4, #0]
 801c456:	88a3      	ldrh	r3, [r4, #4]
 801c458:	445f      	add	r7, fp
 801c45a:	4413      	add	r3, r2
 801c45c:	b29b      	uxth	r3, r3
 801c45e:	b2bf      	uxth	r7, r7
 801c460:	b23a      	sxth	r2, r7
 801c462:	b219      	sxth	r1, r3
 801c464:	4291      	cmp	r1, r2
 801c466:	dd0d      	ble.n	801c484 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801c468:	1bdb      	subs	r3, r3, r7
 801c46a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c46e:	f8ad a012 	strh.w	sl, [sp, #18]
 801c472:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c476:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c47a:	69ea      	ldr	r2, [r5, #28]
 801c47c:	4631      	mov	r1, r6
 801c47e:	4640      	mov	r0, r8
 801c480:	f7ff ff4e 	bl	801c320 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c484:	88e2      	ldrh	r2, [r4, #6]
 801c486:	8863      	ldrh	r3, [r4, #2]
 801c488:	4413      	add	r3, r2
 801c48a:	9a00      	ldr	r2, [sp, #0]
 801c48c:	444a      	add	r2, r9
 801c48e:	b29b      	uxth	r3, r3
 801c490:	fa1f f982 	uxth.w	r9, r2
 801c494:	fa0f f289 	sxth.w	r2, r9
 801c498:	b219      	sxth	r1, r3
 801c49a:	428a      	cmp	r2, r1
 801c49c:	da15      	bge.n	801c4ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c49e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c4a2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c4a6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c4aa:	eba3 0309 	sub.w	r3, r3, r9
 801c4ae:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c4b2:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c4b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c4ba:	69ea      	ldr	r2, [r5, #28]
 801c4bc:	4631      	mov	r1, r6
 801c4be:	e001      	b.n	801c4c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801c4c0:	69ea      	ldr	r2, [r5, #28]
 801c4c2:	4621      	mov	r1, r4
 801c4c4:	4640      	mov	r0, r8
 801c4c6:	f7ff ff2b 	bl	801c320 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c4ca:	4628      	mov	r0, r5
 801c4cc:	f7ff fe94 	bl	801c1f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c4d0:	6861      	ldr	r1, [r4, #4]
 801c4d2:	4602      	mov	r2, r0
 801c4d4:	6820      	ldr	r0, [r4, #0]
 801c4d6:	4633      	mov	r3, r6
 801c4d8:	c303      	stmia	r3!, {r0, r1}
 801c4da:	4611      	mov	r1, r2
 801c4dc:	4630      	mov	r0, r6
 801c4de:	f7f9 fd87 	bl	8015ff0 <_ZN8touchgfx4RectaNERKS0_>
 801c4e2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c4e6:	2b00      	cmp	r3, #0
 801c4e8:	f77f af33 	ble.w	801c352 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c4ec:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	f77f af2e 	ble.w	801c352 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c4f6:	4628      	mov	r0, r5
 801c4f8:	f7ff fe9a 	bl	801c230 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c4fc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c500:	1a18      	subs	r0, r3, r0
 801c502:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c506:	4628      	mov	r0, r5
 801c508:	f7ff fea6 	bl	801c258 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c50c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c510:	1a18      	subs	r0, r3, r0
 801c512:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c516:	682b      	ldr	r3, [r5, #0]
 801c518:	4631      	mov	r1, r6
 801c51a:	689b      	ldr	r3, [r3, #8]
 801c51c:	4628      	mov	r0, r5
 801c51e:	4798      	blx	r3
 801c520:	e717      	b.n	801c352 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801c522 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801c522:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c524:	aa02      	add	r2, sp, #8
 801c526:	2300      	movs	r3, #0
 801c528:	f842 3d04 	str.w	r3, [r2, #-4]!
 801c52c:	4604      	mov	r4, r0
 801c52e:	3004      	adds	r0, #4
 801c530:	460d      	mov	r5, r1
 801c532:	f7f9 fe35 	bl	80161a0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801c536:	9a01      	ldr	r2, [sp, #4]
 801c538:	b11a      	cbz	r2, 801c542 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801c53a:	4629      	mov	r1, r5
 801c53c:	4620      	mov	r0, r4
 801c53e:	f7ff feef 	bl	801c320 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c542:	b003      	add	sp, #12
 801c544:	bd30      	pop	{r4, r5, pc}

0801c546 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801c546:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c548:	4602      	mov	r2, r0
 801c54a:	4604      	mov	r4, r0
 801c54c:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801c550:	460d      	mov	r5, r1
 801c552:	6851      	ldr	r1, [r2, #4]
 801c554:	466b      	mov	r3, sp
 801c556:	c303      	stmia	r3!, {r0, r1}
 801c558:	4629      	mov	r1, r5
 801c55a:	4668      	mov	r0, sp
 801c55c:	f7f9 fd48 	bl	8015ff0 <_ZN8touchgfx4RectaNERKS0_>
 801c560:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801c564:	4669      	mov	r1, sp
 801c566:	b123      	cbz	r3, 801c572 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801c568:	4620      	mov	r0, r4
 801c56a:	f7ff ffda 	bl	801c522 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801c56e:	b003      	add	sp, #12
 801c570:	bd30      	pop	{r4, r5, pc}
 801c572:	1d20      	adds	r0, r4, #4
 801c574:	f7f9 fddb 	bl	801612e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801c578:	e7f9      	b.n	801c56e <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801c57a <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801c57a:	680a      	ldr	r2, [r1, #0]
 801c57c:	460b      	mov	r3, r1
 801c57e:	6992      	ldr	r2, [r2, #24]
 801c580:	1d01      	adds	r1, r0, #4
 801c582:	4618      	mov	r0, r3
 801c584:	4710      	bx	r2

0801c586 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801c586:	b510      	push	{r4, lr}
 801c588:	4298      	cmp	r0, r3
 801c58a:	eb01 0402 	add.w	r4, r1, r2
 801c58e:	b224      	sxth	r4, r4
 801c590:	d226      	bcs.n	801c5e0 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x5a>
 801c592:	b32b      	cbz	r3, 801c5e0 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x5a>
 801c594:	ee07 2a90 	vmov	s15, r2
 801c598:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c59c:	ee07 0a90 	vmov	s15, r0
 801c5a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c5a4:	ee07 3a90 	vmov	s15, r3
 801c5a8:	ee67 6a26 	vmul.f32	s13, s14, s13
 801c5ac:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801c5b0:	ee07 1a90 	vmov	s15, r1
 801c5b4:	ee86 7a86 	vdiv.f32	s14, s13, s12
 801c5b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c5bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c5c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801c5c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5cc:	bfcc      	ite	gt
 801c5ce:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801c5d2:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801c5d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c5da:	ee17 3a90 	vmov	r3, s15
 801c5de:	b21c      	sxth	r4, r3
 801c5e0:	4620      	mov	r0, r4
 801c5e2:	bd10      	pop	{r4, pc}

0801c5e4 <_ZN8touchgfx12TextProviderC1Ev>:
 801c5e4:	b538      	push	{r3, r4, r5, lr}
 801c5e6:	2500      	movs	r5, #0
 801c5e8:	4604      	mov	r4, r0
 801c5ea:	e9c0 5500 	strd	r5, r5, [r0]
 801c5ee:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801c5f2:	7405      	strb	r5, [r0, #16]
 801c5f4:	82c5      	strh	r5, [r0, #22]
 801c5f6:	8305      	strh	r5, [r0, #24]
 801c5f8:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801c5fa:	8605      	strh	r5, [r0, #48]	; 0x30
 801c5fc:	86c5      	strh	r5, [r0, #54]	; 0x36
 801c5fe:	8705      	strh	r5, [r0, #56]	; 0x38
 801c600:	e9c0 550f 	strd	r5, r5, [r0, #60]	; 0x3c
 801c604:	220e      	movs	r2, #14
 801c606:	4629      	mov	r1, r5
 801c608:	3044      	adds	r0, #68	; 0x44
 801c60a:	f010 fc0d 	bl	802ce28 <memset>
 801c60e:	2301      	movs	r3, #1
 801c610:	4620      	mov	r0, r4
 801c612:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 801c616:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801c61a:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 801c61e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801c622:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 801c626:	f7f6 fd27 	bl	8013078 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801c62a:	4620      	mov	r0, r4
 801c62c:	bd38      	pop	{r3, r4, r5, pc}

0801c62e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801c62e:	b530      	push	{r4, r5, lr}
 801c630:	2500      	movs	r5, #0
 801c632:	2401      	movs	r4, #1
 801c634:	6843      	ldr	r3, [r0, #4]
 801c636:	b913      	cbnz	r3, 801c63e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801c638:	6803      	ldr	r3, [r0, #0]
 801c63a:	b1f3      	cbz	r3, 801c67a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801c63c:	6043      	str	r3, [r0, #4]
 801c63e:	7c03      	ldrb	r3, [r0, #16]
 801c640:	b143      	cbz	r3, 801c654 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801c642:	68c3      	ldr	r3, [r0, #12]
 801c644:	b12b      	cbz	r3, 801c652 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c646:	881a      	ldrh	r2, [r3, #0]
 801c648:	b11a      	cbz	r2, 801c652 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c64a:	1c9a      	adds	r2, r3, #2
 801c64c:	60c2      	str	r2, [r0, #12]
 801c64e:	8818      	ldrh	r0, [r3, #0]
 801c650:	bd30      	pop	{r4, r5, pc}
 801c652:	7405      	strb	r5, [r0, #16]
 801c654:	6843      	ldr	r3, [r0, #4]
 801c656:	8819      	ldrh	r1, [r3, #0]
 801c658:	b179      	cbz	r1, 801c67a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801c65a:	1c9a      	adds	r2, r3, #2
 801c65c:	2902      	cmp	r1, #2
 801c65e:	6042      	str	r2, [r0, #4]
 801c660:	d1f5      	bne.n	801c64e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801c662:	6883      	ldr	r3, [r0, #8]
 801c664:	1d1a      	adds	r2, r3, #4
 801c666:	6082      	str	r2, [r0, #8]
 801c668:	681b      	ldr	r3, [r3, #0]
 801c66a:	60c3      	str	r3, [r0, #12]
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	d0e1      	beq.n	801c634 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c670:	881b      	ldrh	r3, [r3, #0]
 801c672:	2b00      	cmp	r3, #0
 801c674:	d0de      	beq.n	801c634 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c676:	7404      	strb	r4, [r0, #16]
 801c678:	e7dc      	b.n	801c634 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c67a:	2000      	movs	r0, #0
 801c67c:	e7e8      	b.n	801c650 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801c67e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801c67e:	b410      	push	{r4}
 801c680:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c682:	9b01      	ldr	r3, [sp, #4]
 801c684:	6403      	str	r3, [r0, #64]	; 0x40
 801c686:	2300      	movs	r3, #0
 801c688:	6082      	str	r2, [r0, #8]
 801c68a:	6001      	str	r1, [r0, #0]
 801c68c:	6043      	str	r3, [r0, #4]
 801c68e:	60c3      	str	r3, [r0, #12]
 801c690:	7403      	strb	r3, [r0, #16]
 801c692:	8603      	strh	r3, [r0, #48]	; 0x30
 801c694:	8303      	strh	r3, [r0, #24]
 801c696:	8703      	strh	r3, [r0, #56]	; 0x38
 801c698:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c69c:	f7f6 bcec 	b.w	8013078 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801c6a0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801c6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c6a2:	4605      	mov	r5, r0
 801c6a4:	4608      	mov	r0, r1
 801c6a6:	b1e9      	cbz	r1, 801c6e4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801c6a8:	f105 0444 	add.w	r4, r5, #68	; 0x44
 801c6ac:	460b      	mov	r3, r1
 801c6ae:	f101 0708 	add.w	r7, r1, #8
 801c6b2:	4622      	mov	r2, r4
 801c6b4:	6818      	ldr	r0, [r3, #0]
 801c6b6:	6859      	ldr	r1, [r3, #4]
 801c6b8:	4626      	mov	r6, r4
 801c6ba:	c603      	stmia	r6!, {r0, r1}
 801c6bc:	3308      	adds	r3, #8
 801c6be:	42bb      	cmp	r3, r7
 801c6c0:	4634      	mov	r4, r6
 801c6c2:	d1f7      	bne.n	801c6b4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801c6c4:	6818      	ldr	r0, [r3, #0]
 801c6c6:	6030      	str	r0, [r6, #0]
 801c6c8:	889b      	ldrh	r3, [r3, #4]
 801c6ca:	80b3      	strh	r3, [r6, #4]
 801c6cc:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 801c6d0:	015b      	lsls	r3, r3, #5
 801c6d2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c6d6:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 801c6da:	430b      	orrs	r3, r1
 801c6dc:	425b      	negs	r3, r3
 801c6de:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
 801c6e2:	4610      	mov	r0, r2
 801c6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c6e6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801c6e6:	b538      	push	{r3, r4, r5, lr}
 801c6e8:	460c      	mov	r4, r1
 801c6ea:	6811      	ldr	r1, [r2, #0]
 801c6ec:	4610      	mov	r0, r2
 801c6ee:	68cd      	ldr	r5, [r1, #12]
 801c6f0:	4619      	mov	r1, r3
 801c6f2:	47a8      	blx	r5
 801c6f4:	2800      	cmp	r0, #0
 801c6f6:	bf08      	it	eq
 801c6f8:	4620      	moveq	r0, r4
 801c6fa:	bd38      	pop	{r3, r4, r5, pc}

0801c6fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801c6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6fe:	4604      	mov	r4, r0
 801c700:	4615      	mov	r5, r2
 801c702:	4608      	mov	r0, r1
 801c704:	b93a      	cbnz	r2, 801c716 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801c706:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801c70a:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
 801c70e:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 801c712:	4628      	mov	r0, r5
 801c714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c716:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801c71a:	8893      	ldrh	r3, [r2, #4]
 801c71c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801c720:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c724:	79ee      	ldrb	r6, [r5, #7]
 801c726:	4316      	orrs	r6, r2
 801c728:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801c72c:	189a      	adds	r2, r3, r2
 801c72e:	b291      	uxth	r1, r2
 801c730:	291d      	cmp	r1, #29
 801c732:	b2b7      	uxth	r7, r6
 801c734:	f200 8083 	bhi.w	801c83e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801c738:	2201      	movs	r2, #1
 801c73a:	408a      	lsls	r2, r1
 801c73c:	4978      	ldr	r1, [pc, #480]	; (801c920 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801c73e:	420a      	tst	r2, r1
 801c740:	ea4f 06e6 	mov.w	r6, r6, asr #3
 801c744:	d12d      	bne.n	801c7a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801c746:	f412 7f60 	tst.w	r2, #896	; 0x380
 801c74a:	d078      	beq.n	801c83e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801c74c:	f104 0244 	add.w	r2, r4, #68	; 0x44
 801c750:	462b      	mov	r3, r5
 801c752:	f105 0e08 	add.w	lr, r5, #8
 801c756:	4615      	mov	r5, r2
 801c758:	6818      	ldr	r0, [r3, #0]
 801c75a:	6859      	ldr	r1, [r3, #4]
 801c75c:	4694      	mov	ip, r2
 801c75e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c762:	3308      	adds	r3, #8
 801c764:	4573      	cmp	r3, lr
 801c766:	4662      	mov	r2, ip
 801c768:	d1f6      	bne.n	801c758 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5c>
 801c76a:	6818      	ldr	r0, [r3, #0]
 801c76c:	f8cc 0000 	str.w	r0, [ip]
 801c770:	889b      	ldrh	r3, [r3, #4]
 801c772:	f8ac 3004 	strh.w	r3, [ip, #4]
 801c776:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 801c77a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 801c77e:	b2b3      	uxth	r3, r6
 801c780:	1aca      	subs	r2, r1, r3
 801c782:	b292      	uxth	r2, r2
 801c784:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
 801c788:	10d2      	asrs	r2, r2, #3
 801c78a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801c78e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801c792:	4302      	orrs	r2, r0
 801c794:	1bcf      	subs	r7, r1, r7
 801c796:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 801c79a:	1afb      	subs	r3, r7, r3
 801c79c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 801c7a0:	e7b7      	b.n	801c712 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c7a2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c7a4:	b92b      	cbnz	r3, 801c7b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801c7a6:	4b5f      	ldr	r3, [pc, #380]	; (801c924 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801c7a8:	4a5f      	ldr	r2, [pc, #380]	; (801c928 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801c7aa:	4860      	ldr	r0, [pc, #384]	; (801c92c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801c7ac:	21bf      	movs	r1, #191	; 0xbf
 801c7ae:	f00f ff9b 	bl	802c6e8 <__assert_func>
 801c7b2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801c7b4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c7b8:	8b59      	ldrh	r1, [r3, #26]
 801c7ba:	f640 6333 	movw	r3, #3635	; 0xe33
 801c7be:	4299      	cmp	r1, r3
 801c7c0:	d110      	bne.n	801c7e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801c7c2:	6803      	ldr	r3, [r0, #0]
 801c7c4:	68db      	ldr	r3, [r3, #12]
 801c7c6:	4798      	blx	r3
 801c7c8:	7b41      	ldrb	r1, [r0, #13]
 801c7ca:	00cb      	lsls	r3, r1, #3
 801c7cc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c7d0:	7a03      	ldrb	r3, [r0, #8]
 801c7d2:	0648      	lsls	r0, r1, #25
 801c7d4:	ea43 0302 	orr.w	r3, r3, r2
 801c7d8:	bf44      	itt	mi
 801c7da:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c7de:	b21b      	sxthmi	r3, r3
 801c7e0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c7e4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 801c7e8:	443b      	add	r3, r7
 801c7ea:	4433      	add	r3, r6
 801c7ec:	b29b      	uxth	r3, r3
 801c7ee:	f104 0644 	add.w	r6, r4, #68	; 0x44
 801c7f2:	462a      	mov	r2, r5
 801c7f4:	f105 0c08 	add.w	ip, r5, #8
 801c7f8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c7fc:	4635      	mov	r5, r6
 801c7fe:	6810      	ldr	r0, [r2, #0]
 801c800:	6851      	ldr	r1, [r2, #4]
 801c802:	4637      	mov	r7, r6
 801c804:	c703      	stmia	r7!, {r0, r1}
 801c806:	3208      	adds	r2, #8
 801c808:	4562      	cmp	r2, ip
 801c80a:	463e      	mov	r6, r7
 801c80c:	d1f7      	bne.n	801c7fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801c80e:	6810      	ldr	r0, [r2, #0]
 801c810:	6038      	str	r0, [r7, #0]
 801c812:	8892      	ldrh	r2, [r2, #4]
 801c814:	80ba      	strh	r2, [r7, #4]
 801c816:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801c81a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801c81e:	10db      	asrs	r3, r3, #3
 801c820:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c824:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c828:	4313      	orrs	r3, r2
 801c82a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801c82e:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 801c832:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 801c836:	1a9b      	subs	r3, r3, r2
 801c838:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c83c:	e769      	b.n	801c712 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c83e:	f023 0204 	bic.w	r2, r3, #4
 801c842:	f640 611b 	movw	r1, #3611	; 0xe1b
 801c846:	428a      	cmp	r2, r1
 801c848:	d003      	beq.n	801c852 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801c84a:	f640 621d 	movw	r2, #3613	; 0xe1d
 801c84e:	4293      	cmp	r3, r2
 801c850:	d120      	bne.n	801c894 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x198>
 801c852:	3b01      	subs	r3, #1
 801c854:	4602      	mov	r2, r0
 801c856:	b29b      	uxth	r3, r3
 801c858:	4629      	mov	r1, r5
 801c85a:	4620      	mov	r0, r4
 801c85c:	f7ff ff43 	bl	801c6e6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c860:	7b41      	ldrb	r1, [r0, #13]
 801c862:	00cb      	lsls	r3, r1, #3
 801c864:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c868:	7a03      	ldrb	r3, [r0, #8]
 801c86a:	0649      	lsls	r1, r1, #25
 801c86c:	ea43 0302 	orr.w	r3, r3, r2
 801c870:	bf44      	itt	mi
 801c872:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c876:	b21b      	sxthmi	r3, r3
 801c878:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c87c:	7b6b      	ldrb	r3, [r5, #13]
 801c87e:	7aaa      	ldrb	r2, [r5, #10]
 801c880:	005b      	lsls	r3, r3, #1
 801c882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c886:	4313      	orrs	r3, r2
 801c888:	115a      	asrs	r2, r3, #5
 801c88a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801c88e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801c892:	e036      	b.n	801c902 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801c894:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801c898:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801c89c:	7a2a      	ldrb	r2, [r5, #8]
 801c89e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801c8a2:	ea42 0201 	orr.w	r2, r2, r1
 801c8a6:	bf1c      	itt	ne
 801c8a8:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801c8ac:	b212      	sxthne	r2, r2
 801c8ae:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801c8b2:	f640 6109 	movw	r1, #3593	; 0xe09
 801c8b6:	f023 0210 	bic.w	r2, r3, #16
 801c8ba:	428a      	cmp	r2, r1
 801c8bc:	d003      	beq.n	801c8c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ca>
 801c8be:	f640 6213 	movw	r2, #3603	; 0xe13
 801c8c2:	4293      	cmp	r3, r2
 801c8c4:	d12a      	bne.n	801c91c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801c8c6:	7b6e      	ldrb	r6, [r5, #13]
 801c8c8:	0076      	lsls	r6, r6, #1
 801c8ca:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c8ce:	7aae      	ldrb	r6, [r5, #10]
 801c8d0:	4316      	orrs	r6, r2
 801c8d2:	f640 6213 	movw	r2, #3603	; 0xe13
 801c8d6:	4293      	cmp	r3, r2
 801c8d8:	bf18      	it	ne
 801c8da:	f103 33ff 	addne.w	r3, r3, #4294967295
 801c8de:	4602      	mov	r2, r0
 801c8e0:	bf14      	ite	ne
 801c8e2:	b29b      	uxthne	r3, r3
 801c8e4:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801c8e8:	4629      	mov	r1, r5
 801c8ea:	4620      	mov	r0, r4
 801c8ec:	f7ff fefb 	bl	801c6e6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c8f0:	7b43      	ldrb	r3, [r0, #13]
 801c8f2:	7a82      	ldrb	r2, [r0, #10]
 801c8f4:	005b      	lsls	r3, r3, #1
 801c8f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c8fa:	4313      	orrs	r3, r2
 801c8fc:	1af6      	subs	r6, r6, r3
 801c8fe:	f8a4 6056 	strh.w	r6, [r4, #86]	; 0x56
 801c902:	7b69      	ldrb	r1, [r5, #13]
 801c904:	00cb      	lsls	r3, r1, #3
 801c906:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c90a:	7a2b      	ldrb	r3, [r5, #8]
 801c90c:	4313      	orrs	r3, r2
 801c90e:	064a      	lsls	r2, r1, #25
 801c910:	bf44      	itt	mi
 801c912:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c916:	b21b      	sxthmi	r3, r3
 801c918:	1bdb      	subs	r3, r3, r7
 801c91a:	e73f      	b.n	801c79c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801c91c:	2300      	movs	r3, #0
 801c91e:	e7b6      	b.n	801c88e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x192>
 801c920:	3fc00079 	.word	0x3fc00079
 801c924:	080310d8 	.word	0x080310d8
 801c928:	0803134a 	.word	0x0803134a
 801c92c:	080310e1 	.word	0x080310e1

0801c930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801c930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c934:	4604      	mov	r4, r0
 801c936:	b942      	cbnz	r2, 801c94a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801c938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c93c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801c940:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 801c944:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801c948:	e046      	b.n	801c9d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801c94a:	7b51      	ldrb	r1, [r2, #13]
 801c94c:	8893      	ldrh	r3, [r2, #4]
 801c94e:	010f      	lsls	r7, r1, #4
 801c950:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c954:	79d7      	ldrb	r7, [r2, #7]
 801c956:	4307      	orrs	r7, r0
 801c958:	2f04      	cmp	r7, #4
 801c95a:	b2bd      	uxth	r5, r7
 801c95c:	bfcc      	ite	gt
 801c95e:	08bf      	lsrgt	r7, r7, #2
 801c960:	2701      	movle	r7, #1
 801c962:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801c966:	f200 80ab 	bhi.w	801cac0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801c96a:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801c96e:	4283      	cmp	r3, r0
 801c970:	d216      	bcs.n	801c9a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c972:	f240 605b 	movw	r0, #1627	; 0x65b
 801c976:	4283      	cmp	r3, r0
 801c978:	d859      	bhi.n	801ca2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801c97a:	f240 6057 	movw	r0, #1623	; 0x657
 801c97e:	4283      	cmp	r3, r0
 801c980:	d20e      	bcs.n	801c9a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c982:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c986:	d24a      	bcs.n	801ca1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801c988:	f240 604e 	movw	r0, #1614	; 0x64e
 801c98c:	4283      	cmp	r3, r0
 801c98e:	d207      	bcs.n	801c9a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c990:	f240 601a 	movw	r0, #1562	; 0x61a
 801c994:	4283      	cmp	r3, r0
 801c996:	d02a      	beq.n	801c9ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c998:	d821      	bhi.n	801c9de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801c99a:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801c99e:	d35b      	bcc.n	801ca58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c9a0:	f9b4 3052 	ldrsh.w	r3, [r4, #82]	; 0x52
 801c9a4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c9a8:	f040 80d0 	bne.w	801cb4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c9ac:	f9b4 0054 	ldrsh.w	r0, [r4, #84]	; 0x54
 801c9b0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c9b4:	f040 80ca 	bne.w	801cb4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c9b8:	00cb      	lsls	r3, r1, #3
 801c9ba:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c9be:	7a13      	ldrb	r3, [r2, #8]
 801c9c0:	0649      	lsls	r1, r1, #25
 801c9c2:	ea43 0300 	orr.w	r3, r3, r0
 801c9c6:	bf44      	itt	mi
 801c9c8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c9cc:	b21b      	sxthmi	r3, r3
 801c9ce:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c9d2:	1b5d      	subs	r5, r3, r5
 801c9d4:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801c9d8:	4610      	mov	r0, r2
 801c9da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c9de:	f240 604b 	movw	r0, #1611	; 0x64b
 801c9e2:	4283      	cmp	r3, r0
 801c9e4:	d338      	bcc.n	801ca58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c9e6:	f240 604c 	movw	r0, #1612	; 0x64c
 801c9ea:	4283      	cmp	r3, r0
 801c9ec:	d9d8      	bls.n	801c9a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c9ee:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801c9f2:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 801c9f6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c9fa:	f040 80f1 	bne.w	801cbe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 801c9fe:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ca02:	f040 80ed 	bne.w	801cbe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 801ca06:	00cb      	lsls	r3, r1, #3
 801ca08:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801ca0c:	7a13      	ldrb	r3, [r2, #8]
 801ca0e:	064e      	lsls	r6, r1, #25
 801ca10:	ea43 0300 	orr.w	r3, r3, r0
 801ca14:	bf44      	itt	mi
 801ca16:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ca1a:	b21b      	sxthmi	r3, r3
 801ca1c:	e7d9      	b.n	801c9d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801ca1e:	f240 6054 	movw	r0, #1620	; 0x654
 801ca22:	4283      	cmp	r3, r0
 801ca24:	d8e3      	bhi.n	801c9ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca26:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801ca2a:	d9e0      	bls.n	801c9ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca2c:	e7b8      	b.n	801c9a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ca2e:	f240 6074 	movw	r0, #1652	; 0x674
 801ca32:	4283      	cmp	r3, r0
 801ca34:	d0b4      	beq.n	801c9a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ca36:	d82d      	bhi.n	801ca94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801ca38:	f240 605e 	movw	r0, #1630	; 0x65e
 801ca3c:	4283      	cmp	r3, r0
 801ca3e:	d804      	bhi.n	801ca4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801ca40:	f240 605d 	movw	r0, #1629	; 0x65d
 801ca44:	4283      	cmp	r3, r0
 801ca46:	d3d2      	bcc.n	801c9ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca48:	e7aa      	b.n	801c9a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ca4a:	f240 605f 	movw	r0, #1631	; 0x65f
 801ca4e:	4283      	cmp	r3, r0
 801ca50:	d0cd      	beq.n	801c9ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca52:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801ca56:	d0a3      	beq.n	801c9a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ca58:	00cb      	lsls	r3, r1, #3
 801ca5a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801ca5e:	7a13      	ldrb	r3, [r2, #8]
 801ca60:	0649      	lsls	r1, r1, #25
 801ca62:	ea43 0300 	orr.w	r3, r3, r0
 801ca66:	bf44      	itt	mi
 801ca68:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ca6c:	b21b      	sxthmi	r3, r3
 801ca6e:	1b5d      	subs	r5, r3, r5
 801ca70:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801ca74:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801ca78:	7b53      	ldrb	r3, [r2, #13]
 801ca7a:	015b      	lsls	r3, r3, #5
 801ca7c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ca80:	7993      	ldrb	r3, [r2, #6]
 801ca82:	430b      	orrs	r3, r1
 801ca84:	005b      	lsls	r3, r3, #1
 801ca86:	2105      	movs	r1, #5
 801ca88:	fb93 f3f1 	sdiv	r3, r3, r1
 801ca8c:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801ca90:	440b      	add	r3, r1
 801ca92:	e757      	b.n	801c944 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801ca94:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801ca98:	4283      	cmp	r3, r0
 801ca9a:	d809      	bhi.n	801cab0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801ca9c:	f240 60df 	movw	r0, #1759	; 0x6df
 801caa0:	4283      	cmp	r3, r0
 801caa2:	f4bf af7d 	bcs.w	801c9a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801caa6:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801caaa:	2b05      	cmp	r3, #5
 801caac:	d8d4      	bhi.n	801ca58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801caae:	e777      	b.n	801c9a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cab0:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801cab4:	4283      	cmp	r3, r0
 801cab6:	d09a      	beq.n	801c9ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cab8:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801cabc:	4283      	cmp	r3, r0
 801cabe:	e7ca      	b.n	801ca56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801cac0:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801cac4:	d22b      	bcs.n	801cb1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801cac6:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801caca:	4283      	cmp	r3, r0
 801cacc:	d28f      	bcs.n	801c9ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cace:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801cad2:	4283      	cmp	r3, r0
 801cad4:	d816      	bhi.n	801cb04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801cad6:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801cada:	4283      	cmp	r3, r0
 801cadc:	f4bf af60 	bcs.w	801c9a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cae0:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801cae4:	4283      	cmp	r3, r0
 801cae6:	d80a      	bhi.n	801cafe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801cae8:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801caec:	4283      	cmp	r3, r0
 801caee:	f4bf af57 	bcs.w	801c9a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801caf2:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801caf6:	4283      	cmp	r3, r0
 801caf8:	f43f af79 	beq.w	801c9ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cafc:	e7ac      	b.n	801ca58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801cafe:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801cb02:	e7f8      	b.n	801caf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801cb04:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801cb08:	4283      	cmp	r3, r0
 801cb0a:	d802      	bhi.n	801cb12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801cb0c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801cb10:	e798      	b.n	801ca44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801cb12:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801cb16:	4283      	cmp	r3, r0
 801cb18:	f47f af42 	bne.w	801c9a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cb1c:	e767      	b.n	801c9ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cb1e:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801cb22:	4283      	cmp	r3, r0
 801cb24:	f43f af63 	beq.w	801c9ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cb28:	d802      	bhi.n	801cb30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801cb2a:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801cb2e:	e7f2      	b.n	801cb16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801cb30:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801cb34:	4283      	cmp	r3, r0
 801cb36:	d805      	bhi.n	801cb44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801cb38:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801cb3c:	4283      	cmp	r3, r0
 801cb3e:	f4ff af2f 	bcc.w	801c9a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cb42:	e754      	b.n	801c9ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cb44:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801cb48:	4283      	cmp	r3, r0
 801cb4a:	e7af      	b.n	801caac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801cb4c:	f104 0c44 	add.w	ip, r4, #68	; 0x44
 801cb50:	4617      	mov	r7, r2
 801cb52:	f102 0808 	add.w	r8, r2, #8
 801cb56:	4666      	mov	r6, ip
 801cb58:	6838      	ldr	r0, [r7, #0]
 801cb5a:	6879      	ldr	r1, [r7, #4]
 801cb5c:	46e6      	mov	lr, ip
 801cb5e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801cb62:	3708      	adds	r7, #8
 801cb64:	4547      	cmp	r7, r8
 801cb66:	46f4      	mov	ip, lr
 801cb68:	d1f6      	bne.n	801cb58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801cb6a:	6838      	ldr	r0, [r7, #0]
 801cb6c:	f8ce 0000 	str.w	r0, [lr]
 801cb70:	88b9      	ldrh	r1, [r7, #4]
 801cb72:	f8ae 1004 	strh.w	r1, [lr, #4]
 801cb76:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 801cb7a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cb7e:	d009      	beq.n	801cb94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x264>
 801cb80:	7b51      	ldrb	r1, [r2, #13]
 801cb82:	7992      	ldrb	r2, [r2, #6]
 801cb84:	0149      	lsls	r1, r1, #5
 801cb86:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cb8a:	4311      	orrs	r1, r2
 801cb8c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801cb90:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 801cb94:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cb98:	d00d      	beq.n	801cbb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x286>
 801cb9a:	442b      	add	r3, r5
 801cb9c:	b29b      	uxth	r3, r3
 801cb9e:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801cba2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801cba6:	10db      	asrs	r3, r3, #3
 801cba8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801cbac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cbb0:	4313      	orrs	r3, r2
 801cbb2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801cbb6:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 801cbba:	00cb      	lsls	r3, r1, #3
 801cbbc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cbc0:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801cbc4:	064f      	lsls	r7, r1, #25
 801cbc6:	ea43 0302 	orr.w	r3, r3, r2
 801cbca:	bf44      	itt	mi
 801cbcc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cbd0:	b21b      	sxthmi	r3, r3
 801cbd2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801cbd6:	1b5d      	subs	r5, r3, r5
 801cbd8:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801cbdc:	4632      	mov	r2, r6
 801cbde:	e6fb      	b.n	801c9d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801cbe0:	f104 0e44 	add.w	lr, r4, #68	; 0x44
 801cbe4:	4694      	mov	ip, r2
 801cbe6:	f102 0908 	add.w	r9, r2, #8
 801cbea:	4676      	mov	r6, lr
 801cbec:	f8dc 0000 	ldr.w	r0, [ip]
 801cbf0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801cbf4:	46f0      	mov	r8, lr
 801cbf6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801cbfa:	f10c 0c08 	add.w	ip, ip, #8
 801cbfe:	45cc      	cmp	ip, r9
 801cc00:	46c6      	mov	lr, r8
 801cc02:	d1f3      	bne.n	801cbec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2bc>
 801cc04:	f8dc 0000 	ldr.w	r0, [ip]
 801cc08:	f8c8 0000 	str.w	r0, [r8]
 801cc0c:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801cc10:	f8a8 1004 	strh.w	r1, [r8, #4]
 801cc14:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 801cc18:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cc1c:	d009      	beq.n	801cc32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x302>
 801cc1e:	7b51      	ldrb	r1, [r2, #13]
 801cc20:	7992      	ldrb	r2, [r2, #6]
 801cc22:	0149      	lsls	r1, r1, #5
 801cc24:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cc28:	4311      	orrs	r1, r2
 801cc2a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801cc2e:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 801cc32:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cc36:	d00d      	beq.n	801cc54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801cc38:	1bdb      	subs	r3, r3, r7
 801cc3a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801cc3e:	b29b      	uxth	r3, r3
 801cc40:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801cc44:	10db      	asrs	r3, r3, #3
 801cc46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cc4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801cc4e:	4313      	orrs	r3, r2
 801cc50:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801cc54:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 801cc58:	00cb      	lsls	r3, r1, #3
 801cc5a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cc5e:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801cc62:	0648      	lsls	r0, r1, #25
 801cc64:	ea43 0302 	orr.w	r3, r3, r2
 801cc68:	bf44      	itt	mi
 801cc6a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cc6e:	b21b      	sxthmi	r3, r3
 801cc70:	e7b1      	b.n	801cbd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a6>
	...

0801cc74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801cc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc78:	461e      	mov	r6, r3
 801cc7a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801cc7c:	4604      	mov	r4, r0
 801cc7e:	4617      	mov	r7, r2
 801cc80:	b92b      	cbnz	r3, 801cc8e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801cc82:	4b25      	ldr	r3, [pc, #148]	; (801cd18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801cc84:	4a25      	ldr	r2, [pc, #148]	; (801cd1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801cc86:	4826      	ldr	r0, [pc, #152]	; (801cd20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801cc88:	21bf      	movs	r1, #191	; 0xbf
 801cc8a:	f00f fd2d 	bl	802c6e8 <__assert_func>
 801cc8e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801cc90:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cc94:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801cc98:	f7f6 f948 	bl	8012f2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cc9c:	4605      	mov	r5, r0
 801cc9e:	b918      	cbnz	r0, 801cca8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801cca0:	6030      	str	r0, [r6, #0]
 801cca2:	4628      	mov	r0, r5
 801cca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cca8:	683b      	ldr	r3, [r7, #0]
 801ccaa:	4601      	mov	r1, r0
 801ccac:	68db      	ldr	r3, [r3, #12]
 801ccae:	4638      	mov	r0, r7
 801ccb0:	4798      	blx	r3
 801ccb2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ccb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ccba:	4602      	mov	r2, r0
 801ccbc:	6030      	str	r0, [r6, #0]
 801ccbe:	d213      	bcs.n	801cce8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801ccc0:	4643      	mov	r3, r8
 801ccc2:	4639      	mov	r1, r7
 801ccc4:	4620      	mov	r0, r4
 801ccc6:	f7ff fe33 	bl	801c930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ccca:	6030      	str	r0, [r6, #0]
 801cccc:	6833      	ldr	r3, [r6, #0]
 801ccce:	b143      	cbz	r3, 801cce2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801ccd0:	7b5a      	ldrb	r2, [r3, #13]
 801ccd2:	7a9b      	ldrb	r3, [r3, #10]
 801ccd4:	0052      	lsls	r2, r2, #1
 801ccd6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ccda:	4313      	orrs	r3, r2
 801ccdc:	bf0c      	ite	eq
 801ccde:	2301      	moveq	r3, #1
 801cce0:	2300      	movne	r3, #0
 801cce2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cce6:	e7dc      	b.n	801cca2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801cce8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ccec:	b29b      	uxth	r3, r3
 801ccee:	2b7f      	cmp	r3, #127	; 0x7f
 801ccf0:	d804      	bhi.n	801ccfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801ccf2:	4639      	mov	r1, r7
 801ccf4:	4620      	mov	r0, r4
 801ccf6:	f7ff fd01 	bl	801c6fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ccfa:	e7e6      	b.n	801ccca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801ccfc:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d0e3      	beq.n	801cccc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801cd04:	f640 1302 	movw	r3, #2306	; 0x902
 801cd08:	429d      	cmp	r5, r3
 801cd0a:	d1df      	bne.n	801cccc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801cd0c:	4601      	mov	r1, r0
 801cd0e:	4620      	mov	r0, r4
 801cd10:	f7ff fcc6 	bl	801c6a0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801cd14:	e7d9      	b.n	801ccca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801cd16:	bf00      	nop
 801cd18:	080310d8 	.word	0x080310d8
 801cd1c:	0803134a 	.word	0x0803134a
 801cd20:	080310e1 	.word	0x080310e1

0801cd24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801cd24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cd28:	461e      	mov	r6, r3
 801cd2a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801cd2c:	4604      	mov	r4, r0
 801cd2e:	4617      	mov	r7, r2
 801cd30:	b92b      	cbnz	r3, 801cd3e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801cd32:	4b26      	ldr	r3, [pc, #152]	; (801cdcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801cd34:	4a26      	ldr	r2, [pc, #152]	; (801cdd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801cd36:	4827      	ldr	r0, [pc, #156]	; (801cdd4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801cd38:	21bf      	movs	r1, #191	; 0xbf
 801cd3a:	f00f fcd5 	bl	802c6e8 <__assert_func>
 801cd3e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801cd40:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cd44:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801cd48:	f7f6 f8f0 	bl	8012f2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cd4c:	4605      	mov	r5, r0
 801cd4e:	b918      	cbnz	r0, 801cd58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801cd50:	6030      	str	r0, [r6, #0]
 801cd52:	4628      	mov	r0, r5
 801cd54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd58:	683b      	ldr	r3, [r7, #0]
 801cd5a:	4601      	mov	r1, r0
 801cd5c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801cd60:	4638      	mov	r0, r7
 801cd62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cd66:	47c8      	blx	r9
 801cd68:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801cd6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cd70:	4602      	mov	r2, r0
 801cd72:	6030      	str	r0, [r6, #0]
 801cd74:	d213      	bcs.n	801cd9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801cd76:	4643      	mov	r3, r8
 801cd78:	4639      	mov	r1, r7
 801cd7a:	4620      	mov	r0, r4
 801cd7c:	f7ff fdd8 	bl	801c930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801cd80:	6030      	str	r0, [r6, #0]
 801cd82:	6833      	ldr	r3, [r6, #0]
 801cd84:	b143      	cbz	r3, 801cd98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801cd86:	7b5a      	ldrb	r2, [r3, #13]
 801cd88:	7a9b      	ldrb	r3, [r3, #10]
 801cd8a:	0052      	lsls	r2, r2, #1
 801cd8c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801cd90:	4313      	orrs	r3, r2
 801cd92:	bf0c      	ite	eq
 801cd94:	2301      	moveq	r3, #1
 801cd96:	2300      	movne	r3, #0
 801cd98:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cd9c:	e7d9      	b.n	801cd52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801cd9e:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801cda2:	b29b      	uxth	r3, r3
 801cda4:	2b7f      	cmp	r3, #127	; 0x7f
 801cda6:	d804      	bhi.n	801cdb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801cda8:	4639      	mov	r1, r7
 801cdaa:	4620      	mov	r0, r4
 801cdac:	f7ff fca6 	bl	801c6fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801cdb0:	e7e6      	b.n	801cd80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801cdb2:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d0e3      	beq.n	801cd82 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801cdba:	f640 1302 	movw	r3, #2306	; 0x902
 801cdbe:	429d      	cmp	r5, r3
 801cdc0:	d1df      	bne.n	801cd82 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801cdc2:	4601      	mov	r1, r0
 801cdc4:	4620      	mov	r0, r4
 801cdc6:	f7ff fc6b 	bl	801c6a0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801cdca:	e7d9      	b.n	801cd80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801cdcc:	080310d8 	.word	0x080310d8
 801cdd0:	0803134a 	.word	0x0803134a
 801cdd4:	080310e1 	.word	0x080310e1

0801cdd8 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801cdd8:	b510      	push	{r4, lr}
 801cdda:	4604      	mov	r4, r0
 801cddc:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801cdde:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801cde0:	b9d9      	cbnz	r1, 801ce1a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801cde2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801cde4:	2b0a      	cmp	r3, #10
 801cde6:	d036      	beq.n	801ce56 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801cde8:	4620      	mov	r0, r4
 801cdea:	f7ff fc20 	bl	801c62e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801cdee:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801cdf0:	2b09      	cmp	r3, #9
 801cdf2:	d906      	bls.n	801ce02 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801cdf4:	4b18      	ldr	r3, [pc, #96]	; (801ce58 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801cdf6:	4a19      	ldr	r2, [pc, #100]	; (801ce5c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801cdf8:	4819      	ldr	r0, [pc, #100]	; (801ce60 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801cdfa:	f240 1103 	movw	r1, #259	; 0x103
 801cdfe:	f00f fc73 	bl	802c6e8 <__assert_func>
 801ce02:	1c5a      	adds	r2, r3, #1
 801ce04:	8622      	strh	r2, [r4, #48]	; 0x30
 801ce06:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801ce08:	4413      	add	r3, r2
 801ce0a:	b29b      	uxth	r3, r3
 801ce0c:	2b09      	cmp	r3, #9
 801ce0e:	bf88      	it	hi
 801ce10:	3b0a      	subhi	r3, #10
 801ce12:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ce16:	8358      	strh	r0, [r3, #26]
 801ce18:	e7e3      	b.n	801cde2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801ce1a:	2b0a      	cmp	r3, #10
 801ce1c:	d01b      	beq.n	801ce56 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801ce1e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801ce20:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801ce24:	3901      	subs	r1, #1
 801ce26:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801ce28:	8721      	strh	r1, [r4, #56]	; 0x38
 801ce2a:	1c51      	adds	r1, r2, #1
 801ce2c:	b289      	uxth	r1, r1
 801ce2e:	2901      	cmp	r1, #1
 801ce30:	bf8a      	itet	hi
 801ce32:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801ce36:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801ce38:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801ce3a:	2b09      	cmp	r3, #9
 801ce3c:	d8da      	bhi.n	801cdf4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801ce3e:	1c5a      	adds	r2, r3, #1
 801ce40:	8622      	strh	r2, [r4, #48]	; 0x30
 801ce42:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801ce44:	4413      	add	r3, r2
 801ce46:	b29b      	uxth	r3, r3
 801ce48:	2b09      	cmp	r3, #9
 801ce4a:	bf88      	it	hi
 801ce4c:	3b0a      	subhi	r3, #10
 801ce4e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ce52:	8358      	strh	r0, [r3, #26]
 801ce54:	e7c2      	b.n	801cddc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801ce56:	bd10      	pop	{r4, pc}
 801ce58:	0803110d 	.word	0x0803110d
 801ce5c:	080314a0 	.word	0x080314a0
 801ce60:	080310e1 	.word	0x080310e1

0801ce64 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801ce64:	b538      	push	{r3, r4, r5, lr}
 801ce66:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801ce68:	4604      	mov	r4, r0
 801ce6a:	b92a      	cbnz	r2, 801ce78 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801ce6c:	4b13      	ldr	r3, [pc, #76]	; (801cebc <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801ce6e:	4a14      	ldr	r2, [pc, #80]	; (801cec0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801ce70:	4814      	ldr	r0, [pc, #80]	; (801cec4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801ce72:	21d4      	movs	r1, #212	; 0xd4
 801ce74:	f00f fc38 	bl	802c6e8 <__assert_func>
 801ce78:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ce7a:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801ce7e:	3a01      	subs	r2, #1
 801ce80:	8b4d      	ldrh	r5, [r1, #26]
 801ce82:	8602      	strh	r2, [r0, #48]	; 0x30
 801ce84:	1c5a      	adds	r2, r3, #1
 801ce86:	b292      	uxth	r2, r2
 801ce88:	2a09      	cmp	r2, #9
 801ce8a:	bf86      	itte	hi
 801ce8c:	3b09      	subhi	r3, #9
 801ce8e:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801ce90:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801ce92:	f7ff ffa1 	bl	801cdd8 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ce96:	8b23      	ldrh	r3, [r4, #24]
 801ce98:	2b01      	cmp	r3, #1
 801ce9a:	bf9c      	itt	ls
 801ce9c:	3301      	addls	r3, #1
 801ce9e:	8323      	strhls	r3, [r4, #24]
 801cea0:	8ae3      	ldrh	r3, [r4, #22]
 801cea2:	b90b      	cbnz	r3, 801cea8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801cea4:	2302      	movs	r3, #2
 801cea6:	82e3      	strh	r3, [r4, #22]
 801cea8:	8ae3      	ldrh	r3, [r4, #22]
 801ceaa:	3b01      	subs	r3, #1
 801ceac:	b29b      	uxth	r3, r3
 801ceae:	82e3      	strh	r3, [r4, #22]
 801ceb0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ceb4:	4628      	mov	r0, r5
 801ceb6:	8265      	strh	r5, [r4, #18]
 801ceb8:	bd38      	pop	{r3, r4, r5, pc}
 801ceba:	bf00      	nop
 801cebc:	080310d8 	.word	0x080310d8
 801cec0:	080313f5 	.word	0x080313f5
 801cec4:	080310e1 	.word	0x080310e1

0801cec8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801cec8:	b538      	push	{r3, r4, r5, lr}
 801ceca:	428a      	cmp	r2, r1
 801cecc:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801cece:	d90c      	bls.n	801ceea <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801ced0:	b92c      	cbnz	r4, 801cede <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801ced2:	4b1c      	ldr	r3, [pc, #112]	; (801cf44 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801ced4:	4a1c      	ldr	r2, [pc, #112]	; (801cf48 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801ced6:	21e0      	movs	r1, #224	; 0xe0
 801ced8:	481c      	ldr	r0, [pc, #112]	; (801cf4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801ceda:	f00f fc05 	bl	802c6e8 <__assert_func>
 801cede:	3c01      	subs	r4, #1
 801cee0:	8604      	strh	r4, [r0, #48]	; 0x30
 801cee2:	4b1b      	ldr	r3, [pc, #108]	; (801cf50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801cee4:	4a1b      	ldr	r2, [pc, #108]	; (801cf54 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801cee6:	21c4      	movs	r1, #196	; 0xc4
 801cee8:	e7f6      	b.n	801ced8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ceea:	428c      	cmp	r4, r1
 801ceec:	d203      	bcs.n	801cef6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801ceee:	4b1a      	ldr	r3, [pc, #104]	; (801cf58 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801cef0:	4a1a      	ldr	r2, [pc, #104]	; (801cf5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801cef2:	21ca      	movs	r1, #202	; 0xca
 801cef4:	e7f0      	b.n	801ced8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801cef6:	1a64      	subs	r4, r4, r1
 801cef8:	8604      	strh	r4, [r0, #48]	; 0x30
 801cefa:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801cefc:	4421      	add	r1, r4
 801cefe:	b289      	uxth	r1, r1
 801cf00:	2909      	cmp	r1, #9
 801cf02:	bf88      	it	hi
 801cf04:	390a      	subhi	r1, #10
 801cf06:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801cf08:	250a      	movs	r5, #10
 801cf0a:	b1ba      	cbz	r2, 801cf3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801cf0c:	3a01      	subs	r2, #1
 801cf0e:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801cf10:	b292      	uxth	r2, r2
 801cf12:	2909      	cmp	r1, #9
 801cf14:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801cf18:	d903      	bls.n	801cf22 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801cf1a:	4b11      	ldr	r3, [pc, #68]	; (801cf60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801cf1c:	4a11      	ldr	r2, [pc, #68]	; (801cf64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801cf1e:	21e5      	movs	r1, #229	; 0xe5
 801cf20:	e7da      	b.n	801ced8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801cf22:	3101      	adds	r1, #1
 801cf24:	8601      	strh	r1, [r0, #48]	; 0x30
 801cf26:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801cf28:	b901      	cbnz	r1, 801cf2c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801cf2a:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801cf2c:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801cf2e:	3901      	subs	r1, #1
 801cf30:	b289      	uxth	r1, r1
 801cf32:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801cf34:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801cf38:	834c      	strh	r4, [r1, #26]
 801cf3a:	e7e6      	b.n	801cf0a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801cf3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cf40:	f7ff bf4a 	b.w	801cdd8 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801cf44:	080310d8 	.word	0x080310d8
 801cf48:	080311ce 	.word	0x080311ce
 801cf4c:	080310e1 	.word	0x080310e1
 801cf50:	08031119 	.word	0x08031119
 801cf54:	08031278 	.word	0x08031278
 801cf58:	08031127 	.word	0x08031127
 801cf5c:	0803154f 	.word	0x0803154f
 801cf60:	08031133 	.word	0x08031133
 801cf64:	08031146 	.word	0x08031146

0801cf68 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801cf68:	3a01      	subs	r2, #1
 801cf6a:	b570      	push	{r4, r5, r6, lr}
 801cf6c:	b292      	uxth	r2, r2
 801cf6e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801cf72:	42b2      	cmp	r2, r6
 801cf74:	d019      	beq.n	801cfaa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801cf76:	8b04      	ldrh	r4, [r0, #24]
 801cf78:	f831 5b02 	ldrh.w	r5, [r1], #2
 801cf7c:	4294      	cmp	r4, r2
 801cf7e:	d805      	bhi.n	801cf8c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801cf80:	4b19      	ldr	r3, [pc, #100]	; (801cfe8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801cf82:	4a1a      	ldr	r2, [pc, #104]	; (801cfec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801cf84:	481a      	ldr	r0, [pc, #104]	; (801cff0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801cf86:	21c4      	movs	r1, #196	; 0xc4
 801cf88:	f00f fbae 	bl	802c6e8 <__assert_func>
 801cf8c:	8ac4      	ldrh	r4, [r0, #22]
 801cf8e:	4414      	add	r4, r2
 801cf90:	b2a4      	uxth	r4, r4
 801cf92:	2c01      	cmp	r4, #1
 801cf94:	bf88      	it	hi
 801cf96:	3c02      	subhi	r4, #2
 801cf98:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801cf9c:	3a01      	subs	r2, #1
 801cf9e:	8a64      	ldrh	r4, [r4, #18]
 801cfa0:	42ac      	cmp	r4, r5
 801cfa2:	b292      	uxth	r2, r2
 801cfa4:	d0e5      	beq.n	801cf72 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801cfa6:	2000      	movs	r0, #0
 801cfa8:	bd70      	pop	{r4, r5, r6, pc}
 801cfaa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cfae:	2400      	movs	r4, #0
 801cfb0:	4413      	add	r3, r2
 801cfb2:	b2a2      	uxth	r2, r4
 801cfb4:	429a      	cmp	r2, r3
 801cfb6:	da14      	bge.n	801cfe2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801cfb8:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801cfba:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801cfbe:	4296      	cmp	r6, r2
 801cfc0:	d802      	bhi.n	801cfc8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801cfc2:	4b09      	ldr	r3, [pc, #36]	; (801cfe8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801cfc4:	4a0b      	ldr	r2, [pc, #44]	; (801cff4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801cfc6:	e7dd      	b.n	801cf84 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801cfc8:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801cfca:	4432      	add	r2, r6
 801cfcc:	b292      	uxth	r2, r2
 801cfce:	2a09      	cmp	r2, #9
 801cfd0:	bf88      	it	hi
 801cfd2:	3a0a      	subhi	r2, #10
 801cfd4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801cfd8:	3401      	adds	r4, #1
 801cfda:	8b52      	ldrh	r2, [r2, #26]
 801cfdc:	42aa      	cmp	r2, r5
 801cfde:	d0e8      	beq.n	801cfb2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801cfe0:	e7e1      	b.n	801cfa6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801cfe2:	2001      	movs	r0, #1
 801cfe4:	e7e0      	b.n	801cfa8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801cfe6:	bf00      	nop
 801cfe8:	08031119 	.word	0x08031119
 801cfec:	080315d3 	.word	0x080315d3
 801cff0:	080310e1 	.word	0x080310e1
 801cff4:	08031278 	.word	0x08031278

0801cff8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801cff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cffc:	4605      	mov	r5, r0
 801cffe:	4616      	mov	r6, r2
 801d000:	1c8c      	adds	r4, r1, #2
 801d002:	8809      	ldrh	r1, [r1, #0]
 801d004:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801d008:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801d00c:	42b3      	cmp	r3, r6
 801d00e:	d124      	bne.n	801d05a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801d010:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801d014:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801d018:	f001 070f 	and.w	r7, r1, #15
 801d01c:	f8cd 8000 	str.w	r8, [sp]
 801d020:	464b      	mov	r3, r9
 801d022:	4652      	mov	r2, sl
 801d024:	4621      	mov	r1, r4
 801d026:	4628      	mov	r0, r5
 801d028:	f7ff ff9e 	bl	801cf68 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801d02c:	4683      	mov	fp, r0
 801d02e:	b168      	cbz	r0, 801d04c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801d030:	eb0a 0109 	add.w	r1, sl, r9
 801d034:	4441      	add	r1, r8
 801d036:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801d03a:	463a      	mov	r2, r7
 801d03c:	4649      	mov	r1, r9
 801d03e:	4628      	mov	r0, r5
 801d040:	f7ff ff42 	bl	801cec8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801d044:	4658      	mov	r0, fp
 801d046:	b003      	add	sp, #12
 801d048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d04c:	eb07 010a 	add.w	r1, r7, sl
 801d050:	4449      	add	r1, r9
 801d052:	4441      	add	r1, r8
 801d054:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801d058:	e7d2      	b.n	801d000 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801d05a:	f04f 0b00 	mov.w	fp, #0
 801d05e:	e7f1      	b.n	801d044 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801d060 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d060:	b570      	push	{r4, r5, r6, lr}
 801d062:	8810      	ldrh	r0, [r2, #0]
 801d064:	4298      	cmp	r0, r3
 801d066:	d817      	bhi.n	801d098 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d068:	1e48      	subs	r0, r1, #1
 801d06a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d06e:	4298      	cmp	r0, r3
 801d070:	d312      	bcc.n	801d098 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d072:	2400      	movs	r4, #0
 801d074:	428c      	cmp	r4, r1
 801d076:	d20f      	bcs.n	801d098 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d078:	1860      	adds	r0, r4, r1
 801d07a:	1040      	asrs	r0, r0, #1
 801d07c:	0085      	lsls	r5, r0, #2
 801d07e:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d082:	42b3      	cmp	r3, r6
 801d084:	d902      	bls.n	801d08c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d086:	3001      	adds	r0, #1
 801d088:	b284      	uxth	r4, r0
 801d08a:	e7f3      	b.n	801d074 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d08c:	d201      	bcs.n	801d092 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801d08e:	b281      	uxth	r1, r0
 801d090:	e7f0      	b.n	801d074 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d092:	442a      	add	r2, r5
 801d094:	8850      	ldrh	r0, [r2, #2]
 801d096:	bd70      	pop	{r4, r5, r6, pc}
 801d098:	2000      	movs	r0, #0
 801d09a:	e7fc      	b.n	801d096 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801d09c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801d09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0a0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801d0a2:	886f      	ldrh	r7, [r5, #2]
 801d0a4:	4604      	mov	r4, r0
 801d0a6:	087f      	lsrs	r7, r7, #1
 801d0a8:	260b      	movs	r6, #11
 801d0aa:	3e01      	subs	r6, #1
 801d0ac:	d01b      	beq.n	801d0e6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801d0ae:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801d0b0:	b92b      	cbnz	r3, 801d0be <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801d0b2:	4b0e      	ldr	r3, [pc, #56]	; (801d0ec <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801d0b4:	4a0e      	ldr	r2, [pc, #56]	; (801d0f0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801d0b6:	480f      	ldr	r0, [pc, #60]	; (801d0f4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801d0b8:	21bf      	movs	r1, #191	; 0xbf
 801d0ba:	f00f fb15 	bl	802c6e8 <__assert_func>
 801d0be:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801d0c0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d0c4:	462a      	mov	r2, r5
 801d0c6:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801d0ca:	4639      	mov	r1, r7
 801d0cc:	4643      	mov	r3, r8
 801d0ce:	4620      	mov	r0, r4
 801d0d0:	f7ff ffc6 	bl	801d060 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d0d4:	b138      	cbz	r0, 801d0e6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801d0d6:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d0da:	4642      	mov	r2, r8
 801d0dc:	4620      	mov	r0, r4
 801d0de:	f7ff ff8b 	bl	801cff8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d0e2:	2800      	cmp	r0, #0
 801d0e4:	d1e1      	bne.n	801d0aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d0e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0ea:	bf00      	nop
 801d0ec:	080310d8 	.word	0x080310d8
 801d0f0:	0803134a 	.word	0x0803134a
 801d0f4:	080310e1 	.word	0x080310e1

0801d0f8 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 801d0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0fa:	b08d      	sub	sp, #52	; 0x34
 801d0fc:	2300      	movs	r3, #0
 801d0fe:	9304      	str	r3, [sp, #16]
 801d100:	9305      	str	r3, [sp, #20]
 801d102:	9306      	str	r3, [sp, #24]
 801d104:	aa04      	add	r2, sp, #16
 801d106:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801d10a:	9307      	str	r3, [sp, #28]
 801d10c:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801d110:	4613      	mov	r3, r2
 801d112:	f101 0710 	add.w	r7, r1, #16
 801d116:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801d154 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 801d11a:	460c      	mov	r4, r1
 801d11c:	4605      	mov	r5, r0
 801d11e:	ecb4 7a01 	vldmia	r4!, {s14}
 801d122:	ecf5 6a01 	vldmia	r5!, {s13}
 801d126:	42bc      	cmp	r4, r7
 801d128:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d12c:	d1f7      	bne.n	801d11e <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 801d12e:	3010      	adds	r0, #16
 801d130:	42b0      	cmp	r0, r6
 801d132:	ece2 7a01 	vstmia	r2!, {s15}
 801d136:	d1ee      	bne.n	801d116 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 801d138:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d13a:	ac0c      	add	r4, sp, #48	; 0x30
 801d13c:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801d140:	ed9d 0a08 	vldr	s0, [sp, #32]
 801d144:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 801d148:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 801d14c:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 801d150:	b00d      	add	sp, #52	; 0x34
 801d152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d154:	00000000 	.word	0x00000000

0801d158 <_ZN8touchgfx9Matrix4x4C1Ev>:
 801d158:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 801d188 <_ZN8touchgfx9Matrix4x4C1Ev+0x30>
 801d15c:	2300      	movs	r3, #0
 801d15e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d162:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 801d166:	2200      	movs	r2, #0
 801d168:	4293      	cmp	r3, r2
 801d16a:	f102 0201 	add.w	r2, r2, #1
 801d16e:	bf14      	ite	ne
 801d170:	eef0 6a47 	vmovne.f32	s13, s14
 801d174:	eef0 6a67 	vmoveq.f32	s13, s15
 801d178:	2a04      	cmp	r2, #4
 801d17a:	ece1 6a01 	vstmia	r1!, {s13}
 801d17e:	d1f3      	bne.n	801d168 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 801d180:	3301      	adds	r3, #1
 801d182:	2b04      	cmp	r3, #4
 801d184:	d1ed      	bne.n	801d162 <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 801d186:	4770      	bx	lr
 801d188:	00000000 	.word	0x00000000

0801d18c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 801d18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d190:	460c      	mov	r4, r1
 801d192:	4605      	mov	r5, r0
 801d194:	4690      	mov	r8, r2
 801d196:	f7ff ffdf 	bl	801d158 <_ZN8touchgfx9Matrix4x4C1Ev>
 801d19a:	4628      	mov	r0, r5
 801d19c:	4621      	mov	r1, r4
 801d19e:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801d1a2:	2300      	movs	r3, #0
 801d1a4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801d1e4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x58>
 801d1a8:	eb08 0603 	add.w	r6, r8, r3
 801d1ac:	460f      	mov	r7, r1
 801d1ae:	2400      	movs	r4, #0
 801d1b0:	4632      	mov	r2, r6
 801d1b2:	ecf7 6a01 	vldmia	r7!, {s13}
 801d1b6:	ed92 7a00 	vldr	s14, [r2]
 801d1ba:	3401      	adds	r4, #1
 801d1bc:	2c04      	cmp	r4, #4
 801d1be:	f106 0610 	add.w	r6, r6, #16
 801d1c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d1c6:	d1f3      	bne.n	801d1b0 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 801d1c8:	18c2      	adds	r2, r0, r3
 801d1ca:	3304      	adds	r3, #4
 801d1cc:	2b10      	cmp	r3, #16
 801d1ce:	edc2 7a00 	vstr	s15, [r2]
 801d1d2:	d1e7      	bne.n	801d1a4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 801d1d4:	3110      	adds	r1, #16
 801d1d6:	4561      	cmp	r1, ip
 801d1d8:	f100 0010 	add.w	r0, r0, #16
 801d1dc:	d1e1      	bne.n	801d1a2 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 801d1de:	4628      	mov	r0, r5
 801d1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1e4:	00000000 	.word	0x00000000

0801d1e8 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 801d1e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d1ec:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801d1f0:	f100 0320 	add.w	r3, r0, #32
 801d1f4:	3030      	adds	r0, #48	; 0x30
 801d1f6:	ecf3 7a01 	vldmia	r3!, {s15}
 801d1fa:	ee60 7a27 	vmul.f32	s15, s0, s15
 801d1fe:	4283      	cmp	r3, r0
 801d200:	edc3 7a03 	vstr	s15, [r3, #12]
 801d204:	d1f7      	bne.n	801d1f6 <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 801d206:	4770      	bx	lr

0801d208 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 801d208:	b510      	push	{r4, lr}
 801d20a:	ed2d 8b02 	vpush	{d8}
 801d20e:	4604      	mov	r4, r0
 801d210:	eef0 8a40 	vmov.f32	s17, s0
 801d214:	f00e fd36 	bl	802bc84 <sinf>
 801d218:	eeb0 8a40 	vmov.f32	s16, s0
 801d21c:	eeb0 0a68 	vmov.f32	s0, s17
 801d220:	f00e fcae 	bl	802bb80 <cosf>
 801d224:	f104 0310 	add.w	r3, r4, #16
 801d228:	f104 0220 	add.w	r2, r4, #32
 801d22c:	eeb1 6a48 	vneg.f32	s12, s16
 801d230:	edd3 7a04 	vldr	s15, [r3, #16]
 801d234:	edd3 6a00 	vldr	s13, [r3]
 801d238:	ee26 7a27 	vmul.f32	s14, s12, s15
 801d23c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d240:	eea6 7a80 	vfma.f32	s14, s13, s0
 801d244:	eee6 7a88 	vfma.f32	s15, s13, s16
 801d248:	eca3 7a01 	vstmia	r3!, {s14}
 801d24c:	429a      	cmp	r2, r3
 801d24e:	edc3 7a03 	vstr	s15, [r3, #12]
 801d252:	d1ed      	bne.n	801d230 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 801d254:	ecbd 8b02 	vpop	{d8}
 801d258:	4620      	mov	r0, r4
 801d25a:	bd10      	pop	{r4, pc}

0801d25c <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 801d25c:	b510      	push	{r4, lr}
 801d25e:	ed2d 8b02 	vpush	{d8}
 801d262:	4604      	mov	r4, r0
 801d264:	eef0 8a40 	vmov.f32	s17, s0
 801d268:	f00e fd0c 	bl	802bc84 <sinf>
 801d26c:	eeb0 8a40 	vmov.f32	s16, s0
 801d270:	eeb0 0a68 	vmov.f32	s0, s17
 801d274:	f00e fc84 	bl	802bb80 <cosf>
 801d278:	4623      	mov	r3, r4
 801d27a:	f104 0210 	add.w	r2, r4, #16
 801d27e:	eeb1 6a48 	vneg.f32	s12, s16
 801d282:	edd3 7a08 	vldr	s15, [r3, #32]
 801d286:	edd3 6a00 	vldr	s13, [r3]
 801d28a:	ee27 7a88 	vmul.f32	s14, s15, s16
 801d28e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d292:	eea6 7a80 	vfma.f32	s14, s13, s0
 801d296:	eee6 7a26 	vfma.f32	s15, s12, s13
 801d29a:	eca3 7a01 	vstmia	r3!, {s14}
 801d29e:	429a      	cmp	r2, r3
 801d2a0:	edc3 7a07 	vstr	s15, [r3, #28]
 801d2a4:	d1ed      	bne.n	801d282 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 801d2a6:	ecbd 8b02 	vpop	{d8}
 801d2aa:	4620      	mov	r0, r4
 801d2ac:	bd10      	pop	{r4, pc}

0801d2ae <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 801d2ae:	b510      	push	{r4, lr}
 801d2b0:	ed2d 8b02 	vpush	{d8}
 801d2b4:	4604      	mov	r4, r0
 801d2b6:	eef0 8a40 	vmov.f32	s17, s0
 801d2ba:	f00e fce3 	bl	802bc84 <sinf>
 801d2be:	eeb0 8a40 	vmov.f32	s16, s0
 801d2c2:	eeb0 0a68 	vmov.f32	s0, s17
 801d2c6:	f00e fc5b 	bl	802bb80 <cosf>
 801d2ca:	4623      	mov	r3, r4
 801d2cc:	f104 0210 	add.w	r2, r4, #16
 801d2d0:	eeb1 6a48 	vneg.f32	s12, s16
 801d2d4:	edd3 7a04 	vldr	s15, [r3, #16]
 801d2d8:	edd3 6a00 	vldr	s13, [r3]
 801d2dc:	ee26 7a27 	vmul.f32	s14, s12, s15
 801d2e0:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d2e4:	eea6 7a80 	vfma.f32	s14, s13, s0
 801d2e8:	eee6 7a88 	vfma.f32	s15, s13, s16
 801d2ec:	eca3 7a01 	vstmia	r3!, {s14}
 801d2f0:	429a      	cmp	r2, r3
 801d2f2:	edc3 7a03 	vstr	s15, [r3, #12]
 801d2f6:	d1ed      	bne.n	801d2d4 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 801d2f8:	ecbd 8b02 	vpop	{d8}
 801d2fc:	4620      	mov	r0, r4
 801d2fe:	bd10      	pop	{r4, pc}

0801d300 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 801d300:	4603      	mov	r3, r0
 801d302:	f100 0210 	add.w	r2, r0, #16
 801d306:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801d30a:	edd3 7a00 	vldr	s15, [r3]
 801d30e:	eee7 7a00 	vfma.f32	s15, s14, s0
 801d312:	ece3 7a01 	vstmia	r3!, {s15}
 801d316:	4293      	cmp	r3, r2
 801d318:	d1f5      	bne.n	801d306 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 801d31a:	4770      	bx	lr

0801d31c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 801d31c:	f100 0310 	add.w	r3, r0, #16
 801d320:	f100 0220 	add.w	r2, r0, #32
 801d324:	ed93 7a08 	vldr	s14, [r3, #32]
 801d328:	edd3 7a00 	vldr	s15, [r3]
 801d32c:	eee7 7a00 	vfma.f32	s15, s14, s0
 801d330:	ece3 7a01 	vstmia	r3!, {s15}
 801d334:	4293      	cmp	r3, r2
 801d336:	d1f5      	bne.n	801d324 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 801d338:	4770      	bx	lr

0801d33a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 801d33a:	f100 0320 	add.w	r3, r0, #32
 801d33e:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801d342:	ed93 7a04 	vldr	s14, [r3, #16]
 801d346:	edd3 7a00 	vldr	s15, [r3]
 801d34a:	eee7 7a00 	vfma.f32	s15, s14, s0
 801d34e:	ece3 7a01 	vstmia	r3!, {s15}
 801d352:	4293      	cmp	r3, r2
 801d354:	d1f5      	bne.n	801d342 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 801d356:	4770      	bx	lr

0801d358 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 801d358:	4603      	mov	r3, r0
 801d35a:	f100 0210 	add.w	r2, r0, #16
 801d35e:	edd3 7a00 	vldr	s15, [r3]
 801d362:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d366:	ece3 7a01 	vstmia	r3!, {s15}
 801d36a:	4293      	cmp	r3, r2
 801d36c:	d1f7      	bne.n	801d35e <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 801d36e:	4770      	bx	lr

0801d370 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 801d370:	f100 0310 	add.w	r3, r0, #16
 801d374:	f100 0220 	add.w	r2, r0, #32
 801d378:	edd3 7a00 	vldr	s15, [r3]
 801d37c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d380:	ece3 7a01 	vstmia	r3!, {s15}
 801d384:	4293      	cmp	r3, r2
 801d386:	d1f7      	bne.n	801d378 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 801d388:	4770      	bx	lr

0801d38a <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 801d38a:	f100 0320 	add.w	r3, r0, #32
 801d38e:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801d392:	edd3 7a00 	vldr	s15, [r3]
 801d396:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d39a:	ece3 7a01 	vstmia	r3!, {s15}
 801d39e:	4293      	cmp	r3, r2
 801d3a0:	d1f7      	bne.n	801d392 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 801d3a2:	4770      	bx	lr

0801d3a4 <_ZN8touchgfx8ceil28_4El>:
 801d3a4:	f110 030f 	adds.w	r3, r0, #15
 801d3a8:	d401      	bmi.n	801d3ae <_ZN8touchgfx8ceil28_4El+0xa>
 801d3aa:	1118      	asrs	r0, r3, #4
 801d3ac:	4770      	bx	lr
 801d3ae:	f1c0 0001 	rsb	r0, r0, #1
 801d3b2:	f010 000f 	ands.w	r0, r0, #15
 801d3b6:	bf18      	it	ne
 801d3b8:	2001      	movne	r0, #1
 801d3ba:	2210      	movs	r2, #16
 801d3bc:	fb93 f3f2 	sdiv	r3, r3, r2
 801d3c0:	1a18      	subs	r0, r3, r0
 801d3c2:	4770      	bx	lr

0801d3c4 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801d3c4:	2900      	cmp	r1, #0
 801d3c6:	b538      	push	{r3, r4, r5, lr}
 801d3c8:	dc05      	bgt.n	801d3d6 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801d3ca:	4b0f      	ldr	r3, [pc, #60]	; (801d408 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801d3cc:	4a0f      	ldr	r2, [pc, #60]	; (801d40c <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801d3ce:	4810      	ldr	r0, [pc, #64]	; (801d410 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801d3d0:	21f7      	movs	r1, #247	; 0xf7
 801d3d2:	f00f f989 	bl	802c6e8 <__assert_func>
 801d3d6:	2800      	cmp	r0, #0
 801d3d8:	db06      	blt.n	801d3e8 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801d3da:	fb90 f4f1 	sdiv	r4, r0, r1
 801d3de:	6014      	str	r4, [r2, #0]
 801d3e0:	fb01 0114 	mls	r1, r1, r4, r0
 801d3e4:	6019      	str	r1, [r3, #0]
 801d3e6:	bd38      	pop	{r3, r4, r5, pc}
 801d3e8:	4240      	negs	r0, r0
 801d3ea:	fb90 f4f1 	sdiv	r4, r0, r1
 801d3ee:	4265      	negs	r5, r4
 801d3f0:	fb01 0014 	mls	r0, r1, r4, r0
 801d3f4:	6015      	str	r5, [r2, #0]
 801d3f6:	6018      	str	r0, [r3, #0]
 801d3f8:	2800      	cmp	r0, #0
 801d3fa:	d0f4      	beq.n	801d3e6 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801d3fc:	6810      	ldr	r0, [r2, #0]
 801d3fe:	3801      	subs	r0, #1
 801d400:	6010      	str	r0, [r2, #0]
 801d402:	6818      	ldr	r0, [r3, #0]
 801d404:	1a09      	subs	r1, r1, r0
 801d406:	e7ed      	b.n	801d3e4 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801d408:	080316a4 	.word	0x080316a4
 801d40c:	080316e3 	.word	0x080316e3
 801d410:	080316b4 	.word	0x080316b4

0801d414 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801d414:	b570      	push	{r4, r5, r6, lr}
 801d416:	694a      	ldr	r2, [r1, #20]
 801d418:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801d41a:	684b      	ldr	r3, [r1, #4]
 801d41c:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801d41e:	1b54      	subs	r4, r2, r5
 801d420:	f000 8106 	beq.w	801d630 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801d424:	1b9b      	subs	r3, r3, r6
 801d426:	d003      	beq.n	801d430 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d428:	4363      	muls	r3, r4
 801d42a:	2210      	movs	r2, #16
 801d42c:	fb93 f3f2 	sdiv	r3, r3, r2
 801d430:	680c      	ldr	r4, [r1, #0]
 801d432:	698a      	ldr	r2, [r1, #24]
 801d434:	1b65      	subs	r5, r4, r5
 801d436:	f000 80fd 	beq.w	801d634 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801d43a:	1b92      	subs	r2, r2, r6
 801d43c:	d003      	beq.n	801d446 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d43e:	436a      	muls	r2, r5
 801d440:	2410      	movs	r4, #16
 801d442:	fb92 f2f4 	sdiv	r2, r2, r4
 801d446:	1a9b      	subs	r3, r3, r2
 801d448:	ee07 3a90 	vmov	s15, r3
 801d44c:	ed9f 4a88 	vldr	s8, [pc, #544]	; 801d670 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801d450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d458:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d45c:	460a      	mov	r2, r1
 801d45e:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801d462:	4603      	mov	r3, r0
 801d464:	f100 040c 	add.w	r4, r0, #12
 801d468:	eeb1 6a43 	vneg.f32	s12, s6
 801d46c:	edd2 7a02 	vldr	s15, [r2, #8]
 801d470:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d474:	3214      	adds	r2, #20
 801d476:	ece3 6a01 	vstmia	r3!, {s13}
 801d47a:	ed52 7a02 	vldr	s15, [r2, #-8]
 801d47e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d482:	429c      	cmp	r4, r3
 801d484:	edc3 7a02 	vstr	s15, [r3, #8]
 801d488:	ed52 7a01 	vldr	s15, [r2, #-4]
 801d48c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d490:	edc3 7a05 	vstr	s15, [r3, #20]
 801d494:	d1ea      	bne.n	801d46c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801d496:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d498:	698b      	ldr	r3, [r1, #24]
 801d49a:	edd0 4a02 	vldr	s9, [r0, #8]
 801d49e:	edd0 3a00 	vldr	s7, [r0]
 801d4a2:	edd0 6a01 	vldr	s13, [r0, #4]
 801d4a6:	ed90 5a05 	vldr	s10, [r0, #20]
 801d4aa:	ed90 2a03 	vldr	s4, [r0, #12]
 801d4ae:	edd0 5a04 	vldr	s11, [r0, #16]
 801d4b2:	ed90 1a07 	vldr	s2, [r0, #28]
 801d4b6:	edd0 2a06 	vldr	s5, [r0, #24]
 801d4ba:	1a9b      	subs	r3, r3, r2
 801d4bc:	ee07 3a90 	vmov	s15, r3
 801d4c0:	684b      	ldr	r3, [r1, #4]
 801d4c2:	1a9b      	subs	r3, r3, r2
 801d4c4:	ee07 3a10 	vmov	s14, r3
 801d4c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d4cc:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801d4d0:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d4d4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801d4d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d4dc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801d4e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d4e4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801d4e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d4ec:	ee32 5a45 	vsub.f32	s10, s4, s10
 801d4f0:	ee67 7a83 	vmul.f32	s15, s15, s6
 801d4f4:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801d4f8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d4fa:	694a      	ldr	r2, [r1, #20]
 801d4fc:	1b13      	subs	r3, r2, r4
 801d4fe:	ee07 3a10 	vmov	s14, r3
 801d502:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d506:	680b      	ldr	r3, [r1, #0]
 801d508:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d50c:	1b1b      	subs	r3, r3, r4
 801d50e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801d512:	ee07 3a10 	vmov	s14, r3
 801d516:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d51a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d51e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801d522:	ee64 4a86 	vmul.f32	s9, s9, s12
 801d526:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801d52a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d52c:	698b      	ldr	r3, [r1, #24]
 801d52e:	1a9b      	subs	r3, r3, r2
 801d530:	ee06 3a90 	vmov	s13, r3
 801d534:	684b      	ldr	r3, [r1, #4]
 801d536:	1a9b      	subs	r3, r3, r2
 801d538:	ee07 3a10 	vmov	s14, r3
 801d53c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d540:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d544:	ee66 6a84 	vmul.f32	s13, s13, s8
 801d548:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d54c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801d550:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d554:	ee66 6a83 	vmul.f32	s13, s13, s6
 801d558:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801d55c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d55e:	694a      	ldr	r2, [r1, #20]
 801d560:	1b13      	subs	r3, r2, r4
 801d562:	ee07 3a10 	vmov	s14, r3
 801d566:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d56a:	680b      	ldr	r3, [r1, #0]
 801d56c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d570:	1b1b      	subs	r3, r3, r4
 801d572:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801d576:	ee07 3a10 	vmov	s14, r3
 801d57a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d57e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d582:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d586:	edd0 5a08 	vldr	s11, [r0, #32]
 801d58a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801d58e:	ee31 1a65 	vsub.f32	s2, s2, s11
 801d592:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801d596:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d598:	698b      	ldr	r3, [r1, #24]
 801d59a:	1a9b      	subs	r3, r3, r2
 801d59c:	ee07 3a10 	vmov	s14, r3
 801d5a0:	684b      	ldr	r3, [r1, #4]
 801d5a2:	1a9b      	subs	r3, r3, r2
 801d5a4:	ee01 3a90 	vmov	s3, r3
 801d5a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d5ac:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801d5b0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d5b4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d5b8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d5bc:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d5c0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d5c4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d5c8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d5cc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d5ce:	694a      	ldr	r2, [r1, #20]
 801d5d0:	1b13      	subs	r3, r2, r4
 801d5d2:	ee03 3a10 	vmov	s6, r3
 801d5d6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d5da:	680b      	ldr	r3, [r1, #0]
 801d5dc:	ee23 3a04 	vmul.f32	s6, s6, s8
 801d5e0:	1b1b      	subs	r3, r3, r4
 801d5e2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801d5e6:	ee03 3a10 	vmov	s6, r3
 801d5ea:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d5ee:	ee23 4a04 	vmul.f32	s8, s6, s8
 801d5f2:	eee1 5a04 	vfma.f32	s11, s2, s8
 801d5f6:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d5fa:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d5fe:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801d602:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d606:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d60e:	dd13      	ble.n	801d638 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801d610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d614:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d618:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d61a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d61e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d626:	dd15      	ble.n	801d654 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801d628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d62c:	6403      	str	r3, [r0, #64]	; 0x40
 801d62e:	bd70      	pop	{r4, r5, r6, pc}
 801d630:	4623      	mov	r3, r4
 801d632:	e6fd      	b.n	801d430 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d634:	462a      	mov	r2, r5
 801d636:	e706      	b.n	801d446 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d638:	d502      	bpl.n	801d640 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801d63a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d63e:	e7e9      	b.n	801d614 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801d640:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d644:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d648:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d650:	dade      	bge.n	801d610 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801d652:	e7f2      	b.n	801d63a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d654:	d502      	bpl.n	801d65c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801d656:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d65a:	e7e7      	b.n	801d62c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801d65c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d660:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d664:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d66c:	dadc      	bge.n	801d628 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801d66e:	e7f2      	b.n	801d656 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d670:	3d800000 	.word	0x3d800000

0801d674 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d678:	f04f 0814 	mov.w	r8, #20
 801d67c:	fb08 f903 	mul.w	r9, r8, r3
 801d680:	eb02 0a09 	add.w	sl, r2, r9
 801d684:	4604      	mov	r4, r0
 801d686:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d68a:	4617      	mov	r7, r2
 801d68c:	460d      	mov	r5, r1
 801d68e:	461e      	mov	r6, r3
 801d690:	f7ff fe88 	bl	801d3a4 <_ZN8touchgfx8ceil28_4El>
 801d694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d696:	6160      	str	r0, [r4, #20]
 801d698:	fb08 f803 	mul.w	r8, r8, r3
 801d69c:	eb07 0b08 	add.w	fp, r7, r8
 801d6a0:	9001      	str	r0, [sp, #4]
 801d6a2:	f8db 0004 	ldr.w	r0, [fp, #4]
 801d6a6:	f7ff fe7d 	bl	801d3a4 <_ZN8touchgfx8ceil28_4El>
 801d6aa:	9a01      	ldr	r2, [sp, #4]
 801d6ac:	1a80      	subs	r0, r0, r2
 801d6ae:	61a0      	str	r0, [r4, #24]
 801d6b0:	2800      	cmp	r0, #0
 801d6b2:	f000 8088 	beq.w	801d7c6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801d6b6:	f857 3009 	ldr.w	r3, [r7, r9]
 801d6ba:	f857 c008 	ldr.w	ip, [r7, r8]
 801d6be:	f8da 1004 	ldr.w	r1, [sl, #4]
 801d6c2:	f8db 0004 	ldr.w	r0, [fp, #4]
 801d6c6:	ebac 0c03 	sub.w	ip, ip, r3
 801d6ca:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801d6ce:	fb0b f202 	mul.w	r2, fp, r2
 801d6d2:	fb0c 2211 	mls	r2, ip, r1, r2
 801d6d6:	1a40      	subs	r0, r0, r1
 801d6d8:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801d6dc:	fb00 2003 	mla	r0, r0, r3, r2
 801d6e0:	3801      	subs	r0, #1
 801d6e2:	f104 0310 	add.w	r3, r4, #16
 801d6e6:	4622      	mov	r2, r4
 801d6e8:	4641      	mov	r1, r8
 801d6ea:	4440      	add	r0, r8
 801d6ec:	f7ff fe6a 	bl	801d3c4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801d6f0:	f104 0308 	add.w	r3, r4, #8
 801d6f4:	1d22      	adds	r2, r4, #4
 801d6f6:	4641      	mov	r1, r8
 801d6f8:	4658      	mov	r0, fp
 801d6fa:	f7ff fe63 	bl	801d3c4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801d6fe:	f8c4 800c 	str.w	r8, [r4, #12]
 801d702:	f8da 3004 	ldr.w	r3, [sl, #4]
 801d706:	6962      	ldr	r2, [r4, #20]
 801d708:	eddf 6a31 	vldr	s13, [pc, #196]	; 801d7d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d70c:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801d710:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801d714:	ee07 3a10 	vmov	s14, r3
 801d718:	6822      	ldr	r2, [r4, #0]
 801d71a:	f857 3009 	ldr.w	r3, [r7, r9]
 801d71e:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801d722:	ee07 3a90 	vmov	s15, r3
 801d726:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d72a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d72e:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801d732:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d736:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d73a:	edd3 6a00 	vldr	s13, [r3]
 801d73e:	eee6 6a07 	vfma.f32	s13, s12, s14
 801d742:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801d746:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d74a:	edc4 6a07 	vstr	s13, [r4, #28]
 801d74e:	edd4 6a01 	vldr	s13, [r4, #4]
 801d752:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801d756:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801d75a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d75e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d762:	ed84 6a08 	vstr	s12, [r4, #32]
 801d766:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801d768:	6262      	str	r2, [r4, #36]	; 0x24
 801d76a:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801d76e:	ed93 6a03 	vldr	s12, [r3, #12]
 801d772:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d776:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801d77a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801d77e:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801d782:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801d786:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801d78a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d78e:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801d792:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801d794:	6322      	str	r2, [r4, #48]	; 0x30
 801d796:	ed93 6a06 	vldr	s12, [r3, #24]
 801d79a:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801d79e:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d7a2:	eeb0 7a46 	vmov.f32	s14, s12
 801d7a6:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801d7aa:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d7ae:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801d7b2:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801d7b6:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801d7ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d7be:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801d7c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801d7c4:	63e3      	str	r3, [r4, #60]	; 0x3c
 801d7c6:	4620      	mov	r0, r4
 801d7c8:	b003      	add	sp, #12
 801d7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7ce:	bf00      	nop
 801d7d0:	3d800000 	.word	0x3d800000

0801d7d4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801d7d4:	4602      	mov	r2, r0
 801d7d6:	b148      	cbz	r0, 801d7ec <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801d7d8:	2300      	movs	r3, #0
 801d7da:	b298      	uxth	r0, r3
 801d7dc:	3301      	adds	r3, #1
 801d7de:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801d7e2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801d7e6:	2900      	cmp	r1, #0
 801d7e8:	d1f7      	bne.n	801d7da <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801d7ea:	4770      	bx	lr
 801d7ec:	4770      	bx	lr

0801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801d7ee:	b530      	push	{r4, r5, lr}
 801d7f0:	4604      	mov	r4, r0
 801d7f2:	b159      	cbz	r1, 801d80c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801d7f4:	b148      	cbz	r0, 801d80a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d7f6:	2300      	movs	r3, #0
 801d7f8:	b298      	uxth	r0, r3
 801d7fa:	4282      	cmp	r2, r0
 801d7fc:	d905      	bls.n	801d80a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d7fe:	5ccd      	ldrb	r5, [r1, r3]
 801d800:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801d804:	3301      	adds	r3, #1
 801d806:	2d00      	cmp	r5, #0
 801d808:	d1f6      	bne.n	801d7f8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801d80a:	bd30      	pop	{r4, r5, pc}
 801d80c:	4608      	mov	r0, r1
 801d80e:	e7fc      	b.n	801d80a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801d810 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801d810:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d812:	b08b      	sub	sp, #44	; 0x2c
 801d814:	468c      	mov	ip, r1
 801d816:	2100      	movs	r1, #0
 801d818:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d81c:	ae01      	add	r6, sp, #4
 801d81e:	211f      	movs	r1, #31
 801d820:	fbb0 f7f3 	udiv	r7, r0, r3
 801d824:	fb03 0517 	mls	r5, r3, r7, r0
 801d828:	b2ec      	uxtb	r4, r5
 801d82a:	2d09      	cmp	r5, #9
 801d82c:	bfd4      	ite	le
 801d82e:	3430      	addle	r4, #48	; 0x30
 801d830:	3457      	addgt	r4, #87	; 0x57
 801d832:	b2e4      	uxtb	r4, r4
 801d834:	558c      	strb	r4, [r1, r6]
 801d836:	4638      	mov	r0, r7
 801d838:	1e4c      	subs	r4, r1, #1
 801d83a:	b92f      	cbnz	r7, 801d848 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801d83c:	4431      	add	r1, r6
 801d83e:	4660      	mov	r0, ip
 801d840:	f7ff ffd5 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d844:	b00b      	add	sp, #44	; 0x2c
 801d846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d848:	4621      	mov	r1, r4
 801d84a:	e7e9      	b.n	801d820 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801d84c <_ZN8touchgfx7Unicode4itoaElPtti>:
 801d84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d84e:	4607      	mov	r7, r0
 801d850:	b08b      	sub	sp, #44	; 0x2c
 801d852:	4608      	mov	r0, r1
 801d854:	b341      	cbz	r1, 801d8a8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d856:	1e99      	subs	r1, r3, #2
 801d858:	2922      	cmp	r1, #34	; 0x22
 801d85a:	d825      	bhi.n	801d8a8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d85c:	2100      	movs	r1, #0
 801d85e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d862:	463c      	mov	r4, r7
 801d864:	261f      	movs	r6, #31
 801d866:	f10d 0c04 	add.w	ip, sp, #4
 801d86a:	fb94 fef3 	sdiv	lr, r4, r3
 801d86e:	fb03 441e 	mls	r4, r3, lr, r4
 801d872:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801d876:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801d87a:	b2ec      	uxtb	r4, r5
 801d87c:	2d09      	cmp	r5, #9
 801d87e:	bfd4      	ite	le
 801d880:	3430      	addle	r4, #48	; 0x30
 801d882:	3457      	addgt	r4, #87	; 0x57
 801d884:	b2e4      	uxtb	r4, r4
 801d886:	f80c 4006 	strb.w	r4, [ip, r6]
 801d88a:	4674      	mov	r4, lr
 801d88c:	1e71      	subs	r1, r6, #1
 801d88e:	b96c      	cbnz	r4, 801d8ac <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801d890:	2f00      	cmp	r7, #0
 801d892:	da05      	bge.n	801d8a0 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801d894:	ab0a      	add	r3, sp, #40	; 0x28
 801d896:	4419      	add	r1, r3
 801d898:	232d      	movs	r3, #45	; 0x2d
 801d89a:	f801 3c24 	strb.w	r3, [r1, #-36]
 801d89e:	1eb1      	subs	r1, r6, #2
 801d8a0:	3101      	adds	r1, #1
 801d8a2:	4461      	add	r1, ip
 801d8a4:	f7ff ffa3 	bl	801d7ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d8a8:	b00b      	add	sp, #44	; 0x2c
 801d8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8ac:	460e      	mov	r6, r1
 801d8ae:	e7dc      	b.n	801d86a <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801d8b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801d8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8b4:	4691      	mov	r9, r2
 801d8b6:	b085      	sub	sp, #20
 801d8b8:	6802      	ldr	r2, [r0, #0]
 801d8ba:	9201      	str	r2, [sp, #4]
 801d8bc:	4688      	mov	r8, r1
 801d8be:	4683      	mov	fp, r0
 801d8c0:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801d8c4:	9103      	str	r1, [sp, #12]
 801d8c6:	4610      	mov	r0, r2
 801d8c8:	461c      	mov	r4, r3
 801d8ca:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801d8ce:	9302      	str	r3, [sp, #8]
 801d8d0:	f7ff ff80 	bl	801d7d4 <_ZN8touchgfx7Unicode6strlenEPKt>
 801d8d4:	f1b8 0f00 	cmp.w	r8, #0
 801d8d8:	bf0c      	ite	eq
 801d8da:	4684      	moveq	ip, r0
 801d8dc:	f100 0c01 	addne.w	ip, r0, #1
 801d8e0:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801d8e4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801d8e8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d8ea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d8ec:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801d8f0:	9903      	ldr	r1, [sp, #12]
 801d8f2:	fa1f fc8c 	uxth.w	ip, ip
 801d8f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801d8fa:	d041      	beq.n	801d980 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d8fc:	d834      	bhi.n	801d968 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801d8fe:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801d902:	d059      	beq.n	801d9b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801d904:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801d908:	d03a      	beq.n	801d980 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d90a:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801d90e:	d034      	beq.n	801d97a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d910:	2400      	movs	r4, #0
 801d912:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801d916:	3a01      	subs	r2, #1
 801d918:	b169      	cbz	r1, 801d936 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d91a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d91c:	458c      	cmp	ip, r1
 801d91e:	da09      	bge.n	801d934 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d920:	eba1 010c 	sub.w	r1, r1, ip
 801d924:	b289      	uxth	r1, r1
 801d926:	b933      	cbnz	r3, 801d936 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d928:	2e00      	cmp	r6, #0
 801d92a:	d051      	beq.n	801d9d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d92c:	2800      	cmp	r0, #0
 801d92e:	d04f      	beq.n	801d9d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d930:	440c      	add	r4, r1
 801d932:	b2a4      	uxth	r4, r4
 801d934:	2100      	movs	r1, #0
 801d936:	682b      	ldr	r3, [r5, #0]
 801d938:	4293      	cmp	r3, r2
 801d93a:	da07      	bge.n	801d94c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d93c:	f1b8 0f00 	cmp.w	r8, #0
 801d940:	d004      	beq.n	801d94c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d942:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801d946:	682b      	ldr	r3, [r5, #0]
 801d948:	3301      	adds	r3, #1
 801d94a:	602b      	str	r3, [r5, #0]
 801d94c:	2730      	movs	r7, #48	; 0x30
 801d94e:	2c00      	cmp	r4, #0
 801d950:	d04e      	beq.n	801d9f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d952:	682e      	ldr	r6, [r5, #0]
 801d954:	3c01      	subs	r4, #1
 801d956:	42b2      	cmp	r2, r6
 801d958:	b2a4      	uxth	r4, r4
 801d95a:	dd49      	ble.n	801d9f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d95c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d960:	682b      	ldr	r3, [r5, #0]
 801d962:	3301      	adds	r3, #1
 801d964:	602b      	str	r3, [r5, #0]
 801d966:	e7f2      	b.n	801d94e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801d968:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801d96c:	d01d      	beq.n	801d9aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801d96e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801d972:	d002      	beq.n	801d97a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d974:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801d978:	e7c9      	b.n	801d90e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801d97a:	4684      	mov	ip, r0
 801d97c:	f04f 0800 	mov.w	r8, #0
 801d980:	2c00      	cmp	r4, #0
 801d982:	d0c6      	beq.n	801d912 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d984:	b947      	cbnz	r7, 801d998 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d986:	2801      	cmp	r0, #1
 801d988:	d106      	bne.n	801d998 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d98a:	8814      	ldrh	r4, [r2, #0]
 801d98c:	2c30      	cmp	r4, #48	; 0x30
 801d98e:	bf02      	ittt	eq
 801d990:	3202      	addeq	r2, #2
 801d992:	f8cb 2000 	streq.w	r2, [fp]
 801d996:	4638      	moveq	r0, r7
 801d998:	45bc      	cmp	ip, r7
 801d99a:	da14      	bge.n	801d9c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801d99c:	b2bf      	uxth	r7, r7
 801d99e:	eba7 040c 	sub.w	r4, r7, ip
 801d9a2:	b2a4      	uxth	r4, r4
 801d9a4:	46bc      	mov	ip, r7
 801d9a6:	2600      	movs	r6, #0
 801d9a8:	e7b3      	b.n	801d912 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d9aa:	4684      	mov	ip, r0
 801d9ac:	b16c      	cbz	r4, 801d9ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801d9ae:	42b8      	cmp	r0, r7
 801d9b0:	dd00      	ble.n	801d9b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801d9b2:	b2b8      	uxth	r0, r7
 801d9b4:	2400      	movs	r4, #0
 801d9b6:	e003      	b.n	801d9c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801d9b8:	f04f 0c01 	mov.w	ip, #1
 801d9bc:	2400      	movs	r4, #0
 801d9be:	4660      	mov	r0, ip
 801d9c0:	4626      	mov	r6, r4
 801d9c2:	46a0      	mov	r8, r4
 801d9c4:	e7a5      	b.n	801d912 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d9c6:	2400      	movs	r4, #0
 801d9c8:	e7ed      	b.n	801d9a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801d9ca:	4626      	mov	r6, r4
 801d9cc:	46a0      	mov	r8, r4
 801d9ce:	e7a0      	b.n	801d912 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d9d0:	2900      	cmp	r1, #0
 801d9d2:	d0b0      	beq.n	801d936 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d9d4:	2720      	movs	r7, #32
 801d9d6:	682e      	ldr	r6, [r5, #0]
 801d9d8:	2900      	cmp	r1, #0
 801d9da:	d0ac      	beq.n	801d936 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d9dc:	3901      	subs	r1, #1
 801d9de:	4296      	cmp	r6, r2
 801d9e0:	b289      	uxth	r1, r1
 801d9e2:	daa7      	bge.n	801d934 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d9e4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d9e8:	682b      	ldr	r3, [r5, #0]
 801d9ea:	3301      	adds	r3, #1
 801d9ec:	602b      	str	r3, [r5, #0]
 801d9ee:	e7f2      	b.n	801d9d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801d9f0:	b188      	cbz	r0, 801da16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d9f2:	682b      	ldr	r3, [r5, #0]
 801d9f4:	3801      	subs	r0, #1
 801d9f6:	429a      	cmp	r2, r3
 801d9f8:	b280      	uxth	r0, r0
 801d9fa:	dd0c      	ble.n	801da16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d9fc:	f8db 3000 	ldr.w	r3, [fp]
 801da00:	1c9c      	adds	r4, r3, #2
 801da02:	f8cb 4000 	str.w	r4, [fp]
 801da06:	881c      	ldrh	r4, [r3, #0]
 801da08:	682b      	ldr	r3, [r5, #0]
 801da0a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801da0e:	682b      	ldr	r3, [r5, #0]
 801da10:	3301      	adds	r3, #1
 801da12:	602b      	str	r3, [r5, #0]
 801da14:	e7ec      	b.n	801d9f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801da16:	2620      	movs	r6, #32
 801da18:	b151      	cbz	r1, 801da30 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801da1a:	6828      	ldr	r0, [r5, #0]
 801da1c:	3901      	subs	r1, #1
 801da1e:	4282      	cmp	r2, r0
 801da20:	b289      	uxth	r1, r1
 801da22:	dd05      	ble.n	801da30 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801da24:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801da28:	682b      	ldr	r3, [r5, #0]
 801da2a:	3301      	adds	r3, #1
 801da2c:	602b      	str	r3, [r5, #0]
 801da2e:	e7f3      	b.n	801da18 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801da30:	b005      	add	sp, #20
 801da32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801da36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801da36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801da3a:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801da3e:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801da42:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801da46:	2400      	movs	r4, #0
 801da48:	8014      	strh	r4, [r2, #0]
 801da4a:	701c      	strb	r4, [r3, #0]
 801da4c:	f888 4000 	strb.w	r4, [r8]
 801da50:	f88c 4000 	strb.w	r4, [ip]
 801da54:	f88e 4000 	strb.w	r4, [lr]
 801da58:	703c      	strb	r4, [r7, #0]
 801da5a:	6804      	ldr	r4, [r0, #0]
 801da5c:	b1a4      	cbz	r4, 801da88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801da5e:	8824      	ldrh	r4, [r4, #0]
 801da60:	f04f 0901 	mov.w	r9, #1
 801da64:	b314      	cbz	r4, 801daac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801da66:	2c2b      	cmp	r4, #43	; 0x2b
 801da68:	d001      	beq.n	801da6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801da6a:	2c20      	cmp	r4, #32
 801da6c:	d110      	bne.n	801da90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801da6e:	8014      	strh	r4, [r2, #0]
 801da70:	6804      	ldr	r4, [r0, #0]
 801da72:	b10c      	cbz	r4, 801da78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801da74:	3402      	adds	r4, #2
 801da76:	6004      	str	r4, [r0, #0]
 801da78:	680c      	ldr	r4, [r1, #0]
 801da7a:	b10c      	cbz	r4, 801da80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801da7c:	3401      	adds	r4, #1
 801da7e:	600c      	str	r4, [r1, #0]
 801da80:	6804      	ldr	r4, [r0, #0]
 801da82:	b17c      	cbz	r4, 801daa4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801da84:	8824      	ldrh	r4, [r4, #0]
 801da86:	e7ed      	b.n	801da64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801da88:	680c      	ldr	r4, [r1, #0]
 801da8a:	b17c      	cbz	r4, 801daac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801da8c:	7824      	ldrb	r4, [r4, #0]
 801da8e:	e7e7      	b.n	801da60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801da90:	2c2d      	cmp	r4, #45	; 0x2d
 801da92:	d102      	bne.n	801da9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801da94:	f883 9000 	strb.w	r9, [r3]
 801da98:	e7ea      	b.n	801da70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801da9a:	2c23      	cmp	r4, #35	; 0x23
 801da9c:	d107      	bne.n	801daae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801da9e:	f888 9000 	strb.w	r9, [r8]
 801daa2:	e7e5      	b.n	801da70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801daa4:	680c      	ldr	r4, [r1, #0]
 801daa6:	b10c      	cbz	r4, 801daac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801daa8:	7824      	ldrb	r4, [r4, #0]
 801daaa:	e7db      	b.n	801da64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801daac:	2400      	movs	r4, #0
 801daae:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801dab2:	2b09      	cmp	r3, #9
 801dab4:	d901      	bls.n	801daba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801dab6:	2c2a      	cmp	r4, #42	; 0x2a
 801dab8:	d122      	bne.n	801db00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801daba:	2301      	movs	r3, #1
 801dabc:	2c30      	cmp	r4, #48	; 0x30
 801dabe:	f88e 3000 	strb.w	r3, [lr]
 801dac2:	d10d      	bne.n	801dae0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801dac4:	f88c 3000 	strb.w	r3, [ip]
 801dac8:	6803      	ldr	r3, [r0, #0]
 801daca:	b10b      	cbz	r3, 801dad0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801dacc:	3302      	adds	r3, #2
 801dace:	6003      	str	r3, [r0, #0]
 801dad0:	680b      	ldr	r3, [r1, #0]
 801dad2:	b10b      	cbz	r3, 801dad8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801dad4:	3301      	adds	r3, #1
 801dad6:	600b      	str	r3, [r1, #0]
 801dad8:	6803      	ldr	r3, [r0, #0]
 801dada:	2b00      	cmp	r3, #0
 801dadc:	d02f      	beq.n	801db3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801dade:	881c      	ldrh	r4, [r3, #0]
 801dae0:	2c2a      	cmp	r4, #42	; 0x2a
 801dae2:	d135      	bne.n	801db50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801dae4:	f04f 33ff 	mov.w	r3, #4294967295
 801dae8:	6033      	str	r3, [r6, #0]
 801daea:	6803      	ldr	r3, [r0, #0]
 801daec:	b10b      	cbz	r3, 801daf2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801daee:	3302      	adds	r3, #2
 801daf0:	6003      	str	r3, [r0, #0]
 801daf2:	680b      	ldr	r3, [r1, #0]
 801daf4:	b10b      	cbz	r3, 801dafa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801daf6:	3301      	adds	r3, #1
 801daf8:	600b      	str	r3, [r1, #0]
 801dafa:	6803      	ldr	r3, [r0, #0]
 801dafc:	b31b      	cbz	r3, 801db46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801dafe:	881c      	ldrh	r4, [r3, #0]
 801db00:	2c2e      	cmp	r4, #46	; 0x2e
 801db02:	d11a      	bne.n	801db3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801db04:	2301      	movs	r3, #1
 801db06:	703b      	strb	r3, [r7, #0]
 801db08:	6803      	ldr	r3, [r0, #0]
 801db0a:	b10b      	cbz	r3, 801db10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801db0c:	3302      	adds	r3, #2
 801db0e:	6003      	str	r3, [r0, #0]
 801db10:	680b      	ldr	r3, [r1, #0]
 801db12:	b10b      	cbz	r3, 801db18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801db14:	3301      	adds	r3, #1
 801db16:	600b      	str	r3, [r1, #0]
 801db18:	6803      	ldr	r3, [r0, #0]
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	d036      	beq.n	801db8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801db1e:	881b      	ldrh	r3, [r3, #0]
 801db20:	2b2a      	cmp	r3, #42	; 0x2a
 801db22:	d137      	bne.n	801db94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801db24:	f04f 33ff 	mov.w	r3, #4294967295
 801db28:	602b      	str	r3, [r5, #0]
 801db2a:	6803      	ldr	r3, [r0, #0]
 801db2c:	b10b      	cbz	r3, 801db32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801db2e:	3302      	adds	r3, #2
 801db30:	6003      	str	r3, [r0, #0]
 801db32:	680b      	ldr	r3, [r1, #0]
 801db34:	b10b      	cbz	r3, 801db3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801db36:	3301      	adds	r3, #1
 801db38:	600b      	str	r3, [r1, #0]
 801db3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801db3e:	680c      	ldr	r4, [r1, #0]
 801db40:	b134      	cbz	r4, 801db50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801db42:	7824      	ldrb	r4, [r4, #0]
 801db44:	e7cc      	b.n	801dae0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801db46:	680b      	ldr	r3, [r1, #0]
 801db48:	2b00      	cmp	r3, #0
 801db4a:	d0f6      	beq.n	801db3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801db4c:	781c      	ldrb	r4, [r3, #0]
 801db4e:	e7d7      	b.n	801db00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801db50:	2300      	movs	r3, #0
 801db52:	6033      	str	r3, [r6, #0]
 801db54:	220a      	movs	r2, #10
 801db56:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801db5a:	fa1f f38c 	uxth.w	r3, ip
 801db5e:	2b09      	cmp	r3, #9
 801db60:	d8ce      	bhi.n	801db00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801db62:	6833      	ldr	r3, [r6, #0]
 801db64:	fb02 c303 	mla	r3, r2, r3, ip
 801db68:	6033      	str	r3, [r6, #0]
 801db6a:	6803      	ldr	r3, [r0, #0]
 801db6c:	b10b      	cbz	r3, 801db72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801db6e:	3302      	adds	r3, #2
 801db70:	6003      	str	r3, [r0, #0]
 801db72:	680b      	ldr	r3, [r1, #0]
 801db74:	b10b      	cbz	r3, 801db7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801db76:	3301      	adds	r3, #1
 801db78:	600b      	str	r3, [r1, #0]
 801db7a:	6803      	ldr	r3, [r0, #0]
 801db7c:	b10b      	cbz	r3, 801db82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801db7e:	881c      	ldrh	r4, [r3, #0]
 801db80:	e7e9      	b.n	801db56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801db82:	680c      	ldr	r4, [r1, #0]
 801db84:	2c00      	cmp	r4, #0
 801db86:	d0e6      	beq.n	801db56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801db88:	7824      	ldrb	r4, [r4, #0]
 801db8a:	e7e4      	b.n	801db56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801db8c:	680b      	ldr	r3, [r1, #0]
 801db8e:	b10b      	cbz	r3, 801db94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801db90:	781b      	ldrb	r3, [r3, #0]
 801db92:	e7c5      	b.n	801db20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801db94:	2200      	movs	r2, #0
 801db96:	602a      	str	r2, [r5, #0]
 801db98:	240a      	movs	r4, #10
 801db9a:	3b30      	subs	r3, #48	; 0x30
 801db9c:	b29e      	uxth	r6, r3
 801db9e:	2e09      	cmp	r6, #9
 801dba0:	682a      	ldr	r2, [r5, #0]
 801dba2:	d813      	bhi.n	801dbcc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801dba4:	fb04 3302 	mla	r3, r4, r2, r3
 801dba8:	602b      	str	r3, [r5, #0]
 801dbaa:	6803      	ldr	r3, [r0, #0]
 801dbac:	b10b      	cbz	r3, 801dbb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801dbae:	3302      	adds	r3, #2
 801dbb0:	6003      	str	r3, [r0, #0]
 801dbb2:	680b      	ldr	r3, [r1, #0]
 801dbb4:	b10b      	cbz	r3, 801dbba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801dbb6:	3301      	adds	r3, #1
 801dbb8:	600b      	str	r3, [r1, #0]
 801dbba:	6803      	ldr	r3, [r0, #0]
 801dbbc:	b10b      	cbz	r3, 801dbc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801dbbe:	881b      	ldrh	r3, [r3, #0]
 801dbc0:	e7eb      	b.n	801db9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801dbc2:	680b      	ldr	r3, [r1, #0]
 801dbc4:	2b00      	cmp	r3, #0
 801dbc6:	d0e8      	beq.n	801db9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801dbc8:	781b      	ldrb	r3, [r3, #0]
 801dbca:	e7e6      	b.n	801db9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801dbcc:	2a06      	cmp	r2, #6
 801dbce:	bfa8      	it	ge
 801dbd0:	2206      	movge	r2, #6
 801dbd2:	602a      	str	r2, [r5, #0]
 801dbd4:	e7b1      	b.n	801db3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801dbd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801dbd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbda:	b0a3      	sub	sp, #140	; 0x8c
 801dbdc:	2600      	movs	r6, #0
 801dbde:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801dbe2:	4607      	mov	r7, r0
 801dbe4:	4688      	mov	r8, r1
 801dbe6:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801dbea:	4631      	mov	r1, r6
 801dbec:	2242      	movs	r2, #66	; 0x42
 801dbee:	4648      	mov	r0, r9
 801dbf0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801dbf2:	960d      	str	r6, [sp, #52]	; 0x34
 801dbf4:	f00f f918 	bl	802ce28 <memset>
 801dbf8:	b15f      	cbz	r7, 801dc12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801dbfa:	f108 3aff 	add.w	sl, r8, #4294967295
 801dbfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dc00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc02:	b152      	cbz	r2, 801dc1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801dc04:	8812      	ldrh	r2, [r2, #0]
 801dc06:	b10a      	cbz	r2, 801dc0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801dc08:	459a      	cmp	sl, r3
 801dc0a:	dc2e      	bgt.n	801dc6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801dc0c:	2200      	movs	r2, #0
 801dc0e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801dc12:	4638      	mov	r0, r7
 801dc14:	b023      	add	sp, #140	; 0x8c
 801dc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc1a:	9a08      	ldr	r2, [sp, #32]
 801dc1c:	2a00      	cmp	r2, #0
 801dc1e:	d0f5      	beq.n	801dc0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801dc20:	7812      	ldrb	r2, [r2, #0]
 801dc22:	e7f0      	b.n	801dc06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801dc24:	2d00      	cmp	r5, #0
 801dc26:	d0ea      	beq.n	801dbfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dc28:	782a      	ldrb	r2, [r5, #0]
 801dc2a:	b142      	cbz	r2, 801dc3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801dc2c:	2a25      	cmp	r2, #37	; 0x25
 801dc2e:	d001      	beq.n	801dc34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801dc30:	459a      	cmp	sl, r3
 801dc32:	dc08      	bgt.n	801dc46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801dc34:	f1bb 0f00 	cmp.w	fp, #0
 801dc38:	d121      	bne.n	801dc7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801dc3a:	2d00      	cmp	r5, #0
 801dc3c:	d0df      	beq.n	801dbfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dc3e:	782a      	ldrb	r2, [r5, #0]
 801dc40:	f04f 0b00 	mov.w	fp, #0
 801dc44:	e01d      	b.n	801dc82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801dc46:	f1bb 0f00 	cmp.w	fp, #0
 801dc4a:	d078      	beq.n	801dd3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 801dc4c:	f8bb 2000 	ldrh.w	r2, [fp]
 801dc50:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801dc54:	f1bb 0f00 	cmp.w	fp, #0
 801dc58:	d002      	beq.n	801dc60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801dc5a:	f10b 0202 	add.w	r2, fp, #2
 801dc5e:	9209      	str	r2, [sp, #36]	; 0x24
 801dc60:	b10d      	cbz	r5, 801dc66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801dc62:	3501      	adds	r5, #1
 801dc64:	9508      	str	r5, [sp, #32]
 801dc66:	3301      	adds	r3, #1
 801dc68:	930d      	str	r3, [sp, #52]	; 0x34
 801dc6a:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801dc6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc70:	f1bb 0f00 	cmp.w	fp, #0
 801dc74:	d0d6      	beq.n	801dc24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801dc76:	f8bb 2000 	ldrh.w	r2, [fp]
 801dc7a:	2a00      	cmp	r2, #0
 801dc7c:	d1d6      	bne.n	801dc2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801dc7e:	f8bb 2000 	ldrh.w	r2, [fp]
 801dc82:	2a00      	cmp	r2, #0
 801dc84:	d0bb      	beq.n	801dbfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dc86:	459a      	cmp	sl, r3
 801dc88:	ddb9      	ble.n	801dbfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dc8a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801dc8e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801dc92:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801dc96:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801dc9a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801dc9e:	960e      	str	r6, [sp, #56]	; 0x38
 801dca0:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801dca4:	960f      	str	r6, [sp, #60]	; 0x3c
 801dca6:	f1bb 0f00 	cmp.w	fp, #0
 801dcaa:	d002      	beq.n	801dcb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801dcac:	f10b 0302 	add.w	r3, fp, #2
 801dcb0:	9309      	str	r3, [sp, #36]	; 0x24
 801dcb2:	b10d      	cbz	r5, 801dcb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801dcb4:	1c6b      	adds	r3, r5, #1
 801dcb6:	9308      	str	r3, [sp, #32]
 801dcb8:	ab0f      	add	r3, sp, #60	; 0x3c
 801dcba:	9305      	str	r3, [sp, #20]
 801dcbc:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801dcc0:	9304      	str	r3, [sp, #16]
 801dcc2:	ab0e      	add	r3, sp, #56	; 0x38
 801dcc4:	9303      	str	r3, [sp, #12]
 801dcc6:	ab0c      	add	r3, sp, #48	; 0x30
 801dcc8:	9302      	str	r3, [sp, #8]
 801dcca:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801dcce:	9301      	str	r3, [sp, #4]
 801dcd0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801dcd4:	9300      	str	r3, [sp, #0]
 801dcd6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801dcda:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801dcde:	a908      	add	r1, sp, #32
 801dce0:	a809      	add	r0, sp, #36	; 0x24
 801dce2:	f7ff fea8 	bl	801da36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801dce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dce8:	2b00      	cmp	r3, #0
 801dcea:	bfbe      	ittt	lt
 801dcec:	6823      	ldrlt	r3, [r4, #0]
 801dcee:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801dcf2:	930e      	strlt	r3, [sp, #56]	; 0x38
 801dcf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dcf6:	bfb8      	it	lt
 801dcf8:	3404      	addlt	r4, #4
 801dcfa:	2b00      	cmp	r3, #0
 801dcfc:	bfb8      	it	lt
 801dcfe:	6823      	ldrlt	r3, [r4, #0]
 801dd00:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801dd04:	bfbe      	ittt	lt
 801dd06:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801dd0a:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801dd0c:	3404      	addlt	r4, #4
 801dd0e:	b1d9      	cbz	r1, 801dd48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 801dd10:	880b      	ldrh	r3, [r1, #0]
 801dd12:	2b69      	cmp	r3, #105	; 0x69
 801dd14:	d01f      	beq.n	801dd56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801dd16:	d82f      	bhi.n	801dd78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 801dd18:	2b58      	cmp	r3, #88	; 0x58
 801dd1a:	d01c      	beq.n	801dd56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801dd1c:	d818      	bhi.n	801dd50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 801dd1e:	2b25      	cmp	r3, #37	; 0x25
 801dd20:	d034      	beq.n	801dd8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 801dd22:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801dd26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dd28:	f1bb 0f00 	cmp.w	fp, #0
 801dd2c:	f000 80b8 	beq.w	801dea0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 801dd30:	f8bb 5000 	ldrh.w	r5, [fp]
 801dd34:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801dd38:	3301      	adds	r3, #1
 801dd3a:	930d      	str	r3, [sp, #52]	; 0x34
 801dd3c:	e029      	b.n	801dd92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801dd3e:	b10d      	cbz	r5, 801dd44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 801dd40:	782a      	ldrb	r2, [r5, #0]
 801dd42:	e785      	b.n	801dc50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801dd44:	462a      	mov	r2, r5
 801dd46:	e783      	b.n	801dc50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801dd48:	2a00      	cmp	r2, #0
 801dd4a:	d0ea      	beq.n	801dd22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801dd4c:	7813      	ldrb	r3, [r2, #0]
 801dd4e:	e7e0      	b.n	801dd12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 801dd50:	3b63      	subs	r3, #99	; 0x63
 801dd52:	2b01      	cmp	r3, #1
 801dd54:	d8e5      	bhi.n	801dd22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801dd56:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801dd5a:	b329      	cbz	r1, 801dda8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 801dd5c:	880b      	ldrh	r3, [r1, #0]
 801dd5e:	2b69      	cmp	r3, #105	; 0x69
 801dd60:	d063      	beq.n	801de2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801dd62:	d825      	bhi.n	801ddb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 801dd64:	2b63      	cmp	r3, #99	; 0x63
 801dd66:	d038      	beq.n	801ddda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 801dd68:	2b64      	cmp	r3, #100	; 0x64
 801dd6a:	d05e      	beq.n	801de2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801dd6c:	2b58      	cmp	r3, #88	; 0x58
 801dd6e:	d07b      	beq.n	801de68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 801dd70:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801dd74:	4625      	mov	r5, r4
 801dd76:	e036      	b.n	801dde6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801dd78:	2b73      	cmp	r3, #115	; 0x73
 801dd7a:	d0ec      	beq.n	801dd56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801dd7c:	d802      	bhi.n	801dd84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 801dd7e:	2b6f      	cmp	r3, #111	; 0x6f
 801dd80:	d1cf      	bne.n	801dd22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801dd82:	e7e8      	b.n	801dd56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801dd84:	2b75      	cmp	r3, #117	; 0x75
 801dd86:	d0e6      	beq.n	801dd56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801dd88:	2b78      	cmp	r3, #120	; 0x78
 801dd8a:	e7f9      	b.n	801dd80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 801dd8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dd8e:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801dd92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd94:	b10b      	cbz	r3, 801dd9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 801dd96:	3302      	adds	r3, #2
 801dd98:	9309      	str	r3, [sp, #36]	; 0x24
 801dd9a:	9b08      	ldr	r3, [sp, #32]
 801dd9c:	2b00      	cmp	r3, #0
 801dd9e:	f43f af2e 	beq.w	801dbfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dda2:	3301      	adds	r3, #1
 801dda4:	9308      	str	r3, [sp, #32]
 801dda6:	e72a      	b.n	801dbfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dda8:	2a00      	cmp	r2, #0
 801ddaa:	d0e1      	beq.n	801dd70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801ddac:	7813      	ldrb	r3, [r2, #0]
 801ddae:	e7d6      	b.n	801dd5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 801ddb0:	2b73      	cmp	r3, #115	; 0x73
 801ddb2:	d036      	beq.n	801de22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 801ddb4:	d807      	bhi.n	801ddc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 801ddb6:	2b6f      	cmp	r3, #111	; 0x6f
 801ddb8:	d1da      	bne.n	801dd70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801ddba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ddbc:	1d25      	adds	r5, r4, #4
 801ddbe:	eba8 0202 	sub.w	r2, r8, r2
 801ddc2:	2308      	movs	r3, #8
 801ddc4:	e04a      	b.n	801de5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801ddc6:	2b75      	cmp	r3, #117	; 0x75
 801ddc8:	d043      	beq.n	801de52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 801ddca:	2b78      	cmp	r3, #120	; 0x78
 801ddcc:	d1d0      	bne.n	801dd70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801ddce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ddd0:	1d25      	adds	r5, r4, #4
 801ddd2:	eba8 0202 	sub.w	r2, r8, r2
 801ddd6:	2310      	movs	r3, #16
 801ddd8:	e040      	b.n	801de5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801ddda:	7823      	ldrb	r3, [r4, #0]
 801dddc:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801dde0:	1d25      	adds	r5, r4, #4
 801dde2:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801dde6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dde8:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801ddec:	2b00      	cmp	r3, #0
 801ddee:	d052      	beq.n	801de96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 801ddf0:	881a      	ldrh	r2, [r3, #0]
 801ddf2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801ddf6:	a80d      	add	r0, sp, #52	; 0x34
 801ddf8:	9005      	str	r0, [sp, #20]
 801ddfa:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801ddfe:	9004      	str	r0, [sp, #16]
 801de00:	980e      	ldr	r0, [sp, #56]	; 0x38
 801de02:	9003      	str	r0, [sp, #12]
 801de04:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801de08:	9002      	str	r0, [sp, #8]
 801de0a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801de0c:	9001      	str	r0, [sp, #4]
 801de0e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801de12:	9000      	str	r0, [sp, #0]
 801de14:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801de18:	a810      	add	r0, sp, #64	; 0x40
 801de1a:	f7ff fd49 	bl	801d8b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801de1e:	462c      	mov	r4, r5
 801de20:	e7b7      	b.n	801dd92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801de22:	6823      	ldr	r3, [r4, #0]
 801de24:	1d25      	adds	r5, r4, #4
 801de26:	9310      	str	r3, [sp, #64]	; 0x40
 801de28:	e7dd      	b.n	801dde6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801de2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801de2c:	6820      	ldr	r0, [r4, #0]
 801de2e:	eba8 0202 	sub.w	r2, r8, r2
 801de32:	230a      	movs	r3, #10
 801de34:	b292      	uxth	r2, r2
 801de36:	4649      	mov	r1, r9
 801de38:	f7ff fd08 	bl	801d84c <_ZN8touchgfx7Unicode4itoaElPtti>
 801de3c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801de40:	2b2d      	cmp	r3, #45	; 0x2d
 801de42:	f104 0504 	add.w	r5, r4, #4
 801de46:	d1ce      	bne.n	801dde6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801de48:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801de4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801de4e:	3302      	adds	r3, #2
 801de50:	e7e9      	b.n	801de26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 801de52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801de54:	1d25      	adds	r5, r4, #4
 801de56:	eba8 0202 	sub.w	r2, r8, r2
 801de5a:	230a      	movs	r3, #10
 801de5c:	b292      	uxth	r2, r2
 801de5e:	4649      	mov	r1, r9
 801de60:	6820      	ldr	r0, [r4, #0]
 801de62:	f7ff fcd5 	bl	801d810 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801de66:	e7be      	b.n	801dde6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801de68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801de6a:	6820      	ldr	r0, [r4, #0]
 801de6c:	eba8 0202 	sub.w	r2, r8, r2
 801de70:	b292      	uxth	r2, r2
 801de72:	2310      	movs	r3, #16
 801de74:	4649      	mov	r1, r9
 801de76:	f7ff fccb 	bl	801d810 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801de7a:	1d25      	adds	r5, r4, #4
 801de7c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801de80:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801de84:	2b00      	cmp	r3, #0
 801de86:	d0ae      	beq.n	801dde6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801de88:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801de8c:	2919      	cmp	r1, #25
 801de8e:	d8f7      	bhi.n	801de80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801de90:	3b20      	subs	r3, #32
 801de92:	8013      	strh	r3, [r2, #0]
 801de94:	e7f4      	b.n	801de80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801de96:	9a08      	ldr	r2, [sp, #32]
 801de98:	2a00      	cmp	r2, #0
 801de9a:	d0aa      	beq.n	801ddf2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801de9c:	7812      	ldrb	r2, [r2, #0]
 801de9e:	e7a8      	b.n	801ddf2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801dea0:	2d00      	cmp	r5, #0
 801dea2:	f43f af47 	beq.w	801dd34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 801dea6:	782d      	ldrb	r5, [r5, #0]
 801dea8:	e744      	b.n	801dd34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

0801deaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801deaa:	b507      	push	{r0, r1, r2, lr}
 801deac:	9300      	str	r3, [sp, #0]
 801deae:	4613      	mov	r3, r2
 801deb0:	2200      	movs	r2, #0
 801deb2:	f7ff fe90 	bl	801dbd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801deb6:	b003      	add	sp, #12
 801deb8:	f85d fb04 	ldr.w	pc, [sp], #4

0801debc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801debc:	b40c      	push	{r2, r3}
 801debe:	b507      	push	{r0, r1, r2, lr}
 801dec0:	ab04      	add	r3, sp, #16
 801dec2:	f853 2b04 	ldr.w	r2, [r3], #4
 801dec6:	9301      	str	r3, [sp, #4]
 801dec8:	f7ff ffef 	bl	801deaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801decc:	b003      	add	sp, #12
 801dece:	f85d eb04 	ldr.w	lr, [sp], #4
 801ded2:	b002      	add	sp, #8
 801ded4:	4770      	bx	lr
	...

0801ded8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 801ded8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dedc:	b0c3      	sub	sp, #268	; 0x10c
 801dede:	2600      	movs	r6, #0
 801dee0:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 801dee4:	4607      	mov	r7, r0
 801dee6:	4689      	mov	r9, r1
 801dee8:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801deec:	4631      	mov	r1, r6
 801deee:	22c8      	movs	r2, #200	; 0xc8
 801def0:	4640      	mov	r0, r8
 801def2:	f8dd a130 	ldr.w	sl, [sp, #304]	; 0x130
 801def6:	960c      	str	r6, [sp, #48]	; 0x30
 801def8:	f00e ff96 	bl	802ce28 <memset>
 801defc:	b16f      	cbz	r7, 801df1a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x42>
 801defe:	f04f 0b0a 	mov.w	fp, #10
 801df02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801df04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801df06:	b162      	cbz	r2, 801df22 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x4a>
 801df08:	8812      	ldrh	r2, [r2, #0]
 801df0a:	b11a      	cbz	r2, 801df14 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 801df0c:	f109 31ff 	add.w	r1, r9, #4294967295
 801df10:	4299      	cmp	r1, r3
 801df12:	dc26      	bgt.n	801df62 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8a>
 801df14:	2200      	movs	r2, #0
 801df16:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801df1a:	4638      	mov	r0, r7
 801df1c:	b043      	add	sp, #268	; 0x10c
 801df1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df22:	9a08      	ldr	r2, [sp, #32]
 801df24:	2a00      	cmp	r2, #0
 801df26:	d0f5      	beq.n	801df14 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 801df28:	7812      	ldrb	r2, [r2, #0]
 801df2a:	e7ee      	b.n	801df0a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32>
 801df2c:	2c00      	cmp	r4, #0
 801df2e:	d0e8      	beq.n	801df02 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801df30:	7822      	ldrb	r2, [r4, #0]
 801df32:	b132      	cbz	r2, 801df42 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6a>
 801df34:	2a25      	cmp	r2, #37	; 0x25
 801df36:	d001      	beq.n	801df3c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x64>
 801df38:	4299      	cmp	r1, r3
 801df3a:	dc05      	bgt.n	801df48 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x70>
 801df3c:	b9cd      	cbnz	r5, 801df72 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9a>
 801df3e:	2c00      	cmp	r4, #0
 801df40:	d0df      	beq.n	801df02 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801df42:	7822      	ldrb	r2, [r4, #0]
 801df44:	2500      	movs	r5, #0
 801df46:	e015      	b.n	801df74 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9c>
 801df48:	2d00      	cmp	r5, #0
 801df4a:	d073      	beq.n	801e034 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x15c>
 801df4c:	882a      	ldrh	r2, [r5, #0]
 801df4e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801df52:	b10d      	cbz	r5, 801df58 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x80>
 801df54:	3502      	adds	r5, #2
 801df56:	9509      	str	r5, [sp, #36]	; 0x24
 801df58:	b10c      	cbz	r4, 801df5e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x86>
 801df5a:	3401      	adds	r4, #1
 801df5c:	9408      	str	r4, [sp, #32]
 801df5e:	3301      	adds	r3, #1
 801df60:	930c      	str	r3, [sp, #48]	; 0x30
 801df62:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 801df66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801df68:	2d00      	cmp	r5, #0
 801df6a:	d0df      	beq.n	801df2c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x54>
 801df6c:	882a      	ldrh	r2, [r5, #0]
 801df6e:	2a00      	cmp	r2, #0
 801df70:	d1e0      	bne.n	801df34 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x5c>
 801df72:	882a      	ldrh	r2, [r5, #0]
 801df74:	2a00      	cmp	r2, #0
 801df76:	d0c4      	beq.n	801df02 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801df78:	4299      	cmp	r1, r3
 801df7a:	ddc2      	ble.n	801df02 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801df7c:	2300      	movs	r3, #0
 801df7e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801df82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801df86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801df8a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801df8e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801df92:	930d      	str	r3, [sp, #52]	; 0x34
 801df94:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801df98:	930e      	str	r3, [sp, #56]	; 0x38
 801df9a:	b10d      	cbz	r5, 801dfa0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xc8>
 801df9c:	1cab      	adds	r3, r5, #2
 801df9e:	9309      	str	r3, [sp, #36]	; 0x24
 801dfa0:	b10c      	cbz	r4, 801dfa6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xce>
 801dfa2:	1c63      	adds	r3, r4, #1
 801dfa4:	9308      	str	r3, [sp, #32]
 801dfa6:	ab0e      	add	r3, sp, #56	; 0x38
 801dfa8:	9305      	str	r3, [sp, #20]
 801dfaa:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801dfae:	9304      	str	r3, [sp, #16]
 801dfb0:	ab0d      	add	r3, sp, #52	; 0x34
 801dfb2:	9303      	str	r3, [sp, #12]
 801dfb4:	ab0b      	add	r3, sp, #44	; 0x2c
 801dfb6:	9302      	str	r3, [sp, #8]
 801dfb8:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801dfbc:	9301      	str	r3, [sp, #4]
 801dfbe:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801dfc2:	9300      	str	r3, [sp, #0]
 801dfc4:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 801dfc8:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 801dfcc:	a908      	add	r1, sp, #32
 801dfce:	a809      	add	r0, sp, #36	; 0x24
 801dfd0:	f7ff fd31 	bl	801da36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801dfd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dfd6:	2b00      	cmp	r3, #0
 801dfd8:	da0b      	bge.n	801dff2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x11a>
 801dfda:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801dfde:	edd3 7a00 	vldr	s15, [r3]
 801dfe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dfe6:	3601      	adds	r6, #1
 801dfe8:	ee17 3a90 	vmov	r3, s15
 801dfec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dff0:	930d      	str	r3, [sp, #52]	; 0x34
 801dff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dff4:	2b00      	cmp	r3, #0
 801dff6:	da0b      	bge.n	801e010 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x138>
 801dff8:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801dffc:	edd3 7a00 	vldr	s15, [r3]
 801e000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e004:	3601      	adds	r6, #1
 801e006:	ee17 3a90 	vmov	r3, s15
 801e00a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e00e:	930e      	str	r3, [sp, #56]	; 0x38
 801e010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e012:	b1a3      	cbz	r3, 801e03e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x166>
 801e014:	881a      	ldrh	r2, [r3, #0]
 801e016:	2a25      	cmp	r2, #37	; 0x25
 801e018:	d016      	beq.n	801e048 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x170>
 801e01a:	2a66      	cmp	r2, #102	; 0x66
 801e01c:	d01a      	beq.n	801e054 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17c>
 801e01e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 801e022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e024:	2d00      	cmp	r5, #0
 801e026:	f000 80fd 	beq.w	801e224 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x34c>
 801e02a:	882c      	ldrh	r4, [r5, #0]
 801e02c:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801e030:	3301      	adds	r3, #1
 801e032:	e00d      	b.n	801e050 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x178>
 801e034:	b10c      	cbz	r4, 801e03a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x162>
 801e036:	7822      	ldrb	r2, [r4, #0]
 801e038:	e789      	b.n	801df4e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 801e03a:	4622      	mov	r2, r4
 801e03c:	e787      	b.n	801df4e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 801e03e:	9b08      	ldr	r3, [sp, #32]
 801e040:	2b00      	cmp	r3, #0
 801e042:	d0ec      	beq.n	801e01e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x146>
 801e044:	781a      	ldrb	r2, [r3, #0]
 801e046:	e7e6      	b.n	801e016 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x13e>
 801e048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e04a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e04e:	3302      	adds	r3, #2
 801e050:	930c      	str	r3, [sp, #48]	; 0x30
 801e052:	e04b      	b.n	801e0ec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x214>
 801e054:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801e058:	ed93 7a00 	vldr	s14, [r3]
 801e05c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801e060:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 801e064:	3601      	adds	r6, #1
 801e066:	b923      	cbnz	r3, 801e072 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19a>
 801e068:	2301      	movs	r3, #1
 801e06a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801e06e:	2306      	movs	r3, #6
 801e070:	930e      	str	r3, [sp, #56]	; 0x38
 801e072:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801e076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e07a:	bf48      	it	mi
 801e07c:	eeb1 7a47 	vnegmi.f32	s14, s14
 801e080:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e084:	ee77 6a67 	vsub.f32	s13, s14, s15
 801e088:	bf48      	it	mi
 801e08a:	232d      	movmi	r3, #45	; 0x2d
 801e08c:	eef4 6a47 	vcmp.f32	s13, s14
 801e090:	bf48      	it	mi
 801e092:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801e096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e09a:	d132      	bne.n	801e102 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x22a>
 801e09c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e0a0:	eef4 7a47 	vcmp.f32	s15, s14
 801e0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0a8:	d12b      	bne.n	801e102 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x22a>
 801e0aa:	4b61      	ldr	r3, [pc, #388]	; (801e230 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x358>)
 801e0ac:	9310      	str	r3, [sp, #64]	; 0x40
 801e0ae:	2366      	movs	r3, #102	; 0x66
 801e0b0:	9311      	str	r3, [sp, #68]	; 0x44
 801e0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0b4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801e0b8:	2b00      	cmp	r3, #0
 801e0ba:	f000 80ad 	beq.w	801e218 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x340>
 801e0be:	881a      	ldrh	r2, [r3, #0]
 801e0c0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801e0c4:	a80c      	add	r0, sp, #48	; 0x30
 801e0c6:	9005      	str	r0, [sp, #20]
 801e0c8:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 801e0cc:	9004      	str	r0, [sp, #16]
 801e0ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e0d0:	9003      	str	r0, [sp, #12]
 801e0d2:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 801e0d6:	9002      	str	r0, [sp, #8]
 801e0d8:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e0da:	9001      	str	r0, [sp, #4]
 801e0dc:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 801e0e0:	9000      	str	r0, [sp, #0]
 801e0e2:	e9cd 9706 	strd	r9, r7, [sp, #24]
 801e0e6:	a80f      	add	r0, sp, #60	; 0x3c
 801e0e8:	f7ff fbe2 	bl	801d8b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801e0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0ee:	b10b      	cbz	r3, 801e0f4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x21c>
 801e0f0:	3302      	adds	r3, #2
 801e0f2:	9309      	str	r3, [sp, #36]	; 0x24
 801e0f4:	9b08      	ldr	r3, [sp, #32]
 801e0f6:	2b00      	cmp	r3, #0
 801e0f8:	f43f af03 	beq.w	801df02 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801e0fc:	3301      	adds	r3, #1
 801e0fe:	9308      	str	r3, [sp, #32]
 801e100:	e6ff      	b.n	801df02 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801e102:	eeb4 7a47 	vcmp.f32	s14, s14
 801e106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e10a:	d10b      	bne.n	801e124 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x24c>
 801e10c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e10e:	eddf 7a49 	vldr	s15, [pc, #292]	; 801e234 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x35c>
 801e112:	2300      	movs	r3, #0
 801e114:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801e118:	4283      	cmp	r3, r0
 801e11a:	da07      	bge.n	801e12c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x254>
 801e11c:	eec7 7a86 	vdiv.f32	s15, s15, s12
 801e120:	3301      	adds	r3, #1
 801e122:	e7f9      	b.n	801e118 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x240>
 801e124:	4b44      	ldr	r3, [pc, #272]	; (801e238 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x360>)
 801e126:	9310      	str	r3, [sp, #64]	; 0x40
 801e128:	236e      	movs	r3, #110	; 0x6e
 801e12a:	e7c1      	b.n	801e0b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d8>
 801e12c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e134:	eeb0 7a67 	vmov.f32	s14, s15
 801e138:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801e13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e140:	da27      	bge.n	801e192 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2ba>
 801e142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e144:	2100      	movs	r1, #0
 801e146:	eba9 0202 	sub.w	r2, r9, r2
 801e14a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801e14e:	eef4 6ae5 	vcmpe.f32	s13, s11
 801e152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e156:	b28c      	uxth	r4, r1
 801e158:	db21      	blt.n	801e19e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 801e15a:	1a53      	subs	r3, r2, r1
 801e15c:	2b00      	cmp	r3, #0
 801e15e:	dd1e      	ble.n	801e19e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 801e160:	2963      	cmp	r1, #99	; 0x63
 801e162:	d01b      	beq.n	801e19c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c4>
 801e164:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801e168:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801e16c:	ee17 3a10 	vmov	r3, s14
 801e170:	2b09      	cmp	r3, #9
 801e172:	bfa8      	it	ge
 801e174:	2309      	movge	r3, #9
 801e176:	ee07 3a10 	vmov	s14, r3
 801e17a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e17e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801e182:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
 801e186:	eee7 7a66 	vfms.f32	s15, s14, s13
 801e18a:	3101      	adds	r1, #1
 801e18c:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801e190:	e7dd      	b.n	801e14e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x276>
 801e192:	ee66 6a86 	vmul.f32	s13, s13, s12
 801e196:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801e19a:	e7cd      	b.n	801e138 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x260>
 801e19c:	460c      	mov	r4, r1
 801e19e:	2a63      	cmp	r2, #99	; 0x63
 801e1a0:	bfd4      	ite	le
 801e1a2:	ebc4 0202 	rsble	r2, r4, r2
 801e1a6:	f1c4 0263 	rsbgt	r2, r4, #99	; 0x63
 801e1aa:	2a00      	cmp	r2, #0
 801e1ac:	dd2f      	ble.n	801e20e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x336>
 801e1ae:	4603      	mov	r3, r0
 801e1b0:	2501      	movs	r5, #1
 801e1b2:	2b00      	cmp	r3, #0
 801e1b4:	dd0d      	ble.n	801e1d2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2fa>
 801e1b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 801e1ba:	3b01      	subs	r3, #1
 801e1bc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e1c0:	ee17 1a10 	vmov	r1, s14
 801e1c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e1c8:	fb0b 1505 	mla	r5, fp, r5, r1
 801e1cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e1d0:	e7ef      	b.n	801e1b2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2da>
 801e1d2:	2800      	cmp	r0, #0
 801e1d4:	f100 33ff 	add.w	r3, r0, #4294967295
 801e1d8:	bfac      	ite	ge
 801e1da:	1a18      	subge	r0, r3, r0
 801e1dc:	4618      	movlt	r0, r3
 801e1de:	0064      	lsls	r4, r4, #1
 801e1e0:	900e      	str	r0, [sp, #56]	; 0x38
 801e1e2:	230a      	movs	r3, #10
 801e1e4:	b292      	uxth	r2, r2
 801e1e6:	eb08 0104 	add.w	r1, r8, r4
 801e1ea:	4628      	mov	r0, r5
 801e1ec:	f7ff fb2e 	bl	801d84c <_ZN8touchgfx7Unicode4itoaElPtti>
 801e1f0:	2d01      	cmp	r5, #1
 801e1f2:	dc0a      	bgt.n	801e20a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x332>
 801e1f4:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	bf0c      	ite	eq
 801e1fc:	2300      	moveq	r3, #0
 801e1fe:	232e      	movne	r3, #46	; 0x2e
 801e200:	aa42      	add	r2, sp, #264	; 0x108
 801e202:	4414      	add	r4, r2
 801e204:	f824 3cc8 	strh.w	r3, [r4, #-200]
 801e208:	e753      	b.n	801e0b2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1da>
 801e20a:	232e      	movs	r3, #46	; 0x2e
 801e20c:	e7f8      	b.n	801e200 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x328>
 801e20e:	ab42      	add	r3, sp, #264	; 0x108
 801e210:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801e214:	2300      	movs	r3, #0
 801e216:	e7f5      	b.n	801e204 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32c>
 801e218:	9a08      	ldr	r2, [sp, #32]
 801e21a:	2a00      	cmp	r2, #0
 801e21c:	f43f af50 	beq.w	801e0c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e8>
 801e220:	7812      	ldrb	r2, [r2, #0]
 801e222:	e74d      	b.n	801e0c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e8>
 801e224:	2c00      	cmp	r4, #0
 801e226:	f43f af01 	beq.w	801e02c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 801e22a:	7824      	ldrb	r4, [r4, #0]
 801e22c:	e6fe      	b.n	801e02c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 801e22e:	bf00      	nop
 801e230:	006e0069 	.word	0x006e0069
 801e234:	3f000002 	.word	0x3f000002
 801e238:	0061006e 	.word	0x0061006e

0801e23c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801e23c:	b507      	push	{r0, r1, r2, lr}
 801e23e:	9300      	str	r3, [sp, #0]
 801e240:	4613      	mov	r3, r2
 801e242:	2200      	movs	r2, #0
 801e244:	f7ff fe48 	bl	801ded8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 801e248:	b003      	add	sp, #12
 801e24a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801e250 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801e250:	4b01      	ldr	r3, [pc, #4]	; (801e258 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801e252:	6018      	str	r0, [r3, #0]
 801e254:	4770      	bx	lr
 801e256:	bf00      	nop
 801e258:	20006830 	.word	0x20006830

0801e25c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801e25c:	4b06      	ldr	r3, [pc, #24]	; (801e278 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801e25e:	881a      	ldrh	r2, [r3, #0]
 801e260:	4282      	cmp	r2, r0
 801e262:	d807      	bhi.n	801e274 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801e264:	4b05      	ldr	r3, [pc, #20]	; (801e27c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801e266:	881b      	ldrh	r3, [r3, #0]
 801e268:	4413      	add	r3, r2
 801e26a:	4298      	cmp	r0, r3
 801e26c:	bfac      	ite	ge
 801e26e:	2000      	movge	r0, #0
 801e270:	2001      	movlt	r0, #1
 801e272:	4770      	bx	lr
 801e274:	2000      	movs	r0, #0
 801e276:	4770      	bx	lr
 801e278:	20006850 	.word	0x20006850
 801e27c:	20006854 	.word	0x20006854

0801e280 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801e280:	b508      	push	{r3, lr}
 801e282:	4601      	mov	r1, r0
 801e284:	f7ff ffea 	bl	801e25c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e288:	b118      	cbz	r0, 801e292 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801e28a:	4b02      	ldr	r3, [pc, #8]	; (801e294 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801e28c:	681b      	ldr	r3, [r3, #0]
 801e28e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801e292:	bd08      	pop	{r3, pc}
 801e294:	20006834 	.word	0x20006834

0801e298 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801e298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e29c:	4d28      	ldr	r5, [pc, #160]	; (801e340 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801e29e:	682b      	ldr	r3, [r5, #0]
 801e2a0:	2b00      	cmp	r3, #0
 801e2a2:	d04a      	beq.n	801e33a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801e2a4:	4a27      	ldr	r2, [pc, #156]	; (801e344 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801e2a6:	4e28      	ldr	r6, [pc, #160]	; (801e348 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801e2a8:	8810      	ldrh	r0, [r2, #0]
 801e2aa:	f8b6 8000 	ldrh.w	r8, [r6]
 801e2ae:	4c27      	ldr	r4, [pc, #156]	; (801e34c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801e2b0:	4f27      	ldr	r7, [pc, #156]	; (801e350 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801e2b2:	4440      	add	r0, r8
 801e2b4:	1c41      	adds	r1, r0, #1
 801e2b6:	f021 0101 	bic.w	r1, r1, #1
 801e2ba:	0409      	lsls	r1, r1, #16
 801e2bc:	0c09      	lsrs	r1, r1, #16
 801e2be:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801e2c2:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801e2c6:	eb03 020e 	add.w	r2, r3, lr
 801e2ca:	eb0e 010c 	add.w	r1, lr, ip
 801e2ce:	6022      	str	r2, [r4, #0]
 801e2d0:	185a      	adds	r2, r3, r1
 801e2d2:	603a      	str	r2, [r7, #0]
 801e2d4:	220e      	movs	r2, #14
 801e2d6:	fb02 f208 	mul.w	r2, r2, r8
 801e2da:	3203      	adds	r2, #3
 801e2dc:	f022 0203 	bic.w	r2, r2, #3
 801e2e0:	4411      	add	r1, r2
 801e2e2:	440b      	add	r3, r1
 801e2e4:	491b      	ldr	r1, [pc, #108]	; (801e354 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801e2e6:	600b      	str	r3, [r1, #0]
 801e2e8:	491b      	ldr	r1, [pc, #108]	; (801e358 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801e2ea:	2300      	movs	r3, #0
 801e2ec:	800b      	strh	r3, [r1, #0]
 801e2ee:	491b      	ldr	r1, [pc, #108]	; (801e35c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801e2f0:	6809      	ldr	r1, [r1, #0]
 801e2f2:	eba1 010e 	sub.w	r1, r1, lr
 801e2f6:	eba1 010c 	sub.w	r1, r1, ip
 801e2fa:	1a8a      	subs	r2, r1, r2
 801e2fc:	4918      	ldr	r1, [pc, #96]	; (801e360 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801e2fe:	600a      	str	r2, [r1, #0]
 801e300:	4a18      	ldr	r2, [pc, #96]	; (801e364 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801e302:	469c      	mov	ip, r3
 801e304:	8013      	strh	r3, [r2, #0]
 801e306:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e30a:	4283      	cmp	r3, r0
 801e30c:	d10d      	bne.n	801e32a <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801e30e:	8835      	ldrh	r5, [r6, #0]
 801e310:	6838      	ldr	r0, [r7, #0]
 801e312:	2300      	movs	r3, #0
 801e314:	240e      	movs	r4, #14
 801e316:	429d      	cmp	r5, r3
 801e318:	d90f      	bls.n	801e33a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801e31a:	fb04 0203 	mla	r2, r4, r3, r0
 801e31e:	3301      	adds	r3, #1
 801e320:	7b11      	ldrb	r1, [r2, #12]
 801e322:	f36f 1145 	bfc	r1, #5, #1
 801e326:	7311      	strb	r1, [r2, #12]
 801e328:	e7f5      	b.n	801e316 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801e32a:	682a      	ldr	r2, [r5, #0]
 801e32c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801e330:	6822      	ldr	r2, [r4, #0]
 801e332:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801e336:	3301      	adds	r3, #1
 801e338:	e7e7      	b.n	801e30a <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801e33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e33e:	bf00      	nop
 801e340:	20006834 	.word	0x20006834
 801e344:	20006850 	.word	0x20006850
 801e348:	20006854 	.word	0x20006854
 801e34c:	20006848 	.word	0x20006848
 801e350:	20006838 	.word	0x20006838
 801e354:	20006840 	.word	0x20006840
 801e358:	20006852 	.word	0x20006852
 801e35c:	2000683c 	.word	0x2000683c
 801e360:	2000684c 	.word	0x2000684c
 801e364:	20006844 	.word	0x20006844

0801e368 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801e368:	b510      	push	{r4, lr}
 801e36a:	4b10      	ldr	r3, [pc, #64]	; (801e3ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801e36c:	681b      	ldr	r3, [r3, #0]
 801e36e:	b9db      	cbnz	r3, 801e3a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801e370:	b1d1      	cbz	r1, 801e3a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801e372:	4b0f      	ldr	r3, [pc, #60]	; (801e3b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801e374:	801a      	strh	r2, [r3, #0]
 801e376:	4b0f      	ldr	r3, [pc, #60]	; (801e3b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801e378:	881b      	ldrh	r3, [r3, #0]
 801e37a:	b292      	uxth	r2, r2
 801e37c:	240e      	movs	r4, #14
 801e37e:	4413      	add	r3, r2
 801e380:	4362      	muls	r2, r4
 801e382:	2406      	movs	r4, #6
 801e384:	fb04 2203 	mla	r2, r4, r3, r2
 801e388:	428a      	cmp	r2, r1
 801e38a:	d305      	bcc.n	801e398 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801e38c:	4b0a      	ldr	r3, [pc, #40]	; (801e3b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801e38e:	4a0b      	ldr	r2, [pc, #44]	; (801e3bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801e390:	480b      	ldr	r0, [pc, #44]	; (801e3c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801e392:	2135      	movs	r1, #53	; 0x35
 801e394:	f00e f9a8 	bl	802c6e8 <__assert_func>
 801e398:	4b0a      	ldr	r3, [pc, #40]	; (801e3c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801e39a:	6019      	str	r1, [r3, #0]
 801e39c:	4b0a      	ldr	r3, [pc, #40]	; (801e3c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801e39e:	6018      	str	r0, [r3, #0]
 801e3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e3a4:	f7ff bf78 	b.w	801e298 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801e3a8:	bd10      	pop	{r4, pc}
 801e3aa:	bf00      	nop
 801e3ac:	20006840 	.word	0x20006840
 801e3b0:	20006854 	.word	0x20006854
 801e3b4:	20006850 	.word	0x20006850
 801e3b8:	08031781 	.word	0x08031781
 801e3bc:	08031816 	.word	0x08031816
 801e3c0:	0803175c 	.word	0x0803175c
 801e3c4:	2000683c 	.word	0x2000683c
 801e3c8:	20006834 	.word	0x20006834

0801e3cc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801e3cc:	b470      	push	{r4, r5, r6}
 801e3ce:	4c07      	ldr	r4, [pc, #28]	; (801e3ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801e3d0:	6826      	ldr	r6, [r4, #0]
 801e3d2:	4605      	mov	r5, r0
 801e3d4:	4610      	mov	r0, r2
 801e3d6:	9a03      	ldr	r2, [sp, #12]
 801e3d8:	b936      	cbnz	r6, 801e3e8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801e3da:	6025      	str	r5, [r4, #0]
 801e3dc:	4c04      	ldr	r4, [pc, #16]	; (801e3f0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801e3de:	8021      	strh	r1, [r4, #0]
 801e3e0:	bc70      	pop	{r4, r5, r6}
 801e3e2:	4619      	mov	r1, r3
 801e3e4:	f7ff bfc0 	b.w	801e368 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801e3e8:	bc70      	pop	{r4, r5, r6}
 801e3ea:	4770      	bx	lr
 801e3ec:	20006858 	.word	0x20006858
 801e3f0:	20006850 	.word	0x20006850

0801e3f4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801e3f4:	b508      	push	{r3, lr}
 801e3f6:	4b14      	ldr	r3, [pc, #80]	; (801e448 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801e3f8:	6819      	ldr	r1, [r3, #0]
 801e3fa:	b931      	cbnz	r1, 801e40a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801e3fc:	4b13      	ldr	r3, [pc, #76]	; (801e44c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801e3fe:	4a14      	ldr	r2, [pc, #80]	; (801e450 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801e400:	4814      	ldr	r0, [pc, #80]	; (801e454 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801e402:	f240 4186 	movw	r1, #1158	; 0x486
 801e406:	f00e f96f 	bl	802c6e8 <__assert_func>
 801e40a:	4a13      	ldr	r2, [pc, #76]	; (801e458 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801e40c:	8803      	ldrh	r3, [r0, #0]
 801e40e:	8812      	ldrh	r2, [r2, #0]
 801e410:	4293      	cmp	r3, r2
 801e412:	d204      	bcs.n	801e41e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801e414:	2214      	movs	r2, #20
 801e416:	fb02 1303 	mla	r3, r2, r3, r1
 801e41a:	8918      	ldrh	r0, [r3, #8]
 801e41c:	bd08      	pop	{r3, pc}
 801e41e:	490f      	ldr	r1, [pc, #60]	; (801e45c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801e420:	8809      	ldrh	r1, [r1, #0]
 801e422:	4411      	add	r1, r2
 801e424:	428b      	cmp	r3, r1
 801e426:	da06      	bge.n	801e436 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801e428:	1a9b      	subs	r3, r3, r2
 801e42a:	4a0d      	ldr	r2, [pc, #52]	; (801e460 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801e42c:	6812      	ldr	r2, [r2, #0]
 801e42e:	210e      	movs	r1, #14
 801e430:	fb01 2303 	mla	r3, r1, r3, r2
 801e434:	e7f1      	b.n	801e41a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801e436:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e43a:	4293      	cmp	r3, r2
 801e43c:	bf0a      	itet	eq
 801e43e:	4b09      	ldreq	r3, [pc, #36]	; (801e464 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801e440:	2000      	movne	r0, #0
 801e442:	8818      	ldrheq	r0, [r3, #0]
 801e444:	e7ea      	b.n	801e41c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801e446:	bf00      	nop
 801e448:	20006858 	.word	0x20006858
 801e44c:	080317da 	.word	0x080317da
 801e450:	080318c3 	.word	0x080318c3
 801e454:	0803175c 	.word	0x0803175c
 801e458:	20006850 	.word	0x20006850
 801e45c:	20006854 	.word	0x20006854
 801e460:	20006838 	.word	0x20006838
 801e464:	200067c4 	.word	0x200067c4

0801e468 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801e468:	b508      	push	{r3, lr}
 801e46a:	4b14      	ldr	r3, [pc, #80]	; (801e4bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801e46c:	6819      	ldr	r1, [r3, #0]
 801e46e:	b931      	cbnz	r1, 801e47e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801e470:	4b13      	ldr	r3, [pc, #76]	; (801e4c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801e472:	4a14      	ldr	r2, [pc, #80]	; (801e4c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801e474:	4814      	ldr	r0, [pc, #80]	; (801e4c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801e476:	f240 419a 	movw	r1, #1178	; 0x49a
 801e47a:	f00e f935 	bl	802c6e8 <__assert_func>
 801e47e:	4a13      	ldr	r2, [pc, #76]	; (801e4cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801e480:	8803      	ldrh	r3, [r0, #0]
 801e482:	8812      	ldrh	r2, [r2, #0]
 801e484:	4293      	cmp	r3, r2
 801e486:	d204      	bcs.n	801e492 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801e488:	2214      	movs	r2, #20
 801e48a:	fb02 1303 	mla	r3, r2, r3, r1
 801e48e:	8958      	ldrh	r0, [r3, #10]
 801e490:	bd08      	pop	{r3, pc}
 801e492:	490f      	ldr	r1, [pc, #60]	; (801e4d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801e494:	8809      	ldrh	r1, [r1, #0]
 801e496:	4411      	add	r1, r2
 801e498:	428b      	cmp	r3, r1
 801e49a:	da06      	bge.n	801e4aa <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801e49c:	1a9b      	subs	r3, r3, r2
 801e49e:	4a0d      	ldr	r2, [pc, #52]	; (801e4d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801e4a0:	6812      	ldr	r2, [r2, #0]
 801e4a2:	210e      	movs	r1, #14
 801e4a4:	fb01 2303 	mla	r3, r1, r3, r2
 801e4a8:	e7f1      	b.n	801e48e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801e4aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e4ae:	4293      	cmp	r3, r2
 801e4b0:	bf0a      	itet	eq
 801e4b2:	4b09      	ldreq	r3, [pc, #36]	; (801e4d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801e4b4:	2000      	movne	r0, #0
 801e4b6:	8818      	ldrheq	r0, [r3, #0]
 801e4b8:	e7ea      	b.n	801e490 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801e4ba:	bf00      	nop
 801e4bc:	20006858 	.word	0x20006858
 801e4c0:	080317da 	.word	0x080317da
 801e4c4:	080318ef 	.word	0x080318ef
 801e4c8:	0803175c 	.word	0x0803175c
 801e4cc:	20006850 	.word	0x20006850
 801e4d0:	20006854 	.word	0x20006854
 801e4d4:	20006838 	.word	0x20006838
 801e4d8:	200067c6 	.word	0x200067c6

0801e4dc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801e4dc:	b510      	push	{r4, lr}
 801e4de:	4b23      	ldr	r3, [pc, #140]	; (801e56c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801e4e0:	681c      	ldr	r4, [r3, #0]
 801e4e2:	b934      	cbnz	r4, 801e4f2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801e4e4:	4b22      	ldr	r3, [pc, #136]	; (801e570 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801e4e6:	4a23      	ldr	r2, [pc, #140]	; (801e574 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801e4e8:	4823      	ldr	r0, [pc, #140]	; (801e578 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801e4ea:	f240 41ae 	movw	r1, #1198	; 0x4ae
 801e4ee:	f00e f8fb 	bl	802c6e8 <__assert_func>
 801e4f2:	4a22      	ldr	r2, [pc, #136]	; (801e57c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801e4f4:	880b      	ldrh	r3, [r1, #0]
 801e4f6:	8812      	ldrh	r2, [r2, #0]
 801e4f8:	4293      	cmp	r3, r2
 801e4fa:	d211      	bcs.n	801e520 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801e4fc:	2214      	movs	r2, #20
 801e4fe:	fb02 4303 	mla	r3, r2, r3, r4
 801e502:	8a1a      	ldrh	r2, [r3, #16]
 801e504:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801e508:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801e50c:	8a5b      	ldrh	r3, [r3, #18]
 801e50e:	8004      	strh	r4, [r0, #0]
 801e510:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e518:	8041      	strh	r1, [r0, #2]
 801e51a:	8082      	strh	r2, [r0, #4]
 801e51c:	80c3      	strh	r3, [r0, #6]
 801e51e:	e00e      	b.n	801e53e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801e520:	4917      	ldr	r1, [pc, #92]	; (801e580 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801e522:	8809      	ldrh	r1, [r1, #0]
 801e524:	4411      	add	r1, r2
 801e526:	428b      	cmp	r3, r1
 801e528:	da0a      	bge.n	801e540 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801e52a:	1a9b      	subs	r3, r3, r2
 801e52c:	4a15      	ldr	r2, [pc, #84]	; (801e584 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801e52e:	6812      	ldr	r2, [r2, #0]
 801e530:	210e      	movs	r1, #14
 801e532:	fb01 2303 	mla	r3, r1, r3, r2
 801e536:	681a      	ldr	r2, [r3, #0]
 801e538:	6002      	str	r2, [r0, #0]
 801e53a:	685a      	ldr	r2, [r3, #4]
 801e53c:	6042      	str	r2, [r0, #4]
 801e53e:	bd10      	pop	{r4, pc}
 801e540:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e544:	4293      	cmp	r3, r2
 801e546:	d10b      	bne.n	801e560 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801e548:	4b0f      	ldr	r3, [pc, #60]	; (801e588 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801e54a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e54e:	4b0f      	ldr	r3, [pc, #60]	; (801e58c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801e550:	8081      	strh	r1, [r0, #4]
 801e552:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e556:	80c2      	strh	r2, [r0, #6]
 801e558:	2300      	movs	r3, #0
 801e55a:	8003      	strh	r3, [r0, #0]
 801e55c:	8043      	strh	r3, [r0, #2]
 801e55e:	e7ee      	b.n	801e53e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801e560:	2300      	movs	r3, #0
 801e562:	8003      	strh	r3, [r0, #0]
 801e564:	8043      	strh	r3, [r0, #2]
 801e566:	8083      	strh	r3, [r0, #4]
 801e568:	e7d8      	b.n	801e51c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801e56a:	bf00      	nop
 801e56c:	20006858 	.word	0x20006858
 801e570:	080317da 	.word	0x080317da
 801e574:	0803185c 	.word	0x0803185c
 801e578:	0803175c 	.word	0x0803175c
 801e57c:	20006850 	.word	0x20006850
 801e580:	20006854 	.word	0x20006854
 801e584:	20006838 	.word	0x20006838
 801e588:	200067c4 	.word	0x200067c4
 801e58c:	200067c6 	.word	0x200067c6

0801e590 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801e590:	4b18      	ldr	r3, [pc, #96]	; (801e5f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801e592:	681b      	ldr	r3, [r3, #0]
 801e594:	b34b      	cbz	r3, 801e5ea <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801e596:	4a18      	ldr	r2, [pc, #96]	; (801e5f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801e598:	8800      	ldrh	r0, [r0, #0]
 801e59a:	8812      	ldrh	r2, [r2, #0]
 801e59c:	4290      	cmp	r0, r2
 801e59e:	d211      	bcs.n	801e5c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801e5a0:	2214      	movs	r2, #20
 801e5a2:	fb02 3300 	mla	r3, r2, r0, r3
 801e5a6:	8a1a      	ldrh	r2, [r3, #16]
 801e5a8:	8919      	ldrh	r1, [r3, #8]
 801e5aa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e5ae:	428a      	cmp	r2, r1
 801e5b0:	db1d      	blt.n	801e5ee <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801e5b2:	8a58      	ldrh	r0, [r3, #18]
 801e5b4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801e5b8:	895b      	ldrh	r3, [r3, #10]
 801e5ba:	4298      	cmp	r0, r3
 801e5bc:	bfac      	ite	ge
 801e5be:	2000      	movge	r0, #0
 801e5c0:	2001      	movlt	r0, #1
 801e5c2:	4770      	bx	lr
 801e5c4:	4b0d      	ldr	r3, [pc, #52]	; (801e5fc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801e5c6:	881b      	ldrh	r3, [r3, #0]
 801e5c8:	4413      	add	r3, r2
 801e5ca:	4298      	cmp	r0, r3
 801e5cc:	da0d      	bge.n	801e5ea <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801e5ce:	4b0c      	ldr	r3, [pc, #48]	; (801e600 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801e5d0:	681b      	ldr	r3, [r3, #0]
 801e5d2:	1a80      	subs	r0, r0, r2
 801e5d4:	220e      	movs	r2, #14
 801e5d6:	fb02 3300 	mla	r3, r2, r0, r3
 801e5da:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801e5de:	891a      	ldrh	r2, [r3, #8]
 801e5e0:	4291      	cmp	r1, r2
 801e5e2:	db04      	blt.n	801e5ee <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801e5e4:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801e5e8:	e7e6      	b.n	801e5b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801e5ea:	2000      	movs	r0, #0
 801e5ec:	4770      	bx	lr
 801e5ee:	2001      	movs	r0, #1
 801e5f0:	4770      	bx	lr
 801e5f2:	bf00      	nop
 801e5f4:	20006858 	.word	0x20006858
 801e5f8:	20006850 	.word	0x20006850
 801e5fc:	20006854 	.word	0x20006854
 801e600:	20006838 	.word	0x20006838

0801e604 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801e604:	b508      	push	{r3, lr}
 801e606:	4b12      	ldr	r3, [pc, #72]	; (801e650 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801e608:	6819      	ldr	r1, [r3, #0]
 801e60a:	b931      	cbnz	r1, 801e61a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801e60c:	4b11      	ldr	r3, [pc, #68]	; (801e654 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e60e:	4a12      	ldr	r2, [pc, #72]	; (801e658 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801e610:	4812      	ldr	r0, [pc, #72]	; (801e65c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801e612:	f240 41d2 	movw	r1, #1234	; 0x4d2
 801e616:	f00e f867 	bl	802c6e8 <__assert_func>
 801e61a:	8803      	ldrh	r3, [r0, #0]
 801e61c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e620:	4293      	cmp	r3, r2
 801e622:	d012      	beq.n	801e64a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801e624:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e628:	4293      	cmp	r3, r2
 801e62a:	d103      	bne.n	801e634 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801e62c:	4b0c      	ldr	r3, [pc, #48]	; (801e660 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801e62e:	681b      	ldr	r3, [r3, #0]
 801e630:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801e632:	bd08      	pop	{r3, pc}
 801e634:	4a0b      	ldr	r2, [pc, #44]	; (801e664 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801e636:	6812      	ldr	r2, [r2, #0]
 801e638:	b11a      	cbz	r2, 801e642 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801e63a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e63e:	2800      	cmp	r0, #0
 801e640:	d1f7      	bne.n	801e632 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e642:	2214      	movs	r2, #20
 801e644:	4353      	muls	r3, r2
 801e646:	58c8      	ldr	r0, [r1, r3]
 801e648:	e7f3      	b.n	801e632 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e64a:	2000      	movs	r0, #0
 801e64c:	e7f1      	b.n	801e632 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e64e:	bf00      	nop
 801e650:	20006858 	.word	0x20006858
 801e654:	080317da 	.word	0x080317da
 801e658:	08031892 	.word	0x08031892
 801e65c:	0803175c 	.word	0x0803175c
 801e660:	200067d0 	.word	0x200067d0
 801e664:	20006834 	.word	0x20006834

0801e668 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801e668:	8802      	ldrh	r2, [r0, #0]
 801e66a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801e66e:	429a      	cmp	r2, r3
 801e670:	d845      	bhi.n	801e6fe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801e672:	4b24      	ldr	r3, [pc, #144]	; (801e704 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e674:	8818      	ldrh	r0, [r3, #0]
 801e676:	4282      	cmp	r2, r0
 801e678:	d221      	bcs.n	801e6be <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801e67a:	4b23      	ldr	r3, [pc, #140]	; (801e708 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801e67c:	6819      	ldr	r1, [r3, #0]
 801e67e:	2314      	movs	r3, #20
 801e680:	fb03 1302 	mla	r3, r3, r2, r1
 801e684:	6858      	ldr	r0, [r3, #4]
 801e686:	2800      	cmp	r0, #0
 801e688:	d03a      	beq.n	801e700 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801e68a:	4920      	ldr	r1, [pc, #128]	; (801e70c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801e68c:	6809      	ldr	r1, [r1, #0]
 801e68e:	2900      	cmp	r1, #0
 801e690:	d036      	beq.n	801e700 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801e692:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801e696:	2900      	cmp	r1, #0
 801e698:	d032      	beq.n	801e700 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801e69a:	891a      	ldrh	r2, [r3, #8]
 801e69c:	8958      	ldrh	r0, [r3, #10]
 801e69e:	4350      	muls	r0, r2
 801e6a0:	7c5a      	ldrb	r2, [r3, #17]
 801e6a2:	7cdb      	ldrb	r3, [r3, #19]
 801e6a4:	0952      	lsrs	r2, r2, #5
 801e6a6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801e6aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801e6ae:	2b0b      	cmp	r3, #11
 801e6b0:	bf18      	it	ne
 801e6b2:	0040      	lslne	r0, r0, #1
 801e6b4:	3003      	adds	r0, #3
 801e6b6:	f020 0003 	bic.w	r0, r0, #3
 801e6ba:	4408      	add	r0, r1
 801e6bc:	4770      	bx	lr
 801e6be:	4b14      	ldr	r3, [pc, #80]	; (801e710 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801e6c0:	881b      	ldrh	r3, [r3, #0]
 801e6c2:	4403      	add	r3, r0
 801e6c4:	429a      	cmp	r2, r3
 801e6c6:	da1a      	bge.n	801e6fe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801e6c8:	4b12      	ldr	r3, [pc, #72]	; (801e714 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801e6ca:	681b      	ldr	r3, [r3, #0]
 801e6cc:	1a10      	subs	r0, r2, r0
 801e6ce:	210e      	movs	r1, #14
 801e6d0:	fb01 3000 	mla	r0, r1, r0, r3
 801e6d4:	7b03      	ldrb	r3, [r0, #12]
 801e6d6:	f003 031f 	and.w	r3, r3, #31
 801e6da:	2b0b      	cmp	r3, #11
 801e6dc:	d10b      	bne.n	801e6f6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e6de:	8903      	ldrh	r3, [r0, #8]
 801e6e0:	8940      	ldrh	r0, [r0, #10]
 801e6e2:	4358      	muls	r0, r3
 801e6e4:	4b09      	ldr	r3, [pc, #36]	; (801e70c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801e6e6:	6819      	ldr	r1, [r3, #0]
 801e6e8:	3003      	adds	r0, #3
 801e6ea:	f020 0303 	bic.w	r3, r0, #3
 801e6ee:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801e6f2:	4418      	add	r0, r3
 801e6f4:	4770      	bx	lr
 801e6f6:	2b0d      	cmp	r3, #13
 801e6f8:	d101      	bne.n	801e6fe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801e6fa:	300d      	adds	r0, #13
 801e6fc:	4770      	bx	lr
 801e6fe:	2000      	movs	r0, #0
 801e700:	4770      	bx	lr
 801e702:	bf00      	nop
 801e704:	20006850 	.word	0x20006850
 801e708:	20006858 	.word	0x20006858
 801e70c:	20006834 	.word	0x20006834
 801e710:	20006854 	.word	0x20006854
 801e714:	20006838 	.word	0x20006838

0801e718 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801e718:	b510      	push	{r4, lr}
 801e71a:	4b17      	ldr	r3, [pc, #92]	; (801e778 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801e71c:	6819      	ldr	r1, [r3, #0]
 801e71e:	8803      	ldrh	r3, [r0, #0]
 801e720:	b1e9      	cbz	r1, 801e75e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801e722:	4a16      	ldr	r2, [pc, #88]	; (801e77c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801e724:	8812      	ldrh	r2, [r2, #0]
 801e726:	429a      	cmp	r2, r3
 801e728:	d90a      	bls.n	801e740 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801e72a:	2214      	movs	r2, #20
 801e72c:	fb02 1303 	mla	r3, r2, r3, r1
 801e730:	7c58      	ldrb	r0, [r3, #17]
 801e732:	0942      	lsrs	r2, r0, #5
 801e734:	7cd8      	ldrb	r0, [r3, #19]
 801e736:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801e73a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801e73e:	bd10      	pop	{r4, pc}
 801e740:	490f      	ldr	r1, [pc, #60]	; (801e780 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801e742:	8809      	ldrh	r1, [r1, #0]
 801e744:	4411      	add	r1, r2
 801e746:	428b      	cmp	r3, r1
 801e748:	da09      	bge.n	801e75e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801e74a:	1a9b      	subs	r3, r3, r2
 801e74c:	4a0d      	ldr	r2, [pc, #52]	; (801e784 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801e74e:	6812      	ldr	r2, [r2, #0]
 801e750:	210e      	movs	r1, #14
 801e752:	fb01 2303 	mla	r3, r1, r3, r2
 801e756:	7b18      	ldrb	r0, [r3, #12]
 801e758:	f000 001f 	and.w	r0, r0, #31
 801e75c:	e7ef      	b.n	801e73e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801e75e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e762:	4293      	cmp	r3, r2
 801e764:	d106      	bne.n	801e774 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801e766:	f7f0 fc05 	bl	800ef74 <_ZN8touchgfx3HAL3lcdEv>
 801e76a:	6803      	ldr	r3, [r0, #0]
 801e76c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e772:	4718      	bx	r3
 801e774:	2000      	movs	r0, #0
 801e776:	e7e2      	b.n	801e73e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801e778:	20006858 	.word	0x20006858
 801e77c:	20006850 	.word	0x20006850
 801e780:	20006854 	.word	0x20006854
 801e784:	20006838 	.word	0x20006838

0801e788 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801e788:	2010      	movs	r0, #16
 801e78a:	4770      	bx	lr

0801e78c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801e78c:	2000      	movs	r0, #0
 801e78e:	4770      	bx	lr

0801e790 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e790:	2bff      	cmp	r3, #255	; 0xff
 801e792:	d050      	beq.n	801e836 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801e794:	2a0b      	cmp	r2, #11
 801e796:	d04a      	beq.n	801e82e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e798:	d80e      	bhi.n	801e7b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801e79a:	2a03      	cmp	r2, #3
 801e79c:	d03f      	beq.n	801e81e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801e79e:	d804      	bhi.n	801e7aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e7a0:	2a01      	cmp	r2, #1
 801e7a2:	d03e      	beq.n	801e822 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801e7a4:	d93f      	bls.n	801e826 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e7a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e7a8:	4770      	bx	lr
 801e7aa:	2a09      	cmp	r2, #9
 801e7ac:	d03f      	beq.n	801e82e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e7ae:	d83c      	bhi.n	801e82a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e7b0:	2a08      	cmp	r2, #8
 801e7b2:	d03a      	beq.n	801e82a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e7b4:	2000      	movs	r0, #0
 801e7b6:	4770      	bx	lr
 801e7b8:	2a2f      	cmp	r2, #47	; 0x2f
 801e7ba:	d024      	beq.n	801e806 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801e7bc:	d80d      	bhi.n	801e7da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801e7be:	2a2d      	cmp	r2, #45	; 0x2d
 801e7c0:	d014      	beq.n	801e7ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801e7c2:	d826      	bhi.n	801e812 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801e7c4:	2a2c      	cmp	r2, #44	; 0x2c
 801e7c6:	d1f5      	bne.n	801e7b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e7c8:	684b      	ldr	r3, [r1, #4]
 801e7ca:	781b      	ldrb	r3, [r3, #0]
 801e7cc:	2b01      	cmp	r3, #1
 801e7ce:	d018      	beq.n	801e802 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801e7d0:	d323      	bcc.n	801e81a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801e7d2:	2b02      	cmp	r3, #2
 801e7d4:	d1ee      	bne.n	801e7b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e7d6:	6880      	ldr	r0, [r0, #8]
 801e7d8:	4770      	bx	lr
 801e7da:	2a31      	cmp	r2, #49	; 0x31
 801e7dc:	d004      	beq.n	801e7e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801e7de:	d328      	bcc.n	801e832 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e7e0:	2a32      	cmp	r2, #50	; 0x32
 801e7e2:	d026      	beq.n	801e832 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e7e4:	2a33      	cmp	r2, #51	; 0x33
 801e7e6:	d1e5      	bne.n	801e7b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e7e8:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801e7ea:	4770      	bx	lr
 801e7ec:	684b      	ldr	r3, [r1, #4]
 801e7ee:	781b      	ldrb	r3, [r3, #0]
 801e7f0:	2b01      	cmp	r3, #1
 801e7f2:	d004      	beq.n	801e7fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e7f4:	d30b      	bcc.n	801e80e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e7f6:	2b02      	cmp	r3, #2
 801e7f8:	d1dc      	bne.n	801e7b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e7fa:	6900      	ldr	r0, [r0, #16]
 801e7fc:	4770      	bx	lr
 801e7fe:	6a00      	ldr	r0, [r0, #32]
 801e800:	4770      	bx	lr
 801e802:	6980      	ldr	r0, [r0, #24]
 801e804:	4770      	bx	lr
 801e806:	684b      	ldr	r3, [r1, #4]
 801e808:	781b      	ldrb	r3, [r3, #0]
 801e80a:	2b00      	cmp	r3, #0
 801e80c:	d1d2      	bne.n	801e7b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e80e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e810:	4770      	bx	lr
 801e812:	684b      	ldr	r3, [r1, #4]
 801e814:	781b      	ldrb	r3, [r3, #0]
 801e816:	2b00      	cmp	r3, #0
 801e818:	d1cc      	bne.n	801e7b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e81a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e81c:	4770      	bx	lr
 801e81e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e820:	4770      	bx	lr
 801e822:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e824:	4770      	bx	lr
 801e826:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e828:	4770      	bx	lr
 801e82a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801e82c:	4770      	bx	lr
 801e82e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801e830:	4770      	bx	lr
 801e832:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801e834:	4770      	bx	lr
 801e836:	2a0b      	cmp	r2, #11
 801e838:	d049      	beq.n	801e8ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e83a:	d80e      	bhi.n	801e85a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801e83c:	2a03      	cmp	r2, #3
 801e83e:	d040      	beq.n	801e8c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e840:	d804      	bhi.n	801e84c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801e842:	2a01      	cmp	r2, #1
 801e844:	d03f      	beq.n	801e8c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801e846:	d940      	bls.n	801e8ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e848:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e84a:	4770      	bx	lr
 801e84c:	2a09      	cmp	r2, #9
 801e84e:	d03e      	beq.n	801e8ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e850:	d801      	bhi.n	801e856 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801e852:	2a08      	cmp	r2, #8
 801e854:	d1ae      	bne.n	801e7b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e856:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801e858:	4770      	bx	lr
 801e85a:	2a2f      	cmp	r2, #47	; 0x2f
 801e85c:	d024      	beq.n	801e8a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801e85e:	d80d      	bhi.n	801e87c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801e860:	2a2d      	cmp	r2, #45	; 0x2d
 801e862:	d014      	beq.n	801e88e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801e864:	d826      	bhi.n	801e8b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801e866:	2a2c      	cmp	r2, #44	; 0x2c
 801e868:	d1a4      	bne.n	801e7b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e86a:	684b      	ldr	r3, [r1, #4]
 801e86c:	781b      	ldrb	r3, [r3, #0]
 801e86e:	2b01      	cmp	r3, #1
 801e870:	d018      	beq.n	801e8a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801e872:	d324      	bcc.n	801e8be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801e874:	2b02      	cmp	r3, #2
 801e876:	d19d      	bne.n	801e7b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e878:	68c0      	ldr	r0, [r0, #12]
 801e87a:	4770      	bx	lr
 801e87c:	2a31      	cmp	r2, #49	; 0x31
 801e87e:	d004      	beq.n	801e88a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801e880:	d327      	bcc.n	801e8d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e882:	2a32      	cmp	r2, #50	; 0x32
 801e884:	d025      	beq.n	801e8d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e886:	2a33      	cmp	r2, #51	; 0x33
 801e888:	d194      	bne.n	801e7b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e88a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801e88c:	4770      	bx	lr
 801e88e:	684b      	ldr	r3, [r1, #4]
 801e890:	781b      	ldrb	r3, [r3, #0]
 801e892:	2b01      	cmp	r3, #1
 801e894:	d004      	beq.n	801e8a0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801e896:	d30b      	bcc.n	801e8b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801e898:	2b02      	cmp	r3, #2
 801e89a:	d18b      	bne.n	801e7b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e89c:	6940      	ldr	r0, [r0, #20]
 801e89e:	4770      	bx	lr
 801e8a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e8a2:	4770      	bx	lr
 801e8a4:	69c0      	ldr	r0, [r0, #28]
 801e8a6:	4770      	bx	lr
 801e8a8:	684b      	ldr	r3, [r1, #4]
 801e8aa:	781b      	ldrb	r3, [r3, #0]
 801e8ac:	2b00      	cmp	r3, #0
 801e8ae:	d181      	bne.n	801e7b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e8b0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e8b2:	4770      	bx	lr
 801e8b4:	684b      	ldr	r3, [r1, #4]
 801e8b6:	781b      	ldrb	r3, [r3, #0]
 801e8b8:	2b00      	cmp	r3, #0
 801e8ba:	f47f af7b 	bne.w	801e7b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e8be:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e8c0:	4770      	bx	lr
 801e8c2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e8c4:	4770      	bx	lr
 801e8c6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e8c8:	4770      	bx	lr
 801e8ca:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e8cc:	4770      	bx	lr
 801e8ce:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801e8d0:	4770      	bx	lr
 801e8d2:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801e8d4:	4770      	bx	lr

0801e8d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e8d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8da:	b087      	sub	sp, #28
 801e8dc:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e8de:	9205      	str	r2, [sp, #20]
 801e8e0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e8e4:	9202      	str	r2, [sp, #8]
 801e8e6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e8ea:	9101      	str	r1, [sp, #4]
 801e8ec:	6841      	ldr	r1, [r0, #4]
 801e8ee:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801e8f2:	fb01 2404 	mla	r4, r1, r4, r2
 801e8f6:	6802      	ldr	r2, [r0, #0]
 801e8f8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e8fc:	f8de 2000 	ldr.w	r2, [lr]
 801e900:	9203      	str	r2, [sp, #12]
 801e902:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e906:	3204      	adds	r2, #4
 801e908:	9204      	str	r2, [sp, #16]
 801e90a:	9a02      	ldr	r2, [sp, #8]
 801e90c:	43d6      	mvns	r6, r2
 801e90e:	b2f6      	uxtb	r6, r6
 801e910:	9a01      	ldr	r2, [sp, #4]
 801e912:	2a00      	cmp	r2, #0
 801e914:	dc03      	bgt.n	801e91e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e916:	9a05      	ldr	r2, [sp, #20]
 801e918:	2a00      	cmp	r2, #0
 801e91a:	f340 8129 	ble.w	801eb70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e91e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e920:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e924:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e928:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e92c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e92e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e932:	2b00      	cmp	r3, #0
 801e934:	dd0e      	ble.n	801e954 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e936:	1408      	asrs	r0, r1, #16
 801e938:	d405      	bmi.n	801e946 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e93a:	4560      	cmp	r0, ip
 801e93c:	da03      	bge.n	801e946 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e93e:	1410      	asrs	r0, r2, #16
 801e940:	d401      	bmi.n	801e946 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e942:	42b8      	cmp	r0, r7
 801e944:	db07      	blt.n	801e956 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e946:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e948:	4401      	add	r1, r0
 801e94a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e94c:	3b01      	subs	r3, #1
 801e94e:	4402      	add	r2, r0
 801e950:	3402      	adds	r4, #2
 801e952:	e7ee      	b.n	801e932 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e954:	d071      	beq.n	801ea3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e956:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e958:	1e58      	subs	r0, r3, #1
 801e95a:	fb05 1500 	mla	r5, r5, r0, r1
 801e95e:	142d      	asrs	r5, r5, #16
 801e960:	d45f      	bmi.n	801ea22 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e962:	4565      	cmp	r5, ip
 801e964:	da5d      	bge.n	801ea22 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e966:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e968:	fb05 2000 	mla	r0, r5, r0, r2
 801e96c:	1400      	asrs	r0, r0, #16
 801e96e:	d458      	bmi.n	801ea22 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e970:	42b8      	cmp	r0, r7
 801e972:	da56      	bge.n	801ea22 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e974:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801e978:	4699      	mov	r9, r3
 801e97a:	46a2      	mov	sl, r4
 801e97c:	f1b9 0f00 	cmp.w	r9, #0
 801e980:	dd57      	ble.n	801ea32 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e982:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e986:	9803      	ldr	r0, [sp, #12]
 801e988:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e98c:	140d      	asrs	r5, r1, #16
 801e98e:	fb07 000c 	mla	r0, r7, ip, r0
 801e992:	f109 39ff 	add.w	r9, r9, #4294967295
 801e996:	5d40      	ldrb	r0, [r0, r5]
 801e998:	9d04      	ldr	r5, [sp, #16]
 801e99a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e99e:	f8ba 5000 	ldrh.w	r5, [sl]
 801e9a2:	122f      	asrs	r7, r5, #8
 801e9a4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e9a8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e9ac:	fb17 f706 	smulbb	r7, r7, r6
 801e9b0:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e9b4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e9b8:	00ed      	lsls	r5, r5, #3
 801e9ba:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e9be:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e9c2:	10c7      	asrs	r7, r0, #3
 801e9c4:	b2ed      	uxtb	r5, r5
 801e9c6:	00c0      	lsls	r0, r0, #3
 801e9c8:	fb18 f806 	smulbb	r8, r8, r6
 801e9cc:	fb15 f506 	smulbb	r5, r5, r6
 801e9d0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e9d4:	b2c0      	uxtb	r0, r0
 801e9d6:	fa1f fc8c 	uxth.w	ip, ip
 801e9da:	fb07 870b 	mla	r7, r7, fp, r8
 801e9de:	fb00 500b 	mla	r0, r0, fp, r5
 801e9e2:	b280      	uxth	r0, r0
 801e9e4:	b2bf      	uxth	r7, r7
 801e9e6:	f10c 0501 	add.w	r5, ip, #1
 801e9ea:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e9ee:	f107 0801 	add.w	r8, r7, #1
 801e9f2:	1c45      	adds	r5, r0, #1
 801e9f4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e9f8:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e9fc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e9fe:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ea02:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ea06:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801ea0a:	ea45 0c0c 	orr.w	ip, r5, ip
 801ea0e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801ea12:	4401      	add	r1, r0
 801ea14:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ea16:	ea4c 0c08 	orr.w	ip, ip, r8
 801ea1a:	f82a cb02 	strh.w	ip, [sl], #2
 801ea1e:	4402      	add	r2, r0
 801ea20:	e7ac      	b.n	801e97c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ea22:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801ea26:	f04f 0800 	mov.w	r8, #0
 801ea2a:	eb03 0008 	add.w	r0, r3, r8
 801ea2e:	2800      	cmp	r0, #0
 801ea30:	dc41      	bgt.n	801eab6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ea32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ea36:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ea3a:	9b01      	ldr	r3, [sp, #4]
 801ea3c:	2b00      	cmp	r3, #0
 801ea3e:	f340 8097 	ble.w	801eb70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ea42:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ea46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ea4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ea4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea50:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ea54:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ea58:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ea5c:	eef0 6a62 	vmov.f32	s13, s5
 801ea60:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ea64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ea68:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ea6c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801ea70:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ea74:	eef0 6a43 	vmov.f32	s13, s6
 801ea78:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ea7c:	ee12 2a90 	vmov	r2, s5
 801ea80:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ea84:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea88:	ee13 2a10 	vmov	r2, s6
 801ea8c:	9313      	str	r3, [sp, #76]	; 0x4c
 801ea8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea90:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea94:	9314      	str	r3, [sp, #80]	; 0x50
 801ea96:	9b01      	ldr	r3, [sp, #4]
 801ea98:	9a05      	ldr	r2, [sp, #20]
 801ea9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ea9e:	3b01      	subs	r3, #1
 801eaa0:	9301      	str	r3, [sp, #4]
 801eaa2:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801eaa6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eaa8:	eeb0 3a67 	vmov.f32	s6, s15
 801eaac:	bf08      	it	eq
 801eaae:	4613      	moveq	r3, r2
 801eab0:	eef0 2a47 	vmov.f32	s5, s14
 801eab4:	e72c      	b.n	801e910 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801eab6:	140f      	asrs	r7, r1, #16
 801eab8:	d453      	bmi.n	801eb62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801eaba:	f8de 5008 	ldr.w	r5, [lr, #8]
 801eabe:	42bd      	cmp	r5, r7
 801eac0:	dd4f      	ble.n	801eb62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801eac2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801eac6:	d44c      	bmi.n	801eb62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801eac8:	f8de 000c 	ldr.w	r0, [lr, #12]
 801eacc:	4560      	cmp	r0, ip
 801eace:	dd48      	ble.n	801eb62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ead0:	9803      	ldr	r0, [sp, #12]
 801ead2:	b22d      	sxth	r5, r5
 801ead4:	fb0c 0505 	mla	r5, ip, r5, r0
 801ead8:	5de8      	ldrb	r0, [r5, r7]
 801eada:	9d04      	ldr	r5, [sp, #16]
 801eadc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801eae0:	f06f 0501 	mvn.w	r5, #1
 801eae4:	fb05 fb08 	mul.w	fp, r5, r8
 801eae8:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801eaec:	f834 500b 	ldrh.w	r5, [r4, fp]
 801eaf0:	122f      	asrs	r7, r5, #8
 801eaf2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801eaf6:	fb17 f706 	smulbb	r7, r7, r6
 801eafa:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801eafe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801eb02:	00ed      	lsls	r5, r5, #3
 801eb04:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801eb08:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801eb0c:	10c7      	asrs	r7, r0, #3
 801eb0e:	b2ed      	uxtb	r5, r5
 801eb10:	00c0      	lsls	r0, r0, #3
 801eb12:	fb19 f906 	smulbb	r9, r9, r6
 801eb16:	fb15 f506 	smulbb	r5, r5, r6
 801eb1a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801eb1e:	b2c0      	uxtb	r0, r0
 801eb20:	fa1f fc8c 	uxth.w	ip, ip
 801eb24:	fb07 970a 	mla	r7, r7, sl, r9
 801eb28:	fb00 500a 	mla	r0, r0, sl, r5
 801eb2c:	b2bf      	uxth	r7, r7
 801eb2e:	b280      	uxth	r0, r0
 801eb30:	f10c 0501 	add.w	r5, ip, #1
 801eb34:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801eb38:	f107 0901 	add.w	r9, r7, #1
 801eb3c:	1c45      	adds	r5, r0, #1
 801eb3e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801eb42:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801eb46:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801eb4a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801eb4e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801eb52:	ea45 0c0c 	orr.w	ip, r5, ip
 801eb56:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801eb5a:	ea4c 0c09 	orr.w	ip, ip, r9
 801eb5e:	f824 c00b 	strh.w	ip, [r4, fp]
 801eb62:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801eb64:	4401      	add	r1, r0
 801eb66:	9814      	ldr	r0, [sp, #80]	; 0x50
 801eb68:	f108 38ff 	add.w	r8, r8, #4294967295
 801eb6c:	4402      	add	r2, r0
 801eb6e:	e75c      	b.n	801ea2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801eb70:	b007      	add	sp, #28
 801eb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb76 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb7a:	b085      	sub	sp, #20
 801eb7c:	4693      	mov	fp, r2
 801eb7e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801eb80:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801eb82:	6870      	ldr	r0, [r6, #4]
 801eb84:	9100      	str	r1, [sp, #0]
 801eb86:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801eb8a:	fb00 2404 	mla	r4, r0, r4, r2
 801eb8e:	6832      	ldr	r2, [r6, #0]
 801eb90:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801eb94:	682a      	ldr	r2, [r5, #0]
 801eb96:	9201      	str	r2, [sp, #4]
 801eb98:	686a      	ldr	r2, [r5, #4]
 801eb9a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801eb9e:	3204      	adds	r2, #4
 801eba0:	9202      	str	r2, [sp, #8]
 801eba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eba6:	9a00      	ldr	r2, [sp, #0]
 801eba8:	2a00      	cmp	r2, #0
 801ebaa:	dc03      	bgt.n	801ebb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ebac:	f1bb 0f00 	cmp.w	fp, #0
 801ebb0:	f340 80a0 	ble.w	801ecf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801ebb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ebb6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ebba:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ebbe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ebc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ebc4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ebc8:	2b00      	cmp	r3, #0
 801ebca:	dd0c      	ble.n	801ebe6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ebcc:	1406      	asrs	r6, r0, #16
 801ebce:	d405      	bmi.n	801ebdc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ebd0:	454e      	cmp	r6, r9
 801ebd2:	da03      	bge.n	801ebdc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ebd4:	1416      	asrs	r6, r2, #16
 801ebd6:	d401      	bmi.n	801ebdc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ebd8:	4546      	cmp	r6, r8
 801ebda:	db05      	blt.n	801ebe8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ebdc:	4470      	add	r0, lr
 801ebde:	4462      	add	r2, ip
 801ebe0:	3b01      	subs	r3, #1
 801ebe2:	3402      	adds	r4, #2
 801ebe4:	e7f0      	b.n	801ebc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ebe6:	d00f      	beq.n	801ec08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ebe8:	1e5e      	subs	r6, r3, #1
 801ebea:	fb0e 0706 	mla	r7, lr, r6, r0
 801ebee:	143f      	asrs	r7, r7, #16
 801ebf0:	d541      	bpl.n	801ec76 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801ebf2:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801ebf6:	4698      	mov	r8, r3
 801ebf8:	9603      	str	r6, [sp, #12]
 801ebfa:	f1b8 0f00 	cmp.w	r8, #0
 801ebfe:	dc59      	bgt.n	801ecb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ec00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ec04:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ec08:	9b00      	ldr	r3, [sp, #0]
 801ec0a:	2b00      	cmp	r3, #0
 801ec0c:	dd72      	ble.n	801ecf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801ec0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ec12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ec16:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ec1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec1c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ec20:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ec24:	eeb0 6a62 	vmov.f32	s12, s5
 801ec28:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ec2c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ec30:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ec34:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ec38:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ec3c:	eeb0 6a43 	vmov.f32	s12, s6
 801ec40:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ec44:	ee12 2a90 	vmov	r2, s5
 801ec48:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ec4c:	fb92 fef3 	sdiv	lr, r2, r3
 801ec50:	ee13 2a10 	vmov	r2, s6
 801ec54:	fb92 fcf3 	sdiv	ip, r2, r3
 801ec58:	9b00      	ldr	r3, [sp, #0]
 801ec5a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ec5e:	3b01      	subs	r3, #1
 801ec60:	9300      	str	r3, [sp, #0]
 801ec62:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ec66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec68:	eeb0 3a67 	vmov.f32	s6, s15
 801ec6c:	bf08      	it	eq
 801ec6e:	465b      	moveq	r3, fp
 801ec70:	eef0 2a47 	vmov.f32	s5, s14
 801ec74:	e797      	b.n	801eba6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ec76:	454f      	cmp	r7, r9
 801ec78:	dabb      	bge.n	801ebf2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ec7a:	fb0c 2606 	mla	r6, ip, r6, r2
 801ec7e:	1436      	asrs	r6, r6, #16
 801ec80:	d4b7      	bmi.n	801ebf2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ec82:	4546      	cmp	r6, r8
 801ec84:	dab5      	bge.n	801ebf2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ec86:	461e      	mov	r6, r3
 801ec88:	46a0      	mov	r8, r4
 801ec8a:	2e00      	cmp	r6, #0
 801ec8c:	ddb8      	ble.n	801ec00 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ec8e:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801ec92:	9901      	ldr	r1, [sp, #4]
 801ec94:	1417      	asrs	r7, r2, #16
 801ec96:	ea4f 4920 	mov.w	r9, r0, asr #16
 801ec9a:	fb0a 1707 	mla	r7, sl, r7, r1
 801ec9e:	9902      	ldr	r1, [sp, #8]
 801eca0:	f817 7009 	ldrb.w	r7, [r7, r9]
 801eca4:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801eca8:	f828 7b02 	strh.w	r7, [r8], #2
 801ecac:	4470      	add	r0, lr
 801ecae:	4462      	add	r2, ip
 801ecb0:	3e01      	subs	r6, #1
 801ecb2:	e7ea      	b.n	801ec8a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801ecb4:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ecb8:	d417      	bmi.n	801ecea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801ecba:	68ae      	ldr	r6, [r5, #8]
 801ecbc:	454e      	cmp	r6, r9
 801ecbe:	dd14      	ble.n	801ecea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801ecc0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ecc4:	d411      	bmi.n	801ecea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801ecc6:	68ef      	ldr	r7, [r5, #12]
 801ecc8:	4557      	cmp	r7, sl
 801ecca:	dd0e      	ble.n	801ecea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801eccc:	9f01      	ldr	r7, [sp, #4]
 801ecce:	b236      	sxth	r6, r6
 801ecd0:	fb0a 7606 	mla	r6, sl, r6, r7
 801ecd4:	9f02      	ldr	r7, [sp, #8]
 801ecd6:	f816 6009 	ldrb.w	r6, [r6, r9]
 801ecda:	f06f 0101 	mvn.w	r1, #1
 801ecde:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801ece2:	fb01 f608 	mul.w	r6, r1, r8
 801ece6:	9903      	ldr	r1, [sp, #12]
 801ece8:	538f      	strh	r7, [r1, r6]
 801ecea:	4470      	add	r0, lr
 801ecec:	4462      	add	r2, ip
 801ecee:	f108 38ff 	add.w	r8, r8, #4294967295
 801ecf2:	e782      	b.n	801ebfa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ecf4:	b005      	add	sp, #20
 801ecf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ecfa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ecfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecfe:	b087      	sub	sp, #28
 801ed00:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ed02:	9205      	str	r2, [sp, #20]
 801ed04:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ed08:	9203      	str	r2, [sp, #12]
 801ed0a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801ed0e:	9102      	str	r1, [sp, #8]
 801ed10:	6861      	ldr	r1, [r4, #4]
 801ed12:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801ed16:	fb01 2000 	mla	r0, r1, r0, r2
 801ed1a:	6822      	ldr	r2, [r4, #0]
 801ed1c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801ed20:	9200      	str	r2, [sp, #0]
 801ed22:	f8dc 2000 	ldr.w	r2, [ip]
 801ed26:	9204      	str	r2, [sp, #16]
 801ed28:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ed2c:	3204      	adds	r2, #4
 801ed2e:	9201      	str	r2, [sp, #4]
 801ed30:	9a03      	ldr	r2, [sp, #12]
 801ed32:	43d5      	mvns	r5, r2
 801ed34:	b2ed      	uxtb	r5, r5
 801ed36:	9a02      	ldr	r2, [sp, #8]
 801ed38:	2a00      	cmp	r2, #0
 801ed3a:	dc03      	bgt.n	801ed44 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ed3c:	9a05      	ldr	r2, [sp, #20]
 801ed3e:	2a00      	cmp	r2, #0
 801ed40:	f340 812c 	ble.w	801ef9c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801ed44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ed46:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801ed4a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ed4e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ed52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ed54:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	dd10      	ble.n	801ed7e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ed5c:	140c      	asrs	r4, r1, #16
 801ed5e:	d405      	bmi.n	801ed6c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ed60:	4574      	cmp	r4, lr
 801ed62:	da03      	bge.n	801ed6c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ed64:	1414      	asrs	r4, r2, #16
 801ed66:	d401      	bmi.n	801ed6c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ed68:	42bc      	cmp	r4, r7
 801ed6a:	db09      	blt.n	801ed80 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ed6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ed6e:	9800      	ldr	r0, [sp, #0]
 801ed70:	4421      	add	r1, r4
 801ed72:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ed74:	3002      	adds	r0, #2
 801ed76:	4422      	add	r2, r4
 801ed78:	3b01      	subs	r3, #1
 801ed7a:	9000      	str	r0, [sp, #0]
 801ed7c:	e7ec      	b.n	801ed58 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ed7e:	d071      	beq.n	801ee64 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801ed80:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ed82:	1e5c      	subs	r4, r3, #1
 801ed84:	fb06 1604 	mla	r6, r6, r4, r1
 801ed88:	1436      	asrs	r6, r6, #16
 801ed8a:	d45d      	bmi.n	801ee48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ed8c:	4576      	cmp	r6, lr
 801ed8e:	da5b      	bge.n	801ee48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ed90:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801ed92:	fb06 2404 	mla	r4, r6, r4, r2
 801ed96:	1424      	asrs	r4, r4, #16
 801ed98:	d456      	bmi.n	801ee48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ed9a:	42bc      	cmp	r4, r7
 801ed9c:	da54      	bge.n	801ee48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ed9e:	f8dd 9000 	ldr.w	r9, [sp]
 801eda2:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801eda6:	4698      	mov	r8, r3
 801eda8:	f1b8 0f00 	cmp.w	r8, #0
 801edac:	dd54      	ble.n	801ee58 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801edae:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801edb2:	9804      	ldr	r0, [sp, #16]
 801edb4:	1414      	asrs	r4, r2, #16
 801edb6:	fb07 0404 	mla	r4, r7, r4, r0
 801edba:	140e      	asrs	r6, r1, #16
 801edbc:	9801      	ldr	r0, [sp, #4]
 801edbe:	f814 e006 	ldrb.w	lr, [r4, r6]
 801edc2:	f8b9 4000 	ldrh.w	r4, [r9]
 801edc6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801edca:	eb00 0b0e 	add.w	fp, r0, lr
 801edce:	1227      	asrs	r7, r4, #8
 801edd0:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801edd4:	f89b b001 	ldrb.w	fp, [fp, #1]
 801edd8:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801eddc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801edde:	fb16 f60a 	smulbb	r6, r6, sl
 801ede2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ede6:	fb07 6705 	mla	r7, r7, r5, r6
 801edea:	10e6      	asrs	r6, r4, #3
 801edec:	00e4      	lsls	r4, r4, #3
 801edee:	b2e4      	uxtb	r4, r4
 801edf0:	fb1b fb0a 	smulbb	fp, fp, sl
 801edf4:	fb14 f405 	smulbb	r4, r4, r5
 801edf8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801edfc:	b2bf      	uxth	r7, r7
 801edfe:	fb06 b605 	mla	r6, r6, r5, fp
 801ee02:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801ee06:	b2b6      	uxth	r6, r6
 801ee08:	fa1f fe8e 	uxth.w	lr, lr
 801ee0c:	1c7c      	adds	r4, r7, #1
 801ee0e:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801ee12:	f106 0b01 	add.w	fp, r6, #1
 801ee16:	f10e 0401 	add.w	r4, lr, #1
 801ee1a:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801ee1e:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801ee22:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ee26:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801ee2a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801ee2e:	4327      	orrs	r7, r4
 801ee30:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ee34:	4401      	add	r1, r0
 801ee36:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ee38:	ea47 070b 	orr.w	r7, r7, fp
 801ee3c:	f829 7b02 	strh.w	r7, [r9], #2
 801ee40:	4402      	add	r2, r0
 801ee42:	f108 38ff 	add.w	r8, r8, #4294967295
 801ee46:	e7af      	b.n	801eda8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801ee48:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801ee4c:	f04f 0e00 	mov.w	lr, #0
 801ee50:	eb03 040e 	add.w	r4, r3, lr
 801ee54:	2c00      	cmp	r4, #0
 801ee56:	dc43      	bgt.n	801eee0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801ee58:	9a00      	ldr	r2, [sp, #0]
 801ee5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ee5e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ee62:	9300      	str	r3, [sp, #0]
 801ee64:	9b02      	ldr	r3, [sp, #8]
 801ee66:	2b00      	cmp	r3, #0
 801ee68:	f340 8098 	ble.w	801ef9c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801ee6c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ee70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ee74:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ee78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ee7e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ee82:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ee86:	eef0 6a62 	vmov.f32	s13, s5
 801ee8a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ee8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ee92:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ee96:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801ee9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ee9e:	eef0 6a43 	vmov.f32	s13, s6
 801eea2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eea6:	ee12 2a90 	vmov	r2, s5
 801eeaa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eeae:	fb92 f3f3 	sdiv	r3, r2, r3
 801eeb2:	ee13 2a10 	vmov	r2, s6
 801eeb6:	9313      	str	r3, [sp, #76]	; 0x4c
 801eeb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eeba:	fb92 f3f3 	sdiv	r3, r2, r3
 801eebe:	9314      	str	r3, [sp, #80]	; 0x50
 801eec0:	9b02      	ldr	r3, [sp, #8]
 801eec2:	9a05      	ldr	r2, [sp, #20]
 801eec4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eec8:	3b01      	subs	r3, #1
 801eeca:	9302      	str	r3, [sp, #8]
 801eecc:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801eed0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eed2:	eeb0 3a67 	vmov.f32	s6, s15
 801eed6:	bf08      	it	eq
 801eed8:	4613      	moveq	r3, r2
 801eeda:	eef0 2a47 	vmov.f32	s5, s14
 801eede:	e72a      	b.n	801ed36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801eee0:	140f      	asrs	r7, r1, #16
 801eee2:	d454      	bmi.n	801ef8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801eee4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801eee8:	42be      	cmp	r6, r7
 801eeea:	dd50      	ble.n	801ef8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801eeec:	ea5f 4822 	movs.w	r8, r2, asr #16
 801eef0:	d44d      	bmi.n	801ef8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801eef2:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801eef6:	4544      	cmp	r4, r8
 801eef8:	dd49      	ble.n	801ef8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801eefa:	9c04      	ldr	r4, [sp, #16]
 801eefc:	b236      	sxth	r6, r6
 801eefe:	fb08 4606 	mla	r6, r8, r6, r4
 801ef02:	f06f 0001 	mvn.w	r0, #1
 801ef06:	f816 8007 	ldrb.w	r8, [r6, r7]
 801ef0a:	9c01      	ldr	r4, [sp, #4]
 801ef0c:	fb00 fa0e 	mul.w	sl, r0, lr
 801ef10:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ef14:	9800      	ldr	r0, [sp, #0]
 801ef16:	eb04 0b08 	add.w	fp, r4, r8
 801ef1a:	f830 400a 	ldrh.w	r4, [r0, sl]
 801ef1e:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801ef22:	9801      	ldr	r0, [sp, #4]
 801ef24:	f89b b001 	ldrb.w	fp, [fp, #1]
 801ef28:	f810 8008 	ldrb.w	r8, [r0, r8]
 801ef2c:	9800      	ldr	r0, [sp, #0]
 801ef2e:	1227      	asrs	r7, r4, #8
 801ef30:	fb16 f609 	smulbb	r6, r6, r9
 801ef34:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ef38:	fb07 6705 	mla	r7, r7, r5, r6
 801ef3c:	10e6      	asrs	r6, r4, #3
 801ef3e:	00e4      	lsls	r4, r4, #3
 801ef40:	b2e4      	uxtb	r4, r4
 801ef42:	fb1b fb09 	smulbb	fp, fp, r9
 801ef46:	fb14 f405 	smulbb	r4, r4, r5
 801ef4a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ef4e:	b2bf      	uxth	r7, r7
 801ef50:	fb06 b605 	mla	r6, r6, r5, fp
 801ef54:	fb08 4809 	mla	r8, r8, r9, r4
 801ef58:	b2b6      	uxth	r6, r6
 801ef5a:	fa1f f888 	uxth.w	r8, r8
 801ef5e:	1c7c      	adds	r4, r7, #1
 801ef60:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801ef64:	f106 0b01 	add.w	fp, r6, #1
 801ef68:	f108 0401 	add.w	r4, r8, #1
 801ef6c:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801ef70:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801ef74:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ef78:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801ef7c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801ef80:	4327      	orrs	r7, r4
 801ef82:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ef86:	ea47 070b 	orr.w	r7, r7, fp
 801ef8a:	f820 700a 	strh.w	r7, [r0, sl]
 801ef8e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ef90:	4401      	add	r1, r0
 801ef92:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ef94:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ef98:	4402      	add	r2, r0
 801ef9a:	e759      	b.n	801ee50 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ef9c:	b007      	add	sp, #28
 801ef9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801efa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801efa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efa8:	b085      	sub	sp, #20
 801efaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801efae:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801efb0:	9203      	str	r2, [sp, #12]
 801efb2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801efb6:	6870      	ldr	r0, [r6, #4]
 801efb8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801efba:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801efbe:	686f      	ldr	r7, [r5, #4]
 801efc0:	9101      	str	r1, [sp, #4]
 801efc2:	fb00 2404 	mla	r4, r0, r4, r2
 801efc6:	6832      	ldr	r2, [r6, #0]
 801efc8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801efcc:	682a      	ldr	r2, [r5, #0]
 801efce:	9202      	str	r2, [sp, #8]
 801efd0:	3704      	adds	r7, #4
 801efd2:	9a01      	ldr	r2, [sp, #4]
 801efd4:	2a00      	cmp	r2, #0
 801efd6:	dc03      	bgt.n	801efe0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801efd8:	9a03      	ldr	r2, [sp, #12]
 801efda:	2a00      	cmp	r2, #0
 801efdc:	f340 80cc 	ble.w	801f178 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801efe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801efe2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801efe6:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801efea:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801efee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eff0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801eff4:	2b00      	cmp	r3, #0
 801eff6:	dd0d      	ble.n	801f014 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801eff8:	1406      	asrs	r6, r0, #16
 801effa:	d405      	bmi.n	801f008 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801effc:	454e      	cmp	r6, r9
 801effe:	da03      	bge.n	801f008 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f000:	1416      	asrs	r6, r2, #16
 801f002:	d401      	bmi.n	801f008 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f004:	4546      	cmp	r6, r8
 801f006:	db06      	blt.n	801f016 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f008:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f00a:	4460      	add	r0, ip
 801f00c:	4432      	add	r2, r6
 801f00e:	3b01      	subs	r3, #1
 801f010:	3402      	adds	r4, #2
 801f012:	e7ef      	b.n	801eff4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801f014:	d00f      	beq.n	801f036 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f016:	1e5e      	subs	r6, r3, #1
 801f018:	fb0c 0e06 	mla	lr, ip, r6, r0
 801f01c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801f020:	d543      	bpl.n	801f0aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801f022:	4698      	mov	r8, r3
 801f024:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801f028:	f1b8 0f00 	cmp.w	r8, #0
 801f02c:	dc71      	bgt.n	801f112 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801f02e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f032:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f036:	9b01      	ldr	r3, [sp, #4]
 801f038:	2b00      	cmp	r3, #0
 801f03a:	f340 809d 	ble.w	801f178 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f03e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f042:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f046:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f04a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f04c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f050:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f054:	eeb0 6a62 	vmov.f32	s12, s5
 801f058:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f05c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f060:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f064:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f068:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f06c:	eeb0 6a43 	vmov.f32	s12, s6
 801f070:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f074:	ee12 2a90 	vmov	r2, s5
 801f078:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f07c:	fb92 fcf3 	sdiv	ip, r2, r3
 801f080:	ee13 2a10 	vmov	r2, s6
 801f084:	fb92 f3f3 	sdiv	r3, r2, r3
 801f088:	9312      	str	r3, [sp, #72]	; 0x48
 801f08a:	9b01      	ldr	r3, [sp, #4]
 801f08c:	9a03      	ldr	r2, [sp, #12]
 801f08e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f092:	3b01      	subs	r3, #1
 801f094:	9301      	str	r3, [sp, #4]
 801f096:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f09a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f09c:	eeb0 3a67 	vmov.f32	s6, s15
 801f0a0:	bf08      	it	eq
 801f0a2:	4613      	moveq	r3, r2
 801f0a4:	eef0 2a47 	vmov.f32	s5, s14
 801f0a8:	e793      	b.n	801efd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f0aa:	45ce      	cmp	lr, r9
 801f0ac:	dab9      	bge.n	801f022 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f0ae:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f0b0:	fb01 2606 	mla	r6, r1, r6, r2
 801f0b4:	1436      	asrs	r6, r6, #16
 801f0b6:	d4b4      	bmi.n	801f022 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f0b8:	4546      	cmp	r6, r8
 801f0ba:	dab2      	bge.n	801f022 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f0bc:	4698      	mov	r8, r3
 801f0be:	46a2      	mov	sl, r4
 801f0c0:	f1b8 0f00 	cmp.w	r8, #0
 801f0c4:	ddb3      	ble.n	801f02e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f0c6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f0ca:	9902      	ldr	r1, [sp, #8]
 801f0cc:	1416      	asrs	r6, r2, #16
 801f0ce:	fb09 1606 	mla	r6, r9, r6, r1
 801f0d2:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801f0d6:	492a      	ldr	r1, [pc, #168]	; (801f180 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801f0d8:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801f0dc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f0e0:	eb07 0b0e 	add.w	fp, r7, lr
 801f0e4:	4460      	add	r0, ip
 801f0e6:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801f0ea:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801f0ee:	00f6      	lsls	r6, r6, #3
 801f0f0:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801f0f4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f0f8:	ea49 0606 	orr.w	r6, r9, r6
 801f0fc:	f817 900e 	ldrb.w	r9, [r7, lr]
 801f100:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f102:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801f106:	f82a 6b02 	strh.w	r6, [sl], #2
 801f10a:	440a      	add	r2, r1
 801f10c:	f108 38ff 	add.w	r8, r8, #4294967295
 801f110:	e7d6      	b.n	801f0c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f112:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f116:	d429      	bmi.n	801f16c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f118:	68ae      	ldr	r6, [r5, #8]
 801f11a:	454e      	cmp	r6, r9
 801f11c:	dd26      	ble.n	801f16c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f11e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801f122:	d423      	bmi.n	801f16c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f124:	68e9      	ldr	r1, [r5, #12]
 801f126:	4559      	cmp	r1, fp
 801f128:	dd20      	ble.n	801f16c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f12a:	9902      	ldr	r1, [sp, #8]
 801f12c:	fa0f fe86 	sxth.w	lr, r6
 801f130:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801f134:	f06f 0101 	mvn.w	r1, #1
 801f138:	f81e e009 	ldrb.w	lr, [lr, r9]
 801f13c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f140:	eb07 060e 	add.w	r6, r7, lr
 801f144:	fb01 f908 	mul.w	r9, r1, r8
 801f148:	f896 b002 	ldrb.w	fp, [r6, #2]
 801f14c:	7876      	ldrb	r6, [r6, #1]
 801f14e:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801f152:	00f6      	lsls	r6, r6, #3
 801f154:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801f158:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f15c:	ea4b 0606 	orr.w	r6, fp, r6
 801f160:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801f164:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801f168:	f82a 6009 	strh.w	r6, [sl, r9]
 801f16c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f16e:	4460      	add	r0, ip
 801f170:	440a      	add	r2, r1
 801f172:	f108 38ff 	add.w	r8, r8, #4294967295
 801f176:	e757      	b.n	801f028 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f178:	b005      	add	sp, #20
 801f17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f17e:	bf00      	nop
 801f180:	fffff800 	.word	0xfffff800

0801f184 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f188:	b087      	sub	sp, #28
 801f18a:	468b      	mov	fp, r1
 801f18c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f18e:	9204      	str	r2, [sp, #16]
 801f190:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f194:	9205      	str	r2, [sp, #20]
 801f196:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801f19a:	6841      	ldr	r1, [r0, #4]
 801f19c:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801f1a0:	fb01 2404 	mla	r4, r1, r4, r2
 801f1a4:	6802      	ldr	r2, [r0, #0]
 801f1a6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f1aa:	f8dc 2000 	ldr.w	r2, [ip]
 801f1ae:	9201      	str	r2, [sp, #4]
 801f1b0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f1b4:	3204      	adds	r2, #4
 801f1b6:	9202      	str	r2, [sp, #8]
 801f1b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f1bc:	f1bb 0f00 	cmp.w	fp, #0
 801f1c0:	dc03      	bgt.n	801f1ca <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801f1c2:	9a04      	ldr	r2, [sp, #16]
 801f1c4:	2a00      	cmp	r2, #0
 801f1c6:	f340 8138 	ble.w	801f43a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f1ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f1cc:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801f1d0:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801f1d4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f1d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f1da:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	dd0e      	ble.n	801f200 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f1e2:	1402      	asrs	r2, r0, #16
 801f1e4:	d405      	bmi.n	801f1f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f1e6:	42ba      	cmp	r2, r7
 801f1e8:	da03      	bge.n	801f1f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f1ea:	140a      	asrs	r2, r1, #16
 801f1ec:	d401      	bmi.n	801f1f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f1ee:	42b2      	cmp	r2, r6
 801f1f0:	db07      	blt.n	801f202 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f1f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f1f4:	4410      	add	r0, r2
 801f1f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f1f8:	3b01      	subs	r3, #1
 801f1fa:	4411      	add	r1, r2
 801f1fc:	3402      	adds	r4, #2
 801f1fe:	e7ee      	b.n	801f1de <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f200:	d019      	beq.n	801f236 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801f202:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f204:	1e5a      	subs	r2, r3, #1
 801f206:	fb05 0502 	mla	r5, r5, r2, r0
 801f20a:	142d      	asrs	r5, r5, #16
 801f20c:	d409      	bmi.n	801f222 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f20e:	42bd      	cmp	r5, r7
 801f210:	da07      	bge.n	801f222 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f212:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f214:	fb05 1202 	mla	r2, r5, r2, r1
 801f218:	1412      	asrs	r2, r2, #16
 801f21a:	d402      	bmi.n	801f222 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f21c:	42b2      	cmp	r2, r6
 801f21e:	f2c0 80ac 	blt.w	801f37a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f222:	f04f 0e00 	mov.w	lr, #0
 801f226:	eb03 020e 	add.w	r2, r3, lr
 801f22a:	2a00      	cmp	r2, #0
 801f22c:	dc3e      	bgt.n	801f2ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f22e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f232:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f236:	f1bb 0f00 	cmp.w	fp, #0
 801f23a:	f340 80fe 	ble.w	801f43a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f23e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f242:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f246:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f24a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f24c:	f1bb 0b01 	subs.w	fp, fp, #1
 801f250:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f254:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f258:	eeb0 6a62 	vmov.f32	s12, s5
 801f25c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f260:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f264:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f268:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f26c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f270:	eeb0 6a43 	vmov.f32	s12, s6
 801f274:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f278:	ee12 2a90 	vmov	r2, s5
 801f27c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f280:	fb92 f3f3 	sdiv	r3, r2, r3
 801f284:	ee13 2a10 	vmov	r2, s6
 801f288:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f28c:	9313      	str	r3, [sp, #76]	; 0x4c
 801f28e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f290:	fb92 f3f3 	sdiv	r3, r2, r3
 801f294:	9a04      	ldr	r2, [sp, #16]
 801f296:	9314      	str	r3, [sp, #80]	; 0x50
 801f298:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f29c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f29e:	eeb0 3a67 	vmov.f32	s6, s15
 801f2a2:	bf08      	it	eq
 801f2a4:	4613      	moveq	r3, r2
 801f2a6:	eef0 2a47 	vmov.f32	s5, s14
 801f2aa:	e787      	b.n	801f1bc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f2ac:	1406      	asrs	r6, r0, #16
 801f2ae:	d45d      	bmi.n	801f36c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f2b0:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801f2b4:	42b5      	cmp	r5, r6
 801f2b6:	dd59      	ble.n	801f36c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f2b8:	140f      	asrs	r7, r1, #16
 801f2ba:	d457      	bmi.n	801f36c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f2bc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f2c0:	42ba      	cmp	r2, r7
 801f2c2:	dd53      	ble.n	801f36c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f2c4:	9a01      	ldr	r2, [sp, #4]
 801f2c6:	b22d      	sxth	r5, r5
 801f2c8:	fb07 2505 	mla	r5, r7, r5, r2
 801f2cc:	5daa      	ldrb	r2, [r5, r6]
 801f2ce:	9d02      	ldr	r5, [sp, #8]
 801f2d0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801f2d4:	0e2e      	lsrs	r6, r5, #24
 801f2d6:	d049      	beq.n	801f36c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f2d8:	f06f 0201 	mvn.w	r2, #1
 801f2dc:	fb02 f20e 	mul.w	r2, r2, lr
 801f2e0:	9203      	str	r2, [sp, #12]
 801f2e2:	f834 8002 	ldrh.w	r8, [r4, r2]
 801f2e6:	9a05      	ldr	r2, [sp, #20]
 801f2e8:	4356      	muls	r6, r2
 801f2ea:	1c72      	adds	r2, r6, #1
 801f2ec:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801f2f0:	1212      	asrs	r2, r2, #8
 801f2f2:	fa1f f982 	uxth.w	r9, r2
 801f2f6:	ea4f 2728 	mov.w	r7, r8, asr #8
 801f2fa:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f2fe:	43d2      	mvns	r2, r2
 801f300:	b2d2      	uxtb	r2, r2
 801f302:	fb16 f609 	smulbb	r6, r6, r9
 801f306:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f30a:	fb07 6702 	mla	r7, r7, r2, r6
 801f30e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f312:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f316:	b2ed      	uxtb	r5, r5
 801f318:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f31c:	fa5f f888 	uxtb.w	r8, r8
 801f320:	fb15 f509 	smulbb	r5, r5, r9
 801f324:	fb08 5502 	mla	r5, r8, r2, r5
 801f328:	b2bf      	uxth	r7, r7
 801f32a:	fb1a fa09 	smulbb	sl, sl, r9
 801f32e:	b2ad      	uxth	r5, r5
 801f330:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f334:	fb06 a602 	mla	r6, r6, r2, sl
 801f338:	1c7a      	adds	r2, r7, #1
 801f33a:	f105 0a01 	add.w	sl, r5, #1
 801f33e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f342:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f346:	b2b6      	uxth	r6, r6
 801f348:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f34c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f350:	ea4a 0707 	orr.w	r7, sl, r7
 801f354:	f106 0a01 	add.w	sl, r6, #1
 801f358:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f35c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f360:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f364:	9a03      	ldr	r2, [sp, #12]
 801f366:	ea47 070a 	orr.w	r7, r7, sl
 801f36a:	52a7      	strh	r7, [r4, r2]
 801f36c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f36e:	4410      	add	r0, r2
 801f370:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f372:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f376:	4411      	add	r1, r2
 801f378:	e755      	b.n	801f226 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f37a:	f04f 0800 	mov.w	r8, #0
 801f37e:	eba3 0208 	sub.w	r2, r3, r8
 801f382:	2a00      	cmp	r2, #0
 801f384:	f77f af53 	ble.w	801f22e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f388:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801f38c:	9f01      	ldr	r7, [sp, #4]
 801f38e:	140a      	asrs	r2, r1, #16
 801f390:	1405      	asrs	r5, r0, #16
 801f392:	fb06 7202 	mla	r2, r6, r2, r7
 801f396:	5d52      	ldrb	r2, [r2, r5]
 801f398:	9d02      	ldr	r5, [sp, #8]
 801f39a:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801f39e:	0e2e      	lsrs	r6, r5, #24
 801f3a0:	d044      	beq.n	801f42c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801f3a2:	9a05      	ldr	r2, [sp, #20]
 801f3a4:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801f3a8:	4356      	muls	r6, r2
 801f3aa:	1c72      	adds	r2, r6, #1
 801f3ac:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801f3b0:	1212      	asrs	r2, r2, #8
 801f3b2:	fa1f f982 	uxth.w	r9, r2
 801f3b6:	ea4f 272e 	mov.w	r7, lr, asr #8
 801f3ba:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f3be:	43d2      	mvns	r2, r2
 801f3c0:	b2d2      	uxtb	r2, r2
 801f3c2:	fb16 f609 	smulbb	r6, r6, r9
 801f3c6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f3ca:	fb07 6702 	mla	r7, r7, r2, r6
 801f3ce:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f3d2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f3d6:	b2ed      	uxtb	r5, r5
 801f3d8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f3dc:	fa5f fe8e 	uxtb.w	lr, lr
 801f3e0:	fb15 f509 	smulbb	r5, r5, r9
 801f3e4:	fb0e 5502 	mla	r5, lr, r2, r5
 801f3e8:	b2bf      	uxth	r7, r7
 801f3ea:	fb1a fa09 	smulbb	sl, sl, r9
 801f3ee:	b2ad      	uxth	r5, r5
 801f3f0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f3f4:	fb06 a602 	mla	r6, r6, r2, sl
 801f3f8:	1c7a      	adds	r2, r7, #1
 801f3fa:	f105 0a01 	add.w	sl, r5, #1
 801f3fe:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f402:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f406:	b2b6      	uxth	r6, r6
 801f408:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f40c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f410:	ea4a 0707 	orr.w	r7, sl, r7
 801f414:	f106 0a01 	add.w	sl, r6, #1
 801f418:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f41c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f420:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f424:	ea47 070a 	orr.w	r7, r7, sl
 801f428:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801f42c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f42e:	4410      	add	r0, r2
 801f430:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f432:	f108 0801 	add.w	r8, r8, #1
 801f436:	4411      	add	r1, r2
 801f438:	e7a1      	b.n	801f37e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f43a:	b007      	add	sp, #28
 801f43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f440 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f444:	b085      	sub	sp, #20
 801f446:	468b      	mov	fp, r1
 801f448:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f44a:	9203      	str	r2, [sp, #12]
 801f44c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f450:	6841      	ldr	r1, [r0, #4]
 801f452:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801f456:	fb01 2404 	mla	r4, r1, r4, r2
 801f45a:	6802      	ldr	r2, [r0, #0]
 801f45c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f460:	f8de 2000 	ldr.w	r2, [lr]
 801f464:	9200      	str	r2, [sp, #0]
 801f466:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f46a:	3204      	adds	r2, #4
 801f46c:	9201      	str	r2, [sp, #4]
 801f46e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f472:	f1bb 0f00 	cmp.w	fp, #0
 801f476:	dc03      	bgt.n	801f480 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f478:	9a03      	ldr	r2, [sp, #12]
 801f47a:	2a00      	cmp	r2, #0
 801f47c:	f340 8153 	ble.w	801f726 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801f480:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f482:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f486:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801f48a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f48e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f490:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f494:	2b00      	cmp	r3, #0
 801f496:	dd0e      	ble.n	801f4b6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f498:	1408      	asrs	r0, r1, #16
 801f49a:	d405      	bmi.n	801f4a8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f49c:	42b8      	cmp	r0, r7
 801f49e:	da03      	bge.n	801f4a8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f4a0:	1410      	asrs	r0, r2, #16
 801f4a2:	d401      	bmi.n	801f4a8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f4a4:	42b0      	cmp	r0, r6
 801f4a6:	db07      	blt.n	801f4b8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f4a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f4aa:	4401      	add	r1, r0
 801f4ac:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f4ae:	3b01      	subs	r3, #1
 801f4b0:	4402      	add	r2, r0
 801f4b2:	3402      	adds	r4, #2
 801f4b4:	e7ee      	b.n	801f494 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f4b6:	d017      	beq.n	801f4e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f4b8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f4ba:	1e58      	subs	r0, r3, #1
 801f4bc:	fb05 1500 	mla	r5, r5, r0, r1
 801f4c0:	142d      	asrs	r5, r5, #16
 801f4c2:	d409      	bmi.n	801f4d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f4c4:	42bd      	cmp	r5, r7
 801f4c6:	da07      	bge.n	801f4d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f4c8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f4ca:	fb05 2000 	mla	r0, r5, r0, r2
 801f4ce:	1400      	asrs	r0, r0, #16
 801f4d0:	d402      	bmi.n	801f4d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f4d2:	42b0      	cmp	r0, r6
 801f4d4:	f2c0 80bc 	blt.w	801f650 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f4d8:	2600      	movs	r6, #0
 801f4da:	1998      	adds	r0, r3, r6
 801f4dc:	2800      	cmp	r0, #0
 801f4de:	dc3e      	bgt.n	801f55e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f4e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f4e4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f4e8:	f1bb 0f00 	cmp.w	fp, #0
 801f4ec:	f340 811b 	ble.w	801f726 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801f4f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f4f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f4f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f4fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f4fe:	f1bb 0b01 	subs.w	fp, fp, #1
 801f502:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f506:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f50a:	eeb0 6a62 	vmov.f32	s12, s5
 801f50e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f512:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f516:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f51a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f51e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f522:	eeb0 6a43 	vmov.f32	s12, s6
 801f526:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f52a:	ee12 2a90 	vmov	r2, s5
 801f52e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f532:	fb92 f3f3 	sdiv	r3, r2, r3
 801f536:	ee13 2a10 	vmov	r2, s6
 801f53a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f53e:	9311      	str	r3, [sp, #68]	; 0x44
 801f540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f542:	fb92 f3f3 	sdiv	r3, r2, r3
 801f546:	9a03      	ldr	r2, [sp, #12]
 801f548:	9312      	str	r3, [sp, #72]	; 0x48
 801f54a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f54e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f550:	eeb0 3a67 	vmov.f32	s6, s15
 801f554:	bf08      	it	eq
 801f556:	4613      	moveq	r3, r2
 801f558:	eef0 2a47 	vmov.f32	s5, s14
 801f55c:	e789      	b.n	801f472 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f55e:	140f      	asrs	r7, r1, #16
 801f560:	d45e      	bmi.n	801f620 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f562:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f566:	42bd      	cmp	r5, r7
 801f568:	dd5a      	ble.n	801f620 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f56a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f56e:	d457      	bmi.n	801f620 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f570:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f574:	4560      	cmp	r0, ip
 801f576:	dd53      	ble.n	801f620 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f578:	9800      	ldr	r0, [sp, #0]
 801f57a:	b22d      	sxth	r5, r5
 801f57c:	fb0c 0505 	mla	r5, ip, r5, r0
 801f580:	5de8      	ldrb	r0, [r5, r7]
 801f582:	9d01      	ldr	r5, [sp, #4]
 801f584:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801f588:	0e07      	lsrs	r7, r0, #24
 801f58a:	2fff      	cmp	r7, #255	; 0xff
 801f58c:	d04e      	beq.n	801f62c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801f58e:	b2fd      	uxtb	r5, r7
 801f590:	2f00      	cmp	r7, #0
 801f592:	d045      	beq.n	801f620 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f594:	f06f 0701 	mvn.w	r7, #1
 801f598:	4377      	muls	r7, r6
 801f59a:	fa1f f985 	uxth.w	r9, r5
 801f59e:	f834 8007 	ldrh.w	r8, [r4, r7]
 801f5a2:	9702      	str	r7, [sp, #8]
 801f5a4:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f5a8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801f5ac:	43ed      	mvns	r5, r5
 801f5ae:	b2ed      	uxtb	r5, r5
 801f5b0:	fb17 f709 	smulbb	r7, r7, r9
 801f5b4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f5b8:	fb0c 7c05 	mla	ip, ip, r5, r7
 801f5bc:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801f5c0:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801f5c4:	b2c0      	uxtb	r0, r0
 801f5c6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f5ca:	fa5f f888 	uxtb.w	r8, r8
 801f5ce:	fb10 f009 	smulbb	r0, r0, r9
 801f5d2:	fb08 0005 	mla	r0, r8, r5, r0
 801f5d6:	b280      	uxth	r0, r0
 801f5d8:	fa1f fc8c 	uxth.w	ip, ip
 801f5dc:	fb1a fa09 	smulbb	sl, sl, r9
 801f5e0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f5e4:	fb07 a705 	mla	r7, r7, r5, sl
 801f5e8:	f100 0a01 	add.w	sl, r0, #1
 801f5ec:	f10c 0501 	add.w	r5, ip, #1
 801f5f0:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801f5f4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f5f8:	b2bf      	uxth	r7, r7
 801f5fa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f5fe:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f602:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f606:	f107 0a01 	add.w	sl, r7, #1
 801f60a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f60e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f612:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f616:	9802      	ldr	r0, [sp, #8]
 801f618:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f61c:	f824 c000 	strh.w	ip, [r4, r0]
 801f620:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f622:	4401      	add	r1, r0
 801f624:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f626:	3e01      	subs	r6, #1
 801f628:	4402      	add	r2, r0
 801f62a:	e756      	b.n	801f4da <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f62c:	f06f 0501 	mvn.w	r5, #1
 801f630:	fb05 f706 	mul.w	r7, r5, r6
 801f634:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801f638:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801f63c:	0945      	lsrs	r5, r0, #5
 801f63e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f642:	ea4c 0505 	orr.w	r5, ip, r5
 801f646:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801f64a:	4305      	orrs	r5, r0
 801f64c:	53e5      	strh	r5, [r4, r7]
 801f64e:	e7e7      	b.n	801f620 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f650:	f04f 0800 	mov.w	r8, #0
 801f654:	eba3 0008 	sub.w	r0, r3, r8
 801f658:	2800      	cmp	r0, #0
 801f65a:	f77f af41 	ble.w	801f4e0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f65e:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f662:	9f00      	ldr	r7, [sp, #0]
 801f664:	1410      	asrs	r0, r2, #16
 801f666:	140d      	asrs	r5, r1, #16
 801f668:	fb06 7000 	mla	r0, r6, r0, r7
 801f66c:	5d40      	ldrb	r0, [r0, r5]
 801f66e:	9d01      	ldr	r5, [sp, #4]
 801f670:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801f674:	0e06      	lsrs	r6, r0, #24
 801f676:	2eff      	cmp	r6, #255	; 0xff
 801f678:	d048      	beq.n	801f70c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801f67a:	b2f5      	uxtb	r5, r6
 801f67c:	2e00      	cmp	r6, #0
 801f67e:	d03e      	beq.n	801f6fe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801f680:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801f684:	fa1f f985 	uxth.w	r9, r5
 801f688:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f68c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801f690:	43ed      	mvns	r5, r5
 801f692:	b2ed      	uxtb	r5, r5
 801f694:	fb16 f609 	smulbb	r6, r6, r9
 801f698:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f69c:	fb07 6705 	mla	r7, r7, r5, r6
 801f6a0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801f6a4:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801f6a8:	b2c0      	uxtb	r0, r0
 801f6aa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f6ae:	fa5f fc8c 	uxtb.w	ip, ip
 801f6b2:	fb10 f009 	smulbb	r0, r0, r9
 801f6b6:	fb0c 0005 	mla	r0, ip, r5, r0
 801f6ba:	b2bf      	uxth	r7, r7
 801f6bc:	fb1a fa09 	smulbb	sl, sl, r9
 801f6c0:	b280      	uxth	r0, r0
 801f6c2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f6c6:	fb06 a605 	mla	r6, r6, r5, sl
 801f6ca:	1c7d      	adds	r5, r7, #1
 801f6cc:	f100 0a01 	add.w	sl, r0, #1
 801f6d0:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801f6d4:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801f6d8:	b2b6      	uxth	r6, r6
 801f6da:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f6de:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f6e2:	ea4a 0707 	orr.w	r7, sl, r7
 801f6e6:	f106 0a01 	add.w	sl, r6, #1
 801f6ea:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f6ee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f6f2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f6f6:	ea47 070a 	orr.w	r7, r7, sl
 801f6fa:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801f6fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f700:	4401      	add	r1, r0
 801f702:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f704:	f108 0801 	add.w	r8, r8, #1
 801f708:	4402      	add	r2, r0
 801f70a:	e7a3      	b.n	801f654 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f70c:	4d07      	ldr	r5, [pc, #28]	; (801f72c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801f70e:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 801f712:	0945      	lsrs	r5, r0, #5
 801f714:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f718:	4335      	orrs	r5, r6
 801f71a:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801f71e:	4305      	orrs	r5, r0
 801f720:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801f724:	e7eb      	b.n	801f6fe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801f726:	b005      	add	sp, #20
 801f728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f72c:	fffff800 	.word	0xfffff800

0801f730 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f734:	b087      	sub	sp, #28
 801f736:	468b      	mov	fp, r1
 801f738:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f73a:	9204      	str	r2, [sp, #16]
 801f73c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f740:	9205      	str	r2, [sp, #20]
 801f742:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801f746:	6861      	ldr	r1, [r4, #4]
 801f748:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801f74c:	fb01 2000 	mla	r0, r1, r0, r2
 801f750:	6822      	ldr	r2, [r4, #0]
 801f752:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f756:	f8de 2000 	ldr.w	r2, [lr]
 801f75a:	9201      	str	r2, [sp, #4]
 801f75c:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f760:	9202      	str	r2, [sp, #8]
 801f762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f766:	f1bb 0f00 	cmp.w	fp, #0
 801f76a:	dc03      	bgt.n	801f774 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f76c:	9a04      	ldr	r2, [sp, #16]
 801f76e:	2a00      	cmp	r2, #0
 801f770:	f340 8142 	ble.w	801f9f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f774:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f776:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f77a:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801f77e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f782:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f784:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f788:	2b00      	cmp	r3, #0
 801f78a:	dd0e      	ble.n	801f7aa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f78c:	140c      	asrs	r4, r1, #16
 801f78e:	d405      	bmi.n	801f79c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f790:	42bc      	cmp	r4, r7
 801f792:	da03      	bge.n	801f79c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f794:	1414      	asrs	r4, r2, #16
 801f796:	d401      	bmi.n	801f79c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f798:	42b4      	cmp	r4, r6
 801f79a:	db07      	blt.n	801f7ac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f79c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f79e:	4421      	add	r1, r4
 801f7a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f7a2:	3b01      	subs	r3, #1
 801f7a4:	4422      	add	r2, r4
 801f7a6:	3002      	adds	r0, #2
 801f7a8:	e7ee      	b.n	801f788 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f7aa:	d019      	beq.n	801f7e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f7ac:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f7ae:	1e5c      	subs	r4, r3, #1
 801f7b0:	fb05 1504 	mla	r5, r5, r4, r1
 801f7b4:	142d      	asrs	r5, r5, #16
 801f7b6:	d409      	bmi.n	801f7cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f7b8:	42bd      	cmp	r5, r7
 801f7ba:	da07      	bge.n	801f7cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f7bc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f7be:	fb05 2404 	mla	r4, r5, r4, r2
 801f7c2:	1424      	asrs	r4, r4, #16
 801f7c4:	d402      	bmi.n	801f7cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f7c6:	42b4      	cmp	r4, r6
 801f7c8:	f2c0 80b1 	blt.w	801f92e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801f7cc:	f04f 0800 	mov.w	r8, #0
 801f7d0:	eb03 0408 	add.w	r4, r3, r8
 801f7d4:	2c00      	cmp	r4, #0
 801f7d6:	dc3e      	bgt.n	801f856 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f7d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f7dc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f7e0:	f1bb 0f00 	cmp.w	fp, #0
 801f7e4:	f340 8108 	ble.w	801f9f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f7e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f7ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f7f0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f7f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f7f6:	f1bb 0b01 	subs.w	fp, fp, #1
 801f7fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f7fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f802:	eeb0 6a62 	vmov.f32	s12, s5
 801f806:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f80a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f80e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f812:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f816:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f81a:	eeb0 6a43 	vmov.f32	s12, s6
 801f81e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f822:	ee12 2a90 	vmov	r2, s5
 801f826:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f82a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f82e:	ee13 2a10 	vmov	r2, s6
 801f832:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f836:	9313      	str	r3, [sp, #76]	; 0x4c
 801f838:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f83a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f83e:	9a04      	ldr	r2, [sp, #16]
 801f840:	9314      	str	r3, [sp, #80]	; 0x50
 801f842:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f846:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f848:	eeb0 3a67 	vmov.f32	s6, s15
 801f84c:	bf08      	it	eq
 801f84e:	4613      	moveq	r3, r2
 801f850:	eef0 2a47 	vmov.f32	s5, s14
 801f854:	e787      	b.n	801f766 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f856:	140e      	asrs	r6, r1, #16
 801f858:	d462      	bmi.n	801f920 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f85a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f85e:	42b5      	cmp	r5, r6
 801f860:	dd5e      	ble.n	801f920 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f862:	1417      	asrs	r7, r2, #16
 801f864:	d45c      	bmi.n	801f920 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f866:	f8de 400c 	ldr.w	r4, [lr, #12]
 801f86a:	42bc      	cmp	r4, r7
 801f86c:	dd58      	ble.n	801f920 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f86e:	b22d      	sxth	r5, r5
 801f870:	fb07 6505 	mla	r5, r7, r5, r6
 801f874:	9c02      	ldr	r4, [sp, #8]
 801f876:	5d66      	ldrb	r6, [r4, r5]
 801f878:	2e00      	cmp	r6, #0
 801f87a:	d051      	beq.n	801f920 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f87c:	9c01      	ldr	r4, [sp, #4]
 801f87e:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801f882:	f06f 0401 	mvn.w	r4, #1
 801f886:	fb04 f408 	mul.w	r4, r4, r8
 801f88a:	9403      	str	r4, [sp, #12]
 801f88c:	5b05      	ldrh	r5, [r0, r4]
 801f88e:	9c05      	ldr	r4, [sp, #20]
 801f890:	4366      	muls	r6, r4
 801f892:	1c74      	adds	r4, r6, #1
 801f894:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f898:	1224      	asrs	r4, r4, #8
 801f89a:	b2a7      	uxth	r7, r4
 801f89c:	122e      	asrs	r6, r5, #8
 801f89e:	43e4      	mvns	r4, r4
 801f8a0:	b2e4      	uxtb	r4, r4
 801f8a2:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801f8a6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f8aa:	fb16 f604 	smulbb	r6, r6, r4
 801f8ae:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f8b2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f8b6:	00ed      	lsls	r5, r5, #3
 801f8b8:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f8bc:	b2ed      	uxtb	r5, r5
 801f8be:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801f8c2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f8c6:	fb15 f504 	smulbb	r5, r5, r4
 801f8ca:	fa5f f989 	uxtb.w	r9, r9
 801f8ce:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f8d2:	fb09 5507 	mla	r5, r9, r7, r5
 801f8d6:	fb1a fa04 	smulbb	sl, sl, r4
 801f8da:	fa1f fc8c 	uxth.w	ip, ip
 801f8de:	b2ad      	uxth	r5, r5
 801f8e0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f8e4:	fb06 a607 	mla	r6, r6, r7, sl
 801f8e8:	f10c 0401 	add.w	r4, ip, #1
 801f8ec:	f105 0a01 	add.w	sl, r5, #1
 801f8f0:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f8f4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f8f8:	b2b6      	uxth	r6, r6
 801f8fa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f8fe:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f902:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f906:	f106 0a01 	add.w	sl, r6, #1
 801f90a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f90e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f912:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f916:	9c03      	ldr	r4, [sp, #12]
 801f918:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f91c:	f820 c004 	strh.w	ip, [r0, r4]
 801f920:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f922:	4421      	add	r1, r4
 801f924:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f926:	f108 38ff 	add.w	r8, r8, #4294967295
 801f92a:	4422      	add	r2, r4
 801f92c:	e750      	b.n	801f7d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f92e:	f04f 0900 	mov.w	r9, #0
 801f932:	eba3 0409 	sub.w	r4, r3, r9
 801f936:	2c00      	cmp	r4, #0
 801f938:	f77f af4e 	ble.w	801f7d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f93c:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f940:	140d      	asrs	r5, r1, #16
 801f942:	1414      	asrs	r4, r2, #16
 801f944:	fb06 5404 	mla	r4, r6, r4, r5
 801f948:	9d02      	ldr	r5, [sp, #8]
 801f94a:	5d2e      	ldrb	r6, [r5, r4]
 801f94c:	2e00      	cmp	r6, #0
 801f94e:	d04c      	beq.n	801f9ea <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f950:	9d01      	ldr	r5, [sp, #4]
 801f952:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801f956:	9c05      	ldr	r4, [sp, #20]
 801f958:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f95c:	4366      	muls	r6, r4
 801f95e:	1c74      	adds	r4, r6, #1
 801f960:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f964:	1224      	asrs	r4, r4, #8
 801f966:	b2a7      	uxth	r7, r4
 801f968:	122e      	asrs	r6, r5, #8
 801f96a:	43e4      	mvns	r4, r4
 801f96c:	b2e4      	uxtb	r4, r4
 801f96e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f972:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f976:	fb16 f604 	smulbb	r6, r6, r4
 801f97a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f97e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f982:	00ed      	lsls	r5, r5, #3
 801f984:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f988:	b2ed      	uxtb	r5, r5
 801f98a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f98e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f992:	fb15 f504 	smulbb	r5, r5, r4
 801f996:	fa5f f888 	uxtb.w	r8, r8
 801f99a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f99e:	fb08 5507 	mla	r5, r8, r7, r5
 801f9a2:	fb1a fa04 	smulbb	sl, sl, r4
 801f9a6:	fa1f fc8c 	uxth.w	ip, ip
 801f9aa:	b2ad      	uxth	r5, r5
 801f9ac:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f9b0:	fb06 a607 	mla	r6, r6, r7, sl
 801f9b4:	f10c 0401 	add.w	r4, ip, #1
 801f9b8:	f105 0a01 	add.w	sl, r5, #1
 801f9bc:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f9c0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f9c4:	b2b6      	uxth	r6, r6
 801f9c6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f9ca:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f9ce:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f9d2:	f106 0a01 	add.w	sl, r6, #1
 801f9d6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f9da:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f9de:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f9e2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f9e6:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f9ea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f9ec:	4421      	add	r1, r4
 801f9ee:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f9f0:	f109 0901 	add.w	r9, r9, #1
 801f9f4:	4422      	add	r2, r4
 801f9f6:	e79c      	b.n	801f932 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f9f8:	b007      	add	sp, #28
 801f9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f9fe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f9fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa02:	b085      	sub	sp, #20
 801fa04:	468b      	mov	fp, r1
 801fa06:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fa08:	9203      	str	r2, [sp, #12]
 801fa0a:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801fa0e:	6861      	ldr	r1, [r4, #4]
 801fa10:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801fa14:	fb01 2000 	mla	r0, r1, r0, r2
 801fa18:	6822      	ldr	r2, [r4, #0]
 801fa1a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801fa1e:	f8d8 2000 	ldr.w	r2, [r8]
 801fa22:	9200      	str	r2, [sp, #0]
 801fa24:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801fa28:	9201      	str	r2, [sp, #4]
 801fa2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fa2e:	f1bb 0f00 	cmp.w	fp, #0
 801fa32:	dc03      	bgt.n	801fa3c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801fa34:	9a03      	ldr	r2, [sp, #12]
 801fa36:	2a00      	cmp	r2, #0
 801fa38:	f340 8146 	ble.w	801fcc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801fa3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fa3e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801fa42:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801fa46:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fa4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fa4c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fa50:	2b00      	cmp	r3, #0
 801fa52:	dd0e      	ble.n	801fa72 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fa54:	140c      	asrs	r4, r1, #16
 801fa56:	d405      	bmi.n	801fa64 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fa58:	42bc      	cmp	r4, r7
 801fa5a:	da03      	bge.n	801fa64 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fa5c:	1414      	asrs	r4, r2, #16
 801fa5e:	d401      	bmi.n	801fa64 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fa60:	42b4      	cmp	r4, r6
 801fa62:	db07      	blt.n	801fa74 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fa64:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fa66:	4421      	add	r1, r4
 801fa68:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fa6a:	3b01      	subs	r3, #1
 801fa6c:	4422      	add	r2, r4
 801fa6e:	3002      	adds	r0, #2
 801fa70:	e7ee      	b.n	801fa50 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801fa72:	d017      	beq.n	801faa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801fa74:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fa76:	1e5c      	subs	r4, r3, #1
 801fa78:	fb05 1504 	mla	r5, r5, r4, r1
 801fa7c:	142d      	asrs	r5, r5, #16
 801fa7e:	d409      	bmi.n	801fa94 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fa80:	42bd      	cmp	r5, r7
 801fa82:	da07      	bge.n	801fa94 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fa84:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fa86:	fb05 2404 	mla	r4, r5, r4, r2
 801fa8a:	1424      	asrs	r4, r4, #16
 801fa8c:	d402      	bmi.n	801fa94 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fa8e:	42b4      	cmp	r4, r6
 801fa90:	f2c0 80b3 	blt.w	801fbfa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801fa94:	2600      	movs	r6, #0
 801fa96:	199c      	adds	r4, r3, r6
 801fa98:	2c00      	cmp	r4, #0
 801fa9a:	dc3e      	bgt.n	801fb1a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fa9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801faa0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801faa4:	f1bb 0f00 	cmp.w	fp, #0
 801faa8:	f340 810e 	ble.w	801fcc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801faac:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fab0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fab4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fab8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801faba:	f1bb 0b01 	subs.w	fp, fp, #1
 801fabe:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fac2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fac6:	eeb0 6a62 	vmov.f32	s12, s5
 801faca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801face:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fad2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fad6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fada:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fade:	eeb0 6a43 	vmov.f32	s12, s6
 801fae2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fae6:	ee12 2a90 	vmov	r2, s5
 801faea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801faee:	fb92 f3f3 	sdiv	r3, r2, r3
 801faf2:	ee13 2a10 	vmov	r2, s6
 801faf6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fafa:	9311      	str	r3, [sp, #68]	; 0x44
 801fafc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fafe:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb02:	9a03      	ldr	r2, [sp, #12]
 801fb04:	9312      	str	r3, [sp, #72]	; 0x48
 801fb06:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fb0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fb0c:	eeb0 3a67 	vmov.f32	s6, s15
 801fb10:	bf08      	it	eq
 801fb12:	4613      	moveq	r3, r2
 801fb14:	eef0 2a47 	vmov.f32	s5, s14
 801fb18:	e789      	b.n	801fa2e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801fb1a:	140f      	asrs	r7, r1, #16
 801fb1c:	d45f      	bmi.n	801fbde <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801fb1e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801fb22:	42bd      	cmp	r5, r7
 801fb24:	dd5b      	ble.n	801fbde <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801fb26:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fb2a:	d458      	bmi.n	801fbde <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801fb2c:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801fb30:	4564      	cmp	r4, ip
 801fb32:	dd54      	ble.n	801fbde <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801fb34:	b22d      	sxth	r5, r5
 801fb36:	fb0c 7505 	mla	r5, ip, r5, r7
 801fb3a:	9c01      	ldr	r4, [sp, #4]
 801fb3c:	5d64      	ldrb	r4, [r4, r5]
 801fb3e:	2cff      	cmp	r4, #255	; 0xff
 801fb40:	d053      	beq.n	801fbea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801fb42:	2c00      	cmp	r4, #0
 801fb44:	d04b      	beq.n	801fbde <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801fb46:	9f00      	ldr	r7, [sp, #0]
 801fb48:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801fb4c:	f06f 0501 	mvn.w	r5, #1
 801fb50:	4375      	muls	r5, r6
 801fb52:	9502      	str	r5, [sp, #8]
 801fb54:	5b45      	ldrh	r5, [r0, r5]
 801fb56:	fa1f fc84 	uxth.w	ip, r4
 801fb5a:	122f      	asrs	r7, r5, #8
 801fb5c:	43e4      	mvns	r4, r4
 801fb5e:	b2e4      	uxtb	r4, r4
 801fb60:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801fb64:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fb68:	fb17 f704 	smulbb	r7, r7, r4
 801fb6c:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801fb70:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801fb74:	00ed      	lsls	r5, r5, #3
 801fb76:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801fb7a:	b2ed      	uxtb	r5, r5
 801fb7c:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801fb80:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801fb84:	fb15 f504 	smulbb	r5, r5, r4
 801fb88:	fa5f f989 	uxtb.w	r9, r9
 801fb8c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801fb90:	fb09 550c 	mla	r5, r9, ip, r5
 801fb94:	fb1a fa04 	smulbb	sl, sl, r4
 801fb98:	fa1f fe8e 	uxth.w	lr, lr
 801fb9c:	b2ad      	uxth	r5, r5
 801fb9e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fba2:	fb07 a70c 	mla	r7, r7, ip, sl
 801fba6:	f10e 0401 	add.w	r4, lr, #1
 801fbaa:	f105 0a01 	add.w	sl, r5, #1
 801fbae:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801fbb2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fbb6:	b2bf      	uxth	r7, r7
 801fbb8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fbbc:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801fbc0:	ea4a 0e0e 	orr.w	lr, sl, lr
 801fbc4:	f107 0a01 	add.w	sl, r7, #1
 801fbc8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801fbcc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fbd0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fbd4:	9c02      	ldr	r4, [sp, #8]
 801fbd6:	ea4e 0e0a 	orr.w	lr, lr, sl
 801fbda:	f820 e004 	strh.w	lr, [r0, r4]
 801fbde:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fbe0:	4421      	add	r1, r4
 801fbe2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fbe4:	3e01      	subs	r6, #1
 801fbe6:	4422      	add	r2, r4
 801fbe8:	e755      	b.n	801fa96 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fbea:	9c00      	ldr	r4, [sp, #0]
 801fbec:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801fbf0:	f06f 0401 	mvn.w	r4, #1
 801fbf4:	4374      	muls	r4, r6
 801fbf6:	5305      	strh	r5, [r0, r4]
 801fbf8:	e7f1      	b.n	801fbde <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801fbfa:	f04f 0900 	mov.w	r9, #0
 801fbfe:	eba3 0409 	sub.w	r4, r3, r9
 801fc02:	2c00      	cmp	r4, #0
 801fc04:	f77f af4a 	ble.w	801fa9c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fc08:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801fc0c:	1414      	asrs	r4, r2, #16
 801fc0e:	140d      	asrs	r5, r1, #16
 801fc10:	fb06 5504 	mla	r5, r6, r4, r5
 801fc14:	9c01      	ldr	r4, [sp, #4]
 801fc16:	5d64      	ldrb	r4, [r4, r5]
 801fc18:	2cff      	cmp	r4, #255	; 0xff
 801fc1a:	d04f      	beq.n	801fcbc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801fc1c:	2c00      	cmp	r4, #0
 801fc1e:	d046      	beq.n	801fcae <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fc20:	9e00      	ldr	r6, [sp, #0]
 801fc22:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801fc26:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801fc2a:	b2a7      	uxth	r7, r4
 801fc2c:	122e      	asrs	r6, r5, #8
 801fc2e:	43e4      	mvns	r4, r4
 801fc30:	b2e4      	uxtb	r4, r4
 801fc32:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fc36:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fc3a:	fb16 f604 	smulbb	r6, r6, r4
 801fc3e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801fc42:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fc46:	00ed      	lsls	r5, r5, #3
 801fc48:	fb0c 6c07 	mla	ip, ip, r7, r6
 801fc4c:	b2ed      	uxtb	r5, r5
 801fc4e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801fc52:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fc56:	fb15 f504 	smulbb	r5, r5, r4
 801fc5a:	fa5f fe8e 	uxtb.w	lr, lr
 801fc5e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801fc62:	fb0e 5507 	mla	r5, lr, r7, r5
 801fc66:	fb1a fa04 	smulbb	sl, sl, r4
 801fc6a:	fa1f fc8c 	uxth.w	ip, ip
 801fc6e:	b2ad      	uxth	r5, r5
 801fc70:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fc74:	fb06 a607 	mla	r6, r6, r7, sl
 801fc78:	f10c 0401 	add.w	r4, ip, #1
 801fc7c:	f105 0a01 	add.w	sl, r5, #1
 801fc80:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801fc84:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fc88:	b2b6      	uxth	r6, r6
 801fc8a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fc8e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fc92:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fc96:	f106 0a01 	add.w	sl, r6, #1
 801fc9a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fc9e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fca2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fca6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fcaa:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801fcae:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fcb0:	4421      	add	r1, r4
 801fcb2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fcb4:	f109 0901 	add.w	r9, r9, #1
 801fcb8:	4422      	add	r2, r4
 801fcba:	e7a0      	b.n	801fbfe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801fcbc:	9c00      	ldr	r4, [sp, #0]
 801fcbe:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801fcc2:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801fcc6:	e7f2      	b.n	801fcae <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fcc8:	b005      	add	sp, #20
 801fcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fcce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fcce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcd2:	b085      	sub	sp, #20
 801fcd4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fcd6:	9203      	str	r2, [sp, #12]
 801fcd8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801fcdc:	9201      	str	r2, [sp, #4]
 801fcde:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fce2:	9100      	str	r1, [sp, #0]
 801fce4:	6841      	ldr	r1, [r0, #4]
 801fce6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801fcea:	fb01 2404 	mla	r4, r1, r4, r2
 801fcee:	6802      	ldr	r2, [r0, #0]
 801fcf0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fcf4:	f8de 2000 	ldr.w	r2, [lr]
 801fcf8:	9202      	str	r2, [sp, #8]
 801fcfa:	9a01      	ldr	r2, [sp, #4]
 801fcfc:	43d6      	mvns	r6, r2
 801fcfe:	b2f6      	uxtb	r6, r6
 801fd00:	9a00      	ldr	r2, [sp, #0]
 801fd02:	2a00      	cmp	r2, #0
 801fd04:	dc03      	bgt.n	801fd0e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801fd06:	9a03      	ldr	r2, [sp, #12]
 801fd08:	2a00      	cmp	r2, #0
 801fd0a:	f340 8124 	ble.w	801ff56 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801fd0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fd10:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801fd14:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801fd18:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fd1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fd1e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	dd0e      	ble.n	801fd44 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fd26:	1408      	asrs	r0, r1, #16
 801fd28:	d405      	bmi.n	801fd36 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fd2a:	4560      	cmp	r0, ip
 801fd2c:	da03      	bge.n	801fd36 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fd2e:	1410      	asrs	r0, r2, #16
 801fd30:	d401      	bmi.n	801fd36 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fd32:	42b8      	cmp	r0, r7
 801fd34:	db07      	blt.n	801fd46 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fd36:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fd38:	4401      	add	r1, r0
 801fd3a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fd3c:	3b01      	subs	r3, #1
 801fd3e:	4402      	add	r2, r0
 801fd40:	3402      	adds	r4, #2
 801fd42:	e7ee      	b.n	801fd22 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801fd44:	d06e      	beq.n	801fe24 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801fd46:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fd48:	1e58      	subs	r0, r3, #1
 801fd4a:	fb05 1500 	mla	r5, r5, r0, r1
 801fd4e:	142d      	asrs	r5, r5, #16
 801fd50:	d45c      	bmi.n	801fe0c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801fd52:	4565      	cmp	r5, ip
 801fd54:	da5a      	bge.n	801fe0c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801fd56:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fd58:	fb05 2000 	mla	r0, r5, r0, r2
 801fd5c:	1400      	asrs	r0, r0, #16
 801fd5e:	d455      	bmi.n	801fe0c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801fd60:	42b8      	cmp	r0, r7
 801fd62:	da53      	bge.n	801fe0c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801fd64:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801fd68:	4699      	mov	r9, r3
 801fd6a:	46a2      	mov	sl, r4
 801fd6c:	f1b9 0f00 	cmp.w	r9, #0
 801fd70:	dd54      	ble.n	801fe1c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801fd72:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801fd76:	140d      	asrs	r5, r1, #16
 801fd78:	1410      	asrs	r0, r2, #16
 801fd7a:	fb07 5000 	mla	r0, r7, r0, r5
 801fd7e:	9d02      	ldr	r5, [sp, #8]
 801fd80:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801fd84:	f8ba 5000 	ldrh.w	r5, [sl]
 801fd88:	122f      	asrs	r7, r5, #8
 801fd8a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801fd8e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fd92:	fb17 f706 	smulbb	r7, r7, r6
 801fd96:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801fd9a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fd9e:	00ed      	lsls	r5, r5, #3
 801fda0:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801fda4:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801fda8:	10c7      	asrs	r7, r0, #3
 801fdaa:	b2ed      	uxtb	r5, r5
 801fdac:	00c0      	lsls	r0, r0, #3
 801fdae:	fb18 f806 	smulbb	r8, r8, r6
 801fdb2:	fb15 f506 	smulbb	r5, r5, r6
 801fdb6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fdba:	b2c0      	uxtb	r0, r0
 801fdbc:	fa1f fc8c 	uxth.w	ip, ip
 801fdc0:	fb07 870b 	mla	r7, r7, fp, r8
 801fdc4:	fb00 500b 	mla	r0, r0, fp, r5
 801fdc8:	b280      	uxth	r0, r0
 801fdca:	b2bf      	uxth	r7, r7
 801fdcc:	f10c 0501 	add.w	r5, ip, #1
 801fdd0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fdd4:	f107 0801 	add.w	r8, r7, #1
 801fdd8:	1c45      	adds	r5, r0, #1
 801fdda:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801fdde:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801fde2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fde4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fde8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801fdec:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801fdf0:	ea45 0c0c 	orr.w	ip, r5, ip
 801fdf4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801fdf8:	4401      	add	r1, r0
 801fdfa:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fdfc:	ea4c 0c08 	orr.w	ip, ip, r8
 801fe00:	f82a cb02 	strh.w	ip, [sl], #2
 801fe04:	4402      	add	r2, r0
 801fe06:	f109 39ff 	add.w	r9, r9, #4294967295
 801fe0a:	e7af      	b.n	801fd6c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fe0c:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801fe10:	f04f 0800 	mov.w	r8, #0
 801fe14:	eb03 0008 	add.w	r0, r3, r8
 801fe18:	2800      	cmp	r0, #0
 801fe1a:	dc41      	bgt.n	801fea0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801fe1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fe20:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fe24:	9b00      	ldr	r3, [sp, #0]
 801fe26:	2b00      	cmp	r3, #0
 801fe28:	f340 8095 	ble.w	801ff56 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801fe2c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fe30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fe34:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fe38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fe3e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fe42:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fe46:	eef0 6a62 	vmov.f32	s13, s5
 801fe4a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fe52:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe56:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801fe5a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe5e:	eef0 6a43 	vmov.f32	s13, s6
 801fe62:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe66:	ee12 2a90 	vmov	r2, s5
 801fe6a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fe6e:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe72:	ee13 2a10 	vmov	r2, s6
 801fe76:	9311      	str	r3, [sp, #68]	; 0x44
 801fe78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe7a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe7e:	9312      	str	r3, [sp, #72]	; 0x48
 801fe80:	9b00      	ldr	r3, [sp, #0]
 801fe82:	9a03      	ldr	r2, [sp, #12]
 801fe84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fe88:	3b01      	subs	r3, #1
 801fe8a:	9300      	str	r3, [sp, #0]
 801fe8c:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801fe90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe92:	eeb0 3a67 	vmov.f32	s6, s15
 801fe96:	bf08      	it	eq
 801fe98:	4613      	moveq	r3, r2
 801fe9a:	eef0 2a47 	vmov.f32	s5, s14
 801fe9e:	e72f      	b.n	801fd00 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801fea0:	140f      	asrs	r7, r1, #16
 801fea2:	d451      	bmi.n	801ff48 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801fea4:	f8de 5008 	ldr.w	r5, [lr, #8]
 801fea8:	42bd      	cmp	r5, r7
 801feaa:	dd4d      	ble.n	801ff48 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801feac:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801feb0:	d44a      	bmi.n	801ff48 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801feb2:	f8de 000c 	ldr.w	r0, [lr, #12]
 801feb6:	4560      	cmp	r0, ip
 801feb8:	dd46      	ble.n	801ff48 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801feba:	b22d      	sxth	r5, r5
 801febc:	fb0c 7505 	mla	r5, ip, r5, r7
 801fec0:	9802      	ldr	r0, [sp, #8]
 801fec2:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801fec6:	f06f 0501 	mvn.w	r5, #1
 801feca:	fb05 fb08 	mul.w	fp, r5, r8
 801fece:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801fed2:	f834 500b 	ldrh.w	r5, [r4, fp]
 801fed6:	122f      	asrs	r7, r5, #8
 801fed8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fedc:	fb17 f706 	smulbb	r7, r7, r6
 801fee0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801fee4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fee8:	00ed      	lsls	r5, r5, #3
 801feea:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801feee:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801fef2:	10c7      	asrs	r7, r0, #3
 801fef4:	b2ed      	uxtb	r5, r5
 801fef6:	00c0      	lsls	r0, r0, #3
 801fef8:	fb19 f906 	smulbb	r9, r9, r6
 801fefc:	fb15 f506 	smulbb	r5, r5, r6
 801ff00:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ff04:	b2c0      	uxtb	r0, r0
 801ff06:	fa1f fc8c 	uxth.w	ip, ip
 801ff0a:	fb07 970a 	mla	r7, r7, sl, r9
 801ff0e:	fb00 500a 	mla	r0, r0, sl, r5
 801ff12:	b2bf      	uxth	r7, r7
 801ff14:	b280      	uxth	r0, r0
 801ff16:	f10c 0501 	add.w	r5, ip, #1
 801ff1a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ff1e:	f107 0901 	add.w	r9, r7, #1
 801ff22:	1c45      	adds	r5, r0, #1
 801ff24:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ff28:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801ff2c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ff30:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ff34:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ff38:	ea45 0c0c 	orr.w	ip, r5, ip
 801ff3c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ff40:	ea4c 0c09 	orr.w	ip, ip, r9
 801ff44:	f824 c00b 	strh.w	ip, [r4, fp]
 801ff48:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ff4a:	4401      	add	r1, r0
 801ff4c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ff4e:	f108 38ff 	add.w	r8, r8, #4294967295
 801ff52:	4402      	add	r2, r0
 801ff54:	e75e      	b.n	801fe14 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ff56:	b005      	add	sp, #20
 801ff58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ff5c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ff5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff60:	b085      	sub	sp, #20
 801ff62:	4693      	mov	fp, r2
 801ff64:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ff66:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ff68:	6870      	ldr	r0, [r6, #4]
 801ff6a:	9101      	str	r1, [sp, #4]
 801ff6c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ff70:	fb00 2404 	mla	r4, r0, r4, r2
 801ff74:	6832      	ldr	r2, [r6, #0]
 801ff76:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801ff7a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ff7e:	682a      	ldr	r2, [r5, #0]
 801ff80:	9202      	str	r2, [sp, #8]
 801ff82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ff86:	9a01      	ldr	r2, [sp, #4]
 801ff88:	2a00      	cmp	r2, #0
 801ff8a:	dc03      	bgt.n	801ff94 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ff8c:	f1bb 0f00 	cmp.w	fp, #0
 801ff90:	f340 809a 	ble.w	80200c8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ff94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ff96:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ff9a:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ff9e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ffa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ffa4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ffa8:	2b00      	cmp	r3, #0
 801ffaa:	dd0c      	ble.n	801ffc6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ffac:	1406      	asrs	r6, r0, #16
 801ffae:	d405      	bmi.n	801ffbc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ffb0:	454e      	cmp	r6, r9
 801ffb2:	da03      	bge.n	801ffbc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ffb4:	1416      	asrs	r6, r2, #16
 801ffb6:	d401      	bmi.n	801ffbc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ffb8:	4546      	cmp	r6, r8
 801ffba:	db05      	blt.n	801ffc8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ffbc:	4470      	add	r0, lr
 801ffbe:	4462      	add	r2, ip
 801ffc0:	3b01      	subs	r3, #1
 801ffc2:	3402      	adds	r4, #2
 801ffc4:	e7f0      	b.n	801ffa8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ffc6:	d00f      	beq.n	801ffe8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ffc8:	1e5e      	subs	r6, r3, #1
 801ffca:	fb0e 0706 	mla	r7, lr, r6, r0
 801ffce:	143f      	asrs	r7, r7, #16
 801ffd0:	d541      	bpl.n	8020056 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801ffd2:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801ffd6:	4698      	mov	r8, r3
 801ffd8:	9603      	str	r6, [sp, #12]
 801ffda:	f1b8 0f00 	cmp.w	r8, #0
 801ffde:	dc56      	bgt.n	802008e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801ffe0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ffe4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ffe8:	9b01      	ldr	r3, [sp, #4]
 801ffea:	2b00      	cmp	r3, #0
 801ffec:	dd6c      	ble.n	80200c8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ffee:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fff2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fff6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fffc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020000:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020004:	eeb0 6a62 	vmov.f32	s12, s5
 8020008:	ee61 7a27 	vmul.f32	s15, s2, s15
 802000c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020010:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020014:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020018:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802001c:	eeb0 6a43 	vmov.f32	s12, s6
 8020020:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020024:	ee12 2a90 	vmov	r2, s5
 8020028:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802002c:	fb92 fef3 	sdiv	lr, r2, r3
 8020030:	ee13 2a10 	vmov	r2, s6
 8020034:	fb92 fcf3 	sdiv	ip, r2, r3
 8020038:	9b01      	ldr	r3, [sp, #4]
 802003a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802003e:	3b01      	subs	r3, #1
 8020040:	9301      	str	r3, [sp, #4]
 8020042:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020048:	eeb0 3a67 	vmov.f32	s6, s15
 802004c:	bf08      	it	eq
 802004e:	465b      	moveq	r3, fp
 8020050:	eef0 2a47 	vmov.f32	s5, s14
 8020054:	e797      	b.n	801ff86 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020056:	454f      	cmp	r7, r9
 8020058:	dabb      	bge.n	801ffd2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802005a:	fb0c 2606 	mla	r6, ip, r6, r2
 802005e:	1436      	asrs	r6, r6, #16
 8020060:	d4b7      	bmi.n	801ffd2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020062:	4546      	cmp	r6, r8
 8020064:	dab5      	bge.n	801ffd2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020066:	461e      	mov	r6, r3
 8020068:	46a0      	mov	r8, r4
 802006a:	2e00      	cmp	r6, #0
 802006c:	ddb8      	ble.n	801ffe0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802006e:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8020072:	9902      	ldr	r1, [sp, #8]
 8020074:	1417      	asrs	r7, r2, #16
 8020076:	ea4f 4920 	mov.w	r9, r0, asr #16
 802007a:	fb0a 9707 	mla	r7, sl, r7, r9
 802007e:	4470      	add	r0, lr
 8020080:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8020084:	f828 7b02 	strh.w	r7, [r8], #2
 8020088:	4462      	add	r2, ip
 802008a:	3e01      	subs	r6, #1
 802008c:	e7ed      	b.n	802006a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 802008e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020092:	d414      	bmi.n	80200be <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020094:	68ae      	ldr	r6, [r5, #8]
 8020096:	454e      	cmp	r6, r9
 8020098:	dd11      	ble.n	80200be <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 802009a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 802009e:	d40e      	bmi.n	80200be <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80200a0:	68ef      	ldr	r7, [r5, #12]
 80200a2:	4557      	cmp	r7, sl
 80200a4:	dd0b      	ble.n	80200be <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80200a6:	b236      	sxth	r6, r6
 80200a8:	fb0a 9606 	mla	r6, sl, r6, r9
 80200ac:	9f02      	ldr	r7, [sp, #8]
 80200ae:	f06f 0101 	mvn.w	r1, #1
 80200b2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80200b6:	fb01 f608 	mul.w	r6, r1, r8
 80200ba:	9903      	ldr	r1, [sp, #12]
 80200bc:	538f      	strh	r7, [r1, r6]
 80200be:	4470      	add	r0, lr
 80200c0:	4462      	add	r2, ip
 80200c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80200c6:	e788      	b.n	801ffda <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80200c8:	b005      	add	sp, #20
 80200ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080200ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80200ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200d2:	b085      	sub	sp, #20
 80200d4:	468b      	mov	fp, r1
 80200d6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80200d8:	9202      	str	r2, [sp, #8]
 80200da:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80200de:	9203      	str	r2, [sp, #12]
 80200e0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80200e4:	6841      	ldr	r1, [r0, #4]
 80200e6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80200ea:	fb01 2404 	mla	r4, r1, r4, r2
 80200ee:	6802      	ldr	r2, [r0, #0]
 80200f0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80200f4:	f8d8 2000 	ldr.w	r2, [r8]
 80200f8:	9200      	str	r2, [sp, #0]
 80200fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80200fe:	f1bb 0f00 	cmp.w	fp, #0
 8020102:	dc03      	bgt.n	802010c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020104:	9a02      	ldr	r2, [sp, #8]
 8020106:	2a00      	cmp	r2, #0
 8020108:	f340 8134 	ble.w	8020374 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802010c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802010e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8020112:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8020116:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802011a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802011c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020120:	2b00      	cmp	r3, #0
 8020122:	dd0e      	ble.n	8020142 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020124:	1402      	asrs	r2, r0, #16
 8020126:	d405      	bmi.n	8020134 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020128:	42ba      	cmp	r2, r7
 802012a:	da03      	bge.n	8020134 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802012c:	140a      	asrs	r2, r1, #16
 802012e:	d401      	bmi.n	8020134 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020130:	42b2      	cmp	r2, r6
 8020132:	db07      	blt.n	8020144 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020134:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020136:	4410      	add	r0, r2
 8020138:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802013a:	3b01      	subs	r3, #1
 802013c:	4411      	add	r1, r2
 802013e:	3402      	adds	r4, #2
 8020140:	e7ee      	b.n	8020120 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020142:	d019      	beq.n	8020178 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8020144:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020146:	1e5a      	subs	r2, r3, #1
 8020148:	fb05 0502 	mla	r5, r5, r2, r0
 802014c:	142d      	asrs	r5, r5, #16
 802014e:	d409      	bmi.n	8020164 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020150:	42bd      	cmp	r5, r7
 8020152:	da07      	bge.n	8020164 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020154:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020156:	fb05 1202 	mla	r2, r5, r2, r1
 802015a:	1412      	asrs	r2, r2, #16
 802015c:	d402      	bmi.n	8020164 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802015e:	42b2      	cmp	r2, r6
 8020160:	f2c0 80aa 	blt.w	80202b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020164:	f04f 0c00 	mov.w	ip, #0
 8020168:	eb03 020c 	add.w	r2, r3, ip
 802016c:	2a00      	cmp	r2, #0
 802016e:	dc3e      	bgt.n	80201ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8020170:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020174:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020178:	f1bb 0f00 	cmp.w	fp, #0
 802017c:	f340 80fa 	ble.w	8020374 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8020180:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020184:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020188:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802018c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802018e:	f1bb 0b01 	subs.w	fp, fp, #1
 8020192:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020196:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802019a:	eeb0 6a62 	vmov.f32	s12, s5
 802019e:	ee61 7a27 	vmul.f32	s15, s2, s15
 80201a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80201a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80201aa:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80201ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80201b2:	eeb0 6a43 	vmov.f32	s12, s6
 80201b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80201ba:	ee12 2a90 	vmov	r2, s5
 80201be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80201c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80201c6:	ee13 2a10 	vmov	r2, s6
 80201ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80201ce:	9311      	str	r3, [sp, #68]	; 0x44
 80201d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80201d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80201d6:	9a02      	ldr	r2, [sp, #8]
 80201d8:	9312      	str	r3, [sp, #72]	; 0x48
 80201da:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80201de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80201e0:	eeb0 3a67 	vmov.f32	s6, s15
 80201e4:	bf08      	it	eq
 80201e6:	4613      	moveq	r3, r2
 80201e8:	eef0 2a47 	vmov.f32	s5, s14
 80201ec:	e787      	b.n	80200fe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80201ee:	1406      	asrs	r6, r0, #16
 80201f0:	d45b      	bmi.n	80202aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80201f2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80201f6:	42b5      	cmp	r5, r6
 80201f8:	dd57      	ble.n	80202aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80201fa:	140f      	asrs	r7, r1, #16
 80201fc:	d455      	bmi.n	80202aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80201fe:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8020202:	42ba      	cmp	r2, r7
 8020204:	dd51      	ble.n	80202aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8020206:	b22d      	sxth	r5, r5
 8020208:	fb07 6505 	mla	r5, r7, r5, r6
 802020c:	9a00      	ldr	r2, [sp, #0]
 802020e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8020212:	0e2e      	lsrs	r6, r5, #24
 8020214:	d049      	beq.n	80202aa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8020216:	f06f 0201 	mvn.w	r2, #1
 802021a:	fb02 f20c 	mul.w	r2, r2, ip
 802021e:	9201      	str	r2, [sp, #4]
 8020220:	f834 e002 	ldrh.w	lr, [r4, r2]
 8020224:	9a03      	ldr	r2, [sp, #12]
 8020226:	4356      	muls	r6, r2
 8020228:	1c72      	adds	r2, r6, #1
 802022a:	eb02 2226 	add.w	r2, r2, r6, asr #8
 802022e:	1212      	asrs	r2, r2, #8
 8020230:	fa1f f982 	uxth.w	r9, r2
 8020234:	ea4f 272e 	mov.w	r7, lr, asr #8
 8020238:	f3c5 4607 	ubfx	r6, r5, #16, #8
 802023c:	43d2      	mvns	r2, r2
 802023e:	b2d2      	uxtb	r2, r2
 8020240:	fb16 f609 	smulbb	r6, r6, r9
 8020244:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020248:	fb07 6702 	mla	r7, r7, r2, r6
 802024c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020250:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8020254:	b2ed      	uxtb	r5, r5
 8020256:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802025a:	fa5f fe8e 	uxtb.w	lr, lr
 802025e:	fb15 f509 	smulbb	r5, r5, r9
 8020262:	fb0e 5502 	mla	r5, lr, r2, r5
 8020266:	b2bf      	uxth	r7, r7
 8020268:	fb1a fa09 	smulbb	sl, sl, r9
 802026c:	b2ad      	uxth	r5, r5
 802026e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020272:	fb06 a602 	mla	r6, r6, r2, sl
 8020276:	1c7a      	adds	r2, r7, #1
 8020278:	f105 0a01 	add.w	sl, r5, #1
 802027c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020280:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020284:	b2b6      	uxth	r6, r6
 8020286:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802028a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802028e:	ea4a 0707 	orr.w	r7, sl, r7
 8020292:	f106 0a01 	add.w	sl, r6, #1
 8020296:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802029a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802029e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80202a2:	9a01      	ldr	r2, [sp, #4]
 80202a4:	ea47 070a 	orr.w	r7, r7, sl
 80202a8:	52a7      	strh	r7, [r4, r2]
 80202aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80202ac:	4410      	add	r0, r2
 80202ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80202b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80202b4:	4411      	add	r1, r2
 80202b6:	e757      	b.n	8020168 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80202b8:	f04f 0e00 	mov.w	lr, #0
 80202bc:	eba3 020e 	sub.w	r2, r3, lr
 80202c0:	2a00      	cmp	r2, #0
 80202c2:	f77f af55 	ble.w	8020170 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80202c6:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80202ca:	1405      	asrs	r5, r0, #16
 80202cc:	140a      	asrs	r2, r1, #16
 80202ce:	fb06 5202 	mla	r2, r6, r2, r5
 80202d2:	9d00      	ldr	r5, [sp, #0]
 80202d4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80202d8:	0e2e      	lsrs	r6, r5, #24
 80202da:	d044      	beq.n	8020366 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 80202dc:	9a03      	ldr	r2, [sp, #12]
 80202de:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80202e2:	4356      	muls	r6, r2
 80202e4:	1c72      	adds	r2, r6, #1
 80202e6:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80202ea:	1212      	asrs	r2, r2, #8
 80202ec:	fa1f f982 	uxth.w	r9, r2
 80202f0:	ea4f 272c 	mov.w	r7, ip, asr #8
 80202f4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80202f8:	43d2      	mvns	r2, r2
 80202fa:	b2d2      	uxtb	r2, r2
 80202fc:	fb16 f609 	smulbb	r6, r6, r9
 8020300:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020304:	fb07 6702 	mla	r7, r7, r2, r6
 8020308:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 802030c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020310:	b2ed      	uxtb	r5, r5
 8020312:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020316:	fa5f fc8c 	uxtb.w	ip, ip
 802031a:	fb15 f509 	smulbb	r5, r5, r9
 802031e:	fb0c 5502 	mla	r5, ip, r2, r5
 8020322:	b2bf      	uxth	r7, r7
 8020324:	fb1a fa09 	smulbb	sl, sl, r9
 8020328:	b2ad      	uxth	r5, r5
 802032a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802032e:	fb06 a602 	mla	r6, r6, r2, sl
 8020332:	1c7a      	adds	r2, r7, #1
 8020334:	f105 0a01 	add.w	sl, r5, #1
 8020338:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802033c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020340:	b2b6      	uxth	r6, r6
 8020342:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020346:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802034a:	ea4a 0707 	orr.w	r7, sl, r7
 802034e:	f106 0a01 	add.w	sl, r6, #1
 8020352:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020356:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802035a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802035e:	ea47 070a 	orr.w	r7, r7, sl
 8020362:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8020366:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020368:	4410      	add	r0, r2
 802036a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802036c:	f10e 0e01 	add.w	lr, lr, #1
 8020370:	4411      	add	r1, r2
 8020372:	e7a3      	b.n	80202bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020374:	b005      	add	sp, #20
 8020376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802037c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802037c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020380:	b085      	sub	sp, #20
 8020382:	468b      	mov	fp, r1
 8020384:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020386:	9203      	str	r2, [sp, #12]
 8020388:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 802038c:	6861      	ldr	r1, [r4, #4]
 802038e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 8020392:	fb01 2000 	mla	r0, r1, r0, r2
 8020396:	6822      	ldr	r2, [r4, #0]
 8020398:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 802039c:	f8d9 2000 	ldr.w	r2, [r9]
 80203a0:	9200      	str	r2, [sp, #0]
 80203a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80203a6:	f1bb 0f00 	cmp.w	fp, #0
 80203aa:	dc03      	bgt.n	80203b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80203ac:	9a03      	ldr	r2, [sp, #12]
 80203ae:	2a00      	cmp	r2, #0
 80203b0:	f340 814a 	ble.w	8020648 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 80203b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80203b6:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 80203ba:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 80203be:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80203c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80203c4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80203c8:	2b00      	cmp	r3, #0
 80203ca:	dd0e      	ble.n	80203ea <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80203cc:	140c      	asrs	r4, r1, #16
 80203ce:	d405      	bmi.n	80203dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80203d0:	42bc      	cmp	r4, r7
 80203d2:	da03      	bge.n	80203dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80203d4:	1414      	asrs	r4, r2, #16
 80203d6:	d401      	bmi.n	80203dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80203d8:	42b4      	cmp	r4, r6
 80203da:	db07      	blt.n	80203ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80203dc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80203de:	4421      	add	r1, r4
 80203e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80203e2:	3b01      	subs	r3, #1
 80203e4:	4422      	add	r2, r4
 80203e6:	3002      	adds	r0, #2
 80203e8:	e7ee      	b.n	80203c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80203ea:	d017      	beq.n	802041c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80203ec:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80203ee:	1e5c      	subs	r4, r3, #1
 80203f0:	fb05 1504 	mla	r5, r5, r4, r1
 80203f4:	142d      	asrs	r5, r5, #16
 80203f6:	d409      	bmi.n	802040c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80203f8:	42bd      	cmp	r5, r7
 80203fa:	da07      	bge.n	802040c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80203fc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80203fe:	fb05 2404 	mla	r4, r5, r4, r2
 8020402:	1424      	asrs	r4, r4, #16
 8020404:	d402      	bmi.n	802040c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020406:	42b4      	cmp	r4, r6
 8020408:	f2c0 80ba 	blt.w	8020580 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802040c:	2700      	movs	r7, #0
 802040e:	19dc      	adds	r4, r3, r7
 8020410:	2c00      	cmp	r4, #0
 8020412:	dc3e      	bgt.n	8020492 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8020414:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020418:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802041c:	f1bb 0f00 	cmp.w	fp, #0
 8020420:	f340 8112 	ble.w	8020648 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8020424:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020428:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802042c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020432:	f1bb 0b01 	subs.w	fp, fp, #1
 8020436:	ee31 1a05 	vadd.f32	s2, s2, s10
 802043a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802043e:	eeb0 6a62 	vmov.f32	s12, s5
 8020442:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020446:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802044a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802044e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020452:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020456:	eeb0 6a43 	vmov.f32	s12, s6
 802045a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802045e:	ee12 2a90 	vmov	r2, s5
 8020462:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020466:	fb92 f3f3 	sdiv	r3, r2, r3
 802046a:	ee13 2a10 	vmov	r2, s6
 802046e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020472:	9311      	str	r3, [sp, #68]	; 0x44
 8020474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020476:	fb92 f3f3 	sdiv	r3, r2, r3
 802047a:	9a03      	ldr	r2, [sp, #12]
 802047c:	9312      	str	r3, [sp, #72]	; 0x48
 802047e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020484:	eeb0 3a67 	vmov.f32	s6, s15
 8020488:	bf08      	it	eq
 802048a:	4613      	moveq	r3, r2
 802048c:	eef0 2a47 	vmov.f32	s5, s14
 8020490:	e789      	b.n	80203a6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020492:	140e      	asrs	r6, r1, #16
 8020494:	d45f      	bmi.n	8020556 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8020496:	f8d9 5008 	ldr.w	r5, [r9, #8]
 802049a:	42b5      	cmp	r5, r6
 802049c:	dd5b      	ble.n	8020556 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802049e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80204a2:	d458      	bmi.n	8020556 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80204a4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80204a8:	4564      	cmp	r4, ip
 80204aa:	dd54      	ble.n	8020556 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80204ac:	b22d      	sxth	r5, r5
 80204ae:	fb0c 6505 	mla	r5, ip, r5, r6
 80204b2:	9c00      	ldr	r4, [sp, #0]
 80204b4:	f854 c025 	ldr.w	ip, [r4, r5, lsl #2]
 80204b8:	ea5f 6e1c 	movs.w	lr, ip, lsr #24
 80204bc:	d04b      	beq.n	8020556 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80204be:	fa5f f48e 	uxtb.w	r4, lr
 80204c2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80204c6:	9401      	str	r4, [sp, #4]
 80204c8:	ea4f 461c 	mov.w	r6, ip, lsr #16
 80204cc:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80204d0:	f06f 0401 	mvn.w	r4, #1
 80204d4:	fa5f fc8c 	uxtb.w	ip, ip
 80204d8:	d043      	beq.n	8020562 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80204da:	437c      	muls	r4, r7
 80204dc:	9402      	str	r4, [sp, #8]
 80204de:	f830 8004 	ldrh.w	r8, [r0, r4]
 80204e2:	9c01      	ldr	r4, [sp, #4]
 80204e4:	f8bd a004 	ldrh.w	sl, [sp, #4]
 80204e8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80204ec:	43e4      	mvns	r4, r4
 80204ee:	b2f6      	uxtb	r6, r6
 80204f0:	b2e4      	uxtb	r4, r4
 80204f2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80204f6:	fb16 f60a 	smulbb	r6, r6, sl
 80204fa:	fb0e 6604 	mla	r6, lr, r4, r6
 80204fe:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 8020502:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020506:	fa5f f888 	uxtb.w	r8, r8
 802050a:	fb1c fc0a 	smulbb	ip, ip, sl
 802050e:	fb08 cc04 	mla	ip, r8, r4, ip
 8020512:	b2ed      	uxtb	r5, r5
 8020514:	b2b6      	uxth	r6, r6
 8020516:	fb15 f50a 	smulbb	r5, r5, sl
 802051a:	fa1f fc8c 	uxth.w	ip, ip
 802051e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8020522:	fb0e 5e04 	mla	lr, lr, r4, r5
 8020526:	1c74      	adds	r4, r6, #1
 8020528:	f10c 0501 	add.w	r5, ip, #1
 802052c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8020530:	eb05 251c 	add.w	r5, r5, ip, lsr #8
 8020534:	fa1f fe8e 	uxth.w	lr, lr
 8020538:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802053c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020540:	432e      	orrs	r6, r5
 8020542:	f10e 0501 	add.w	r5, lr, #1
 8020546:	eb05 251e 	add.w	r5, r5, lr, lsr #8
 802054a:	096d      	lsrs	r5, r5, #5
 802054c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020550:	9c02      	ldr	r4, [sp, #8]
 8020552:	432e      	orrs	r6, r5
 8020554:	5306      	strh	r6, [r0, r4]
 8020556:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020558:	4421      	add	r1, r4
 802055a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802055c:	3f01      	subs	r7, #1
 802055e:	4422      	add	r2, r4
 8020560:	e755      	b.n	802040e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020562:	fb04 fe07 	mul.w	lr, r4, r7
 8020566:	f2a4 74fe 	subw	r4, r4, #2046	; 0x7fe
 802056a:	ea04 2606 	and.w	r6, r4, r6, lsl #8
 802056e:	00ed      	lsls	r5, r5, #3
 8020570:	ea46 06dc 	orr.w	r6, r6, ip, lsr #3
 8020574:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020578:	432e      	orrs	r6, r5
 802057a:	f820 600e 	strh.w	r6, [r0, lr]
 802057e:	e7ea      	b.n	8020556 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8020580:	f04f 0800 	mov.w	r8, #0
 8020584:	eba3 0408 	sub.w	r4, r3, r8
 8020588:	2c00      	cmp	r4, #0
 802058a:	f77f af43 	ble.w	8020414 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802058e:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8020592:	140d      	asrs	r5, r1, #16
 8020594:	1414      	asrs	r4, r2, #16
 8020596:	fb06 5404 	mla	r4, r6, r4, r5
 802059a:	9d00      	ldr	r5, [sp, #0]
 802059c:	f855 7024 	ldr.w	r7, [r5, r4, lsl #2]
 80205a0:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 80205a4:	d042      	beq.n	802062c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80205a6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80205aa:	ea4f 4517 	mov.w	r5, r7, lsr #16
 80205ae:	ea4f 2617 	mov.w	r6, r7, lsr #8
 80205b2:	fa5f f48c 	uxtb.w	r4, ip
 80205b6:	b2ff      	uxtb	r7, r7
 80205b8:	d03f      	beq.n	802063a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 80205ba:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 80205be:	fa1f fa84 	uxth.w	sl, r4
 80205c2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80205c6:	43e4      	mvns	r4, r4
 80205c8:	b2ed      	uxtb	r5, r5
 80205ca:	b2e4      	uxtb	r4, r4
 80205cc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80205d0:	fb15 f50a 	smulbb	r5, r5, sl
 80205d4:	fb0c 5504 	mla	r5, ip, r4, r5
 80205d8:	ea4f 0cee 	mov.w	ip, lr, asr #3
 80205dc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80205e0:	fa5f fe8e 	uxtb.w	lr, lr
 80205e4:	fb17 f70a 	smulbb	r7, r7, sl
 80205e8:	fb0e 7704 	mla	r7, lr, r4, r7
 80205ec:	b2f6      	uxtb	r6, r6
 80205ee:	b2ad      	uxth	r5, r5
 80205f0:	fb16 f60a 	smulbb	r6, r6, sl
 80205f4:	b2bf      	uxth	r7, r7
 80205f6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80205fa:	fb0c 6c04 	mla	ip, ip, r4, r6
 80205fe:	1c6c      	adds	r4, r5, #1
 8020600:	1c7e      	adds	r6, r7, #1
 8020602:	eb04 2515 	add.w	r5, r4, r5, lsr #8
 8020606:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 802060a:	fa1f fc8c 	uxth.w	ip, ip
 802060e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020612:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020616:	4335      	orrs	r5, r6
 8020618:	f10c 0601 	add.w	r6, ip, #1
 802061c:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8020620:	0976      	lsrs	r6, r6, #5
 8020622:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020626:	4335      	orrs	r5, r6
 8020628:	f820 5018 	strh.w	r5, [r0, r8, lsl #1]
 802062c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802062e:	4421      	add	r1, r4
 8020630:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020632:	f108 0801 	add.w	r8, r8, #1
 8020636:	4422      	add	r2, r4
 8020638:	e7a4      	b.n	8020584 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802063a:	4c05      	ldr	r4, [pc, #20]	; (8020650 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>)
 802063c:	ea04 2505 	and.w	r5, r4, r5, lsl #8
 8020640:	ea45 05d7 	orr.w	r5, r5, r7, lsr #3
 8020644:	00f6      	lsls	r6, r6, #3
 8020646:	e7ec      	b.n	8020622 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8020648:	b005      	add	sp, #20
 802064a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802064e:	bf00      	nop
 8020650:	fffff800 	.word	0xfffff800

08020654 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020658:	b087      	sub	sp, #28
 802065a:	468b      	mov	fp, r1
 802065c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802065e:	9204      	str	r2, [sp, #16]
 8020660:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020664:	9205      	str	r2, [sp, #20]
 8020666:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 802066a:	6841      	ldr	r1, [r0, #4]
 802066c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8020670:	fb01 2404 	mla	r4, r1, r4, r2
 8020674:	6802      	ldr	r2, [r0, #0]
 8020676:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802067a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 802067e:	3201      	adds	r2, #1
 8020680:	f022 0201 	bic.w	r2, r2, #1
 8020684:	9201      	str	r2, [sp, #4]
 8020686:	f8d8 2000 	ldr.w	r2, [r8]
 802068a:	9202      	str	r2, [sp, #8]
 802068c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020690:	f1bb 0f00 	cmp.w	fp, #0
 8020694:	dc03      	bgt.n	802069e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020696:	9a04      	ldr	r2, [sp, #16]
 8020698:	2a00      	cmp	r2, #0
 802069a:	f340 8146 	ble.w	802092a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 802069e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80206a0:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 80206a4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 80206a8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80206ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80206ae:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80206b2:	2b00      	cmp	r3, #0
 80206b4:	dd0e      	ble.n	80206d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80206b6:	1402      	asrs	r2, r0, #16
 80206b8:	d405      	bmi.n	80206c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80206ba:	42ba      	cmp	r2, r7
 80206bc:	da03      	bge.n	80206c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80206be:	140a      	asrs	r2, r1, #16
 80206c0:	d401      	bmi.n	80206c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80206c2:	42b2      	cmp	r2, r6
 80206c4:	db07      	blt.n	80206d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80206c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80206c8:	4410      	add	r0, r2
 80206ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80206cc:	3b01      	subs	r3, #1
 80206ce:	4411      	add	r1, r2
 80206d0:	3402      	adds	r4, #2
 80206d2:	e7ee      	b.n	80206b2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80206d4:	d017      	beq.n	8020706 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80206d6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80206d8:	1e5a      	subs	r2, r3, #1
 80206da:	fb05 0502 	mla	r5, r5, r2, r0
 80206de:	142d      	asrs	r5, r5, #16
 80206e0:	d409      	bmi.n	80206f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80206e2:	42bd      	cmp	r5, r7
 80206e4:	da07      	bge.n	80206f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80206e6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80206e8:	fb05 1202 	mla	r2, r5, r2, r1
 80206ec:	1412      	asrs	r2, r2, #16
 80206ee:	d402      	bmi.n	80206f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80206f0:	42b2      	cmp	r2, r6
 80206f2:	f2c0 80b3 	blt.w	802085c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80206f6:	2700      	movs	r7, #0
 80206f8:	19da      	adds	r2, r3, r7
 80206fa:	2a00      	cmp	r2, #0
 80206fc:	dc3e      	bgt.n	802077c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80206fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020702:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020706:	f1bb 0f00 	cmp.w	fp, #0
 802070a:	f340 810e 	ble.w	802092a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 802070e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020712:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020716:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802071a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802071c:	f1bb 0b01 	subs.w	fp, fp, #1
 8020720:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020724:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020728:	eeb0 6a62 	vmov.f32	s12, s5
 802072c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020730:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020734:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020738:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802073c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020740:	eeb0 6a43 	vmov.f32	s12, s6
 8020744:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020748:	ee12 2a90 	vmov	r2, s5
 802074c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020750:	fb92 f3f3 	sdiv	r3, r2, r3
 8020754:	ee13 2a10 	vmov	r2, s6
 8020758:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802075c:	9313      	str	r3, [sp, #76]	; 0x4c
 802075e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020760:	fb92 f3f3 	sdiv	r3, r2, r3
 8020764:	9a04      	ldr	r2, [sp, #16]
 8020766:	9314      	str	r3, [sp, #80]	; 0x50
 8020768:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 802076c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802076e:	eeb0 3a67 	vmov.f32	s6, s15
 8020772:	bf08      	it	eq
 8020774:	4613      	moveq	r3, r2
 8020776:	eef0 2a47 	vmov.f32	s5, s14
 802077a:	e789      	b.n	8020690 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802077c:	1405      	asrs	r5, r0, #16
 802077e:	d467      	bmi.n	8020850 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8020780:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8020784:	42aa      	cmp	r2, r5
 8020786:	dd63      	ble.n	8020850 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8020788:	140e      	asrs	r6, r1, #16
 802078a:	d461      	bmi.n	8020850 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802078c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8020790:	42b2      	cmp	r2, r6
 8020792:	dd5d      	ble.n	8020850 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8020794:	9a01      	ldr	r2, [sp, #4]
 8020796:	fb06 5502 	mla	r5, r6, r2, r5
 802079a:	086a      	lsrs	r2, r5, #1
 802079c:	9e02      	ldr	r6, [sp, #8]
 802079e:	5cb2      	ldrb	r2, [r6, r2]
 80207a0:	07ee      	lsls	r6, r5, #31
 80207a2:	bf54      	ite	pl
 80207a4:	f002 020f 	andpl.w	r2, r2, #15
 80207a8:	1112      	asrmi	r2, r2, #4
 80207aa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80207ae:	b2d2      	uxtb	r2, r2
 80207b0:	2a00      	cmp	r2, #0
 80207b2:	d04d      	beq.n	8020850 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80207b4:	4d5e      	ldr	r5, [pc, #376]	; (8020930 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 80207b6:	f8d5 c000 	ldr.w	ip, [r5]
 80207ba:	f06f 0501 	mvn.w	r5, #1
 80207be:	437d      	muls	r5, r7
 80207c0:	9503      	str	r5, [sp, #12]
 80207c2:	f834 e005 	ldrh.w	lr, [r4, r5]
 80207c6:	9d05      	ldr	r5, [sp, #20]
 80207c8:	436a      	muls	r2, r5
 80207ca:	1c55      	adds	r5, r2, #1
 80207cc:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80207d0:	1212      	asrs	r2, r2, #8
 80207d2:	fa1f f982 	uxth.w	r9, r2
 80207d6:	ea4f 262e 	mov.w	r6, lr, asr #8
 80207da:	f3cc 4507 	ubfx	r5, ip, #16, #8
 80207de:	43d2      	mvns	r2, r2
 80207e0:	b2d2      	uxtb	r2, r2
 80207e2:	fb15 f509 	smulbb	r5, r5, r9
 80207e6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80207ea:	fb06 5602 	mla	r6, r6, r2, r5
 80207ee:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 80207f2:	ea4f 05ee 	mov.w	r5, lr, asr #3
 80207f6:	fa5f fc8c 	uxtb.w	ip, ip
 80207fa:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80207fe:	fa5f fe8e 	uxtb.w	lr, lr
 8020802:	fb1c fc09 	smulbb	ip, ip, r9
 8020806:	fb0e cc02 	mla	ip, lr, r2, ip
 802080a:	b2b6      	uxth	r6, r6
 802080c:	fb1a fa09 	smulbb	sl, sl, r9
 8020810:	fa1f fc8c 	uxth.w	ip, ip
 8020814:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020818:	fb05 a502 	mla	r5, r5, r2, sl
 802081c:	1c72      	adds	r2, r6, #1
 802081e:	f10c 0a01 	add.w	sl, ip, #1
 8020822:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8020826:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 802082a:	b2ad      	uxth	r5, r5
 802082c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020830:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020834:	ea4a 0606 	orr.w	r6, sl, r6
 8020838:	f105 0a01 	add.w	sl, r5, #1
 802083c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020840:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020844:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020848:	9a03      	ldr	r2, [sp, #12]
 802084a:	ea46 060a 	orr.w	r6, r6, sl
 802084e:	52a6      	strh	r6, [r4, r2]
 8020850:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020852:	4410      	add	r0, r2
 8020854:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020856:	3f01      	subs	r7, #1
 8020858:	4411      	add	r1, r2
 802085a:	e74d      	b.n	80206f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802085c:	f04f 0e00 	mov.w	lr, #0
 8020860:	eba3 020e 	sub.w	r2, r3, lr
 8020864:	2a00      	cmp	r2, #0
 8020866:	f77f af4a 	ble.w	80206fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802086a:	9e01      	ldr	r6, [sp, #4]
 802086c:	1402      	asrs	r2, r0, #16
 802086e:	140d      	asrs	r5, r1, #16
 8020870:	fb06 2505 	mla	r5, r6, r5, r2
 8020874:	086a      	lsrs	r2, r5, #1
 8020876:	9e02      	ldr	r6, [sp, #8]
 8020878:	5cb2      	ldrb	r2, [r6, r2]
 802087a:	07ed      	lsls	r5, r5, #31
 802087c:	bf54      	ite	pl
 802087e:	f002 020f 	andpl.w	r2, r2, #15
 8020882:	1112      	asrmi	r2, r2, #4
 8020884:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020888:	b2d2      	uxtb	r2, r2
 802088a:	2a00      	cmp	r2, #0
 802088c:	d046      	beq.n	802091c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 802088e:	4d28      	ldr	r5, [pc, #160]	; (8020930 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8020890:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8020894:	682f      	ldr	r7, [r5, #0]
 8020896:	9d05      	ldr	r5, [sp, #20]
 8020898:	436a      	muls	r2, r5
 802089a:	1c55      	adds	r5, r2, #1
 802089c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80208a0:	1212      	asrs	r2, r2, #8
 80208a2:	fa1f f982 	uxth.w	r9, r2
 80208a6:	ea4f 262c 	mov.w	r6, ip, asr #8
 80208aa:	f3c7 4507 	ubfx	r5, r7, #16, #8
 80208ae:	43d2      	mvns	r2, r2
 80208b0:	b2d2      	uxtb	r2, r2
 80208b2:	fb15 f509 	smulbb	r5, r5, r9
 80208b6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80208ba:	fb06 5602 	mla	r6, r6, r2, r5
 80208be:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80208c2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80208c6:	b2ff      	uxtb	r7, r7
 80208c8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80208cc:	fa5f fc8c 	uxtb.w	ip, ip
 80208d0:	fb17 f709 	smulbb	r7, r7, r9
 80208d4:	fb0c 7702 	mla	r7, ip, r2, r7
 80208d8:	b2b6      	uxth	r6, r6
 80208da:	fb1a fa09 	smulbb	sl, sl, r9
 80208de:	b2bf      	uxth	r7, r7
 80208e0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80208e4:	fb05 a502 	mla	r5, r5, r2, sl
 80208e8:	1c72      	adds	r2, r6, #1
 80208ea:	f107 0a01 	add.w	sl, r7, #1
 80208ee:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80208f2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80208f6:	b2ad      	uxth	r5, r5
 80208f8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80208fc:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020900:	ea4a 0606 	orr.w	r6, sl, r6
 8020904:	f105 0a01 	add.w	sl, r5, #1
 8020908:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802090c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020910:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020914:	ea46 060a 	orr.w	r6, r6, sl
 8020918:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 802091c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802091e:	4410      	add	r0, r2
 8020920:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020922:	f10e 0e01 	add.w	lr, lr, #1
 8020926:	4411      	add	r1, r2
 8020928:	e79a      	b.n	8020860 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802092a:	b007      	add	sp, #28
 802092c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020930:	200067d8 	.word	0x200067d8

08020934 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020938:	b087      	sub	sp, #28
 802093a:	468b      	mov	fp, r1
 802093c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802093e:	9205      	str	r2, [sp, #20]
 8020940:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8020944:	6841      	ldr	r1, [r0, #4]
 8020946:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802094a:	fb01 2404 	mla	r4, r1, r4, r2
 802094e:	6802      	ldr	r2, [r0, #0]
 8020950:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020954:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8020958:	3201      	adds	r2, #1
 802095a:	f022 0201 	bic.w	r2, r2, #1
 802095e:	9201      	str	r2, [sp, #4]
 8020960:	f8d8 2000 	ldr.w	r2, [r8]
 8020964:	9202      	str	r2, [sp, #8]
 8020966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802096a:	f1bb 0f00 	cmp.w	fp, #0
 802096e:	dc03      	bgt.n	8020978 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8020970:	9a05      	ldr	r2, [sp, #20]
 8020972:	2a00      	cmp	r2, #0
 8020974:	f340 8159 	ble.w	8020c2a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f6>
 8020978:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802097a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 802097e:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8020982:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020986:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020988:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802098c:	2b00      	cmp	r3, #0
 802098e:	dd0e      	ble.n	80209ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020990:	1402      	asrs	r2, r0, #16
 8020992:	d405      	bmi.n	80209a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020994:	42ba      	cmp	r2, r7
 8020996:	da03      	bge.n	80209a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020998:	140a      	asrs	r2, r1, #16
 802099a:	d401      	bmi.n	80209a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802099c:	42b2      	cmp	r2, r6
 802099e:	db07      	blt.n	80209b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80209a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80209a2:	4410      	add	r0, r2
 80209a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80209a6:	3b01      	subs	r3, #1
 80209a8:	4411      	add	r1, r2
 80209aa:	3402      	adds	r4, #2
 80209ac:	e7ee      	b.n	802098c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80209ae:	d017      	beq.n	80209e0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80209b0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80209b2:	1e5a      	subs	r2, r3, #1
 80209b4:	fb05 0502 	mla	r5, r5, r2, r0
 80209b8:	142d      	asrs	r5, r5, #16
 80209ba:	d409      	bmi.n	80209d0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80209bc:	42bd      	cmp	r5, r7
 80209be:	da07      	bge.n	80209d0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80209c0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80209c2:	fb05 1202 	mla	r2, r5, r2, r1
 80209c6:	1412      	asrs	r2, r2, #16
 80209c8:	d402      	bmi.n	80209d0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80209ca:	42b2      	cmp	r2, r6
 80209cc:	f2c0 80c3 	blt.w	8020b56 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80209d0:	2700      	movs	r7, #0
 80209d2:	19da      	adds	r2, r3, r7
 80209d4:	2a00      	cmp	r2, #0
 80209d6:	dc3e      	bgt.n	8020a56 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80209d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80209dc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80209e0:	f1bb 0f00 	cmp.w	fp, #0
 80209e4:	f340 8121 	ble.w	8020c2a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f6>
 80209e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80209ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80209f0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80209f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80209f6:	f1bb 0b01 	subs.w	fp, fp, #1
 80209fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80209fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020a02:	eeb0 6a62 	vmov.f32	s12, s5
 8020a06:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020a0a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020a0e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020a12:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020a16:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020a1a:	eeb0 6a43 	vmov.f32	s12, s6
 8020a1e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020a22:	ee12 2a90 	vmov	r2, s5
 8020a26:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020a2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a2e:	ee13 2a10 	vmov	r2, s6
 8020a32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020a36:	9313      	str	r3, [sp, #76]	; 0x4c
 8020a38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020a3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a3e:	9a05      	ldr	r2, [sp, #20]
 8020a40:	9314      	str	r3, [sp, #80]	; 0x50
 8020a42:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020a46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020a48:	eeb0 3a67 	vmov.f32	s6, s15
 8020a4c:	bf08      	it	eq
 8020a4e:	4613      	moveq	r3, r2
 8020a50:	eef0 2a47 	vmov.f32	s5, s14
 8020a54:	e789      	b.n	802096a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8020a56:	1405      	asrs	r5, r0, #16
 8020a58:	d465      	bmi.n	8020b26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 8020a5a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8020a5e:	42aa      	cmp	r2, r5
 8020a60:	dd61      	ble.n	8020b26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 8020a62:	140e      	asrs	r6, r1, #16
 8020a64:	d45f      	bmi.n	8020b26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 8020a66:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8020a6a:	42b2      	cmp	r2, r6
 8020a6c:	dd5b      	ble.n	8020b26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 8020a6e:	9a01      	ldr	r2, [sp, #4]
 8020a70:	fb06 5502 	mla	r5, r6, r2, r5
 8020a74:	086a      	lsrs	r2, r5, #1
 8020a76:	9e02      	ldr	r6, [sp, #8]
 8020a78:	5cb2      	ldrb	r2, [r6, r2]
 8020a7a:	07ee      	lsls	r6, r5, #31
 8020a7c:	bf54      	ite	pl
 8020a7e:	f002 020f 	andpl.w	r2, r2, #15
 8020a82:	1112      	asrmi	r2, r2, #4
 8020a84:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020a88:	b2d2      	uxtb	r2, r2
 8020a8a:	2a00      	cmp	r2, #0
 8020a8c:	d04b      	beq.n	8020b26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 8020a8e:	4d68      	ldr	r5, [pc, #416]	; (8020c30 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 8020a90:	f8d5 9000 	ldr.w	r9, [r5]
 8020a94:	2aff      	cmp	r2, #255	; 0xff
 8020a96:	ea4f 2519 	mov.w	r5, r9, lsr #8
 8020a9a:	ea4f 4619 	mov.w	r6, r9, lsr #16
 8020a9e:	9503      	str	r5, [sp, #12]
 8020aa0:	fa5f f989 	uxtb.w	r9, r9
 8020aa4:	d045      	beq.n	8020b32 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8020aa6:	f06f 0501 	mvn.w	r5, #1
 8020aaa:	437d      	muls	r5, r7
 8020aac:	fa1f fa82 	uxth.w	sl, r2
 8020ab0:	f834 e005 	ldrh.w	lr, [r4, r5]
 8020ab4:	9504      	str	r5, [sp, #16]
 8020ab6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020aba:	43d2      	mvns	r2, r2
 8020abc:	b2f6      	uxtb	r6, r6
 8020abe:	b2d2      	uxtb	r2, r2
 8020ac0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020ac4:	fb16 f60a 	smulbb	r6, r6, sl
 8020ac8:	fb0c 6602 	mla	r6, ip, r2, r6
 8020acc:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8020ad0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020ad4:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8020ad8:	fa5f fe8e 	uxtb.w	lr, lr
 8020adc:	fb19 f90a 	smulbb	r9, r9, sl
 8020ae0:	fb0e 9902 	mla	r9, lr, r2, r9
 8020ae4:	b2b6      	uxth	r6, r6
 8020ae6:	fb15 f50a 	smulbb	r5, r5, sl
 8020aea:	fa1f f989 	uxth.w	r9, r9
 8020aee:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020af2:	fb0c 5c02 	mla	ip, ip, r2, r5
 8020af6:	1c72      	adds	r2, r6, #1
 8020af8:	f109 0501 	add.w	r5, r9, #1
 8020afc:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8020b00:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8020b04:	fa1f fc8c 	uxth.w	ip, ip
 8020b08:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020b0c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020b10:	432e      	orrs	r6, r5
 8020b12:	f10c 0501 	add.w	r5, ip, #1
 8020b16:	eb05 251c 	add.w	r5, r5, ip, lsr #8
 8020b1a:	096d      	lsrs	r5, r5, #5
 8020b1c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020b20:	9a04      	ldr	r2, [sp, #16]
 8020b22:	432e      	orrs	r6, r5
 8020b24:	52a6      	strh	r6, [r4, r2]
 8020b26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020b28:	4410      	add	r0, r2
 8020b2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020b2c:	3f01      	subs	r7, #1
 8020b2e:	4411      	add	r1, r2
 8020b30:	e74f      	b.n	80209d2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020b32:	f06f 0201 	mvn.w	r2, #1
 8020b36:	fb02 fc07 	mul.w	ip, r2, r7
 8020b3a:	f2a2 72fe 	subw	r2, r2, #2046	; 0x7fe
 8020b3e:	ea02 2606 	and.w	r6, r2, r6, lsl #8
 8020b42:	9a03      	ldr	r2, [sp, #12]
 8020b44:	00d5      	lsls	r5, r2, #3
 8020b46:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8020b4a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020b4e:	432e      	orrs	r6, r5
 8020b50:	f824 600c 	strh.w	r6, [r4, ip]
 8020b54:	e7e7      	b.n	8020b26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 8020b56:	f04f 0e00 	mov.w	lr, #0
 8020b5a:	eba3 020e 	sub.w	r2, r3, lr
 8020b5e:	2a00      	cmp	r2, #0
 8020b60:	f77f af3a 	ble.w	80209d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8020b64:	9e01      	ldr	r6, [sp, #4]
 8020b66:	1402      	asrs	r2, r0, #16
 8020b68:	140d      	asrs	r5, r1, #16
 8020b6a:	fb06 2505 	mla	r5, r6, r5, r2
 8020b6e:	086a      	lsrs	r2, r5, #1
 8020b70:	9e02      	ldr	r6, [sp, #8]
 8020b72:	5cb2      	ldrb	r2, [r6, r2]
 8020b74:	07ed      	lsls	r5, r5, #31
 8020b76:	bf54      	ite	pl
 8020b78:	f002 020f 	andpl.w	r2, r2, #15
 8020b7c:	1112      	asrmi	r2, r2, #4
 8020b7e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020b82:	b2d2      	uxtb	r2, r2
 8020b84:	2a00      	cmp	r2, #0
 8020b86:	d042      	beq.n	8020c0e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020b88:	4d29      	ldr	r5, [pc, #164]	; (8020c30 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 8020b8a:	682f      	ldr	r7, [r5, #0]
 8020b8c:	2aff      	cmp	r2, #255	; 0xff
 8020b8e:	ea4f 4517 	mov.w	r5, r7, lsr #16
 8020b92:	ea4f 2617 	mov.w	r6, r7, lsr #8
 8020b96:	fa5f f987 	uxtb.w	r9, r7
 8020b9a:	d03f      	beq.n	8020c1c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8020b9c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8020ba0:	fa1f fa82 	uxth.w	sl, r2
 8020ba4:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020ba8:	43d2      	mvns	r2, r2
 8020baa:	b2ed      	uxtb	r5, r5
 8020bac:	b2d2      	uxtb	r2, r2
 8020bae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020bb2:	fb15 f50a 	smulbb	r5, r5, sl
 8020bb6:	fb07 5502 	mla	r5, r7, r2, r5
 8020bba:	ea4f 07ec 	mov.w	r7, ip, asr #3
 8020bbe:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020bc2:	fa5f fc8c 	uxtb.w	ip, ip
 8020bc6:	fb19 f90a 	smulbb	r9, r9, sl
 8020bca:	fb0c 9902 	mla	r9, ip, r2, r9
 8020bce:	b2f6      	uxtb	r6, r6
 8020bd0:	b2ad      	uxth	r5, r5
 8020bd2:	fb16 f60a 	smulbb	r6, r6, sl
 8020bd6:	fa1f f989 	uxth.w	r9, r9
 8020bda:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020bde:	fb07 6702 	mla	r7, r7, r2, r6
 8020be2:	1c6a      	adds	r2, r5, #1
 8020be4:	f109 0601 	add.w	r6, r9, #1
 8020be8:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8020bec:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8020bf0:	b2bf      	uxth	r7, r7
 8020bf2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020bf6:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020bfa:	4335      	orrs	r5, r6
 8020bfc:	1c7e      	adds	r6, r7, #1
 8020bfe:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8020c02:	0976      	lsrs	r6, r6, #5
 8020c04:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020c08:	4335      	orrs	r5, r6
 8020c0a:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 8020c0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020c10:	4410      	add	r0, r2
 8020c12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020c14:	f10e 0e01 	add.w	lr, lr, #1
 8020c18:	4411      	add	r1, r2
 8020c1a:	e79e      	b.n	8020b5a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8020c1c:	4a05      	ldr	r2, [pc, #20]	; (8020c34 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>)
 8020c1e:	ea02 2505 	and.w	r5, r2, r5, lsl #8
 8020c22:	ea45 05d9 	orr.w	r5, r5, r9, lsr #3
 8020c26:	00f6      	lsls	r6, r6, #3
 8020c28:	e7ec      	b.n	8020c04 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8020c2a:	b007      	add	sp, #28
 8020c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c30:	200067d8 	.word	0x200067d8
 8020c34:	fffff800 	.word	0xfffff800

08020c38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8020c38:	4770      	bx	lr

08020c3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8020c3a:	4770      	bx	lr

08020c3c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8020c3c:	4770      	bx	lr

08020c3e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8020c3e:	4770      	bx	lr

08020c40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020c40:	4770      	bx	lr

08020c42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020c42:	4770      	bx	lr

08020c44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020c44:	4770      	bx	lr

08020c46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020c46:	4770      	bx	lr

08020c48 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020c48:	4770      	bx	lr

08020c4a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020c4a:	4770      	bx	lr

08020c4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020c4c:	4770      	bx	lr

08020c4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020c4e:	4770      	bx	lr

08020c50 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020c50:	4770      	bx	lr

08020c52 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020c52:	4770      	bx	lr

08020c54 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020c54:	4770      	bx	lr

08020c56 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020c56:	4770      	bx	lr

08020c58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020c58:	4770      	bx	lr

08020c5a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020c5a:	4770      	bx	lr

08020c5c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020c5c:	4770      	bx	lr

08020c5e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020c5e:	4770      	bx	lr

08020c60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020c60:	4770      	bx	lr

08020c62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020c62:	4770      	bx	lr

08020c64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020c64:	4770      	bx	lr

08020c66 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020c66:	4770      	bx	lr

08020c68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020c68:	4770      	bx	lr

08020c6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020c6a:	4770      	bx	lr

08020c6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020c6c:	4770      	bx	lr

08020c6e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020c6e:	4770      	bx	lr

08020c70 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8020c70:	b508      	push	{r3, lr}
 8020c72:	4b06      	ldr	r3, [pc, #24]	; (8020c8c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8020c74:	8818      	ldrh	r0, [r3, #0]
 8020c76:	b928      	cbnz	r0, 8020c84 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8020c78:	4b05      	ldr	r3, [pc, #20]	; (8020c90 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8020c7a:	4a06      	ldr	r2, [pc, #24]	; (8020c94 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8020c7c:	4806      	ldr	r0, [pc, #24]	; (8020c98 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8020c7e:	2150      	movs	r1, #80	; 0x50
 8020c80:	f00b fd32 	bl	802c6e8 <__assert_func>
 8020c84:	0040      	lsls	r0, r0, #1
 8020c86:	b280      	uxth	r0, r0
 8020c88:	bd08      	pop	{r3, pc}
 8020c8a:	bf00      	nop
 8020c8c:	200067ca 	.word	0x200067ca
 8020c90:	08031c73 	.word	0x08031c73
 8020c94:	08032268 	.word	0x08032268
 8020c98:	08031cb5 	.word	0x08031cb5

08020c9c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ca0:	b08b      	sub	sp, #44	; 0x2c
 8020ca2:	460f      	mov	r7, r1
 8020ca4:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8020ca8:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8020cac:	4616      	mov	r6, r2
 8020cae:	f1bb 0f00 	cmp.w	fp, #0
 8020cb2:	d046      	beq.n	8020d42 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8020cb4:	6810      	ldr	r0, [r2, #0]
 8020cb6:	6851      	ldr	r1, [r2, #4]
 8020cb8:	ad06      	add	r5, sp, #24
 8020cba:	c503      	stmia	r5!, {r0, r1}
 8020cbc:	6818      	ldr	r0, [r3, #0]
 8020cbe:	6859      	ldr	r1, [r3, #4]
 8020cc0:	ad08      	add	r5, sp, #32
 8020cc2:	c503      	stmia	r5!, {r0, r1}
 8020cc4:	a806      	add	r0, sp, #24
 8020cc6:	f7f9 fdc9 	bl	801a85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020cca:	4631      	mov	r1, r6
 8020ccc:	a808      	add	r0, sp, #32
 8020cce:	f7f9 fdad 	bl	801a82c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020cd2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020cd6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020cda:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8020cde:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8020ce2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8020ce6:	fb16 2103 	smlabb	r1, r6, r3, r2
 8020cea:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8020cee:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8020cf2:	4f5e      	ldr	r7, [pc, #376]	; (8020e6c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 8020cf4:	440a      	add	r2, r1
 8020cf6:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020cfa:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8020cfe:	6838      	ldr	r0, [r7, #0]
 8020d00:	4413      	add	r3, r2
 8020d02:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8020d06:	6803      	ldr	r3, [r0, #0]
 8020d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020d0a:	4798      	blx	r3
 8020d0c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020d10:	46b9      	mov	r9, r7
 8020d12:	d019      	beq.n	8020d48 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020d14:	f010 0f04 	tst.w	r0, #4
 8020d18:	d01a      	beq.n	8020d50 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8020d1a:	f8d9 0000 	ldr.w	r0, [r9]
 8020d1e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020d22:	6801      	ldr	r1, [r0, #0]
 8020d24:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020d28:	e9cd b403 	strd	fp, r4, [sp, #12]
 8020d2c:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8020d30:	9402      	str	r4, [sp, #8]
 8020d32:	b2ad      	uxth	r5, r5
 8020d34:	fa1f f488 	uxth.w	r4, r8
 8020d38:	9501      	str	r5, [sp, #4]
 8020d3a:	9400      	str	r4, [sp, #0]
 8020d3c:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8020d3e:	4631      	mov	r1, r6
 8020d40:	47a0      	blx	r4
 8020d42:	b00b      	add	sp, #44	; 0x2c
 8020d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d48:	b914      	cbnz	r4, 8020d50 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8020d4a:	f010 0f01 	tst.w	r0, #1
 8020d4e:	e7e3      	b.n	8020d18 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8020d50:	f8d9 0000 	ldr.w	r0, [r9]
 8020d54:	6803      	ldr	r3, [r0, #0]
 8020d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d58:	4798      	blx	r3
 8020d5a:	4b45      	ldr	r3, [pc, #276]	; (8020e70 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8020d5c:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8020d60:	881a      	ldrh	r2, [r3, #0]
 8020d62:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020d66:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020d6a:	fb02 1404 	mla	r4, r2, r4, r1
 8020d6e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020d72:	469a      	mov	sl, r3
 8020d74:	fb05 f502 	mul.w	r5, r5, r2
 8020d78:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8020d7c:	d059      	beq.n	8020e32 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x196>
 8020d7e:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8020d82:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020d86:	fa1f f28b 	uxth.w	r2, fp
 8020d8a:	fa1f f989 	uxth.w	r9, r9
 8020d8e:	469e      	mov	lr, r3
 8020d90:	42ac      	cmp	r4, r5
 8020d92:	d264      	bcs.n	8020e5e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c2>
 8020d94:	eb04 0a07 	add.w	sl, r4, r7
 8020d98:	4554      	cmp	r4, sl
 8020d9a:	d23d      	bcs.n	8020e18 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17c>
 8020d9c:	8821      	ldrh	r1, [r4, #0]
 8020d9e:	f836 3b02 	ldrh.w	r3, [r6], #2
 8020da2:	1208      	asrs	r0, r1, #8
 8020da4:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020da8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020dac:	fb10 f009 	smulbb	r0, r0, r9
 8020db0:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8020db4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020db8:	00c9      	lsls	r1, r1, #3
 8020dba:	fb0c 0c02 	mla	ip, ip, r2, r0
 8020dbe:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8020dc2:	10d8      	asrs	r0, r3, #3
 8020dc4:	b2c9      	uxtb	r1, r1
 8020dc6:	00db      	lsls	r3, r3, #3
 8020dc8:	fa1f fc8c 	uxth.w	ip, ip
 8020dcc:	fb1b fb09 	smulbb	fp, fp, r9
 8020dd0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020dd4:	b2db      	uxtb	r3, r3
 8020dd6:	fb11 f109 	smulbb	r1, r1, r9
 8020dda:	fb00 b002 	mla	r0, r0, r2, fp
 8020dde:	fb03 1302 	mla	r3, r3, r2, r1
 8020de2:	f10c 0b01 	add.w	fp, ip, #1
 8020de6:	b29b      	uxth	r3, r3
 8020de8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020dec:	b280      	uxth	r0, r0
 8020dee:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8020df2:	f103 0c01 	add.w	ip, r3, #1
 8020df6:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020dfa:	1c43      	adds	r3, r0, #1
 8020dfc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020e00:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020e04:	0940      	lsrs	r0, r0, #5
 8020e06:	ea4c 0c0b 	orr.w	ip, ip, fp
 8020e0a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020e0e:	ea4c 0c00 	orr.w	ip, ip, r0
 8020e12:	f824 cb02 	strh.w	ip, [r4], #2
 8020e16:	e7bf      	b.n	8020d98 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8020e18:	f8be 3000 	ldrh.w	r3, [lr]
 8020e1c:	eba3 0308 	sub.w	r3, r3, r8
 8020e20:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020e24:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020e28:	eba3 0308 	sub.w	r3, r3, r8
 8020e2c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020e30:	e7ae      	b.n	8020d90 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8020e32:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020e36:	f8d9 0000 	ldr.w	r0, [r9]
 8020e3a:	42ac      	cmp	r4, r5
 8020e3c:	6803      	ldr	r3, [r0, #0]
 8020e3e:	d20e      	bcs.n	8020e5e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c2>
 8020e40:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
 8020e44:	4632      	mov	r2, r6
 8020e46:	463b      	mov	r3, r7
 8020e48:	4621      	mov	r1, r4
 8020e4a:	47c0      	blx	r8
 8020e4c:	f8ba 3000 	ldrh.w	r3, [sl]
 8020e50:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020e54:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020e58:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020e5c:	e7eb      	b.n	8020e36 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19a>
 8020e5e:	4b03      	ldr	r3, [pc, #12]	; (8020e6c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 8020e60:	6818      	ldr	r0, [r3, #0]
 8020e62:	6803      	ldr	r3, [r0, #0]
 8020e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020e66:	4798      	blx	r3
 8020e68:	e76b      	b.n	8020d42 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8020e6a:	bf00      	nop
 8020e6c:	200067d0 	.word	0x200067d0
 8020e70:	200067ca 	.word	0x200067ca

08020e74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020e74:	b510      	push	{r4, lr}
 8020e76:	2104      	movs	r1, #4
 8020e78:	4604      	mov	r4, r0
 8020e7a:	f00a fe16 	bl	802baaa <_ZdlPvj>
 8020e7e:	4620      	mov	r0, r4
 8020e80:	bd10      	pop	{r4, pc}

08020e82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020e82:	b510      	push	{r4, lr}
 8020e84:	2104      	movs	r1, #4
 8020e86:	4604      	mov	r4, r0
 8020e88:	f00a fe0f 	bl	802baaa <_ZdlPvj>
 8020e8c:	4620      	mov	r0, r4
 8020e8e:	bd10      	pop	{r4, pc}

08020e90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020e90:	b510      	push	{r4, lr}
 8020e92:	2104      	movs	r1, #4
 8020e94:	4604      	mov	r4, r0
 8020e96:	f00a fe08 	bl	802baaa <_ZdlPvj>
 8020e9a:	4620      	mov	r0, r4
 8020e9c:	bd10      	pop	{r4, pc}

08020e9e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020e9e:	b510      	push	{r4, lr}
 8020ea0:	2104      	movs	r1, #4
 8020ea2:	4604      	mov	r4, r0
 8020ea4:	f00a fe01 	bl	802baaa <_ZdlPvj>
 8020ea8:	4620      	mov	r0, r4
 8020eaa:	bd10      	pop	{r4, pc}

08020eac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020eac:	b510      	push	{r4, lr}
 8020eae:	2104      	movs	r1, #4
 8020eb0:	4604      	mov	r4, r0
 8020eb2:	f00a fdfa 	bl	802baaa <_ZdlPvj>
 8020eb6:	4620      	mov	r0, r4
 8020eb8:	bd10      	pop	{r4, pc}

08020eba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020eba:	b510      	push	{r4, lr}
 8020ebc:	2104      	movs	r1, #4
 8020ebe:	4604      	mov	r4, r0
 8020ec0:	f00a fdf3 	bl	802baaa <_ZdlPvj>
 8020ec4:	4620      	mov	r0, r4
 8020ec6:	bd10      	pop	{r4, pc}

08020ec8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020ec8:	b510      	push	{r4, lr}
 8020eca:	2104      	movs	r1, #4
 8020ecc:	4604      	mov	r4, r0
 8020ece:	f00a fdec 	bl	802baaa <_ZdlPvj>
 8020ed2:	4620      	mov	r0, r4
 8020ed4:	bd10      	pop	{r4, pc}

08020ed6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020ed6:	b510      	push	{r4, lr}
 8020ed8:	2104      	movs	r1, #4
 8020eda:	4604      	mov	r4, r0
 8020edc:	f00a fde5 	bl	802baaa <_ZdlPvj>
 8020ee0:	4620      	mov	r0, r4
 8020ee2:	bd10      	pop	{r4, pc}

08020ee4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020ee4:	b510      	push	{r4, lr}
 8020ee6:	2104      	movs	r1, #4
 8020ee8:	4604      	mov	r4, r0
 8020eea:	f00a fdde 	bl	802baaa <_ZdlPvj>
 8020eee:	4620      	mov	r0, r4
 8020ef0:	bd10      	pop	{r4, pc}

08020ef2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020ef2:	b510      	push	{r4, lr}
 8020ef4:	2104      	movs	r1, #4
 8020ef6:	4604      	mov	r4, r0
 8020ef8:	f00a fdd7 	bl	802baaa <_ZdlPvj>
 8020efc:	4620      	mov	r0, r4
 8020efe:	bd10      	pop	{r4, pc}

08020f00 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020f00:	b510      	push	{r4, lr}
 8020f02:	2104      	movs	r1, #4
 8020f04:	4604      	mov	r4, r0
 8020f06:	f00a fdd0 	bl	802baaa <_ZdlPvj>
 8020f0a:	4620      	mov	r0, r4
 8020f0c:	bd10      	pop	{r4, pc}

08020f0e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020f0e:	b510      	push	{r4, lr}
 8020f10:	2104      	movs	r1, #4
 8020f12:	4604      	mov	r4, r0
 8020f14:	f00a fdc9 	bl	802baaa <_ZdlPvj>
 8020f18:	4620      	mov	r0, r4
 8020f1a:	bd10      	pop	{r4, pc}

08020f1c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020f1c:	b510      	push	{r4, lr}
 8020f1e:	2104      	movs	r1, #4
 8020f20:	4604      	mov	r4, r0
 8020f22:	f00a fdc2 	bl	802baaa <_ZdlPvj>
 8020f26:	4620      	mov	r0, r4
 8020f28:	bd10      	pop	{r4, pc}

08020f2a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020f2a:	b510      	push	{r4, lr}
 8020f2c:	2104      	movs	r1, #4
 8020f2e:	4604      	mov	r4, r0
 8020f30:	f00a fdbb 	bl	802baaa <_ZdlPvj>
 8020f34:	4620      	mov	r0, r4
 8020f36:	bd10      	pop	{r4, pc}

08020f38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020f38:	b510      	push	{r4, lr}
 8020f3a:	2104      	movs	r1, #4
 8020f3c:	4604      	mov	r4, r0
 8020f3e:	f00a fdb4 	bl	802baaa <_ZdlPvj>
 8020f42:	4620      	mov	r0, r4
 8020f44:	bd10      	pop	{r4, pc}

08020f46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020f46:	b510      	push	{r4, lr}
 8020f48:	2104      	movs	r1, #4
 8020f4a:	4604      	mov	r4, r0
 8020f4c:	f00a fdad 	bl	802baaa <_ZdlPvj>
 8020f50:	4620      	mov	r0, r4
 8020f52:	bd10      	pop	{r4, pc}

08020f54 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020f54:	b510      	push	{r4, lr}
 8020f56:	2104      	movs	r1, #4
 8020f58:	4604      	mov	r4, r0
 8020f5a:	f00a fda6 	bl	802baaa <_ZdlPvj>
 8020f5e:	4620      	mov	r0, r4
 8020f60:	bd10      	pop	{r4, pc}

08020f62 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020f62:	b510      	push	{r4, lr}
 8020f64:	2104      	movs	r1, #4
 8020f66:	4604      	mov	r4, r0
 8020f68:	f00a fd9f 	bl	802baaa <_ZdlPvj>
 8020f6c:	4620      	mov	r0, r4
 8020f6e:	bd10      	pop	{r4, pc}

08020f70 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020f70:	b510      	push	{r4, lr}
 8020f72:	2104      	movs	r1, #4
 8020f74:	4604      	mov	r4, r0
 8020f76:	f00a fd98 	bl	802baaa <_ZdlPvj>
 8020f7a:	4620      	mov	r0, r4
 8020f7c:	bd10      	pop	{r4, pc}

08020f7e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020f7e:	b510      	push	{r4, lr}
 8020f80:	2104      	movs	r1, #4
 8020f82:	4604      	mov	r4, r0
 8020f84:	f00a fd91 	bl	802baaa <_ZdlPvj>
 8020f88:	4620      	mov	r0, r4
 8020f8a:	bd10      	pop	{r4, pc}

08020f8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020f8c:	b510      	push	{r4, lr}
 8020f8e:	2104      	movs	r1, #4
 8020f90:	4604      	mov	r4, r0
 8020f92:	f00a fd8a 	bl	802baaa <_ZdlPvj>
 8020f96:	4620      	mov	r0, r4
 8020f98:	bd10      	pop	{r4, pc}

08020f9a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020f9a:	b510      	push	{r4, lr}
 8020f9c:	2104      	movs	r1, #4
 8020f9e:	4604      	mov	r4, r0
 8020fa0:	f00a fd83 	bl	802baaa <_ZdlPvj>
 8020fa4:	4620      	mov	r0, r4
 8020fa6:	bd10      	pop	{r4, pc}

08020fa8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020fa8:	b510      	push	{r4, lr}
 8020faa:	2104      	movs	r1, #4
 8020fac:	4604      	mov	r4, r0
 8020fae:	f00a fd7c 	bl	802baaa <_ZdlPvj>
 8020fb2:	4620      	mov	r0, r4
 8020fb4:	bd10      	pop	{r4, pc}

08020fb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020fb6:	b510      	push	{r4, lr}
 8020fb8:	2104      	movs	r1, #4
 8020fba:	4604      	mov	r4, r0
 8020fbc:	f00a fd75 	bl	802baaa <_ZdlPvj>
 8020fc0:	4620      	mov	r0, r4
 8020fc2:	bd10      	pop	{r4, pc}

08020fc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8020fc4:	b510      	push	{r4, lr}
 8020fc6:	2104      	movs	r1, #4
 8020fc8:	4604      	mov	r4, r0
 8020fca:	f00a fd6e 	bl	802baaa <_ZdlPvj>
 8020fce:	4620      	mov	r0, r4
 8020fd0:	bd10      	pop	{r4, pc}

08020fd2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8020fd2:	b510      	push	{r4, lr}
 8020fd4:	2104      	movs	r1, #4
 8020fd6:	4604      	mov	r4, r0
 8020fd8:	f00a fd67 	bl	802baaa <_ZdlPvj>
 8020fdc:	4620      	mov	r0, r4
 8020fde:	bd10      	pop	{r4, pc}

08020fe0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8020fe0:	b510      	push	{r4, lr}
 8020fe2:	2104      	movs	r1, #4
 8020fe4:	4604      	mov	r4, r0
 8020fe6:	f00a fd60 	bl	802baaa <_ZdlPvj>
 8020fea:	4620      	mov	r0, r4
 8020fec:	bd10      	pop	{r4, pc}

08020fee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8020fee:	b510      	push	{r4, lr}
 8020ff0:	2104      	movs	r1, #4
 8020ff2:	4604      	mov	r4, r0
 8020ff4:	f00a fd59 	bl	802baaa <_ZdlPvj>
 8020ff8:	4620      	mov	r0, r4
 8020ffa:	bd10      	pop	{r4, pc}

08020ffc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021000:	4f97      	ldr	r7, [pc, #604]	; (8021260 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 8021002:	4616      	mov	r6, r2
 8021004:	683a      	ldr	r2, [r7, #0]
 8021006:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 802100a:	2a02      	cmp	r2, #2
 802100c:	b08f      	sub	sp, #60	; 0x3c
 802100e:	4604      	mov	r4, r0
 8021010:	4689      	mov	r9, r1
 8021012:	d106      	bne.n	8021022 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8021014:	4b93      	ldr	r3, [pc, #588]	; (8021264 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8021016:	4a94      	ldr	r2, [pc, #592]	; (8021268 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8021018:	f240 310f 	movw	r1, #783	; 0x30f
 802101c:	4893      	ldr	r0, [pc, #588]	; (802126c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 802101e:	f00b fb63 	bl	802c6e8 <__assert_func>
 8021022:	ad0e      	add	r5, sp, #56	; 0x38
 8021024:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8021028:	4628      	mov	r0, r5
 802102a:	f7fd fb75 	bl	801e718 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802102e:	6823      	ldr	r3, [r4, #0]
 8021030:	4680      	mov	r8, r0
 8021032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021034:	4620      	mov	r0, r4
 8021036:	4798      	blx	r3
 8021038:	4580      	cmp	r8, r0
 802103a:	d004      	beq.n	8021046 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 802103c:	4b8c      	ldr	r3, [pc, #560]	; (8021270 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 802103e:	4a8a      	ldr	r2, [pc, #552]	; (8021268 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8021040:	f240 3111 	movw	r1, #785	; 0x311
 8021044:	e7ea      	b.n	802101c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8021046:	4628      	mov	r0, r5
 8021048:	f7fd fadc 	bl	801e604 <_ZNK8touchgfx6Bitmap7getDataEv>
 802104c:	4680      	mov	r8, r0
 802104e:	b920      	cbnz	r0, 802105a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8021050:	4b88      	ldr	r3, [pc, #544]	; (8021274 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8021052:	4a85      	ldr	r2, [pc, #532]	; (8021268 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8021054:	f240 3113 	movw	r1, #787	; 0x313
 8021058:	e7e0      	b.n	802101c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802105a:	6830      	ldr	r0, [r6, #0]
 802105c:	6871      	ldr	r1, [r6, #4]
 802105e:	f9b6 a000 	ldrsh.w	sl, [r6]
 8021062:	ab06      	add	r3, sp, #24
 8021064:	c303      	stmia	r3!, {r0, r1}
 8021066:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802106a:	f8d9 0000 	ldr.w	r0, [r9]
 802106e:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8021072:	ab08      	add	r3, sp, #32
 8021074:	c303      	stmia	r3!, {r0, r1}
 8021076:	4628      	mov	r0, r5
 8021078:	f7fd f9bc 	bl	801e3f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802107c:	4606      	mov	r6, r0
 802107e:	4628      	mov	r0, r5
 8021080:	f7fd f9f2 	bl	801e468 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021084:	f10d 0b20 	add.w	fp, sp, #32
 8021088:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 802108c:	a806      	add	r0, sp, #24
 802108e:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8021092:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8021096:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 802109a:	f7f9 fbdf 	bl	801a85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802109e:	4658      	mov	r0, fp
 80210a0:	f7f9 fbdc 	bl	801a85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80210a4:	a80a      	add	r0, sp, #40	; 0x28
 80210a6:	f7f9 fbd9 	bl	801a85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80210aa:	4d73      	ldr	r5, [pc, #460]	; (8021278 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80210ac:	4b73      	ldr	r3, [pc, #460]	; (802127c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80210ae:	f9b5 2000 	ldrsh.w	r2, [r5]
 80210b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80210b6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80210ba:	2100      	movs	r1, #0
 80210bc:	910c      	str	r1, [sp, #48]	; 0x30
 80210be:	4658      	mov	r0, fp
 80210c0:	a90c      	add	r1, sp, #48	; 0x30
 80210c2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80210c6:	f7f4 ff93 	bl	8015ff0 <_ZN8touchgfx4RectaNERKS0_>
 80210ca:	4658      	mov	r0, fp
 80210cc:	f7f4 ffd3 	bl	8016076 <_ZNK8touchgfx4Rect7isEmptyEv>
 80210d0:	2800      	cmp	r0, #0
 80210d2:	f040 8099 	bne.w	8021208 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 80210d6:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80210da:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80210de:	4288      	cmp	r0, r1
 80210e0:	db37      	blt.n	8021152 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 80210e2:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80210e6:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80210ea:	429a      	cmp	r2, r3
 80210ec:	db31      	blt.n	8021152 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 80210ee:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 80210f2:	4430      	add	r0, r6
 80210f4:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80210f8:	4431      	add	r1, r6
 80210fa:	b200      	sxth	r0, r0
 80210fc:	b209      	sxth	r1, r1
 80210fe:	4288      	cmp	r0, r1
 8021100:	dc27      	bgt.n	8021152 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 8021102:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8021106:	440a      	add	r2, r1
 8021108:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 802110c:	440b      	add	r3, r1
 802110e:	b212      	sxth	r2, r2
 8021110:	b21b      	sxth	r3, r3
 8021112:	429a      	cmp	r2, r3
 8021114:	dc1d      	bgt.n	8021152 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 8021116:	6823      	ldr	r3, [r4, #0]
 8021118:	4620      	mov	r0, r4
 802111a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802111c:	4798      	blx	r3
 802111e:	4682      	mov	sl, r0
 8021120:	6838      	ldr	r0, [r7, #0]
 8021122:	6803      	ldr	r3, [r0, #0]
 8021124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021126:	4798      	blx	r3
 8021128:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 802112c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8021130:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8021134:	1a5b      	subs	r3, r3, r1
 8021136:	b29b      	uxth	r3, r3
 8021138:	b21c      	sxth	r4, r3
 802113a:	2c00      	cmp	r4, #0
 802113c:	dc0e      	bgt.n	802115c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 802113e:	bf1f      	itttt	ne
 8021140:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8021144:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8021148:	185b      	addne	r3, r3, r1
 802114a:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 802114e:	4644      	mov	r4, r8
 8021150:	e009      	b.n	8021166 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16a>
 8021152:	4b4b      	ldr	r3, [pc, #300]	; (8021280 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8021154:	4a44      	ldr	r2, [pc, #272]	; (8021268 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8021156:	f240 3121 	movw	r1, #801	; 0x321
 802115a:	e75f      	b.n	802101c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802115c:	1ad3      	subs	r3, r2, r3
 802115e:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8021162:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8021166:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 802116a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 802116e:	1b9b      	subs	r3, r3, r6
 8021170:	b29b      	uxth	r3, r3
 8021172:	b219      	sxth	r1, r3
 8021174:	2900      	cmp	r1, #0
 8021176:	dd4b      	ble.n	8021210 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x214>
 8021178:	4351      	muls	r1, r2
 802117a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 802117e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8021182:	1acb      	subs	r3, r1, r3
 8021184:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8021188:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 802118c:	2e00      	cmp	r6, #0
 802118e:	dd3b      	ble.n	8021208 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8021190:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8021194:	2b00      	cmp	r3, #0
 8021196:	dd37      	ble.n	8021208 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8021198:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 802119c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80211a0:	fb0a f90c 	mul.w	r9, sl, ip
 80211a4:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 80211a8:	4481      	add	r9, r0
 80211aa:	8828      	ldrh	r0, [r5, #0]
 80211ac:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 80211b0:	42ae      	cmp	r6, r5
 80211b2:	bfa8      	it	ge
 80211b4:	462e      	movge	r6, r5
 80211b6:	1a41      	subs	r1, r0, r1
 80211b8:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80211bc:	428e      	cmp	r6, r1
 80211be:	bfa8      	it	ge
 80211c0:	460e      	movge	r6, r1
 80211c2:	429d      	cmp	r5, r3
 80211c4:	bfa8      	it	ge
 80211c6:	461d      	movge	r5, r3
 80211c8:	4b2c      	ldr	r3, [pc, #176]	; (802127c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80211ca:	881b      	ldrh	r3, [r3, #0]
 80211cc:	eba3 030c 	sub.w	r3, r3, ip
 80211d0:	429d      	cmp	r5, r3
 80211d2:	bfa8      	it	ge
 80211d4:	461d      	movge	r5, r3
 80211d6:	42b0      	cmp	r0, r6
 80211d8:	d12c      	bne.n	8021234 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 80211da:	4290      	cmp	r0, r2
 80211dc:	d12a      	bne.n	8021234 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 80211de:	6838      	ldr	r0, [r7, #0]
 80211e0:	9203      	str	r2, [sp, #12]
 80211e2:	6803      	ldr	r3, [r0, #0]
 80211e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80211e6:	4798      	blx	r3
 80211e8:	07c3      	lsls	r3, r0, #31
 80211ea:	d51a      	bpl.n	8021222 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 80211ec:	9a03      	ldr	r2, [sp, #12]
 80211ee:	6838      	ldr	r0, [r7, #0]
 80211f0:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 80211f4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80211f8:	6803      	ldr	r3, [r0, #0]
 80211fa:	9200      	str	r2, [sp, #0]
 80211fc:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80211fe:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8021202:	4623      	mov	r3, r4
 8021204:	47a8      	blx	r5
 8021206:	4680      	mov	r8, r0
 8021208:	4640      	mov	r0, r8
 802120a:	b00f      	add	sp, #60	; 0x3c
 802120c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021210:	bf1f      	itttt	ne
 8021212:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8021216:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 802121a:	185b      	addne	r3, r3, r1
 802121c:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8021220:	e7b2      	b.n	8021188 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18c>
 8021222:	6838      	ldr	r0, [r7, #0]
 8021224:	6803      	ldr	r3, [r0, #0]
 8021226:	464a      	mov	r2, r9
 8021228:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 802122a:	4621      	mov	r1, r4
 802122c:	fb05 f30a 	mul.w	r3, r5, sl
 8021230:	47b0      	blx	r6
 8021232:	e7e9      	b.n	8021208 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8021234:	4355      	muls	r5, r2
 8021236:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 802123a:	9303      	str	r3, [sp, #12]
 802123c:	0076      	lsls	r6, r6, #1
 802123e:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8021242:	9b03      	ldr	r3, [sp, #12]
 8021244:	429c      	cmp	r4, r3
 8021246:	d2df      	bcs.n	8021208 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8021248:	6838      	ldr	r0, [r7, #0]
 802124a:	6803      	ldr	r3, [r0, #0]
 802124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802124e:	464a      	mov	r2, r9
 8021250:	461d      	mov	r5, r3
 8021252:	4621      	mov	r1, r4
 8021254:	4633      	mov	r3, r6
 8021256:	47a8      	blx	r5
 8021258:	44d1      	add	r9, sl
 802125a:	445c      	add	r4, fp
 802125c:	e7f1      	b.n	8021242 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x246>
 802125e:	bf00      	nop
 8021260:	200067d0 	.word	0x200067d0
 8021264:	08031a6b 	.word	0x08031a6b
 8021268:	08032318 	.word	0x08032318
 802126c:	08031b1d 	.word	0x08031b1d
 8021270:	08031b4f 	.word	0x08031b4f
 8021274:	08031ba4 	.word	0x08031ba4
 8021278:	200067ca 	.word	0x200067ca
 802127c:	200067cc 	.word	0x200067cc
 8021280:	08031be2 	.word	0x08031be2

08021284 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8021284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021286:	4607      	mov	r7, r0
 8021288:	b087      	sub	sp, #28
 802128a:	460d      	mov	r5, r1
 802128c:	4614      	mov	r4, r2
 802128e:	461e      	mov	r6, r3
 8021290:	b373      	cbz	r3, 80212f0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8021292:	4608      	mov	r0, r1
 8021294:	f7f4 feef 	bl	8016076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021298:	bb50      	cbnz	r0, 80212f0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 802129a:	6828      	ldr	r0, [r5, #0]
 802129c:	6869      	ldr	r1, [r5, #4]
 802129e:	4d1f      	ldr	r5, [pc, #124]	; (802131c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x98>)
 80212a0:	ab04      	add	r3, sp, #16
 80212a2:	c303      	stmia	r3!, {r0, r1}
 80212a4:	a804      	add	r0, sp, #16
 80212a6:	f7f9 fad9 	bl	801a85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80212aa:	6828      	ldr	r0, [r5, #0]
 80212ac:	6803      	ldr	r3, [r0, #0]
 80212ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80212b0:	4798      	blx	r3
 80212b2:	2eff      	cmp	r6, #255	; 0xff
 80212b4:	d01e      	beq.n	80212f4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x70>
 80212b6:	f010 0f08 	tst.w	r0, #8
 80212ba:	6828      	ldr	r0, [r5, #0]
 80212bc:	6803      	ldr	r3, [r0, #0]
 80212be:	d01c      	beq.n	80212fa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x76>
 80212c0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80212c2:	4b17      	ldr	r3, [pc, #92]	; (8021320 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x9c>)
 80212c4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80212c8:	9602      	str	r6, [sp, #8]
 80212ca:	ea03 2314 	and.w	r3, r3, r4, lsr #8
 80212ce:	f3c4 01c4 	ubfx	r1, r4, #3, #5
 80212d2:	0964      	lsrs	r4, r4, #5
 80212d4:	4319      	orrs	r1, r3
 80212d6:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80212da:	4321      	orrs	r1, r4
 80212dc:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80212e0:	9401      	str	r4, [sp, #4]
 80212e2:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80212e6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80212ea:	9400      	str	r4, [sp, #0]
 80212ec:	b289      	uxth	r1, r1
 80212ee:	47a8      	blx	r5
 80212f0:	b007      	add	sp, #28
 80212f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80212f4:	f010 0f02 	tst.w	r0, #2
 80212f8:	e7df      	b.n	80212ba <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 80212fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80212fc:	4798      	blx	r3
 80212fe:	4b09      	ldr	r3, [pc, #36]	; (8021324 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xa0>)
 8021300:	881a      	ldrh	r2, [r3, #0]
 8021302:	683b      	ldr	r3, [r7, #0]
 8021304:	e9cd 4600 	strd	r4, r6, [sp]
 8021308:	4601      	mov	r1, r0
 802130a:	69dc      	ldr	r4, [r3, #28]
 802130c:	4638      	mov	r0, r7
 802130e:	ab04      	add	r3, sp, #16
 8021310:	47a0      	blx	r4
 8021312:	6828      	ldr	r0, [r5, #0]
 8021314:	6803      	ldr	r3, [r0, #0]
 8021316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021318:	4798      	blx	r3
 802131a:	e7e9      	b.n	80212f0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 802131c:	200067d0 	.word	0x200067d0
 8021320:	fffff800 	.word	0xfffff800
 8021324:	200067ca 	.word	0x200067ca

08021328 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8021328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802132c:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
 8021330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021334:	460f      	mov	r7, r1
 8021336:	4614      	mov	r4, r2
 8021338:	461d      	mov	r5, r3
 802133a:	2e00      	cmp	r6, #0
 802133c:	f000 80b6 	beq.w	80214ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>
 8021340:	4618      	mov	r0, r3
 8021342:	f7f4 fe98 	bl	8016076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021346:	2800      	cmp	r0, #0
 8021348:	f040 80b0 	bne.w	80214ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>
 802134c:	f9b5 1000 	ldrsh.w	r1, [r5]
 8021350:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8021354:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8021358:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 802135c:	fb04 1303 	mla	r3, r4, r3, r1
 8021360:	eb07 0143 	add.w	r1, r7, r3, lsl #1
 8021364:	4365      	muls	r5, r4
 8021366:	2eff      	cmp	r6, #255	; 0xff
 8021368:	eba4 0c00 	sub.w	ip, r4, r0
 802136c:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8021370:	ea4f 4e18 	mov.w	lr, r8, lsr #16
 8021374:	ea4f 2718 	mov.w	r7, r8, lsr #8
 8021378:	fa5f f288 	uxtb.w	r2, r8
 802137c:	d04a      	beq.n	8021414 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 802137e:	f1c6 08ff 	rsb	r8, r6, #255	; 0xff
 8021382:	fa5f fe8e 	uxtb.w	lr, lr
 8021386:	b2b6      	uxth	r6, r6
 8021388:	b2ff      	uxtb	r7, r7
 802138a:	0040      	lsls	r0, r0, #1
 802138c:	fb0e fe06 	mul.w	lr, lr, r6
 8021390:	4377      	muls	r7, r6
 8021392:	fb02 f306 	mul.w	r3, r2, r6
 8021396:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 802139a:	fa1f f888 	uxth.w	r8, r8
 802139e:	42a9      	cmp	r1, r5
 80213a0:	f080 8084 	bcs.w	80214ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>
 80213a4:	eb01 0900 	add.w	r9, r1, r0
 80213a8:	4549      	cmp	r1, r9
 80213aa:	d231      	bcs.n	8021410 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe8>
 80213ac:	880a      	ldrh	r2, [r1, #0]
 80213ae:	1214      	asrs	r4, r2, #8
 80213b0:	10d6      	asrs	r6, r2, #3
 80213b2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80213b6:	00d2      	lsls	r2, r2, #3
 80213b8:	b2d2      	uxtb	r2, r2
 80213ba:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80213be:	fb14 f408 	smulbb	r4, r4, r8
 80213c2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80213c6:	4474      	add	r4, lr
 80213c8:	fb12 f208 	smulbb	r2, r2, r8
 80213cc:	b2a4      	uxth	r4, r4
 80213ce:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80213d2:	441a      	add	r2, r3
 80213d4:	b292      	uxth	r2, r2
 80213d6:	f104 0a01 	add.w	sl, r4, #1
 80213da:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80213de:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80213e2:	fb16 f608 	smulbb	r6, r6, r8
 80213e6:	f102 0a01 	add.w	sl, r2, #1
 80213ea:	443e      	add	r6, r7
 80213ec:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 80213f0:	b2b6      	uxth	r6, r6
 80213f2:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80213f6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80213fa:	4322      	orrs	r2, r4
 80213fc:	1c74      	adds	r4, r6, #1
 80213fe:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8021402:	0976      	lsrs	r6, r6, #5
 8021404:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021408:	4332      	orrs	r2, r6
 802140a:	f821 2b02 	strh.w	r2, [r1], #2
 802140e:	e7cb      	b.n	80213a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x80>
 8021410:	4461      	add	r1, ip
 8021412:	e7c4      	b.n	802139e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8021414:	4b26      	ldr	r3, [pc, #152]	; (80214b0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 8021416:	00ff      	lsls	r7, r7, #3
 8021418:	ea03 230e 	and.w	r3, r3, lr, lsl #8
 802141c:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8021420:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021424:	433b      	orrs	r3, r7
 8021426:	07e2      	lsls	r2, r4, #31
 8021428:	b29b      	uxth	r3, r3
 802142a:	d50c      	bpl.n	8021446 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11e>
 802142c:	0040      	lsls	r0, r0, #1
 802142e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8021432:	42a9      	cmp	r1, r5
 8021434:	d23a      	bcs.n	80214ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>
 8021436:	180a      	adds	r2, r1, r0
 8021438:	4291      	cmp	r1, r2
 802143a:	d202      	bcs.n	8021442 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11a>
 802143c:	f821 3b02 	strh.w	r3, [r1], #2
 8021440:	e7fa      	b.n	8021438 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8021442:	4461      	add	r1, ip
 8021444:	e7f5      	b.n	8021432 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8021446:	078f      	lsls	r7, r1, #30
 8021448:	d008      	beq.n	802145c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>
 802144a:	0066      	lsls	r6, r4, #1
 802144c:	460a      	mov	r2, r1
 802144e:	42aa      	cmp	r2, r5
 8021450:	d202      	bcs.n	8021458 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x130>
 8021452:	8013      	strh	r3, [r2, #0]
 8021454:	4432      	add	r2, r6
 8021456:	e7fa      	b.n	802144e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8021458:	3102      	adds	r1, #2
 802145a:	3801      	subs	r0, #1
 802145c:	07c6      	lsls	r6, r0, #31
 802145e:	d50b      	bpl.n	8021478 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x150>
 8021460:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8021464:	3a01      	subs	r2, #1
 8021466:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 802146a:	0066      	lsls	r6, r4, #1
 802146c:	42aa      	cmp	r2, r5
 802146e:	d202      	bcs.n	8021476 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14e>
 8021470:	8013      	strh	r3, [r2, #0]
 8021472:	4432      	add	r2, r6
 8021474:	e7fa      	b.n	802146c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8021476:	3801      	subs	r0, #1
 8021478:	b1c0      	cbz	r0, 80214ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>
 802147a:	1040      	asrs	r0, r0, #1
 802147c:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8021480:	0080      	lsls	r0, r0, #2
 8021482:	0064      	lsls	r4, r4, #1
 8021484:	42a9      	cmp	r1, r5
 8021486:	d211      	bcs.n	80214ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>
 8021488:	078a      	lsls	r2, r1, #30
 802148a:	d006      	beq.n	802149a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x172>
 802148c:	4b09      	ldr	r3, [pc, #36]	; (80214b4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 802148e:	4a0a      	ldr	r2, [pc, #40]	; (80214b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 8021490:	480a      	ldr	r0, [pc, #40]	; (80214bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x194>)
 8021492:	f240 31d6 	movw	r1, #982	; 0x3d6
 8021496:	f00b f927 	bl	802c6e8 <__assert_func>
 802149a:	180e      	adds	r6, r1, r0
 802149c:	460a      	mov	r2, r1
 802149e:	42b2      	cmp	r2, r6
 80214a0:	d202      	bcs.n	80214a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x180>
 80214a2:	f842 3b04 	str.w	r3, [r2], #4
 80214a6:	e7fa      	b.n	802149e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x176>
 80214a8:	4421      	add	r1, r4
 80214aa:	e7eb      	b.n	8021484 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15c>
 80214ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80214b0:	fffff800 	.word	0xfffff800
 80214b4:	0803191c 	.word	0x0803191c
 80214b8:	08031f64 	.word	0x08031f64
 80214bc:	08031b1d 	.word	0x08031b1d

080214c0 <_ZN8touchgfx8LCD16bppC1Ev>:
 80214c0:	2200      	movs	r2, #0
 80214c2:	4910      	ldr	r1, [pc, #64]	; (8021504 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 80214c4:	6042      	str	r2, [r0, #4]
 80214c6:	6001      	str	r1, [r0, #0]
 80214c8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80214cc:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80214d0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80214d4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80214d8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 80214dc:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 80214e0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 80214e4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 80214e8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 80214ec:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 80214f0:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80214f4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80214f8:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 80214fc:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8021500:	4770      	bx	lr
 8021502:	bf00      	nop
 8021504:	08031f20 	.word	0x08031f20

08021508 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8021508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802150c:	460d      	mov	r5, r1
 802150e:	b08b      	sub	sp, #44	; 0x2c
 8021510:	4604      	mov	r4, r0
 8021512:	6808      	ldr	r0, [r1, #0]
 8021514:	6849      	ldr	r1, [r1, #4]
 8021516:	4699      	mov	r9, r3
 8021518:	ab06      	add	r3, sp, #24
 802151a:	c303      	stmia	r3!, {r0, r1}
 802151c:	6810      	ldr	r0, [r2, #0]
 802151e:	6851      	ldr	r1, [r2, #4]
 8021520:	ab08      	add	r3, sp, #32
 8021522:	c303      	stmia	r3!, {r0, r1}
 8021524:	a806      	add	r0, sp, #24
 8021526:	f7f9 f999 	bl	801a85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802152a:	4629      	mov	r1, r5
 802152c:	a808      	add	r0, sp, #32
 802152e:	f7f9 f97d 	bl	801a82c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021532:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021536:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802153a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 802153e:	4d62      	ldr	r5, [pc, #392]	; (80216c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c0>)
 8021540:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8021544:	6828      	ldr	r0, [r5, #0]
 8021546:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 802154a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802154e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021552:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8021556:	440a      	add	r2, r1
 8021558:	f8ad 2020 	strh.w	r2, [sp, #32]
 802155c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8021560:	4413      	add	r3, r2
 8021562:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8021566:	6803      	ldr	r3, [r0, #0]
 8021568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802156a:	4798      	blx	r3
 802156c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021570:	d118      	bne.n	80215a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8021572:	f010 0f20 	tst.w	r0, #32
 8021576:	6828      	ldr	r0, [r5, #0]
 8021578:	d017      	beq.n	80215aa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 802157a:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 802157e:	6801      	ldr	r1, [r0, #0]
 8021580:	9502      	str	r5, [sp, #8]
 8021582:	b2b6      	uxth	r6, r6
 8021584:	fa1f f588 	uxth.w	r5, r8
 8021588:	f8cd 900c 	str.w	r9, [sp, #12]
 802158c:	9601      	str	r6, [sp, #4]
 802158e:	9500      	str	r5, [sp, #0]
 8021590:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 8021592:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8021596:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802159a:	4621      	mov	r1, r4
 802159c:	47a8      	blx	r5
 802159e:	b00b      	add	sp, #44	; 0x2c
 80215a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80215a8:	e7e5      	b.n	8021576 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80215aa:	6803      	ldr	r3, [r0, #0]
 80215ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80215ae:	4798      	blx	r3
 80215b0:	4946      	ldr	r1, [pc, #280]	; (80216cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80215b2:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80215b6:	880b      	ldrh	r3, [r1, #0]
 80215b8:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 80215bc:	fb03 5202 	mla	r2, r3, r2, r5
 80215c0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80215c4:	4373      	muls	r3, r6
 80215c6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80215ca:	9305      	str	r3, [sp, #20]
 80215cc:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80215d0:	9304      	str	r3, [sp, #16]
 80215d2:	468a      	mov	sl, r1
 80215d4:	9b05      	ldr	r3, [sp, #20]
 80215d6:	4298      	cmp	r0, r3
 80215d8:	d26f      	bcs.n	80216ba <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b2>
 80215da:	9b04      	ldr	r3, [sp, #16]
 80215dc:	4621      	mov	r1, r4
 80215de:	eb00 0b03 	add.w	fp, r0, r3
 80215e2:	4558      	cmp	r0, fp
 80215e4:	d25c      	bcs.n	80216a0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x198>
 80215e6:	f851 2b04 	ldr.w	r2, [r1], #4
 80215ea:	0e14      	lsrs	r4, r2, #24
 80215ec:	d016      	beq.n	802161c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 80215ee:	2cff      	cmp	r4, #255	; 0xff
 80215f0:	b2d3      	uxtb	r3, r2
 80215f2:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80215f6:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80215fa:	d111      	bne.n	8021620 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 80215fc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021600:	d10e      	bne.n	8021620 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 8021602:	f6a4 04ff 	subw	r4, r4, #2303	; 0x8ff
 8021606:	ea04 2202 	and.w	r2, r4, r2, lsl #8
 802160a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802160e:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 8021612:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021616:	ea43 030c 	orr.w	r3, r3, ip
 802161a:	8003      	strh	r3, [r0, #0]
 802161c:	3002      	adds	r0, #2
 802161e:	e7e0      	b.n	80215e2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 8021620:	fb09 f404 	mul.w	r4, r9, r4
 8021624:	8807      	ldrh	r7, [r0, #0]
 8021626:	1c65      	adds	r5, r4, #1
 8021628:	eb05 2424 	add.w	r4, r5, r4, asr #8
 802162c:	1224      	asrs	r4, r4, #8
 802162e:	123e      	asrs	r6, r7, #8
 8021630:	fa1f fe84 	uxth.w	lr, r4
 8021634:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021638:	43e4      	mvns	r4, r4
 802163a:	b2d2      	uxtb	r2, r2
 802163c:	b2e4      	uxtb	r4, r4
 802163e:	10fd      	asrs	r5, r7, #3
 8021640:	fb12 f20e 	smulbb	r2, r2, lr
 8021644:	00ff      	lsls	r7, r7, #3
 8021646:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802164a:	fb06 2604 	mla	r6, r6, r4, r2
 802164e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021652:	b2ff      	uxtb	r7, r7
 8021654:	fa5f fc8c 	uxtb.w	ip, ip
 8021658:	b2b6      	uxth	r6, r6
 802165a:	fb1c fc0e 	smulbb	ip, ip, lr
 802165e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021662:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8021666:	fb13 f30e 	smulbb	r3, r3, lr
 802166a:	fb05 c504 	mla	r5, r5, r4, ip
 802166e:	1c72      	adds	r2, r6, #1
 8021670:	fb07 3704 	mla	r7, r7, r4, r3
 8021674:	b2ad      	uxth	r5, r5
 8021676:	b2bf      	uxth	r7, r7
 8021678:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802167c:	f406 4278 	and.w	r2, r6, #63488	; 0xf800
 8021680:	f105 0c01 	add.w	ip, r5, #1
 8021684:	1c7e      	adds	r6, r7, #1
 8021686:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 802168a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802168e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021692:	096d      	lsrs	r5, r5, #5
 8021694:	4316      	orrs	r6, r2
 8021696:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802169a:	432e      	orrs	r6, r5
 802169c:	8006      	strh	r6, [r0, #0]
 802169e:	e7bd      	b.n	802161c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 80216a0:	f8ba 3000 	ldrh.w	r3, [sl]
 80216a4:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 80216a8:	eba3 0308 	sub.w	r3, r3, r8
 80216ac:	eba4 0408 	sub.w	r4, r4, r8
 80216b0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80216b4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80216b8:	e78c      	b.n	80215d4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xcc>
 80216ba:	4b03      	ldr	r3, [pc, #12]	; (80216c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c0>)
 80216bc:	6818      	ldr	r0, [r3, #0]
 80216be:	6803      	ldr	r3, [r0, #0]
 80216c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80216c2:	4798      	blx	r3
 80216c4:	e76b      	b.n	802159e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80216c6:	bf00      	nop
 80216c8:	200067d0 	.word	0x200067d0
 80216cc:	200067ca 	.word	0x200067ca

080216d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80216d0:	b570      	push	{r4, r5, r6, lr}
 80216d2:	9d04      	ldr	r5, [sp, #16]
 80216d4:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80216d8:	460c      	mov	r4, r1
 80216da:	4619      	mov	r1, r3
 80216dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80216e0:	2a0d      	cmp	r2, #13
 80216e2:	d820      	bhi.n	8021726 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 80216e4:	e8df f002 	tbb	[pc, r2]
 80216e8:	18121807 	.word	0x18121807
 80216ec:	18181818 	.word	0x18181818
 80216f0:	18181818 	.word	0x18181818
 80216f4:	1818      	.short	0x1818
 80216f6:	6802      	ldr	r2, [r0, #0]
 80216f8:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80216fc:	68d6      	ldr	r6, [r2, #12]
 80216fe:	462b      	mov	r3, r5
 8021700:	460a      	mov	r2, r1
 8021702:	46b4      	mov	ip, r6
 8021704:	4621      	mov	r1, r4
 8021706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802170a:	4760      	bx	ip
 802170c:	462a      	mov	r2, r5
 802170e:	4620      	mov	r0, r4
 8021710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021714:	f7ff bef8 	b.w	8021508 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021718:	4b03      	ldr	r3, [pc, #12]	; (8021728 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 802171a:	4a04      	ldr	r2, [pc, #16]	; (802172c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 802171c:	4804      	ldr	r0, [pc, #16]	; (8021730 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 802171e:	f44f 7142 	mov.w	r1, #776	; 0x308
 8021722:	f00a ffe1 	bl	802c6e8 <__assert_func>
 8021726:	bd70      	pop	{r4, r5, r6, pc}
 8021728:	08031c42 	.word	0x08031c42
 802172c:	0803239e 	.word	0x0803239e
 8021730:	08031b1d 	.word	0x08031b1d

08021734 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8021734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021738:	460e      	mov	r6, r1
 802173a:	b08c      	sub	sp, #48	; 0x30
 802173c:	4604      	mov	r4, r0
 802173e:	6808      	ldr	r0, [r1, #0]
 8021740:	6849      	ldr	r1, [r1, #4]
 8021742:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8021914 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e0>
 8021746:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8021918 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>
 802174a:	461d      	mov	r5, r3
 802174c:	ab08      	add	r3, sp, #32
 802174e:	c303      	stmia	r3!, {r0, r1}
 8021750:	6810      	ldr	r0, [r2, #0]
 8021752:	6851      	ldr	r1, [r2, #4]
 8021754:	ab0a      	add	r3, sp, #40	; 0x28
 8021756:	c303      	stmia	r3!, {r0, r1}
 8021758:	a808      	add	r0, sp, #32
 802175a:	f7f9 f87f 	bl	801a85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802175e:	4631      	mov	r1, r6
 8021760:	a80a      	add	r0, sp, #40	; 0x28
 8021762:	f7f9 f863 	bl	801a82c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021766:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 802176a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 802176e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8021772:	f8d8 0000 	ldr.w	r0, [r8]
 8021776:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 802177a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 802177e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021782:	440c      	add	r4, r1
 8021784:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8021788:	440a      	add	r2, r1
 802178a:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 802178e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8021792:	4413      	add	r3, r2
 8021794:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8021798:	6803      	ldr	r3, [r0, #0]
 802179a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802179c:	4798      	blx	r3
 802179e:	2dff      	cmp	r5, #255	; 0xff
 80217a0:	d122      	bne.n	80217e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb4>
 80217a2:	f010 0f01 	tst.w	r0, #1
 80217a6:	f8d8 0000 	ldr.w	r0, [r8]
 80217aa:	d020      	beq.n	80217ee <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xba>
 80217ac:	2100      	movs	r1, #0
 80217ae:	f04f 0e01 	mov.w	lr, #1
 80217b2:	f8d0 c000 	ldr.w	ip, [r0]
 80217b6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80217ba:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80217be:	e9cd e106 	strd	lr, r1, [sp, #24]
 80217c2:	f8b9 e000 	ldrh.w	lr, [r9]
 80217c6:	9503      	str	r5, [sp, #12]
 80217c8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80217cc:	b2b6      	uxth	r6, r6
 80217ce:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80217d2:	9102      	str	r1, [sp, #8]
 80217d4:	b2bf      	uxth	r7, r7
 80217d6:	9601      	str	r6, [sp, #4]
 80217d8:	9700      	str	r7, [sp, #0]
 80217da:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 80217de:	4621      	mov	r1, r4
 80217e0:	47a8      	blx	r5
 80217e2:	b00c      	add	sp, #48	; 0x30
 80217e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80217e8:	f010 0f04 	tst.w	r0, #4
 80217ec:	e7db      	b.n	80217a6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x72>
 80217ee:	6803      	ldr	r3, [r0, #0]
 80217f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80217f2:	4798      	blx	r3
 80217f4:	f8b9 3000 	ldrh.w	r3, [r9]
 80217f8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80217fc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8021800:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8021804:	fb03 1202 	mla	r2, r3, r2, r1
 8021808:	ebac 0c07 	sub.w	ip, ip, r7
 802180c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021810:	435e      	muls	r6, r3
 8021812:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8021816:	2dff      	cmp	r5, #255	; 0xff
 8021818:	eba3 0707 	sub.w	r7, r3, r7
 802181c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8021820:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021824:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8021828:	d049      	beq.n	80218be <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x18a>
 802182a:	43eb      	mvns	r3, r5
 802182c:	fa1f f985 	uxth.w	r9, r5
 8021830:	b2db      	uxtb	r3, r3
 8021832:	42b0      	cmp	r0, r6
 8021834:	d266      	bcs.n	8021904 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8021836:	eb00 0a0e 	add.w	sl, r0, lr
 802183a:	4550      	cmp	r0, sl
 802183c:	4621      	mov	r1, r4
 802183e:	f104 0403 	add.w	r4, r4, #3
 8021842:	d25b      	bcs.n	80218fc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8021844:	8802      	ldrh	r2, [r0, #0]
 8021846:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802184a:	ea4f 2822 	mov.w	r8, r2, asr #8
 802184e:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8021852:	fb11 f109 	smulbb	r1, r1, r9
 8021856:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 802185a:	10d5      	asrs	r5, r2, #3
 802185c:	fb08 1803 	mla	r8, r8, r3, r1
 8021860:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8021864:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021868:	fb11 f109 	smulbb	r1, r1, r9
 802186c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021870:	fb05 1503 	mla	r5, r5, r3, r1
 8021874:	00d2      	lsls	r2, r2, #3
 8021876:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802187a:	b2d2      	uxtb	r2, r2
 802187c:	fb11 f109 	smulbb	r1, r1, r9
 8021880:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021884:	fa1f f888 	uxth.w	r8, r8
 8021888:	fb02 1203 	mla	r2, r2, r3, r1
 802188c:	b292      	uxth	r2, r2
 802188e:	f108 0101 	add.w	r1, r8, #1
 8021892:	b2ad      	uxth	r5, r5
 8021894:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8021898:	1c51      	adds	r1, r2, #1
 802189a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802189e:	1c69      	adds	r1, r5, #1
 80218a0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80218a4:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 80218a8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80218ac:	096d      	lsrs	r5, r5, #5
 80218ae:	ea42 0208 	orr.w	r2, r2, r8
 80218b2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80218b6:	432a      	orrs	r2, r5
 80218b8:	f820 2b02 	strh.w	r2, [r0], #2
 80218bc:	e7bd      	b.n	802183a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80218be:	4a14      	ldr	r2, [pc, #80]	; (8021910 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1dc>)
 80218c0:	42b0      	cmp	r0, r6
 80218c2:	d21f      	bcs.n	8021904 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80218c4:	eb00 050e 	add.w	r5, r0, lr
 80218c8:	42a8      	cmp	r0, r5
 80218ca:	4621      	mov	r1, r4
 80218cc:	f104 0403 	add.w	r4, r4, #3
 80218d0:	d210      	bcs.n	80218f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c0>
 80218d2:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 80218d6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80218da:	00db      	lsls	r3, r3, #3
 80218dc:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80218e0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80218e4:	430b      	orrs	r3, r1
 80218e6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80218ea:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80218ee:	f820 3b02 	strh.w	r3, [r0], #2
 80218f2:	e7e9      	b.n	80218c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80218f4:	4438      	add	r0, r7
 80218f6:	eb01 040c 	add.w	r4, r1, ip
 80218fa:	e7e1      	b.n	80218c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x18c>
 80218fc:	4438      	add	r0, r7
 80218fe:	eb01 040c 	add.w	r4, r1, ip
 8021902:	e796      	b.n	8021832 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xfe>
 8021904:	4b03      	ldr	r3, [pc, #12]	; (8021914 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e0>)
 8021906:	6818      	ldr	r0, [r3, #0]
 8021908:	6803      	ldr	r3, [r0, #0]
 802190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802190c:	4798      	blx	r3
 802190e:	e768      	b.n	80217e2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xae>
 8021910:	fffff800 	.word	0xfffff800
 8021914:	200067d0 	.word	0x200067d0
 8021918:	200067ca 	.word	0x200067ca

0802191c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 802191c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021920:	b093      	sub	sp, #76	; 0x4c
 8021922:	880e      	ldrh	r6, [r1, #0]
 8021924:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8021928:	4681      	mov	r9, r0
 802192a:	4688      	mov	r8, r1
 802192c:	4615      	mov	r5, r2
 802192e:	b136      	cbz	r6, 802193e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 8021930:	4b70      	ldr	r3, [pc, #448]	; (8021af4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8021932:	4a71      	ldr	r2, [pc, #452]	; (8021af8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8021934:	4871      	ldr	r0, [pc, #452]	; (8021afc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8021936:	f44f 719a 	mov.w	r1, #308	; 0x134
 802193a:	f00a fed5 	bl	802c6e8 <__assert_func>
 802193e:	6810      	ldr	r0, [r2, #0]
 8021940:	6851      	ldr	r1, [r2, #4]
 8021942:	4f6f      	ldr	r7, [pc, #444]	; (8021b00 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8021944:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8021b04 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8021948:	ac0e      	add	r4, sp, #56	; 0x38
 802194a:	c403      	stmia	r4!, {r0, r1}
 802194c:	6818      	ldr	r0, [r3, #0]
 802194e:	6859      	ldr	r1, [r3, #4]
 8021950:	ac10      	add	r4, sp, #64	; 0x40
 8021952:	c403      	stmia	r4!, {r0, r1}
 8021954:	a80e      	add	r0, sp, #56	; 0x38
 8021956:	f7f8 ff81 	bl	801a85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802195a:	4629      	mov	r1, r5
 802195c:	a810      	add	r0, sp, #64	; 0x40
 802195e:	f7f8 ff65 	bl	801a82c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021962:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8021966:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 802196a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802196e:	6838      	ldr	r0, [r7, #0]
 8021970:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8021974:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8021978:	fb11 2103 	smlabb	r1, r1, r3, r2
 802197c:	4489      	add	r9, r1
 802197e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8021982:	440a      	add	r2, r1
 8021984:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8021988:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802198c:	4413      	add	r3, r2
 802198e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8021992:	6803      	ldr	r3, [r0, #0]
 8021994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021996:	4798      	blx	r3
 8021998:	f010 0f80 	tst.w	r0, #128	; 0x80
 802199c:	6838      	ldr	r0, [r7, #0]
 802199e:	d01c      	beq.n	80219da <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 80219a0:	210b      	movs	r1, #11
 80219a2:	6802      	ldr	r2, [r0, #0]
 80219a4:	9608      	str	r6, [sp, #32]
 80219a6:	9107      	str	r1, [sp, #28]
 80219a8:	f8bb 1000 	ldrh.w	r1, [fp]
 80219ac:	9106      	str	r1, [sp, #24]
 80219ae:	2101      	movs	r1, #1
 80219b0:	e9cd a104 	strd	sl, r1, [sp, #16]
 80219b4:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80219b8:	9103      	str	r1, [sp, #12]
 80219ba:	b2a4      	uxth	r4, r4
 80219bc:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 80219c0:	9100      	str	r1, [sp, #0]
 80219c2:	b2ad      	uxth	r5, r5
 80219c4:	9502      	str	r5, [sp, #8]
 80219c6:	9401      	str	r4, [sp, #4]
 80219c8:	6b94      	ldr	r4, [r2, #56]	; 0x38
 80219ca:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80219ce:	4642      	mov	r2, r8
 80219d0:	4649      	mov	r1, r9
 80219d2:	47a0      	blx	r4
 80219d4:	b013      	add	sp, #76	; 0x4c
 80219d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219da:	6803      	ldr	r3, [r0, #0]
 80219dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80219de:	4798      	blx	r3
 80219e0:	f8bb 3000 	ldrh.w	r3, [fp]
 80219e4:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80219e8:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80219ec:	fb03 1202 	mla	r2, r3, r2, r1
 80219f0:	435d      	muls	r5, r3
 80219f2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80219f6:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80219fa:	920c      	str	r2, [sp, #48]	; 0x30
 80219fc:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8021a00:	1b12      	subs	r2, r2, r4
 8021a02:	920d      	str	r2, [sp, #52]	; 0x34
 8021a04:	0062      	lsls	r2, r4, #1
 8021a06:	1b1c      	subs	r4, r3, r4
 8021a08:	0063      	lsls	r3, r4, #1
 8021a0a:	920a      	str	r2, [sp, #40]	; 0x28
 8021a0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8021a0e:	f04f 0e04 	mov.w	lr, #4
 8021a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021a14:	4298      	cmp	r0, r3
 8021a16:	d266      	bcs.n	8021ae6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ca>
 8021a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a1a:	eb00 0b03 	add.w	fp, r0, r3
 8021a1e:	4558      	cmp	r0, fp
 8021a20:	d25c      	bcs.n	8021adc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>
 8021a22:	f819 3b01 	ldrb.w	r3, [r9], #1
 8021a26:	fb1e e303 	smlabb	r3, lr, r3, lr
 8021a2a:	f858 2003 	ldr.w	r2, [r8, r3]
 8021a2e:	0e11      	lsrs	r1, r2, #24
 8021a30:	d012      	beq.n	8021a58 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8021a32:	29ff      	cmp	r1, #255	; 0xff
 8021a34:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8021a38:	d110      	bne.n	8021a5c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8021a3a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021a3e:	d10d      	bne.n	8021a5c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8021a40:	0953      	lsrs	r3, r2, #5
 8021a42:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8021a46:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021a4a:	f027 0707 	bic.w	r7, r7, #7
 8021a4e:	431f      	orrs	r7, r3
 8021a50:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021a54:	433a      	orrs	r2, r7
 8021a56:	8002      	strh	r2, [r0, #0]
 8021a58:	3002      	adds	r0, #2
 8021a5a:	e7e0      	b.n	8021a1e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x102>
 8021a5c:	fb0a f101 	mul.w	r1, sl, r1
 8021a60:	8806      	ldrh	r6, [r0, #0]
 8021a62:	1c4b      	adds	r3, r1, #1
 8021a64:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8021a68:	1235      	asrs	r5, r6, #8
 8021a6a:	10f4      	asrs	r4, r6, #3
 8021a6c:	121b      	asrs	r3, r3, #8
 8021a6e:	00f6      	lsls	r6, r6, #3
 8021a70:	b299      	uxth	r1, r3
 8021a72:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8021a76:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021a7a:	b2f6      	uxtb	r6, r6
 8021a7c:	43db      	mvns	r3, r3
 8021a7e:	b2d2      	uxtb	r2, r2
 8021a80:	b2db      	uxtb	r3, r3
 8021a82:	fb1c fc01 	smulbb	ip, ip, r1
 8021a86:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8021a8a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021a8e:	fb12 f201 	smulbb	r2, r2, r1
 8021a92:	fb05 c503 	mla	r5, r5, r3, ip
 8021a96:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021a9a:	b2ff      	uxtb	r7, r7
 8021a9c:	fb06 2203 	mla	r2, r6, r3, r2
 8021aa0:	b2ad      	uxth	r5, r5
 8021aa2:	fb17 f701 	smulbb	r7, r7, r1
 8021aa6:	b292      	uxth	r2, r2
 8021aa8:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8021aac:	fb04 7403 	mla	r4, r4, r3, r7
 8021ab0:	f105 0c01 	add.w	ip, r5, #1
 8021ab4:	1c57      	adds	r7, r2, #1
 8021ab6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021aba:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021abe:	b2a4      	uxth	r4, r4
 8021ac0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021ac4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021ac8:	433d      	orrs	r5, r7
 8021aca:	1c67      	adds	r7, r4, #1
 8021acc:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8021ad0:	0964      	lsrs	r4, r4, #5
 8021ad2:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8021ad6:	4325      	orrs	r5, r4
 8021ad8:	8005      	strh	r5, [r0, #0]
 8021ada:	e7bd      	b.n	8021a58 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8021adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021ade:	4418      	add	r0, r3
 8021ae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021ae2:	4499      	add	r9, r3
 8021ae4:	e795      	b.n	8021a12 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf6>
 8021ae6:	4b06      	ldr	r3, [pc, #24]	; (8021b00 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8021ae8:	6818      	ldr	r0, [r3, #0]
 8021aea:	6803      	ldr	r3, [r0, #0]
 8021aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021aee:	4798      	blx	r3
 8021af0:	e770      	b.n	80219d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 8021af2:	bf00      	nop
 8021af4:	08031a1b 	.word	0x08031a1b
 8021af8:	0803216f 	.word	0x0803216f
 8021afc:	08031b1d 	.word	0x08031b1d
 8021b00:	200067d0 	.word	0x200067d0
 8021b04:	200067ca 	.word	0x200067ca

08021b08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8021b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b0c:	4614      	mov	r4, r2
 8021b0e:	880a      	ldrh	r2, [r1, #0]
 8021b10:	b087      	sub	sp, #28
 8021b12:	2a02      	cmp	r2, #2
 8021b14:	4680      	mov	r8, r0
 8021b16:	460d      	mov	r5, r1
 8021b18:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8021b1c:	d006      	beq.n	8021b2c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 8021b1e:	4b63      	ldr	r3, [pc, #396]	; (8021cac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 8021b20:	4a63      	ldr	r2, [pc, #396]	; (8021cb0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8021b22:	4864      	ldr	r0, [pc, #400]	; (8021cb4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 8021b24:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8021b28:	f00a fdde 	bl	802c6e8 <__assert_func>
 8021b2c:	2e00      	cmp	r6, #0
 8021b2e:	f000 80b9 	beq.w	8021ca4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 8021b32:	6820      	ldr	r0, [r4, #0]
 8021b34:	6861      	ldr	r1, [r4, #4]
 8021b36:	af02      	add	r7, sp, #8
 8021b38:	c703      	stmia	r7!, {r0, r1}
 8021b3a:	6818      	ldr	r0, [r3, #0]
 8021b3c:	6859      	ldr	r1, [r3, #4]
 8021b3e:	af04      	add	r7, sp, #16
 8021b40:	c703      	stmia	r7!, {r0, r1}
 8021b42:	a802      	add	r0, sp, #8
 8021b44:	f7f8 fe8a 	bl	801a85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021b48:	4621      	mov	r1, r4
 8021b4a:	a804      	add	r0, sp, #16
 8021b4c:	f7f8 fe6e 	bl	801a82c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021b50:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021b54:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021b58:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8021b5c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8021b60:	fb14 2103 	smlabb	r1, r4, r3, r2
 8021b64:	eb08 0401 	add.w	r4, r8, r1
 8021b68:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021b6c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021b70:	440a      	add	r2, r1
 8021b72:	f8ad 2010 	strh.w	r2, [sp, #16]
 8021b76:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021b7a:	4413      	add	r3, r2
 8021b7c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021b80:	4b4d      	ldr	r3, [pc, #308]	; (8021cb8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8021b82:	6818      	ldr	r0, [r3, #0]
 8021b84:	6803      	ldr	r3, [r0, #0]
 8021b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021b88:	4798      	blx	r3
 8021b8a:	4b4c      	ldr	r3, [pc, #304]	; (8021cbc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 8021b8c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8021b90:	881a      	ldrh	r2, [r3, #0]
 8021b92:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8021b96:	2eff      	cmp	r6, #255	; 0xff
 8021b98:	fb02 c101 	mla	r1, r2, r1, ip
 8021b9c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021ba0:	fb02 f207 	mul.w	r2, r2, r7
 8021ba4:	f105 0104 	add.w	r1, r5, #4
 8021ba8:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8021bac:	461d      	mov	r5, r3
 8021bae:	d05a      	beq.n	8021c66 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 8021bb0:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8021bb4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8021bb8:	b2b6      	uxth	r6, r6
 8021bba:	fa1f fe8e 	uxth.w	lr, lr
 8021bbe:	9301      	str	r3, [sp, #4]
 8021bc0:	4282      	cmp	r2, r0
 8021bc2:	d96a      	bls.n	8021c9a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8021bc4:	eb00 0b0a 	add.w	fp, r0, sl
 8021bc8:	4583      	cmp	fp, r0
 8021bca:	d940      	bls.n	8021c4e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 8021bcc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021bd0:	8805      	ldrh	r5, [r0, #0]
 8021bd2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8021bd6:	122f      	asrs	r7, r5, #8
 8021bd8:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8021bdc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021be0:	fb17 f70e 	smulbb	r7, r7, lr
 8021be4:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8021be8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021bec:	00ed      	lsls	r5, r5, #3
 8021bee:	fb0c 7c06 	mla	ip, ip, r6, r7
 8021bf2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8021bf6:	10df      	asrs	r7, r3, #3
 8021bf8:	b2ed      	uxtb	r5, r5
 8021bfa:	00db      	lsls	r3, r3, #3
 8021bfc:	fa1f fc8c 	uxth.w	ip, ip
 8021c00:	fb19 f90e 	smulbb	r9, r9, lr
 8021c04:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021c08:	b2db      	uxtb	r3, r3
 8021c0a:	fb15 f50e 	smulbb	r5, r5, lr
 8021c0e:	fb07 9706 	mla	r7, r7, r6, r9
 8021c12:	fb03 5306 	mla	r3, r3, r6, r5
 8021c16:	f10c 0901 	add.w	r9, ip, #1
 8021c1a:	b29b      	uxth	r3, r3
 8021c1c:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8021c20:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8021c24:	f103 0c01 	add.w	ip, r3, #1
 8021c28:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021c2c:	b2bf      	uxth	r7, r7
 8021c2e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021c32:	ea4c 0c09 	orr.w	ip, ip, r9
 8021c36:	f107 0901 	add.w	r9, r7, #1
 8021c3a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8021c3e:	097f      	lsrs	r7, r7, #5
 8021c40:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021c44:	ea4c 0c07 	orr.w	ip, ip, r7
 8021c48:	f820 cb02 	strh.w	ip, [r0], #2
 8021c4c:	e7bc      	b.n	8021bc8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8021c4e:	9b01      	ldr	r3, [sp, #4]
 8021c50:	881b      	ldrh	r3, [r3, #0]
 8021c52:	eba3 0308 	sub.w	r3, r3, r8
 8021c56:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021c5a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021c5e:	eba3 0308 	sub.w	r3, r3, r8
 8021c62:	441c      	add	r4, r3
 8021c64:	e7ac      	b.n	8021bc0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 8021c66:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8021c6a:	4282      	cmp	r2, r0
 8021c6c:	d915      	bls.n	8021c9a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8021c6e:	eb00 060a 	add.w	r6, r0, sl
 8021c72:	4286      	cmp	r6, r0
 8021c74:	d906      	bls.n	8021c84 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 8021c76:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021c7a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8021c7e:	f820 3b02 	strh.w	r3, [r0], #2
 8021c82:	e7f6      	b.n	8021c72 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 8021c84:	882b      	ldrh	r3, [r5, #0]
 8021c86:	eba3 0308 	sub.w	r3, r3, r8
 8021c8a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021c8e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021c92:	eba3 0308 	sub.w	r3, r3, r8
 8021c96:	441c      	add	r4, r3
 8021c98:	e7e7      	b.n	8021c6a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 8021c9a:	4b07      	ldr	r3, [pc, #28]	; (8021cb8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8021c9c:	6818      	ldr	r0, [r3, #0]
 8021c9e:	6803      	ldr	r3, [r0, #0]
 8021ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021ca2:	4798      	blx	r3
 8021ca4:	b007      	add	sp, #28
 8021ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021caa:	bf00      	nop
 8021cac:	0803194b 	.word	0x0803194b
 8021cb0:	08031fd9 	.word	0x08031fd9
 8021cb4:	08031b1d 	.word	0x08031b1d
 8021cb8:	200067d0 	.word	0x200067d0
 8021cbc:	200067ca 	.word	0x200067ca

08021cc0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8021cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cc4:	f8b1 9000 	ldrh.w	r9, [r1]
 8021cc8:	b091      	sub	sp, #68	; 0x44
 8021cca:	f1b9 0f01 	cmp.w	r9, #1
 8021cce:	4604      	mov	r4, r0
 8021cd0:	460f      	mov	r7, r1
 8021cd2:	4690      	mov	r8, r2
 8021cd4:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8021cd8:	d006      	beq.n	8021ce8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 8021cda:	4b84      	ldr	r3, [pc, #528]	; (8021eec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 8021cdc:	4a84      	ldr	r2, [pc, #528]	; (8021ef0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 8021cde:	4885      	ldr	r0, [pc, #532]	; (8021ef4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 8021ce0:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8021ce4:	f00a fd00 	bl	802c6e8 <__assert_func>
 8021ce8:	2d00      	cmp	r5, #0
 8021cea:	d04f      	beq.n	8021d8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8021cec:	6810      	ldr	r0, [r2, #0]
 8021cee:	6851      	ldr	r1, [r2, #4]
 8021cf0:	f8df b208 	ldr.w	fp, [pc, #520]	; 8021efc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 8021cf4:	ae0c      	add	r6, sp, #48	; 0x30
 8021cf6:	c603      	stmia	r6!, {r0, r1}
 8021cf8:	6818      	ldr	r0, [r3, #0]
 8021cfa:	6859      	ldr	r1, [r3, #4]
 8021cfc:	ae0e      	add	r6, sp, #56	; 0x38
 8021cfe:	c603      	stmia	r6!, {r0, r1}
 8021d00:	a80c      	add	r0, sp, #48	; 0x30
 8021d02:	f7f8 fdab 	bl	801a85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021d06:	4641      	mov	r1, r8
 8021d08:	a80e      	add	r0, sp, #56	; 0x38
 8021d0a:	f7f8 fd8f 	bl	801a82c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021d0e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8021d12:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021d16:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8021d1a:	f8db 0000 	ldr.w	r0, [fp]
 8021d1e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 8021d22:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8021d26:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8021f00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 8021d2a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021d2e:	440c      	add	r4, r1
 8021d30:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021d34:	440a      	add	r2, r1
 8021d36:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8021d3a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8021d3e:	4413      	add	r3, r2
 8021d40:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8021d44:	6803      	ldr	r3, [r0, #0]
 8021d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021d48:	4798      	blx	r3
 8021d4a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8021d4e:	f8db 0000 	ldr.w	r0, [fp]
 8021d52:	d01e      	beq.n	8021d92 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 8021d54:	210b      	movs	r1, #11
 8021d56:	f04f 0c00 	mov.w	ip, #0
 8021d5a:	6802      	ldr	r2, [r0, #0]
 8021d5c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8021d60:	e9cd 1c07 	strd	r1, ip, [sp, #28]
 8021d64:	f8b8 1000 	ldrh.w	r1, [r8]
 8021d68:	9504      	str	r5, [sp, #16]
 8021d6a:	e9cd 9105 	strd	r9, r1, [sp, #20]
 8021d6e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8021d72:	9103      	str	r1, [sp, #12]
 8021d74:	fa1f f18a 	uxth.w	r1, sl
 8021d78:	9102      	str	r1, [sp, #8]
 8021d7a:	b2b6      	uxth	r6, r6
 8021d7c:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
 8021d80:	9100      	str	r1, [sp, #0]
 8021d82:	9601      	str	r6, [sp, #4]
 8021d84:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8021d86:	4621      	mov	r1, r4
 8021d88:	463a      	mov	r2, r7
 8021d8a:	47a8      	blx	r5
 8021d8c:	b011      	add	sp, #68	; 0x44
 8021d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d92:	6803      	ldr	r3, [r0, #0]
 8021d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021d96:	4798      	blx	r3
 8021d98:	f8b8 2000 	ldrh.w	r2, [r8]
 8021d9c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021da0:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8021da4:	2dff      	cmp	r5, #255	; 0xff
 8021da6:	fb02 1303 	mla	r3, r2, r3, r1
 8021daa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021dae:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8021db2:	fb0a fa02 	mul.w	sl, sl, r2
 8021db6:	d062      	beq.n	8021e7e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 8021db8:	ea6f 0c05 	mvn.w	ip, r5
 8021dbc:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8021dc0:	930a      	str	r3, [sp, #40]	; 0x28
 8021dc2:	b2ad      	uxth	r5, r5
 8021dc4:	fa5f fc8c 	uxtb.w	ip, ip
 8021dc8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8021dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021dce:	4298      	cmp	r0, r3
 8021dd0:	f080 8085 	bcs.w	8021ede <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8021dd4:	eb00 0b09 	add.w	fp, r0, r9
 8021dd8:	4558      	cmp	r0, fp
 8021dda:	d246      	bcs.n	8021e6a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8021ddc:	f814 eb01 	ldrb.w	lr, [r4], #1
 8021de0:	2303      	movs	r3, #3
 8021de2:	2204      	movs	r2, #4
 8021de4:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8021de8:	eb07 0a0e 	add.w	sl, r7, lr
 8021dec:	8803      	ldrh	r3, [r0, #0]
 8021dee:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8021df2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021df6:	1219      	asrs	r1, r3, #8
 8021df8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021dfc:	fb18 f805 	smulbb	r8, r8, r5
 8021e00:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8021e04:	10da      	asrs	r2, r3, #3
 8021e06:	fb01 810c 	mla	r1, r1, ip, r8
 8021e0a:	00db      	lsls	r3, r3, #3
 8021e0c:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021e10:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021e14:	b2db      	uxtb	r3, r3
 8021e16:	fb18 f805 	smulbb	r8, r8, r5
 8021e1a:	fb1e fe05 	smulbb	lr, lr, r5
 8021e1e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8021e22:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8021e26:	b289      	uxth	r1, r1
 8021e28:	fb02 820c 	mla	r2, r2, ip, r8
 8021e2c:	fb03 e30c 	mla	r3, r3, ip, lr
 8021e30:	b292      	uxth	r2, r2
 8021e32:	b29b      	uxth	r3, r3
 8021e34:	f101 0801 	add.w	r8, r1, #1
 8021e38:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8021e3c:	f103 0e01 	add.w	lr, r3, #1
 8021e40:	f102 0801 	add.w	r8, r2, #1
 8021e44:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021e48:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8021e4c:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8021e50:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8021e54:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8021e58:	ea4e 0101 	orr.w	r1, lr, r1
 8021e5c:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021e60:	ea41 0108 	orr.w	r1, r1, r8
 8021e64:	f820 1b02 	strh.w	r1, [r0], #2
 8021e68:	e7b6      	b.n	8021dd8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8021e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021e6c:	881b      	ldrh	r3, [r3, #0]
 8021e6e:	1b9b      	subs	r3, r3, r6
 8021e70:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021e74:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021e78:	1b9b      	subs	r3, r3, r6
 8021e7a:	441c      	add	r4, r3
 8021e7c:	e7a6      	b.n	8021dcc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 8021e7e:	491e      	ldr	r1, [pc, #120]	; (8021ef8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 8021e80:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8021e84:	2203      	movs	r2, #3
 8021e86:	2504      	movs	r5, #4
 8021e88:	4550      	cmp	r0, sl
 8021e8a:	d228      	bcs.n	8021ede <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8021e8c:	eb00 0c09 	add.w	ip, r0, r9
 8021e90:	4560      	cmp	r0, ip
 8021e92:	4623      	mov	r3, r4
 8021e94:	d219      	bcs.n	8021eca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8021e96:	f893 e000 	ldrb.w	lr, [r3]
 8021e9a:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8021e9e:	eb07 0b0e 	add.w	fp, r7, lr
 8021ea2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021ea6:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8021eaa:	f89b b001 	ldrb.w	fp, [fp, #1]
 8021eae:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8021eb2:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8021eb6:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8021eba:	ea43 030b 	orr.w	r3, r3, fp
 8021ebe:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8021ec2:	3401      	adds	r4, #1
 8021ec4:	f820 3b02 	strh.w	r3, [r0], #2
 8021ec8:	e7e2      	b.n	8021e90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8021eca:	f8b8 3000 	ldrh.w	r3, [r8]
 8021ece:	1b9b      	subs	r3, r3, r6
 8021ed0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021ed4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021ed8:	1b9b      	subs	r3, r3, r6
 8021eda:	441c      	add	r4, r3
 8021edc:	e7d4      	b.n	8021e88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8021ede:	4b07      	ldr	r3, [pc, #28]	; (8021efc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 8021ee0:	6818      	ldr	r0, [r3, #0]
 8021ee2:	6803      	ldr	r3, [r0, #0]
 8021ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021ee6:	4798      	blx	r3
 8021ee8:	e750      	b.n	8021d8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8021eea:	bf00      	nop
 8021eec:	08031999 	.word	0x08031999
 8021ef0:	08032062 	.word	0x08032062
 8021ef4:	08031b1d 	.word	0x08031b1d
 8021ef8:	fffff800 	.word	0xfffff800
 8021efc:	200067d0 	.word	0x200067d0
 8021f00:	200067ca 	.word	0x200067ca

08021f04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8021f04:	b430      	push	{r4, r5}
 8021f06:	780d      	ldrb	r5, [r1, #0]
 8021f08:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8021f0c:	2d01      	cmp	r5, #1
 8021f0e:	d00a      	beq.n	8021f26 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8021f10:	d305      	bcc.n	8021f1e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8021f12:	2d02      	cmp	r5, #2
 8021f14:	d10b      	bne.n	8021f2e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8021f16:	9402      	str	r4, [sp, #8]
 8021f18:	bc30      	pop	{r4, r5}
 8021f1a:	f7ff bdf5 	b.w	8021b08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8021f1e:	9402      	str	r4, [sp, #8]
 8021f20:	bc30      	pop	{r4, r5}
 8021f22:	f7ff bcfb 	b.w	802191c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8021f26:	9402      	str	r4, [sp, #8]
 8021f28:	bc30      	pop	{r4, r5}
 8021f2a:	f7ff bec9 	b.w	8021cc0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8021f2e:	bc30      	pop	{r4, r5}
 8021f30:	4770      	bx	lr
	...

08021f34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8021f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f38:	4604      	mov	r4, r0
 8021f3a:	b087      	sub	sp, #28
 8021f3c:	6810      	ldr	r0, [r2, #0]
 8021f3e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8021f42:	f8df 9238 	ldr.w	r9, [pc, #568]	; 802217c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8021f46:	460e      	mov	r6, r1
 8021f48:	6851      	ldr	r1, [r2, #4]
 8021f4a:	ad02      	add	r5, sp, #8
 8021f4c:	c503      	stmia	r5!, {r0, r1}
 8021f4e:	6818      	ldr	r0, [r3, #0]
 8021f50:	6859      	ldr	r1, [r3, #4]
 8021f52:	ad04      	add	r5, sp, #16
 8021f54:	4617      	mov	r7, r2
 8021f56:	c503      	stmia	r5!, {r0, r1}
 8021f58:	a802      	add	r0, sp, #8
 8021f5a:	f7f8 fc7f 	bl	801a85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021f5e:	4639      	mov	r1, r7
 8021f60:	a804      	add	r0, sp, #16
 8021f62:	f7f8 fc63 	bl	801a82c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021f66:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021f6a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021f6e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8021f72:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021f76:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8021f7a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021f7e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8021f82:	440e      	add	r6, r1
 8021f84:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021f88:	440a      	add	r2, r1
 8021f8a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8021f8e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021f92:	4413      	add	r3, r2
 8021f94:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021f98:	4b77      	ldr	r3, [pc, #476]	; (8022178 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8021f9a:	6818      	ldr	r0, [r3, #0]
 8021f9c:	6803      	ldr	r3, [r0, #0]
 8021f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021fa0:	4798      	blx	r3
 8021fa2:	f8b9 b000 	ldrh.w	fp, [r9]
 8021fa6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021faa:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021fae:	fb0b 2303 	mla	r3, fp, r3, r2
 8021fb2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021fb6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021fba:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021fbe:	fb05 f50b 	mul.w	r5, r5, fp
 8021fc2:	9300      	str	r3, [sp, #0]
 8021fc4:	d069      	beq.n	802209a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8021fc6:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8021fca:	4558      	cmp	r0, fp
 8021fcc:	f080 80cc 	bcs.w	8022168 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021fd0:	9b00      	ldr	r3, [sp, #0]
 8021fd2:	18c3      	adds	r3, r0, r3
 8021fd4:	9301      	str	r3, [sp, #4]
 8021fd6:	4631      	mov	r1, r6
 8021fd8:	9b01      	ldr	r3, [sp, #4]
 8021fda:	4298      	cmp	r0, r3
 8021fdc:	d24f      	bcs.n	802207e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8021fde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021fe2:	2a00      	cmp	r2, #0
 8021fe4:	d048      	beq.n	8022078 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021fe6:	fb0a f202 	mul.w	r2, sl, r2
 8021fea:	1c53      	adds	r3, r2, #1
 8021fec:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021ff0:	121b      	asrs	r3, r3, #8
 8021ff2:	d041      	beq.n	8022078 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021ff4:	8802      	ldrh	r2, [r0, #0]
 8021ff6:	f8b4 c000 	ldrh.w	ip, [r4]
 8021ffa:	b29e      	uxth	r6, r3
 8021ffc:	1215      	asrs	r5, r2, #8
 8021ffe:	43db      	mvns	r3, r3
 8022000:	b2db      	uxtb	r3, r3
 8022002:	ea4f 272c 	mov.w	r7, ip, asr #8
 8022006:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802200a:	fb15 f503 	smulbb	r5, r5, r3
 802200e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8022012:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022016:	00d2      	lsls	r2, r2, #3
 8022018:	fb07 5706 	mla	r7, r7, r6, r5
 802201c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022020:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022024:	b2d2      	uxtb	r2, r2
 8022026:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802202a:	b2bf      	uxth	r7, r7
 802202c:	fb1e fe03 	smulbb	lr, lr, r3
 8022030:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022034:	fa5f fc8c 	uxtb.w	ip, ip
 8022038:	fb12 f203 	smulbb	r2, r2, r3
 802203c:	fb05 e506 	mla	r5, r5, r6, lr
 8022040:	fb0c 2c06 	mla	ip, ip, r6, r2
 8022044:	f107 0e01 	add.w	lr, r7, #1
 8022048:	fa1f fc8c 	uxth.w	ip, ip
 802204c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8022050:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8022054:	f10c 0701 	add.w	r7, ip, #1
 8022058:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802205c:	b2ad      	uxth	r5, r5
 802205e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022062:	ea47 070e 	orr.w	r7, r7, lr
 8022066:	f105 0e01 	add.w	lr, r5, #1
 802206a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 802206e:	096d      	lsrs	r5, r5, #5
 8022070:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022074:	432f      	orrs	r7, r5
 8022076:	8007      	strh	r7, [r0, #0]
 8022078:	3002      	adds	r0, #2
 802207a:	3402      	adds	r4, #2
 802207c:	e7ac      	b.n	8021fd8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 802207e:	f8b9 3000 	ldrh.w	r3, [r9]
 8022082:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022086:	eba3 0308 	sub.w	r3, r3, r8
 802208a:	eba6 0608 	sub.w	r6, r6, r8
 802208e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022092:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022096:	440e      	add	r6, r1
 8022098:	e797      	b.n	8021fca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 802209a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 802209e:	42a8      	cmp	r0, r5
 80220a0:	d262      	bcs.n	8022168 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80220a2:	9b00      	ldr	r3, [sp, #0]
 80220a4:	4631      	mov	r1, r6
 80220a6:	eb00 0b03 	add.w	fp, r0, r3
 80220aa:	4558      	cmp	r0, fp
 80220ac:	d24e      	bcs.n	802214c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80220ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80220b2:	b12b      	cbz	r3, 80220c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80220b4:	2bff      	cmp	r3, #255	; 0xff
 80220b6:	f8b4 e000 	ldrh.w	lr, [r4]
 80220ba:	d104      	bne.n	80220c6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 80220bc:	f8a0 e000 	strh.w	lr, [r0]
 80220c0:	3002      	adds	r0, #2
 80220c2:	3402      	adds	r4, #2
 80220c4:	e7f1      	b.n	80220aa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 80220c6:	8802      	ldrh	r2, [r0, #0]
 80220c8:	b29f      	uxth	r7, r3
 80220ca:	1216      	asrs	r6, r2, #8
 80220cc:	43db      	mvns	r3, r3
 80220ce:	b2db      	uxtb	r3, r3
 80220d0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80220d4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80220d8:	fb16 f603 	smulbb	r6, r6, r3
 80220dc:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 80220e0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80220e4:	00d2      	lsls	r2, r2, #3
 80220e6:	fb0c 6c07 	mla	ip, ip, r7, r6
 80220ea:	b2d2      	uxtb	r2, r2
 80220ec:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80220f0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80220f4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80220f8:	fb1a fa03 	smulbb	sl, sl, r3
 80220fc:	fa1f fc8c 	uxth.w	ip, ip
 8022100:	fb12 f303 	smulbb	r3, r2, r3
 8022104:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022108:	fa5f fe8e 	uxtb.w	lr, lr
 802210c:	fb06 a607 	mla	r6, r6, r7, sl
 8022110:	f10c 0201 	add.w	r2, ip, #1
 8022114:	fb0e 3307 	mla	r3, lr, r7, r3
 8022118:	b2b6      	uxth	r6, r6
 802211a:	b29b      	uxth	r3, r3
 802211c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022120:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8022124:	f106 0a01 	add.w	sl, r6, #1
 8022128:	f103 0c01 	add.w	ip, r3, #1
 802212c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022130:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8022134:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022138:	0976      	lsrs	r6, r6, #5
 802213a:	ea4c 0c02 	orr.w	ip, ip, r2
 802213e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022142:	ea4c 0c06 	orr.w	ip, ip, r6
 8022146:	f8a0 c000 	strh.w	ip, [r0]
 802214a:	e7b9      	b.n	80220c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 802214c:	f8b9 3000 	ldrh.w	r3, [r9]
 8022150:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022154:	eba3 0308 	sub.w	r3, r3, r8
 8022158:	eba6 0608 	sub.w	r6, r6, r8
 802215c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022160:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022164:	440e      	add	r6, r1
 8022166:	e79a      	b.n	802209e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8022168:	4b03      	ldr	r3, [pc, #12]	; (8022178 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 802216a:	6818      	ldr	r0, [r3, #0]
 802216c:	6803      	ldr	r3, [r0, #0]
 802216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022170:	4798      	blx	r3
 8022172:	b007      	add	sp, #28
 8022174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022178:	200067d0 	.word	0x200067d0
 802217c:	200067ca 	.word	0x200067ca

08022180 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022184:	b089      	sub	sp, #36	; 0x24
 8022186:	4682      	mov	sl, r0
 8022188:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 802218c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802218e:	4689      	mov	r9, r1
 8022190:	4690      	mov	r8, r2
 8022192:	461f      	mov	r7, r3
 8022194:	b355      	cbz	r5, 80221ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x6c>
 8022196:	4608      	mov	r0, r1
 8022198:	f7fc f92c 	bl	801e3f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802219c:	4606      	mov	r6, r0
 802219e:	4648      	mov	r0, r9
 80221a0:	f7fc f962 	bl	801e468 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80221a4:	f8ad 000e 	strh.w	r0, [sp, #14]
 80221a8:	4648      	mov	r0, r9
 80221aa:	f8ad 8008 	strh.w	r8, [sp, #8]
 80221ae:	f8ad 600c 	strh.w	r6, [sp, #12]
 80221b2:	f8ad 700a 	strh.w	r7, [sp, #10]
 80221b6:	f7fc fa25 	bl	801e604 <_ZNK8touchgfx6Bitmap7getDataEv>
 80221ba:	4606      	mov	r6, r0
 80221bc:	4648      	mov	r0, r9
 80221be:	f7fc fa53 	bl	801e668 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80221c2:	4680      	mov	r8, r0
 80221c4:	4648      	mov	r0, r9
 80221c6:	f7fc faa7 	bl	801e718 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80221ca:	280b      	cmp	r0, #11
 80221cc:	f200 80ca 	bhi.w	8022364 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e4>
 80221d0:	e8df f000 	tbb	[pc, r0]
 80221d4:	c8060f1e 	.word	0xc8060f1e
 80221d8:	c8c8c8c8 	.word	0xc8c8c8c8
 80221dc:	16c8c8c8 	.word	0x16c8c8c8
 80221e0:	462b      	mov	r3, r5
 80221e2:	4622      	mov	r2, r4
 80221e4:	a902      	add	r1, sp, #8
 80221e6:	4630      	mov	r0, r6
 80221e8:	f7ff f98e 	bl	8021508 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80221ec:	b009      	add	sp, #36	; 0x24
 80221ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221f2:	462b      	mov	r3, r5
 80221f4:	4622      	mov	r2, r4
 80221f6:	a902      	add	r1, sp, #8
 80221f8:	4630      	mov	r0, r6
 80221fa:	f7ff fa9b 	bl	8021734 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 80221fe:	e7f5      	b.n	80221ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x6c>
 8022200:	9500      	str	r5, [sp, #0]
 8022202:	4623      	mov	r3, r4
 8022204:	aa02      	add	r2, sp, #8
 8022206:	4641      	mov	r1, r8
 8022208:	4630      	mov	r0, r6
 802220a:	f7ff fe7b 	bl	8021f04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 802220e:	e7ed      	b.n	80221ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x6c>
 8022210:	4648      	mov	r0, r9
 8022212:	f7fc f9bd 	bl	801e590 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022216:	b950      	cbnz	r0, 802222e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 8022218:	e9cd 5000 	strd	r5, r0, [sp]
 802221c:	f8da 3000 	ldr.w	r3, [sl]
 8022220:	aa02      	add	r2, sp, #8
 8022222:	68dd      	ldr	r5, [r3, #12]
 8022224:	4631      	mov	r1, r6
 8022226:	4623      	mov	r3, r4
 8022228:	4650      	mov	r0, sl
 802222a:	47a8      	blx	r5
 802222c:	e7de      	b.n	80221ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x6c>
 802222e:	af06      	add	r7, sp, #24
 8022230:	4649      	mov	r1, r9
 8022232:	4638      	mov	r0, r7
 8022234:	f7fc f952 	bl	801e4dc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022238:	e897 0003 	ldmia.w	r7, {r0, r1}
 802223c:	f10d 0910 	add.w	r9, sp, #16
 8022240:	e889 0003 	stmia.w	r9, {r0, r1}
 8022244:	4648      	mov	r0, r9
 8022246:	4621      	mov	r1, r4
 8022248:	f7f3 fed2 	bl	8015ff0 <_ZN8touchgfx4RectaNERKS0_>
 802224c:	4648      	mov	r0, r9
 802224e:	f7f3 ff12 	bl	8016076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8022252:	b138      	cbz	r0, 8022264 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe4>
 8022254:	9500      	str	r5, [sp, #0]
 8022256:	4623      	mov	r3, r4
 8022258:	aa02      	add	r2, sp, #8
 802225a:	4641      	mov	r1, r8
 802225c:	4630      	mov	r0, r6
 802225e:	f7ff fe69 	bl	8021f34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022262:	e7c3      	b.n	80221ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x6c>
 8022264:	e9cd 5000 	strd	r5, r0, [sp]
 8022268:	f8da 3000 	ldr.w	r3, [sl]
 802226c:	aa02      	add	r2, sp, #8
 802226e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8022272:	4631      	mov	r1, r6
 8022274:	464b      	mov	r3, r9
 8022276:	4650      	mov	r0, sl
 8022278:	47d8      	blx	fp
 802227a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802227e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022282:	4293      	cmp	r3, r2
 8022284:	dd13      	ble.n	80222ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x12e>
 8022286:	f9b4 0000 	ldrsh.w	r0, [r4]
 802228a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802228e:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022292:	1a9b      	subs	r3, r3, r2
 8022294:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022298:	f8ad 101c 	strh.w	r1, [sp, #28]
 802229c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80222a0:	9500      	str	r5, [sp, #0]
 80222a2:	463b      	mov	r3, r7
 80222a4:	aa02      	add	r2, sp, #8
 80222a6:	4641      	mov	r1, r8
 80222a8:	4630      	mov	r0, r6
 80222aa:	f7ff fe43 	bl	8021f34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80222ae:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80222b2:	f9b4 2000 	ldrsh.w	r2, [r4]
 80222b6:	4293      	cmp	r3, r2
 80222b8:	dd13      	ble.n	80222e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x162>
 80222ba:	1a9b      	subs	r3, r3, r2
 80222bc:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80222c0:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80222c4:	f8ad 2018 	strh.w	r2, [sp, #24]
 80222c8:	f8ad 001a 	strh.w	r0, [sp, #26]
 80222cc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80222d0:	f8ad 101e 	strh.w	r1, [sp, #30]
 80222d4:	9500      	str	r5, [sp, #0]
 80222d6:	463b      	mov	r3, r7
 80222d8:	aa02      	add	r2, sp, #8
 80222da:	4641      	mov	r1, r8
 80222dc:	4630      	mov	r0, r6
 80222de:	f7ff fe29 	bl	8021f34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80222e2:	88a2      	ldrh	r2, [r4, #4]
 80222e4:	8823      	ldrh	r3, [r4, #0]
 80222e6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80222ea:	4413      	add	r3, r2
 80222ec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80222f0:	440a      	add	r2, r1
 80222f2:	b29b      	uxth	r3, r3
 80222f4:	b292      	uxth	r2, r2
 80222f6:	b211      	sxth	r1, r2
 80222f8:	b218      	sxth	r0, r3
 80222fa:	4288      	cmp	r0, r1
 80222fc:	dd13      	ble.n	8022326 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1a6>
 80222fe:	1a9b      	subs	r3, r3, r2
 8022300:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022304:	f9bd c012 	ldrsh.w	ip, [sp, #18]
 8022308:	f8ad 1018 	strh.w	r1, [sp, #24]
 802230c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022310:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022314:	9500      	str	r5, [sp, #0]
 8022316:	463b      	mov	r3, r7
 8022318:	aa02      	add	r2, sp, #8
 802231a:	4641      	mov	r1, r8
 802231c:	4630      	mov	r0, r6
 802231e:	f8ad c01a 	strh.w	ip, [sp, #26]
 8022322:	f7ff fe07 	bl	8021f34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022326:	88e2      	ldrh	r2, [r4, #6]
 8022328:	8863      	ldrh	r3, [r4, #2]
 802232a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 802232e:	4413      	add	r3, r2
 8022330:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022334:	440a      	add	r2, r1
 8022336:	b29b      	uxth	r3, r3
 8022338:	b292      	uxth	r2, r2
 802233a:	b211      	sxth	r1, r2
 802233c:	b218      	sxth	r0, r3
 802233e:	4288      	cmp	r0, r1
 8022340:	f77f af54 	ble.w	80221ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x6c>
 8022344:	f9b4 c000 	ldrsh.w	ip, [r4]
 8022348:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802234c:	f8ad c018 	strh.w	ip, [sp, #24]
 8022350:	1a9b      	subs	r3, r3, r2
 8022352:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022356:	f8ad 101a 	strh.w	r1, [sp, #26]
 802235a:	f8ad 001c 	strh.w	r0, [sp, #28]
 802235e:	9500      	str	r5, [sp, #0]
 8022360:	463b      	mov	r3, r7
 8022362:	e779      	b.n	8022258 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xd8>
 8022364:	4b02      	ldr	r3, [pc, #8]	; (8022370 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f0>)
 8022366:	4a03      	ldr	r2, [pc, #12]	; (8022374 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f4>)
 8022368:	4803      	ldr	r0, [pc, #12]	; (8022378 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 802236a:	2181      	movs	r1, #129	; 0x81
 802236c:	f00a f9bc 	bl	802c6e8 <__assert_func>
 8022370:	080319e7 	.word	0x080319e7
 8022374:	080320eb 	.word	0x080320eb
 8022378:	08031b1d 	.word	0x08031b1d

0802237c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 802237c:	b508      	push	{r3, lr}
 802237e:	b180      	cbz	r0, 80223a2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8022380:	2902      	cmp	r1, #2
 8022382:	d014      	beq.n	80223ae <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8022384:	2903      	cmp	r1, #3
 8022386:	d01d      	beq.n	80223c4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8022388:	2901      	cmp	r1, #1
 802238a:	d101      	bne.n	8022390 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 802238c:	2001      	movs	r0, #1
 802238e:	bd08      	pop	{r3, pc}
 8022390:	4b0e      	ldr	r3, [pc, #56]	; (80223cc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022392:	8818      	ldrh	r0, [r3, #0]
 8022394:	b990      	cbnz	r0, 80223bc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8022396:	4b0e      	ldr	r3, [pc, #56]	; (80223d0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8022398:	4a0e      	ldr	r2, [pc, #56]	; (80223d4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 802239a:	480f      	ldr	r0, [pc, #60]	; (80223d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 802239c:	2150      	movs	r1, #80	; 0x50
 802239e:	f00a f9a3 	bl	802c6e8 <__assert_func>
 80223a2:	2902      	cmp	r1, #2
 80223a4:	d00e      	beq.n	80223c4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 80223a6:	2903      	cmp	r1, #3
 80223a8:	d0f2      	beq.n	8022390 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 80223aa:	2901      	cmp	r1, #1
 80223ac:	d1ee      	bne.n	802238c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 80223ae:	4b07      	ldr	r3, [pc, #28]	; (80223cc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80223b0:	8818      	ldrh	r0, [r3, #0]
 80223b2:	2800      	cmp	r0, #0
 80223b4:	d0ef      	beq.n	8022396 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80223b6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80223ba:	e7e8      	b.n	802238e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80223bc:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80223c0:	4240      	negs	r0, r0
 80223c2:	e7e4      	b.n	802238e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80223c4:	f04f 30ff 	mov.w	r0, #4294967295
 80223c8:	e7e1      	b.n	802238e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80223ca:	bf00      	nop
 80223cc:	200067ca 	.word	0x200067ca
 80223d0:	08031c73 	.word	0x08031c73
 80223d4:	08032268 	.word	0x08032268
 80223d8:	08031cb5 	.word	0x08031cb5

080223dc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 80223dc:	b508      	push	{r3, lr}
 80223de:	b180      	cbz	r0, 8022402 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 80223e0:	2902      	cmp	r1, #2
 80223e2:	d014      	beq.n	802240e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 80223e4:	2903      	cmp	r1, #3
 80223e6:	d018      	beq.n	802241a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 80223e8:	2901      	cmp	r1, #1
 80223ea:	d001      	beq.n	80223f0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80223ec:	2001      	movs	r0, #1
 80223ee:	e013      	b.n	8022418 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80223f0:	4b0e      	ldr	r3, [pc, #56]	; (802242c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80223f2:	8818      	ldrh	r0, [r3, #0]
 80223f4:	b970      	cbnz	r0, 8022414 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 80223f6:	4b0e      	ldr	r3, [pc, #56]	; (8022430 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 80223f8:	4a0e      	ldr	r2, [pc, #56]	; (8022434 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 80223fa:	480f      	ldr	r0, [pc, #60]	; (8022438 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 80223fc:	2150      	movs	r1, #80	; 0x50
 80223fe:	f00a f973 	bl	802c6e8 <__assert_func>
 8022402:	2902      	cmp	r1, #2
 8022404:	d009      	beq.n	802241a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8022406:	2903      	cmp	r1, #3
 8022408:	d0f0      	beq.n	80223ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 802240a:	2901      	cmp	r1, #1
 802240c:	d1f0      	bne.n	80223f0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 802240e:	f04f 30ff 	mov.w	r0, #4294967295
 8022412:	e001      	b.n	8022418 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8022414:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022418:	bd08      	pop	{r3, pc}
 802241a:	4b04      	ldr	r3, [pc, #16]	; (802242c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 802241c:	8818      	ldrh	r0, [r3, #0]
 802241e:	2800      	cmp	r0, #0
 8022420:	d0e9      	beq.n	80223f6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8022422:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022426:	4240      	negs	r0, r0
 8022428:	e7f6      	b.n	8022418 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 802242a:	bf00      	nop
 802242c:	200067ca 	.word	0x200067ca
 8022430:	08031c73 	.word	0x08031c73
 8022434:	08032268 	.word	0x08032268
 8022438:	08031cb5 	.word	0x08031cb5

0802243c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 802243c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022440:	b097      	sub	sp, #92	; 0x5c
 8022442:	9109      	str	r1, [sp, #36]	; 0x24
 8022444:	a912      	add	r1, sp, #72	; 0x48
 8022446:	e881 000c 	stmia.w	r1, {r2, r3}
 802244a:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 802244e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8022452:	9308      	str	r3, [sp, #32]
 8022454:	f891 900d 	ldrb.w	r9, [r1, #13]
 8022458:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 802245c:	930f      	str	r3, [sp, #60]	; 0x3c
 802245e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8022462:	930a      	str	r3, [sp, #40]	; 0x28
 8022464:	7988      	ldrb	r0, [r1, #6]
 8022466:	f9bd 5080 	ldrsh.w	r5, [sp, #128]	; 0x80
 802246a:	f8bd 6088 	ldrh.w	r6, [sp, #136]	; 0x88
 802246e:	f8bd 708c 	ldrh.w	r7, [sp, #140]	; 0x8c
 8022472:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8022476:	f89d a0ac 	ldrb.w	sl, [sp, #172]	; 0xac
 802247a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 802247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022482:	4303      	orrs	r3, r0
 8022484:	9307      	str	r3, [sp, #28]
 8022486:	f000 81b3 	beq.w	80227f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 802248a:	ea4f 1909 	mov.w	r9, r9, lsl #4
 802248e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8022492:	f891 9007 	ldrb.w	r9, [r1, #7]
 8022496:	ea59 0903 	orrs.w	r9, r9, r3
 802249a:	f000 81a9 	beq.w	80227f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 802249e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80224a2:	b29b      	uxth	r3, r3
 80224a4:	2e00      	cmp	r6, #0
 80224a6:	f000 8137 	beq.w	8022718 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 80224aa:	1af6      	subs	r6, r6, r3
 80224ac:	b2b6      	uxth	r6, r6
 80224ae:	0434      	lsls	r4, r6, #16
 80224b0:	d502      	bpl.n	80224b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 80224b2:	1bad      	subs	r5, r5, r6
 80224b4:	b22d      	sxth	r5, r5
 80224b6:	2600      	movs	r6, #0
 80224b8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80224bc:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80224c0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 80224c4:	428d      	cmp	r5, r1
 80224c6:	b28b      	uxth	r3, r1
 80224c8:	bfbf      	itttt	lt
 80224ca:	18f6      	addlt	r6, r6, r3
 80224cc:	1b75      	sublt	r5, r6, r5
 80224ce:	b2ae      	uxthlt	r6, r5
 80224d0:	460d      	movlt	r5, r1
 80224d2:	8891      	ldrh	r1, [r2, #4]
 80224d4:	440b      	add	r3, r1
 80224d6:	b21b      	sxth	r3, r3
 80224d8:	930e      	str	r3, [sp, #56]	; 0x38
 80224da:	88d3      	ldrh	r3, [r2, #6]
 80224dc:	8852      	ldrh	r2, [r2, #2]
 80224de:	4413      	add	r3, r2
 80224e0:	b21b      	sxth	r3, r3
 80224e2:	930d      	str	r3, [sp, #52]	; 0x34
 80224e4:	4b8e      	ldr	r3, [pc, #568]	; (8022720 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>)
 80224e6:	9a08      	ldr	r2, [sp, #32]
 80224e8:	f893 b000 	ldrb.w	fp, [r3]
 80224ec:	f10b 30ff 	add.w	r0, fp, #4294967295
 80224f0:	4243      	negs	r3, r0
 80224f2:	4143      	adcs	r3, r0
 80224f4:	930c      	str	r3, [sp, #48]	; 0x30
 80224f6:	4629      	mov	r1, r5
 80224f8:	4653      	mov	r3, sl
 80224fa:	a812      	add	r0, sp, #72	; 0x48
 80224fc:	f7f7 ffea 	bl	801a4d4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8022500:	4629      	mov	r1, r5
 8022502:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8022506:	4653      	mov	r3, sl
 8022508:	9a08      	ldr	r2, [sp, #32]
 802250a:	a812      	add	r0, sp, #72	; 0x48
 802250c:	f7f7 fffa 	bl	801a504 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022510:	a916      	add	r1, sp, #88	; 0x58
 8022512:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8022516:	a815      	add	r0, sp, #84	; 0x54
 8022518:	f7f8 f956 	bl	801a7c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802251c:	f1ba 0f00 	cmp.w	sl, #0
 8022520:	f040 8106 	bne.w	8022730 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f4>
 8022524:	f1bb 0f01 	cmp.w	fp, #1
 8022528:	f040 810a 	bne.w	8022740 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 802252c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802252e:	b153      	cbz	r3, 8022546 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8022530:	9a07      	ldr	r2, [sp, #28]
 8022532:	2408      	movs	r4, #8
 8022534:	fb94 f3f8 	sdiv	r3, r4, r8
 8022538:	1e5c      	subs	r4, r3, #1
 802253a:	4414      	add	r4, r2
 802253c:	fb94 f4f3 	sdiv	r4, r4, r3
 8022540:	fb14 f403 	smulbb	r4, r4, r3
 8022544:	b2a4      	uxth	r4, r4
 8022546:	b906      	cbnz	r6, 802254a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8022548:	b16f      	cbz	r7, 8022566 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 802254a:	fb07 6304 	mla	r3, r7, r4, r6
 802254e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8022550:	fb08 f303 	mul.w	r3, r8, r3
 8022554:	463a      	mov	r2, r7
 8022556:	f003 0707 	and.w	r7, r3, #7
 802255a:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 802255e:	9326      	str	r3, [sp, #152]	; 0x98
 8022560:	eba9 0302 	sub.w	r3, r9, r2
 8022564:	930b      	str	r3, [sp, #44]	; 0x2c
 8022566:	4651      	mov	r1, sl
 8022568:	980c      	ldr	r0, [sp, #48]	; 0x30
 802256a:	f7ff ff07 	bl	802237c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 802256e:	4651      	mov	r1, sl
 8022570:	4681      	mov	r9, r0
 8022572:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022574:	f7ff ff32 	bl	80223dc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8022578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802257a:	9a08      	ldr	r2, [sp, #32]
 802257c:	eba3 0a02 	sub.w	sl, r3, r2
 8022580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022582:	459a      	cmp	sl, r3
 8022584:	bfa8      	it	ge
 8022586:	469a      	movge	sl, r3
 8022588:	f1ba 0f00 	cmp.w	sl, #0
 802258c:	4683      	mov	fp, r0
 802258e:	f340 812f 	ble.w	80227f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 8022592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022594:	1bad      	subs	r5, r5, r6
 8022596:	1b5d      	subs	r5, r3, r5
 8022598:	9b07      	ldr	r3, [sp, #28]
 802259a:	429d      	cmp	r5, r3
 802259c:	bfd4      	ite	le
 802259e:	ebc6 0605 	rsble	r6, r6, r5
 80225a2:	ebc6 0603 	rsbgt	r6, r6, r3
 80225a6:	2e00      	cmp	r6, #0
 80225a8:	f340 8122 	ble.w	80227f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 80225ac:	1ba4      	subs	r4, r4, r6
 80225ae:	fb08 f304 	mul.w	r3, r8, r4
 80225b2:	930d      	str	r3, [sp, #52]	; 0x34
 80225b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225b6:	2b00      	cmp	r3, #0
 80225b8:	f040 811f 	bne.w	80227fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3be>
 80225bc:	4b59      	ldr	r3, [pc, #356]	; (8022724 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>)
 80225be:	6818      	ldr	r0, [r3, #0]
 80225c0:	6803      	ldr	r3, [r0, #0]
 80225c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80225c4:	4798      	blx	r3
 80225c6:	2301      	movs	r3, #1
 80225c8:	fa03 f308 	lsl.w	r3, r3, r8
 80225cc:	4a56      	ldr	r2, [pc, #344]	; (8022728 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>)
 80225ce:	3b01      	subs	r3, #1
 80225d0:	b2db      	uxtb	r3, r3
 80225d2:	8811      	ldrh	r1, [r2, #0]
 80225d4:	930c      	str	r3, [sp, #48]	; 0x30
 80225d6:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80225da:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80225de:	fb01 2303 	mla	r3, r1, r3, r2
 80225e2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80225e6:	9308      	str	r3, [sp, #32]
 80225e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80225ea:	0c1a      	lsrs	r2, r3, #16
 80225ec:	b2d3      	uxtb	r3, r2
 80225ee:	9311      	str	r3, [sp, #68]	; 0x44
 80225f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80225f2:	0a1b      	lsrs	r3, r3, #8
 80225f4:	b2d9      	uxtb	r1, r3
 80225f6:	9110      	str	r1, [sp, #64]	; 0x40
 80225f8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80225fa:	b2c9      	uxtb	r1, r1
 80225fc:	910e      	str	r1, [sp, #56]	; 0x38
 80225fe:	494b      	ldr	r1, [pc, #300]	; (802272c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f0>)
 8022600:	ea01 2202 	and.w	r2, r1, r2, lsl #8
 8022604:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022606:	00db      	lsls	r3, r3, #3
 8022608:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802260c:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8022610:	431a      	orrs	r2, r3
 8022612:	b293      	uxth	r3, r2
 8022614:	930f      	str	r3, [sp, #60]	; 0x3c
 8022616:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022618:	781a      	ldrb	r2, [r3, #0]
 802261a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 802261e:	413a      	asrs	r2, r7
 8022620:	fb06 b919 	mls	r9, r6, r9, fp
 8022624:	fb03 fb06 	mul.w	fp, r3, r6
 8022628:	b2d2      	uxtb	r2, r2
 802262a:	930b      	str	r3, [sp, #44]	; 0x2c
 802262c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8022630:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8022634:	f0c0 80f6 	bcc.w	8022824 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8022638:	f8dd c020 	ldr.w	ip, [sp, #32]
 802263c:	46b6      	mov	lr, r6
 802263e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8022642:	f0c0 80de 	bcc.w	8022802 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 8022646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022648:	4013      	ands	r3, r2
 802264a:	d055      	beq.n	80226f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2bc>
 802264c:	20ff      	movs	r0, #255	; 0xff
 802264e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022650:	fb90 f1f1 	sdiv	r1, r0, r1
 8022654:	434b      	muls	r3, r1
 8022656:	2bfe      	cmp	r3, #254	; 0xfe
 8022658:	dd03      	ble.n	8022662 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x226>
 802265a:	990a      	ldr	r1, [sp, #40]	; 0x28
 802265c:	4281      	cmp	r1, r0
 802265e:	f000 80ce 	beq.w	80227fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c2>
 8022662:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022664:	f8bc 4000 	ldrh.w	r4, [ip]
 8022668:	fb11 f303 	smulbb	r3, r1, r3
 802266c:	b29b      	uxth	r3, r3
 802266e:	1c59      	adds	r1, r3, #1
 8022670:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022674:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022678:	b29d      	uxth	r5, r3
 802267a:	43db      	mvns	r3, r3
 802267c:	b2db      	uxtb	r3, r3
 802267e:	9307      	str	r3, [sp, #28]
 8022680:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022682:	1220      	asrs	r0, r4, #8
 8022684:	fb13 f905 	smulbb	r9, r3, r5
 8022688:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802268c:	9b07      	ldr	r3, [sp, #28]
 802268e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8022692:	fb00 9003 	mla	r0, r0, r3, r9
 8022696:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022698:	10e1      	asrs	r1, r4, #3
 802269a:	fb13 f905 	smulbb	r9, r3, r5
 802269e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80226a2:	9b07      	ldr	r3, [sp, #28]
 80226a4:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80226a8:	fb01 9103 	mla	r1, r1, r3, r9
 80226ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80226ae:	00e4      	lsls	r4, r4, #3
 80226b0:	fb13 f505 	smulbb	r5, r3, r5
 80226b4:	b2e4      	uxtb	r4, r4
 80226b6:	9b07      	ldr	r3, [sp, #28]
 80226b8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80226bc:	fb04 5403 	mla	r4, r4, r3, r5
 80226c0:	b280      	uxth	r0, r0
 80226c2:	b2a4      	uxth	r4, r4
 80226c4:	1c43      	adds	r3, r0, #1
 80226c6:	f104 0901 	add.w	r9, r4, #1
 80226ca:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80226ce:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 80226d2:	b289      	uxth	r1, r1
 80226d4:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 80226d8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80226dc:	ea49 0000 	orr.w	r0, r9, r0
 80226e0:	f101 0901 	add.w	r9, r1, #1
 80226e4:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 80226e8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80226ec:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80226f0:	ea40 0009 	orr.w	r0, r0, r9
 80226f4:	f8ac 0000 	strh.w	r0, [ip]
 80226f8:	4447      	add	r7, r8
 80226fa:	b2bf      	uxth	r7, r7
 80226fc:	2f07      	cmp	r7, #7
 80226fe:	bf81      	itttt	hi
 8022700:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8022702:	785a      	ldrbhi	r2, [r3, #1]
 8022704:	3301      	addhi	r3, #1
 8022706:	9326      	strhi	r3, [sp, #152]	; 0x98
 8022708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802270a:	bf9a      	itte	ls
 802270c:	fa42 f208 	asrls.w	r2, r2, r8
 8022710:	b2d2      	uxtbls	r2, r2
 8022712:	2700      	movhi	r7, #0
 8022714:	449c      	add	ip, r3
 8022716:	e792      	b.n	802263e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x202>
 8022718:	441d      	add	r5, r3
 802271a:	b22d      	sxth	r5, r5
 802271c:	e6cc      	b.n	80224b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 802271e:	bf00      	nop
 8022720:	200067c8 	.word	0x200067c8
 8022724:	200067d0 	.word	0x200067d0
 8022728:	200067ca 	.word	0x200067ca
 802272c:	fffff800 	.word	0xfffff800
 8022730:	f1ba 0f01 	cmp.w	sl, #1
 8022734:	f47f aefa 	bne.w	802252c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022738:	f1bb 0f01 	cmp.w	fp, #1
 802273c:	f47f aef6 	bne.w	802252c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022740:	f8df b104 	ldr.w	fp, [pc, #260]	; 8022848 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x40c>
 8022744:	f8db 0000 	ldr.w	r0, [fp]
 8022748:	6803      	ldr	r3, [r0, #0]
 802274a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802274c:	4798      	blx	r3
 802274e:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8022752:	465a      	mov	r2, fp
 8022754:	d006      	beq.n	8022764 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x328>
 8022756:	f1b8 0f04 	cmp.w	r8, #4
 802275a:	d14c      	bne.n	80227f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ba>
 802275c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802275e:	3300      	adds	r3, #0
 8022760:	bf18      	it	ne
 8022762:	2301      	movne	r3, #1
 8022764:	0581      	lsls	r1, r0, #22
 8022766:	d566      	bpl.n	8022836 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3fa>
 8022768:	f1b8 0f08 	cmp.w	r8, #8
 802276c:	d163      	bne.n	8022836 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3fa>
 802276e:	2b00      	cmp	r3, #0
 8022770:	bf0c      	ite	eq
 8022772:	f44f 7c00 	moveq.w	ip, #512	; 0x200
 8022776:	f44f 7c80 	movne.w	ip, #256	; 0x100
 802277a:	2e00      	cmp	r6, #0
 802277c:	f47f aed6 	bne.w	802252c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022780:	2f00      	cmp	r7, #0
 8022782:	f47f aed3 	bne.w	802252c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022786:	9b07      	ldr	r3, [sp, #28]
 8022788:	990e      	ldr	r1, [sp, #56]	; 0x38
 802278a:	18eb      	adds	r3, r5, r3
 802278c:	428b      	cmp	r3, r1
 802278e:	f73f aecd 	bgt.w	802252c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022792:	9b08      	ldr	r3, [sp, #32]
 8022794:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022796:	444b      	add	r3, r9
 8022798:	428b      	cmp	r3, r1
 802279a:	f73f aec7 	bgt.w	802252c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802279e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80227a0:	4e28      	ldr	r6, [pc, #160]	; (8022844 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x408>)
 80227a2:	6810      	ldr	r0, [r2, #0]
 80227a4:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80227a8:	6803      	ldr	r3, [r0, #0]
 80227aa:	ea06 2611 	and.w	r6, r6, r1, lsr #8
 80227ae:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80227b2:	4331      	orrs	r1, r6
 80227b4:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80227b6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80227b8:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80227bc:	f8cd c014 	str.w	ip, [sp, #20]
 80227c0:	f1b8 0f08 	cmp.w	r8, #8
 80227c4:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80227c8:	bf18      	it	ne
 80227ca:	3401      	addne	r4, #1
 80227cc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80227d0:	bf18      	it	ne
 80227d2:	f024 0401 	bicne.w	r4, r4, #1
 80227d6:	ea41 0106 	orr.w	r1, r1, r6
 80227da:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80227dc:	bf18      	it	ne
 80227de:	b2a4      	uxthne	r4, r4
 80227e0:	b289      	uxth	r1, r1
 80227e2:	e9cd 1603 	strd	r1, r6, [sp, #12]
 80227e6:	e9cd 9401 	strd	r9, r4, [sp, #4]
 80227ea:	9400      	str	r4, [sp, #0]
 80227ec:	9926      	ldr	r1, [sp, #152]	; 0x98
 80227ee:	47a8      	blx	r5
 80227f0:	b017      	add	sp, #92	; 0x5c
 80227f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227f6:	2300      	movs	r3, #0
 80227f8:	e7b4      	b.n	8022764 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x328>
 80227fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80227fc:	e6e3      	b.n	80225c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18a>
 80227fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022800:	e778      	b.n	80226f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b8>
 8022802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022804:	b153      	cbz	r3, 802281c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 8022806:	441f      	add	r7, r3
 8022808:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802280a:	b2bf      	uxth	r7, r7
 802280c:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8022810:	f007 0707 	and.w	r7, r7, #7
 8022814:	781a      	ldrb	r2, [r3, #0]
 8022816:	9326      	str	r3, [sp, #152]	; 0x98
 8022818:	413a      	asrs	r2, r7
 802281a:	b2d2      	uxtb	r2, r2
 802281c:	9b08      	ldr	r3, [sp, #32]
 802281e:	445b      	add	r3, fp
 8022820:	9308      	str	r3, [sp, #32]
 8022822:	e705      	b.n	8022630 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f4>
 8022824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022826:	2b00      	cmp	r3, #0
 8022828:	d1e2      	bne.n	80227f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 802282a:	4b07      	ldr	r3, [pc, #28]	; (8022848 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x40c>)
 802282c:	6818      	ldr	r0, [r3, #0]
 802282e:	6803      	ldr	r3, [r0, #0]
 8022830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022832:	4798      	blx	r3
 8022834:	e7dc      	b.n	80227f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 8022836:	2b00      	cmp	r3, #0
 8022838:	f43f ae78 	beq.w	802252c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802283c:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8022840:	e79b      	b.n	802277a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 8022842:	bf00      	nop
 8022844:	fffff800 	.word	0xfffff800
 8022848:	200067d0 	.word	0x200067d0

0802284c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 802284c:	b538      	push	{r3, r4, r5, lr}
 802284e:	4c15      	ldr	r4, [pc, #84]	; (80228a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8022850:	7823      	ldrb	r3, [r4, #0]
 8022852:	f3bf 8f5b 	dmb	ish
 8022856:	07da      	lsls	r2, r3, #31
 8022858:	4605      	mov	r5, r0
 802285a:	d40b      	bmi.n	8022874 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 802285c:	4620      	mov	r0, r4
 802285e:	f009 f926 	bl	802baae <__cxa_guard_acquire>
 8022862:	b138      	cbz	r0, 8022874 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8022864:	4620      	mov	r0, r4
 8022866:	f009 f92e 	bl	802bac6 <__cxa_guard_release>
 802286a:	4a0f      	ldr	r2, [pc, #60]	; (80228a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 802286c:	490f      	ldr	r1, [pc, #60]	; (80228ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 802286e:	4810      	ldr	r0, [pc, #64]	; (80228b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8022870:	f009 f916 	bl	802baa0 <__aeabi_atexit>
 8022874:	4c0f      	ldr	r4, [pc, #60]	; (80228b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8022876:	7823      	ldrb	r3, [r4, #0]
 8022878:	f3bf 8f5b 	dmb	ish
 802287c:	07db      	lsls	r3, r3, #31
 802287e:	d40b      	bmi.n	8022898 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022880:	4620      	mov	r0, r4
 8022882:	f009 f914 	bl	802baae <__cxa_guard_acquire>
 8022886:	b138      	cbz	r0, 8022898 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022888:	4620      	mov	r0, r4
 802288a:	f009 f91c 	bl	802bac6 <__cxa_guard_release>
 802288e:	4a06      	ldr	r2, [pc, #24]	; (80228a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022890:	4909      	ldr	r1, [pc, #36]	; (80228b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8022892:	480a      	ldr	r0, [pc, #40]	; (80228bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022894:	f009 f904 	bl	802baa0 <__aeabi_atexit>
 8022898:	4b05      	ldr	r3, [pc, #20]	; (80228b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 802289a:	612b      	str	r3, [r5, #16]
 802289c:	4b07      	ldr	r3, [pc, #28]	; (80228bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 802289e:	616b      	str	r3, [r5, #20]
 80228a0:	bd38      	pop	{r3, r4, r5, pc}
 80228a2:	bf00      	nop
 80228a4:	2000689c 	.word	0x2000689c
 80228a8:	20000000 	.word	0x20000000
 80228ac:	08020c6b 	.word	0x08020c6b
 80228b0:	20000060 	.word	0x20000060
 80228b4:	200068a0 	.word	0x200068a0
 80228b8:	08020c69 	.word	0x08020c69
 80228bc:	20000064 	.word	0x20000064

080228c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 80228c0:	b538      	push	{r3, r4, r5, lr}
 80228c2:	4c15      	ldr	r4, [pc, #84]	; (8022918 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80228c4:	7823      	ldrb	r3, [r4, #0]
 80228c6:	f3bf 8f5b 	dmb	ish
 80228ca:	07da      	lsls	r2, r3, #31
 80228cc:	4605      	mov	r5, r0
 80228ce:	d40b      	bmi.n	80228e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80228d0:	4620      	mov	r0, r4
 80228d2:	f009 f8ec 	bl	802baae <__cxa_guard_acquire>
 80228d6:	b138      	cbz	r0, 80228e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80228d8:	4620      	mov	r0, r4
 80228da:	f009 f8f4 	bl	802bac6 <__cxa_guard_release>
 80228de:	4a0f      	ldr	r2, [pc, #60]	; (802291c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80228e0:	490f      	ldr	r1, [pc, #60]	; (8022920 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80228e2:	4810      	ldr	r0, [pc, #64]	; (8022924 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80228e4:	f009 f8dc 	bl	802baa0 <__aeabi_atexit>
 80228e8:	4c0f      	ldr	r4, [pc, #60]	; (8022928 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80228ea:	7823      	ldrb	r3, [r4, #0]
 80228ec:	f3bf 8f5b 	dmb	ish
 80228f0:	07db      	lsls	r3, r3, #31
 80228f2:	d40b      	bmi.n	802290c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80228f4:	4620      	mov	r0, r4
 80228f6:	f009 f8da 	bl	802baae <__cxa_guard_acquire>
 80228fa:	b138      	cbz	r0, 802290c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80228fc:	4620      	mov	r0, r4
 80228fe:	f009 f8e2 	bl	802bac6 <__cxa_guard_release>
 8022902:	4a06      	ldr	r2, [pc, #24]	; (802291c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8022904:	4909      	ldr	r1, [pc, #36]	; (802292c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8022906:	480a      	ldr	r0, [pc, #40]	; (8022930 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8022908:	f009 f8ca 	bl	802baa0 <__aeabi_atexit>
 802290c:	4b05      	ldr	r3, [pc, #20]	; (8022924 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 802290e:	60ab      	str	r3, [r5, #8]
 8022910:	4b07      	ldr	r3, [pc, #28]	; (8022930 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8022912:	60eb      	str	r3, [r5, #12]
 8022914:	bd38      	pop	{r3, r4, r5, pc}
 8022916:	bf00      	nop
 8022918:	20006874 	.word	0x20006874
 802291c:	20000000 	.word	0x20000000
 8022920:	08020c6f 	.word	0x08020c6f
 8022924:	20000038 	.word	0x20000038
 8022928:	20006878 	.word	0x20006878
 802292c:	08020c6d 	.word	0x08020c6d
 8022930:	2000003c 	.word	0x2000003c

08022934 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8022934:	b510      	push	{r4, lr}
 8022936:	4604      	mov	r4, r0
 8022938:	f7ff ff88 	bl	802284c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 802293c:	4620      	mov	r0, r4
 802293e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022942:	f7ff bfbd 	b.w	80228c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08022948 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8022948:	b538      	push	{r3, r4, r5, lr}
 802294a:	4c15      	ldr	r4, [pc, #84]	; (80229a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 802294c:	7823      	ldrb	r3, [r4, #0]
 802294e:	f3bf 8f5b 	dmb	ish
 8022952:	07da      	lsls	r2, r3, #31
 8022954:	4605      	mov	r5, r0
 8022956:	d40b      	bmi.n	8022970 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022958:	4620      	mov	r0, r4
 802295a:	f009 f8a8 	bl	802baae <__cxa_guard_acquire>
 802295e:	b138      	cbz	r0, 8022970 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022960:	4620      	mov	r0, r4
 8022962:	f009 f8b0 	bl	802bac6 <__cxa_guard_release>
 8022966:	4a0f      	ldr	r2, [pc, #60]	; (80229a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022968:	490f      	ldr	r1, [pc, #60]	; (80229a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802296a:	4810      	ldr	r0, [pc, #64]	; (80229ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802296c:	f009 f898 	bl	802baa0 <__aeabi_atexit>
 8022970:	4c0f      	ldr	r4, [pc, #60]	; (80229b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8022972:	7823      	ldrb	r3, [r4, #0]
 8022974:	f3bf 8f5b 	dmb	ish
 8022978:	07db      	lsls	r3, r3, #31
 802297a:	d40b      	bmi.n	8022994 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 802297c:	4620      	mov	r0, r4
 802297e:	f009 f896 	bl	802baae <__cxa_guard_acquire>
 8022982:	b138      	cbz	r0, 8022994 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022984:	4620      	mov	r0, r4
 8022986:	f009 f89e 	bl	802bac6 <__cxa_guard_release>
 802298a:	4a06      	ldr	r2, [pc, #24]	; (80229a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802298c:	4909      	ldr	r1, [pc, #36]	; (80229b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802298e:	480a      	ldr	r0, [pc, #40]	; (80229b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022990:	f009 f886 	bl	802baa0 <__aeabi_atexit>
 8022994:	4b05      	ldr	r3, [pc, #20]	; (80229ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022996:	622b      	str	r3, [r5, #32]
 8022998:	4b07      	ldr	r3, [pc, #28]	; (80229b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802299a:	626b      	str	r3, [r5, #36]	; 0x24
 802299c:	bd38      	pop	{r3, r4, r5, pc}
 802299e:	bf00      	nop
 80229a0:	200068a4 	.word	0x200068a4
 80229a4:	20000000 	.word	0x20000000
 80229a8:	08020c63 	.word	0x08020c63
 80229ac:	20000068 	.word	0x20000068
 80229b0:	200068a8 	.word	0x200068a8
 80229b4:	08020c61 	.word	0x08020c61
 80229b8:	2000006c 	.word	0x2000006c

080229bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80229bc:	b538      	push	{r3, r4, r5, lr}
 80229be:	4c15      	ldr	r4, [pc, #84]	; (8022a14 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80229c0:	7823      	ldrb	r3, [r4, #0]
 80229c2:	f3bf 8f5b 	dmb	ish
 80229c6:	07da      	lsls	r2, r3, #31
 80229c8:	4605      	mov	r5, r0
 80229ca:	d40b      	bmi.n	80229e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80229cc:	4620      	mov	r0, r4
 80229ce:	f009 f86e 	bl	802baae <__cxa_guard_acquire>
 80229d2:	b138      	cbz	r0, 80229e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80229d4:	4620      	mov	r0, r4
 80229d6:	f009 f876 	bl	802bac6 <__cxa_guard_release>
 80229da:	4a0f      	ldr	r2, [pc, #60]	; (8022a18 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80229dc:	490f      	ldr	r1, [pc, #60]	; (8022a1c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80229de:	4810      	ldr	r0, [pc, #64]	; (8022a20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80229e0:	f009 f85e 	bl	802baa0 <__aeabi_atexit>
 80229e4:	4c0f      	ldr	r4, [pc, #60]	; (8022a24 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80229e6:	7823      	ldrb	r3, [r4, #0]
 80229e8:	f3bf 8f5b 	dmb	ish
 80229ec:	07db      	lsls	r3, r3, #31
 80229ee:	d40b      	bmi.n	8022a08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80229f0:	4620      	mov	r0, r4
 80229f2:	f009 f85c 	bl	802baae <__cxa_guard_acquire>
 80229f6:	b138      	cbz	r0, 8022a08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80229f8:	4620      	mov	r0, r4
 80229fa:	f009 f864 	bl	802bac6 <__cxa_guard_release>
 80229fe:	4a06      	ldr	r2, [pc, #24]	; (8022a18 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022a00:	4909      	ldr	r1, [pc, #36]	; (8022a28 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8022a02:	480a      	ldr	r0, [pc, #40]	; (8022a2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022a04:	f009 f84c 	bl	802baa0 <__aeabi_atexit>
 8022a08:	4b05      	ldr	r3, [pc, #20]	; (8022a20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022a0a:	61ab      	str	r3, [r5, #24]
 8022a0c:	4b07      	ldr	r3, [pc, #28]	; (8022a2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022a0e:	61eb      	str	r3, [r5, #28]
 8022a10:	bd38      	pop	{r3, r4, r5, pc}
 8022a12:	bf00      	nop
 8022a14:	2000687c 	.word	0x2000687c
 8022a18:	20000000 	.word	0x20000000
 8022a1c:	08020c67 	.word	0x08020c67
 8022a20:	20000040 	.word	0x20000040
 8022a24:	20006880 	.word	0x20006880
 8022a28:	08020c65 	.word	0x08020c65
 8022a2c:	20000044 	.word	0x20000044

08022a30 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8022a30:	b510      	push	{r4, lr}
 8022a32:	4604      	mov	r4, r0
 8022a34:	f7ff ff88 	bl	8022948 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8022a38:	4620      	mov	r0, r4
 8022a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022a3e:	f7ff bfbd 	b.w	80229bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08022a44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8022a44:	b538      	push	{r3, r4, r5, lr}
 8022a46:	4c15      	ldr	r4, [pc, #84]	; (8022a9c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8022a48:	7823      	ldrb	r3, [r4, #0]
 8022a4a:	f3bf 8f5b 	dmb	ish
 8022a4e:	07da      	lsls	r2, r3, #31
 8022a50:	4605      	mov	r5, r0
 8022a52:	d40b      	bmi.n	8022a6c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022a54:	4620      	mov	r0, r4
 8022a56:	f009 f82a 	bl	802baae <__cxa_guard_acquire>
 8022a5a:	b138      	cbz	r0, 8022a6c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022a5c:	4620      	mov	r0, r4
 8022a5e:	f009 f832 	bl	802bac6 <__cxa_guard_release>
 8022a62:	4a0f      	ldr	r2, [pc, #60]	; (8022aa0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022a64:	490f      	ldr	r1, [pc, #60]	; (8022aa4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8022a66:	4810      	ldr	r0, [pc, #64]	; (8022aa8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022a68:	f009 f81a 	bl	802baa0 <__aeabi_atexit>
 8022a6c:	4c0f      	ldr	r4, [pc, #60]	; (8022aac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8022a6e:	7823      	ldrb	r3, [r4, #0]
 8022a70:	f3bf 8f5b 	dmb	ish
 8022a74:	07db      	lsls	r3, r3, #31
 8022a76:	d40b      	bmi.n	8022a90 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022a78:	4620      	mov	r0, r4
 8022a7a:	f009 f818 	bl	802baae <__cxa_guard_acquire>
 8022a7e:	b138      	cbz	r0, 8022a90 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022a80:	4620      	mov	r0, r4
 8022a82:	f009 f820 	bl	802bac6 <__cxa_guard_release>
 8022a86:	4a06      	ldr	r2, [pc, #24]	; (8022aa0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022a88:	4909      	ldr	r1, [pc, #36]	; (8022ab0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8022a8a:	480a      	ldr	r0, [pc, #40]	; (8022ab4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022a8c:	f009 f808 	bl	802baa0 <__aeabi_atexit>
 8022a90:	4b05      	ldr	r3, [pc, #20]	; (8022aa8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022a92:	632b      	str	r3, [r5, #48]	; 0x30
 8022a94:	4b07      	ldr	r3, [pc, #28]	; (8022ab4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022a96:	636b      	str	r3, [r5, #52]	; 0x34
 8022a98:	bd38      	pop	{r3, r4, r5, pc}
 8022a9a:	bf00      	nop
 8022a9c:	200068b4 	.word	0x200068b4
 8022aa0:	20000000 	.word	0x20000000
 8022aa4:	08020c5b 	.word	0x08020c5b
 8022aa8:	20000078 	.word	0x20000078
 8022aac:	200068b8 	.word	0x200068b8
 8022ab0:	08020c59 	.word	0x08020c59
 8022ab4:	2000007c 	.word	0x2000007c

08022ab8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8022ab8:	b538      	push	{r3, r4, r5, lr}
 8022aba:	4c15      	ldr	r4, [pc, #84]	; (8022b10 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8022abc:	7823      	ldrb	r3, [r4, #0]
 8022abe:	f3bf 8f5b 	dmb	ish
 8022ac2:	07da      	lsls	r2, r3, #31
 8022ac4:	4605      	mov	r5, r0
 8022ac6:	d40b      	bmi.n	8022ae0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022ac8:	4620      	mov	r0, r4
 8022aca:	f008 fff0 	bl	802baae <__cxa_guard_acquire>
 8022ace:	b138      	cbz	r0, 8022ae0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022ad0:	4620      	mov	r0, r4
 8022ad2:	f008 fff8 	bl	802bac6 <__cxa_guard_release>
 8022ad6:	4a0f      	ldr	r2, [pc, #60]	; (8022b14 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022ad8:	490f      	ldr	r1, [pc, #60]	; (8022b18 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8022ada:	4810      	ldr	r0, [pc, #64]	; (8022b1c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022adc:	f008 ffe0 	bl	802baa0 <__aeabi_atexit>
 8022ae0:	4c0f      	ldr	r4, [pc, #60]	; (8022b20 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8022ae2:	7823      	ldrb	r3, [r4, #0]
 8022ae4:	f3bf 8f5b 	dmb	ish
 8022ae8:	07db      	lsls	r3, r3, #31
 8022aea:	d40b      	bmi.n	8022b04 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022aec:	4620      	mov	r0, r4
 8022aee:	f008 ffde 	bl	802baae <__cxa_guard_acquire>
 8022af2:	b138      	cbz	r0, 8022b04 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022af4:	4620      	mov	r0, r4
 8022af6:	f008 ffe6 	bl	802bac6 <__cxa_guard_release>
 8022afa:	4a06      	ldr	r2, [pc, #24]	; (8022b14 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022afc:	4909      	ldr	r1, [pc, #36]	; (8022b24 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8022afe:	480a      	ldr	r0, [pc, #40]	; (8022b28 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022b00:	f008 ffce 	bl	802baa0 <__aeabi_atexit>
 8022b04:	4b05      	ldr	r3, [pc, #20]	; (8022b1c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022b06:	62ab      	str	r3, [r5, #40]	; 0x28
 8022b08:	4b07      	ldr	r3, [pc, #28]	; (8022b28 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022b0a:	62eb      	str	r3, [r5, #44]	; 0x2c
 8022b0c:	bd38      	pop	{r3, r4, r5, pc}
 8022b0e:	bf00      	nop
 8022b10:	20006884 	.word	0x20006884
 8022b14:	20000000 	.word	0x20000000
 8022b18:	08020c5f 	.word	0x08020c5f
 8022b1c:	20000048 	.word	0x20000048
 8022b20:	20006888 	.word	0x20006888
 8022b24:	08020c5d 	.word	0x08020c5d
 8022b28:	2000004c 	.word	0x2000004c

08022b2c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8022b2c:	b510      	push	{r4, lr}
 8022b2e:	4604      	mov	r4, r0
 8022b30:	f7ff ff88 	bl	8022a44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8022b34:	4620      	mov	r0, r4
 8022b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022b3a:	f7ff bfbd 	b.w	8022ab8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08022b40 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8022b40:	b538      	push	{r3, r4, r5, lr}
 8022b42:	4c15      	ldr	r4, [pc, #84]	; (8022b98 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8022b44:	7823      	ldrb	r3, [r4, #0]
 8022b46:	f3bf 8f5b 	dmb	ish
 8022b4a:	07da      	lsls	r2, r3, #31
 8022b4c:	4605      	mov	r5, r0
 8022b4e:	d40b      	bmi.n	8022b68 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8022b50:	4620      	mov	r0, r4
 8022b52:	f008 ffac 	bl	802baae <__cxa_guard_acquire>
 8022b56:	b138      	cbz	r0, 8022b68 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8022b58:	4620      	mov	r0, r4
 8022b5a:	f008 ffb4 	bl	802bac6 <__cxa_guard_release>
 8022b5e:	4a0f      	ldr	r2, [pc, #60]	; (8022b9c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022b60:	490f      	ldr	r1, [pc, #60]	; (8022ba0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8022b62:	4810      	ldr	r0, [pc, #64]	; (8022ba4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8022b64:	f008 ff9c 	bl	802baa0 <__aeabi_atexit>
 8022b68:	4c0f      	ldr	r4, [pc, #60]	; (8022ba8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8022b6a:	7823      	ldrb	r3, [r4, #0]
 8022b6c:	f3bf 8f5b 	dmb	ish
 8022b70:	07db      	lsls	r3, r3, #31
 8022b72:	d40b      	bmi.n	8022b8c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022b74:	4620      	mov	r0, r4
 8022b76:	f008 ff9a 	bl	802baae <__cxa_guard_acquire>
 8022b7a:	b138      	cbz	r0, 8022b8c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022b7c:	4620      	mov	r0, r4
 8022b7e:	f008 ffa2 	bl	802bac6 <__cxa_guard_release>
 8022b82:	4a06      	ldr	r2, [pc, #24]	; (8022b9c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022b84:	4909      	ldr	r1, [pc, #36]	; (8022bac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8022b86:	480a      	ldr	r0, [pc, #40]	; (8022bb0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8022b88:	f008 ff8a 	bl	802baa0 <__aeabi_atexit>
 8022b8c:	4b05      	ldr	r3, [pc, #20]	; (8022ba4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8022b8e:	652b      	str	r3, [r5, #80]	; 0x50
 8022b90:	4b07      	ldr	r3, [pc, #28]	; (8022bb0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8022b92:	656b      	str	r3, [r5, #84]	; 0x54
 8022b94:	bd38      	pop	{r3, r4, r5, pc}
 8022b96:	bf00      	nop
 8022b98:	200068bc 	.word	0x200068bc
 8022b9c:	20000000 	.word	0x20000000
 8022ba0:	08020c4b 	.word	0x08020c4b
 8022ba4:	20000080 	.word	0x20000080
 8022ba8:	200068c0 	.word	0x200068c0
 8022bac:	08020c49 	.word	0x08020c49
 8022bb0:	20000084 	.word	0x20000084

08022bb4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8022bb4:	b538      	push	{r3, r4, r5, lr}
 8022bb6:	4c15      	ldr	r4, [pc, #84]	; (8022c0c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8022bb8:	7823      	ldrb	r3, [r4, #0]
 8022bba:	f3bf 8f5b 	dmb	ish
 8022bbe:	07da      	lsls	r2, r3, #31
 8022bc0:	4605      	mov	r5, r0
 8022bc2:	d40b      	bmi.n	8022bdc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8022bc4:	4620      	mov	r0, r4
 8022bc6:	f008 ff72 	bl	802baae <__cxa_guard_acquire>
 8022bca:	b138      	cbz	r0, 8022bdc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8022bcc:	4620      	mov	r0, r4
 8022bce:	f008 ff7a 	bl	802bac6 <__cxa_guard_release>
 8022bd2:	4a0f      	ldr	r2, [pc, #60]	; (8022c10 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022bd4:	490f      	ldr	r1, [pc, #60]	; (8022c14 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8022bd6:	4810      	ldr	r0, [pc, #64]	; (8022c18 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8022bd8:	f008 ff62 	bl	802baa0 <__aeabi_atexit>
 8022bdc:	4c0f      	ldr	r4, [pc, #60]	; (8022c1c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8022bde:	7823      	ldrb	r3, [r4, #0]
 8022be0:	f3bf 8f5b 	dmb	ish
 8022be4:	07db      	lsls	r3, r3, #31
 8022be6:	d40b      	bmi.n	8022c00 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8022be8:	4620      	mov	r0, r4
 8022bea:	f008 ff60 	bl	802baae <__cxa_guard_acquire>
 8022bee:	b138      	cbz	r0, 8022c00 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8022bf0:	4620      	mov	r0, r4
 8022bf2:	f008 ff68 	bl	802bac6 <__cxa_guard_release>
 8022bf6:	4a06      	ldr	r2, [pc, #24]	; (8022c10 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022bf8:	4909      	ldr	r1, [pc, #36]	; (8022c20 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8022bfa:	480a      	ldr	r0, [pc, #40]	; (8022c24 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8022bfc:	f008 ff50 	bl	802baa0 <__aeabi_atexit>
 8022c00:	4b05      	ldr	r3, [pc, #20]	; (8022c18 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8022c02:	64ab      	str	r3, [r5, #72]	; 0x48
 8022c04:	4b07      	ldr	r3, [pc, #28]	; (8022c24 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8022c06:	64eb      	str	r3, [r5, #76]	; 0x4c
 8022c08:	bd38      	pop	{r3, r4, r5, pc}
 8022c0a:	bf00      	nop
 8022c0c:	200068c4 	.word	0x200068c4
 8022c10:	20000000 	.word	0x20000000
 8022c14:	08020c4f 	.word	0x08020c4f
 8022c18:	20000088 	.word	0x20000088
 8022c1c:	200068c8 	.word	0x200068c8
 8022c20:	08020c4d 	.word	0x08020c4d
 8022c24:	2000008c 	.word	0x2000008c

08022c28 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8022c28:	b538      	push	{r3, r4, r5, lr}
 8022c2a:	4c15      	ldr	r4, [pc, #84]	; (8022c80 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8022c2c:	7823      	ldrb	r3, [r4, #0]
 8022c2e:	f3bf 8f5b 	dmb	ish
 8022c32:	07da      	lsls	r2, r3, #31
 8022c34:	4605      	mov	r5, r0
 8022c36:	d40b      	bmi.n	8022c50 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022c38:	4620      	mov	r0, r4
 8022c3a:	f008 ff38 	bl	802baae <__cxa_guard_acquire>
 8022c3e:	b138      	cbz	r0, 8022c50 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022c40:	4620      	mov	r0, r4
 8022c42:	f008 ff40 	bl	802bac6 <__cxa_guard_release>
 8022c46:	4a0f      	ldr	r2, [pc, #60]	; (8022c84 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022c48:	490f      	ldr	r1, [pc, #60]	; (8022c88 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8022c4a:	4810      	ldr	r0, [pc, #64]	; (8022c8c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022c4c:	f008 ff28 	bl	802baa0 <__aeabi_atexit>
 8022c50:	4c0f      	ldr	r4, [pc, #60]	; (8022c90 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8022c52:	7823      	ldrb	r3, [r4, #0]
 8022c54:	f3bf 8f5b 	dmb	ish
 8022c58:	07db      	lsls	r3, r3, #31
 8022c5a:	d40b      	bmi.n	8022c74 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022c5c:	4620      	mov	r0, r4
 8022c5e:	f008 ff26 	bl	802baae <__cxa_guard_acquire>
 8022c62:	b138      	cbz	r0, 8022c74 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022c64:	4620      	mov	r0, r4
 8022c66:	f008 ff2e 	bl	802bac6 <__cxa_guard_release>
 8022c6a:	4a06      	ldr	r2, [pc, #24]	; (8022c84 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022c6c:	4909      	ldr	r1, [pc, #36]	; (8022c94 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8022c6e:	480a      	ldr	r0, [pc, #40]	; (8022c98 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022c70:	f008 ff16 	bl	802baa0 <__aeabi_atexit>
 8022c74:	4b05      	ldr	r3, [pc, #20]	; (8022c8c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022c76:	642b      	str	r3, [r5, #64]	; 0x40
 8022c78:	4b07      	ldr	r3, [pc, #28]	; (8022c98 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022c7a:	646b      	str	r3, [r5, #68]	; 0x44
 8022c7c:	bd38      	pop	{r3, r4, r5, pc}
 8022c7e:	bf00      	nop
 8022c80:	2000688c 	.word	0x2000688c
 8022c84:	20000000 	.word	0x20000000
 8022c88:	08020c53 	.word	0x08020c53
 8022c8c:	20000050 	.word	0x20000050
 8022c90:	20006890 	.word	0x20006890
 8022c94:	08020c51 	.word	0x08020c51
 8022c98:	20000054 	.word	0x20000054

08022c9c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8022c9c:	b538      	push	{r3, r4, r5, lr}
 8022c9e:	4c15      	ldr	r4, [pc, #84]	; (8022cf4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8022ca0:	7823      	ldrb	r3, [r4, #0]
 8022ca2:	f3bf 8f5b 	dmb	ish
 8022ca6:	07da      	lsls	r2, r3, #31
 8022ca8:	4605      	mov	r5, r0
 8022caa:	d40b      	bmi.n	8022cc4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022cac:	4620      	mov	r0, r4
 8022cae:	f008 fefe 	bl	802baae <__cxa_guard_acquire>
 8022cb2:	b138      	cbz	r0, 8022cc4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022cb4:	4620      	mov	r0, r4
 8022cb6:	f008 ff06 	bl	802bac6 <__cxa_guard_release>
 8022cba:	4a0f      	ldr	r2, [pc, #60]	; (8022cf8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8022cbc:	490f      	ldr	r1, [pc, #60]	; (8022cfc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8022cbe:	4810      	ldr	r0, [pc, #64]	; (8022d00 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8022cc0:	f008 feee 	bl	802baa0 <__aeabi_atexit>
 8022cc4:	4c0f      	ldr	r4, [pc, #60]	; (8022d04 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8022cc6:	7823      	ldrb	r3, [r4, #0]
 8022cc8:	f3bf 8f5b 	dmb	ish
 8022ccc:	07db      	lsls	r3, r3, #31
 8022cce:	d40b      	bmi.n	8022ce8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8022cd0:	4620      	mov	r0, r4
 8022cd2:	f008 feec 	bl	802baae <__cxa_guard_acquire>
 8022cd6:	b138      	cbz	r0, 8022ce8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8022cd8:	4620      	mov	r0, r4
 8022cda:	f008 fef4 	bl	802bac6 <__cxa_guard_release>
 8022cde:	4a06      	ldr	r2, [pc, #24]	; (8022cf8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8022ce0:	4909      	ldr	r1, [pc, #36]	; (8022d08 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8022ce2:	480a      	ldr	r0, [pc, #40]	; (8022d0c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8022ce4:	f008 fedc 	bl	802baa0 <__aeabi_atexit>
 8022ce8:	4b05      	ldr	r3, [pc, #20]	; (8022d00 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8022cea:	63ab      	str	r3, [r5, #56]	; 0x38
 8022cec:	4b07      	ldr	r3, [pc, #28]	; (8022d0c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8022cee:	63eb      	str	r3, [r5, #60]	; 0x3c
 8022cf0:	bd38      	pop	{r3, r4, r5, pc}
 8022cf2:	bf00      	nop
 8022cf4:	200068ac 	.word	0x200068ac
 8022cf8:	20000000 	.word	0x20000000
 8022cfc:	08020c57 	.word	0x08020c57
 8022d00:	20000070 	.word	0x20000070
 8022d04:	200068b0 	.word	0x200068b0
 8022d08:	08020c55 	.word	0x08020c55
 8022d0c:	20000074 	.word	0x20000074

08022d10 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8022d10:	b510      	push	{r4, lr}
 8022d12:	4604      	mov	r4, r0
 8022d14:	f7ff ff14 	bl	8022b40 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8022d18:	4620      	mov	r0, r4
 8022d1a:	f7ff ff85 	bl	8022c28 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8022d1e:	4620      	mov	r0, r4
 8022d20:	f7ff ff48 	bl	8022bb4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8022d24:	4620      	mov	r0, r4
 8022d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022d2a:	f7ff bfb7 	b.w	8022c9c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08022d30 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8022d30:	b538      	push	{r3, r4, r5, lr}
 8022d32:	4c15      	ldr	r4, [pc, #84]	; (8022d88 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8022d34:	7823      	ldrb	r3, [r4, #0]
 8022d36:	f3bf 8f5b 	dmb	ish
 8022d3a:	07da      	lsls	r2, r3, #31
 8022d3c:	4605      	mov	r5, r0
 8022d3e:	d40b      	bmi.n	8022d58 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022d40:	4620      	mov	r0, r4
 8022d42:	f008 feb4 	bl	802baae <__cxa_guard_acquire>
 8022d46:	b138      	cbz	r0, 8022d58 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022d48:	4620      	mov	r0, r4
 8022d4a:	f008 febc 	bl	802bac6 <__cxa_guard_release>
 8022d4e:	4a0f      	ldr	r2, [pc, #60]	; (8022d8c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022d50:	490f      	ldr	r1, [pc, #60]	; (8022d90 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8022d52:	4810      	ldr	r0, [pc, #64]	; (8022d94 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022d54:	f008 fea4 	bl	802baa0 <__aeabi_atexit>
 8022d58:	4c0f      	ldr	r4, [pc, #60]	; (8022d98 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8022d5a:	7823      	ldrb	r3, [r4, #0]
 8022d5c:	f3bf 8f5b 	dmb	ish
 8022d60:	07db      	lsls	r3, r3, #31
 8022d62:	d40b      	bmi.n	8022d7c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022d64:	4620      	mov	r0, r4
 8022d66:	f008 fea2 	bl	802baae <__cxa_guard_acquire>
 8022d6a:	b138      	cbz	r0, 8022d7c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022d6c:	4620      	mov	r0, r4
 8022d6e:	f008 feaa 	bl	802bac6 <__cxa_guard_release>
 8022d72:	4a06      	ldr	r2, [pc, #24]	; (8022d8c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022d74:	4909      	ldr	r1, [pc, #36]	; (8022d9c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8022d76:	480a      	ldr	r0, [pc, #40]	; (8022da0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022d78:	f008 fe92 	bl	802baa0 <__aeabi_atexit>
 8022d7c:	4b05      	ldr	r3, [pc, #20]	; (8022d94 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022d7e:	662b      	str	r3, [r5, #96]	; 0x60
 8022d80:	4b07      	ldr	r3, [pc, #28]	; (8022da0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022d82:	666b      	str	r3, [r5, #100]	; 0x64
 8022d84:	bd38      	pop	{r3, r4, r5, pc}
 8022d86:	bf00      	nop
 8022d88:	20006894 	.word	0x20006894
 8022d8c:	20000000 	.word	0x20000000
 8022d90:	08020c43 	.word	0x08020c43
 8022d94:	20000058 	.word	0x20000058
 8022d98:	20006898 	.word	0x20006898
 8022d9c:	08020c41 	.word	0x08020c41
 8022da0:	2000005c 	.word	0x2000005c

08022da4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8022da4:	b538      	push	{r3, r4, r5, lr}
 8022da6:	4c15      	ldr	r4, [pc, #84]	; (8022dfc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8022da8:	7823      	ldrb	r3, [r4, #0]
 8022daa:	f3bf 8f5b 	dmb	ish
 8022dae:	07da      	lsls	r2, r3, #31
 8022db0:	4605      	mov	r5, r0
 8022db2:	d40b      	bmi.n	8022dcc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022db4:	4620      	mov	r0, r4
 8022db6:	f008 fe7a 	bl	802baae <__cxa_guard_acquire>
 8022dba:	b138      	cbz	r0, 8022dcc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022dbc:	4620      	mov	r0, r4
 8022dbe:	f008 fe82 	bl	802bac6 <__cxa_guard_release>
 8022dc2:	4a0f      	ldr	r2, [pc, #60]	; (8022e00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022dc4:	490f      	ldr	r1, [pc, #60]	; (8022e04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8022dc6:	4810      	ldr	r0, [pc, #64]	; (8022e08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022dc8:	f008 fe6a 	bl	802baa0 <__aeabi_atexit>
 8022dcc:	4c0f      	ldr	r4, [pc, #60]	; (8022e0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8022dce:	7823      	ldrb	r3, [r4, #0]
 8022dd0:	f3bf 8f5b 	dmb	ish
 8022dd4:	07db      	lsls	r3, r3, #31
 8022dd6:	d40b      	bmi.n	8022df0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022dd8:	4620      	mov	r0, r4
 8022dda:	f008 fe68 	bl	802baae <__cxa_guard_acquire>
 8022dde:	b138      	cbz	r0, 8022df0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022de0:	4620      	mov	r0, r4
 8022de2:	f008 fe70 	bl	802bac6 <__cxa_guard_release>
 8022de6:	4a06      	ldr	r2, [pc, #24]	; (8022e00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022de8:	4909      	ldr	r1, [pc, #36]	; (8022e10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8022dea:	480a      	ldr	r0, [pc, #40]	; (8022e14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8022dec:	f008 fe58 	bl	802baa0 <__aeabi_atexit>
 8022df0:	4b05      	ldr	r3, [pc, #20]	; (8022e08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022df2:	65ab      	str	r3, [r5, #88]	; 0x58
 8022df4:	4b07      	ldr	r3, [pc, #28]	; (8022e14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8022df6:	65eb      	str	r3, [r5, #92]	; 0x5c
 8022df8:	bd38      	pop	{r3, r4, r5, pc}
 8022dfa:	bf00      	nop
 8022dfc:	2000686c 	.word	0x2000686c
 8022e00:	20000000 	.word	0x20000000
 8022e04:	08020c47 	.word	0x08020c47
 8022e08:	20000030 	.word	0x20000030
 8022e0c:	20006870 	.word	0x20006870
 8022e10:	08020c45 	.word	0x08020c45
 8022e14:	20000034 	.word	0x20000034

08022e18 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8022e18:	b510      	push	{r4, lr}
 8022e1a:	4604      	mov	r4, r0
 8022e1c:	f7ff ff88 	bl	8022d30 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8022e20:	4620      	mov	r0, r4
 8022e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022e26:	f7ff bfbd 	b.w	8022da4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08022e2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8022e2c:	b538      	push	{r3, r4, r5, lr}
 8022e2e:	4c15      	ldr	r4, [pc, #84]	; (8022e84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8022e30:	7823      	ldrb	r3, [r4, #0]
 8022e32:	f3bf 8f5b 	dmb	ish
 8022e36:	07da      	lsls	r2, r3, #31
 8022e38:	4605      	mov	r5, r0
 8022e3a:	d40b      	bmi.n	8022e54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022e3c:	4620      	mov	r0, r4
 8022e3e:	f008 fe36 	bl	802baae <__cxa_guard_acquire>
 8022e42:	b138      	cbz	r0, 8022e54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022e44:	4620      	mov	r0, r4
 8022e46:	f008 fe3e 	bl	802bac6 <__cxa_guard_release>
 8022e4a:	4a0f      	ldr	r2, [pc, #60]	; (8022e88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022e4c:	490f      	ldr	r1, [pc, #60]	; (8022e8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8022e4e:	4810      	ldr	r0, [pc, #64]	; (8022e90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022e50:	f008 fe26 	bl	802baa0 <__aeabi_atexit>
 8022e54:	4c0f      	ldr	r4, [pc, #60]	; (8022e94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8022e56:	7823      	ldrb	r3, [r4, #0]
 8022e58:	f3bf 8f5b 	dmb	ish
 8022e5c:	07db      	lsls	r3, r3, #31
 8022e5e:	d40b      	bmi.n	8022e78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022e60:	4620      	mov	r0, r4
 8022e62:	f008 fe24 	bl	802baae <__cxa_guard_acquire>
 8022e66:	b138      	cbz	r0, 8022e78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022e68:	4620      	mov	r0, r4
 8022e6a:	f008 fe2c 	bl	802bac6 <__cxa_guard_release>
 8022e6e:	4a06      	ldr	r2, [pc, #24]	; (8022e88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022e70:	4909      	ldr	r1, [pc, #36]	; (8022e98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8022e72:	480a      	ldr	r0, [pc, #40]	; (8022e9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022e74:	f008 fe14 	bl	802baa0 <__aeabi_atexit>
 8022e78:	4b05      	ldr	r3, [pc, #20]	; (8022e90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022e7a:	672b      	str	r3, [r5, #112]	; 0x70
 8022e7c:	4b07      	ldr	r3, [pc, #28]	; (8022e9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022e7e:	676b      	str	r3, [r5, #116]	; 0x74
 8022e80:	bd38      	pop	{r3, r4, r5, pc}
 8022e82:	bf00      	nop
 8022e84:	20006864 	.word	0x20006864
 8022e88:	20000000 	.word	0x20000000
 8022e8c:	08020c3b 	.word	0x08020c3b
 8022e90:	20000028 	.word	0x20000028
 8022e94:	20006868 	.word	0x20006868
 8022e98:	08020c39 	.word	0x08020c39
 8022e9c:	2000002c 	.word	0x2000002c

08022ea0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8022ea0:	b538      	push	{r3, r4, r5, lr}
 8022ea2:	4c15      	ldr	r4, [pc, #84]	; (8022ef8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8022ea4:	7823      	ldrb	r3, [r4, #0]
 8022ea6:	f3bf 8f5b 	dmb	ish
 8022eaa:	07da      	lsls	r2, r3, #31
 8022eac:	4605      	mov	r5, r0
 8022eae:	d40b      	bmi.n	8022ec8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022eb0:	4620      	mov	r0, r4
 8022eb2:	f008 fdfc 	bl	802baae <__cxa_guard_acquire>
 8022eb6:	b138      	cbz	r0, 8022ec8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022eb8:	4620      	mov	r0, r4
 8022eba:	f008 fe04 	bl	802bac6 <__cxa_guard_release>
 8022ebe:	4a0f      	ldr	r2, [pc, #60]	; (8022efc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022ec0:	490f      	ldr	r1, [pc, #60]	; (8022f00 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8022ec2:	4810      	ldr	r0, [pc, #64]	; (8022f04 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022ec4:	f008 fdec 	bl	802baa0 <__aeabi_atexit>
 8022ec8:	4c0f      	ldr	r4, [pc, #60]	; (8022f08 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8022eca:	7823      	ldrb	r3, [r4, #0]
 8022ecc:	f3bf 8f5b 	dmb	ish
 8022ed0:	07db      	lsls	r3, r3, #31
 8022ed2:	d40b      	bmi.n	8022eec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022ed4:	4620      	mov	r0, r4
 8022ed6:	f008 fdea 	bl	802baae <__cxa_guard_acquire>
 8022eda:	b138      	cbz	r0, 8022eec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022edc:	4620      	mov	r0, r4
 8022ede:	f008 fdf2 	bl	802bac6 <__cxa_guard_release>
 8022ee2:	4a06      	ldr	r2, [pc, #24]	; (8022efc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022ee4:	4909      	ldr	r1, [pc, #36]	; (8022f0c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8022ee6:	480a      	ldr	r0, [pc, #40]	; (8022f10 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022ee8:	f008 fdda 	bl	802baa0 <__aeabi_atexit>
 8022eec:	4b05      	ldr	r3, [pc, #20]	; (8022f04 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022eee:	66ab      	str	r3, [r5, #104]	; 0x68
 8022ef0:	4b07      	ldr	r3, [pc, #28]	; (8022f10 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022ef2:	66eb      	str	r3, [r5, #108]	; 0x6c
 8022ef4:	bd38      	pop	{r3, r4, r5, pc}
 8022ef6:	bf00      	nop
 8022ef8:	2000685c 	.word	0x2000685c
 8022efc:	20000000 	.word	0x20000000
 8022f00:	08020c3f 	.word	0x08020c3f
 8022f04:	20000020 	.word	0x20000020
 8022f08:	20006860 	.word	0x20006860
 8022f0c:	08020c3d 	.word	0x08020c3d
 8022f10:	20000024 	.word	0x20000024

08022f14 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8022f14:	b510      	push	{r4, lr}
 8022f16:	4604      	mov	r4, r0
 8022f18:	f7ff ff88 	bl	8022e2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8022f1c:	4620      	mov	r0, r4
 8022f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022f22:	f7ff bfbd 	b.w	8022ea0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08022f26 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8022f26:	b510      	push	{r4, lr}
 8022f28:	4604      	mov	r4, r0
 8022f2a:	f7ff fff3 	bl	8022f14 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8022f2e:	4620      	mov	r0, r4
 8022f30:	f7ff ff72 	bl	8022e18 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8022f34:	4620      	mov	r0, r4
 8022f36:	f7ff fdf9 	bl	8022b2c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8022f3a:	4620      	mov	r0, r4
 8022f3c:	f7ff fcfa 	bl	8022934 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8022f40:	4620      	mov	r0, r4
 8022f42:	f7ff fd75 	bl	8022a30 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8022f46:	4620      	mov	r0, r4
 8022f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022f4c:	f7ff bee0 	b.w	8022d10 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08022f50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8022f50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f54:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8022f58:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022f5c:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8022f60:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8022f64:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8022f68:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8022f6c:	8808      	ldrh	r0, [r1, #0]
 8022f6e:	fb0e 4708 	mla	r7, lr, r8, r4
 8022f72:	f1be 0f00 	cmp.w	lr, #0
 8022f76:	eb02 0a07 	add.w	sl, r2, r7
 8022f7a:	db37      	blt.n	8022fec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8022f7c:	45f3      	cmp	fp, lr
 8022f7e:	dd35      	ble.n	8022fec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8022f80:	2c00      	cmp	r4, #0
 8022f82:	db31      	blt.n	8022fe8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8022f84:	45a0      	cmp	r8, r4
 8022f86:	dd2f      	ble.n	8022fe8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8022f88:	5dd2      	ldrb	r2, [r2, r7]
 8022f8a:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8022f8e:	1c62      	adds	r2, r4, #1
 8022f90:	d42f      	bmi.n	8022ff2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022f92:	4590      	cmp	r8, r2
 8022f94:	dd2d      	ble.n	8022ff2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022f96:	b366      	cbz	r6, 8022ff2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022f98:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022f9c:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8022fa0:	f11e 0e01 	adds.w	lr, lr, #1
 8022fa4:	d429      	bmi.n	8022ffa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8022fa6:	45f3      	cmp	fp, lr
 8022fa8:	dd27      	ble.n	8022ffa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8022faa:	f1bc 0f00 	cmp.w	ip, #0
 8022fae:	f000 80a1 	beq.w	80230f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 8022fb2:	2c00      	cmp	r4, #0
 8022fb4:	db1f      	blt.n	8022ff6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022fb6:	45a0      	cmp	r8, r4
 8022fb8:	dd1d      	ble.n	8022ff6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022fba:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8022fbe:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8022fc2:	3401      	adds	r4, #1
 8022fc4:	d41c      	bmi.n	8023000 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8022fc6:	45a0      	cmp	r8, r4
 8022fc8:	dd1a      	ble.n	8023000 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8022fca:	b1de      	cbz	r6, 8023004 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8022fcc:	44d0      	add	r8, sl
 8022fce:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022fd2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8022fd6:	2e0f      	cmp	r6, #15
 8022fd8:	d915      	bls.n	8023006 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8022fda:	4b49      	ldr	r3, [pc, #292]	; (8023100 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8022fdc:	4a49      	ldr	r2, [pc, #292]	; (8023104 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8022fde:	484a      	ldr	r0, [pc, #296]	; (8023108 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8022fe0:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8022fe4:	f009 fb80 	bl	802c6e8 <__assert_func>
 8022fe8:	4681      	mov	r9, r0
 8022fea:	e7d0      	b.n	8022f8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8022fec:	4607      	mov	r7, r0
 8022fee:	4681      	mov	r9, r0
 8022ff0:	e7d6      	b.n	8022fa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8022ff2:	4607      	mov	r7, r0
 8022ff4:	e7d4      	b.n	8022fa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8022ff6:	4686      	mov	lr, r0
 8022ff8:	e7e3      	b.n	8022fc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8022ffa:	4603      	mov	r3, r0
 8022ffc:	4686      	mov	lr, r0
 8022ffe:	e7ea      	b.n	8022fd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8023000:	4603      	mov	r3, r0
 8023002:	e7e8      	b.n	8022fd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8023004:	4603      	mov	r3, r0
 8023006:	f1bc 0f0f 	cmp.w	ip, #15
 802300a:	d8e6      	bhi.n	8022fda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 802300c:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8023010:	fb16 f80c 	smulbb	r8, r6, ip
 8023014:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023018:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802301c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023020:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8023024:	ea44 0909 	orr.w	r9, r4, r9
 8023028:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802302c:	f1cc 0410 	rsb	r4, ip, #16
 8023030:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023034:	1ba4      	subs	r4, r4, r6
 8023036:	041a      	lsls	r2, r3, #16
 8023038:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 802303c:	ea4a 0707 	orr.w	r7, sl, r7
 8023040:	4377      	muls	r7, r6
 8023042:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023046:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 802304a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802304e:	fb04 7409 	mla	r4, r4, r9, r7
 8023052:	4313      	orrs	r3, r2
 8023054:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8023058:	fb08 4303 	mla	r3, r8, r3, r4
 802305c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023060:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8023064:	4322      	orrs	r2, r4
 8023066:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 802306a:	fb0c 3202 	mla	r2, ip, r2, r3
 802306e:	0d53      	lsrs	r3, r2, #21
 8023070:	0952      	lsrs	r2, r2, #5
 8023072:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023076:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802307a:	431a      	orrs	r2, r3
 802307c:	b293      	uxth	r3, r2
 802307e:	b2af      	uxth	r7, r5
 8023080:	1202      	asrs	r2, r0, #8
 8023082:	43ed      	mvns	r5, r5
 8023084:	b2ed      	uxtb	r5, r5
 8023086:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802308a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802308e:	fb12 f205 	smulbb	r2, r2, r5
 8023092:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023096:	fb0c 2c07 	mla	ip, ip, r7, r2
 802309a:	00dc      	lsls	r4, r3, #3
 802309c:	10da      	asrs	r2, r3, #3
 802309e:	10c6      	asrs	r6, r0, #3
 80230a0:	00c3      	lsls	r3, r0, #3
 80230a2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80230a6:	b2db      	uxtb	r3, r3
 80230a8:	fb16 f605 	smulbb	r6, r6, r5
 80230ac:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80230b0:	b2e4      	uxtb	r4, r4
 80230b2:	fb13 f305 	smulbb	r3, r3, r5
 80230b6:	fa1f fc8c 	uxth.w	ip, ip
 80230ba:	fb02 6207 	mla	r2, r2, r7, r6
 80230be:	fb04 3307 	mla	r3, r4, r7, r3
 80230c2:	b296      	uxth	r6, r2
 80230c4:	b29a      	uxth	r2, r3
 80230c6:	f10c 0301 	add.w	r3, ip, #1
 80230ca:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80230ce:	1c53      	adds	r3, r2, #1
 80230d0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80230d4:	1c72      	adds	r2, r6, #1
 80230d6:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 80230da:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80230de:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80230e2:	0952      	lsrs	r2, r2, #5
 80230e4:	ea43 030c 	orr.w	r3, r3, ip
 80230e8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80230ec:	4313      	orrs	r3, r2
 80230ee:	800b      	strh	r3, [r1, #0]
 80230f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230f4:	2e0f      	cmp	r6, #15
 80230f6:	f63f af70 	bhi.w	8022fda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 80230fa:	4603      	mov	r3, r0
 80230fc:	4686      	mov	lr, r0
 80230fe:	e785      	b.n	802300c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8023100:	08031c31 	.word	0x08031c31
 8023104:	080322a3 	.word	0x080322a3
 8023108:	08031cb5 	.word	0x08031cb5

0802310c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802310c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023110:	ed2d 8b08 	vpush	{d8-d11}
 8023114:	b099      	sub	sp, #100	; 0x64
 8023116:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 802311a:	9215      	str	r2, [sp, #84]	; 0x54
 802311c:	9309      	str	r3, [sp, #36]	; 0x24
 802311e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023120:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8023124:	930d      	str	r3, [sp, #52]	; 0x34
 8023126:	910c      	str	r1, [sp, #48]	; 0x30
 8023128:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802312c:	9016      	str	r0, [sp, #88]	; 0x58
 802312e:	6850      	ldr	r0, [r2, #4]
 8023130:	6812      	ldr	r2, [r2, #0]
 8023132:	fb00 1303 	mla	r3, r0, r3, r1
 8023136:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 802313a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802313c:	681b      	ldr	r3, [r3, #0]
 802313e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023140:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023142:	685e      	ldr	r6, [r3, #4]
 8023144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023146:	43db      	mvns	r3, r3
 8023148:	b2db      	uxtb	r3, r3
 802314a:	eeb0 aa40 	vmov.f32	s20, s0
 802314e:	eef0 9a60 	vmov.f32	s19, s1
 8023152:	eeb0 9a41 	vmov.f32	s18, s2
 8023156:	eeb0 8a62 	vmov.f32	s16, s5
 802315a:	eef0 8a43 	vmov.f32	s17, s6
 802315e:	eef0 ba44 	vmov.f32	s23, s8
 8023162:	eeb0 ba64 	vmov.f32	s22, s9
 8023166:	eef0 aa45 	vmov.f32	s21, s10
 802316a:	3604      	adds	r6, #4
 802316c:	930a      	str	r3, [sp, #40]	; 0x28
 802316e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023170:	2b00      	cmp	r3, #0
 8023172:	dc03      	bgt.n	802317c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023174:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023176:	2b00      	cmp	r3, #0
 8023178:	f340 8225 	ble.w	80235c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 802317c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802317e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023182:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023186:	1e48      	subs	r0, r1, #1
 8023188:	1e57      	subs	r7, r2, #1
 802318a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802318c:	2b00      	cmp	r3, #0
 802318e:	f340 80e3 	ble.w	8023358 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 8023192:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8023196:	ea4f 4325 	mov.w	r3, r5, asr #16
 802319a:	d406      	bmi.n	80231aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802319c:	4584      	cmp	ip, r0
 802319e:	da04      	bge.n	80231aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80231a0:	2b00      	cmp	r3, #0
 80231a2:	db02      	blt.n	80231aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80231a4:	42bb      	cmp	r3, r7
 80231a6:	f2c0 80d8 	blt.w	802335a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80231aa:	f11c 0c01 	adds.w	ip, ip, #1
 80231ae:	f100 80c9 	bmi.w	8023344 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80231b2:	4561      	cmp	r1, ip
 80231b4:	f2c0 80c6 	blt.w	8023344 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80231b8:	3301      	adds	r3, #1
 80231ba:	f100 80c3 	bmi.w	8023344 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80231be:	429a      	cmp	r2, r3
 80231c0:	f2c0 80c0 	blt.w	8023344 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80231c4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80231c8:	4647      	mov	r7, r8
 80231ca:	f1bb 0f00 	cmp.w	fp, #0
 80231ce:	f340 80e3 	ble.w	8023398 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80231d2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80231d4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80231d6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80231da:	689b      	ldr	r3, [r3, #8]
 80231dc:	ea5f 422a 	movs.w	r2, sl, asr #16
 80231e0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80231e4:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80231e8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80231ec:	f100 8121 	bmi.w	8023432 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80231f0:	f103 39ff 	add.w	r9, r3, #4294967295
 80231f4:	454a      	cmp	r2, r9
 80231f6:	f280 811c 	bge.w	8023432 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80231fa:	f1bc 0f00 	cmp.w	ip, #0
 80231fe:	f2c0 8118 	blt.w	8023432 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023202:	f10e 39ff 	add.w	r9, lr, #4294967295
 8023206:	45cc      	cmp	ip, r9
 8023208:	f280 8113 	bge.w	8023432 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802320c:	b21b      	sxth	r3, r3
 802320e:	fb0c 2203 	mla	r2, ip, r3, r2
 8023212:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023214:	eb04 0902 	add.w	r9, r4, r2
 8023218:	5ca2      	ldrb	r2, [r4, r2]
 802321a:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 802321e:	2800      	cmp	r0, #0
 8023220:	f000 80fe 	beq.w	8023420 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8023224:	f899 2001 	ldrb.w	r2, [r9, #1]
 8023228:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802322c:	9211      	str	r2, [sp, #68]	; 0x44
 802322e:	b151      	cbz	r1, 8023246 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023230:	eb09 0203 	add.w	r2, r9, r3
 8023234:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023238:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802323c:	930f      	str	r3, [sp, #60]	; 0x3c
 802323e:	7853      	ldrb	r3, [r2, #1]
 8023240:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023244:	9312      	str	r3, [sp, #72]	; 0x48
 8023246:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023248:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802324a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802324e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023252:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023256:	ea4c 0c03 	orr.w	ip, ip, r3
 802325a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802325c:	041b      	lsls	r3, r3, #16
 802325e:	fb10 f201 	smulbb	r2, r0, r1
 8023262:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8023266:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802326a:	10d2      	asrs	r2, r2, #3
 802326c:	4323      	orrs	r3, r4
 802326e:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8023272:	4353      	muls	r3, r2
 8023274:	fb09 330c 	mla	r3, r9, ip, r3
 8023278:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802327c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023280:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023284:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023288:	f1c1 0c10 	rsb	ip, r1, #16
 802328c:	ebac 0c00 	sub.w	ip, ip, r0
 8023290:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023294:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023298:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802329a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802329c:	0418      	lsls	r0, r3, #16
 802329e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80232a2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80232a6:	4318      	orrs	r0, r3
 80232a8:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80232ac:	fb02 c200 	mla	r2, r2, r0, ip
 80232b0:	0d53      	lsrs	r3, r2, #21
 80232b2:	0952      	lsrs	r2, r2, #5
 80232b4:	8838      	ldrh	r0, [r7, #0]
 80232b6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80232ba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80232be:	431a      	orrs	r2, r3
 80232c0:	b292      	uxth	r2, r2
 80232c2:	1201      	asrs	r1, r0, #8
 80232c4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80232c8:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80232cc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80232d0:	fb11 f104 	smulbb	r1, r1, r4
 80232d4:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80232d8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80232dc:	00c0      	lsls	r0, r0, #3
 80232de:	fb0c 1c03 	mla	ip, ip, r3, r1
 80232e2:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80232e6:	10d1      	asrs	r1, r2, #3
 80232e8:	b2c0      	uxtb	r0, r0
 80232ea:	00d2      	lsls	r2, r2, #3
 80232ec:	b2d2      	uxtb	r2, r2
 80232ee:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80232f2:	fb1e fe04 	smulbb	lr, lr, r4
 80232f6:	fb10 f004 	smulbb	r0, r0, r4
 80232fa:	fa1f fc8c 	uxth.w	ip, ip
 80232fe:	fb01 e103 	mla	r1, r1, r3, lr
 8023302:	fb02 0303 	mla	r3, r2, r3, r0
 8023306:	b29a      	uxth	r2, r3
 8023308:	f10c 0301 	add.w	r3, ip, #1
 802330c:	b289      	uxth	r1, r1
 802330e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023312:	1c53      	adds	r3, r2, #1
 8023314:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023318:	1c4a      	adds	r2, r1, #1
 802331a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802331e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023322:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023326:	0949      	lsrs	r1, r1, #5
 8023328:	ea43 030c 	orr.w	r3, r3, ip
 802332c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023330:	430b      	orrs	r3, r1
 8023332:	803b      	strh	r3, [r7, #0]
 8023334:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023336:	449a      	add	sl, r3
 8023338:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802333a:	3702      	adds	r7, #2
 802333c:	441d      	add	r5, r3
 802333e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023342:	e742      	b.n	80231ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023344:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023346:	449a      	add	sl, r3
 8023348:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802334a:	441d      	add	r5, r3
 802334c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802334e:	3b01      	subs	r3, #1
 8023350:	9309      	str	r3, [sp, #36]	; 0x24
 8023352:	f108 0802 	add.w	r8, r8, #2
 8023356:	e718      	b.n	802318a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8023358:	d023      	beq.n	80233a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802335a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802335c:	982d      	ldr	r0, [sp, #180]	; 0xb4
 802335e:	3b01      	subs	r3, #1
 8023360:	fb00 a003 	mla	r0, r0, r3, sl
 8023364:	1400      	asrs	r0, r0, #16
 8023366:	f53f af2d 	bmi.w	80231c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802336a:	3901      	subs	r1, #1
 802336c:	4288      	cmp	r0, r1
 802336e:	f6bf af29 	bge.w	80231c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023372:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8023374:	fb01 5303 	mla	r3, r1, r3, r5
 8023378:	141b      	asrs	r3, r3, #16
 802337a:	f53f af23 	bmi.w	80231c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802337e:	3a01      	subs	r2, #1
 8023380:	4293      	cmp	r3, r2
 8023382:	f6bf af1f 	bge.w	80231c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023386:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 802338a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 802338e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8023392:	f1be 0f00 	cmp.w	lr, #0
 8023396:	dc6c      	bgt.n	8023472 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8023398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802339a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802339e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 80233a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80233a4:	2b00      	cmp	r3, #0
 80233a6:	f340 810e 	ble.w	80235c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 80233aa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80233ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80233b2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80233b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80233b8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80233bc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80233c0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80233c4:	eef0 6a48 	vmov.f32	s13, s16
 80233c8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80233cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80233d0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80233d4:	ee16 aa90 	vmov	sl, s13
 80233d8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80233dc:	eef0 6a68 	vmov.f32	s13, s17
 80233e0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80233e4:	ee18 2a10 	vmov	r2, s16
 80233e8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80233ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80233f0:	ee18 2a90 	vmov	r2, s17
 80233f4:	932d      	str	r3, [sp, #180]	; 0xb4
 80233f6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80233f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80233fc:	932e      	str	r3, [sp, #184]	; 0xb8
 80233fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023400:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023402:	3b01      	subs	r3, #1
 8023404:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023408:	930c      	str	r3, [sp, #48]	; 0x30
 802340a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802340c:	bf08      	it	eq
 802340e:	4613      	moveq	r3, r2
 8023410:	ee16 5a90 	vmov	r5, s13
 8023414:	9309      	str	r3, [sp, #36]	; 0x24
 8023416:	eef0 8a67 	vmov.f32	s17, s15
 802341a:	eeb0 8a47 	vmov.f32	s16, s14
 802341e:	e6a6      	b.n	802316e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8023420:	2900      	cmp	r1, #0
 8023422:	f43f af10 	beq.w	8023246 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023426:	f819 3003 	ldrb.w	r3, [r9, r3]
 802342a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802342e:	930f      	str	r3, [sp, #60]	; 0x3c
 8023430:	e709      	b.n	8023246 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023432:	f112 0901 	adds.w	r9, r2, #1
 8023436:	f53f af7d 	bmi.w	8023334 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802343a:	454b      	cmp	r3, r9
 802343c:	f6ff af7a 	blt.w	8023334 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023440:	f11c 0901 	adds.w	r9, ip, #1
 8023444:	f53f af76 	bmi.w	8023334 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023448:	45ce      	cmp	lr, r9
 802344a:	f6ff af73 	blt.w	8023334 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802344e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023450:	9202      	str	r2, [sp, #8]
 8023452:	b21b      	sxth	r3, r3
 8023454:	fa0f f28e 	sxth.w	r2, lr
 8023458:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802345c:	e9cd c003 	strd	ip, r0, [sp, #12]
 8023460:	9201      	str	r2, [sp, #4]
 8023462:	9300      	str	r3, [sp, #0]
 8023464:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023466:	9816      	ldr	r0, [sp, #88]	; 0x58
 8023468:	4633      	mov	r3, r6
 802346a:	4639      	mov	r1, r7
 802346c:	f7ff fd70 	bl	8022f50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8023470:	e760      	b.n	8023334 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023472:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023474:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023476:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802347a:	ea4f 422a 	mov.w	r2, sl, asr #16
 802347e:	1429      	asrs	r1, r5, #16
 8023480:	fb03 2101 	mla	r1, r3, r1, r2
 8023484:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023486:	440a      	add	r2, r1
 8023488:	5c61      	ldrb	r1, [r4, r1]
 802348a:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 802348e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023492:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8023496:	f1bc 0f00 	cmp.w	ip, #0
 802349a:	f000 808c 	beq.w	80235b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 802349e:	7857      	ldrb	r7, [r2, #1]
 80234a0:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 80234a4:	9413      	str	r4, [sp, #76]	; 0x4c
 80234a6:	b140      	cbz	r0, 80234ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80234a8:	18d7      	adds	r7, r2, r3
 80234aa:	5cd3      	ldrb	r3, [r2, r3]
 80234ac:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80234b0:	9310      	str	r3, [sp, #64]	; 0x40
 80234b2:	787b      	ldrb	r3, [r7, #1]
 80234b4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80234b8:	9314      	str	r3, [sp, #80]	; 0x50
 80234ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80234bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80234be:	fb1c f200 	smulbb	r2, ip, r0
 80234c2:	041f      	lsls	r7, r3, #16
 80234c4:	10d2      	asrs	r2, r2, #3
 80234c6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80234ca:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 80234ce:	431f      	orrs	r7, r3
 80234d0:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80234d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80234d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80234d8:	041b      	lsls	r3, r3, #16
 80234da:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 80234de:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80234e2:	ea43 030b 	orr.w	r3, r3, fp
 80234e6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80234e8:	4353      	muls	r3, r2
 80234ea:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80234ee:	fb04 3707 	mla	r7, r4, r7, r3
 80234f2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80234f6:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80234fa:	ea43 0b01 	orr.w	fp, r3, r1
 80234fe:	f1c0 0110 	rsb	r1, r0, #16
 8023502:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023504:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023506:	eba1 0c0c 	sub.w	ip, r1, ip
 802350a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802350e:	fb0c 770b 	mla	r7, ip, fp, r7
 8023512:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023516:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 802351a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802351e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023522:	ea4c 0c0b 	orr.w	ip, ip, fp
 8023526:	fb02 770c 	mla	r7, r2, ip, r7
 802352a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802352c:	0d79      	lsrs	r1, r7, #21
 802352e:	097f      	lsrs	r7, r7, #5
 8023530:	8812      	ldrh	r2, [r2, #0]
 8023532:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023536:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802353a:	430f      	orrs	r7, r1
 802353c:	b2bb      	uxth	r3, r7
 802353e:	1211      	asrs	r1, r2, #8
 8023540:	1218      	asrs	r0, r3, #8
 8023542:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023546:	fb11 f104 	smulbb	r1, r1, r4
 802354a:	10d7      	asrs	r7, r2, #3
 802354c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023550:	00d2      	lsls	r2, r2, #3
 8023552:	fb00 1009 	mla	r0, r0, r9, r1
 8023556:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802355a:	10d9      	asrs	r1, r3, #3
 802355c:	b2d2      	uxtb	r2, r2
 802355e:	00db      	lsls	r3, r3, #3
 8023560:	fb17 f704 	smulbb	r7, r7, r4
 8023564:	fb12 f204 	smulbb	r2, r2, r4
 8023568:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802356c:	b2db      	uxtb	r3, r3
 802356e:	b280      	uxth	r0, r0
 8023570:	fb01 7109 	mla	r1, r1, r9, r7
 8023574:	fb03 2309 	mla	r3, r3, r9, r2
 8023578:	b29b      	uxth	r3, r3
 802357a:	b289      	uxth	r1, r1
 802357c:	1c42      	adds	r2, r0, #1
 802357e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023582:	1c4f      	adds	r7, r1, #1
 8023584:	1c5a      	adds	r2, r3, #1
 8023586:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802358a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802358e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023592:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023596:	0949      	lsrs	r1, r1, #5
 8023598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802359a:	4310      	orrs	r0, r2
 802359c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80235a0:	4308      	orrs	r0, r1
 80235a2:	f823 0b02 	strh.w	r0, [r3], #2
 80235a6:	930e      	str	r3, [sp, #56]	; 0x38
 80235a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80235aa:	449a      	add	sl, r3
 80235ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80235ae:	f10e 3eff 	add.w	lr, lr, #4294967295
 80235b2:	441d      	add	r5, r3
 80235b4:	e6ed      	b.n	8023392 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 80235b6:	2800      	cmp	r0, #0
 80235b8:	f43f af7f 	beq.w	80234ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80235bc:	5cd3      	ldrb	r3, [r2, r3]
 80235be:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80235c2:	9310      	str	r3, [sp, #64]	; 0x40
 80235c4:	e779      	b.n	80234ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80235c6:	b019      	add	sp, #100	; 0x64
 80235c8:	ecbd 8b08 	vpop	{d8-d11}
 80235cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080235d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80235d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80235d4:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 80235d8:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80235dc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80235e0:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80235e4:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80235e8:	8808      	ldrh	r0, [r1, #0]
 80235ea:	fb06 570e 	mla	r7, r6, lr, r5
 80235ee:	2e00      	cmp	r6, #0
 80235f0:	eb02 0807 	add.w	r8, r2, r7
 80235f4:	db38      	blt.n	8023668 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80235f6:	45b1      	cmp	r9, r6
 80235f8:	dd36      	ble.n	8023668 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80235fa:	2d00      	cmp	r5, #0
 80235fc:	db32      	blt.n	8023664 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 80235fe:	45ae      	cmp	lr, r5
 8023600:	dd30      	ble.n	8023664 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8023602:	5dd2      	ldrb	r2, [r2, r7]
 8023604:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8023608:	1c6a      	adds	r2, r5, #1
 802360a:	d430      	bmi.n	802366e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 802360c:	4596      	cmp	lr, r2
 802360e:	dd2e      	ble.n	802366e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8023610:	b36c      	cbz	r4, 802366e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8023612:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023616:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 802361a:	3601      	adds	r6, #1
 802361c:	d42b      	bmi.n	8023676 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 802361e:	45b1      	cmp	r9, r6
 8023620:	dd29      	ble.n	8023676 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8023622:	f1bc 0f00 	cmp.w	ip, #0
 8023626:	d028      	beq.n	802367a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8023628:	2d00      	cmp	r5, #0
 802362a:	db22      	blt.n	8023672 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 802362c:	45ae      	cmp	lr, r5
 802362e:	dd20      	ble.n	8023672 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8023630:	f818 600e 	ldrb.w	r6, [r8, lr]
 8023634:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8023638:	3501      	adds	r5, #1
 802363a:	d407      	bmi.n	802364c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 802363c:	45ae      	cmp	lr, r5
 802363e:	dd05      	ble.n	802364c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8023640:	b134      	cbz	r4, 8023650 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8023642:	44c6      	add	lr, r8
 8023644:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8023648:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 802364c:	2c0f      	cmp	r4, #15
 802364e:	d802      	bhi.n	8023656 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8023650:	f1bc 0f0f 	cmp.w	ip, #15
 8023654:	d914      	bls.n	8023680 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 8023656:	4b26      	ldr	r3, [pc, #152]	; (80236f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8023658:	4a26      	ldr	r2, [pc, #152]	; (80236f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 802365a:	4827      	ldr	r0, [pc, #156]	; (80236f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 802365c:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8023660:	f009 f842 	bl	802c6e8 <__assert_func>
 8023664:	4607      	mov	r7, r0
 8023666:	e7cf      	b.n	8023608 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8023668:	4602      	mov	r2, r0
 802366a:	4607      	mov	r7, r0
 802366c:	e7d5      	b.n	802361a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 802366e:	4602      	mov	r2, r0
 8023670:	e7d3      	b.n	802361a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8023672:	4606      	mov	r6, r0
 8023674:	e7e0      	b.n	8023638 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 8023676:	4606      	mov	r6, r0
 8023678:	e7e8      	b.n	802364c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 802367a:	2c0f      	cmp	r4, #15
 802367c:	d8eb      	bhi.n	8023656 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 802367e:	4606      	mov	r6, r0
 8023680:	043d      	lsls	r5, r7, #16
 8023682:	fb14 f30c 	smulbb	r3, r4, ip
 8023686:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 802368a:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 802368e:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023692:	10db      	asrs	r3, r3, #3
 8023694:	432f      	orrs	r7, r5
 8023696:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802369a:	f1cc 0510 	rsb	r5, ip, #16
 802369e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80236a2:	1b2d      	subs	r5, r5, r4
 80236a4:	ea4e 0202 	orr.w	r2, lr, r2
 80236a8:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 80236ac:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80236b0:	4354      	muls	r4, r2
 80236b2:	fb05 4507 	mla	r5, r5, r7, r4
 80236b6:	0404      	lsls	r4, r0, #16
 80236b8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80236bc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80236c0:	4320      	orrs	r0, r4
 80236c2:	fb03 5400 	mla	r4, r3, r0, r5
 80236c6:	0430      	lsls	r0, r6, #16
 80236c8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80236cc:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80236d0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80236d4:	4330      	orrs	r0, r6
 80236d6:	fb03 4000 	mla	r0, r3, r0, r4
 80236da:	0d43      	lsrs	r3, r0, #21
 80236dc:	0940      	lsrs	r0, r0, #5
 80236de:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80236e2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80236e6:	4318      	orrs	r0, r3
 80236e8:	8008      	strh	r0, [r1, #0]
 80236ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80236ee:	bf00      	nop
 80236f0:	08031c31 	.word	0x08031c31
 80236f4:	080322a3 	.word	0x080322a3
 80236f8:	08031cb5 	.word	0x08031cb5

080236fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80236fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023700:	ed2d 8b0a 	vpush	{d8-d12}
 8023704:	b093      	sub	sp, #76	; 0x4c
 8023706:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 802370a:	920f      	str	r2, [sp, #60]	; 0x3c
 802370c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802370e:	9108      	str	r1, [sp, #32]
 8023710:	9306      	str	r3, [sp, #24]
 8023712:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023716:	9010      	str	r0, [sp, #64]	; 0x40
 8023718:	6850      	ldr	r0, [r2, #4]
 802371a:	6812      	ldr	r2, [r2, #0]
 802371c:	fb00 1303 	mla	r3, r0, r3, r1
 8023720:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8023724:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023726:	681b      	ldr	r3, [r3, #0]
 8023728:	9307      	str	r3, [sp, #28]
 802372a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802372c:	685f      	ldr	r7, [r3, #4]
 802372e:	eeb0 aa40 	vmov.f32	s20, s0
 8023732:	eef0 9a60 	vmov.f32	s19, s1
 8023736:	eeb0 9a41 	vmov.f32	s18, s2
 802373a:	eeb0 8a62 	vmov.f32	s16, s5
 802373e:	eef0 8a43 	vmov.f32	s17, s6
 8023742:	eeb0 ca44 	vmov.f32	s24, s8
 8023746:	eef0 ba64 	vmov.f32	s23, s9
 802374a:	eeb0 ba45 	vmov.f32	s22, s10
 802374e:	3704      	adds	r7, #4
 8023750:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8023754:	9b08      	ldr	r3, [sp, #32]
 8023756:	2b00      	cmp	r3, #0
 8023758:	dc03      	bgt.n	8023762 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802375a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802375c:	2b00      	cmp	r3, #0
 802375e:	f340 81b2 	ble.w	8023ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8023762:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023764:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023768:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802376c:	1e48      	subs	r0, r1, #1
 802376e:	f102 3cff 	add.w	ip, r2, #4294967295
 8023772:	9b06      	ldr	r3, [sp, #24]
 8023774:	2b00      	cmp	r3, #0
 8023776:	f340 80a9 	ble.w	80238cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 802377a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802377e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023782:	d406      	bmi.n	8023792 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023784:	4586      	cmp	lr, r0
 8023786:	da04      	bge.n	8023792 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023788:	2b00      	cmp	r3, #0
 802378a:	db02      	blt.n	8023792 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802378c:	4563      	cmp	r3, ip
 802378e:	f2c0 809e 	blt.w	80238ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8023792:	f11e 0e01 	adds.w	lr, lr, #1
 8023796:	f100 808f 	bmi.w	80238b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802379a:	4571      	cmp	r1, lr
 802379c:	f2c0 808c 	blt.w	80238b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80237a0:	3301      	adds	r3, #1
 80237a2:	f100 8089 	bmi.w	80238b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80237a6:	429a      	cmp	r2, r3
 80237a8:	f2c0 8086 	blt.w	80238b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80237ac:	f8dd b018 	ldr.w	fp, [sp, #24]
 80237b0:	46c8      	mov	r8, r9
 80237b2:	f1bb 0f00 	cmp.w	fp, #0
 80237b6:	f340 80a6 	ble.w	8023906 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80237ba:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80237bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80237be:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80237c2:	689b      	ldr	r3, [r3, #8]
 80237c4:	1422      	asrs	r2, r4, #16
 80237c6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80237ca:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80237ce:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80237d2:	f100 80e3 	bmi.w	802399c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80237d6:	f103 3aff 	add.w	sl, r3, #4294967295
 80237da:	4552      	cmp	r2, sl
 80237dc:	f280 80de 	bge.w	802399c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80237e0:	f1bc 0f00 	cmp.w	ip, #0
 80237e4:	f2c0 80da 	blt.w	802399c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80237e8:	f10e 3aff 	add.w	sl, lr, #4294967295
 80237ec:	45d4      	cmp	ip, sl
 80237ee:	f280 80d5 	bge.w	802399c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80237f2:	b21b      	sxth	r3, r3
 80237f4:	fb0c 2203 	mla	r2, ip, r3, r2
 80237f8:	9d07      	ldr	r5, [sp, #28]
 80237fa:	eb05 0a02 	add.w	sl, r5, r2
 80237fe:	5caa      	ldrb	r2, [r5, r2]
 8023800:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8023804:	2800      	cmp	r0, #0
 8023806:	f000 80c0 	beq.w	802398a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 802380a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802380e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8023812:	920b      	str	r2, [sp, #44]	; 0x2c
 8023814:	b151      	cbz	r1, 802382c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8023816:	eb0a 0203 	add.w	r2, sl, r3
 802381a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802381e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023822:	9309      	str	r3, [sp, #36]	; 0x24
 8023824:	7853      	ldrb	r3, [r2, #1]
 8023826:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802382a:	930c      	str	r3, [sp, #48]	; 0x30
 802382c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802382e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023830:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023834:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023838:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802383c:	ea4c 0c03 	orr.w	ip, ip, r3
 8023840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023842:	041b      	lsls	r3, r3, #16
 8023844:	fb10 f201 	smulbb	r2, r0, r1
 8023848:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802384c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023850:	10d2      	asrs	r2, r2, #3
 8023852:	432b      	orrs	r3, r5
 8023854:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8023858:	4353      	muls	r3, r2
 802385a:	fb0a 330c 	mla	r3, sl, ip, r3
 802385e:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023862:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023866:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802386a:	ea4c 0e0e 	orr.w	lr, ip, lr
 802386e:	f1c1 0c10 	rsb	ip, r1, #16
 8023872:	ebac 0c00 	sub.w	ip, ip, r0
 8023876:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802387a:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802387e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023880:	0418      	lsls	r0, r3, #16
 8023882:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023886:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802388a:	4318      	orrs	r0, r3
 802388c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023890:	fb02 c200 	mla	r2, r2, r0, ip
 8023894:	0d53      	lsrs	r3, r2, #21
 8023896:	0952      	lsrs	r2, r2, #5
 8023898:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802389c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80238a0:	431a      	orrs	r2, r3
 80238a2:	f8a8 2000 	strh.w	r2, [r8]
 80238a6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80238a8:	441c      	add	r4, r3
 80238aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80238ac:	f108 0802 	add.w	r8, r8, #2
 80238b0:	441e      	add	r6, r3
 80238b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80238b6:	e77c      	b.n	80237b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80238b8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80238ba:	441c      	add	r4, r3
 80238bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80238be:	441e      	add	r6, r3
 80238c0:	9b06      	ldr	r3, [sp, #24]
 80238c2:	3b01      	subs	r3, #1
 80238c4:	9306      	str	r3, [sp, #24]
 80238c6:	f109 0902 	add.w	r9, r9, #2
 80238ca:	e752      	b.n	8023772 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80238cc:	d020      	beq.n	8023910 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80238ce:	9b06      	ldr	r3, [sp, #24]
 80238d0:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80238d2:	3b01      	subs	r3, #1
 80238d4:	fb00 4003 	mla	r0, r0, r3, r4
 80238d8:	1400      	asrs	r0, r0, #16
 80238da:	f53f af67 	bmi.w	80237ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80238de:	3901      	subs	r1, #1
 80238e0:	4288      	cmp	r0, r1
 80238e2:	f6bf af63 	bge.w	80237ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80238e6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80238e8:	fb01 6303 	mla	r3, r1, r3, r6
 80238ec:	141b      	asrs	r3, r3, #16
 80238ee:	f53f af5d 	bmi.w	80237ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80238f2:	3a01      	subs	r2, #1
 80238f4:	4293      	cmp	r3, r2
 80238f6:	f6bf af59 	bge.w	80237ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80238fa:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80238fe:	46ca      	mov	sl, r9
 8023900:	f1b8 0f00 	cmp.w	r8, #0
 8023904:	dc67      	bgt.n	80239d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8023906:	9b06      	ldr	r3, [sp, #24]
 8023908:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802390c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8023910:	9b08      	ldr	r3, [sp, #32]
 8023912:	2b00      	cmp	r3, #0
 8023914:	f340 80d7 	ble.w	8023ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8023918:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802391c:	ee79 9aab 	vadd.f32	s19, s19, s23
 8023920:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8023924:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023926:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802392a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802392e:	eef0 6a48 	vmov.f32	s13, s16
 8023932:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023936:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802393a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802393e:	ee16 4a90 	vmov	r4, s13
 8023942:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023946:	eef0 6a68 	vmov.f32	s13, s17
 802394a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802394e:	ee18 2a10 	vmov	r2, s16
 8023952:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023956:	fb92 f3f3 	sdiv	r3, r2, r3
 802395a:	ee18 2a90 	vmov	r2, s17
 802395e:	9329      	str	r3, [sp, #164]	; 0xa4
 8023960:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023962:	fb92 f3f3 	sdiv	r3, r2, r3
 8023966:	932a      	str	r3, [sp, #168]	; 0xa8
 8023968:	9b08      	ldr	r3, [sp, #32]
 802396a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802396c:	3b01      	subs	r3, #1
 802396e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023972:	9308      	str	r3, [sp, #32]
 8023974:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023976:	bf08      	it	eq
 8023978:	4613      	moveq	r3, r2
 802397a:	ee16 6a90 	vmov	r6, s13
 802397e:	9306      	str	r3, [sp, #24]
 8023980:	eef0 8a67 	vmov.f32	s17, s15
 8023984:	eeb0 8a47 	vmov.f32	s16, s14
 8023988:	e6e4      	b.n	8023754 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802398a:	2900      	cmp	r1, #0
 802398c:	f43f af4e 	beq.w	802382c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8023990:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8023994:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023998:	9309      	str	r3, [sp, #36]	; 0x24
 802399a:	e747      	b.n	802382c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 802399c:	f112 0a01 	adds.w	sl, r2, #1
 80239a0:	d481      	bmi.n	80238a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80239a2:	4553      	cmp	r3, sl
 80239a4:	f6ff af7f 	blt.w	80238a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80239a8:	f11c 0a01 	adds.w	sl, ip, #1
 80239ac:	f53f af7b 	bmi.w	80238a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80239b0:	45d6      	cmp	lr, sl
 80239b2:	f6ff af78 	blt.w	80238a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80239b6:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80239ba:	b21b      	sxth	r3, r3
 80239bc:	fa0f f28e 	sxth.w	r2, lr
 80239c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80239c4:	9201      	str	r2, [sp, #4]
 80239c6:	9300      	str	r3, [sp, #0]
 80239c8:	9a07      	ldr	r2, [sp, #28]
 80239ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 80239cc:	463b      	mov	r3, r7
 80239ce:	4641      	mov	r1, r8
 80239d0:	f7ff fdfe 	bl	80235d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80239d4:	e767      	b.n	80238a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80239d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80239d8:	9d07      	ldr	r5, [sp, #28]
 80239da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80239de:	1422      	asrs	r2, r4, #16
 80239e0:	1431      	asrs	r1, r6, #16
 80239e2:	fb03 2101 	mla	r1, r3, r1, r2
 80239e6:	9a07      	ldr	r2, [sp, #28]
 80239e8:	440a      	add	r2, r1
 80239ea:	5c69      	ldrb	r1, [r5, r1]
 80239ec:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80239f0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80239f4:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80239f8:	f1be 0f00 	cmp.w	lr, #0
 80239fc:	d05c      	beq.n	8023ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 80239fe:	f892 c001 	ldrb.w	ip, [r2, #1]
 8023a02:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8023a06:	950d      	str	r5, [sp, #52]	; 0x34
 8023a08:	b150      	cbz	r0, 8023a20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8023a0a:	eb02 0c03 	add.w	ip, r2, r3
 8023a0e:	5cd3      	ldrb	r3, [r2, r3]
 8023a10:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023a14:	930a      	str	r3, [sp, #40]	; 0x28
 8023a16:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023a1a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023a1e:	930e      	str	r3, [sp, #56]	; 0x38
 8023a20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023a22:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023a24:	fb1e f200 	smulbb	r2, lr, r0
 8023a28:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023a2c:	10d2      	asrs	r2, r2, #3
 8023a2e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023a32:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8023a3a:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8023a3e:	9311      	str	r3, [sp, #68]	; 0x44
 8023a40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023a42:	041b      	lsls	r3, r3, #16
 8023a44:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8023a48:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023a4c:	ea43 030b 	orr.w	r3, r3, fp
 8023a50:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023a52:	4353      	muls	r3, r2
 8023a54:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023a58:	fb05 3c0c 	mla	ip, r5, ip, r3
 8023a5c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023a60:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8023a64:	ea43 0b01 	orr.w	fp, r3, r1
 8023a68:	f1c0 0110 	rsb	r1, r0, #16
 8023a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a6e:	eba1 0e0e 	sub.w	lr, r1, lr
 8023a72:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8023a76:	fb0e cc0b 	mla	ip, lr, fp, ip
 8023a7a:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8023a7e:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8023a82:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023a86:	ea4b 0e0e 	orr.w	lr, fp, lr
 8023a8a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023a8e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023a92:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8023a96:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023a9a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023a9e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023aa2:	ea43 0c0c 	orr.w	ip, r3, ip
 8023aa6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023aa8:	f82a cb02 	strh.w	ip, [sl], #2
 8023aac:	441c      	add	r4, r3
 8023aae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023ab0:	f108 38ff 	add.w	r8, r8, #4294967295
 8023ab4:	441e      	add	r6, r3
 8023ab6:	e723      	b.n	8023900 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023ab8:	2800      	cmp	r0, #0
 8023aba:	d0b1      	beq.n	8023a20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8023abc:	5cd3      	ldrb	r3, [r2, r3]
 8023abe:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8023ac4:	e7ac      	b.n	8023a20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8023ac6:	b013      	add	sp, #76	; 0x4c
 8023ac8:	ecbd 8b0a 	vpop	{d8-d12}
 8023acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8023ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ad4:	468b      	mov	fp, r1
 8023ad6:	8809      	ldrh	r1, [r1, #0]
 8023ad8:	b089      	sub	sp, #36	; 0x24
 8023ada:	10cd      	asrs	r5, r1, #3
 8023adc:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8023ae0:	ea4f 2921 	mov.w	r9, r1, asr #8
 8023ae4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023ae8:	00c9      	lsls	r1, r1, #3
 8023aea:	9500      	str	r5, [sp, #0]
 8023aec:	b2c9      	uxtb	r1, r1
 8023aee:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8023af2:	9101      	str	r1, [sp, #4]
 8023af4:	9900      	ldr	r1, [sp, #0]
 8023af6:	9202      	str	r2, [sp, #8]
 8023af8:	fb04 650e 	mla	r5, r4, lr, r6
 8023afc:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8023b00:	eb02 0805 	add.w	r8, r2, r5
 8023b04:	0209      	lsls	r1, r1, #8
 8023b06:	9a01      	ldr	r2, [sp, #4]
 8023b08:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8023b0c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8023b10:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8023b14:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8023b18:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8023b1c:	4311      	orrs	r1, r2
 8023b1e:	2c00      	cmp	r4, #0
 8023b20:	9107      	str	r1, [sp, #28]
 8023b22:	db43      	blt.n	8023bac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8023b24:	45a2      	cmp	sl, r4
 8023b26:	dd41      	ble.n	8023bac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8023b28:	2e00      	cmp	r6, #0
 8023b2a:	db3d      	blt.n	8023ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8023b2c:	45b6      	cmp	lr, r6
 8023b2e:	dd3b      	ble.n	8023ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8023b30:	9a02      	ldr	r2, [sp, #8]
 8023b32:	5d55      	ldrb	r5, [r2, r5]
 8023b34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023b38:	441d      	add	r5, r3
 8023b3a:	1c72      	adds	r2, r6, #1
 8023b3c:	d439      	bmi.n	8023bb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8023b3e:	4596      	cmp	lr, r2
 8023b40:	dd37      	ble.n	8023bb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8023b42:	2f00      	cmp	r7, #0
 8023b44:	d035      	beq.n	8023bb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8023b46:	f898 1001 	ldrb.w	r1, [r8, #1]
 8023b4a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023b4e:	4419      	add	r1, r3
 8023b50:	3401      	adds	r4, #1
 8023b52:	d432      	bmi.n	8023bba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8023b54:	45a2      	cmp	sl, r4
 8023b56:	dd30      	ble.n	8023bba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8023b58:	b378      	cbz	r0, 8023bba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8023b5a:	2e00      	cmp	r6, #0
 8023b5c:	db2b      	blt.n	8023bb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8023b5e:	45b6      	cmp	lr, r6
 8023b60:	dd29      	ble.n	8023bb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8023b62:	f818 400e 	ldrb.w	r4, [r8, lr]
 8023b66:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023b6a:	441c      	add	r4, r3
 8023b6c:	3601      	adds	r6, #1
 8023b6e:	d427      	bmi.n	8023bc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8023b70:	45b6      	cmp	lr, r6
 8023b72:	dd25      	ble.n	8023bc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8023b74:	b327      	cbz	r7, 8023bc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8023b76:	44c6      	add	lr, r8
 8023b78:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023b7c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023b80:	4413      	add	r3, r2
 8023b82:	782a      	ldrb	r2, [r5, #0]
 8023b84:	9202      	str	r2, [sp, #8]
 8023b86:	780a      	ldrb	r2, [r1, #0]
 8023b88:	9203      	str	r2, [sp, #12]
 8023b8a:	7822      	ldrb	r2, [r4, #0]
 8023b8c:	9204      	str	r2, [sp, #16]
 8023b8e:	2f0f      	cmp	r7, #15
 8023b90:	781a      	ldrb	r2, [r3, #0]
 8023b92:	9205      	str	r2, [sp, #20]
 8023b94:	d801      	bhi.n	8023b9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 8023b96:	280f      	cmp	r0, #15
 8023b98:	d914      	bls.n	8023bc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 8023b9a:	4b3f      	ldr	r3, [pc, #252]	; (8023c98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 8023b9c:	4a3f      	ldr	r2, [pc, #252]	; (8023c9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8023b9e:	4840      	ldr	r0, [pc, #256]	; (8023ca0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8023ba0:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8023ba4:	f008 fda0 	bl	802c6e8 <__assert_func>
 8023ba8:	ad07      	add	r5, sp, #28
 8023baa:	e7c6      	b.n	8023b3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 8023bac:	a907      	add	r1, sp, #28
 8023bae:	460d      	mov	r5, r1
 8023bb0:	e7ce      	b.n	8023b50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8023bb2:	a907      	add	r1, sp, #28
 8023bb4:	e7cc      	b.n	8023b50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8023bb6:	ac07      	add	r4, sp, #28
 8023bb8:	e7d8      	b.n	8023b6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 8023bba:	ab07      	add	r3, sp, #28
 8023bbc:	461c      	mov	r4, r3
 8023bbe:	e7e0      	b.n	8023b82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8023bc0:	ab07      	add	r3, sp, #28
 8023bc2:	e7de      	b.n	8023b82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8023bc4:	b2ba      	uxth	r2, r7
 8023bc6:	b280      	uxth	r0, r0
 8023bc8:	fb02 fa00 	mul.w	sl, r2, r0
 8023bcc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023bd0:	0112      	lsls	r2, r2, #4
 8023bd2:	b280      	uxth	r0, r0
 8023bd4:	f891 8002 	ldrb.w	r8, [r1, #2]
 8023bd8:	7849      	ldrb	r1, [r1, #1]
 8023bda:	78ae      	ldrb	r6, [r5, #2]
 8023bdc:	786d      	ldrb	r5, [r5, #1]
 8023bde:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8023be2:	eba2 020a 	sub.w	r2, r2, sl
 8023be6:	b292      	uxth	r2, r2
 8023be8:	ebae 0e00 	sub.w	lr, lr, r0
 8023bec:	fa1f fe8e 	uxth.w	lr, lr
 8023bf0:	4351      	muls	r1, r2
 8023bf2:	fb02 f808 	mul.w	r8, r2, r8
 8023bf6:	fb0e 8806 	mla	r8, lr, r6, r8
 8023bfa:	fb0e 1505 	mla	r5, lr, r5, r1
 8023bfe:	78a6      	ldrb	r6, [r4, #2]
 8023c00:	7861      	ldrb	r1, [r4, #1]
 8023c02:	fa1f f78c 	uxth.w	r7, ip
 8023c06:	fb00 8806 	mla	r8, r0, r6, r8
 8023c0a:	fb00 5501 	mla	r5, r0, r1, r5
 8023c0e:	789e      	ldrb	r6, [r3, #2]
 8023c10:	7859      	ldrb	r1, [r3, #1]
 8023c12:	9b00      	ldr	r3, [sp, #0]
 8023c14:	ea6f 0c0c 	mvn.w	ip, ip
 8023c18:	fa5f fc8c 	uxtb.w	ip, ip
 8023c1c:	fb0a 5101 	mla	r1, sl, r1, r5
 8023c20:	fb13 f50c 	smulbb	r5, r3, ip
 8023c24:	9b03      	ldr	r3, [sp, #12]
 8023c26:	435a      	muls	r2, r3
 8023c28:	9b02      	ldr	r3, [sp, #8]
 8023c2a:	fb0e 2203 	mla	r2, lr, r3, r2
 8023c2e:	9b04      	ldr	r3, [sp, #16]
 8023c30:	fb00 2003 	mla	r0, r0, r3, r2
 8023c34:	9b05      	ldr	r3, [sp, #20]
 8023c36:	fb0a 8606 	mla	r6, sl, r6, r8
 8023c3a:	fb19 f90c 	smulbb	r9, r9, ip
 8023c3e:	fb0a 0a03 	mla	sl, sl, r3, r0
 8023c42:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023c46:	9b01      	ldr	r3, [sp, #4]
 8023c48:	fb06 9607 	mla	r6, r6, r7, r9
 8023c4c:	b2b6      	uxth	r6, r6
 8023c4e:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8023c52:	fb13 fc0c 	smulbb	ip, r3, ip
 8023c56:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023c5a:	fb01 5107 	mla	r1, r1, r7, r5
 8023c5e:	f106 0901 	add.w	r9, r6, #1
 8023c62:	fb0a c707 	mla	r7, sl, r7, ip
 8023c66:	b2bf      	uxth	r7, r7
 8023c68:	b289      	uxth	r1, r1
 8023c6a:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8023c6e:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 8023c72:	1c4d      	adds	r5, r1, #1
 8023c74:	1c7e      	adds	r6, r7, #1
 8023c76:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8023c7a:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8023c7e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8023c82:	0949      	lsrs	r1, r1, #5
 8023c84:	ea46 0609 	orr.w	r6, r6, r9
 8023c88:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023c8c:	430e      	orrs	r6, r1
 8023c8e:	f8ab 6000 	strh.w	r6, [fp]
 8023c92:	b009      	add	sp, #36	; 0x24
 8023c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c98:	08031c31 	.word	0x08031c31
 8023c9c:	080321fa 	.word	0x080321fa
 8023ca0:	08031cb5 	.word	0x08031cb5

08023ca4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ca8:	ed2d 8b08 	vpush	{d8-d11}
 8023cac:	b095      	sub	sp, #84	; 0x54
 8023cae:	eeb0 aa40 	vmov.f32	s20, s0
 8023cb2:	9212      	str	r2, [sp, #72]	; 0x48
 8023cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8023cb6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023cb8:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8023cbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8023cbe:	910e      	str	r1, [sp, #56]	; 0x38
 8023cc0:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023cc4:	9013      	str	r0, [sp, #76]	; 0x4c
 8023cc6:	6850      	ldr	r0, [r2, #4]
 8023cc8:	6812      	ldr	r2, [r2, #0]
 8023cca:	fb00 1303 	mla	r3, r0, r3, r1
 8023cce:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023cd2:	930a      	str	r3, [sp, #40]	; 0x28
 8023cd4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023cd6:	681b      	ldr	r3, [r3, #0]
 8023cd8:	930d      	str	r3, [sp, #52]	; 0x34
 8023cda:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023cdc:	685c      	ldr	r4, [r3, #4]
 8023cde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023ce0:	43db      	mvns	r3, r3
 8023ce2:	b2db      	uxtb	r3, r3
 8023ce4:	eef0 9a60 	vmov.f32	s19, s1
 8023ce8:	eeb0 9a41 	vmov.f32	s18, s2
 8023cec:	eeb0 8a62 	vmov.f32	s16, s5
 8023cf0:	eef0 8a43 	vmov.f32	s17, s6
 8023cf4:	eef0 ba44 	vmov.f32	s23, s8
 8023cf8:	eeb0 ba64 	vmov.f32	s22, s9
 8023cfc:	eef0 aa45 	vmov.f32	s21, s10
 8023d00:	3404      	adds	r4, #4
 8023d02:	930b      	str	r3, [sp, #44]	; 0x2c
 8023d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023d06:	2b00      	cmp	r3, #0
 8023d08:	dc03      	bgt.n	8023d12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023d0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023d0c:	2b00      	cmp	r3, #0
 8023d0e:	f340 8255 	ble.w	80241bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8023d12:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023d14:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023d18:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023d1c:	1e48      	subs	r0, r1, #1
 8023d1e:	1e55      	subs	r5, r2, #1
 8023d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d22:	2b00      	cmp	r3, #0
 8023d24:	f340 80f9 	ble.w	8023f1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8023d28:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8023d2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d2c:	1436      	asrs	r6, r6, #16
 8023d2e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023d32:	d406      	bmi.n	8023d42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023d34:	4286      	cmp	r6, r0
 8023d36:	da04      	bge.n	8023d42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023d38:	2b00      	cmp	r3, #0
 8023d3a:	db02      	blt.n	8023d42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023d3c:	42ab      	cmp	r3, r5
 8023d3e:	f2c0 80ed 	blt.w	8023f1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8023d42:	3601      	adds	r6, #1
 8023d44:	f100 80da 	bmi.w	8023efc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023d48:	42b1      	cmp	r1, r6
 8023d4a:	f2c0 80d7 	blt.w	8023efc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023d4e:	3301      	adds	r3, #1
 8023d50:	f100 80d4 	bmi.w	8023efc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023d54:	429a      	cmp	r2, r3
 8023d56:	f2c0 80d1 	blt.w	8023efc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d5c:	9311      	str	r3, [sp, #68]	; 0x44
 8023d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d60:	930c      	str	r3, [sp, #48]	; 0x30
 8023d62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023d64:	2b00      	cmp	r3, #0
 8023d66:	f340 80fa 	ble.w	8023f5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8023d6a:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8023d6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d6e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023d70:	68c6      	ldr	r6, [r0, #12]
 8023d72:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023d74:	141d      	asrs	r5, r3, #16
 8023d76:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023d7a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023d7c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023d7e:	1400      	asrs	r0, r0, #16
 8023d80:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023d84:	6892      	ldr	r2, [r2, #8]
 8023d86:	f100 813e 	bmi.w	8024006 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023d8a:	1e57      	subs	r7, r2, #1
 8023d8c:	42b8      	cmp	r0, r7
 8023d8e:	f280 813a 	bge.w	8024006 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023d92:	2d00      	cmp	r5, #0
 8023d94:	f2c0 8137 	blt.w	8024006 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023d98:	1e77      	subs	r7, r6, #1
 8023d9a:	42bd      	cmp	r5, r7
 8023d9c:	f280 8133 	bge.w	8024006 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023da0:	b212      	sxth	r2, r2
 8023da2:	fb05 0002 	mla	r0, r5, r2, r0
 8023da6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023da8:	f815 a000 	ldrb.w	sl, [r5, r0]
 8023dac:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8023db0:	182e      	adds	r6, r5, r0
 8023db2:	eb04 050a 	add.w	r5, r4, sl
 8023db6:	2b00      	cmp	r3, #0
 8023db8:	f000 8117 	beq.w	8023fea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8023dbc:	f896 c001 	ldrb.w	ip, [r6, #1]
 8023dc0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023dc4:	44a4      	add	ip, r4
 8023dc6:	2900      	cmp	r1, #0
 8023dc8:	f000 8117 	beq.w	8023ffa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8023dcc:	18b0      	adds	r0, r6, r2
 8023dce:	5cb2      	ldrb	r2, [r6, r2]
 8023dd0:	7840      	ldrb	r0, [r0, #1]
 8023dd2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023dd6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023dda:	4422      	add	r2, r4
 8023ddc:	4420      	add	r0, r4
 8023dde:	b29b      	uxth	r3, r3
 8023de0:	b289      	uxth	r1, r1
 8023de2:	fb03 f901 	mul.w	r9, r3, r1
 8023de6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023dea:	011b      	lsls	r3, r3, #4
 8023dec:	b289      	uxth	r1, r1
 8023dee:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8023df2:	f895 b002 	ldrb.w	fp, [r5, #2]
 8023df6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023df8:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8023dfc:	f8b6 e000 	ldrh.w	lr, [r6]
 8023e00:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8023e04:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8023e08:	eba3 0309 	sub.w	r3, r3, r9
 8023e0c:	b29b      	uxth	r3, r3
 8023e0e:	eba8 0801 	sub.w	r8, r8, r1
 8023e12:	fa1f f888 	uxth.w	r8, r8
 8023e16:	435f      	muls	r7, r3
 8023e18:	fb08 770b 	mla	r7, r8, fp, r7
 8023e1c:	f892 b002 	ldrb.w	fp, [r2, #2]
 8023e20:	9310      	str	r3, [sp, #64]	; 0x40
 8023e22:	fb01 770b 	mla	r7, r1, fp, r7
 8023e26:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023e2c:	fb09 770b 	mla	r7, r9, fp, r7
 8023e30:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8023e34:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8023e38:	fb1b fb03 	smulbb	fp, fp, r3
 8023e3c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023e40:	fb07 b706 	mla	r7, r7, r6, fp
 8023e44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023e46:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023e4a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8023e4e:	f89c c000 	ldrb.w	ip, [ip]
 8023e52:	435d      	muls	r5, r3
 8023e54:	fb08 550b 	mla	r5, r8, fp, r5
 8023e58:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023e5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023e5e:	fb01 550b 	mla	r5, r1, fp, r5
 8023e62:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023e66:	fb09 550b 	mla	r5, r9, fp, r5
 8023e6a:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8023e6e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8023e72:	fb1b fb03 	smulbb	fp, fp, r3
 8023e76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023e78:	fb03 f30c 	mul.w	r3, r3, ip
 8023e7c:	f892 c000 	ldrb.w	ip, [r2]
 8023e80:	fb08 330a 	mla	r3, r8, sl, r3
 8023e84:	fb01 330c 	mla	r3, r1, ip, r3
 8023e88:	f890 c000 	ldrb.w	ip, [r0]
 8023e8c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023e90:	fb09 3c0c 	mla	ip, r9, ip, r3
 8023e94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023e96:	fa5f fe8e 	uxtb.w	lr, lr
 8023e9a:	b2bf      	uxth	r7, r7
 8023e9c:	fb1e fe03 	smulbb	lr, lr, r3
 8023ea0:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023ea4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023ea8:	fb05 b506 	mla	r5, r5, r6, fp
 8023eac:	1c7b      	adds	r3, r7, #1
 8023eae:	fb0c e606 	mla	r6, ip, r6, lr
 8023eb2:	b2ad      	uxth	r5, r5
 8023eb4:	b2b6      	uxth	r6, r6
 8023eb6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8023eba:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8023ebe:	f105 0b01 	add.w	fp, r5, #1
 8023ec2:	1c77      	adds	r7, r6, #1
 8023ec4:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8023ec8:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023ecc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023ed0:	096d      	lsrs	r5, r5, #5
 8023ed2:	431f      	orrs	r7, r3
 8023ed4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023eda:	433d      	orrs	r5, r7
 8023edc:	801d      	strh	r5, [r3, #0]
 8023ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023ee0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023ee2:	3302      	adds	r3, #2
 8023ee4:	930c      	str	r3, [sp, #48]	; 0x30
 8023ee6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023ee8:	4413      	add	r3, r2
 8023eea:	9327      	str	r3, [sp, #156]	; 0x9c
 8023eec:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023eee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023ef0:	4413      	add	r3, r2
 8023ef2:	9328      	str	r3, [sp, #160]	; 0xa0
 8023ef4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023ef6:	3b01      	subs	r3, #1
 8023ef8:	9311      	str	r3, [sp, #68]	; 0x44
 8023efa:	e732      	b.n	8023d62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023efc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023efe:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8023f00:	4433      	add	r3, r6
 8023f02:	9327      	str	r3, [sp, #156]	; 0x9c
 8023f04:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8023f06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023f08:	4433      	add	r3, r6
 8023f0a:	9328      	str	r3, [sp, #160]	; 0xa0
 8023f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f0e:	3b01      	subs	r3, #1
 8023f10:	9309      	str	r3, [sp, #36]	; 0x24
 8023f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f14:	3302      	adds	r3, #2
 8023f16:	930a      	str	r3, [sp, #40]	; 0x28
 8023f18:	e702      	b.n	8023d20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023f1a:	d027      	beq.n	8023f6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8023f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f1e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023f20:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8023f22:	3b01      	subs	r3, #1
 8023f24:	fb00 5003 	mla	r0, r0, r3, r5
 8023f28:	1400      	asrs	r0, r0, #16
 8023f2a:	f53f af16 	bmi.w	8023d5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023f2e:	3901      	subs	r1, #1
 8023f30:	4288      	cmp	r0, r1
 8023f32:	f6bf af12 	bge.w	8023d5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023f36:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023f38:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8023f3a:	fb01 0303 	mla	r3, r1, r3, r0
 8023f3e:	141b      	asrs	r3, r3, #16
 8023f40:	f53f af0b 	bmi.w	8023d5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023f44:	3a01      	subs	r2, #1
 8023f46:	4293      	cmp	r3, r2
 8023f48:	f6bf af07 	bge.w	8023d5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f4e:	9311      	str	r3, [sp, #68]	; 0x44
 8023f50:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8023f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f56:	930c      	str	r3, [sp, #48]	; 0x30
 8023f58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023f5a:	2b00      	cmp	r3, #0
 8023f5c:	dc70      	bgt.n	8024040 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8023f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023f62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023f66:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8023f6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023f6e:	2b00      	cmp	r3, #0
 8023f70:	f340 8124 	ble.w	80241bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8023f74:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023f78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023f7c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023f80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023f82:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023f86:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023f8a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023f8e:	eef0 6a48 	vmov.f32	s13, s16
 8023f92:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023f96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f9a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023f9e:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8023fa2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023fa6:	eef0 6a68 	vmov.f32	s13, s17
 8023faa:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023fae:	ee18 2a10 	vmov	r2, s16
 8023fb2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023fb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8023fba:	ee18 2a90 	vmov	r2, s17
 8023fbe:	9329      	str	r3, [sp, #164]	; 0xa4
 8023fc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023fc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8023fc6:	932a      	str	r3, [sp, #168]	; 0xa8
 8023fc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023fca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023fcc:	3b01      	subs	r3, #1
 8023fce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023fd2:	930e      	str	r3, [sp, #56]	; 0x38
 8023fd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023fd6:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8023fda:	bf08      	it	eq
 8023fdc:	4613      	moveq	r3, r2
 8023fde:	9309      	str	r3, [sp, #36]	; 0x24
 8023fe0:	eef0 8a67 	vmov.f32	s17, s15
 8023fe4:	eeb0 8a47 	vmov.f32	s16, s14
 8023fe8:	e68c      	b.n	8023d04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8023fea:	b149      	cbz	r1, 8024000 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8023fec:	5cb2      	ldrb	r2, [r6, r2]
 8023fee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023ff2:	4422      	add	r2, r4
 8023ff4:	4628      	mov	r0, r5
 8023ff6:	46ac      	mov	ip, r5
 8023ff8:	e6f1      	b.n	8023dde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023ffa:	4628      	mov	r0, r5
 8023ffc:	462a      	mov	r2, r5
 8023ffe:	e6ee      	b.n	8023dde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024000:	4628      	mov	r0, r5
 8024002:	462a      	mov	r2, r5
 8024004:	e7f7      	b.n	8023ff6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8024006:	1c47      	adds	r7, r0, #1
 8024008:	f53f af69 	bmi.w	8023ede <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802400c:	42ba      	cmp	r2, r7
 802400e:	f6ff af66 	blt.w	8023ede <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024012:	1c6f      	adds	r7, r5, #1
 8024014:	f53f af63 	bmi.w	8023ede <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024018:	42be      	cmp	r6, r7
 802401a:	f6ff af60 	blt.w	8023ede <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802401e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8024020:	9002      	str	r0, [sp, #8]
 8024022:	b236      	sxth	r6, r6
 8024024:	b212      	sxth	r2, r2
 8024026:	e9cd 1705 	strd	r1, r7, [sp, #20]
 802402a:	e9cd 5303 	strd	r5, r3, [sp, #12]
 802402e:	9200      	str	r2, [sp, #0]
 8024030:	9601      	str	r6, [sp, #4]
 8024032:	4623      	mov	r3, r4
 8024034:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8024038:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802403a:	f7ff fd49 	bl	8023ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 802403e:	e74e      	b.n	8023ede <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024040:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8024042:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8024044:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8024046:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024048:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802404c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802404e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024052:	142d      	asrs	r5, r5, #16
 8024054:	1400      	asrs	r0, r0, #16
 8024056:	fb02 5000 	mla	r0, r2, r0, r5
 802405a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802405c:	f815 9000 	ldrb.w	r9, [r5, r0]
 8024060:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024064:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8024068:	182e      	adds	r6, r5, r0
 802406a:	eb04 0509 	add.w	r5, r4, r9
 802406e:	2b00      	cmp	r3, #0
 8024070:	f000 8096 	beq.w	80241a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 8024074:	7877      	ldrb	r7, [r6, #1]
 8024076:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802407a:	4427      	add	r7, r4
 802407c:	2900      	cmp	r1, #0
 802407e:	f000 8097 	beq.w	80241b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8024082:	18b0      	adds	r0, r6, r2
 8024084:	5cb2      	ldrb	r2, [r6, r2]
 8024086:	7840      	ldrb	r0, [r0, #1]
 8024088:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802408c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024090:	4422      	add	r2, r4
 8024092:	4420      	add	r0, r4
 8024094:	b29b      	uxth	r3, r3
 8024096:	b289      	uxth	r1, r1
 8024098:	fb03 f801 	mul.w	r8, r3, r1
 802409c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802409e:	f895 b002 	ldrb.w	fp, [r5, #2]
 80240a2:	f8b6 c000 	ldrh.w	ip, [r6]
 80240a6:	78be      	ldrb	r6, [r7, #2]
 80240a8:	f814 9009 	ldrb.w	r9, [r4, r9]
 80240ac:	011b      	lsls	r3, r3, #4
 80240ae:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80240b2:	b289      	uxth	r1, r1
 80240b4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80240b8:	eba3 0308 	sub.w	r3, r3, r8
 80240bc:	b29b      	uxth	r3, r3
 80240be:	ebae 0e01 	sub.w	lr, lr, r1
 80240c2:	fa1f fe8e 	uxth.w	lr, lr
 80240c6:	435e      	muls	r6, r3
 80240c8:	fb0e 660b 	mla	r6, lr, fp, r6
 80240cc:	f892 b002 	ldrb.w	fp, [r2, #2]
 80240d0:	9310      	str	r3, [sp, #64]	; 0x40
 80240d2:	fb01 660b 	mla	r6, r1, fp, r6
 80240d6:	f890 b002 	ldrb.w	fp, [r0, #2]
 80240da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80240dc:	fb08 660b 	mla	r6, r8, fp, r6
 80240e0:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 80240e4:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80240e8:	fb1b fb03 	smulbb	fp, fp, r3
 80240ec:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80240f0:	fb06 b60a 	mla	r6, r6, sl, fp
 80240f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80240f6:	f895 b001 	ldrb.w	fp, [r5, #1]
 80240fa:	787d      	ldrb	r5, [r7, #1]
 80240fc:	783f      	ldrb	r7, [r7, #0]
 80240fe:	435d      	muls	r5, r3
 8024100:	fb0e 550b 	mla	r5, lr, fp, r5
 8024104:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802410a:	fb01 550b 	mla	r5, r1, fp, r5
 802410e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024112:	fb08 550b 	mla	r5, r8, fp, r5
 8024116:	ea4f 0bec 	mov.w	fp, ip, asr #3
 802411a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802411e:	fb1b fb03 	smulbb	fp, fp, r3
 8024122:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024124:	437b      	muls	r3, r7
 8024126:	7817      	ldrb	r7, [r2, #0]
 8024128:	fb0e 3309 	mla	r3, lr, r9, r3
 802412c:	fb01 3307 	mla	r3, r1, r7, r3
 8024130:	7807      	ldrb	r7, [r0, #0]
 8024132:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024136:	fb08 3707 	mla	r7, r8, r7, r3
 802413a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802413c:	fa5f fc8c 	uxtb.w	ip, ip
 8024140:	fb1c fc03 	smulbb	ip, ip, r3
 8024144:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024148:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802414c:	fb05 b50a 	mla	r5, r5, sl, fp
 8024150:	fb07 c70a 	mla	r7, r7, sl, ip
 8024154:	b2b6      	uxth	r6, r6
 8024156:	b2ad      	uxth	r5, r5
 8024158:	b2bf      	uxth	r7, r7
 802415a:	1c73      	adds	r3, r6, #1
 802415c:	1c7a      	adds	r2, r7, #1
 802415e:	f105 0b01 	add.w	fp, r5, #1
 8024162:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024166:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802416a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 802416e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024172:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8024176:	096d      	lsrs	r5, r5, #5
 8024178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802417a:	4316      	orrs	r6, r2
 802417c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024180:	432e      	orrs	r6, r5
 8024182:	f823 6b02 	strh.w	r6, [r3], #2
 8024186:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024188:	930c      	str	r3, [sp, #48]	; 0x30
 802418a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802418c:	4413      	add	r3, r2
 802418e:	9327      	str	r3, [sp, #156]	; 0x9c
 8024190:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024192:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024194:	4413      	add	r3, r2
 8024196:	9328      	str	r3, [sp, #160]	; 0xa0
 8024198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802419a:	3b01      	subs	r3, #1
 802419c:	9311      	str	r3, [sp, #68]	; 0x44
 802419e:	e6db      	b.n	8023f58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 80241a0:	b149      	cbz	r1, 80241b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 80241a2:	5cb2      	ldrb	r2, [r6, r2]
 80241a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80241a8:	4422      	add	r2, r4
 80241aa:	4628      	mov	r0, r5
 80241ac:	462f      	mov	r7, r5
 80241ae:	e771      	b.n	8024094 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 80241b0:	4628      	mov	r0, r5
 80241b2:	462a      	mov	r2, r5
 80241b4:	e76e      	b.n	8024094 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 80241b6:	4628      	mov	r0, r5
 80241b8:	462a      	mov	r2, r5
 80241ba:	e7f7      	b.n	80241ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80241bc:	b015      	add	sp, #84	; 0x54
 80241be:	ecbd 8b08 	vpop	{d8-d11}
 80241c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080241c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 80241c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241cc:	880e      	ldrh	r6, [r1, #0]
 80241ce:	b085      	sub	sp, #20
 80241d0:	0230      	lsls	r0, r6, #8
 80241d2:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80241d6:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 80241da:	0170      	lsls	r0, r6, #5
 80241dc:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80241e0:	9101      	str	r1, [sp, #4]
 80241e2:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 80241e6:	00f6      	lsls	r6, r6, #3
 80241e8:	ea4b 0000 	orr.w	r0, fp, r0
 80241ec:	b2f6      	uxtb	r6, r6
 80241ee:	4691      	mov	r9, r2
 80241f0:	fb05 7a0c 	mla	sl, r5, ip, r7
 80241f4:	4306      	orrs	r6, r0
 80241f6:	2d00      	cmp	r5, #0
 80241f8:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80241fc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8024200:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8024204:	9603      	str	r6, [sp, #12]
 8024206:	eb09 0e0a 	add.w	lr, r9, sl
 802420a:	db42      	blt.n	8024292 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 802420c:	45a8      	cmp	r8, r5
 802420e:	dd40      	ble.n	8024292 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8024210:	2f00      	cmp	r7, #0
 8024212:	db3c      	blt.n	802428e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8024214:	45bc      	cmp	ip, r7
 8024216:	dd3a      	ble.n	802428e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8024218:	f819 600a 	ldrb.w	r6, [r9, sl]
 802421c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024220:	441e      	add	r6, r3
 8024222:	1c78      	adds	r0, r7, #1
 8024224:	d438      	bmi.n	8024298 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8024226:	4584      	cmp	ip, r0
 8024228:	dd36      	ble.n	8024298 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 802422a:	b3aa      	cbz	r2, 8024298 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 802422c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024230:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024234:	4418      	add	r0, r3
 8024236:	3501      	adds	r5, #1
 8024238:	d432      	bmi.n	80242a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 802423a:	45a8      	cmp	r8, r5
 802423c:	dd30      	ble.n	80242a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 802423e:	b37c      	cbz	r4, 80242a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8024240:	2f00      	cmp	r7, #0
 8024242:	db2b      	blt.n	802429c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8024244:	45bc      	cmp	ip, r7
 8024246:	dd29      	ble.n	802429c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8024248:	f81e 500c 	ldrb.w	r5, [lr, ip]
 802424c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024250:	441d      	add	r5, r3
 8024252:	3701      	adds	r7, #1
 8024254:	d427      	bmi.n	80242a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024256:	45bc      	cmp	ip, r7
 8024258:	dd25      	ble.n	80242a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 802425a:	b322      	cbz	r2, 80242a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 802425c:	44f4      	add	ip, lr
 802425e:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8024262:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024266:	443b      	add	r3, r7
 8024268:	781f      	ldrb	r7, [r3, #0]
 802426a:	f896 9000 	ldrb.w	r9, [r6]
 802426e:	f890 a000 	ldrb.w	sl, [r0]
 8024272:	f895 8000 	ldrb.w	r8, [r5]
 8024276:	2a0f      	cmp	r2, #15
 8024278:	4639      	mov	r1, r7
 802427a:	d801      	bhi.n	8024280 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 802427c:	2c0f      	cmp	r4, #15
 802427e:	d914      	bls.n	80242aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 8024280:	4b2c      	ldr	r3, [pc, #176]	; (8024334 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8024282:	4a2d      	ldr	r2, [pc, #180]	; (8024338 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8024284:	482d      	ldr	r0, [pc, #180]	; (802433c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 8024286:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 802428a:	f008 fa2d 	bl	802c6e8 <__assert_func>
 802428e:	ae03      	add	r6, sp, #12
 8024290:	e7c7      	b.n	8024222 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8024292:	a803      	add	r0, sp, #12
 8024294:	4606      	mov	r6, r0
 8024296:	e7ce      	b.n	8024236 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024298:	a803      	add	r0, sp, #12
 802429a:	e7cc      	b.n	8024236 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802429c:	ad03      	add	r5, sp, #12
 802429e:	e7d8      	b.n	8024252 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 80242a0:	ab03      	add	r3, sp, #12
 80242a2:	461d      	mov	r5, r3
 80242a4:	e7e0      	b.n	8024268 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 80242a6:	ab03      	add	r3, sp, #12
 80242a8:	e7de      	b.n	8024268 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 80242aa:	b292      	uxth	r2, r2
 80242ac:	b2a4      	uxth	r4, r4
 80242ae:	fb02 fe04 	mul.w	lr, r2, r4
 80242b2:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 80242b6:	0112      	lsls	r2, r2, #4
 80242b8:	b2a4      	uxth	r4, r4
 80242ba:	f890 c002 	ldrb.w	ip, [r0, #2]
 80242be:	f896 b002 	ldrb.w	fp, [r6, #2]
 80242c2:	7840      	ldrb	r0, [r0, #1]
 80242c4:	7876      	ldrb	r6, [r6, #1]
 80242c6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80242ca:	eba2 020e 	sub.w	r2, r2, lr
 80242ce:	b292      	uxth	r2, r2
 80242d0:	1b3f      	subs	r7, r7, r4
 80242d2:	b2bf      	uxth	r7, r7
 80242d4:	fb02 fc0c 	mul.w	ip, r2, ip
 80242d8:	fb07 cc0b 	mla	ip, r7, fp, ip
 80242dc:	f895 b002 	ldrb.w	fp, [r5, #2]
 80242e0:	fb04 cc0b 	mla	ip, r4, fp, ip
 80242e4:	f893 b002 	ldrb.w	fp, [r3, #2]
 80242e8:	785b      	ldrb	r3, [r3, #1]
 80242ea:	fb0e cc0b 	mla	ip, lr, fp, ip
 80242ee:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80242f2:	fb02 fc0a 	mul.w	ip, r2, sl
 80242f6:	4342      	muls	r2, r0
 80242f8:	7868      	ldrb	r0, [r5, #1]
 80242fa:	fb07 cc09 	mla	ip, r7, r9, ip
 80242fe:	fb07 2206 	mla	r2, r7, r6, r2
 8024302:	fb04 cc08 	mla	ip, r4, r8, ip
 8024306:	fb04 2400 	mla	r4, r4, r0, r2
 802430a:	fb0e cc01 	mla	ip, lr, r1, ip
 802430e:	fb0e 4e03 	mla	lr, lr, r3, r4
 8024312:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024316:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802431a:	ea4c 0c0b 	orr.w	ip, ip, fp
 802431e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8024322:	9b01      	ldr	r3, [sp, #4]
 8024324:	ea4c 0c0e 	orr.w	ip, ip, lr
 8024328:	f8a3 c000 	strh.w	ip, [r3]
 802432c:	b005      	add	sp, #20
 802432e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024332:	bf00      	nop
 8024334:	08031c31 	.word	0x08031c31
 8024338:	080321fa 	.word	0x080321fa
 802433c:	08031cb5 	.word	0x08031cb5

08024340 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024344:	ed2d 8b08 	vpush	{d8-d11}
 8024348:	b08f      	sub	sp, #60	; 0x3c
 802434a:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 802434e:	920c      	str	r2, [sp, #48]	; 0x30
 8024350:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024352:	910a      	str	r1, [sp, #40]	; 0x28
 8024354:	9306      	str	r3, [sp, #24]
 8024356:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802435a:	900d      	str	r0, [sp, #52]	; 0x34
 802435c:	6850      	ldr	r0, [r2, #4]
 802435e:	6812      	ldr	r2, [r2, #0]
 8024360:	fb00 1303 	mla	r3, r0, r3, r1
 8024364:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024368:	9307      	str	r3, [sp, #28]
 802436a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802436c:	681b      	ldr	r3, [r3, #0]
 802436e:	9308      	str	r3, [sp, #32]
 8024370:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024372:	685c      	ldr	r4, [r3, #4]
 8024374:	eeb0 aa40 	vmov.f32	s20, s0
 8024378:	eef0 9a60 	vmov.f32	s19, s1
 802437c:	eeb0 9a41 	vmov.f32	s18, s2
 8024380:	eeb0 8a62 	vmov.f32	s16, s5
 8024384:	eef0 8a43 	vmov.f32	s17, s6
 8024388:	eef0 ba44 	vmov.f32	s23, s8
 802438c:	eeb0 ba64 	vmov.f32	s22, s9
 8024390:	eef0 aa45 	vmov.f32	s21, s10
 8024394:	3404      	adds	r4, #4
 8024396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024398:	2b00      	cmp	r3, #0
 802439a:	dc03      	bgt.n	80243a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802439c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802439e:	2b00      	cmp	r3, #0
 80243a0:	f340 81d6 	ble.w	8024750 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80243a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80243a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80243aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80243ae:	1e48      	subs	r0, r1, #1
 80243b0:	1e56      	subs	r6, r2, #1
 80243b2:	9b06      	ldr	r3, [sp, #24]
 80243b4:	2b00      	cmp	r3, #0
 80243b6:	f340 80b7 	ble.w	8024528 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80243ba:	ea5f 472b 	movs.w	r7, fp, asr #16
 80243be:	ea4f 4325 	mov.w	r3, r5, asr #16
 80243c2:	d406      	bmi.n	80243d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80243c4:	4287      	cmp	r7, r0
 80243c6:	da04      	bge.n	80243d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80243c8:	2b00      	cmp	r3, #0
 80243ca:	db02      	blt.n	80243d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80243cc:	42b3      	cmp	r3, r6
 80243ce:	f2c0 80ac 	blt.w	802452a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80243d2:	3701      	adds	r7, #1
 80243d4:	f100 809d 	bmi.w	8024512 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80243d8:	42b9      	cmp	r1, r7
 80243da:	f2c0 809a 	blt.w	8024512 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80243de:	3301      	adds	r3, #1
 80243e0:	f100 8097 	bmi.w	8024512 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80243e4:	429a      	cmp	r2, r3
 80243e6:	f2c0 8094 	blt.w	8024512 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80243ea:	9b06      	ldr	r3, [sp, #24]
 80243ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80243ee:	9b07      	ldr	r3, [sp, #28]
 80243f0:	9309      	str	r3, [sp, #36]	; 0x24
 80243f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80243f4:	2b00      	cmp	r3, #0
 80243f6:	f340 80b5 	ble.w	8024564 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80243fa:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80243fc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80243fe:	68c7      	ldr	r7, [r0, #12]
 8024400:	6892      	ldr	r2, [r2, #8]
 8024402:	ea5f 402b 	movs.w	r0, fp, asr #16
 8024406:	ea4f 4625 	mov.w	r6, r5, asr #16
 802440a:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802440e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024412:	f100 80fb 	bmi.w	802460c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8024416:	f102 3cff 	add.w	ip, r2, #4294967295
 802441a:	4560      	cmp	r0, ip
 802441c:	f280 80f6 	bge.w	802460c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8024420:	2e00      	cmp	r6, #0
 8024422:	f2c0 80f3 	blt.w	802460c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8024426:	f107 3cff 	add.w	ip, r7, #4294967295
 802442a:	4566      	cmp	r6, ip
 802442c:	f280 80ee 	bge.w	802460c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8024430:	b212      	sxth	r2, r2
 8024432:	fb06 0002 	mla	r0, r6, r2, r0
 8024436:	9e08      	ldr	r6, [sp, #32]
 8024438:	1837      	adds	r7, r6, r0
 802443a:	5c30      	ldrb	r0, [r6, r0]
 802443c:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8024440:	eb04 0c08 	add.w	ip, r4, r8
 8024444:	2b00      	cmp	r3, #0
 8024446:	f000 80d3 	beq.w	80245f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802444a:	787e      	ldrb	r6, [r7, #1]
 802444c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024450:	4426      	add	r6, r4
 8024452:	2900      	cmp	r1, #0
 8024454:	f000 80d4 	beq.w	8024600 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 8024458:	18b8      	adds	r0, r7, r2
 802445a:	5cba      	ldrb	r2, [r7, r2]
 802445c:	7840      	ldrb	r0, [r0, #1]
 802445e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024462:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024466:	4422      	add	r2, r4
 8024468:	4420      	add	r0, r4
 802446a:	b29b      	uxth	r3, r3
 802446c:	b289      	uxth	r1, r1
 802446e:	fb03 f901 	mul.w	r9, r3, r1
 8024472:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024476:	011b      	lsls	r3, r3, #4
 8024478:	b289      	uxth	r1, r1
 802447a:	78b7      	ldrb	r7, [r6, #2]
 802447c:	f89c a002 	ldrb.w	sl, [ip, #2]
 8024480:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024484:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024488:	eba3 0309 	sub.w	r3, r3, r9
 802448c:	b29b      	uxth	r3, r3
 802448e:	ebae 0e01 	sub.w	lr, lr, r1
 8024492:	fa1f fe8e 	uxth.w	lr, lr
 8024496:	435f      	muls	r7, r3
 8024498:	fb0e 770a 	mla	r7, lr, sl, r7
 802449c:	f892 a002 	ldrb.w	sl, [r2, #2]
 80244a0:	fb01 770a 	mla	r7, r1, sl, r7
 80244a4:	f890 a002 	ldrb.w	sl, [r0, #2]
 80244a8:	fb09 7a0a 	mla	sl, r9, sl, r7
 80244ac:	f814 7008 	ldrb.w	r7, [r4, r8]
 80244b0:	f896 8000 	ldrb.w	r8, [r6]
 80244b4:	7876      	ldrb	r6, [r6, #1]
 80244b6:	fb03 f808 	mul.w	r8, r3, r8
 80244ba:	fb0e 8807 	mla	r8, lr, r7, r8
 80244be:	7817      	ldrb	r7, [r2, #0]
 80244c0:	fb01 8807 	mla	r8, r1, r7, r8
 80244c4:	7807      	ldrb	r7, [r0, #0]
 80244c6:	fb09 8707 	mla	r7, r9, r7, r8
 80244ca:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80244ce:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80244d2:	ea47 070a 	orr.w	r7, r7, sl
 80244d6:	4373      	muls	r3, r6
 80244d8:	f892 a001 	ldrb.w	sl, [r2, #1]
 80244dc:	fb0e 330c 	mla	r3, lr, ip, r3
 80244e0:	fb01 310a 	mla	r1, r1, sl, r3
 80244e4:	f890 a001 	ldrb.w	sl, [r0, #1]
 80244e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80244ea:	fb09 1a0a 	mla	sl, r9, sl, r1
 80244ee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80244f2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80244f6:	ea47 070a 	orr.w	r7, r7, sl
 80244fa:	801f      	strh	r7, [r3, #0]
 80244fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80244fe:	3302      	adds	r3, #2
 8024500:	9309      	str	r3, [sp, #36]	; 0x24
 8024502:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024504:	449b      	add	fp, r3
 8024506:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024508:	441d      	add	r5, r3
 802450a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802450c:	3b01      	subs	r3, #1
 802450e:	930b      	str	r3, [sp, #44]	; 0x2c
 8024510:	e76f      	b.n	80243f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024512:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024514:	449b      	add	fp, r3
 8024516:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024518:	441d      	add	r5, r3
 802451a:	9b06      	ldr	r3, [sp, #24]
 802451c:	3b01      	subs	r3, #1
 802451e:	9306      	str	r3, [sp, #24]
 8024520:	9b07      	ldr	r3, [sp, #28]
 8024522:	3302      	adds	r3, #2
 8024524:	9307      	str	r3, [sp, #28]
 8024526:	e744      	b.n	80243b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024528:	d023      	beq.n	8024572 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802452a:	9b06      	ldr	r3, [sp, #24]
 802452c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802452e:	3b01      	subs	r3, #1
 8024530:	fb00 b003 	mla	r0, r0, r3, fp
 8024534:	1400      	asrs	r0, r0, #16
 8024536:	f53f af58 	bmi.w	80243ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802453a:	3901      	subs	r1, #1
 802453c:	4288      	cmp	r0, r1
 802453e:	f6bf af54 	bge.w	80243ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024542:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024544:	fb01 5303 	mla	r3, r1, r3, r5
 8024548:	141b      	asrs	r3, r3, #16
 802454a:	f53f af4e 	bmi.w	80243ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802454e:	3a01      	subs	r2, #1
 8024550:	4293      	cmp	r3, r2
 8024552:	f6bf af4a 	bge.w	80243ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024556:	9b06      	ldr	r3, [sp, #24]
 8024558:	9309      	str	r3, [sp, #36]	; 0x24
 802455a:	9b07      	ldr	r3, [sp, #28]
 802455c:	930b      	str	r3, [sp, #44]	; 0x2c
 802455e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024560:	2b00      	cmp	r3, #0
 8024562:	dc70      	bgt.n	8024646 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024564:	9b06      	ldr	r3, [sp, #24]
 8024566:	9a07      	ldr	r2, [sp, #28]
 8024568:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802456c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024570:	9307      	str	r3, [sp, #28]
 8024572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024574:	2b00      	cmp	r3, #0
 8024576:	f340 80eb 	ble.w	8024750 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 802457a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802457e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024582:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024586:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024588:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802458c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024590:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024594:	eef0 6a48 	vmov.f32	s13, s16
 8024598:	ee69 7a27 	vmul.f32	s15, s18, s15
 802459c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80245a0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80245a4:	ee16 ba90 	vmov	fp, s13
 80245a8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80245ac:	eef0 6a68 	vmov.f32	s13, s17
 80245b0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80245b4:	ee18 2a10 	vmov	r2, s16
 80245b8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80245bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80245c0:	ee18 2a90 	vmov	r2, s17
 80245c4:	9323      	str	r3, [sp, #140]	; 0x8c
 80245c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80245c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80245cc:	9324      	str	r3, [sp, #144]	; 0x90
 80245ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80245d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80245d2:	3b01      	subs	r3, #1
 80245d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80245d8:	930a      	str	r3, [sp, #40]	; 0x28
 80245da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80245dc:	bf08      	it	eq
 80245de:	4613      	moveq	r3, r2
 80245e0:	ee16 5a90 	vmov	r5, s13
 80245e4:	9306      	str	r3, [sp, #24]
 80245e6:	eef0 8a67 	vmov.f32	s17, s15
 80245ea:	eeb0 8a47 	vmov.f32	s16, s14
 80245ee:	e6d2      	b.n	8024396 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80245f0:	b149      	cbz	r1, 8024606 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80245f2:	5cba      	ldrb	r2, [r7, r2]
 80245f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80245f8:	4422      	add	r2, r4
 80245fa:	4660      	mov	r0, ip
 80245fc:	4666      	mov	r6, ip
 80245fe:	e734      	b.n	802446a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8024600:	4660      	mov	r0, ip
 8024602:	4662      	mov	r2, ip
 8024604:	e731      	b.n	802446a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8024606:	4660      	mov	r0, ip
 8024608:	4662      	mov	r2, ip
 802460a:	e7f7      	b.n	80245fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 802460c:	f110 0c01 	adds.w	ip, r0, #1
 8024610:	f53f af74 	bmi.w	80244fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024614:	4562      	cmp	r2, ip
 8024616:	f6ff af71 	blt.w	80244fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802461a:	f116 0c01 	adds.w	ip, r6, #1
 802461e:	f53f af6d 	bmi.w	80244fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024622:	4567      	cmp	r7, ip
 8024624:	f6ff af6a 	blt.w	80244fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024628:	b23f      	sxth	r7, r7
 802462a:	b212      	sxth	r2, r2
 802462c:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8024630:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8024634:	9200      	str	r2, [sp, #0]
 8024636:	9701      	str	r7, [sp, #4]
 8024638:	4623      	mov	r3, r4
 802463a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802463e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024640:	f7ff fdc2 	bl	80241c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8024644:	e75a      	b.n	80244fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024646:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8024648:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802464c:	ea4f 462b 	mov.w	r6, fp, asr #16
 8024650:	1428      	asrs	r0, r5, #16
 8024652:	fb02 6000 	mla	r0, r2, r0, r6
 8024656:	9e08      	ldr	r6, [sp, #32]
 8024658:	f816 8000 	ldrb.w	r8, [r6, r0]
 802465c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024660:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024664:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024668:	1837      	adds	r7, r6, r0
 802466a:	eb04 0c08 	add.w	ip, r4, r8
 802466e:	2b00      	cmp	r3, #0
 8024670:	d060      	beq.n	8024734 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8024672:	787e      	ldrb	r6, [r7, #1]
 8024674:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024678:	4426      	add	r6, r4
 802467a:	2900      	cmp	r1, #0
 802467c:	d062      	beq.n	8024744 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 802467e:	18b8      	adds	r0, r7, r2
 8024680:	5cba      	ldrb	r2, [r7, r2]
 8024682:	7840      	ldrb	r0, [r0, #1]
 8024684:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024688:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802468c:	4422      	add	r2, r4
 802468e:	4420      	add	r0, r4
 8024690:	b29b      	uxth	r3, r3
 8024692:	b289      	uxth	r1, r1
 8024694:	fb03 f901 	mul.w	r9, r3, r1
 8024698:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802469c:	011b      	lsls	r3, r3, #4
 802469e:	b289      	uxth	r1, r1
 80246a0:	78b7      	ldrb	r7, [r6, #2]
 80246a2:	f89c a002 	ldrb.w	sl, [ip, #2]
 80246a6:	f89c c001 	ldrb.w	ip, [ip, #1]
 80246aa:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80246ae:	eba3 0309 	sub.w	r3, r3, r9
 80246b2:	b29b      	uxth	r3, r3
 80246b4:	ebae 0e01 	sub.w	lr, lr, r1
 80246b8:	fa1f fe8e 	uxth.w	lr, lr
 80246bc:	435f      	muls	r7, r3
 80246be:	fb0e 770a 	mla	r7, lr, sl, r7
 80246c2:	f892 a002 	ldrb.w	sl, [r2, #2]
 80246c6:	fb01 770a 	mla	r7, r1, sl, r7
 80246ca:	f890 a002 	ldrb.w	sl, [r0, #2]
 80246ce:	fb09 7a0a 	mla	sl, r9, sl, r7
 80246d2:	f814 7008 	ldrb.w	r7, [r4, r8]
 80246d6:	f896 8000 	ldrb.w	r8, [r6]
 80246da:	7876      	ldrb	r6, [r6, #1]
 80246dc:	fb03 f808 	mul.w	r8, r3, r8
 80246e0:	fb0e 8807 	mla	r8, lr, r7, r8
 80246e4:	7817      	ldrb	r7, [r2, #0]
 80246e6:	fb01 8807 	mla	r8, r1, r7, r8
 80246ea:	7807      	ldrb	r7, [r0, #0]
 80246ec:	fb09 8707 	mla	r7, r9, r7, r8
 80246f0:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80246f4:	4373      	muls	r3, r6
 80246f6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80246fa:	7856      	ldrb	r6, [r2, #1]
 80246fc:	ea47 070a 	orr.w	r7, r7, sl
 8024700:	fb0e 330c 	mla	r3, lr, ip, r3
 8024704:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024708:	fb01 3306 	mla	r3, r1, r6, r3
 802470c:	fb09 3a0a 	mla	sl, r9, sl, r3
 8024710:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024716:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802471a:	ea47 070a 	orr.w	r7, r7, sl
 802471e:	f823 7b02 	strh.w	r7, [r3], #2
 8024722:	930b      	str	r3, [sp, #44]	; 0x2c
 8024724:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024726:	449b      	add	fp, r3
 8024728:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802472a:	441d      	add	r5, r3
 802472c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802472e:	3b01      	subs	r3, #1
 8024730:	9309      	str	r3, [sp, #36]	; 0x24
 8024732:	e714      	b.n	802455e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8024734:	b149      	cbz	r1, 802474a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8024736:	5cba      	ldrb	r2, [r7, r2]
 8024738:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802473c:	4422      	add	r2, r4
 802473e:	4660      	mov	r0, ip
 8024740:	4666      	mov	r6, ip
 8024742:	e7a5      	b.n	8024690 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024744:	4660      	mov	r0, ip
 8024746:	4662      	mov	r2, ip
 8024748:	e7a2      	b.n	8024690 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802474a:	4660      	mov	r0, ip
 802474c:	4662      	mov	r2, ip
 802474e:	e7f7      	b.n	8024740 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8024750:	b00f      	add	sp, #60	; 0x3c
 8024752:	ecbd 8b08 	vpop	{d8-d11}
 8024756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802475c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 802475c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024760:	880e      	ldrh	r6, [r1, #0]
 8024762:	b085      	sub	sp, #20
 8024764:	ea4f 2e26 	mov.w	lr, r6, asr #8
 8024768:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 802476c:	4691      	mov	r9, r2
 802476e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8024772:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8024776:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802477a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 802477e:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 8024782:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 8024786:	9200      	str	r2, [sp, #0]
 8024788:	00f6      	lsls	r6, r6, #3
 802478a:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 802478e:	9201      	str	r2, [sp, #4]
 8024790:	2c00      	cmp	r4, #0
 8024792:	b2f2      	uxtb	r2, r6
 8024794:	fb04 560c 	mla	r6, r4, ip, r5
 8024798:	9202      	str	r2, [sp, #8]
 802479a:	eb09 0e06 	add.w	lr, r9, r6
 802479e:	db3e      	blt.n	802481e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 80247a0:	45a0      	cmp	r8, r4
 80247a2:	dd3c      	ble.n	802481e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 80247a4:	2d00      	cmp	r5, #0
 80247a6:	db38      	blt.n	802481a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 80247a8:	45ac      	cmp	ip, r5
 80247aa:	dd36      	ble.n	802481a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 80247ac:	f819 2006 	ldrb.w	r2, [r9, r6]
 80247b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80247b4:	1c6e      	adds	r6, r5, #1
 80247b6:	d435      	bmi.n	8024824 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 80247b8:	45b4      	cmp	ip, r6
 80247ba:	dd33      	ble.n	8024824 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 80247bc:	b3a0      	cbz	r0, 8024828 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 80247be:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80247c2:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80247c6:	3401      	adds	r4, #1
 80247c8:	d432      	bmi.n	8024830 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 80247ca:	45a0      	cmp	r8, r4
 80247cc:	dd30      	ble.n	8024830 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 80247ce:	b397      	cbz	r7, 8024836 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 80247d0:	2d00      	cmp	r5, #0
 80247d2:	db2b      	blt.n	802482c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 80247d4:	45ac      	cmp	ip, r5
 80247d6:	dd29      	ble.n	802482c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 80247d8:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80247dc:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80247e0:	3501      	adds	r5, #1
 80247e2:	d42b      	bmi.n	802483c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 80247e4:	45ac      	cmp	ip, r5
 80247e6:	dd29      	ble.n	802483c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 80247e8:	b350      	cbz	r0, 8024840 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe4>
 80247ea:	44f4      	add	ip, lr
 80247ec:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80247f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80247f4:	280f      	cmp	r0, #15
 80247f6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80247fa:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80247fe:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024802:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8024806:	d801      	bhi.n	802480c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb0>
 8024808:	2f0f      	cmp	r7, #15
 802480a:	d91b      	bls.n	8024844 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe8>
 802480c:	4b84      	ldr	r3, [pc, #528]	; (8024a20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 802480e:	4a85      	ldr	r2, [pc, #532]	; (8024a24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 8024810:	4885      	ldr	r0, [pc, #532]	; (8024a28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8024812:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8024816:	f007 ff67 	bl	802c6e8 <__assert_func>
 802481a:	2200      	movs	r2, #0
 802481c:	e7ca      	b.n	80247b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x58>
 802481e:	2600      	movs	r6, #0
 8024820:	4632      	mov	r2, r6
 8024822:	e7d0      	b.n	80247c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8024824:	2600      	movs	r6, #0
 8024826:	e7ce      	b.n	80247c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8024828:	4606      	mov	r6, r0
 802482a:	e7cc      	b.n	80247c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 802482c:	2400      	movs	r4, #0
 802482e:	e7d7      	b.n	80247e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x84>
 8024830:	2300      	movs	r3, #0
 8024832:	461c      	mov	r4, r3
 8024834:	e7de      	b.n	80247f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8024836:	463b      	mov	r3, r7
 8024838:	463c      	mov	r4, r7
 802483a:	e7db      	b.n	80247f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 802483c:	2300      	movs	r3, #0
 802483e:	e7d9      	b.n	80247f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8024840:	4603      	mov	r3, r0
 8024842:	e7d7      	b.n	80247f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8024844:	b280      	uxth	r0, r0
 8024846:	b2bf      	uxth	r7, r7
 8024848:	fb00 fe07 	mul.w	lr, r0, r7
 802484c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024850:	0100      	lsls	r0, r0, #4
 8024852:	eba0 0c0e 	sub.w	ip, r0, lr
 8024856:	b2bf      	uxth	r7, r7
 8024858:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802485c:	fa1f fc8c 	uxth.w	ip, ip
 8024860:	1bed      	subs	r5, r5, r7
 8024862:	b2ad      	uxth	r5, r5
 8024864:	fb0c f00a 	mul.w	r0, ip, sl
 8024868:	fb05 000b 	mla	r0, r5, fp, r0
 802486c:	fb07 0009 	mla	r0, r7, r9, r0
 8024870:	fb0e 0008 	mla	r0, lr, r8, r0
 8024874:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024878:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802487c:	9003      	str	r0, [sp, #12]
 802487e:	d018      	beq.n	80248b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x156>
 8024880:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024884:	fb0b f000 	mul.w	r0, fp, r0
 8024888:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802488c:	fb0b fb02 	mul.w	fp, fp, r2
 8024890:	0a02      	lsrs	r2, r0, #8
 8024892:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024896:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802489a:	4402      	add	r2, r0
 802489c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80248a0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80248a4:	0a12      	lsrs	r2, r2, #8
 80248a6:	0a00      	lsrs	r0, r0, #8
 80248a8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80248ac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80248b0:	4302      	orrs	r2, r0
 80248b2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80248b6:	d019      	beq.n	80248ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x190>
 80248b8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80248bc:	fb0a fb0b 	mul.w	fp, sl, fp
 80248c0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80248c4:	fb0a fa06 	mul.w	sl, sl, r6
 80248c8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80248cc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80248d0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80248d4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80248d8:	445e      	add	r6, fp
 80248da:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80248de:	0a36      	lsrs	r6, r6, #8
 80248e0:	0a00      	lsrs	r0, r0, #8
 80248e2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80248e6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80248ea:	4306      	orrs	r6, r0
 80248ec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80248f0:	d019      	beq.n	8024926 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1ca>
 80248f2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80248f6:	fb09 fa0a 	mul.w	sl, r9, sl
 80248fa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80248fe:	fb09 f904 	mul.w	r9, r9, r4
 8024902:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8024906:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802490a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802490e:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8024912:	4454      	add	r4, sl
 8024914:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8024918:	0a24      	lsrs	r4, r4, #8
 802491a:	0a00      	lsrs	r0, r0, #8
 802491c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024920:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024924:	4304      	orrs	r4, r0
 8024926:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802492a:	d019      	beq.n	8024960 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x204>
 802492c:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8024930:	fb08 f909 	mul.w	r9, r8, r9
 8024934:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024938:	fb08 f803 	mul.w	r8, r8, r3
 802493c:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8024940:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024944:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024948:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802494c:	444b      	add	r3, r9
 802494e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024952:	0a1b      	lsrs	r3, r3, #8
 8024954:	0a00      	lsrs	r0, r0, #8
 8024956:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802495a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802495e:	4303      	orrs	r3, r0
 8024960:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8024964:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024968:	fb0c f808 	mul.w	r8, ip, r8
 802496c:	fb05 8800 	mla	r8, r5, r0, r8
 8024970:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8024974:	fb07 8800 	mla	r8, r7, r0, r8
 8024978:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 802497c:	fb0e 8000 	mla	r0, lr, r0, r8
 8024980:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024984:	fb0c f606 	mul.w	r6, ip, r6
 8024988:	0a00      	lsrs	r0, r0, #8
 802498a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802498e:	fb05 6202 	mla	r2, r5, r2, r6
 8024992:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8024996:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 802499a:	fb07 2700 	mla	r7, r7, r0, r2
 802499e:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80249a2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80249a6:	9c03      	ldr	r4, [sp, #12]
 80249a8:	9e01      	ldr	r6, [sp, #4]
 80249aa:	b29b      	uxth	r3, r3
 80249ac:	435c      	muls	r4, r3
 80249ae:	fb0e 7000 	mla	r0, lr, r0, r7
 80249b2:	1c62      	adds	r2, r4, #1
 80249b4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80249b8:	0a00      	lsrs	r0, r0, #8
 80249ba:	9c00      	ldr	r4, [sp, #0]
 80249bc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80249c0:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80249c4:	ea48 0000 	orr.w	r0, r8, r0
 80249c8:	b2d2      	uxtb	r2, r2
 80249ca:	fb14 f402 	smulbb	r4, r4, r2
 80249ce:	0c05      	lsrs	r5, r0, #16
 80249d0:	fb05 4503 	mla	r5, r5, r3, r4
 80249d4:	fb16 f602 	smulbb	r6, r6, r2
 80249d8:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80249dc:	fb04 6403 	mla	r4, r4, r3, r6
 80249e0:	9e02      	ldr	r6, [sp, #8]
 80249e2:	b2c0      	uxtb	r0, r0
 80249e4:	fb16 f202 	smulbb	r2, r6, r2
 80249e8:	fb00 2303 	mla	r3, r0, r3, r2
 80249ec:	b2ad      	uxth	r5, r5
 80249ee:	b298      	uxth	r0, r3
 80249f0:	1c43      	adds	r3, r0, #1
 80249f2:	1c6a      	adds	r2, r5, #1
 80249f4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80249f8:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 80249fc:	b2a4      	uxth	r4, r4
 80249fe:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8024a02:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024a06:	4313      	orrs	r3, r2
 8024a08:	1c62      	adds	r2, r4, #1
 8024a0a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8024a0e:	0952      	lsrs	r2, r2, #5
 8024a10:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024a14:	4313      	orrs	r3, r2
 8024a16:	800b      	strh	r3, [r1, #0]
 8024a18:	b005      	add	sp, #20
 8024a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a1e:	bf00      	nop
 8024a20:	08031c31 	.word	0x08031c31
 8024a24:	080321fa 	.word	0x080321fa
 8024a28:	08031cb5 	.word	0x08031cb5

08024a2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a30:	ed2d 8b08 	vpush	{d8-d11}
 8024a34:	b09f      	sub	sp, #124	; 0x7c
 8024a36:	eeb0 aa40 	vmov.f32	s20, s0
 8024a3a:	921b      	str	r2, [sp, #108]	; 0x6c
 8024a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8024a3e:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8024a40:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8024a44:	931c      	str	r3, [sp, #112]	; 0x70
 8024a46:	9119      	str	r1, [sp, #100]	; 0x64
 8024a48:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8024a4c:	901d      	str	r0, [sp, #116]	; 0x74
 8024a4e:	6850      	ldr	r0, [r2, #4]
 8024a50:	6812      	ldr	r2, [r2, #0]
 8024a52:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8024a54:	fb00 1303 	mla	r3, r0, r3, r1
 8024a58:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024a5c:	930c      	str	r3, [sp, #48]	; 0x30
 8024a5e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024a60:	681b      	ldr	r3, [r3, #0]
 8024a62:	9312      	str	r3, [sp, #72]	; 0x48
 8024a64:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024a66:	685e      	ldr	r6, [r3, #4]
 8024a68:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8024a6c:	930d      	str	r3, [sp, #52]	; 0x34
 8024a6e:	eef0 9a60 	vmov.f32	s19, s1
 8024a72:	eeb0 9a41 	vmov.f32	s18, s2
 8024a76:	eeb0 8a62 	vmov.f32	s16, s5
 8024a7a:	eef0 8a43 	vmov.f32	s17, s6
 8024a7e:	eef0 ba44 	vmov.f32	s23, s8
 8024a82:	eeb0 ba64 	vmov.f32	s22, s9
 8024a86:	eef0 aa45 	vmov.f32	s21, s10
 8024a8a:	3604      	adds	r6, #4
 8024a8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024a8e:	2b00      	cmp	r3, #0
 8024a90:	dc03      	bgt.n	8024a9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024a92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024a94:	2b00      	cmp	r3, #0
 8024a96:	f340 8388 	ble.w	80251aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 8024a9a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024a9c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024aa0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024aa4:	1e48      	subs	r0, r1, #1
 8024aa6:	1e57      	subs	r7, r2, #1
 8024aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024aaa:	2b00      	cmp	r3, #0
 8024aac:	f340 8195 	ble.w	8024dda <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024ab0:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8024ab2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024ab6:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024aba:	d406      	bmi.n	8024aca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024abc:	4584      	cmp	ip, r0
 8024abe:	da04      	bge.n	8024aca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024ac0:	2b00      	cmp	r3, #0
 8024ac2:	db02      	blt.n	8024aca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024ac4:	42bb      	cmp	r3, r7
 8024ac6:	f2c0 8189 	blt.w	8024ddc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8024aca:	f11c 0c01 	adds.w	ip, ip, #1
 8024ace:	f100 8177 	bmi.w	8024dc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8024ad2:	4561      	cmp	r1, ip
 8024ad4:	f2c0 8174 	blt.w	8024dc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8024ad8:	3301      	adds	r3, #1
 8024ada:	f100 8171 	bmi.w	8024dc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8024ade:	429a      	cmp	r2, r3
 8024ae0:	f2c0 816e 	blt.w	8024dc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8024ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ae6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024ae8:	931a      	str	r3, [sp, #104]	; 0x68
 8024aea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024aec:	2b00      	cmp	r3, #0
 8024aee:	f340 8193 	ble.w	8024e18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8024af2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8024af4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024af8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024afa:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8024afe:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8024b00:	141b      	asrs	r3, r3, #16
 8024b02:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024b06:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024b0a:	f100 81d6 	bmi.w	8024eba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8024b0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8024b12:	4543      	cmp	r3, r8
 8024b14:	f280 81d1 	bge.w	8024eba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8024b18:	f1bc 0f00 	cmp.w	ip, #0
 8024b1c:	f2c0 81cd 	blt.w	8024eba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8024b20:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024b24:	45c4      	cmp	ip, r8
 8024b26:	f280 81c8 	bge.w	8024eba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8024b2a:	b200      	sxth	r0, r0
 8024b2c:	fb0c 3300 	mla	r3, ip, r0, r3
 8024b30:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024b32:	eb04 0803 	add.w	r8, r4, r3
 8024b36:	5ce3      	ldrb	r3, [r4, r3]
 8024b38:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024b3c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024b40:	2a00      	cmp	r2, #0
 8024b42:	f000 81af 	beq.w	8024ea4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8024b46:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024b4a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024b4e:	940e      	str	r4, [sp, #56]	; 0x38
 8024b50:	0e24      	lsrs	r4, r4, #24
 8024b52:	9415      	str	r4, [sp, #84]	; 0x54
 8024b54:	b179      	cbz	r1, 8024b76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8024b56:	eb08 0c00 	add.w	ip, r8, r0
 8024b5a:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024b5e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024b62:	900a      	str	r0, [sp, #40]	; 0x28
 8024b64:	0e00      	lsrs	r0, r0, #24
 8024b66:	9013      	str	r0, [sp, #76]	; 0x4c
 8024b68:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024b6c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024b70:	900f      	str	r0, [sp, #60]	; 0x3c
 8024b72:	0e00      	lsrs	r0, r0, #24
 8024b74:	9016      	str	r0, [sp, #88]	; 0x58
 8024b76:	b292      	uxth	r2, r2
 8024b78:	b289      	uxth	r1, r1
 8024b7a:	fb02 f901 	mul.w	r9, r2, r1
 8024b7e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024b82:	0112      	lsls	r2, r2, #4
 8024b84:	eba2 0809 	sub.w	r8, r2, r9
 8024b88:	b289      	uxth	r1, r1
 8024b8a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024b8e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024b90:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024b92:	fa1f f888 	uxth.w	r8, r8
 8024b96:	1a52      	subs	r2, r2, r1
 8024b98:	b292      	uxth	r2, r2
 8024b9a:	fb08 f000 	mul.w	r0, r8, r0
 8024b9e:	fb02 000e 	mla	r0, r2, lr, r0
 8024ba2:	fb01 0004 	mla	r0, r1, r4, r0
 8024ba6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024ba8:	fb09 0004 	mla	r0, r9, r4, r0
 8024bac:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024bb0:	2800      	cmp	r0, #0
 8024bb2:	f000 80fa 	beq.w	8024daa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8024bb6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024bba:	d01b      	beq.n	8024bf4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8024bbc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024bc0:	fb0e fa0a 	mul.w	sl, lr, sl
 8024bc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024bc8:	fb0e fe03 	mul.w	lr, lr, r3
 8024bcc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024bd0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024bd4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024bd8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024bdc:	4453      	add	r3, sl
 8024bde:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024be2:	0a1b      	lsrs	r3, r3, #8
 8024be4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024be8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024bec:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024bf0:	ea43 030c 	orr.w	r3, r3, ip
 8024bf4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024bf6:	2cff      	cmp	r4, #255	; 0xff
 8024bf8:	d021      	beq.n	8024c3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8024bfa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024bfc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024c00:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024c02:	fb04 fb0b 	mul.w	fp, r4, fp
 8024c06:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024c08:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024c0c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024c0e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024c12:	fb04 fa0a 	mul.w	sl, r4, sl
 8024c16:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024c1a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024c1e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024c22:	44de      	add	lr, fp
 8024c24:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024c28:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024c2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c30:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024c34:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c38:	ea4e 040a 	orr.w	r4, lr, sl
 8024c3c:	940e      	str	r4, [sp, #56]	; 0x38
 8024c3e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024c40:	2cff      	cmp	r4, #255	; 0xff
 8024c42:	d021      	beq.n	8024c88 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8024c44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024c46:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024c4a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024c4c:	fb04 fb0b 	mul.w	fp, r4, fp
 8024c50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024c52:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024c56:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024c58:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024c5c:	fb04 fa0a 	mul.w	sl, r4, sl
 8024c60:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024c64:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024c68:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024c6c:	44de      	add	lr, fp
 8024c6e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024c72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024c76:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024c7e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c82:	ea4e 040a 	orr.w	r4, lr, sl
 8024c86:	940a      	str	r4, [sp, #40]	; 0x28
 8024c88:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024c8a:	2cff      	cmp	r4, #255	; 0xff
 8024c8c:	d021      	beq.n	8024cd2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8024c8e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024c90:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024c94:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024c96:	fb04 fb0b 	mul.w	fp, r4, fp
 8024c9a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024c9c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024ca0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024ca2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024ca6:	fb04 fa0a 	mul.w	sl, r4, sl
 8024caa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024cae:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024cb2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024cb6:	44de      	add	lr, fp
 8024cb8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024cbc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024cc0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024cc4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024cc8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024ccc:	ea4e 040a 	orr.w	r4, lr, sl
 8024cd0:	940f      	str	r4, [sp, #60]	; 0x3c
 8024cd2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024cd4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024cd8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024cda:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024cde:	fb08 fc0c 	mul.w	ip, r8, ip
 8024ce2:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024ce6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024cea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024cec:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024cf0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024cf4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024cf6:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024cfa:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024cfe:	fb08 f80e 	mul.w	r8, r8, lr
 8024d02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024d06:	fb02 8303 	mla	r3, r2, r3, r8
 8024d0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024d0c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024d0e:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024d12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024d14:	fb01 330a 	mla	r3, r1, sl, r3
 8024d18:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8024d1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024d1e:	fb09 3901 	mla	r9, r9, r1, r3
 8024d22:	4342      	muls	r2, r0
 8024d24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024d28:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024d2c:	883b      	ldrh	r3, [r7, #0]
 8024d2e:	1c50      	adds	r0, r2, #1
 8024d30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024d34:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024d38:	ea4c 0c09 	orr.w	ip, ip, r9
 8024d3c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8024d40:	1219      	asrs	r1, r3, #8
 8024d42:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8024d46:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024d4a:	b2c0      	uxtb	r0, r0
 8024d4c:	fb12 f204 	smulbb	r2, r2, r4
 8024d50:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024d54:	fb01 2100 	mla	r1, r1, r0, r2
 8024d58:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8024d5c:	10da      	asrs	r2, r3, #3
 8024d5e:	fa5f fc8c 	uxtb.w	ip, ip
 8024d62:	00db      	lsls	r3, r3, #3
 8024d64:	fb1c fc04 	smulbb	ip, ip, r4
 8024d68:	b2db      	uxtb	r3, r3
 8024d6a:	b289      	uxth	r1, r1
 8024d6c:	fb03 c300 	mla	r3, r3, r0, ip
 8024d70:	fa1f fc83 	uxth.w	ip, r3
 8024d74:	1c4b      	adds	r3, r1, #1
 8024d76:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024d7a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024d7e:	fb1e fe04 	smulbb	lr, lr, r4
 8024d82:	f10c 0301 	add.w	r3, ip, #1
 8024d86:	fb02 e200 	mla	r2, r2, r0, lr
 8024d8a:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8024d8e:	b292      	uxth	r2, r2
 8024d90:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8024d94:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024d98:	430b      	orrs	r3, r1
 8024d9a:	1c51      	adds	r1, r2, #1
 8024d9c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024da0:	0952      	lsrs	r2, r2, #5
 8024da2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024da6:	4313      	orrs	r3, r2
 8024da8:	803b      	strh	r3, [r7, #0]
 8024daa:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024dac:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8024dae:	441a      	add	r2, r3
 8024db0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024db2:	9231      	str	r2, [sp, #196]	; 0xc4
 8024db4:	441d      	add	r5, r3
 8024db6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024db8:	3b01      	subs	r3, #1
 8024dba:	3702      	adds	r7, #2
 8024dbc:	931a      	str	r3, [sp, #104]	; 0x68
 8024dbe:	e694      	b.n	8024aea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024dc0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024dc2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8024dc4:	441c      	add	r4, r3
 8024dc6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024dc8:	9431      	str	r4, [sp, #196]	; 0xc4
 8024dca:	441d      	add	r5, r3
 8024dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024dce:	3b01      	subs	r3, #1
 8024dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8024dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024dd4:	3302      	adds	r3, #2
 8024dd6:	930c      	str	r3, [sp, #48]	; 0x30
 8024dd8:	e666      	b.n	8024aa8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024dda:	d024      	beq.n	8024e26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fa>
 8024ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024dde:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8024de0:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8024de2:	3b01      	subs	r3, #1
 8024de4:	fb00 4003 	mla	r0, r0, r3, r4
 8024de8:	1400      	asrs	r0, r0, #16
 8024dea:	f53f ae7b 	bmi.w	8024ae4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024dee:	3901      	subs	r1, #1
 8024df0:	4288      	cmp	r0, r1
 8024df2:	f6bf ae77 	bge.w	8024ae4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024df6:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8024df8:	fb01 5303 	mla	r3, r1, r3, r5
 8024dfc:	141b      	asrs	r3, r3, #16
 8024dfe:	f53f ae71 	bmi.w	8024ae4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024e02:	3a01      	subs	r2, #1
 8024e04:	4293      	cmp	r3, r2
 8024e06:	f6bf ae6d 	bge.w	8024ae4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024e0a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024e0e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8024e12:	f1bb 0f00 	cmp.w	fp, #0
 8024e16:	dc70      	bgt.n	8024efa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8024e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e1a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024e1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024e20:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8024e24:	930c      	str	r3, [sp, #48]	; 0x30
 8024e26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024e28:	2b00      	cmp	r3, #0
 8024e2a:	f340 81be 	ble.w	80251aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 8024e2e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024e32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024e36:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024e3a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024e3c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024e40:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024e44:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024e48:	eef0 6a48 	vmov.f32	s13, s16
 8024e4c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024e50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024e54:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024e58:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8024e5c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024e60:	eef0 6a68 	vmov.f32	s13, s17
 8024e64:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024e68:	ee18 2a10 	vmov	r2, s16
 8024e6c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024e70:	fb92 f3f3 	sdiv	r3, r2, r3
 8024e74:	ee18 2a90 	vmov	r2, s17
 8024e78:	9333      	str	r3, [sp, #204]	; 0xcc
 8024e7a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024e7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024e80:	9334      	str	r3, [sp, #208]	; 0xd0
 8024e82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024e84:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8024e86:	3b01      	subs	r3, #1
 8024e88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024e8c:	9319      	str	r3, [sp, #100]	; 0x64
 8024e8e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024e90:	bf08      	it	eq
 8024e92:	4613      	moveq	r3, r2
 8024e94:	ee16 5a90 	vmov	r5, s13
 8024e98:	9309      	str	r3, [sp, #36]	; 0x24
 8024e9a:	eef0 8a67 	vmov.f32	s17, s15
 8024e9e:	eeb0 8a47 	vmov.f32	s16, s14
 8024ea2:	e5f3      	b.n	8024a8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8024ea4:	2900      	cmp	r1, #0
 8024ea6:	f43f ae66 	beq.w	8024b76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8024eaa:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024eae:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024eb2:	900a      	str	r0, [sp, #40]	; 0x28
 8024eb4:	0e00      	lsrs	r0, r0, #24
 8024eb6:	9013      	str	r0, [sp, #76]	; 0x4c
 8024eb8:	e65d      	b.n	8024b76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8024eba:	f113 0801 	adds.w	r8, r3, #1
 8024ebe:	f53f af74 	bmi.w	8024daa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8024ec2:	4540      	cmp	r0, r8
 8024ec4:	f6ff af71 	blt.w	8024daa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8024ec8:	f11c 0801 	adds.w	r8, ip, #1
 8024ecc:	f53f af6d 	bmi.w	8024daa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8024ed0:	45c6      	cmp	lr, r8
 8024ed2:	f6ff af6a 	blt.w	8024daa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8024ed6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8024ed8:	9302      	str	r3, [sp, #8]
 8024eda:	b200      	sxth	r0, r0
 8024edc:	fa0f f38e 	sxth.w	r3, lr
 8024ee0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024ee4:	e9cd c203 	strd	ip, r2, [sp, #12]
 8024ee8:	9301      	str	r3, [sp, #4]
 8024eea:	9000      	str	r0, [sp, #0]
 8024eec:	4633      	mov	r3, r6
 8024eee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024ef0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8024ef2:	4639      	mov	r1, r7
 8024ef4:	f7ff fc32 	bl	802475c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8024ef8:	e757      	b.n	8024daa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8024efa:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8024efc:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8024efe:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024f02:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024f04:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024f08:	1427      	asrs	r7, r4, #16
 8024f0a:	142b      	asrs	r3, r5, #16
 8024f0c:	fb01 7303 	mla	r3, r1, r3, r7
 8024f10:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024f12:	18e7      	adds	r7, r4, r3
 8024f14:	5ce3      	ldrb	r3, [r4, r3]
 8024f16:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024f1a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024f1e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024f22:	2a00      	cmp	r2, #0
 8024f24:	f000 8137 	beq.w	8025196 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76a>
 8024f28:	f897 e001 	ldrb.w	lr, [r7, #1]
 8024f2c:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8024f30:	9410      	str	r4, [sp, #64]	; 0x40
 8024f32:	0e24      	lsrs	r4, r4, #24
 8024f34:	9417      	str	r4, [sp, #92]	; 0x5c
 8024f36:	b170      	cbz	r0, 8024f56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 8024f38:	eb07 0e01 	add.w	lr, r7, r1
 8024f3c:	5c79      	ldrb	r1, [r7, r1]
 8024f3e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024f42:	910b      	str	r1, [sp, #44]	; 0x2c
 8024f44:	0e09      	lsrs	r1, r1, #24
 8024f46:	9114      	str	r1, [sp, #80]	; 0x50
 8024f48:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8024f4c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024f50:	9111      	str	r1, [sp, #68]	; 0x44
 8024f52:	0e09      	lsrs	r1, r1, #24
 8024f54:	9118      	str	r1, [sp, #96]	; 0x60
 8024f56:	b292      	uxth	r2, r2
 8024f58:	b280      	uxth	r0, r0
 8024f5a:	fb02 f800 	mul.w	r8, r2, r0
 8024f5e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024f62:	0112      	lsls	r2, r2, #4
 8024f64:	eba2 0e08 	sub.w	lr, r2, r8
 8024f68:	b280      	uxth	r0, r0
 8024f6a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024f6e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8024f70:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024f72:	fa1f fe8e 	uxth.w	lr, lr
 8024f76:	1a12      	subs	r2, r2, r0
 8024f78:	b292      	uxth	r2, r2
 8024f7a:	fb0e f101 	mul.w	r1, lr, r1
 8024f7e:	fb02 110c 	mla	r1, r2, ip, r1
 8024f82:	fb00 1104 	mla	r1, r0, r4, r1
 8024f86:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024f88:	fb08 1104 	mla	r1, r8, r4, r1
 8024f8c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024f90:	2900      	cmp	r1, #0
 8024f92:	f000 80f5 	beq.w	8025180 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8024f96:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024f9a:	d019      	beq.n	8024fd0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8024f9c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024fa0:	fb0c fa0a 	mul.w	sl, ip, sl
 8024fa4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024fa8:	fb0c fc03 	mul.w	ip, ip, r3
 8024fac:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024fb0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024fb4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024fb8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024fbc:	4453      	add	r3, sl
 8024fbe:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024fc2:	0a1b      	lsrs	r3, r3, #8
 8024fc4:	0a3f      	lsrs	r7, r7, #8
 8024fc6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024fca:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024fce:	433b      	orrs	r3, r7
 8024fd0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024fd2:	2cff      	cmp	r4, #255	; 0xff
 8024fd4:	d020      	beq.n	8025018 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8024fd6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024fd8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024fdc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024fde:	4367      	muls	r7, r4
 8024fe0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024fe2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024fe6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024fe8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024fec:	fb04 fa0a 	mul.w	sl, r4, sl
 8024ff0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024ff4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024ff8:	44bc      	add	ip, r7
 8024ffa:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024ffe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025002:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025006:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802500a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802500e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025012:	ea4c 040a 	orr.w	r4, ip, sl
 8025016:	9410      	str	r4, [sp, #64]	; 0x40
 8025018:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802501a:	2cff      	cmp	r4, #255	; 0xff
 802501c:	d020      	beq.n	8025060 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 802501e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025020:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025024:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025026:	4367      	muls	r7, r4
 8025028:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802502a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802502e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025030:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025034:	fb04 fa0a 	mul.w	sl, r4, sl
 8025038:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802503c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025040:	44bc      	add	ip, r7
 8025042:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025046:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802504a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802504e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025052:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025056:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802505a:	ea4c 040a 	orr.w	r4, ip, sl
 802505e:	940b      	str	r4, [sp, #44]	; 0x2c
 8025060:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025062:	2cff      	cmp	r4, #255	; 0xff
 8025064:	d020      	beq.n	80250a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67c>
 8025066:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025068:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802506c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802506e:	4367      	muls	r7, r4
 8025070:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025072:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025076:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025078:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802507c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025080:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025084:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025088:	44bc      	add	ip, r7
 802508a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802508e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025092:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025096:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802509a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802509e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80250a2:	ea4c 040a 	orr.w	r4, ip, sl
 80250a6:	9411      	str	r4, [sp, #68]	; 0x44
 80250a8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80250aa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80250ae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80250b0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80250b4:	fb0e f707 	mul.w	r7, lr, r7
 80250b8:	fb02 770c 	mla	r7, r2, ip, r7
 80250bc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80250c0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80250c2:	fb00 770c 	mla	r7, r0, ip, r7
 80250c6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80250ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80250cc:	fb08 770c 	mla	r7, r8, ip, r7
 80250d0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80250d4:	fb0e fe0c 	mul.w	lr, lr, ip
 80250d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80250dc:	fb02 e303 	mla	r3, r2, r3, lr
 80250e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80250e2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80250e4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80250e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80250ea:	fb00 330a 	mla	r3, r0, sl, r3
 80250ee:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80250f2:	fb08 3c0c 	mla	ip, r8, ip, r3
 80250f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80250f8:	f8b9 0000 	ldrh.w	r0, [r9]
 80250fc:	434b      	muls	r3, r1
 80250fe:	0a3f      	lsrs	r7, r7, #8
 8025100:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025104:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025108:	1c59      	adds	r1, r3, #1
 802510a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802510e:	ea47 070c 	orr.w	r7, r7, ip
 8025112:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025116:	1202      	asrs	r2, r0, #8
 8025118:	0c3b      	lsrs	r3, r7, #16
 802511a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802511e:	b2c9      	uxtb	r1, r1
 8025120:	fb13 f304 	smulbb	r3, r3, r4
 8025124:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025128:	fb02 3201 	mla	r2, r2, r1, r3
 802512c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8025130:	10c3      	asrs	r3, r0, #3
 8025132:	b2ff      	uxtb	r7, r7
 8025134:	00c0      	lsls	r0, r0, #3
 8025136:	b292      	uxth	r2, r2
 8025138:	fb1c fc04 	smulbb	ip, ip, r4
 802513c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025140:	b2c0      	uxtb	r0, r0
 8025142:	fb17 f704 	smulbb	r7, r7, r4
 8025146:	fb03 c301 	mla	r3, r3, r1, ip
 802514a:	fb00 7001 	mla	r0, r0, r1, r7
 802514e:	f102 0c01 	add.w	ip, r2, #1
 8025152:	b280      	uxth	r0, r0
 8025154:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025158:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 802515c:	1c42      	adds	r2, r0, #1
 802515e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025162:	b29b      	uxth	r3, r3
 8025164:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025168:	ea42 020c 	orr.w	r2, r2, ip
 802516c:	f103 0c01 	add.w	ip, r3, #1
 8025170:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025174:	095b      	lsrs	r3, r3, #5
 8025176:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802517a:	431a      	orrs	r2, r3
 802517c:	f8a9 2000 	strh.w	r2, [r9]
 8025180:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8025182:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8025184:	441a      	add	r2, r3
 8025186:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025188:	9231      	str	r2, [sp, #196]	; 0xc4
 802518a:	f109 0902 	add.w	r9, r9, #2
 802518e:	441d      	add	r5, r3
 8025190:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025194:	e63d      	b.n	8024e12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8025196:	2800      	cmp	r0, #0
 8025198:	f43f aedd 	beq.w	8024f56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 802519c:	5c79      	ldrb	r1, [r7, r1]
 802519e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80251a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80251a4:	0e09      	lsrs	r1, r1, #24
 80251a6:	9114      	str	r1, [sp, #80]	; 0x50
 80251a8:	e6d5      	b.n	8024f56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 80251aa:	b01f      	add	sp, #124	; 0x7c
 80251ac:	ecbd 8b08 	vpop	{d8-d11}
 80251b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080251b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 80251b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251b8:	880e      	ldrh	r6, [r1, #0]
 80251ba:	b085      	sub	sp, #20
 80251bc:	ea4f 2826 	mov.w	r8, r6, asr #8
 80251c0:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80251c4:	4691      	mov	r9, r2
 80251c6:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80251ca:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 80251ce:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80251d2:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80251d6:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 80251da:	ea4f 08e6 	mov.w	r8, r6, asr #3
 80251de:	9200      	str	r2, [sp, #0]
 80251e0:	00f6      	lsls	r6, r6, #3
 80251e2:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 80251e6:	9201      	str	r2, [sp, #4]
 80251e8:	2c00      	cmp	r4, #0
 80251ea:	b2f2      	uxtb	r2, r6
 80251ec:	fb04 560c 	mla	r6, r4, ip, r5
 80251f0:	9202      	str	r2, [sp, #8]
 80251f2:	eb09 0806 	add.w	r8, r9, r6
 80251f6:	db3f      	blt.n	8025278 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 80251f8:	45a6      	cmp	lr, r4
 80251fa:	dd3d      	ble.n	8025278 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 80251fc:	2d00      	cmp	r5, #0
 80251fe:	db39      	blt.n	8025274 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8025200:	45ac      	cmp	ip, r5
 8025202:	dd37      	ble.n	8025274 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8025204:	f819 2006 	ldrb.w	r2, [r9, r6]
 8025208:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802520c:	1c6e      	adds	r6, r5, #1
 802520e:	d436      	bmi.n	802527e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8025210:	45b4      	cmp	ip, r6
 8025212:	dd34      	ble.n	802527e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8025214:	b3a8      	cbz	r0, 8025282 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 8025216:	f898 6001 	ldrb.w	r6, [r8, #1]
 802521a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 802521e:	3401      	adds	r4, #1
 8025220:	d433      	bmi.n	802528a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8025222:	45a6      	cmp	lr, r4
 8025224:	dd31      	ble.n	802528a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8025226:	b39f      	cbz	r7, 8025290 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 8025228:	2d00      	cmp	r5, #0
 802522a:	eb08 0e0c 	add.w	lr, r8, ip
 802522e:	db2a      	blt.n	8025286 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8025230:	45ac      	cmp	ip, r5
 8025232:	dd28      	ble.n	8025286 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8025234:	f818 400c 	ldrb.w	r4, [r8, ip]
 8025238:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 802523c:	3501      	adds	r5, #1
 802523e:	d42a      	bmi.n	8025296 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8025240:	45ac      	cmp	ip, r5
 8025242:	dd28      	ble.n	8025296 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8025244:	b348      	cbz	r0, 802529a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 8025246:	f89e 5001 	ldrb.w	r5, [lr, #1]
 802524a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 802524e:	280f      	cmp	r0, #15
 8025250:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8025254:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025258:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802525c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8025260:	d801      	bhi.n	8025266 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 8025262:	2f0f      	cmp	r7, #15
 8025264:	d91b      	bls.n	802529e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 8025266:	4b7d      	ldr	r3, [pc, #500]	; (802545c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 8025268:	4a7d      	ldr	r2, [pc, #500]	; (8025460 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 802526a:	487e      	ldr	r0, [pc, #504]	; (8025464 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 802526c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8025270:	f007 fa3a 	bl	802c6e8 <__assert_func>
 8025274:	2200      	movs	r2, #0
 8025276:	e7c9      	b.n	802520c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8025278:	2600      	movs	r6, #0
 802527a:	4632      	mov	r2, r6
 802527c:	e7cf      	b.n	802521e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 802527e:	2600      	movs	r6, #0
 8025280:	e7cd      	b.n	802521e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8025282:	4606      	mov	r6, r0
 8025284:	e7cb      	b.n	802521e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8025286:	2400      	movs	r4, #0
 8025288:	e7d8      	b.n	802523c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 802528a:	2300      	movs	r3, #0
 802528c:	461c      	mov	r4, r3
 802528e:	e7de      	b.n	802524e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025290:	463b      	mov	r3, r7
 8025292:	463c      	mov	r4, r7
 8025294:	e7db      	b.n	802524e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025296:	2300      	movs	r3, #0
 8025298:	e7d9      	b.n	802524e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 802529a:	4603      	mov	r3, r0
 802529c:	e7d7      	b.n	802524e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 802529e:	b280      	uxth	r0, r0
 80252a0:	b2bf      	uxth	r7, r7
 80252a2:	fb00 fe07 	mul.w	lr, r0, r7
 80252a6:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80252aa:	0100      	lsls	r0, r0, #4
 80252ac:	eba0 0c0e 	sub.w	ip, r0, lr
 80252b0:	b2bf      	uxth	r7, r7
 80252b2:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80252b6:	fa1f fc8c 	uxth.w	ip, ip
 80252ba:	1bed      	subs	r5, r5, r7
 80252bc:	b2ad      	uxth	r5, r5
 80252be:	fb0c f00a 	mul.w	r0, ip, sl
 80252c2:	fb05 000b 	mla	r0, r5, fp, r0
 80252c6:	fb07 0009 	mla	r0, r7, r9, r0
 80252ca:	fb0e 0008 	mla	r0, lr, r8, r0
 80252ce:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80252d2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80252d6:	9003      	str	r0, [sp, #12]
 80252d8:	d018      	beq.n	802530c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x158>
 80252da:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80252de:	fb0b f000 	mul.w	r0, fp, r0
 80252e2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80252e6:	fb0b fb02 	mul.w	fp, fp, r2
 80252ea:	0a02      	lsrs	r2, r0, #8
 80252ec:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80252f0:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80252f4:	4402      	add	r2, r0
 80252f6:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80252fa:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80252fe:	0a12      	lsrs	r2, r2, #8
 8025300:	0a00      	lsrs	r0, r0, #8
 8025302:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025306:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802530a:	4302      	orrs	r2, r0
 802530c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8025310:	d019      	beq.n	8025346 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x192>
 8025312:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8025316:	fb0a fb0b 	mul.w	fp, sl, fp
 802531a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802531e:	fb0a fa06 	mul.w	sl, sl, r6
 8025322:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8025326:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802532a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802532e:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8025332:	445e      	add	r6, fp
 8025334:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025338:	0a36      	lsrs	r6, r6, #8
 802533a:	0a00      	lsrs	r0, r0, #8
 802533c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025340:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025344:	4306      	orrs	r6, r0
 8025346:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802534a:	d019      	beq.n	8025380 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1cc>
 802534c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8025350:	fb09 fa0a 	mul.w	sl, r9, sl
 8025354:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025358:	fb09 f904 	mul.w	r9, r9, r4
 802535c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8025360:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025364:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025368:	f509 7080 	add.w	r0, r9, #256	; 0x100
 802536c:	4454      	add	r4, sl
 802536e:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8025372:	0a24      	lsrs	r4, r4, #8
 8025374:	0a00      	lsrs	r0, r0, #8
 8025376:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802537a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802537e:	4304      	orrs	r4, r0
 8025380:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025384:	d019      	beq.n	80253ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x206>
 8025386:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802538a:	fb08 f909 	mul.w	r9, r8, r9
 802538e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025392:	fb08 f803 	mul.w	r8, r8, r3
 8025396:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802539a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802539e:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80253a2:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80253a6:	444b      	add	r3, r9
 80253a8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80253ac:	0a1b      	lsrs	r3, r3, #8
 80253ae:	0a00      	lsrs	r0, r0, #8
 80253b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80253b4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80253b8:	4303      	orrs	r3, r0
 80253ba:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80253be:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80253c2:	fb0c f808 	mul.w	r8, ip, r8
 80253c6:	fb05 8800 	mla	r8, r5, r0, r8
 80253ca:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80253ce:	fb07 8800 	mla	r8, r7, r0, r8
 80253d2:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80253d6:	fb0e 8000 	mla	r0, lr, r0, r8
 80253da:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80253de:	fb0c f606 	mul.w	r6, ip, r6
 80253e2:	0a00      	lsrs	r0, r0, #8
 80253e4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80253e8:	fb05 6202 	mla	r2, r5, r2, r6
 80253ec:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 80253f0:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 80253f4:	fb07 2700 	mla	r7, r7, r0, r2
 80253f8:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80253fc:	9b03      	ldr	r3, [sp, #12]
 80253fe:	9d00      	ldr	r5, [sp, #0]
 8025400:	9a02      	ldr	r2, [sp, #8]
 8025402:	fb0e 7000 	mla	r0, lr, r0, r7
 8025406:	43dc      	mvns	r4, r3
 8025408:	9b01      	ldr	r3, [sp, #4]
 802540a:	b2e4      	uxtb	r4, r4
 802540c:	0a00      	lsrs	r0, r0, #8
 802540e:	4363      	muls	r3, r4
 8025410:	4365      	muls	r5, r4
 8025412:	4362      	muls	r2, r4
 8025414:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025418:	ea48 0000 	orr.w	r0, r8, r0
 802541c:	4614      	mov	r4, r2
 802541e:	1c5e      	adds	r6, r3, #1
 8025420:	1c6a      	adds	r2, r5, #1
 8025422:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 8025426:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 802542a:	0a03      	lsrs	r3, r0, #8
 802542c:	0c02      	lsrs	r2, r0, #16
 802542e:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8025432:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8025436:	00db      	lsls	r3, r3, #3
 8025438:	0212      	lsls	r2, r2, #8
 802543a:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802543e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025442:	4313      	orrs	r3, r2
 8025444:	1c62      	adds	r2, r4, #1
 8025446:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802544a:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802544e:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8025452:	4318      	orrs	r0, r3
 8025454:	8008      	strh	r0, [r1, #0]
 8025456:	b005      	add	sp, #20
 8025458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802545c:	08031c31 	.word	0x08031c31
 8025460:	080321fa 	.word	0x080321fa
 8025464:	08031cb5 	.word	0x08031cb5

08025468 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802546c:	ed2d 8b08 	vpush	{d8-d11}
 8025470:	b09b      	sub	sp, #108	; 0x6c
 8025472:	eeb0 aa40 	vmov.f32	s20, s0
 8025476:	9218      	str	r2, [sp, #96]	; 0x60
 8025478:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802547a:	9116      	str	r1, [sp, #88]	; 0x58
 802547c:	9307      	str	r3, [sp, #28]
 802547e:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8025482:	9019      	str	r0, [sp, #100]	; 0x64
 8025484:	6850      	ldr	r0, [r2, #4]
 8025486:	6812      	ldr	r2, [r2, #0]
 8025488:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 802548a:	fb00 1303 	mla	r3, r0, r3, r1
 802548e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025492:	930a      	str	r3, [sp, #40]	; 0x28
 8025494:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025496:	681b      	ldr	r3, [r3, #0]
 8025498:	930f      	str	r3, [sp, #60]	; 0x3c
 802549a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802549c:	685e      	ldr	r6, [r3, #4]
 802549e:	eef0 9a60 	vmov.f32	s19, s1
 80254a2:	eeb0 9a41 	vmov.f32	s18, s2
 80254a6:	eeb0 8a62 	vmov.f32	s16, s5
 80254aa:	eef0 8a43 	vmov.f32	s17, s6
 80254ae:	eef0 ba44 	vmov.f32	s23, s8
 80254b2:	eeb0 ba64 	vmov.f32	s22, s9
 80254b6:	eef0 aa45 	vmov.f32	s21, s10
 80254ba:	3604      	adds	r6, #4
 80254bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80254be:	2b00      	cmp	r3, #0
 80254c0:	dc03      	bgt.n	80254ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80254c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80254c4:	2b00      	cmp	r3, #0
 80254c6:	f340 8373 	ble.w	8025bb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80254ca:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80254cc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80254d0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80254d4:	1e48      	subs	r0, r1, #1
 80254d6:	1e57      	subs	r7, r2, #1
 80254d8:	9b07      	ldr	r3, [sp, #28]
 80254da:	2b00      	cmp	r3, #0
 80254dc:	f340 8190 	ble.w	8025800 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 80254e0:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80254e2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80254e6:	ea4f 4325 	mov.w	r3, r5, asr #16
 80254ea:	d406      	bmi.n	80254fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80254ec:	4584      	cmp	ip, r0
 80254ee:	da04      	bge.n	80254fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80254f0:	2b00      	cmp	r3, #0
 80254f2:	db02      	blt.n	80254fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80254f4:	42bb      	cmp	r3, r7
 80254f6:	f2c0 8184 	blt.w	8025802 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 80254fa:	f11c 0c01 	adds.w	ip, ip, #1
 80254fe:	f100 8172 	bmi.w	80257e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8025502:	4561      	cmp	r1, ip
 8025504:	f2c0 816f 	blt.w	80257e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8025508:	3301      	adds	r3, #1
 802550a:	f100 816c 	bmi.w	80257e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802550e:	429a      	cmp	r2, r3
 8025510:	f2c0 8169 	blt.w	80257e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8025514:	9b07      	ldr	r3, [sp, #28]
 8025516:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025518:	9317      	str	r3, [sp, #92]	; 0x5c
 802551a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802551c:	2b00      	cmp	r3, #0
 802551e:	f340 818e 	ble.w	802583e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 8025522:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025524:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025528:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802552a:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802552e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025530:	141b      	asrs	r3, r3, #16
 8025532:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8025536:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802553a:	f100 81d1 	bmi.w	80258e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 802553e:	f101 38ff 	add.w	r8, r1, #4294967295
 8025542:	4543      	cmp	r3, r8
 8025544:	f280 81cc 	bge.w	80258e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8025548:	f1bc 0f00 	cmp.w	ip, #0
 802554c:	f2c0 81c8 	blt.w	80258e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8025550:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025554:	45c4      	cmp	ip, r8
 8025556:	f280 81c3 	bge.w	80258e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 802555a:	b209      	sxth	r1, r1
 802555c:	fb0c 3301 	mla	r3, ip, r1, r3
 8025560:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025562:	eb04 0803 	add.w	r8, r4, r3
 8025566:	5ce3      	ldrb	r3, [r4, r3]
 8025568:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802556c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025570:	2a00      	cmp	r2, #0
 8025572:	f000 81aa 	beq.w	80258ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8025576:	f898 c001 	ldrb.w	ip, [r8, #1]
 802557a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802557e:	940b      	str	r4, [sp, #44]	; 0x2c
 8025580:	0e24      	lsrs	r4, r4, #24
 8025582:	9412      	str	r4, [sp, #72]	; 0x48
 8025584:	b178      	cbz	r0, 80255a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8025586:	eb08 0c01 	add.w	ip, r8, r1
 802558a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802558e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025592:	9108      	str	r1, [sp, #32]
 8025594:	0e09      	lsrs	r1, r1, #24
 8025596:	9110      	str	r1, [sp, #64]	; 0x40
 8025598:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802559c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80255a0:	910c      	str	r1, [sp, #48]	; 0x30
 80255a2:	0e09      	lsrs	r1, r1, #24
 80255a4:	9113      	str	r1, [sp, #76]	; 0x4c
 80255a6:	b292      	uxth	r2, r2
 80255a8:	b280      	uxth	r0, r0
 80255aa:	fb02 f900 	mul.w	r9, r2, r0
 80255ae:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80255b2:	0112      	lsls	r2, r2, #4
 80255b4:	eba2 0809 	sub.w	r8, r2, r9
 80255b8:	b280      	uxth	r0, r0
 80255ba:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80255be:	9912      	ldr	r1, [sp, #72]	; 0x48
 80255c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80255c2:	fa1f f888 	uxth.w	r8, r8
 80255c6:	1a12      	subs	r2, r2, r0
 80255c8:	b292      	uxth	r2, r2
 80255ca:	fb08 f101 	mul.w	r1, r8, r1
 80255ce:	fb02 110e 	mla	r1, r2, lr, r1
 80255d2:	fb00 1104 	mla	r1, r0, r4, r1
 80255d6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80255d8:	fb09 1104 	mla	r1, r9, r4, r1
 80255dc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80255e0:	2900      	cmp	r1, #0
 80255e2:	f000 80f5 	beq.w	80257d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80255e6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80255ea:	d01b      	beq.n	8025624 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80255ec:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80255f0:	fb0e fa0a 	mul.w	sl, lr, sl
 80255f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80255f8:	fb0e fe03 	mul.w	lr, lr, r3
 80255fc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025600:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025604:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025608:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802560c:	4453      	add	r3, sl
 802560e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025612:	0a1b      	lsrs	r3, r3, #8
 8025614:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025618:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802561c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025620:	ea43 030c 	orr.w	r3, r3, ip
 8025624:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025626:	2cff      	cmp	r4, #255	; 0xff
 8025628:	d021      	beq.n	802566e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802562a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802562c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025630:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025632:	fb04 fb0b 	mul.w	fp, r4, fp
 8025636:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025638:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802563c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802563e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025642:	fb04 fa0a 	mul.w	sl, r4, sl
 8025646:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802564a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802564e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025652:	44de      	add	lr, fp
 8025654:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025658:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802565c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025660:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025664:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025668:	ea4e 040a 	orr.w	r4, lr, sl
 802566c:	940b      	str	r4, [sp, #44]	; 0x2c
 802566e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025670:	2cff      	cmp	r4, #255	; 0xff
 8025672:	d021      	beq.n	80256b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8025674:	9c08      	ldr	r4, [sp, #32]
 8025676:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802567a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802567c:	fb04 fb0b 	mul.w	fp, r4, fp
 8025680:	9c08      	ldr	r4, [sp, #32]
 8025682:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025686:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025688:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802568c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025690:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025694:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025698:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802569c:	44de      	add	lr, fp
 802569e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80256a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80256a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80256aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80256ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80256b2:	ea4e 040a 	orr.w	r4, lr, sl
 80256b6:	9408      	str	r4, [sp, #32]
 80256b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80256ba:	2cff      	cmp	r4, #255	; 0xff
 80256bc:	d021      	beq.n	8025702 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80256be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80256c0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80256c4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80256c6:	fb04 fb0b 	mul.w	fp, r4, fp
 80256ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80256cc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80256d0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80256d2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80256d6:	fb04 fa0a 	mul.w	sl, r4, sl
 80256da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80256de:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80256e2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80256e6:	44de      	add	lr, fp
 80256e8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80256ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80256f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80256f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80256f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80256fc:	ea4e 040a 	orr.w	r4, lr, sl
 8025700:	940c      	str	r4, [sp, #48]	; 0x30
 8025702:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025704:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025708:	9c08      	ldr	r4, [sp, #32]
 802570a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802570e:	fb08 fc0c 	mul.w	ip, r8, ip
 8025712:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025716:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802571a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802571c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025720:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025724:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025726:	fb09 cc0e 	mla	ip, r9, lr, ip
 802572a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802572e:	fb08 f80e 	mul.w	r8, r8, lr
 8025732:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025736:	fb02 8303 	mla	r3, r2, r3, r8
 802573a:	9a08      	ldr	r2, [sp, #32]
 802573c:	f8b7 8000 	ldrh.w	r8, [r7]
 8025740:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025744:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025746:	fb00 330a 	mla	r3, r0, sl, r3
 802574a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802574e:	fb09 3900 	mla	r9, r9, r0, r3
 8025752:	43c9      	mvns	r1, r1
 8025754:	ea4f 2228 	mov.w	r2, r8, asr #8
 8025758:	fa5f fe81 	uxtb.w	lr, r1
 802575c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025760:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025764:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025768:	fb02 f20e 	mul.w	r2, r2, lr
 802576c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025770:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025774:	ea4c 0c09 	orr.w	ip, ip, r9
 8025778:	1c53      	adds	r3, r2, #1
 802577a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802577e:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8025782:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8025786:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802578a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802578e:	4a63      	ldr	r2, [pc, #396]	; (802591c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 8025790:	fb00 f00e 	mul.w	r0, r0, lr
 8025794:	b2db      	uxtb	r3, r3
 8025796:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 802579a:	1c43      	adds	r3, r0, #1
 802579c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80257a0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80257a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80257a8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80257ac:	b2c9      	uxtb	r1, r1
 80257ae:	00db      	lsls	r3, r3, #3
 80257b0:	fb01 f10e 	mul.w	r1, r1, lr
 80257b4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80257b8:	4313      	orrs	r3, r2
 80257ba:	1c4a      	adds	r2, r1, #1
 80257bc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80257c0:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80257c4:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80257c8:	ea4c 0c03 	orr.w	ip, ip, r3
 80257cc:	f8a7 c000 	strh.w	ip, [r7]
 80257d0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80257d2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80257d4:	441a      	add	r2, r3
 80257d6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80257d8:	922d      	str	r2, [sp, #180]	; 0xb4
 80257da:	441d      	add	r5, r3
 80257dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80257de:	3b01      	subs	r3, #1
 80257e0:	3702      	adds	r7, #2
 80257e2:	9317      	str	r3, [sp, #92]	; 0x5c
 80257e4:	e699      	b.n	802551a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80257e6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80257e8:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80257ea:	441c      	add	r4, r3
 80257ec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80257ee:	942d      	str	r4, [sp, #180]	; 0xb4
 80257f0:	441d      	add	r5, r3
 80257f2:	9b07      	ldr	r3, [sp, #28]
 80257f4:	3b01      	subs	r3, #1
 80257f6:	9307      	str	r3, [sp, #28]
 80257f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80257fa:	3302      	adds	r3, #2
 80257fc:	930a      	str	r3, [sp, #40]	; 0x28
 80257fe:	e66b      	b.n	80254d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025800:	d024      	beq.n	802584c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8025802:	9b07      	ldr	r3, [sp, #28]
 8025804:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8025806:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8025808:	3b01      	subs	r3, #1
 802580a:	fb00 4003 	mla	r0, r0, r3, r4
 802580e:	1400      	asrs	r0, r0, #16
 8025810:	f53f ae80 	bmi.w	8025514 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8025814:	3901      	subs	r1, #1
 8025816:	4288      	cmp	r0, r1
 8025818:	f6bf ae7c 	bge.w	8025514 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 802581c:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802581e:	fb01 5303 	mla	r3, r1, r3, r5
 8025822:	141b      	asrs	r3, r3, #16
 8025824:	f53f ae76 	bmi.w	8025514 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8025828:	3a01      	subs	r2, #1
 802582a:	4293      	cmp	r3, r2
 802582c:	f6bf ae72 	bge.w	8025514 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8025830:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025834:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8025838:	f1bb 0f00 	cmp.w	fp, #0
 802583c:	dc70      	bgt.n	8025920 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802583e:	9b07      	ldr	r3, [sp, #28]
 8025840:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025846:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802584a:	930a      	str	r3, [sp, #40]	; 0x28
 802584c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802584e:	2b00      	cmp	r3, #0
 8025850:	f340 81ae 	ble.w	8025bb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8025854:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025858:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802585c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025860:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025862:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025866:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802586a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802586e:	eef0 6a48 	vmov.f32	s13, s16
 8025872:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025876:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802587a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802587e:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8025882:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025886:	eef0 6a68 	vmov.f32	s13, s17
 802588a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802588e:	ee18 2a10 	vmov	r2, s16
 8025892:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025896:	fb92 f3f3 	sdiv	r3, r2, r3
 802589a:	ee18 2a90 	vmov	r2, s17
 802589e:	932f      	str	r3, [sp, #188]	; 0xbc
 80258a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80258a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80258a6:	9330      	str	r3, [sp, #192]	; 0xc0
 80258a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80258aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80258ac:	3b01      	subs	r3, #1
 80258ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80258b2:	9316      	str	r3, [sp, #88]	; 0x58
 80258b4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80258b6:	bf08      	it	eq
 80258b8:	4613      	moveq	r3, r2
 80258ba:	ee16 5a90 	vmov	r5, s13
 80258be:	9307      	str	r3, [sp, #28]
 80258c0:	eef0 8a67 	vmov.f32	s17, s15
 80258c4:	eeb0 8a47 	vmov.f32	s16, s14
 80258c8:	e5f8      	b.n	80254bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80258ca:	2800      	cmp	r0, #0
 80258cc:	f43f ae6b 	beq.w	80255a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80258d0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80258d4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80258d8:	9108      	str	r1, [sp, #32]
 80258da:	0e09      	lsrs	r1, r1, #24
 80258dc:	9110      	str	r1, [sp, #64]	; 0x40
 80258de:	e662      	b.n	80255a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80258e0:	f113 0801 	adds.w	r8, r3, #1
 80258e4:	f53f af74 	bmi.w	80257d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80258e8:	4541      	cmp	r1, r8
 80258ea:	f6ff af71 	blt.w	80257d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80258ee:	f11c 0801 	adds.w	r8, ip, #1
 80258f2:	f53f af6d 	bmi.w	80257d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80258f6:	45c6      	cmp	lr, r8
 80258f8:	f6ff af6a 	blt.w	80257d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80258fc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8025900:	b209      	sxth	r1, r1
 8025902:	fa0f f38e 	sxth.w	r3, lr
 8025906:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802590a:	9301      	str	r3, [sp, #4]
 802590c:	9100      	str	r1, [sp, #0]
 802590e:	4633      	mov	r3, r6
 8025910:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025912:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025914:	4639      	mov	r1, r7
 8025916:	f7ff fc4d 	bl	80251b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 802591a:	e759      	b.n	80257d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802591c:	fffff800 	.word	0xfffff800
 8025920:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025922:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8025924:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025928:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802592a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802592e:	1427      	asrs	r7, r4, #16
 8025930:	142b      	asrs	r3, r5, #16
 8025932:	fb01 7303 	mla	r3, r1, r3, r7
 8025936:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025938:	18e7      	adds	r7, r4, r3
 802593a:	5ce3      	ldrb	r3, [r4, r3]
 802593c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025940:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025944:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025948:	2a00      	cmp	r2, #0
 802594a:	f000 8127 	beq.w	8025b9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 802594e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8025952:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8025956:	940d      	str	r4, [sp, #52]	; 0x34
 8025958:	0e24      	lsrs	r4, r4, #24
 802595a:	9414      	str	r4, [sp, #80]	; 0x50
 802595c:	b170      	cbz	r0, 802597c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 802595e:	eb07 0e01 	add.w	lr, r7, r1
 8025962:	5c79      	ldrb	r1, [r7, r1]
 8025964:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025968:	9109      	str	r1, [sp, #36]	; 0x24
 802596a:	0e09      	lsrs	r1, r1, #24
 802596c:	9111      	str	r1, [sp, #68]	; 0x44
 802596e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8025972:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025976:	910e      	str	r1, [sp, #56]	; 0x38
 8025978:	0e09      	lsrs	r1, r1, #24
 802597a:	9115      	str	r1, [sp, #84]	; 0x54
 802597c:	b292      	uxth	r2, r2
 802597e:	b280      	uxth	r0, r0
 8025980:	fb02 f800 	mul.w	r8, r2, r0
 8025984:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025988:	0112      	lsls	r2, r2, #4
 802598a:	eba2 0e08 	sub.w	lr, r2, r8
 802598e:	b280      	uxth	r0, r0
 8025990:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025994:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025996:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025998:	fa1f fe8e 	uxth.w	lr, lr
 802599c:	1a09      	subs	r1, r1, r0
 802599e:	b289      	uxth	r1, r1
 80259a0:	fb0e f202 	mul.w	r2, lr, r2
 80259a4:	fb01 220c 	mla	r2, r1, ip, r2
 80259a8:	fb00 2204 	mla	r2, r0, r4, r2
 80259ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80259ae:	fb08 2204 	mla	r2, r8, r4, r2
 80259b2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80259b6:	2a00      	cmp	r2, #0
 80259b8:	f000 80e5 	beq.w	8025b86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 80259bc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80259c0:	d019      	beq.n	80259f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 80259c2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80259c6:	fb0c fa0a 	mul.w	sl, ip, sl
 80259ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80259ce:	fb0c fc03 	mul.w	ip, ip, r3
 80259d2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80259d6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80259da:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80259de:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80259e2:	4453      	add	r3, sl
 80259e4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80259e8:	0a1b      	lsrs	r3, r3, #8
 80259ea:	0a3f      	lsrs	r7, r7, #8
 80259ec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80259f0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80259f4:	433b      	orrs	r3, r7
 80259f6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80259f8:	2cff      	cmp	r4, #255	; 0xff
 80259fa:	d020      	beq.n	8025a3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 80259fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80259fe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025a02:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025a04:	4367      	muls	r7, r4
 8025a06:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025a08:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025a0c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025a0e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025a12:	fb04 fa0a 	mul.w	sl, r4, sl
 8025a16:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025a1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025a1e:	44bc      	add	ip, r7
 8025a20:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025a24:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025a28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025a34:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025a38:	ea4c 040a 	orr.w	r4, ip, sl
 8025a3c:	940d      	str	r4, [sp, #52]	; 0x34
 8025a3e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025a40:	2cff      	cmp	r4, #255	; 0xff
 8025a42:	d020      	beq.n	8025a86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 8025a44:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025a46:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025a4a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025a4c:	4367      	muls	r7, r4
 8025a4e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025a50:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025a54:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025a56:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025a5a:	fb04 fa0a 	mul.w	sl, r4, sl
 8025a5e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025a62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025a66:	44bc      	add	ip, r7
 8025a68:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025a6c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025a70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a74:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025a7c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025a80:	ea4c 040a 	orr.w	r4, ip, sl
 8025a84:	9409      	str	r4, [sp, #36]	; 0x24
 8025a86:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025a88:	2cff      	cmp	r4, #255	; 0xff
 8025a8a:	d020      	beq.n	8025ace <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 8025a8c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025a8e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025a92:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025a94:	4367      	muls	r7, r4
 8025a96:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025a98:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025a9c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025a9e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025aa2:	fb04 fa0a 	mul.w	sl, r4, sl
 8025aa6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025aaa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025aae:	44bc      	add	ip, r7
 8025ab0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025ab4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025ab8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025abc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ac0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025ac4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025ac8:	ea4c 040a 	orr.w	r4, ip, sl
 8025acc:	940e      	str	r4, [sp, #56]	; 0x38
 8025ace:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025ad0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025ad4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025ad6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025ada:	fb0e f707 	mul.w	r7, lr, r7
 8025ade:	fb01 770c 	mla	r7, r1, ip, r7
 8025ae2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025ae6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025ae8:	fb00 770c 	mla	r7, r0, ip, r7
 8025aec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025af0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025af2:	fb08 770c 	mla	r7, r8, ip, r7
 8025af6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8025afa:	fb0e fe0c 	mul.w	lr, lr, ip
 8025afe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025b02:	fb01 e303 	mla	r3, r1, r3, lr
 8025b06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025b08:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8025b0c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025b0e:	fb00 330a 	mla	r3, r0, sl, r3
 8025b12:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8025b16:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025b1a:	f8b9 3000 	ldrh.w	r3, [r9]
 8025b1e:	43d2      	mvns	r2, r2
 8025b20:	1218      	asrs	r0, r3, #8
 8025b22:	b2d2      	uxtb	r2, r2
 8025b24:	10d9      	asrs	r1, r3, #3
 8025b26:	0a3f      	lsrs	r7, r7, #8
 8025b28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b2c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025b30:	00db      	lsls	r3, r3, #3
 8025b32:	4350      	muls	r0, r2
 8025b34:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025b38:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025b3c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025b40:	b2db      	uxtb	r3, r3
 8025b42:	ea47 070c 	orr.w	r7, r7, ip
 8025b46:	4351      	muls	r1, r2
 8025b48:	4353      	muls	r3, r2
 8025b4a:	1c42      	adds	r2, r0, #1
 8025b4c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025b50:	0c3a      	lsrs	r2, r7, #16
 8025b52:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025b56:	4a19      	ldr	r2, [pc, #100]	; (8025bbc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 8025b58:	b2c0      	uxtb	r0, r0
 8025b5a:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8025b5e:	1c4a      	adds	r2, r1, #1
 8025b60:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025b64:	0a3a      	lsrs	r2, r7, #8
 8025b66:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025b6a:	00c9      	lsls	r1, r1, #3
 8025b6c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025b70:	4301      	orrs	r1, r0
 8025b72:	1c58      	adds	r0, r3, #1
 8025b74:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025b78:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8025b7c:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8025b80:	4308      	orrs	r0, r1
 8025b82:	f8a9 0000 	strh.w	r0, [r9]
 8025b86:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025b88:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025b8a:	441a      	add	r2, r3
 8025b8c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025b8e:	922d      	str	r2, [sp, #180]	; 0xb4
 8025b90:	f109 0902 	add.w	r9, r9, #2
 8025b94:	441d      	add	r5, r3
 8025b96:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025b9a:	e64d      	b.n	8025838 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8025b9c:	2800      	cmp	r0, #0
 8025b9e:	f43f aeed 	beq.w	802597c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8025ba2:	5c79      	ldrb	r1, [r7, r1]
 8025ba4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025ba8:	9109      	str	r1, [sp, #36]	; 0x24
 8025baa:	0e09      	lsrs	r1, r1, #24
 8025bac:	9111      	str	r1, [sp, #68]	; 0x44
 8025bae:	e6e5      	b.n	802597c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8025bb0:	b01b      	add	sp, #108	; 0x6c
 8025bb2:	ecbd 8b08 	vpop	{d8-d11}
 8025bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025bba:	bf00      	nop
 8025bbc:	fffff800 	.word	0xfffff800

08025bc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8025bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025bc4:	b085      	sub	sp, #20
 8025bc6:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8025bca:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8025bce:	9103      	str	r1, [sp, #12]
 8025bd0:	fb05 7106 	mla	r1, r5, r6, r7
 8025bd4:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 8025bd8:	2d00      	cmp	r5, #0
 8025bda:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8025bde:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8025be2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8025be6:	9401      	str	r4, [sp, #4]
 8025be8:	eb03 0901 	add.w	r9, r3, r1
 8025bec:	f2c0 80c0 	blt.w	8025d70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8025bf0:	45a8      	cmp	r8, r5
 8025bf2:	f340 80bd 	ble.w	8025d70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8025bf6:	2f00      	cmp	r7, #0
 8025bf8:	f2c0 80b6 	blt.w	8025d68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8025bfc:	42be      	cmp	r6, r7
 8025bfe:	f340 80b3 	ble.w	8025d68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8025c02:	f813 c001 	ldrb.w	ip, [r3, r1]
 8025c06:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8025c0a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025c0e:	d019      	beq.n	8025c44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 8025c10:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8025c14:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025c18:	435a      	muls	r2, r3
 8025c1a:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8025c1e:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8025c22:	fb0c f403 	mul.w	r4, ip, r3
 8025c26:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8025c2a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8025c2e:	441a      	add	r2, r3
 8025c30:	f104 0320 	add.w	r3, r4, #32
 8025c34:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8025c38:	0a1b      	lsrs	r3, r3, #8
 8025c3a:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8025c3e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025c42:	4319      	orrs	r1, r3
 8025c44:	b289      	uxth	r1, r1
 8025c46:	1c7b      	adds	r3, r7, #1
 8025c48:	f100 8097 	bmi.w	8025d7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8025c4c:	429e      	cmp	r6, r3
 8025c4e:	f340 8094 	ble.w	8025d7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8025c52:	2800      	cmp	r0, #0
 8025c54:	f000 8094 	beq.w	8025d80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8025c58:	f899 4001 	ldrb.w	r4, [r9, #1]
 8025c5c:	9b01      	ldr	r3, [sp, #4]
 8025c5e:	2cff      	cmp	r4, #255	; 0xff
 8025c60:	885b      	ldrh	r3, [r3, #2]
 8025c62:	d01b      	beq.n	8025c9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 8025c64:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8025c68:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8025c6c:	fb0a f202 	mul.w	r2, sl, r2
 8025c70:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025c74:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025c78:	fb04 fa03 	mul.w	sl, r4, r3
 8025c7c:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8025c80:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8025c84:	441a      	add	r2, r3
 8025c86:	f10a 0320 	add.w	r3, sl, #32
 8025c8a:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8025c8e:	0a1b      	lsrs	r3, r3, #8
 8025c90:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8025c94:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025c98:	ea4b 0303 	orr.w	r3, fp, r3
 8025c9c:	b29b      	uxth	r3, r3
 8025c9e:	3501      	adds	r5, #1
 8025ca0:	d474      	bmi.n	8025d8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8025ca2:	45a8      	cmp	r8, r5
 8025ca4:	dd72      	ble.n	8025d8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8025ca6:	f1be 0f00 	cmp.w	lr, #0
 8025caa:	f000 8120 	beq.w	8025eee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8025cae:	2f00      	cmp	r7, #0
 8025cb0:	db69      	blt.n	8025d86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8025cb2:	42be      	cmp	r6, r7
 8025cb4:	dd67      	ble.n	8025d86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8025cb6:	f819 5006 	ldrb.w	r5, [r9, r6]
 8025cba:	9a01      	ldr	r2, [sp, #4]
 8025cbc:	2dff      	cmp	r5, #255	; 0xff
 8025cbe:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8025cc2:	d01c      	beq.n	8025cfe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8025cc4:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8025cc8:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8025ccc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8025cd0:	fb05 fa0b 	mul.w	sl, r5, fp
 8025cd4:	fb08 f802 	mul.w	r8, r8, r2
 8025cd8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025cdc:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8025ce0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025ce4:	4490      	add	r8, r2
 8025ce6:	f10a 0220 	add.w	r2, sl, #32
 8025cea:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8025cee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025cf2:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8025cf6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025cfa:	ea4b 0b0a 	orr.w	fp, fp, sl
 8025cfe:	fa1f fb8b 	uxth.w	fp, fp
 8025d02:	3701      	adds	r7, #1
 8025d04:	d447      	bmi.n	8025d96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8025d06:	42be      	cmp	r6, r7
 8025d08:	dd45      	ble.n	8025d96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8025d0a:	2800      	cmp	r0, #0
 8025d0c:	d046      	beq.n	8025d9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 8025d0e:	3601      	adds	r6, #1
 8025d10:	9a01      	ldr	r2, [sp, #4]
 8025d12:	f819 7006 	ldrb.w	r7, [r9, r6]
 8025d16:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8025d1a:	2fff      	cmp	r7, #255	; 0xff
 8025d1c:	d01a      	beq.n	8025d54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 8025d1e:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8025d22:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8025d26:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025d2a:	fb07 f902 	mul.w	r9, r7, r2
 8025d2e:	fb08 f806 	mul.w	r8, r8, r6
 8025d32:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8025d36:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8025d3a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025d3e:	44b0      	add	r8, r6
 8025d40:	f109 0620 	add.w	r6, r9, #32
 8025d44:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8025d48:	0a36      	lsrs	r6, r6, #8
 8025d4a:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8025d4e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8025d52:	4332      	orrs	r2, r6
 8025d54:	b292      	uxth	r2, r2
 8025d56:	280f      	cmp	r0, #15
 8025d58:	d922      	bls.n	8025da0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8025d5a:	4b69      	ldr	r3, [pc, #420]	; (8025f00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8025d5c:	4a69      	ldr	r2, [pc, #420]	; (8025f04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 8025d5e:	486a      	ldr	r0, [pc, #424]	; (8025f08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8025d60:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8025d64:	f006 fcc0 	bl	802c6e8 <__assert_func>
 8025d68:	f04f 0c00 	mov.w	ip, #0
 8025d6c:	4661      	mov	r1, ip
 8025d6e:	e76a      	b.n	8025c46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8025d70:	2400      	movs	r4, #0
 8025d72:	46a4      	mov	ip, r4
 8025d74:	4623      	mov	r3, r4
 8025d76:	4621      	mov	r1, r4
 8025d78:	e791      	b.n	8025c9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8025d7a:	2400      	movs	r4, #0
 8025d7c:	4623      	mov	r3, r4
 8025d7e:	e78e      	b.n	8025c9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8025d80:	4604      	mov	r4, r0
 8025d82:	4603      	mov	r3, r0
 8025d84:	e78b      	b.n	8025c9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8025d86:	2500      	movs	r5, #0
 8025d88:	46ab      	mov	fp, r5
 8025d8a:	e7ba      	b.n	8025d02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8025d8c:	2700      	movs	r7, #0
 8025d8e:	463d      	mov	r5, r7
 8025d90:	463a      	mov	r2, r7
 8025d92:	46bb      	mov	fp, r7
 8025d94:	e7df      	b.n	8025d56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8025d96:	2700      	movs	r7, #0
 8025d98:	463a      	mov	r2, r7
 8025d9a:	e7dc      	b.n	8025d56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8025d9c:	4607      	mov	r7, r0
 8025d9e:	4602      	mov	r2, r0
 8025da0:	f1be 0f0f 	cmp.w	lr, #15
 8025da4:	d8d9      	bhi.n	8025d5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8025da6:	b286      	uxth	r6, r0
 8025da8:	fa1f f98e 	uxth.w	r9, lr
 8025dac:	fb06 f809 	mul.w	r8, r6, r9
 8025db0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025db4:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8025db8:	0136      	lsls	r6, r6, #4
 8025dba:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025dbe:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025dc2:	9601      	str	r6, [sp, #4]
 8025dc4:	ea4a 0101 	orr.w	r1, sl, r1
 8025dc8:	fa1f f689 	uxth.w	r6, r9
 8025dcc:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8025dd0:	fb10 f90e 	smulbb	r9, r0, lr
 8025dd4:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8025dd8:	9602      	str	r6, [sp, #8]
 8025dda:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025dde:	460e      	mov	r6, r1
 8025de0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025de4:	f1ce 0110 	rsb	r1, lr, #16
 8025de8:	1a09      	subs	r1, r1, r0
 8025dea:	ea4a 0303 	orr.w	r3, sl, r3
 8025dee:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8025df2:	4343      	muls	r3, r0
 8025df4:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8025df8:	9801      	ldr	r0, [sp, #4]
 8025dfa:	fb01 3106 	mla	r1, r1, r6, r3
 8025dfe:	9e02      	ldr	r6, [sp, #8]
 8025e00:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8025e04:	1b80      	subs	r0, r0, r6
 8025e06:	9e01      	ldr	r6, [sp, #4]
 8025e08:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025e0c:	eba6 0608 	sub.w	r6, r6, r8
 8025e10:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025e14:	b2b6      	uxth	r6, r6
 8025e16:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025e1a:	ea4a 0202 	orr.w	r2, sl, r2
 8025e1e:	b280      	uxth	r0, r0
 8025e20:	4374      	muls	r4, r6
 8025e22:	fb09 1302 	mla	r3, r9, r2, r1
 8025e26:	fb0c 4400 	mla	r4, ip, r0, r4
 8025e2a:	9a03      	ldr	r2, [sp, #12]
 8025e2c:	9802      	ldr	r0, [sp, #8]
 8025e2e:	8811      	ldrh	r1, [r2, #0]
 8025e30:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8025e34:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8025e38:	fb00 4505 	mla	r5, r0, r5, r4
 8025e3c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025e40:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8025e44:	fb08 5707 	mla	r7, r8, r7, r5
 8025e48:	ea4a 0b0b 	orr.w	fp, sl, fp
 8025e4c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8025e50:	b292      	uxth	r2, r2
 8025e52:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8025e56:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025e5a:	4357      	muls	r7, r2
 8025e5c:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8025e60:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025e64:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025e68:	f107 0801 	add.w	r8, r7, #1
 8025e6c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025e70:	ea43 0e0e 	orr.w	lr, r3, lr
 8025e74:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8025e78:	fa1f f38e 	uxth.w	r3, lr
 8025e7c:	1208      	asrs	r0, r1, #8
 8025e7e:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8025e82:	b2ff      	uxtb	r7, r7
 8025e84:	121c      	asrs	r4, r3, #8
 8025e86:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025e8a:	fb10 f007 	smulbb	r0, r0, r7
 8025e8e:	10cd      	asrs	r5, r1, #3
 8025e90:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025e94:	fb04 0402 	mla	r4, r4, r2, r0
 8025e98:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025e9c:	10d8      	asrs	r0, r3, #3
 8025e9e:	fb15 f507 	smulbb	r5, r5, r7
 8025ea2:	00db      	lsls	r3, r3, #3
 8025ea4:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025ea8:	fb00 5002 	mla	r0, r0, r2, r5
 8025eac:	b2dd      	uxtb	r5, r3
 8025eae:	00cb      	lsls	r3, r1, #3
 8025eb0:	b2db      	uxtb	r3, r3
 8025eb2:	fb13 f307 	smulbb	r3, r3, r7
 8025eb6:	fb05 3202 	mla	r2, r5, r2, r3
 8025eba:	b2a4      	uxth	r4, r4
 8025ebc:	b292      	uxth	r2, r2
 8025ebe:	1c63      	adds	r3, r4, #1
 8025ec0:	b280      	uxth	r0, r0
 8025ec2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8025ec6:	1c53      	adds	r3, r2, #1
 8025ec8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025ecc:	1c42      	adds	r2, r0, #1
 8025ece:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025ed2:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8025ed6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025eda:	0940      	lsrs	r0, r0, #5
 8025edc:	4323      	orrs	r3, r4
 8025ede:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025ee2:	9a03      	ldr	r2, [sp, #12]
 8025ee4:	4303      	orrs	r3, r0
 8025ee6:	8013      	strh	r3, [r2, #0]
 8025ee8:	b005      	add	sp, #20
 8025eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025eee:	280f      	cmp	r0, #15
 8025ef0:	f63f af33 	bhi.w	8025d5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8025ef4:	4677      	mov	r7, lr
 8025ef6:	4675      	mov	r5, lr
 8025ef8:	4672      	mov	r2, lr
 8025efa:	46f3      	mov	fp, lr
 8025efc:	e753      	b.n	8025da6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8025efe:	bf00      	nop
 8025f00:	08031c31 	.word	0x08031c31
 8025f04:	080321fa 	.word	0x080321fa
 8025f08:	08031cb5 	.word	0x08031cb5

08025f0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f10:	ed2d 8b08 	vpush	{d8-d11}
 8025f14:	b097      	sub	sp, #92	; 0x5c
 8025f16:	eeb0 aa40 	vmov.f32	s20, s0
 8025f1a:	9214      	str	r2, [sp, #80]	; 0x50
 8025f1c:	9308      	str	r3, [sp, #32]
 8025f1e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025f20:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8025f24:	9312      	str	r3, [sp, #72]	; 0x48
 8025f26:	9111      	str	r1, [sp, #68]	; 0x44
 8025f28:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025f2c:	9015      	str	r0, [sp, #84]	; 0x54
 8025f2e:	6850      	ldr	r0, [r2, #4]
 8025f30:	6812      	ldr	r2, [r2, #0]
 8025f32:	fb00 1303 	mla	r3, r0, r3, r1
 8025f36:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8025f3c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025f3e:	681b      	ldr	r3, [r3, #0]
 8025f40:	930b      	str	r3, [sp, #44]	; 0x2c
 8025f42:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025f44:	685b      	ldr	r3, [r3, #4]
 8025f46:	930c      	str	r3, [sp, #48]	; 0x30
 8025f48:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8025f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8025f4e:	eef0 9a60 	vmov.f32	s19, s1
 8025f52:	eeb0 9a41 	vmov.f32	s18, s2
 8025f56:	eeb0 8a62 	vmov.f32	s16, s5
 8025f5a:	eef0 8a43 	vmov.f32	s17, s6
 8025f5e:	eef0 ba44 	vmov.f32	s23, s8
 8025f62:	eeb0 ba64 	vmov.f32	s22, s9
 8025f66:	eef0 aa45 	vmov.f32	s21, s10
 8025f6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025f6c:	2b00      	cmp	r3, #0
 8025f6e:	dc03      	bgt.n	8025f78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025f70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025f72:	2b00      	cmp	r3, #0
 8025f74:	f340 83cb 	ble.w	802670e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 8025f78:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025f7a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025f7e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025f82:	1e48      	subs	r0, r1, #1
 8025f84:	1e55      	subs	r5, r2, #1
 8025f86:	9b08      	ldr	r3, [sp, #32]
 8025f88:	2b00      	cmp	r3, #0
 8025f8a:	f340 81a3 	ble.w	80262d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8025f8e:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8025f90:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025f92:	1436      	asrs	r6, r6, #16
 8025f94:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025f98:	d406      	bmi.n	8025fa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025f9a:	4286      	cmp	r6, r0
 8025f9c:	da04      	bge.n	8025fa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025f9e:	2b00      	cmp	r3, #0
 8025fa0:	db02      	blt.n	8025fa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025fa2:	42ab      	cmp	r3, r5
 8025fa4:	f2c0 8197 	blt.w	80262d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8025fa8:	3601      	adds	r6, #1
 8025faa:	f100 8184 	bmi.w	80262b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025fae:	42b1      	cmp	r1, r6
 8025fb0:	f2c0 8181 	blt.w	80262b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025fb4:	3301      	adds	r3, #1
 8025fb6:	f100 817e 	bmi.w	80262b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025fba:	429a      	cmp	r2, r3
 8025fbc:	f2c0 817b 	blt.w	80262b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025fc0:	9b08      	ldr	r3, [sp, #32]
 8025fc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025fc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8025fc6:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025fca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025fcc:	2b00      	cmp	r3, #0
 8025fce:	f340 81a4 	ble.w	802631a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8025fd2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025fd4:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8025fd6:	1418      	asrs	r0, r3, #16
 8025fd8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025fda:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025fde:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025fe0:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8025fe4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025fe6:	142d      	asrs	r5, r5, #16
 8025fe8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025fec:	f100 81f8 	bmi.w	80263e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8025ff0:	f102 3eff 	add.w	lr, r2, #4294967295
 8025ff4:	4575      	cmp	r5, lr
 8025ff6:	f280 81f3 	bge.w	80263e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8025ffa:	2800      	cmp	r0, #0
 8025ffc:	f2c0 81f0 	blt.w	80263e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8026000:	f103 3eff 	add.w	lr, r3, #4294967295
 8026004:	4570      	cmp	r0, lr
 8026006:	f280 81eb 	bge.w	80263e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 802600a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802600c:	b212      	sxth	r2, r2
 802600e:	fb00 5002 	mla	r0, r0, r2, r5
 8026012:	fa1f fe81 	uxth.w	lr, r1
 8026016:	eb03 0a00 	add.w	sl, r3, r0
 802601a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802601e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8026022:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026026:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802602a:	b29b      	uxth	r3, r3
 802602c:	f1bc 0f00 	cmp.w	ip, #0
 8026030:	f000 81b9 	beq.w	80263a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8026034:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026038:	940d      	str	r4, [sp, #52]	; 0x34
 802603a:	eb0a 0b02 	add.w	fp, sl, r2
 802603e:	fa1f fa8c 	uxth.w	sl, ip
 8026042:	fb0a fe0e 	mul.w	lr, sl, lr
 8026046:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802604a:	fa1f fa8a 	uxth.w	sl, sl
 802604e:	eba5 050e 	sub.w	r5, r5, lr
 8026052:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026056:	940e      	str	r4, [sp, #56]	; 0x38
 8026058:	eba3 030a 	sub.w	r3, r3, sl
 802605c:	b2ad      	uxth	r5, r5
 802605e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026060:	b29b      	uxth	r3, r3
 8026062:	fb08 f505 	mul.w	r5, r8, r5
 8026066:	fb09 5303 	mla	r3, r9, r3, r5
 802606a:	fb0a 3304 	mla	r3, sl, r4, r3
 802606e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026070:	fb0e 3304 	mla	r3, lr, r4, r3
 8026074:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026078:	2b00      	cmp	r3, #0
 802607a:	f000 810f 	beq.w	802629c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 802607e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026080:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026084:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026088:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802608c:	f000 8190 	beq.w	80263b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8026090:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026094:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026098:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802609c:	fb09 f000 	mul.w	r0, r9, r0
 80260a0:	fb0a fe0e 	mul.w	lr, sl, lr
 80260a4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80260a8:	f100 0b20 	add.w	fp, r0, #32
 80260ac:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80260b0:	44ce      	add	lr, r9
 80260b2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80260b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80260ba:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80260be:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80260c2:	ea4e 0909 	orr.w	r9, lr, r9
 80260c6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80260ca:	8868      	ldrh	r0, [r5, #2]
 80260cc:	d019      	beq.n	8026102 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80260ce:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80260d2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80260d6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80260da:	fb08 f800 	mul.w	r8, r8, r0
 80260de:	fb0a fe0e 	mul.w	lr, sl, lr
 80260e2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80260e6:	f108 0b20 	add.w	fp, r8, #32
 80260ea:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80260ee:	4486      	add	lr, r0
 80260f0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80260f4:	0a00      	lsrs	r0, r0, #8
 80260f6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80260fa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80260fe:	ea4e 0000 	orr.w	r0, lr, r0
 8026102:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026106:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802610a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802610e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026112:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026116:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802611a:	ea4e 0909 	orr.w	r9, lr, r9
 802611e:	ea4a 0000 	orr.w	r0, sl, r0
 8026122:	f1bc 0f00 	cmp.w	ip, #0
 8026126:	f000 8145 	beq.w	80263b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 802612a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802612e:	3a01      	subs	r2, #1
 8026130:	0052      	lsls	r2, r2, #1
 8026132:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026134:	3202      	adds	r2, #2
 8026136:	2cff      	cmp	r4, #255	; 0xff
 8026138:	eb05 0e02 	add.w	lr, r5, r2
 802613c:	5aaa      	ldrh	r2, [r5, r2]
 802613e:	d018      	beq.n	8026172 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8026140:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8026144:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026148:	fb04 fa02 	mul.w	sl, r4, r2
 802614c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026150:	fb08 f805 	mul.w	r8, r8, r5
 8026154:	f10a 0520 	add.w	r5, sl, #32
 8026158:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802615c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026160:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026164:	4442      	add	r2, r8
 8026166:	0a2d      	lsrs	r5, r5, #8
 8026168:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802616c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026170:	432a      	orrs	r2, r5
 8026172:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026174:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026178:	2cff      	cmp	r4, #255	; 0xff
 802617a:	d01a      	beq.n	80261b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802617c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8026180:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026184:	fb04 fa05 	mul.w	sl, r4, r5
 8026188:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802618c:	fb08 f80e 	mul.w	r8, r8, lr
 8026190:	f10a 0e20 	add.w	lr, sl, #32
 8026194:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026198:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802619c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80261a0:	4445      	add	r5, r8
 80261a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80261a6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80261aa:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80261ae:	ea45 050e 	orr.w	r5, r5, lr
 80261b2:	fb1c fe01 	smulbb	lr, ip, r1
 80261b6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80261ba:	f1cc 0810 	rsb	r8, ip, #16
 80261be:	eba8 0801 	sub.w	r8, r8, r1
 80261c2:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80261c6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80261ca:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80261ce:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80261d2:	4341      	muls	r1, r0
 80261d4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80261d8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80261dc:	ea4a 0202 	orr.w	r2, sl, r2
 80261e0:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80261e4:	fb09 1108 	mla	r1, r9, r8, r1
 80261e8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80261ec:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80261f0:	fb0c 1102 	mla	r1, ip, r2, r1
 80261f4:	ea4b 0505 	orr.w	r5, fp, r5
 80261f8:	fb0e 1e05 	mla	lr, lr, r5, r1
 80261fc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026200:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026204:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026208:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802620c:	ea42 0e0e 	orr.w	lr, r2, lr
 8026210:	fa1f f28e 	uxth.w	r2, lr
 8026214:	2bff      	cmp	r3, #255	; 0xff
 8026216:	d103      	bne.n	8026220 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8026218:	9912      	ldr	r1, [sp, #72]	; 0x48
 802621a:	29ff      	cmp	r1, #255	; 0xff
 802621c:	f000 80de 	beq.w	80263dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8026220:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026222:	8838      	ldrh	r0, [r7, #0]
 8026224:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026226:	434b      	muls	r3, r1
 8026228:	f103 0c01 	add.w	ip, r3, #1
 802622c:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8026230:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026234:	fa5f fc83 	uxtb.w	ip, r3
 8026238:	1203      	asrs	r3, r0, #8
 802623a:	1215      	asrs	r5, r2, #8
 802623c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8026240:	fb13 f30c 	smulbb	r3, r3, ip
 8026244:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026248:	fb05 3501 	mla	r5, r5, r1, r3
 802624c:	10c3      	asrs	r3, r0, #3
 802624e:	10d1      	asrs	r1, r2, #3
 8026250:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026254:	fb13 f30c 	smulbb	r3, r3, ip
 8026258:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802625c:	fb01 3104 	mla	r1, r1, r4, r3
 8026260:	00c3      	lsls	r3, r0, #3
 8026262:	00d2      	lsls	r2, r2, #3
 8026264:	b2db      	uxtb	r3, r3
 8026266:	b2d2      	uxtb	r2, r2
 8026268:	fb13 f30c 	smulbb	r3, r3, ip
 802626c:	b2ad      	uxth	r5, r5
 802626e:	fb02 3304 	mla	r3, r2, r4, r3
 8026272:	b29a      	uxth	r2, r3
 8026274:	1c6b      	adds	r3, r5, #1
 8026276:	b289      	uxth	r1, r1
 8026278:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802627c:	1c53      	adds	r3, r2, #1
 802627e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026282:	1c4a      	adds	r2, r1, #1
 8026284:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026288:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802628c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026290:	0949      	lsrs	r1, r1, #5
 8026292:	432b      	orrs	r3, r5
 8026294:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026298:	430b      	orrs	r3, r1
 802629a:	803b      	strh	r3, [r7, #0]
 802629c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802629e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80262a0:	4413      	add	r3, r2
 80262a2:	9329      	str	r3, [sp, #164]	; 0xa4
 80262a4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80262a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80262a8:	441a      	add	r2, r3
 80262aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80262ac:	922a      	str	r2, [sp, #168]	; 0xa8
 80262ae:	3b01      	subs	r3, #1
 80262b0:	3702      	adds	r7, #2
 80262b2:	9313      	str	r3, [sp, #76]	; 0x4c
 80262b4:	e689      	b.n	8025fca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80262b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80262b8:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 80262ba:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80262bc:	4433      	add	r3, r6
 80262be:	9329      	str	r3, [sp, #164]	; 0xa4
 80262c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80262c2:	441c      	add	r4, r3
 80262c4:	9b08      	ldr	r3, [sp, #32]
 80262c6:	942a      	str	r4, [sp, #168]	; 0xa8
 80262c8:	3b01      	subs	r3, #1
 80262ca:	9308      	str	r3, [sp, #32]
 80262cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80262ce:	3302      	adds	r3, #2
 80262d0:	9309      	str	r3, [sp, #36]	; 0x24
 80262d2:	e658      	b.n	8025f86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80262d4:	d028      	beq.n	8026328 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80262d6:	9b08      	ldr	r3, [sp, #32]
 80262d8:	982b      	ldr	r0, [sp, #172]	; 0xac
 80262da:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80262dc:	3b01      	subs	r3, #1
 80262de:	fb00 5003 	mla	r0, r0, r3, r5
 80262e2:	1400      	asrs	r0, r0, #16
 80262e4:	f53f ae6c 	bmi.w	8025fc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80262e8:	3901      	subs	r1, #1
 80262ea:	4288      	cmp	r0, r1
 80262ec:	f6bf ae68 	bge.w	8025fc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80262f0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80262f2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80262f4:	fb01 0303 	mla	r3, r1, r3, r0
 80262f8:	141b      	asrs	r3, r3, #16
 80262fa:	f53f ae61 	bmi.w	8025fc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80262fe:	3a01      	subs	r2, #1
 8026300:	4293      	cmp	r3, r2
 8026302:	f6bf ae5d 	bge.w	8025fc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026306:	9b08      	ldr	r3, [sp, #32]
 8026308:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 802630c:	9313      	str	r3, [sp, #76]	; 0x4c
 802630e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026312:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026314:	2b00      	cmp	r3, #0
 8026316:	f300 8082 	bgt.w	802641e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 802631a:	9b08      	ldr	r3, [sp, #32]
 802631c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026322:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026326:	9309      	str	r3, [sp, #36]	; 0x24
 8026328:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802632a:	2b00      	cmp	r3, #0
 802632c:	f340 81ef 	ble.w	802670e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 8026330:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026334:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026338:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802633c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802633e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026342:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026346:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802634a:	eef0 6a48 	vmov.f32	s13, s16
 802634e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026352:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026356:	ee37 8a48 	vsub.f32	s16, s14, s16
 802635a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802635e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026362:	eef0 6a68 	vmov.f32	s13, s17
 8026366:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802636a:	ee18 2a10 	vmov	r2, s16
 802636e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026372:	fb92 f3f3 	sdiv	r3, r2, r3
 8026376:	ee18 2a90 	vmov	r2, s17
 802637a:	932b      	str	r3, [sp, #172]	; 0xac
 802637c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802637e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026382:	932c      	str	r3, [sp, #176]	; 0xb0
 8026384:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026386:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026388:	3b01      	subs	r3, #1
 802638a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802638e:	9311      	str	r3, [sp, #68]	; 0x44
 8026390:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026392:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8026396:	bf08      	it	eq
 8026398:	4613      	moveq	r3, r2
 802639a:	9308      	str	r3, [sp, #32]
 802639c:	eef0 8a67 	vmov.f32	s17, s15
 80263a0:	eeb0 8a47 	vmov.f32	s16, s14
 80263a4:	e5e1      	b.n	8025f6a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80263a6:	fb08 f505 	mul.w	r5, r8, r5
 80263aa:	fb09 5303 	mla	r3, r9, r3, r5
 80263ae:	e661      	b.n	8026074 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 80263b0:	4681      	mov	r9, r0
 80263b2:	e688      	b.n	80260c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80263b4:	f1c1 0210 	rsb	r2, r1, #16
 80263b8:	4341      	muls	r1, r0
 80263ba:	fb09 1902 	mla	r9, r9, r2, r1
 80263be:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80263c2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80263c6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80263ca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80263ce:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80263d2:	ea42 0909 	orr.w	r9, r2, r9
 80263d6:	fa1f f289 	uxth.w	r2, r9
 80263da:	e71b      	b.n	8026214 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80263dc:	803a      	strh	r2, [r7, #0]
 80263de:	e75d      	b.n	802629c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 80263e0:	f115 0e01 	adds.w	lr, r5, #1
 80263e4:	f53f af5a 	bmi.w	802629c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 80263e8:	4572      	cmp	r2, lr
 80263ea:	f6ff af57 	blt.w	802629c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 80263ee:	f110 0e01 	adds.w	lr, r0, #1
 80263f2:	f53f af53 	bmi.w	802629c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 80263f6:	4573      	cmp	r3, lr
 80263f8:	f6ff af50 	blt.w	802629c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 80263fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80263fe:	9502      	str	r5, [sp, #8]
 8026400:	b21b      	sxth	r3, r3
 8026402:	b212      	sxth	r2, r2
 8026404:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8026408:	9301      	str	r3, [sp, #4]
 802640a:	9200      	str	r2, [sp, #0]
 802640c:	e9cd c405 	strd	ip, r4, [sp, #20]
 8026410:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8026414:	4639      	mov	r1, r7
 8026416:	9815      	ldr	r0, [sp, #84]	; 0x54
 8026418:	f7ff fbd2 	bl	8025bc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 802641c:	e73e      	b.n	802629c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 802641e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026420:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026424:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026426:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802642a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802642c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026430:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026432:	141f      	asrs	r7, r3, #16
 8026434:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026436:	141b      	asrs	r3, r3, #16
 8026438:	fb01 3707 	mla	r7, r1, r7, r3
 802643c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802643e:	fa1f fc82 	uxth.w	ip, r2
 8026442:	eb03 0a07 	add.w	sl, r3, r7
 8026446:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802644a:	f813 9007 	ldrb.w	r9, [r3, r7]
 802644e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026452:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026456:	b29b      	uxth	r3, r3
 8026458:	2d00      	cmp	r5, #0
 802645a:	f000 813d 	beq.w	80266d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 802645e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026462:	940f      	str	r4, [sp, #60]	; 0x3c
 8026464:	eb0a 0b01 	add.w	fp, sl, r1
 8026468:	fa1f fa85 	uxth.w	sl, r5
 802646c:	fb0a fc0c 	mul.w	ip, sl, ip
 8026470:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026474:	fa1f fa8a 	uxth.w	sl, sl
 8026478:	eba0 000c 	sub.w	r0, r0, ip
 802647c:	eba3 030a 	sub.w	r3, r3, sl
 8026480:	b280      	uxth	r0, r0
 8026482:	fb08 f000 	mul.w	r0, r8, r0
 8026486:	b29b      	uxth	r3, r3
 8026488:	fb09 0303 	mla	r3, r9, r3, r0
 802648c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802648e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026492:	9410      	str	r4, [sp, #64]	; 0x40
 8026494:	fb0a 3300 	mla	r3, sl, r0, r3
 8026498:	fb0c 3304 	mla	r3, ip, r4, r3
 802649c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80264a0:	2b00      	cmp	r3, #0
 80264a2:	f000 810b 	beq.w	80266bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 80264a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80264a8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80264aa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80264ae:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80264b2:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80264b6:	f000 8114 	beq.w	80266e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 80264ba:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80264be:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80264c2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80264c6:	fb09 f707 	mul.w	r7, r9, r7
 80264ca:	fb0a fc0c 	mul.w	ip, sl, ip
 80264ce:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80264d2:	f107 0b20 	add.w	fp, r7, #32
 80264d6:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80264da:	44cc      	add	ip, r9
 80264dc:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80264e0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80264e4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80264e8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80264ec:	ea4c 0909 	orr.w	r9, ip, r9
 80264f0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80264f4:	8847      	ldrh	r7, [r0, #2]
 80264f6:	d019      	beq.n	802652c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x620>
 80264f8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80264fc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026500:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026504:	fb08 f807 	mul.w	r8, r8, r7
 8026508:	fb0a fc0c 	mul.w	ip, sl, ip
 802650c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8026510:	f108 0b20 	add.w	fp, r8, #32
 8026514:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026518:	44bc      	add	ip, r7
 802651a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802651e:	0a3f      	lsrs	r7, r7, #8
 8026520:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026524:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026528:	ea4c 0707 	orr.w	r7, ip, r7
 802652c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026530:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026534:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026538:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802653c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026540:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026544:	ea4c 0909 	orr.w	r9, ip, r9
 8026548:	ea4a 0707 	orr.w	r7, sl, r7
 802654c:	2d00      	cmp	r5, #0
 802654e:	f000 80ca 	beq.w	80266e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8026552:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026556:	3901      	subs	r1, #1
 8026558:	0049      	lsls	r1, r1, #1
 802655a:	3102      	adds	r1, #2
 802655c:	eb00 0c01 	add.w	ip, r0, r1
 8026560:	5a41      	ldrh	r1, [r0, r1]
 8026562:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8026564:	28ff      	cmp	r0, #255	; 0xff
 8026566:	d019      	beq.n	802659c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x690>
 8026568:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802656a:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 802656e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026572:	fb04 fa01 	mul.w	sl, r4, r1
 8026576:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802657a:	fb08 f800 	mul.w	r8, r8, r0
 802657e:	f10a 0020 	add.w	r0, sl, #32
 8026582:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8026586:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802658a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802658e:	4441      	add	r1, r8
 8026590:	0a00      	lsrs	r0, r0, #8
 8026592:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026596:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802659a:	4301      	orrs	r1, r0
 802659c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802659e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80265a2:	2cff      	cmp	r4, #255	; 0xff
 80265a4:	d01a      	beq.n	80265dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 80265a6:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80265aa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80265ae:	fb04 fa00 	mul.w	sl, r4, r0
 80265b2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80265b6:	fb08 f80c 	mul.w	r8, r8, ip
 80265ba:	f10a 0c20 	add.w	ip, sl, #32
 80265be:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80265c2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80265c6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80265ca:	4440      	add	r0, r8
 80265cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80265d0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80265d4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80265d8:	ea40 000c 	orr.w	r0, r0, ip
 80265dc:	fb15 fc02 	smulbb	ip, r5, r2
 80265e0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80265e4:	f1c5 0810 	rsb	r8, r5, #16
 80265e8:	eba8 0802 	sub.w	r8, r8, r2
 80265ec:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80265f0:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80265f4:	437a      	muls	r2, r7
 80265f6:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80265fa:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80265fe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026602:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026606:	fb09 2208 	mla	r2, r9, r8, r2
 802660a:	ea4a 0101 	orr.w	r1, sl, r1
 802660e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8026612:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026616:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802661a:	fb05 2201 	mla	r2, r5, r1, r2
 802661e:	ea4b 0000 	orr.w	r0, fp, r0
 8026622:	fb0c 2200 	mla	r2, ip, r0, r2
 8026626:	0d57      	lsrs	r7, r2, #21
 8026628:	0952      	lsrs	r2, r2, #5
 802662a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802662e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026632:	433a      	orrs	r2, r7
 8026634:	2bff      	cmp	r3, #255	; 0xff
 8026636:	b292      	uxth	r2, r2
 8026638:	d102      	bne.n	8026640 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 802663a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802663c:	29ff      	cmp	r1, #255	; 0xff
 802663e:	d063      	beq.n	8026708 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fc>
 8026640:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026642:	f8be 1000 	ldrh.w	r1, [lr]
 8026646:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026648:	4343      	muls	r3, r0
 802664a:	1c58      	adds	r0, r3, #1
 802664c:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8026650:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026654:	1208      	asrs	r0, r1, #8
 8026656:	b2db      	uxtb	r3, r3
 8026658:	1215      	asrs	r5, r2, #8
 802665a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802665e:	fb10 f003 	smulbb	r0, r0, r3
 8026662:	10cf      	asrs	r7, r1, #3
 8026664:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026668:	00c9      	lsls	r1, r1, #3
 802666a:	fb05 0504 	mla	r5, r5, r4, r0
 802666e:	b2c9      	uxtb	r1, r1
 8026670:	10d0      	asrs	r0, r2, #3
 8026672:	00d2      	lsls	r2, r2, #3
 8026674:	fb11 f103 	smulbb	r1, r1, r3
 8026678:	b2d2      	uxtb	r2, r2
 802667a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802667e:	fb02 1204 	mla	r2, r2, r4, r1
 8026682:	fb17 f703 	smulbb	r7, r7, r3
 8026686:	b2ad      	uxth	r5, r5
 8026688:	b292      	uxth	r2, r2
 802668a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802668e:	fb00 7004 	mla	r0, r0, r4, r7
 8026692:	1c6b      	adds	r3, r5, #1
 8026694:	1c57      	adds	r7, r2, #1
 8026696:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802669a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802669e:	b280      	uxth	r0, r0
 80266a0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80266a4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80266a8:	433d      	orrs	r5, r7
 80266aa:	1c47      	adds	r7, r0, #1
 80266ac:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80266b0:	097f      	lsrs	r7, r7, #5
 80266b2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80266b6:	433d      	orrs	r5, r7
 80266b8:	f8ae 5000 	strh.w	r5, [lr]
 80266bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80266be:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80266c0:	4413      	add	r3, r2
 80266c2:	9329      	str	r3, [sp, #164]	; 0xa4
 80266c4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80266c6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80266c8:	441a      	add	r2, r3
 80266ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80266cc:	922a      	str	r2, [sp, #168]	; 0xa8
 80266ce:	3b01      	subs	r3, #1
 80266d0:	f10e 0e02 	add.w	lr, lr, #2
 80266d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80266d6:	e61c      	b.n	8026312 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 80266d8:	fb08 f000 	mul.w	r0, r8, r0
 80266dc:	fb09 0303 	mla	r3, r9, r3, r0
 80266e0:	e6dc      	b.n	802649c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x590>
 80266e2:	46b9      	mov	r9, r7
 80266e4:	e704      	b.n	80264f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e4>
 80266e6:	f1c2 0110 	rsb	r1, r2, #16
 80266ea:	437a      	muls	r2, r7
 80266ec:	fb09 2901 	mla	r9, r9, r1, r2
 80266f0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80266f4:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80266f8:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80266fc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026700:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026704:	4302      	orrs	r2, r0
 8026706:	e795      	b.n	8026634 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8026708:	f8ae 2000 	strh.w	r2, [lr]
 802670c:	e7d6      	b.n	80266bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 802670e:	b017      	add	sp, #92	; 0x5c
 8026710:	ecbd 8b08 	vpop	{d8-d11}
 8026714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026718 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8026718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802671c:	b085      	sub	sp, #20
 802671e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8026722:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8026726:	9103      	str	r1, [sp, #12]
 8026728:	fb05 7106 	mla	r1, r5, r6, r7
 802672c:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 8026730:	2d00      	cmp	r5, #0
 8026732:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8026736:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802673a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802673e:	9401      	str	r4, [sp, #4]
 8026740:	eb02 0901 	add.w	r9, r2, r1
 8026744:	f2c0 80c0 	blt.w	80268c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8026748:	45a8      	cmp	r8, r5
 802674a:	f340 80bd 	ble.w	80268c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 802674e:	2f00      	cmp	r7, #0
 8026750:	f2c0 80b6 	blt.w	80268c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8026754:	42be      	cmp	r6, r7
 8026756:	f340 80b3 	ble.w	80268c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 802675a:	f812 c001 	ldrb.w	ip, [r2, r1]
 802675e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8026762:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026766:	d019      	beq.n	802679c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8026768:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 802676c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026770:	435a      	muls	r2, r3
 8026772:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8026776:	f64f 011f 	movw	r1, #63519	; 0xf81f
 802677a:	fb0c f403 	mul.w	r4, ip, r3
 802677e:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8026782:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8026786:	441a      	add	r2, r3
 8026788:	f104 0320 	add.w	r3, r4, #32
 802678c:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8026790:	0a1b      	lsrs	r3, r3, #8
 8026792:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8026796:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802679a:	4319      	orrs	r1, r3
 802679c:	b289      	uxth	r1, r1
 802679e:	1c7b      	adds	r3, r7, #1
 80267a0:	f100 8097 	bmi.w	80268d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 80267a4:	429e      	cmp	r6, r3
 80267a6:	f340 8094 	ble.w	80268d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 80267aa:	2800      	cmp	r0, #0
 80267ac:	f000 8094 	beq.w	80268d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 80267b0:	f899 4001 	ldrb.w	r4, [r9, #1]
 80267b4:	9b01      	ldr	r3, [sp, #4]
 80267b6:	2cff      	cmp	r4, #255	; 0xff
 80267b8:	885b      	ldrh	r3, [r3, #2]
 80267ba:	d01b      	beq.n	80267f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 80267bc:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 80267c0:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80267c4:	fb0a f202 	mul.w	r2, sl, r2
 80267c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80267cc:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80267d0:	fb04 fa03 	mul.w	sl, r4, r3
 80267d4:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80267d8:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80267dc:	441a      	add	r2, r3
 80267de:	f10a 0320 	add.w	r3, sl, #32
 80267e2:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80267e6:	0a1b      	lsrs	r3, r3, #8
 80267e8:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80267ec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80267f0:	ea4b 0303 	orr.w	r3, fp, r3
 80267f4:	b29b      	uxth	r3, r3
 80267f6:	3501      	adds	r5, #1
 80267f8:	d474      	bmi.n	80268e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 80267fa:	45a8      	cmp	r8, r5
 80267fc:	dd72      	ble.n	80268e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 80267fe:	f1be 0f00 	cmp.w	lr, #0
 8026802:	f000 8110 	beq.w	8026a26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 8026806:	2f00      	cmp	r7, #0
 8026808:	db69      	blt.n	80268de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 802680a:	42be      	cmp	r6, r7
 802680c:	dd67      	ble.n	80268de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 802680e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8026812:	9a01      	ldr	r2, [sp, #4]
 8026814:	2dff      	cmp	r5, #255	; 0xff
 8026816:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 802681a:	d01c      	beq.n	8026856 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 802681c:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8026820:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8026824:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8026828:	fb05 fa0b 	mul.w	sl, r5, fp
 802682c:	fb08 f802 	mul.w	r8, r8, r2
 8026830:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8026834:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8026838:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802683c:	4490      	add	r8, r2
 802683e:	f10a 0220 	add.w	r2, sl, #32
 8026842:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8026846:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802684a:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 802684e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8026852:	ea4b 0b0a 	orr.w	fp, fp, sl
 8026856:	fa1f fb8b 	uxth.w	fp, fp
 802685a:	3701      	adds	r7, #1
 802685c:	d447      	bmi.n	80268ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 802685e:	42be      	cmp	r6, r7
 8026860:	dd45      	ble.n	80268ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8026862:	2800      	cmp	r0, #0
 8026864:	d046      	beq.n	80268f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 8026866:	3601      	adds	r6, #1
 8026868:	9a01      	ldr	r2, [sp, #4]
 802686a:	f819 7006 	ldrb.w	r7, [r9, r6]
 802686e:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8026872:	2fff      	cmp	r7, #255	; 0xff
 8026874:	d01a      	beq.n	80268ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8026876:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 802687a:	ea4f 08e7 	mov.w	r8, r7, asr #3
 802687e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026882:	fb07 f902 	mul.w	r9, r7, r2
 8026886:	fb08 f806 	mul.w	r8, r8, r6
 802688a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802688e:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8026892:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026896:	44b0      	add	r8, r6
 8026898:	f109 0620 	add.w	r6, r9, #32
 802689c:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 80268a0:	0a36      	lsrs	r6, r6, #8
 80268a2:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80268a6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80268aa:	4332      	orrs	r2, r6
 80268ac:	b292      	uxth	r2, r2
 80268ae:	280f      	cmp	r0, #15
 80268b0:	d922      	bls.n	80268f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 80268b2:	4b61      	ldr	r3, [pc, #388]	; (8026a38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 80268b4:	4a61      	ldr	r2, [pc, #388]	; (8026a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 80268b6:	4862      	ldr	r0, [pc, #392]	; (8026a40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 80268b8:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80268bc:	f005 ff14 	bl	802c6e8 <__assert_func>
 80268c0:	f04f 0c00 	mov.w	ip, #0
 80268c4:	4661      	mov	r1, ip
 80268c6:	e76a      	b.n	802679e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80268c8:	2400      	movs	r4, #0
 80268ca:	46a4      	mov	ip, r4
 80268cc:	4623      	mov	r3, r4
 80268ce:	4621      	mov	r1, r4
 80268d0:	e791      	b.n	80267f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80268d2:	2400      	movs	r4, #0
 80268d4:	4623      	mov	r3, r4
 80268d6:	e78e      	b.n	80267f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80268d8:	4604      	mov	r4, r0
 80268da:	4603      	mov	r3, r0
 80268dc:	e78b      	b.n	80267f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80268de:	2500      	movs	r5, #0
 80268e0:	46ab      	mov	fp, r5
 80268e2:	e7ba      	b.n	802685a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 80268e4:	2700      	movs	r7, #0
 80268e6:	463d      	mov	r5, r7
 80268e8:	463a      	mov	r2, r7
 80268ea:	46bb      	mov	fp, r7
 80268ec:	e7df      	b.n	80268ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 80268ee:	2700      	movs	r7, #0
 80268f0:	463a      	mov	r2, r7
 80268f2:	e7dc      	b.n	80268ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 80268f4:	4607      	mov	r7, r0
 80268f6:	4602      	mov	r2, r0
 80268f8:	f1be 0f0f 	cmp.w	lr, #15
 80268fc:	d8d9      	bhi.n	80268b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 80268fe:	b286      	uxth	r6, r0
 8026900:	fa1f f98e 	uxth.w	r9, lr
 8026904:	fb06 f809 	mul.w	r8, r6, r9
 8026908:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802690c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8026910:	0136      	lsls	r6, r6, #4
 8026912:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026916:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802691a:	9601      	str	r6, [sp, #4]
 802691c:	ea4a 0101 	orr.w	r1, sl, r1
 8026920:	fa1f f689 	uxth.w	r6, r9
 8026924:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8026928:	fb10 f90e 	smulbb	r9, r0, lr
 802692c:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8026930:	9602      	str	r6, [sp, #8]
 8026932:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026936:	460e      	mov	r6, r1
 8026938:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802693c:	f1ce 0110 	rsb	r1, lr, #16
 8026940:	1a09      	subs	r1, r1, r0
 8026942:	ea4a 0303 	orr.w	r3, sl, r3
 8026946:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 802694a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802694e:	4343      	muls	r3, r0
 8026950:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8026954:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026958:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802695c:	fb01 3106 	mla	r1, r1, r6, r3
 8026960:	ea4a 0202 	orr.w	r2, sl, r2
 8026964:	fb09 1302 	mla	r3, r9, r2, r1
 8026968:	9a03      	ldr	r2, [sp, #12]
 802696a:	9802      	ldr	r0, [sp, #8]
 802696c:	8811      	ldrh	r1, [r2, #0]
 802696e:	9a01      	ldr	r2, [sp, #4]
 8026970:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026974:	1a12      	subs	r2, r2, r0
 8026976:	9801      	ldr	r0, [sp, #4]
 8026978:	eba0 0608 	sub.w	r6, r0, r8
 802697c:	b2b6      	uxth	r6, r6
 802697e:	b292      	uxth	r2, r2
 8026980:	4374      	muls	r4, r6
 8026982:	fb0c 4402 	mla	r4, ip, r2, r4
 8026986:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 802698a:	9a02      	ldr	r2, [sp, #8]
 802698c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026990:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8026994:	fb02 4505 	mla	r5, r2, r5, r4
 8026998:	ea4a 0b0b 	orr.w	fp, sl, fp
 802699c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80269a0:	fb0e 3e0b 	mla	lr, lr, fp, r3
 80269a4:	fb08 5707 	mla	r7, r8, r7, r5
 80269a8:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80269ac:	120a      	asrs	r2, r1, #8
 80269ae:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80269b2:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80269b6:	b2ff      	uxtb	r7, r7
 80269b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80269bc:	10c8      	asrs	r0, r1, #3
 80269be:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80269c2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80269c6:	00c9      	lsls	r1, r1, #3
 80269c8:	437a      	muls	r2, r7
 80269ca:	ea43 0e0e 	orr.w	lr, r3, lr
 80269ce:	b2c9      	uxtb	r1, r1
 80269d0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80269d4:	fa1f f38e 	uxth.w	r3, lr
 80269d8:	4378      	muls	r0, r7
 80269da:	434f      	muls	r7, r1
 80269dc:	1c51      	adds	r1, r2, #1
 80269de:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80269e2:	121a      	asrs	r2, r3, #8
 80269e4:	f022 0207 	bic.w	r2, r2, #7
 80269e8:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80269ec:	1c41      	adds	r1, r0, #1
 80269ee:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80269f2:	10d9      	asrs	r1, r3, #3
 80269f4:	f021 0103 	bic.w	r1, r1, #3
 80269f8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80269fc:	0212      	lsls	r2, r2, #8
 80269fe:	00c9      	lsls	r1, r1, #3
 8026a00:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026a04:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8026a08:	430a      	orrs	r2, r1
 8026a0a:	1c79      	adds	r1, r7, #1
 8026a0c:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8026a10:	00db      	lsls	r3, r3, #3
 8026a12:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8026a16:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8026a1a:	4313      	orrs	r3, r2
 8026a1c:	9a03      	ldr	r2, [sp, #12]
 8026a1e:	8013      	strh	r3, [r2, #0]
 8026a20:	b005      	add	sp, #20
 8026a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a26:	280f      	cmp	r0, #15
 8026a28:	f63f af43 	bhi.w	80268b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8026a2c:	4677      	mov	r7, lr
 8026a2e:	4675      	mov	r5, lr
 8026a30:	4672      	mov	r2, lr
 8026a32:	46f3      	mov	fp, lr
 8026a34:	e763      	b.n	80268fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 8026a36:	bf00      	nop
 8026a38:	08031c31 	.word	0x08031c31
 8026a3c:	080321fa 	.word	0x080321fa
 8026a40:	08031cb5 	.word	0x08031cb5

08026a44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a48:	ed2d 8b08 	vpush	{d8-d11}
 8026a4c:	b093      	sub	sp, #76	; 0x4c
 8026a4e:	eeb0 aa40 	vmov.f32	s20, s0
 8026a52:	9210      	str	r2, [sp, #64]	; 0x40
 8026a54:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026a56:	910e      	str	r1, [sp, #56]	; 0x38
 8026a58:	9306      	str	r3, [sp, #24]
 8026a5a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8026a5e:	9011      	str	r0, [sp, #68]	; 0x44
 8026a60:	6850      	ldr	r0, [r2, #4]
 8026a62:	6812      	ldr	r2, [r2, #0]
 8026a64:	fb00 1303 	mla	r3, r0, r3, r1
 8026a68:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026a6c:	9307      	str	r3, [sp, #28]
 8026a6e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026a70:	681b      	ldr	r3, [r3, #0]
 8026a72:	9308      	str	r3, [sp, #32]
 8026a74:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026a76:	685b      	ldr	r3, [r3, #4]
 8026a78:	9309      	str	r3, [sp, #36]	; 0x24
 8026a7a:	eef0 9a60 	vmov.f32	s19, s1
 8026a7e:	eeb0 9a41 	vmov.f32	s18, s2
 8026a82:	eeb0 8a62 	vmov.f32	s16, s5
 8026a86:	eef0 8a43 	vmov.f32	s17, s6
 8026a8a:	eef0 ba44 	vmov.f32	s23, s8
 8026a8e:	eeb0 ba64 	vmov.f32	s22, s9
 8026a92:	eef0 aa45 	vmov.f32	s21, s10
 8026a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026a98:	2b00      	cmp	r3, #0
 8026a9a:	dc03      	bgt.n	8026aa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8026a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026a9e:	2b00      	cmp	r3, #0
 8026aa0:	f340 83b7 	ble.w	8027212 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ce>
 8026aa4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026aa6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026aaa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026aae:	1e48      	subs	r0, r1, #1
 8026ab0:	1e55      	subs	r5, r2, #1
 8026ab2:	9b06      	ldr	r3, [sp, #24]
 8026ab4:	2b00      	cmp	r3, #0
 8026ab6:	f340 819a 	ble.w	8026dee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026aba:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8026abc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026abe:	1436      	asrs	r6, r6, #16
 8026ac0:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026ac4:	d406      	bmi.n	8026ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026ac6:	4286      	cmp	r6, r0
 8026ac8:	da04      	bge.n	8026ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026aca:	2b00      	cmp	r3, #0
 8026acc:	db02      	blt.n	8026ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026ace:	42ab      	cmp	r3, r5
 8026ad0:	f2c0 818e 	blt.w	8026df0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8026ad4:	3601      	adds	r6, #1
 8026ad6:	f100 817b 	bmi.w	8026dd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8026ada:	42b1      	cmp	r1, r6
 8026adc:	f2c0 8178 	blt.w	8026dd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8026ae0:	3301      	adds	r3, #1
 8026ae2:	f100 8175 	bmi.w	8026dd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8026ae6:	429a      	cmp	r2, r3
 8026ae8:	f2c0 8172 	blt.w	8026dd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8026aec:	9b06      	ldr	r3, [sp, #24]
 8026aee:	9f07      	ldr	r7, [sp, #28]
 8026af0:	930f      	str	r3, [sp, #60]	; 0x3c
 8026af2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026af6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026af8:	2b00      	cmp	r3, #0
 8026afa:	f340 819b 	ble.w	8026e34 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8026afe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026b00:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8026b02:	1418      	asrs	r0, r3, #16
 8026b04:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026b06:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026b0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026b0c:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8026b10:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026b12:	142d      	asrs	r5, r5, #16
 8026b14:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026b18:	f100 81ef 	bmi.w	8026efa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b6>
 8026b1c:	f102 3eff 	add.w	lr, r2, #4294967295
 8026b20:	4575      	cmp	r5, lr
 8026b22:	f280 81ea 	bge.w	8026efa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b6>
 8026b26:	2800      	cmp	r0, #0
 8026b28:	f2c0 81e7 	blt.w	8026efa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b6>
 8026b2c:	f103 3eff 	add.w	lr, r3, #4294967295
 8026b30:	4570      	cmp	r0, lr
 8026b32:	f280 81e2 	bge.w	8026efa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b6>
 8026b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026b38:	b212      	sxth	r2, r2
 8026b3a:	fb00 5002 	mla	r0, r0, r2, r5
 8026b3e:	fa1f fe81 	uxth.w	lr, r1
 8026b42:	eb03 0a00 	add.w	sl, r3, r0
 8026b46:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026b4a:	f813 9000 	ldrb.w	r9, [r3, r0]
 8026b4e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026b52:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8026b56:	b29b      	uxth	r3, r3
 8026b58:	f1bc 0f00 	cmp.w	ip, #0
 8026b5c:	f000 81b0 	beq.w	8026ec0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47c>
 8026b60:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026b64:	940a      	str	r4, [sp, #40]	; 0x28
 8026b66:	eb0a 0b02 	add.w	fp, sl, r2
 8026b6a:	fa1f fa8c 	uxth.w	sl, ip
 8026b6e:	fb0a fe0e 	mul.w	lr, sl, lr
 8026b72:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8026b76:	fa1f fa8a 	uxth.w	sl, sl
 8026b7a:	eba5 050e 	sub.w	r5, r5, lr
 8026b7e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026b82:	940b      	str	r4, [sp, #44]	; 0x2c
 8026b84:	eba3 030a 	sub.w	r3, r3, sl
 8026b88:	b2ad      	uxth	r5, r5
 8026b8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026b8c:	b29b      	uxth	r3, r3
 8026b8e:	fb08 f505 	mul.w	r5, r8, r5
 8026b92:	fb09 5303 	mla	r3, r9, r3, r5
 8026b96:	fb0a 3304 	mla	r3, sl, r4, r3
 8026b9a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026b9c:	fb0e 3304 	mla	r3, lr, r4, r3
 8026ba0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026ba4:	2b00      	cmp	r3, #0
 8026ba6:	f000 8106 	beq.w	8026db6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026baa:	9c08      	ldr	r4, [sp, #32]
 8026bac:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026bb0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026bb4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026bb8:	f000 8187 	beq.w	8026eca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8026bbc:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026bc0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026bc4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026bc8:	fb09 f000 	mul.w	r0, r9, r0
 8026bcc:	fb0a fe0e 	mul.w	lr, sl, lr
 8026bd0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8026bd4:	f100 0b20 	add.w	fp, r0, #32
 8026bd8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026bdc:	44ce      	add	lr, r9
 8026bde:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8026be2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026be6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026bea:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026bee:	ea4e 0909 	orr.w	r9, lr, r9
 8026bf2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026bf6:	8868      	ldrh	r0, [r5, #2]
 8026bf8:	d019      	beq.n	8026c2e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026bfa:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026bfe:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026c02:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026c06:	fb08 f800 	mul.w	r8, r8, r0
 8026c0a:	fb0a fe0e 	mul.w	lr, sl, lr
 8026c0e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8026c12:	f108 0b20 	add.w	fp, r8, #32
 8026c16:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026c1a:	4486      	add	lr, r0
 8026c1c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026c20:	0a00      	lsrs	r0, r0, #8
 8026c22:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026c26:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026c2a:	ea4e 0000 	orr.w	r0, lr, r0
 8026c2e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026c32:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026c36:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8026c3a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026c3e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026c42:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026c46:	ea4e 0909 	orr.w	r9, lr, r9
 8026c4a:	ea4a 0000 	orr.w	r0, sl, r0
 8026c4e:	f1bc 0f00 	cmp.w	ip, #0
 8026c52:	f000 813c 	beq.w	8026ece <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8026c56:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8026c5a:	3a01      	subs	r2, #1
 8026c5c:	0052      	lsls	r2, r2, #1
 8026c5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026c60:	3202      	adds	r2, #2
 8026c62:	2cff      	cmp	r4, #255	; 0xff
 8026c64:	eb05 0e02 	add.w	lr, r5, r2
 8026c68:	5aaa      	ldrh	r2, [r5, r2]
 8026c6a:	d018      	beq.n	8026c9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8026c6c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8026c70:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026c74:	fb04 fa02 	mul.w	sl, r4, r2
 8026c78:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026c7c:	fb08 f805 	mul.w	r8, r8, r5
 8026c80:	f10a 0520 	add.w	r5, sl, #32
 8026c84:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026c88:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026c8c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026c90:	4442      	add	r2, r8
 8026c92:	0a2d      	lsrs	r5, r5, #8
 8026c94:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026c98:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026c9c:	432a      	orrs	r2, r5
 8026c9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026ca0:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026ca4:	2cff      	cmp	r4, #255	; 0xff
 8026ca6:	d01a      	beq.n	8026cde <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8026ca8:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8026cac:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026cb0:	fb04 fa05 	mul.w	sl, r4, r5
 8026cb4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026cb8:	fb08 f80e 	mul.w	r8, r8, lr
 8026cbc:	f10a 0e20 	add.w	lr, sl, #32
 8026cc0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026cc4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026cc8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026ccc:	4445      	add	r5, r8
 8026cce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026cd2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8026cd6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8026cda:	ea45 050e 	orr.w	r5, r5, lr
 8026cde:	fb1c fe01 	smulbb	lr, ip, r1
 8026ce2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026ce6:	f1cc 0810 	rsb	r8, ip, #16
 8026cea:	eba8 0801 	sub.w	r8, r8, r1
 8026cee:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026cf2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026cf6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026cfa:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026cfe:	4341      	muls	r1, r0
 8026d00:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026d04:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026d08:	ea4a 0202 	orr.w	r2, sl, r2
 8026d0c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026d10:	fb09 1108 	mla	r1, r9, r8, r1
 8026d14:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026d18:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026d1c:	fb0c 1102 	mla	r1, ip, r2, r1
 8026d20:	ea4b 0505 	orr.w	r5, fp, r5
 8026d24:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026d28:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026d2c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026d30:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026d34:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026d38:	ea42 0e0e 	orr.w	lr, r2, lr
 8026d3c:	fa1f f28e 	uxth.w	r2, lr
 8026d40:	2bff      	cmp	r3, #255	; 0xff
 8026d42:	f000 80d8 	beq.w	8026ef6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8026d46:	f8b7 c000 	ldrh.w	ip, [r7]
 8026d4a:	43db      	mvns	r3, r3
 8026d4c:	ea4f 202c 	mov.w	r0, ip, asr #8
 8026d50:	fa5f fe83 	uxtb.w	lr, r3
 8026d54:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026d58:	fb00 f00e 	mul.w	r0, r0, lr
 8026d5c:	1c41      	adds	r1, r0, #1
 8026d5e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8026d62:	1211      	asrs	r1, r2, #8
 8026d64:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8026d68:	f021 0107 	bic.w	r1, r1, #7
 8026d6c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8026d70:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026d74:	486f      	ldr	r0, [pc, #444]	; (8026f34 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>)
 8026d76:	fb05 f50e 	mul.w	r5, r5, lr
 8026d7a:	b2c9      	uxtb	r1, r1
 8026d7c:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8026d80:	1c69      	adds	r1, r5, #1
 8026d82:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8026d86:	10d1      	asrs	r1, r2, #3
 8026d88:	f021 0103 	bic.w	r1, r1, #3
 8026d8c:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8026d90:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8026d94:	b2db      	uxtb	r3, r3
 8026d96:	00c9      	lsls	r1, r1, #3
 8026d98:	fb03 f30e 	mul.w	r3, r3, lr
 8026d9c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026da0:	4301      	orrs	r1, r0
 8026da2:	1c58      	adds	r0, r3, #1
 8026da4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026da8:	00d3      	lsls	r3, r2, #3
 8026daa:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026dae:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8026db2:	4319      	orrs	r1, r3
 8026db4:	8039      	strh	r1, [r7, #0]
 8026db6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026db8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026dba:	4413      	add	r3, r2
 8026dbc:	9325      	str	r3, [sp, #148]	; 0x94
 8026dbe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8026dc0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026dc2:	441a      	add	r2, r3
 8026dc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026dc6:	9226      	str	r2, [sp, #152]	; 0x98
 8026dc8:	3b01      	subs	r3, #1
 8026dca:	3702      	adds	r7, #2
 8026dcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8026dce:	e692      	b.n	8026af6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8026dd0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026dd2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8026dd4:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8026dd6:	4433      	add	r3, r6
 8026dd8:	9325      	str	r3, [sp, #148]	; 0x94
 8026dda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026ddc:	441c      	add	r4, r3
 8026dde:	9b06      	ldr	r3, [sp, #24]
 8026de0:	9426      	str	r4, [sp, #152]	; 0x98
 8026de2:	3b01      	subs	r3, #1
 8026de4:	9306      	str	r3, [sp, #24]
 8026de6:	9b07      	ldr	r3, [sp, #28]
 8026de8:	3302      	adds	r3, #2
 8026dea:	9307      	str	r3, [sp, #28]
 8026dec:	e661      	b.n	8026ab2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026dee:	d028      	beq.n	8026e42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8026df0:	9b06      	ldr	r3, [sp, #24]
 8026df2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8026df4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8026df6:	3b01      	subs	r3, #1
 8026df8:	fb00 5003 	mla	r0, r0, r3, r5
 8026dfc:	1400      	asrs	r0, r0, #16
 8026dfe:	f53f ae75 	bmi.w	8026aec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026e02:	3901      	subs	r1, #1
 8026e04:	4288      	cmp	r0, r1
 8026e06:	f6bf ae71 	bge.w	8026aec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026e0a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8026e0c:	9826      	ldr	r0, [sp, #152]	; 0x98
 8026e0e:	fb01 0303 	mla	r3, r1, r3, r0
 8026e12:	141b      	asrs	r3, r3, #16
 8026e14:	f53f ae6a 	bmi.w	8026aec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026e18:	3a01      	subs	r2, #1
 8026e1a:	4293      	cmp	r3, r2
 8026e1c:	f6bf ae66 	bge.w	8026aec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026e20:	9b06      	ldr	r3, [sp, #24]
 8026e22:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8026e26:	930f      	str	r3, [sp, #60]	; 0x3c
 8026e28:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026e2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026e2e:	2b00      	cmp	r3, #0
 8026e30:	f300 8082 	bgt.w	8026f38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8026e34:	9b06      	ldr	r3, [sp, #24]
 8026e36:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026e3a:	9b07      	ldr	r3, [sp, #28]
 8026e3c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026e40:	9307      	str	r3, [sp, #28]
 8026e42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026e44:	2b00      	cmp	r3, #0
 8026e46:	f340 81e4 	ble.w	8027212 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ce>
 8026e4a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026e4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026e52:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026e56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026e58:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026e5c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026e60:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026e64:	eef0 6a48 	vmov.f32	s13, s16
 8026e68:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026e6c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e70:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026e74:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8026e78:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026e7c:	eef0 6a68 	vmov.f32	s13, s17
 8026e80:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026e84:	ee18 2a10 	vmov	r2, s16
 8026e88:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026e8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e90:	ee18 2a90 	vmov	r2, s17
 8026e94:	9327      	str	r3, [sp, #156]	; 0x9c
 8026e96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026e98:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e9c:	9328      	str	r3, [sp, #160]	; 0xa0
 8026e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026ea0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026ea2:	3b01      	subs	r3, #1
 8026ea4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026ea8:	930e      	str	r3, [sp, #56]	; 0x38
 8026eaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026eac:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8026eb0:	bf08      	it	eq
 8026eb2:	4613      	moveq	r3, r2
 8026eb4:	9306      	str	r3, [sp, #24]
 8026eb6:	eef0 8a67 	vmov.f32	s17, s15
 8026eba:	eeb0 8a47 	vmov.f32	s16, s14
 8026ebe:	e5ea      	b.n	8026a96 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8026ec0:	fb08 f505 	mul.w	r5, r8, r5
 8026ec4:	fb09 5303 	mla	r3, r9, r3, r5
 8026ec8:	e66a      	b.n	8026ba0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8026eca:	4681      	mov	r9, r0
 8026ecc:	e691      	b.n	8026bf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8026ece:	f1c1 0210 	rsb	r2, r1, #16
 8026ed2:	4341      	muls	r1, r0
 8026ed4:	fb09 1902 	mla	r9, r9, r2, r1
 8026ed8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026edc:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8026ee0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026ee4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026ee8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026eec:	ea42 0909 	orr.w	r9, r2, r9
 8026ef0:	fa1f f289 	uxth.w	r2, r9
 8026ef4:	e724      	b.n	8026d40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026ef6:	803a      	strh	r2, [r7, #0]
 8026ef8:	e75d      	b.n	8026db6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026efa:	f115 0e01 	adds.w	lr, r5, #1
 8026efe:	f53f af5a 	bmi.w	8026db6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026f02:	4572      	cmp	r2, lr
 8026f04:	f6ff af57 	blt.w	8026db6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026f08:	f110 0e01 	adds.w	lr, r0, #1
 8026f0c:	f53f af53 	bmi.w	8026db6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026f10:	4573      	cmp	r3, lr
 8026f12:	f6ff af50 	blt.w	8026db6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026f16:	b21b      	sxth	r3, r3
 8026f18:	b212      	sxth	r2, r2
 8026f1a:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8026f1e:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8026f22:	9301      	str	r3, [sp, #4]
 8026f24:	9200      	str	r2, [sp, #0]
 8026f26:	4639      	mov	r1, r7
 8026f28:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8026f2c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026f2e:	f7ff fbf3 	bl	8026718 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8026f32:	e740      	b.n	8026db6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026f34:	fffff800 	.word	0xfffff800
 8026f38:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026f3a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026f3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026f40:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8026f44:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026f46:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026f4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026f4c:	141f      	asrs	r7, r3, #16
 8026f4e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026f50:	141b      	asrs	r3, r3, #16
 8026f52:	fb01 3707 	mla	r7, r1, r7, r3
 8026f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026f58:	fa1f fc82 	uxth.w	ip, r2
 8026f5c:	eb03 0a07 	add.w	sl, r3, r7
 8026f60:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8026f64:	f813 9007 	ldrb.w	r9, [r3, r7]
 8026f68:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026f6c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026f70:	b29b      	uxth	r3, r3
 8026f72:	2d00      	cmp	r5, #0
 8026f74:	f000 8132 	beq.w	80271dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x798>
 8026f78:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026f7c:	940c      	str	r4, [sp, #48]	; 0x30
 8026f7e:	eb0a 0b01 	add.w	fp, sl, r1
 8026f82:	fa1f fa85 	uxth.w	sl, r5
 8026f86:	fb0a fc0c 	mul.w	ip, sl, ip
 8026f8a:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026f8e:	fa1f fa8a 	uxth.w	sl, sl
 8026f92:	eba0 000c 	sub.w	r0, r0, ip
 8026f96:	eba3 030a 	sub.w	r3, r3, sl
 8026f9a:	b280      	uxth	r0, r0
 8026f9c:	fb08 f000 	mul.w	r0, r8, r0
 8026fa0:	b29b      	uxth	r3, r3
 8026fa2:	fb09 0303 	mla	r3, r9, r3, r0
 8026fa6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026fa8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026fac:	940d      	str	r4, [sp, #52]	; 0x34
 8026fae:	fb0a 3300 	mla	r3, sl, r0, r3
 8026fb2:	fb0c 3304 	mla	r3, ip, r4, r3
 8026fb6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026fba:	2b00      	cmp	r3, #0
 8026fbc:	f000 8100 	beq.w	80271c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8026fc0:	9808      	ldr	r0, [sp, #32]
 8026fc2:	9c08      	ldr	r4, [sp, #32]
 8026fc4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026fc8:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8026fcc:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026fd0:	f000 8109 	beq.w	80271e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a2>
 8026fd4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026fd8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026fdc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026fe0:	fb09 f707 	mul.w	r7, r9, r7
 8026fe4:	fb0a fc0c 	mul.w	ip, sl, ip
 8026fe8:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8026fec:	f107 0b20 	add.w	fp, r7, #32
 8026ff0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026ff4:	44cc      	add	ip, r9
 8026ff6:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026ffa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026ffe:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027002:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027006:	ea4c 0909 	orr.w	r9, ip, r9
 802700a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802700e:	8847      	ldrh	r7, [r0, #2]
 8027010:	d019      	beq.n	8027046 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x602>
 8027012:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027016:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802701a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802701e:	fb08 f807 	mul.w	r8, r8, r7
 8027022:	fb0a fc0c 	mul.w	ip, sl, ip
 8027026:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802702a:	f108 0b20 	add.w	fp, r8, #32
 802702e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027032:	44bc      	add	ip, r7
 8027034:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027038:	0a3f      	lsrs	r7, r7, #8
 802703a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802703e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027042:	ea4c 0707 	orr.w	r7, ip, r7
 8027046:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802704a:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802704e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8027052:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027056:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802705a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802705e:	ea4c 0909 	orr.w	r9, ip, r9
 8027062:	ea4a 0707 	orr.w	r7, sl, r7
 8027066:	2d00      	cmp	r5, #0
 8027068:	f000 80bf 	beq.w	80271ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 802706c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8027070:	3901      	subs	r1, #1
 8027072:	0049      	lsls	r1, r1, #1
 8027074:	3102      	adds	r1, #2
 8027076:	eb00 0c01 	add.w	ip, r0, r1
 802707a:	5a41      	ldrh	r1, [r0, r1]
 802707c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802707e:	28ff      	cmp	r0, #255	; 0xff
 8027080:	d019      	beq.n	80270b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x672>
 8027082:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027084:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8027088:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802708c:	fb04 fa01 	mul.w	sl, r4, r1
 8027090:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027094:	fb08 f800 	mul.w	r8, r8, r0
 8027098:	f10a 0020 	add.w	r0, sl, #32
 802709c:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80270a0:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80270a4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80270a8:	4441      	add	r1, r8
 80270aa:	0a00      	lsrs	r0, r0, #8
 80270ac:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80270b0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80270b4:	4301      	orrs	r1, r0
 80270b6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80270b8:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80270bc:	2cff      	cmp	r4, #255	; 0xff
 80270be:	d01a      	beq.n	80270f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b2>
 80270c0:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80270c4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80270c8:	fb04 fa00 	mul.w	sl, r4, r0
 80270cc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80270d0:	fb08 f80c 	mul.w	r8, r8, ip
 80270d4:	f10a 0c20 	add.w	ip, sl, #32
 80270d8:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80270dc:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80270e0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80270e4:	4440      	add	r0, r8
 80270e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80270ea:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80270ee:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80270f2:	ea40 000c 	orr.w	r0, r0, ip
 80270f6:	fb15 fc02 	smulbb	ip, r5, r2
 80270fa:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80270fe:	f1c5 0810 	rsb	r8, r5, #16
 8027102:	eba8 0802 	sub.w	r8, r8, r2
 8027106:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802710a:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802710e:	437a      	muls	r2, r7
 8027110:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027114:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027118:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802711c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027120:	fb09 2208 	mla	r2, r9, r8, r2
 8027124:	ea4a 0101 	orr.w	r1, sl, r1
 8027128:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802712c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027130:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027134:	fb05 2201 	mla	r2, r5, r1, r2
 8027138:	ea4b 0000 	orr.w	r0, fp, r0
 802713c:	fb0c 2200 	mla	r2, ip, r0, r2
 8027140:	0d57      	lsrs	r7, r2, #21
 8027142:	0952      	lsrs	r2, r2, #5
 8027144:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027148:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802714c:	433a      	orrs	r2, r7
 802714e:	2bff      	cmp	r3, #255	; 0xff
 8027150:	b292      	uxth	r2, r2
 8027152:	d05b      	beq.n	802720c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c8>
 8027154:	f8be 7000 	ldrh.w	r7, [lr]
 8027158:	4c30      	ldr	r4, [pc, #192]	; (802721c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 802715a:	43db      	mvns	r3, r3
 802715c:	1238      	asrs	r0, r7, #8
 802715e:	fa5f fc83 	uxtb.w	ip, r3
 8027162:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027166:	10fd      	asrs	r5, r7, #3
 8027168:	fb00 f00c 	mul.w	r0, r0, ip
 802716c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027170:	fb05 f10c 	mul.w	r1, r5, ip
 8027174:	1c45      	adds	r5, r0, #1
 8027176:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802717a:	1215      	asrs	r5, r2, #8
 802717c:	f025 0507 	bic.w	r5, r5, #7
 8027180:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027184:	1c4d      	adds	r5, r1, #1
 8027186:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802718a:	10d1      	asrs	r1, r2, #3
 802718c:	f021 0103 	bic.w	r1, r1, #3
 8027190:	00fb      	lsls	r3, r7, #3
 8027192:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027196:	b2db      	uxtb	r3, r3
 8027198:	b2c0      	uxtb	r0, r0
 802719a:	00c9      	lsls	r1, r1, #3
 802719c:	fb03 f30c 	mul.w	r3, r3, ip
 80271a0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80271a4:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 80271a8:	4308      	orrs	r0, r1
 80271aa:	1c59      	adds	r1, r3, #1
 80271ac:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80271b0:	00d2      	lsls	r2, r2, #3
 80271b2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80271b6:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80271ba:	4318      	orrs	r0, r3
 80271bc:	f8ae 0000 	strh.w	r0, [lr]
 80271c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80271c2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80271c4:	4413      	add	r3, r2
 80271c6:	9325      	str	r3, [sp, #148]	; 0x94
 80271c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80271ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80271cc:	441a      	add	r2, r3
 80271ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80271d0:	9226      	str	r2, [sp, #152]	; 0x98
 80271d2:	3b01      	subs	r3, #1
 80271d4:	f10e 0e02 	add.w	lr, lr, #2
 80271d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80271da:	e627      	b.n	8026e2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e8>
 80271dc:	fb08 f000 	mul.w	r0, r8, r0
 80271e0:	fb09 0303 	mla	r3, r9, r3, r0
 80271e4:	e6e7      	b.n	8026fb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x572>
 80271e6:	46b9      	mov	r9, r7
 80271e8:	e70f      	b.n	802700a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 80271ea:	f1c2 0110 	rsb	r1, r2, #16
 80271ee:	437a      	muls	r2, r7
 80271f0:	fb09 2901 	mla	r9, r9, r1, r2
 80271f4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80271f8:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80271fc:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027200:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027204:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027208:	4302      	orrs	r2, r0
 802720a:	e7a0      	b.n	802714e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 802720c:	f8ae 2000 	strh.w	r2, [lr]
 8027210:	e7d6      	b.n	80271c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8027212:	b013      	add	sp, #76	; 0x4c
 8027214:	ecbd 8b08 	vpop	{d8-d11}
 8027218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802721c:	fffff800 	.word	0xfffff800

08027220 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8027220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027224:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8027228:	fb0c 4e03 	mla	lr, ip, r3, r4
 802722c:	f1bc 0f00 	cmp.w	ip, #0
 8027230:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8027234:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8027238:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 802723c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8027240:	8808      	ldrh	r0, [r1, #0]
 8027242:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8027246:	db2f      	blt.n	80272a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8027248:	45e2      	cmp	sl, ip
 802724a:	dd2d      	ble.n	80272a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 802724c:	2c00      	cmp	r4, #0
 802724e:	db29      	blt.n	80272a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8027250:	42a3      	cmp	r3, r4
 8027252:	dd27      	ble.n	80272a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8027254:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8027258:	1c62      	adds	r2, r4, #1
 802725a:	d428      	bmi.n	80272ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 802725c:	4293      	cmp	r3, r2
 802725e:	dd26      	ble.n	80272ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8027260:	b32f      	cbz	r7, 80272ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8027262:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8027266:	f11c 0c01 	adds.w	ip, ip, #1
 802726a:	d424      	bmi.n	80272b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 802726c:	45e2      	cmp	sl, ip
 802726e:	dd22      	ble.n	80272b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8027270:	2e00      	cmp	r6, #0
 8027272:	f000 809d 	beq.w	80273b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 8027276:	2c00      	cmp	r4, #0
 8027278:	db1b      	blt.n	80272b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802727a:	42a3      	cmp	r3, r4
 802727c:	dd19      	ble.n	80272b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802727e:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8027282:	3401      	adds	r4, #1
 8027284:	d41a      	bmi.n	80272bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8027286:	42a3      	cmp	r3, r4
 8027288:	dd18      	ble.n	80272bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 802728a:	b1cf      	cbz	r7, 80272c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 802728c:	3301      	adds	r3, #1
 802728e:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8027292:	2f0f      	cmp	r7, #15
 8027294:	d915      	bls.n	80272c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8027296:	4b49      	ldr	r3, [pc, #292]	; (80273bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8027298:	4a49      	ldr	r2, [pc, #292]	; (80273c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 802729a:	484a      	ldr	r0, [pc, #296]	; (80273c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 802729c:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80272a0:	f005 fa22 	bl	802c6e8 <__assert_func>
 80272a4:	4681      	mov	r9, r0
 80272a6:	e7d7      	b.n	8027258 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 80272a8:	4686      	mov	lr, r0
 80272aa:	4681      	mov	r9, r0
 80272ac:	e7db      	b.n	8027266 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 80272ae:	4686      	mov	lr, r0
 80272b0:	e7d9      	b.n	8027266 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 80272b2:	4684      	mov	ip, r0
 80272b4:	e7e5      	b.n	8027282 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 80272b6:	4603      	mov	r3, r0
 80272b8:	4684      	mov	ip, r0
 80272ba:	e7ea      	b.n	8027292 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 80272bc:	4603      	mov	r3, r0
 80272be:	e7e8      	b.n	8027292 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 80272c0:	4603      	mov	r3, r0
 80272c2:	2e0f      	cmp	r6, #15
 80272c4:	d8e7      	bhi.n	8027296 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 80272c6:	ea4f 4409 	mov.w	r4, r9, lsl #16
 80272ca:	fb17 f806 	smulbb	r8, r7, r6
 80272ce:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80272d2:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 80272d6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80272da:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80272de:	ea44 0909 	orr.w	r9, r4, r9
 80272e2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80272e6:	f1c6 0410 	rsb	r4, r6, #16
 80272ea:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80272ee:	1be4      	subs	r4, r4, r7
 80272f0:	041a      	lsls	r2, r3, #16
 80272f2:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 80272f6:	ea4a 0e0e 	orr.w	lr, sl, lr
 80272fa:	fb07 fe0e 	mul.w	lr, r7, lr
 80272fe:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027302:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8027306:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802730a:	fb04 e409 	mla	r4, r4, r9, lr
 802730e:	4313      	orrs	r3, r2
 8027310:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8027314:	fb08 4303 	mla	r3, r8, r3, r4
 8027318:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802731c:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8027320:	4322      	orrs	r2, r4
 8027322:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8027326:	fb06 3202 	mla	r2, r6, r2, r3
 802732a:	0d53      	lsrs	r3, r2, #21
 802732c:	0952      	lsrs	r2, r2, #5
 802732e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027332:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027336:	431a      	orrs	r2, r3
 8027338:	b293      	uxth	r3, r2
 802733a:	b2af      	uxth	r7, r5
 802733c:	1202      	asrs	r2, r0, #8
 802733e:	43ed      	mvns	r5, r5
 8027340:	b2ed      	uxtb	r5, r5
 8027342:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8027346:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802734a:	fb12 f205 	smulbb	r2, r2, r5
 802734e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8027352:	fb0c 2c07 	mla	ip, ip, r7, r2
 8027356:	00dc      	lsls	r4, r3, #3
 8027358:	10da      	asrs	r2, r3, #3
 802735a:	10c6      	asrs	r6, r0, #3
 802735c:	00c3      	lsls	r3, r0, #3
 802735e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8027362:	b2db      	uxtb	r3, r3
 8027364:	fb16 f605 	smulbb	r6, r6, r5
 8027368:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802736c:	b2e4      	uxtb	r4, r4
 802736e:	fb13 f305 	smulbb	r3, r3, r5
 8027372:	fa1f fc8c 	uxth.w	ip, ip
 8027376:	fb02 6207 	mla	r2, r2, r7, r6
 802737a:	fb04 3307 	mla	r3, r4, r7, r3
 802737e:	b296      	uxth	r6, r2
 8027380:	b29a      	uxth	r2, r3
 8027382:	f10c 0301 	add.w	r3, ip, #1
 8027386:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802738a:	1c53      	adds	r3, r2, #1
 802738c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027390:	1c72      	adds	r2, r6, #1
 8027392:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8027396:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802739a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802739e:	0952      	lsrs	r2, r2, #5
 80273a0:	ea43 030c 	orr.w	r3, r3, ip
 80273a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80273a8:	4313      	orrs	r3, r2
 80273aa:	800b      	strh	r3, [r1, #0]
 80273ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80273b0:	2f0f      	cmp	r7, #15
 80273b2:	f63f af70 	bhi.w	8027296 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 80273b6:	4603      	mov	r3, r0
 80273b8:	4684      	mov	ip, r0
 80273ba:	e784      	b.n	80272c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 80273bc:	08031c31 	.word	0x08031c31
 80273c0:	080322a3 	.word	0x080322a3
 80273c4:	08031cb5 	.word	0x08031cb5

080273c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80273c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80273cc:	ed2d 8b08 	vpush	{d8-d11}
 80273d0:	b093      	sub	sp, #76	; 0x4c
 80273d2:	461d      	mov	r5, r3
 80273d4:	9210      	str	r2, [sp, #64]	; 0x40
 80273d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80273d8:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80273dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80273de:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 80273e2:	910a      	str	r1, [sp, #40]	; 0x28
 80273e4:	6859      	ldr	r1, [r3, #4]
 80273e6:	681b      	ldr	r3, [r3, #0]
 80273e8:	9011      	str	r0, [sp, #68]	; 0x44
 80273ea:	fb01 2707 	mla	r7, r1, r7, r2
 80273ee:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80273f2:	9307      	str	r3, [sp, #28]
 80273f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80273f6:	681b      	ldr	r3, [r3, #0]
 80273f8:	9309      	str	r3, [sp, #36]	; 0x24
 80273fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80273fc:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8027400:	43db      	mvns	r3, r3
 8027402:	b2db      	uxtb	r3, r3
 8027404:	eeb0 aa40 	vmov.f32	s20, s0
 8027408:	eef0 9a60 	vmov.f32	s19, s1
 802740c:	eeb0 9a41 	vmov.f32	s18, s2
 8027410:	eeb0 8a62 	vmov.f32	s16, s5
 8027414:	eef0 8a43 	vmov.f32	s17, s6
 8027418:	eef0 ba44 	vmov.f32	s23, s8
 802741c:	eeb0 ba64 	vmov.f32	s22, s9
 8027420:	eef0 aa45 	vmov.f32	s21, s10
 8027424:	9308      	str	r3, [sp, #32]
 8027426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027428:	2b00      	cmp	r3, #0
 802742a:	dc03      	bgt.n	8027434 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802742c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802742e:	2b00      	cmp	r3, #0
 8027430:	f340 8203 	ble.w	802783a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 8027434:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027436:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802743a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802743e:	1e48      	subs	r0, r1, #1
 8027440:	f102 3cff 	add.w	ip, r2, #4294967295
 8027444:	2d00      	cmp	r5, #0
 8027446:	f340 80da 	ble.w	80275fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802744a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802744e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027452:	d406      	bmi.n	8027462 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027454:	4586      	cmp	lr, r0
 8027456:	da04      	bge.n	8027462 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027458:	2b00      	cmp	r3, #0
 802745a:	db02      	blt.n	8027462 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802745c:	4563      	cmp	r3, ip
 802745e:	f2c0 80cf 	blt.w	8027600 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8027462:	f11e 0e01 	adds.w	lr, lr, #1
 8027466:	f100 80c1 	bmi.w	80275ec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802746a:	4571      	cmp	r1, lr
 802746c:	f2c0 80be 	blt.w	80275ec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027470:	3301      	adds	r3, #1
 8027472:	f100 80bb 	bmi.w	80275ec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027476:	429a      	cmp	r2, r3
 8027478:	f2c0 80b8 	blt.w	80275ec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802747c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8027480:	46a9      	mov	r9, r5
 8027482:	f1b9 0f00 	cmp.w	r9, #0
 8027486:	f340 80d8 	ble.w	802763a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 802748a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802748c:	1421      	asrs	r1, r4, #16
 802748e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027492:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027496:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802749a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802749e:	f100 8111 	bmi.w	80276c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80274a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80274a6:	4551      	cmp	r1, sl
 80274a8:	f280 810c 	bge.w	80276c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80274ac:	2800      	cmp	r0, #0
 80274ae:	f2c0 8109 	blt.w	80276c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80274b2:	f103 3aff 	add.w	sl, r3, #4294967295
 80274b6:	4550      	cmp	r0, sl
 80274b8:	f280 8104 	bge.w	80276c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80274bc:	fa0f f38e 	sxth.w	r3, lr
 80274c0:	fb00 1103 	mla	r1, r0, r3, r1
 80274c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80274c6:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80274ca:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80274ce:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80274d2:	f1bc 0f00 	cmp.w	ip, #0
 80274d6:	d007      	beq.n	80274e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80274d8:	005b      	lsls	r3, r3, #1
 80274da:	eb0a 0003 	add.w	r0, sl, r3
 80274de:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80274e2:	930c      	str	r3, [sp, #48]	; 0x30
 80274e4:	8843      	ldrh	r3, [r0, #2]
 80274e6:	930d      	str	r3, [sp, #52]	; 0x34
 80274e8:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80274ec:	fb12 f30c 	smulbb	r3, r2, ip
 80274f0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80274f4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80274f8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80274fc:	10db      	asrs	r3, r3, #3
 80274fe:	ea40 000e 	orr.w	r0, r0, lr
 8027502:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027506:	f1cc 0e10 	rsb	lr, ip, #16
 802750a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802750e:	ebae 0e02 	sub.w	lr, lr, r2
 8027512:	ea4a 0101 	orr.w	r1, sl, r1
 8027516:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802751a:	4351      	muls	r1, r2
 802751c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802751e:	9f08      	ldr	r7, [sp, #32]
 8027520:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8027524:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027528:	0410      	lsls	r0, r2, #16
 802752a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802752e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027532:	4310      	orrs	r0, r2
 8027534:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027536:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027538:	0412      	lsls	r2, r2, #16
 802753a:	fb03 e000 	mla	r0, r3, r0, lr
 802753e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027542:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8027546:	ea42 020e 	orr.w	r2, r2, lr
 802754a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802754e:	fb03 0302 	mla	r3, r3, r2, r0
 8027552:	0d5a      	lsrs	r2, r3, #21
 8027554:	095b      	lsrs	r3, r3, #5
 8027556:	f8b8 0000 	ldrh.w	r0, [r8]
 802755a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802755e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8027562:	4313      	orrs	r3, r2
 8027564:	b29b      	uxth	r3, r3
 8027566:	1201      	asrs	r1, r0, #8
 8027568:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 802756c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8027570:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027574:	fb11 f107 	smulbb	r1, r1, r7
 8027578:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802757c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8027580:	00c0      	lsls	r0, r0, #3
 8027582:	fb0c 1c02 	mla	ip, ip, r2, r1
 8027586:	b2c0      	uxtb	r0, r0
 8027588:	10d9      	asrs	r1, r3, #3
 802758a:	00db      	lsls	r3, r3, #3
 802758c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8027590:	b2db      	uxtb	r3, r3
 8027592:	fb10 f007 	smulbb	r0, r0, r7
 8027596:	fa1f fc8c 	uxth.w	ip, ip
 802759a:	fb03 0302 	mla	r3, r3, r2, r0
 802759e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80275a2:	fb1e fe07 	smulbb	lr, lr, r7
 80275a6:	fb01 e102 	mla	r1, r1, r2, lr
 80275aa:	b29a      	uxth	r2, r3
 80275ac:	f10c 0301 	add.w	r3, ip, #1
 80275b0:	b289      	uxth	r1, r1
 80275b2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80275b6:	1c53      	adds	r3, r2, #1
 80275b8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80275bc:	1c4a      	adds	r2, r1, #1
 80275be:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80275c2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80275c6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80275ca:	0949      	lsrs	r1, r1, #5
 80275cc:	ea43 030c 	orr.w	r3, r3, ip
 80275d0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80275d4:	430b      	orrs	r3, r1
 80275d6:	f8a8 3000 	strh.w	r3, [r8]
 80275da:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80275dc:	441c      	add	r4, r3
 80275de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80275e0:	f108 0802 	add.w	r8, r8, #2
 80275e4:	441e      	add	r6, r3
 80275e6:	f109 39ff 	add.w	r9, r9, #4294967295
 80275ea:	e74a      	b.n	8027482 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80275ec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80275ee:	441c      	add	r4, r3
 80275f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80275f2:	441e      	add	r6, r3
 80275f4:	9b07      	ldr	r3, [sp, #28]
 80275f6:	3302      	adds	r3, #2
 80275f8:	3d01      	subs	r5, #1
 80275fa:	9307      	str	r3, [sp, #28]
 80275fc:	e722      	b.n	8027444 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80275fe:	d022      	beq.n	8027646 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8027600:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027602:	1e6b      	subs	r3, r5, #1
 8027604:	fb00 4003 	mla	r0, r0, r3, r4
 8027608:	1400      	asrs	r0, r0, #16
 802760a:	f53f af37 	bmi.w	802747c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802760e:	3901      	subs	r1, #1
 8027610:	4288      	cmp	r0, r1
 8027612:	f6bf af33 	bge.w	802747c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027616:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8027618:	fb01 6303 	mla	r3, r1, r3, r6
 802761c:	141b      	asrs	r3, r3, #16
 802761e:	f53f af2d 	bmi.w	802747c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027622:	3a01      	subs	r2, #1
 8027624:	4293      	cmp	r3, r2
 8027626:	f6bf af29 	bge.w	802747c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802762a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802762e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8027632:	46a8      	mov	r8, r5
 8027634:	f1b8 0f00 	cmp.w	r8, #0
 8027638:	dc5e      	bgt.n	80276f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802763a:	9b07      	ldr	r3, [sp, #28]
 802763c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027640:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027644:	9307      	str	r3, [sp, #28]
 8027646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027648:	2b00      	cmp	r3, #0
 802764a:	f340 80f6 	ble.w	802783a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 802764e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027656:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802765a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802765c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027660:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027664:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027668:	eef0 6a48 	vmov.f32	s13, s16
 802766c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027670:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027674:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027678:	ee16 4a90 	vmov	r4, s13
 802767c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027680:	eef0 6a68 	vmov.f32	s13, s17
 8027684:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027688:	ee18 2a10 	vmov	r2, s16
 802768c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027690:	fb92 f3f3 	sdiv	r3, r2, r3
 8027694:	ee18 2a90 	vmov	r2, s17
 8027698:	9327      	str	r3, [sp, #156]	; 0x9c
 802769a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802769c:	fb92 f3f3 	sdiv	r3, r2, r3
 80276a0:	9328      	str	r3, [sp, #160]	; 0xa0
 80276a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80276a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80276a6:	3b01      	subs	r3, #1
 80276a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80276ac:	930a      	str	r3, [sp, #40]	; 0x28
 80276ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80276b0:	ee16 6a90 	vmov	r6, s13
 80276b4:	bf14      	ite	ne
 80276b6:	461d      	movne	r5, r3
 80276b8:	4615      	moveq	r5, r2
 80276ba:	eef0 8a67 	vmov.f32	s17, s15
 80276be:	eeb0 8a47 	vmov.f32	s16, s14
 80276c2:	e6b0      	b.n	8027426 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80276c4:	f111 0a01 	adds.w	sl, r1, #1
 80276c8:	d487      	bmi.n	80275da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80276ca:	45d6      	cmp	lr, sl
 80276cc:	db85      	blt.n	80275da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80276ce:	f110 0a01 	adds.w	sl, r0, #1
 80276d2:	d482      	bmi.n	80275da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80276d4:	4553      	cmp	r3, sl
 80276d6:	db80      	blt.n	80275da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80276d8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80276da:	9101      	str	r1, [sp, #4]
 80276dc:	b21b      	sxth	r3, r3
 80276de:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80276e2:	9300      	str	r3, [sp, #0]
 80276e4:	e9cd c704 	strd	ip, r7, [sp, #16]
 80276e8:	fa0f f38e 	sxth.w	r3, lr
 80276ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80276ee:	9811      	ldr	r0, [sp, #68]	; 0x44
 80276f0:	4641      	mov	r1, r8
 80276f2:	f7ff fd95 	bl	8027220 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80276f6:	e770      	b.n	80275da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80276f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80276fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80276fc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027700:	1430      	asrs	r0, r6, #16
 8027702:	1423      	asrs	r3, r4, #16
 8027704:	fb01 3000 	mla	r0, r1, r0, r3
 8027708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802770a:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802770e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8027712:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8027716:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802771a:	8858      	ldrh	r0, [r3, #2]
 802771c:	f1be 0f00 	cmp.w	lr, #0
 8027720:	d00b      	beq.n	802773a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8027722:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8027726:	3901      	subs	r1, #1
 8027728:	0049      	lsls	r1, r1, #1
 802772a:	3102      	adds	r1, #2
 802772c:	eb03 0b01 	add.w	fp, r3, r1
 8027730:	5a5b      	ldrh	r3, [r3, r1]
 8027732:	930e      	str	r3, [sp, #56]	; 0x38
 8027734:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8027738:	930f      	str	r3, [sp, #60]	; 0x3c
 802773a:	ea4f 410c 	mov.w	r1, ip, lsl #16
 802773e:	fb12 f30e 	smulbb	r3, r2, lr
 8027742:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027746:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802774a:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 802774e:	10db      	asrs	r3, r3, #3
 8027750:	ea41 010c 	orr.w	r1, r1, ip
 8027754:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027758:	f1ce 0c10 	rsb	ip, lr, #16
 802775c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027760:	ebac 0c02 	sub.w	ip, ip, r2
 8027764:	ea4b 0000 	orr.w	r0, fp, r0
 8027768:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802776c:	4350      	muls	r0, r2
 802776e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027770:	9f08      	ldr	r7, [sp, #32]
 8027772:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8027776:	fb0c 0c01 	mla	ip, ip, r1, r0
 802777a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802777e:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8027782:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027784:	980e      	ldr	r0, [sp, #56]	; 0x38
 8027786:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802778a:	0412      	lsls	r2, r2, #16
 802778c:	ea4b 0101 	orr.w	r1, fp, r1
 8027790:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027794:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027798:	fb03 c101 	mla	r1, r3, r1, ip
 802779c:	4302      	orrs	r2, r0
 802779e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80277a2:	fb03 1202 	mla	r2, r3, r2, r1
 80277a6:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80277aa:	0952      	lsrs	r2, r2, #5
 80277ac:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 80277b0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80277b4:	f8b9 2000 	ldrh.w	r2, [r9]
 80277b8:	ea4b 0303 	orr.w	r3, fp, r3
 80277bc:	b29b      	uxth	r3, r3
 80277be:	1211      	asrs	r1, r2, #8
 80277c0:	1218      	asrs	r0, r3, #8
 80277c2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80277c6:	fb11 f107 	smulbb	r1, r1, r7
 80277ca:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80277ce:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80277d2:	00d2      	lsls	r2, r2, #3
 80277d4:	fb00 100a 	mla	r0, r0, sl, r1
 80277d8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80277dc:	10d9      	asrs	r1, r3, #3
 80277de:	b2d2      	uxtb	r2, r2
 80277e0:	00db      	lsls	r3, r3, #3
 80277e2:	fb1c fc07 	smulbb	ip, ip, r7
 80277e6:	fb12 f207 	smulbb	r2, r2, r7
 80277ea:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80277ee:	b2db      	uxtb	r3, r3
 80277f0:	b280      	uxth	r0, r0
 80277f2:	fb01 c10a 	mla	r1, r1, sl, ip
 80277f6:	fb03 230a 	mla	r3, r3, sl, r2
 80277fa:	b29b      	uxth	r3, r3
 80277fc:	b289      	uxth	r1, r1
 80277fe:	1c42      	adds	r2, r0, #1
 8027800:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027804:	f101 0c01 	add.w	ip, r1, #1
 8027808:	1c5a      	adds	r2, r3, #1
 802780a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802780e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8027812:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027814:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8027818:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802781c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027820:	4310      	orrs	r0, r2
 8027822:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027826:	441c      	add	r4, r3
 8027828:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802782a:	ea40 000c 	orr.w	r0, r0, ip
 802782e:	f829 0b02 	strh.w	r0, [r9], #2
 8027832:	441e      	add	r6, r3
 8027834:	f108 38ff 	add.w	r8, r8, #4294967295
 8027838:	e6fc      	b.n	8027634 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802783a:	b013      	add	sp, #76	; 0x4c
 802783c:	ecbd 8b08 	vpop	{d8-d11}
 8027840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027844 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8027844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027848:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 802784c:	fb06 5c03 	mla	ip, r6, r3, r5
 8027850:	2e00      	cmp	r6, #0
 8027852:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8027856:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 802785a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 802785e:	8808      	ldrh	r0, [r1, #0]
 8027860:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8027864:	db2e      	blt.n	80278c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8027866:	45b0      	cmp	r8, r6
 8027868:	dd2c      	ble.n	80278c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 802786a:	2d00      	cmp	r5, #0
 802786c:	db28      	blt.n	80278c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 802786e:	42ab      	cmp	r3, r5
 8027870:	dd26      	ble.n	80278c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8027872:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8027876:	1c6a      	adds	r2, r5, #1
 8027878:	d427      	bmi.n	80278ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802787a:	4293      	cmp	r3, r2
 802787c:	dd25      	ble.n	80278ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802787e:	b324      	cbz	r4, 80278ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8027880:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8027884:	3601      	adds	r6, #1
 8027886:	d424      	bmi.n	80278d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8027888:	45b0      	cmp	r8, r6
 802788a:	dd22      	ble.n	80278d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 802788c:	b31f      	cbz	r7, 80278d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 802788e:	2d00      	cmp	r5, #0
 8027890:	db1d      	blt.n	80278ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8027892:	42ab      	cmp	r3, r5
 8027894:	dd1b      	ble.n	80278ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8027896:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 802789a:	3501      	adds	r5, #1
 802789c:	d405      	bmi.n	80278aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802789e:	42ab      	cmp	r3, r5
 80278a0:	dd03      	ble.n	80278aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80278a2:	b124      	cbz	r4, 80278ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 80278a4:	3301      	adds	r3, #1
 80278a6:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 80278aa:	2c0f      	cmp	r4, #15
 80278ac:	d801      	bhi.n	80278b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80278ae:	2f0f      	cmp	r7, #15
 80278b0:	d914      	bls.n	80278dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 80278b2:	4b27      	ldr	r3, [pc, #156]	; (8027950 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 80278b4:	4a27      	ldr	r2, [pc, #156]	; (8027954 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 80278b6:	4828      	ldr	r0, [pc, #160]	; (8027958 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 80278b8:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80278bc:	f004 ff14 	bl	802c6e8 <__assert_func>
 80278c0:	4684      	mov	ip, r0
 80278c2:	e7d8      	b.n	8027876 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 80278c4:	4602      	mov	r2, r0
 80278c6:	4684      	mov	ip, r0
 80278c8:	e7dc      	b.n	8027884 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80278ca:	4602      	mov	r2, r0
 80278cc:	e7da      	b.n	8027884 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80278ce:	4606      	mov	r6, r0
 80278d0:	e7e3      	b.n	802789a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 80278d2:	4606      	mov	r6, r0
 80278d4:	e7e9      	b.n	80278aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80278d6:	2c0f      	cmp	r4, #15
 80278d8:	d8eb      	bhi.n	80278b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80278da:	4606      	mov	r6, r0
 80278dc:	ea4f 450c 	mov.w	r5, ip, lsl #16
 80278e0:	fb14 f307 	smulbb	r3, r4, r7
 80278e4:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 80278e8:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80278ec:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80278f0:	10db      	asrs	r3, r3, #3
 80278f2:	ea45 0c0c 	orr.w	ip, r5, ip
 80278f6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80278fa:	f1c7 0510 	rsb	r5, r7, #16
 80278fe:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027902:	1b2d      	subs	r5, r5, r4
 8027904:	ea4e 0202 	orr.w	r2, lr, r2
 8027908:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 802790c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8027910:	4354      	muls	r4, r2
 8027912:	fb05 450c 	mla	r5, r5, ip, r4
 8027916:	0404      	lsls	r4, r0, #16
 8027918:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802791c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027920:	4320      	orrs	r0, r4
 8027922:	fb03 5400 	mla	r4, r3, r0, r5
 8027926:	0430      	lsls	r0, r6, #16
 8027928:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802792c:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8027930:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8027934:	4330      	orrs	r0, r6
 8027936:	fb07 4000 	mla	r0, r7, r0, r4
 802793a:	0d43      	lsrs	r3, r0, #21
 802793c:	0940      	lsrs	r0, r0, #5
 802793e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027942:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027946:	4318      	orrs	r0, r3
 8027948:	8008      	strh	r0, [r1, #0]
 802794a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802794e:	bf00      	nop
 8027950:	08031c31 	.word	0x08031c31
 8027954:	080322a3 	.word	0x080322a3
 8027958:	08031cb5 	.word	0x08031cb5

0802795c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027960:	ed2d 8b08 	vpush	{d8-d11}
 8027964:	b08f      	sub	sp, #60	; 0x3c
 8027966:	461d      	mov	r5, r3
 8027968:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802796a:	920c      	str	r2, [sp, #48]	; 0x30
 802796c:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8027970:	9107      	str	r1, [sp, #28]
 8027972:	6859      	ldr	r1, [r3, #4]
 8027974:	681b      	ldr	r3, [r3, #0]
 8027976:	900d      	str	r0, [sp, #52]	; 0x34
 8027978:	fb01 2707 	mla	r7, r1, r7, r2
 802797c:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8027980:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027982:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8027986:	f8d3 8000 	ldr.w	r8, [r3]
 802798a:	eeb0 aa40 	vmov.f32	s20, s0
 802798e:	eef0 9a60 	vmov.f32	s19, s1
 8027992:	eeb0 9a41 	vmov.f32	s18, s2
 8027996:	eeb0 8a62 	vmov.f32	s16, s5
 802799a:	eef0 8a43 	vmov.f32	s17, s6
 802799e:	eef0 ba44 	vmov.f32	s23, s8
 80279a2:	eeb0 ba64 	vmov.f32	s22, s9
 80279a6:	eef0 aa45 	vmov.f32	s21, s10
 80279aa:	9b07      	ldr	r3, [sp, #28]
 80279ac:	2b00      	cmp	r3, #0
 80279ae:	dc03      	bgt.n	80279b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80279b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80279b2:	2b00      	cmp	r3, #0
 80279b4:	f340 8181 	ble.w	8027cba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80279b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80279ba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80279be:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80279c2:	1e48      	subs	r0, r1, #1
 80279c4:	f102 3cff 	add.w	ip, r2, #4294967295
 80279c8:	2d00      	cmp	r5, #0
 80279ca:	f340 809b 	ble.w	8027b04 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 80279ce:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80279d2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80279d6:	d406      	bmi.n	80279e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80279d8:	4586      	cmp	lr, r0
 80279da:	da04      	bge.n	80279e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80279dc:	2b00      	cmp	r3, #0
 80279de:	db02      	blt.n	80279e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80279e0:	4563      	cmp	r3, ip
 80279e2:	f2c0 8090 	blt.w	8027b06 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80279e6:	f11e 0e01 	adds.w	lr, lr, #1
 80279ea:	f100 8084 	bmi.w	8027af6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80279ee:	4571      	cmp	r1, lr
 80279f0:	f2c0 8081 	blt.w	8027af6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80279f4:	3301      	adds	r3, #1
 80279f6:	d47e      	bmi.n	8027af6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80279f8:	429a      	cmp	r2, r3
 80279fa:	db7c      	blt.n	8027af6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80279fc:	46aa      	mov	sl, r5
 80279fe:	46b9      	mov	r9, r7
 8027a00:	f1ba 0f00 	cmp.w	sl, #0
 8027a04:	f340 8099 	ble.w	8027b3a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8027a08:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027a0a:	1421      	asrs	r1, r4, #16
 8027a0c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027a10:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027a14:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027a18:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8027a1c:	f100 80d0 	bmi.w	8027bc0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8027a20:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027a24:	4559      	cmp	r1, fp
 8027a26:	f280 80cb 	bge.w	8027bc0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8027a2a:	2800      	cmp	r0, #0
 8027a2c:	f2c0 80c8 	blt.w	8027bc0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8027a30:	f103 3bff 	add.w	fp, r3, #4294967295
 8027a34:	4558      	cmp	r0, fp
 8027a36:	f280 80c3 	bge.w	8027bc0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8027a3a:	fa0f fe8e 	sxth.w	lr, lr
 8027a3e:	fb00 110e 	mla	r1, r0, lr, r1
 8027a42:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8027a46:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8027a4a:	8841      	ldrh	r1, [r0, #2]
 8027a4c:	f1bc 0f00 	cmp.w	ip, #0
 8027a50:	d00b      	beq.n	8027a6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8027a52:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8027a56:	3b01      	subs	r3, #1
 8027a58:	005b      	lsls	r3, r3, #1
 8027a5a:	3302      	adds	r3, #2
 8027a5c:	eb00 0e03 	add.w	lr, r0, r3
 8027a60:	5ac3      	ldrh	r3, [r0, r3]
 8027a62:	9308      	str	r3, [sp, #32]
 8027a64:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8027a68:	9309      	str	r3, [sp, #36]	; 0x24
 8027a6a:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8027a6e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027a72:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027a76:	ea40 000b 	orr.w	r0, r0, fp
 8027a7a:	fb12 f30c 	smulbb	r3, r2, ip
 8027a7e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8027a82:	10db      	asrs	r3, r3, #3
 8027a84:	f1cc 0e10 	rsb	lr, ip, #16
 8027a88:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027a8c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027a90:	ebae 0e02 	sub.w	lr, lr, r2
 8027a94:	ea4b 0101 	orr.w	r1, fp, r1
 8027a98:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027a9c:	4351      	muls	r1, r2
 8027a9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027aa0:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8027aa4:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027aa8:	0410      	lsls	r0, r2, #16
 8027aaa:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027aae:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027ab2:	4310      	orrs	r0, r2
 8027ab4:	9a08      	ldr	r2, [sp, #32]
 8027ab6:	9908      	ldr	r1, [sp, #32]
 8027ab8:	0412      	lsls	r2, r2, #16
 8027aba:	fb03 e000 	mla	r0, r3, r0, lr
 8027abe:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027ac2:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8027ac6:	ea42 020e 	orr.w	r2, r2, lr
 8027aca:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8027ace:	fb03 0302 	mla	r3, r3, r2, r0
 8027ad2:	0d5a      	lsrs	r2, r3, #21
 8027ad4:	095b      	lsrs	r3, r3, #5
 8027ad6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027ada:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8027ade:	4313      	orrs	r3, r2
 8027ae0:	f8a9 3000 	strh.w	r3, [r9]
 8027ae4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027ae6:	441c      	add	r4, r3
 8027ae8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027aea:	f109 0902 	add.w	r9, r9, #2
 8027aee:	441e      	add	r6, r3
 8027af0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027af4:	e784      	b.n	8027a00 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8027af6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027af8:	441c      	add	r4, r3
 8027afa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027afc:	3d01      	subs	r5, #1
 8027afe:	441e      	add	r6, r3
 8027b00:	3702      	adds	r7, #2
 8027b02:	e761      	b.n	80279c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027b04:	d01d      	beq.n	8027b42 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8027b06:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8027b08:	1e6b      	subs	r3, r5, #1
 8027b0a:	fb00 4003 	mla	r0, r0, r3, r4
 8027b0e:	1400      	asrs	r0, r0, #16
 8027b10:	f53f af74 	bmi.w	80279fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027b14:	3901      	subs	r1, #1
 8027b16:	4288      	cmp	r0, r1
 8027b18:	f6bf af70 	bge.w	80279fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027b1c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8027b1e:	fb01 6303 	mla	r3, r1, r3, r6
 8027b22:	141b      	asrs	r3, r3, #16
 8027b24:	f53f af6a 	bmi.w	80279fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027b28:	3a01      	subs	r2, #1
 8027b2a:	4293      	cmp	r3, r2
 8027b2c:	f6bf af66 	bge.w	80279fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027b30:	46a9      	mov	r9, r5
 8027b32:	46ba      	mov	sl, r7
 8027b34:	f1b9 0f00 	cmp.w	r9, #0
 8027b38:	dc5a      	bgt.n	8027bf0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8027b3a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027b3e:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8027b42:	9b07      	ldr	r3, [sp, #28]
 8027b44:	2b00      	cmp	r3, #0
 8027b46:	f340 80b8 	ble.w	8027cba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8027b4a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027b52:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027b56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027b58:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027b5c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027b60:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027b64:	eef0 6a48 	vmov.f32	s13, s16
 8027b68:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027b6c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b70:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027b74:	ee16 4a90 	vmov	r4, s13
 8027b78:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027b7c:	eef0 6a68 	vmov.f32	s13, s17
 8027b80:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027b84:	ee18 2a10 	vmov	r2, s16
 8027b88:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027b8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b90:	ee18 2a90 	vmov	r2, s17
 8027b94:	9323      	str	r3, [sp, #140]	; 0x8c
 8027b96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027b98:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b9c:	9324      	str	r3, [sp, #144]	; 0x90
 8027b9e:	9b07      	ldr	r3, [sp, #28]
 8027ba0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027ba2:	3b01      	subs	r3, #1
 8027ba4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ba8:	9307      	str	r3, [sp, #28]
 8027baa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027bac:	ee16 6a90 	vmov	r6, s13
 8027bb0:	bf14      	ite	ne
 8027bb2:	461d      	movne	r5, r3
 8027bb4:	4615      	moveq	r5, r2
 8027bb6:	eef0 8a67 	vmov.f32	s17, s15
 8027bba:	eeb0 8a47 	vmov.f32	s16, s14
 8027bbe:	e6f4      	b.n	80279aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8027bc0:	f111 0b01 	adds.w	fp, r1, #1
 8027bc4:	d48e      	bmi.n	8027ae4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8027bc6:	45de      	cmp	lr, fp
 8027bc8:	db8c      	blt.n	8027ae4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8027bca:	f110 0b01 	adds.w	fp, r0, #1
 8027bce:	d489      	bmi.n	8027ae4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8027bd0:	455b      	cmp	r3, fp
 8027bd2:	db87      	blt.n	8027ae4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8027bd4:	b21b      	sxth	r3, r3
 8027bd6:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8027bda:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8027bde:	9300      	str	r3, [sp, #0]
 8027be0:	4642      	mov	r2, r8
 8027be2:	fa0f f38e 	sxth.w	r3, lr
 8027be6:	4649      	mov	r1, r9
 8027be8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027bea:	f7ff fe2b 	bl	8027844 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8027bee:	e779      	b.n	8027ae4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8027bf0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027bf2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8027bf6:	1420      	asrs	r0, r4, #16
 8027bf8:	1431      	asrs	r1, r6, #16
 8027bfa:	fb03 0101 	mla	r1, r3, r1, r0
 8027bfe:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8027c02:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8027c06:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8027c0a:	8841      	ldrh	r1, [r0, #2]
 8027c0c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027c10:	f1be 0f00 	cmp.w	lr, #0
 8027c14:	d00b      	beq.n	8027c2e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8027c16:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8027c1a:	3b01      	subs	r3, #1
 8027c1c:	005b      	lsls	r3, r3, #1
 8027c1e:	3302      	adds	r3, #2
 8027c20:	eb00 0b03 	add.w	fp, r0, r3
 8027c24:	5ac3      	ldrh	r3, [r0, r3]
 8027c26:	930a      	str	r3, [sp, #40]	; 0x28
 8027c28:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8027c2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8027c2e:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8027c32:	fb12 f30e 	smulbb	r3, r2, lr
 8027c36:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027c3a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8027c3e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027c42:	10db      	asrs	r3, r3, #3
 8027c44:	ea40 000c 	orr.w	r0, r0, ip
 8027c48:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027c4c:	f1ce 0c10 	rsb	ip, lr, #16
 8027c50:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027c54:	ebac 0c02 	sub.w	ip, ip, r2
 8027c58:	ea4b 0101 	orr.w	r1, fp, r1
 8027c5c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027c60:	4351      	muls	r1, r2
 8027c62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027c64:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8027c68:	fb0c 1c00 	mla	ip, ip, r0, r1
 8027c6c:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8027c70:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8027c74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027c76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027c78:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027c7c:	0412      	lsls	r2, r2, #16
 8027c7e:	ea4b 0000 	orr.w	r0, fp, r0
 8027c82:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027c86:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8027c8a:	fb03 c000 	mla	r0, r3, r0, ip
 8027c8e:	ea42 0b0b 	orr.w	fp, r2, fp
 8027c92:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8027c96:	fb03 000b 	mla	r0, r3, fp, r0
 8027c9a:	0d43      	lsrs	r3, r0, #21
 8027c9c:	0940      	lsrs	r0, r0, #5
 8027c9e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027ca2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027ca6:	4318      	orrs	r0, r3
 8027ca8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027caa:	f82a 0b02 	strh.w	r0, [sl], #2
 8027cae:	441c      	add	r4, r3
 8027cb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027cb2:	f109 39ff 	add.w	r9, r9, #4294967295
 8027cb6:	441e      	add	r6, r3
 8027cb8:	e73c      	b.n	8027b34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8027cba:	b00f      	add	sp, #60	; 0x3c
 8027cbc:	ecbd 8b08 	vpop	{d8-d11}
 8027cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8027cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027cc8:	880e      	ldrh	r6, [r1, #0]
 8027cca:	b085      	sub	sp, #20
 8027ccc:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8027cd0:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 8027cd4:	4690      	mov	r8, r2
 8027cd6:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 8027cda:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 8027cde:	9200      	str	r2, [sp, #0]
 8027ce0:	00f6      	lsls	r6, r6, #3
 8027ce2:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 8027ce6:	9201      	str	r2, [sp, #4]
 8027ce8:	2c00      	cmp	r4, #0
 8027cea:	b2f2      	uxtb	r2, r6
 8027cec:	fb04 5603 	mla	r6, r4, r3, r5
 8027cf0:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8027cf4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8027cf8:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8027cfc:	9202      	str	r2, [sp, #8]
 8027cfe:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 8027d02:	db36      	blt.n	8027d72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 8027d04:	45a6      	cmp	lr, r4
 8027d06:	dd34      	ble.n	8027d72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 8027d08:	2d00      	cmp	r5, #0
 8027d0a:	db30      	blt.n	8027d6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 8027d0c:	42ab      	cmp	r3, r5
 8027d0e:	dd2e      	ble.n	8027d6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 8027d10:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8027d14:	1c6e      	adds	r6, r5, #1
 8027d16:	d42f      	bmi.n	8027d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8027d18:	42b3      	cmp	r3, r6
 8027d1a:	dd2d      	ble.n	8027d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8027d1c:	b370      	cbz	r0, 8027d7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb8>
 8027d1e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8027d22:	3401      	adds	r4, #1
 8027d24:	d42e      	bmi.n	8027d84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 8027d26:	45a6      	cmp	lr, r4
 8027d28:	dd2c      	ble.n	8027d84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 8027d2a:	b377      	cbz	r7, 8027d8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc6>
 8027d2c:	2d00      	cmp	r5, #0
 8027d2e:	db27      	blt.n	8027d80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 8027d30:	42ab      	cmp	r3, r5
 8027d32:	dd25      	ble.n	8027d80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 8027d34:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8027d38:	3501      	adds	r5, #1
 8027d3a:	d429      	bmi.n	8027d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8027d3c:	42ab      	cmp	r3, r5
 8027d3e:	dd27      	ble.n	8027d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8027d40:	b340      	cbz	r0, 8027d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 8027d42:	3301      	adds	r3, #1
 8027d44:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8027d48:	280f      	cmp	r0, #15
 8027d4a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8027d4e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8027d52:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8027d56:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8027d5a:	d801      	bhi.n	8027d60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8027d5c:	2f0f      	cmp	r7, #15
 8027d5e:	d91b      	bls.n	8027d98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 8027d60:	4b84      	ldr	r3, [pc, #528]	; (8027f74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b0>)
 8027d62:	4a85      	ldr	r2, [pc, #532]	; (8027f78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8027d64:	4885      	ldr	r0, [pc, #532]	; (8027f7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8027d66:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8027d6a:	f004 fcbd 	bl	802c6e8 <__assert_func>
 8027d6e:	2200      	movs	r2, #0
 8027d70:	e7d0      	b.n	8027d14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x50>
 8027d72:	2600      	movs	r6, #0
 8027d74:	4632      	mov	r2, r6
 8027d76:	e7d4      	b.n	8027d22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8027d78:	2600      	movs	r6, #0
 8027d7a:	e7d2      	b.n	8027d22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8027d7c:	4606      	mov	r6, r0
 8027d7e:	e7d0      	b.n	8027d22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8027d80:	2400      	movs	r4, #0
 8027d82:	e7d9      	b.n	8027d38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8027d84:	2300      	movs	r3, #0
 8027d86:	461c      	mov	r4, r3
 8027d88:	e7de      	b.n	8027d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8027d8a:	463b      	mov	r3, r7
 8027d8c:	463c      	mov	r4, r7
 8027d8e:	e7db      	b.n	8027d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8027d90:	2300      	movs	r3, #0
 8027d92:	e7d9      	b.n	8027d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8027d94:	4603      	mov	r3, r0
 8027d96:	e7d7      	b.n	8027d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8027d98:	b280      	uxth	r0, r0
 8027d9a:	b2bf      	uxth	r7, r7
 8027d9c:	fb00 fe07 	mul.w	lr, r0, r7
 8027da0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8027da4:	0100      	lsls	r0, r0, #4
 8027da6:	eba0 0c0e 	sub.w	ip, r0, lr
 8027daa:	b2bf      	uxth	r7, r7
 8027dac:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8027db0:	fa1f fc8c 	uxth.w	ip, ip
 8027db4:	1bed      	subs	r5, r5, r7
 8027db6:	b2ad      	uxth	r5, r5
 8027db8:	fb0c f00a 	mul.w	r0, ip, sl
 8027dbc:	fb05 000b 	mla	r0, r5, fp, r0
 8027dc0:	fb07 0009 	mla	r0, r7, r9, r0
 8027dc4:	fb0e 0008 	mla	r0, lr, r8, r0
 8027dc8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027dcc:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8027dd0:	9003      	str	r0, [sp, #12]
 8027dd2:	d018      	beq.n	8027e06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x142>
 8027dd4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8027dd8:	fb0b f000 	mul.w	r0, fp, r0
 8027ddc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027de0:	fb0b fb02 	mul.w	fp, fp, r2
 8027de4:	0a02      	lsrs	r2, r0, #8
 8027de6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027dea:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8027dee:	4402      	add	r2, r0
 8027df0:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8027df4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8027df8:	0a12      	lsrs	r2, r2, #8
 8027dfa:	0a00      	lsrs	r0, r0, #8
 8027dfc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027e00:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027e04:	4302      	orrs	r2, r0
 8027e06:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8027e0a:	d019      	beq.n	8027e40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x17c>
 8027e0c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8027e10:	fb0a fb0b 	mul.w	fp, sl, fp
 8027e14:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027e18:	fb0a fa06 	mul.w	sl, sl, r6
 8027e1c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8027e20:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027e24:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027e28:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8027e2c:	445e      	add	r6, fp
 8027e2e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027e32:	0a36      	lsrs	r6, r6, #8
 8027e34:	0a00      	lsrs	r0, r0, #8
 8027e36:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027e3a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027e3e:	4306      	orrs	r6, r0
 8027e40:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027e44:	d019      	beq.n	8027e7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1b6>
 8027e46:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8027e4a:	fb09 fa0a 	mul.w	sl, r9, sl
 8027e4e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027e52:	fb09 f904 	mul.w	r9, r9, r4
 8027e56:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8027e5a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027e5e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027e62:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8027e66:	4454      	add	r4, sl
 8027e68:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8027e6c:	0a24      	lsrs	r4, r4, #8
 8027e6e:	0a00      	lsrs	r0, r0, #8
 8027e70:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027e74:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027e78:	4304      	orrs	r4, r0
 8027e7a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027e7e:	d019      	beq.n	8027eb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f0>
 8027e80:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8027e84:	fb08 f909 	mul.w	r9, r8, r9
 8027e88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027e8c:	fb08 f803 	mul.w	r8, r8, r3
 8027e90:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8027e94:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027e98:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8027e9c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8027ea0:	444b      	add	r3, r9
 8027ea2:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8027ea6:	0a1b      	lsrs	r3, r3, #8
 8027ea8:	0a00      	lsrs	r0, r0, #8
 8027eaa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027eae:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027eb2:	4303      	orrs	r3, r0
 8027eb4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8027eb8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8027ebc:	fb0c f808 	mul.w	r8, ip, r8
 8027ec0:	fb05 8800 	mla	r8, r5, r0, r8
 8027ec4:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8027ec8:	fb07 8800 	mla	r8, r7, r0, r8
 8027ecc:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8027ed0:	fb0e 8000 	mla	r0, lr, r0, r8
 8027ed4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027ed8:	fb0c f606 	mul.w	r6, ip, r6
 8027edc:	0a00      	lsrs	r0, r0, #8
 8027ede:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027ee2:	fb05 6202 	mla	r2, r5, r2, r6
 8027ee6:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8027eea:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8027eee:	fb07 2700 	mla	r7, r7, r0, r2
 8027ef2:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8027ef6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8027efa:	9c03      	ldr	r4, [sp, #12]
 8027efc:	9e01      	ldr	r6, [sp, #4]
 8027efe:	b29b      	uxth	r3, r3
 8027f00:	435c      	muls	r4, r3
 8027f02:	fb0e 7000 	mla	r0, lr, r0, r7
 8027f06:	1c62      	adds	r2, r4, #1
 8027f08:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8027f0c:	0a00      	lsrs	r0, r0, #8
 8027f0e:	9c00      	ldr	r4, [sp, #0]
 8027f10:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027f14:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8027f18:	ea48 0000 	orr.w	r0, r8, r0
 8027f1c:	b2d2      	uxtb	r2, r2
 8027f1e:	fb14 f402 	smulbb	r4, r4, r2
 8027f22:	0c05      	lsrs	r5, r0, #16
 8027f24:	fb05 4503 	mla	r5, r5, r3, r4
 8027f28:	fb16 f602 	smulbb	r6, r6, r2
 8027f2c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8027f30:	fb04 6403 	mla	r4, r4, r3, r6
 8027f34:	9e02      	ldr	r6, [sp, #8]
 8027f36:	b2c0      	uxtb	r0, r0
 8027f38:	fb16 f202 	smulbb	r2, r6, r2
 8027f3c:	fb00 2303 	mla	r3, r0, r3, r2
 8027f40:	b2ad      	uxth	r5, r5
 8027f42:	b298      	uxth	r0, r3
 8027f44:	1c43      	adds	r3, r0, #1
 8027f46:	1c6a      	adds	r2, r5, #1
 8027f48:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027f4c:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8027f50:	b2a4      	uxth	r4, r4
 8027f52:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8027f56:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027f5a:	4313      	orrs	r3, r2
 8027f5c:	1c62      	adds	r2, r4, #1
 8027f5e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8027f62:	0952      	lsrs	r2, r2, #5
 8027f64:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027f68:	4313      	orrs	r3, r2
 8027f6a:	800b      	strh	r3, [r1, #0]
 8027f6c:	b005      	add	sp, #20
 8027f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f72:	bf00      	nop
 8027f74:	08031c31 	.word	0x08031c31
 8027f78:	080321fa 	.word	0x080321fa
 8027f7c:	08031cb5 	.word	0x08031cb5

08027f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f84:	ed2d 8b08 	vpush	{d8-d11}
 8027f88:	b09d      	sub	sp, #116	; 0x74
 8027f8a:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8027f8e:	9219      	str	r2, [sp, #100]	; 0x64
 8027f90:	9307      	str	r3, [sp, #28]
 8027f92:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8027f94:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8027f98:	931a      	str	r3, [sp, #104]	; 0x68
 8027f9a:	9117      	str	r1, [sp, #92]	; 0x5c
 8027f9c:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8027fa0:	901b      	str	r0, [sp, #108]	; 0x6c
 8027fa2:	6850      	ldr	r0, [r2, #4]
 8027fa4:	6812      	ldr	r2, [r2, #0]
 8027fa6:	fb00 1303 	mla	r3, r0, r3, r1
 8027faa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027fae:	930a      	str	r3, [sp, #40]	; 0x28
 8027fb0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027fb2:	681b      	ldr	r3, [r3, #0]
 8027fb4:	9310      	str	r3, [sp, #64]	; 0x40
 8027fb6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8027fba:	930b      	str	r3, [sp, #44]	; 0x2c
 8027fbc:	eeb0 aa40 	vmov.f32	s20, s0
 8027fc0:	eef0 9a60 	vmov.f32	s19, s1
 8027fc4:	eeb0 9a41 	vmov.f32	s18, s2
 8027fc8:	eeb0 8a62 	vmov.f32	s16, s5
 8027fcc:	eef0 8a43 	vmov.f32	s17, s6
 8027fd0:	eef0 ba44 	vmov.f32	s23, s8
 8027fd4:	eeb0 ba64 	vmov.f32	s22, s9
 8027fd8:	eef0 aa45 	vmov.f32	s21, s10
 8027fdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027fde:	2b00      	cmp	r3, #0
 8027fe0:	dc03      	bgt.n	8027fea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027fe2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027fe4:	2b00      	cmp	r3, #0
 8027fe6:	f340 8375 	ble.w	80286d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8027fea:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027fec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027ff0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027ff4:	1e48      	subs	r0, r1, #1
 8027ff6:	1e57      	subs	r7, r2, #1
 8027ff8:	9b07      	ldr	r3, [sp, #28]
 8027ffa:	2b00      	cmp	r3, #0
 8027ffc:	f340 818e 	ble.w	802831c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8028000:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8028004:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028008:	d406      	bmi.n	8028018 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802800a:	4584      	cmp	ip, r0
 802800c:	da04      	bge.n	8028018 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802800e:	2b00      	cmp	r3, #0
 8028010:	db02      	blt.n	8028018 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8028012:	42bb      	cmp	r3, r7
 8028014:	f2c0 8183 	blt.w	802831e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8028018:	f11c 0c01 	adds.w	ip, ip, #1
 802801c:	f100 8173 	bmi.w	8028306 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028020:	4561      	cmp	r1, ip
 8028022:	f2c0 8170 	blt.w	8028306 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028026:	3301      	adds	r3, #1
 8028028:	f100 816d 	bmi.w	8028306 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802802c:	429a      	cmp	r2, r3
 802802e:	f2c0 816a 	blt.w	8028306 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028032:	9b07      	ldr	r3, [sp, #28]
 8028034:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8028036:	9318      	str	r3, [sp, #96]	; 0x60
 8028038:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802803a:	2b00      	cmp	r3, #0
 802803c:	f340 818c 	ble.w	8028358 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8028040:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8028042:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8028044:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8028048:	689b      	ldr	r3, [r3, #8]
 802804a:	1422      	asrs	r2, r4, #16
 802804c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028050:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028054:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028058:	f100 81cd 	bmi.w	80283f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802805c:	f103 38ff 	add.w	r8, r3, #4294967295
 8028060:	4542      	cmp	r2, r8
 8028062:	f280 81c8 	bge.w	80283f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028066:	f1bc 0f00 	cmp.w	ip, #0
 802806a:	f2c0 81c4 	blt.w	80283f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802806e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8028072:	45c4      	cmp	ip, r8
 8028074:	f280 81bf 	bge.w	80283f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028078:	b21b      	sxth	r3, r3
 802807a:	fb0c 2203 	mla	r2, ip, r3, r2
 802807e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028080:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8028084:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028088:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802808c:	2800      	cmp	r0, #0
 802808e:	f000 81a9 	beq.w	80283e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8028092:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028096:	950c      	str	r5, [sp, #48]	; 0x30
 8028098:	0e2d      	lsrs	r5, r5, #24
 802809a:	9513      	str	r5, [sp, #76]	; 0x4c
 802809c:	b181      	cbz	r1, 80280c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802809e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80280a2:	3b01      	subs	r3, #1
 80280a4:	009b      	lsls	r3, r3, #2
 80280a6:	3304      	adds	r3, #4
 80280a8:	eb08 0c03 	add.w	ip, r8, r3
 80280ac:	f858 3003 	ldr.w	r3, [r8, r3]
 80280b0:	9308      	str	r3, [sp, #32]
 80280b2:	0e1b      	lsrs	r3, r3, #24
 80280b4:	9311      	str	r3, [sp, #68]	; 0x44
 80280b6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80280ba:	930d      	str	r3, [sp, #52]	; 0x34
 80280bc:	0e1b      	lsrs	r3, r3, #24
 80280be:	9314      	str	r3, [sp, #80]	; 0x50
 80280c0:	b280      	uxth	r0, r0
 80280c2:	b289      	uxth	r1, r1
 80280c4:	fb00 f901 	mul.w	r9, r0, r1
 80280c8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80280cc:	0100      	lsls	r0, r0, #4
 80280ce:	eba0 0809 	sub.w	r8, r0, r9
 80280d2:	b289      	uxth	r1, r1
 80280d4:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80280d8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80280da:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80280dc:	fa1f f888 	uxth.w	r8, r8
 80280e0:	1a5b      	subs	r3, r3, r1
 80280e2:	b29b      	uxth	r3, r3
 80280e4:	fb08 f000 	mul.w	r0, r8, r0
 80280e8:	fb03 000e 	mla	r0, r3, lr, r0
 80280ec:	fb01 0005 	mla	r0, r1, r5, r0
 80280f0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80280f2:	fb09 0005 	mla	r0, r9, r5, r0
 80280f6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80280fa:	2800      	cmp	r0, #0
 80280fc:	f000 80fa 	beq.w	80282f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028100:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028104:	d01b      	beq.n	802813e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8028106:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802810a:	fb0e fa0a 	mul.w	sl, lr, sl
 802810e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028112:	fb0e fe02 	mul.w	lr, lr, r2
 8028116:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802811a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802811e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028122:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8028126:	4452      	add	r2, sl
 8028128:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802812c:	0a12      	lsrs	r2, r2, #8
 802812e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028132:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028136:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802813a:	ea42 020c 	orr.w	r2, r2, ip
 802813e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028140:	2dff      	cmp	r5, #255	; 0xff
 8028142:	d021      	beq.n	8028188 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8028144:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028146:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802814a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802814c:	fb05 fb0b 	mul.w	fp, r5, fp
 8028150:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028152:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028156:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028158:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802815c:	fb05 fa0a 	mul.w	sl, r5, sl
 8028160:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028164:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028168:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802816c:	44de      	add	lr, fp
 802816e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028172:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028176:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802817a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802817e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028182:	ea4e 050a 	orr.w	r5, lr, sl
 8028186:	950c      	str	r5, [sp, #48]	; 0x30
 8028188:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802818a:	2dff      	cmp	r5, #255	; 0xff
 802818c:	d021      	beq.n	80281d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802818e:	9d08      	ldr	r5, [sp, #32]
 8028190:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028194:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028196:	fb05 fb0b 	mul.w	fp, r5, fp
 802819a:	9d08      	ldr	r5, [sp, #32]
 802819c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80281a0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80281a2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80281a6:	fb05 fa0a 	mul.w	sl, r5, sl
 80281aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80281ae:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80281b2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80281b6:	44de      	add	lr, fp
 80281b8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80281bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80281c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80281c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80281c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80281cc:	ea4e 050a 	orr.w	r5, lr, sl
 80281d0:	9508      	str	r5, [sp, #32]
 80281d2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80281d4:	2dff      	cmp	r5, #255	; 0xff
 80281d6:	d021      	beq.n	802821c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 80281d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80281da:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80281de:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80281e0:	fb05 fb0b 	mul.w	fp, r5, fp
 80281e4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80281e6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80281ea:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80281ec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80281f0:	fb05 fa0a 	mul.w	sl, r5, sl
 80281f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80281f8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80281fc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028200:	44de      	add	lr, fp
 8028202:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028206:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802820a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802820e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028212:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028216:	ea4e 050a 	orr.w	r5, lr, sl
 802821a:	950d      	str	r5, [sp, #52]	; 0x34
 802821c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802821e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028222:	9d08      	ldr	r5, [sp, #32]
 8028224:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028228:	fb08 fc0c 	mul.w	ip, r8, ip
 802822c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8028230:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028234:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028236:	fb01 cc0e 	mla	ip, r1, lr, ip
 802823a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802823e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028240:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028244:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028248:	fb08 f80e 	mul.w	r8, r8, lr
 802824c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028250:	fb03 8202 	mla	r2, r3, r2, r8
 8028254:	9b08      	ldr	r3, [sp, #32]
 8028256:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028258:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802825c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802825e:	fb01 220a 	mla	r2, r1, sl, r2
 8028262:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8028266:	fb09 2901 	mla	r9, r9, r1, r2
 802826a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802826c:	883b      	ldrh	r3, [r7, #0]
 802826e:	4342      	muls	r2, r0
 8028270:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028274:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028278:	1c50      	adds	r0, r2, #1
 802827a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802827e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028282:	ea4c 0c09 	orr.w	ip, ip, r9
 8028286:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802828a:	1219      	asrs	r1, r3, #8
 802828c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8028290:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8028294:	b2c0      	uxtb	r0, r0
 8028296:	fb12 f205 	smulbb	r2, r2, r5
 802829a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802829e:	fb01 2100 	mla	r1, r1, r0, r2
 80282a2:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80282a6:	10da      	asrs	r2, r3, #3
 80282a8:	fa5f fc8c 	uxtb.w	ip, ip
 80282ac:	00db      	lsls	r3, r3, #3
 80282ae:	fb1c fc05 	smulbb	ip, ip, r5
 80282b2:	b2db      	uxtb	r3, r3
 80282b4:	b289      	uxth	r1, r1
 80282b6:	fb03 c300 	mla	r3, r3, r0, ip
 80282ba:	fa1f fc83 	uxth.w	ip, r3
 80282be:	1c4b      	adds	r3, r1, #1
 80282c0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80282c4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80282c8:	fb1e fe05 	smulbb	lr, lr, r5
 80282cc:	f10c 0301 	add.w	r3, ip, #1
 80282d0:	fb02 e200 	mla	r2, r2, r0, lr
 80282d4:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80282d8:	b292      	uxth	r2, r2
 80282da:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80282de:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80282e2:	430b      	orrs	r3, r1
 80282e4:	1c51      	adds	r1, r2, #1
 80282e6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80282ea:	0952      	lsrs	r2, r2, #5
 80282ec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80282f0:	4313      	orrs	r3, r2
 80282f2:	803b      	strh	r3, [r7, #0]
 80282f4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80282f6:	441c      	add	r4, r3
 80282f8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80282fa:	441e      	add	r6, r3
 80282fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80282fe:	3b01      	subs	r3, #1
 8028300:	3702      	adds	r7, #2
 8028302:	9318      	str	r3, [sp, #96]	; 0x60
 8028304:	e698      	b.n	8028038 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8028306:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8028308:	441c      	add	r4, r3
 802830a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802830c:	441e      	add	r6, r3
 802830e:	9b07      	ldr	r3, [sp, #28]
 8028310:	3b01      	subs	r3, #1
 8028312:	9307      	str	r3, [sp, #28]
 8028314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028316:	3302      	adds	r3, #2
 8028318:	930a      	str	r3, [sp, #40]	; 0x28
 802831a:	e66d      	b.n	8027ff8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802831c:	d023      	beq.n	8028366 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802831e:	9b07      	ldr	r3, [sp, #28]
 8028320:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8028322:	3b01      	subs	r3, #1
 8028324:	fb00 4003 	mla	r0, r0, r3, r4
 8028328:	1400      	asrs	r0, r0, #16
 802832a:	f53f ae82 	bmi.w	8028032 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802832e:	3901      	subs	r1, #1
 8028330:	4288      	cmp	r0, r1
 8028332:	f6bf ae7e 	bge.w	8028032 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028336:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8028338:	fb01 6303 	mla	r3, r1, r3, r6
 802833c:	141b      	asrs	r3, r3, #16
 802833e:	f53f ae78 	bmi.w	8028032 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028342:	3a01      	subs	r2, #1
 8028344:	4293      	cmp	r3, r2
 8028346:	f6bf ae74 	bge.w	8028032 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802834a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802834e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8028352:	f1bb 0f00 	cmp.w	fp, #0
 8028356:	dc6c      	bgt.n	8028432 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8028358:	9b07      	ldr	r3, [sp, #28]
 802835a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802835e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028360:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028364:	930a      	str	r3, [sp, #40]	; 0x28
 8028366:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028368:	2b00      	cmp	r3, #0
 802836a:	f340 81b3 	ble.w	80286d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 802836e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028376:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802837a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802837c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028380:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028384:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028388:	eef0 6a48 	vmov.f32	s13, s16
 802838c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028390:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028394:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028398:	ee16 4a90 	vmov	r4, s13
 802839c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80283a0:	eef0 6a68 	vmov.f32	s13, s17
 80283a4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80283a8:	ee18 2a10 	vmov	r2, s16
 80283ac:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80283b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80283b4:	ee18 2a90 	vmov	r2, s17
 80283b8:	9331      	str	r3, [sp, #196]	; 0xc4
 80283ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80283bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80283c0:	9332      	str	r3, [sp, #200]	; 0xc8
 80283c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80283c4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80283c6:	3b01      	subs	r3, #1
 80283c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80283cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80283ce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80283d0:	bf08      	it	eq
 80283d2:	4613      	moveq	r3, r2
 80283d4:	ee16 6a90 	vmov	r6, s13
 80283d8:	9307      	str	r3, [sp, #28]
 80283da:	eef0 8a67 	vmov.f32	s17, s15
 80283de:	eeb0 8a47 	vmov.f32	s16, s14
 80283e2:	e5fb      	b.n	8027fdc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80283e4:	2900      	cmp	r1, #0
 80283e6:	f43f ae6b 	beq.w	80280c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80283ea:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80283ee:	9308      	str	r3, [sp, #32]
 80283f0:	0e1b      	lsrs	r3, r3, #24
 80283f2:	9311      	str	r3, [sp, #68]	; 0x44
 80283f4:	e664      	b.n	80280c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80283f6:	f112 0801 	adds.w	r8, r2, #1
 80283fa:	f53f af7b 	bmi.w	80282f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80283fe:	4543      	cmp	r3, r8
 8028400:	f6ff af78 	blt.w	80282f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028404:	f11c 0801 	adds.w	r8, ip, #1
 8028408:	f53f af74 	bmi.w	80282f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802840c:	45c6      	cmp	lr, r8
 802840e:	f6ff af71 	blt.w	80282f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028412:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8028414:	9201      	str	r2, [sp, #4]
 8028416:	fa0f f28e 	sxth.w	r2, lr
 802841a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802841e:	e9cd c002 	strd	ip, r0, [sp, #8]
 8028422:	9200      	str	r2, [sp, #0]
 8028424:	b21b      	sxth	r3, r3
 8028426:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028428:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802842a:	4639      	mov	r1, r7
 802842c:	f7ff fc4a 	bl	8027cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8028430:	e760      	b.n	80282f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028432:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8028434:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028436:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802843a:	1427      	asrs	r7, r4, #16
 802843c:	1433      	asrs	r3, r6, #16
 802843e:	fb01 7303 	mla	r3, r1, r3, r7
 8028442:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8028446:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802844a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802844e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028452:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028456:	2a00      	cmp	r2, #0
 8028458:	f000 8133 	beq.w	80286c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 802845c:	687d      	ldr	r5, [r7, #4]
 802845e:	950e      	str	r5, [sp, #56]	; 0x38
 8028460:	0e2d      	lsrs	r5, r5, #24
 8028462:	9515      	str	r5, [sp, #84]	; 0x54
 8028464:	b178      	cbz	r0, 8028486 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8028466:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 802846a:	3901      	subs	r1, #1
 802846c:	0089      	lsls	r1, r1, #2
 802846e:	3104      	adds	r1, #4
 8028470:	eb07 0e01 	add.w	lr, r7, r1
 8028474:	5879      	ldr	r1, [r7, r1]
 8028476:	9109      	str	r1, [sp, #36]	; 0x24
 8028478:	0e09      	lsrs	r1, r1, #24
 802847a:	9112      	str	r1, [sp, #72]	; 0x48
 802847c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8028480:	910f      	str	r1, [sp, #60]	; 0x3c
 8028482:	0e09      	lsrs	r1, r1, #24
 8028484:	9116      	str	r1, [sp, #88]	; 0x58
 8028486:	b292      	uxth	r2, r2
 8028488:	b280      	uxth	r0, r0
 802848a:	fb02 f800 	mul.w	r8, r2, r0
 802848e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8028492:	0112      	lsls	r2, r2, #4
 8028494:	eba2 0e08 	sub.w	lr, r2, r8
 8028498:	b280      	uxth	r0, r0
 802849a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802849e:	9915      	ldr	r1, [sp, #84]	; 0x54
 80284a0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80284a2:	fa1f fe8e 	uxth.w	lr, lr
 80284a6:	1a12      	subs	r2, r2, r0
 80284a8:	b292      	uxth	r2, r2
 80284aa:	fb0e f101 	mul.w	r1, lr, r1
 80284ae:	fb02 110c 	mla	r1, r2, ip, r1
 80284b2:	fb00 1105 	mla	r1, r0, r5, r1
 80284b6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80284b8:	fb08 1105 	mla	r1, r8, r5, r1
 80284bc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80284c0:	2900      	cmp	r1, #0
 80284c2:	f000 80f5 	beq.w	80286b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80284c6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80284ca:	d019      	beq.n	8028500 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 80284cc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80284d0:	fb0c fa0a 	mul.w	sl, ip, sl
 80284d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80284d8:	fb0c fc03 	mul.w	ip, ip, r3
 80284dc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80284e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80284e4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80284e8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80284ec:	4453      	add	r3, sl
 80284ee:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80284f2:	0a1b      	lsrs	r3, r3, #8
 80284f4:	0a3f      	lsrs	r7, r7, #8
 80284f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80284fa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80284fe:	433b      	orrs	r3, r7
 8028500:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028502:	2dff      	cmp	r5, #255	; 0xff
 8028504:	d020      	beq.n	8028548 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8028506:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028508:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802850c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802850e:	436f      	muls	r7, r5
 8028510:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028512:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028516:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028518:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802851c:	fb05 fa0a 	mul.w	sl, r5, sl
 8028520:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028524:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028528:	44bc      	add	ip, r7
 802852a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802852e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028532:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028536:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802853a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802853e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028542:	ea4c 050a 	orr.w	r5, ip, sl
 8028546:	950e      	str	r5, [sp, #56]	; 0x38
 8028548:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802854a:	2dff      	cmp	r5, #255	; 0xff
 802854c:	d020      	beq.n	8028590 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 802854e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028550:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028554:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028556:	436f      	muls	r7, r5
 8028558:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802855a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802855e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028560:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028564:	fb05 fa0a 	mul.w	sl, r5, sl
 8028568:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802856c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028570:	44bc      	add	ip, r7
 8028572:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028576:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802857a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802857e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028582:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028586:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802858a:	ea4c 050a 	orr.w	r5, ip, sl
 802858e:	9509      	str	r5, [sp, #36]	; 0x24
 8028590:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028592:	2dff      	cmp	r5, #255	; 0xff
 8028594:	d020      	beq.n	80285d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8028596:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028598:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802859c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802859e:	436f      	muls	r7, r5
 80285a0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80285a2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80285a6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80285a8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80285ac:	fb05 fa0a 	mul.w	sl, r5, sl
 80285b0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80285b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80285b8:	44bc      	add	ip, r7
 80285ba:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80285be:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80285c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80285c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80285ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80285ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80285d2:	ea4c 050a 	orr.w	r5, ip, sl
 80285d6:	950f      	str	r5, [sp, #60]	; 0x3c
 80285d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80285da:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80285de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80285e0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80285e4:	fb0e f707 	mul.w	r7, lr, r7
 80285e8:	fb02 770c 	mla	r7, r2, ip, r7
 80285ec:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80285f0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80285f2:	fb00 770c 	mla	r7, r0, ip, r7
 80285f6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80285fa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80285fc:	fb08 770c 	mla	r7, r8, ip, r7
 8028600:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028604:	fb0e fe0c 	mul.w	lr, lr, ip
 8028608:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802860c:	fb02 e303 	mla	r3, r2, r3, lr
 8028610:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028612:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028614:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8028618:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802861a:	fb00 330a 	mla	r3, r0, sl, r3
 802861e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8028622:	fb08 3c0c 	mla	ip, r8, ip, r3
 8028626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028628:	f8b9 0000 	ldrh.w	r0, [r9]
 802862c:	4359      	muls	r1, r3
 802862e:	0a3f      	lsrs	r7, r7, #8
 8028630:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028634:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028638:	1c4b      	adds	r3, r1, #1
 802863a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802863e:	ea47 070c 	orr.w	r7, r7, ip
 8028642:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028646:	1202      	asrs	r2, r0, #8
 8028648:	0c3b      	lsrs	r3, r7, #16
 802864a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802864e:	b2c9      	uxtb	r1, r1
 8028650:	fb13 f305 	smulbb	r3, r3, r5
 8028654:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8028658:	fb02 3201 	mla	r2, r2, r1, r3
 802865c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8028660:	10c3      	asrs	r3, r0, #3
 8028662:	b2ff      	uxtb	r7, r7
 8028664:	00c0      	lsls	r0, r0, #3
 8028666:	b2c0      	uxtb	r0, r0
 8028668:	fb17 f705 	smulbb	r7, r7, r5
 802866c:	fb00 7001 	mla	r0, r0, r1, r7
 8028670:	b292      	uxth	r2, r2
 8028672:	fb1c fc05 	smulbb	ip, ip, r5
 8028676:	b280      	uxth	r0, r0
 8028678:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802867c:	fb03 c301 	mla	r3, r3, r1, ip
 8028680:	1c51      	adds	r1, r2, #1
 8028682:	f100 0c01 	add.w	ip, r0, #1
 8028686:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802868a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802868e:	b29b      	uxth	r3, r3
 8028690:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8028694:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8028698:	ea4c 0202 	orr.w	r2, ip, r2
 802869c:	f103 0c01 	add.w	ip, r3, #1
 80286a0:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80286a4:	095b      	lsrs	r3, r3, #5
 80286a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80286aa:	431a      	orrs	r2, r3
 80286ac:	f8a9 2000 	strh.w	r2, [r9]
 80286b0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80286b2:	441c      	add	r4, r3
 80286b4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80286b6:	f109 0902 	add.w	r9, r9, #2
 80286ba:	441e      	add	r6, r3
 80286bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80286c0:	e647      	b.n	8028352 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 80286c2:	2800      	cmp	r0, #0
 80286c4:	f43f aedf 	beq.w	8028486 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80286c8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80286cc:	9109      	str	r1, [sp, #36]	; 0x24
 80286ce:	0e09      	lsrs	r1, r1, #24
 80286d0:	9112      	str	r1, [sp, #72]	; 0x48
 80286d2:	e6d8      	b.n	8028486 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80286d4:	b01d      	add	sp, #116	; 0x74
 80286d6:	ecbd 8b08 	vpop	{d8-d11}
 80286da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080286e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80286e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80286e4:	880e      	ldrh	r6, [r1, #0]
 80286e6:	b085      	sub	sp, #20
 80286e8:	ea4f 2e26 	mov.w	lr, r6, asr #8
 80286ec:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 80286f0:	4690      	mov	r8, r2
 80286f2:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 80286f6:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 80286fa:	9200      	str	r2, [sp, #0]
 80286fc:	00f6      	lsls	r6, r6, #3
 80286fe:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 8028702:	9201      	str	r2, [sp, #4]
 8028704:	2c00      	cmp	r4, #0
 8028706:	b2f2      	uxtb	r2, r6
 8028708:	fb04 5603 	mla	r6, r4, r3, r5
 802870c:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8028710:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8028714:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8028718:	9202      	str	r2, [sp, #8]
 802871a:	eb08 0e86 	add.w	lr, r8, r6, lsl #2
 802871e:	db37      	blt.n	8028790 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb0>
 8028720:	45a4      	cmp	ip, r4
 8028722:	dd35      	ble.n	8028790 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb0>
 8028724:	2d00      	cmp	r5, #0
 8028726:	db31      	blt.n	802878c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xac>
 8028728:	42ab      	cmp	r3, r5
 802872a:	dd2f      	ble.n	802878c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xac>
 802872c:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8028730:	1c6e      	adds	r6, r5, #1
 8028732:	d430      	bmi.n	8028796 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 8028734:	42b3      	cmp	r3, r6
 8028736:	dd2e      	ble.n	8028796 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 8028738:	b378      	cbz	r0, 802879a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xba>
 802873a:	f8de 6004 	ldr.w	r6, [lr, #4]
 802873e:	3401      	adds	r4, #1
 8028740:	d42f      	bmi.n	80287a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 8028742:	45a4      	cmp	ip, r4
 8028744:	dd2d      	ble.n	80287a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 8028746:	b37f      	cbz	r7, 80287a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 8028748:	2d00      	cmp	r5, #0
 802874a:	eb0e 0c83 	add.w	ip, lr, r3, lsl #2
 802874e:	db26      	blt.n	802879e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 8028750:	42ab      	cmp	r3, r5
 8028752:	dd24      	ble.n	802879e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 8028754:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8028758:	3501      	adds	r5, #1
 802875a:	d428      	bmi.n	80287ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xce>
 802875c:	42ab      	cmp	r3, r5
 802875e:	dd26      	ble.n	80287ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xce>
 8028760:	b338      	cbz	r0, 80287b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd2>
 8028762:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028766:	280f      	cmp	r0, #15
 8028768:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802876c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8028770:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8028774:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8028778:	d801      	bhi.n	802877e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 802877a:	2f0f      	cmp	r7, #15
 802877c:	d91b      	bls.n	80287b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd6>
 802877e:	4b7d      	ldr	r3, [pc, #500]	; (8028974 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>)
 8028780:	4a7d      	ldr	r2, [pc, #500]	; (8028978 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x298>)
 8028782:	487e      	ldr	r0, [pc, #504]	; (802897c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8028784:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8028788:	f003 ffae 	bl	802c6e8 <__assert_func>
 802878c:	2200      	movs	r2, #0
 802878e:	e7cf      	b.n	8028730 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x50>
 8028790:	2600      	movs	r6, #0
 8028792:	4632      	mov	r2, r6
 8028794:	e7d3      	b.n	802873e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8028796:	2600      	movs	r6, #0
 8028798:	e7d1      	b.n	802873e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 802879a:	4606      	mov	r6, r0
 802879c:	e7cf      	b.n	802873e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 802879e:	2400      	movs	r4, #0
 80287a0:	e7da      	b.n	8028758 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 80287a2:	2300      	movs	r3, #0
 80287a4:	461c      	mov	r4, r3
 80287a6:	e7de      	b.n	8028766 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x86>
 80287a8:	463b      	mov	r3, r7
 80287aa:	463c      	mov	r4, r7
 80287ac:	e7db      	b.n	8028766 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x86>
 80287ae:	2300      	movs	r3, #0
 80287b0:	e7d9      	b.n	8028766 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x86>
 80287b2:	4603      	mov	r3, r0
 80287b4:	e7d7      	b.n	8028766 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x86>
 80287b6:	b280      	uxth	r0, r0
 80287b8:	b2bf      	uxth	r7, r7
 80287ba:	fb00 fe07 	mul.w	lr, r0, r7
 80287be:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80287c2:	0100      	lsls	r0, r0, #4
 80287c4:	eba0 0c0e 	sub.w	ip, r0, lr
 80287c8:	b2bf      	uxth	r7, r7
 80287ca:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80287ce:	fa1f fc8c 	uxth.w	ip, ip
 80287d2:	1bed      	subs	r5, r5, r7
 80287d4:	b2ad      	uxth	r5, r5
 80287d6:	fb0c f00a 	mul.w	r0, ip, sl
 80287da:	fb05 000b 	mla	r0, r5, fp, r0
 80287de:	fb07 0009 	mla	r0, r7, r9, r0
 80287e2:	fb0e 0008 	mla	r0, lr, r8, r0
 80287e6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80287ea:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80287ee:	9003      	str	r0, [sp, #12]
 80287f0:	d018      	beq.n	8028824 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x144>
 80287f2:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80287f6:	fb0b f000 	mul.w	r0, fp, r0
 80287fa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80287fe:	fb0b fb02 	mul.w	fp, fp, r2
 8028802:	0a02      	lsrs	r2, r0, #8
 8028804:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028808:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802880c:	4402      	add	r2, r0
 802880e:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8028812:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028816:	0a12      	lsrs	r2, r2, #8
 8028818:	0a00      	lsrs	r0, r0, #8
 802881a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802881e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8028822:	4302      	orrs	r2, r0
 8028824:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8028828:	d019      	beq.n	802885e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x17e>
 802882a:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802882e:	fb0a fb0b 	mul.w	fp, sl, fp
 8028832:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028836:	fb0a fa06 	mul.w	sl, sl, r6
 802883a:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802883e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028842:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028846:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802884a:	445e      	add	r6, fp
 802884c:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8028850:	0a36      	lsrs	r6, r6, #8
 8028852:	0a00      	lsrs	r0, r0, #8
 8028854:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028858:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802885c:	4306      	orrs	r6, r0
 802885e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028862:	d019      	beq.n	8028898 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1b8>
 8028864:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8028868:	fb09 fa0a 	mul.w	sl, r9, sl
 802886c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028870:	fb09 f904 	mul.w	r9, r9, r4
 8028874:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8028878:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802887c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028880:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8028884:	4454      	add	r4, sl
 8028886:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 802888a:	0a24      	lsrs	r4, r4, #8
 802888c:	0a00      	lsrs	r0, r0, #8
 802888e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028892:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8028896:	4304      	orrs	r4, r0
 8028898:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802889c:	d019      	beq.n	80288d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f2>
 802889e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80288a2:	fb08 f909 	mul.w	r9, r8, r9
 80288a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80288aa:	fb08 f803 	mul.w	r8, r8, r3
 80288ae:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80288b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80288b6:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80288ba:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80288be:	444b      	add	r3, r9
 80288c0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80288c4:	0a1b      	lsrs	r3, r3, #8
 80288c6:	0a00      	lsrs	r0, r0, #8
 80288c8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80288cc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80288d0:	4303      	orrs	r3, r0
 80288d2:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80288d6:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80288da:	fb0c f808 	mul.w	r8, ip, r8
 80288de:	fb05 8800 	mla	r8, r5, r0, r8
 80288e2:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80288e6:	fb07 8800 	mla	r8, r7, r0, r8
 80288ea:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80288ee:	fb0e 8000 	mla	r0, lr, r0, r8
 80288f2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80288f6:	fb0c f606 	mul.w	r6, ip, r6
 80288fa:	0a00      	lsrs	r0, r0, #8
 80288fc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028900:	fb05 6202 	mla	r2, r5, r2, r6
 8028904:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8028908:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 802890c:	fb07 2700 	mla	r7, r7, r0, r2
 8028910:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8028914:	9b03      	ldr	r3, [sp, #12]
 8028916:	9d00      	ldr	r5, [sp, #0]
 8028918:	9a02      	ldr	r2, [sp, #8]
 802891a:	fb0e 7000 	mla	r0, lr, r0, r7
 802891e:	43dc      	mvns	r4, r3
 8028920:	9b01      	ldr	r3, [sp, #4]
 8028922:	b2e4      	uxtb	r4, r4
 8028924:	0a00      	lsrs	r0, r0, #8
 8028926:	4363      	muls	r3, r4
 8028928:	4365      	muls	r5, r4
 802892a:	4362      	muls	r2, r4
 802892c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8028930:	ea48 0000 	orr.w	r0, r8, r0
 8028934:	4614      	mov	r4, r2
 8028936:	1c5e      	adds	r6, r3, #1
 8028938:	1c6a      	adds	r2, r5, #1
 802893a:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 802893e:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8028942:	0a03      	lsrs	r3, r0, #8
 8028944:	0c02      	lsrs	r2, r0, #16
 8028946:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 802894a:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 802894e:	00db      	lsls	r3, r3, #3
 8028950:	0212      	lsls	r2, r2, #8
 8028952:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8028956:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802895a:	4313      	orrs	r3, r2
 802895c:	1c62      	adds	r2, r4, #1
 802895e:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8028962:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8028966:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 802896a:	4318      	orrs	r0, r3
 802896c:	8008      	strh	r0, [r1, #0]
 802896e:	b005      	add	sp, #20
 8028970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028974:	08031c31 	.word	0x08031c31
 8028978:	080321fa 	.word	0x080321fa
 802897c:	08031cb5 	.word	0x08031cb5

08028980 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028984:	ed2d 8b08 	vpush	{d8-d11}
 8028988:	b09b      	sub	sp, #108	; 0x6c
 802898a:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 802898e:	9218      	str	r2, [sp, #96]	; 0x60
 8028990:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8028992:	9116      	str	r1, [sp, #88]	; 0x58
 8028994:	9307      	str	r3, [sp, #28]
 8028996:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802899a:	9019      	str	r0, [sp, #100]	; 0x64
 802899c:	6850      	ldr	r0, [r2, #4]
 802899e:	6812      	ldr	r2, [r2, #0]
 80289a0:	fb00 1303 	mla	r3, r0, r3, r1
 80289a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80289a8:	930a      	str	r3, [sp, #40]	; 0x28
 80289aa:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80289ac:	681b      	ldr	r3, [r3, #0]
 80289ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80289b0:	eeb0 aa40 	vmov.f32	s20, s0
 80289b4:	eef0 9a60 	vmov.f32	s19, s1
 80289b8:	eeb0 9a41 	vmov.f32	s18, s2
 80289bc:	eeb0 8a62 	vmov.f32	s16, s5
 80289c0:	eef0 8a43 	vmov.f32	s17, s6
 80289c4:	eef0 ba44 	vmov.f32	s23, s8
 80289c8:	eeb0 ba64 	vmov.f32	s22, s9
 80289cc:	eef0 aa45 	vmov.f32	s21, s10
 80289d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80289d2:	2b00      	cmp	r3, #0
 80289d4:	dc03      	bgt.n	80289de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80289d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80289d8:	2b00      	cmp	r3, #0
 80289da:	f340 8389 	ble.w	80290f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x770>
 80289de:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80289e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80289e4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80289e8:	1e48      	subs	r0, r1, #1
 80289ea:	1e57      	subs	r7, r2, #1
 80289ec:	9b07      	ldr	r3, [sp, #28]
 80289ee:	2b00      	cmp	r3, #0
 80289f0:	f340 818b 	ble.w	8028d0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80289f4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80289f8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80289fc:	d406      	bmi.n	8028a0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80289fe:	4584      	cmp	ip, r0
 8028a00:	da04      	bge.n	8028a0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8028a02:	2b00      	cmp	r3, #0
 8028a04:	db02      	blt.n	8028a0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8028a06:	42bb      	cmp	r3, r7
 8028a08:	f2c0 8180 	blt.w	8028d0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8028a0c:	f11c 0c01 	adds.w	ip, ip, #1
 8028a10:	f100 8170 	bmi.w	8028cf4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028a14:	4561      	cmp	r1, ip
 8028a16:	f2c0 816d 	blt.w	8028cf4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028a1a:	3301      	adds	r3, #1
 8028a1c:	f100 816a 	bmi.w	8028cf4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028a20:	429a      	cmp	r2, r3
 8028a22:	f2c0 8167 	blt.w	8028cf4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028a26:	9b07      	ldr	r3, [sp, #28]
 8028a28:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8028a2a:	9317      	str	r3, [sp, #92]	; 0x5c
 8028a2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028a2e:	2b00      	cmp	r3, #0
 8028a30:	f340 8189 	ble.w	8028d46 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8028a34:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8028a36:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8028a38:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8028a3c:	689b      	ldr	r3, [r3, #8]
 8028a3e:	1422      	asrs	r2, r4, #16
 8028a40:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028a44:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028a48:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028a4c:	f100 81d4 	bmi.w	8028df8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8028a50:	f103 38ff 	add.w	r8, r3, #4294967295
 8028a54:	4542      	cmp	r2, r8
 8028a56:	f280 81cf 	bge.w	8028df8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8028a5a:	f1bc 0f00 	cmp.w	ip, #0
 8028a5e:	f2c0 81cb 	blt.w	8028df8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8028a62:	f10e 38ff 	add.w	r8, lr, #4294967295
 8028a66:	45c4      	cmp	ip, r8
 8028a68:	f280 81c6 	bge.w	8028df8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8028a6c:	b21b      	sxth	r3, r3
 8028a6e:	fb0c 2203 	mla	r2, ip, r3, r2
 8028a72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028a74:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8028a78:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028a7c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028a80:	2900      	cmp	r1, #0
 8028a82:	f000 81a6 	beq.w	8028dd2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028a86:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028a8a:	950b      	str	r5, [sp, #44]	; 0x2c
 8028a8c:	0e2d      	lsrs	r5, r5, #24
 8028a8e:	9512      	str	r5, [sp, #72]	; 0x48
 8028a90:	b180      	cbz	r0, 8028ab4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8028a92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8028a96:	3b01      	subs	r3, #1
 8028a98:	009b      	lsls	r3, r3, #2
 8028a9a:	3304      	adds	r3, #4
 8028a9c:	eb08 0c03 	add.w	ip, r8, r3
 8028aa0:	f858 3003 	ldr.w	r3, [r8, r3]
 8028aa4:	9308      	str	r3, [sp, #32]
 8028aa6:	0e1b      	lsrs	r3, r3, #24
 8028aa8:	9310      	str	r3, [sp, #64]	; 0x40
 8028aaa:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028aae:	930c      	str	r3, [sp, #48]	; 0x30
 8028ab0:	0e1b      	lsrs	r3, r3, #24
 8028ab2:	9313      	str	r3, [sp, #76]	; 0x4c
 8028ab4:	b289      	uxth	r1, r1
 8028ab6:	b280      	uxth	r0, r0
 8028ab8:	fb01 f900 	mul.w	r9, r1, r0
 8028abc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028ac0:	0109      	lsls	r1, r1, #4
 8028ac2:	eba1 0809 	sub.w	r8, r1, r9
 8028ac6:	b280      	uxth	r0, r0
 8028ac8:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8028acc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028ace:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028ad0:	fa1f f888 	uxth.w	r8, r8
 8028ad4:	1a09      	subs	r1, r1, r0
 8028ad6:	b289      	uxth	r1, r1
 8028ad8:	fb08 f303 	mul.w	r3, r8, r3
 8028adc:	fb01 330e 	mla	r3, r1, lr, r3
 8028ae0:	fb00 3305 	mla	r3, r0, r5, r3
 8028ae4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028ae6:	fb09 3305 	mla	r3, r9, r5, r3
 8028aea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028aee:	2b00      	cmp	r3, #0
 8028af0:	f000 80f7 	beq.w	8028ce2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028af4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028af8:	d01b      	beq.n	8028b32 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8028afa:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8028afe:	fb0e fa0a 	mul.w	sl, lr, sl
 8028b02:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028b06:	fb0e fe02 	mul.w	lr, lr, r2
 8028b0a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028b0e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028b12:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028b16:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8028b1a:	4452      	add	r2, sl
 8028b1c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028b20:	0a12      	lsrs	r2, r2, #8
 8028b22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028b26:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028b2a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028b2e:	ea42 020c 	orr.w	r2, r2, ip
 8028b32:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028b34:	2dff      	cmp	r5, #255	; 0xff
 8028b36:	d021      	beq.n	8028b7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8028b38:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028b3a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028b3e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028b40:	fb05 fb0b 	mul.w	fp, r5, fp
 8028b44:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028b46:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028b4a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028b4c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028b50:	fb05 fa0a 	mul.w	sl, r5, sl
 8028b54:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028b58:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028b5c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028b60:	44de      	add	lr, fp
 8028b62:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028b66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028b6a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028b6e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028b72:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028b76:	ea4e 050a 	orr.w	r5, lr, sl
 8028b7a:	950b      	str	r5, [sp, #44]	; 0x2c
 8028b7c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028b7e:	2dff      	cmp	r5, #255	; 0xff
 8028b80:	d021      	beq.n	8028bc6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028b82:	9d08      	ldr	r5, [sp, #32]
 8028b84:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028b88:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028b8a:	fb05 fb0b 	mul.w	fp, r5, fp
 8028b8e:	9d08      	ldr	r5, [sp, #32]
 8028b90:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028b94:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028b96:	fb05 fa0e 	mul.w	sl, r5, lr
 8028b9a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028b9e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028ba2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028ba6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028baa:	44de      	add	lr, fp
 8028bac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028bb0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028bb4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028bb8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028bbc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028bc0:	ea4e 050a 	orr.w	r5, lr, sl
 8028bc4:	9508      	str	r5, [sp, #32]
 8028bc6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028bc8:	2dff      	cmp	r5, #255	; 0xff
 8028bca:	d021      	beq.n	8028c10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8028bcc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028bce:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028bd2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028bd4:	fb05 fb0b 	mul.w	fp, r5, fp
 8028bd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028bda:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028bde:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028be0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028be4:	fb05 fa0a 	mul.w	sl, r5, sl
 8028be8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028bec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028bf0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028bf4:	44de      	add	lr, fp
 8028bf6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028bfa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028bfe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028c02:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028c06:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028c0a:	ea4e 050a 	orr.w	r5, lr, sl
 8028c0e:	950c      	str	r5, [sp, #48]	; 0x30
 8028c10:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028c12:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028c16:	9d08      	ldr	r5, [sp, #32]
 8028c18:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028c1c:	fb08 fc0c 	mul.w	ip, r8, ip
 8028c20:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028c24:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028c28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028c2a:	fb00 cc0e 	mla	ip, r0, lr, ip
 8028c2e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028c32:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028c34:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028c38:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028c3c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028c40:	fb08 f80e 	mul.w	r8, r8, lr
 8028c44:	fb01 8202 	mla	r2, r1, r2, r8
 8028c48:	9908      	ldr	r1, [sp, #32]
 8028c4a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8028c4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028c50:	fb00 220a 	mla	r2, r0, sl, r2
 8028c54:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8028c58:	fb09 2900 	mla	r9, r9, r0, r2
 8028c5c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028c60:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028c64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028c68:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028c6c:	ea4c 0c09 	orr.w	ip, ip, r9
 8028c70:	2bff      	cmp	r3, #255	; 0xff
 8028c72:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8028c76:	f000 80b5 	beq.w	8028de4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8028c7a:	8839      	ldrh	r1, [r7, #0]
 8028c7c:	43db      	mvns	r3, r3
 8028c7e:	ea4f 2821 	mov.w	r8, r1, asr #8
 8028c82:	fa5f f983 	uxtb.w	r9, r3
 8028c86:	10ca      	asrs	r2, r1, #3
 8028c88:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8028c8c:	fb08 f809 	mul.w	r8, r8, r9
 8028c90:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028c94:	fb02 fe09 	mul.w	lr, r2, r9
 8028c98:	f108 0201 	add.w	r2, r8, #1
 8028c9c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8028ca0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8028ca4:	00cb      	lsls	r3, r1, #3
 8028ca6:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 8028caa:	4961      	ldr	r1, [pc, #388]	; (8028e30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8028cac:	b2d2      	uxtb	r2, r2
 8028cae:	ea01 2102 	and.w	r1, r1, r2, lsl #8
 8028cb2:	f10e 0201 	add.w	r2, lr, #1
 8028cb6:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8028cba:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8028cbe:	b2db      	uxtb	r3, r3
 8028cc0:	00d2      	lsls	r2, r2, #3
 8028cc2:	fb03 f309 	mul.w	r3, r3, r9
 8028cc6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028cca:	430a      	orrs	r2, r1
 8028ccc:	1c59      	adds	r1, r3, #1
 8028cce:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028cd2:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8028cd6:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8028cda:	ea42 0c0c 	orr.w	ip, r2, ip
 8028cde:	f8a7 c000 	strh.w	ip, [r7]
 8028ce2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8028ce4:	441c      	add	r4, r3
 8028ce6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028ce8:	441e      	add	r6, r3
 8028cea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028cec:	3b01      	subs	r3, #1
 8028cee:	3702      	adds	r7, #2
 8028cf0:	9317      	str	r3, [sp, #92]	; 0x5c
 8028cf2:	e69b      	b.n	8028a2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8028cf4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8028cf6:	441c      	add	r4, r3
 8028cf8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028cfa:	441e      	add	r6, r3
 8028cfc:	9b07      	ldr	r3, [sp, #28]
 8028cfe:	3b01      	subs	r3, #1
 8028d00:	9307      	str	r3, [sp, #28]
 8028d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028d04:	3302      	adds	r3, #2
 8028d06:	930a      	str	r3, [sp, #40]	; 0x28
 8028d08:	e670      	b.n	80289ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028d0a:	d023      	beq.n	8028d54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8028d0c:	9b07      	ldr	r3, [sp, #28]
 8028d0e:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8028d10:	3b01      	subs	r3, #1
 8028d12:	fb00 4003 	mla	r0, r0, r3, r4
 8028d16:	1400      	asrs	r0, r0, #16
 8028d18:	f53f ae85 	bmi.w	8028a26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028d1c:	3901      	subs	r1, #1
 8028d1e:	4288      	cmp	r0, r1
 8028d20:	f6bf ae81 	bge.w	8028a26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028d24:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8028d26:	fb01 6303 	mla	r3, r1, r3, r6
 8028d2a:	141b      	asrs	r3, r3, #16
 8028d2c:	f53f ae7b 	bmi.w	8028a26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028d30:	3a01      	subs	r2, #1
 8028d32:	4293      	cmp	r3, r2
 8028d34:	f6bf ae77 	bge.w	8028a26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028d38:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028d3c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8028d40:	f1bb 0f00 	cmp.w	fp, #0
 8028d44:	dc76      	bgt.n	8028e34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8028d46:	9b07      	ldr	r3, [sp, #28]
 8028d48:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028d4e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028d52:	930a      	str	r3, [sp, #40]	; 0x28
 8028d54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028d56:	2b00      	cmp	r3, #0
 8028d58:	f340 81ca 	ble.w	80290f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x770>
 8028d5c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028d60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028d64:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028d68:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028d6a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028d6e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028d72:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028d76:	eef0 6a48 	vmov.f32	s13, s16
 8028d7a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028d7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028d82:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028d86:	ee16 4a90 	vmov	r4, s13
 8028d8a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028d8e:	eef0 6a68 	vmov.f32	s13, s17
 8028d92:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028d96:	ee18 2a10 	vmov	r2, s16
 8028d9a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028d9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028da2:	ee18 2a90 	vmov	r2, s17
 8028da6:	932f      	str	r3, [sp, #188]	; 0xbc
 8028da8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028daa:	fb92 f3f3 	sdiv	r3, r2, r3
 8028dae:	9330      	str	r3, [sp, #192]	; 0xc0
 8028db0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028db2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8028db4:	3b01      	subs	r3, #1
 8028db6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028dba:	9316      	str	r3, [sp, #88]	; 0x58
 8028dbc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028dbe:	bf08      	it	eq
 8028dc0:	4613      	moveq	r3, r2
 8028dc2:	ee16 6a90 	vmov	r6, s13
 8028dc6:	9307      	str	r3, [sp, #28]
 8028dc8:	eef0 8a67 	vmov.f32	s17, s15
 8028dcc:	eeb0 8a47 	vmov.f32	s16, s14
 8028dd0:	e5fe      	b.n	80289d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8028dd2:	2800      	cmp	r0, #0
 8028dd4:	f43f ae6e 	beq.w	8028ab4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8028dd8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028ddc:	9308      	str	r3, [sp, #32]
 8028dde:	0e1b      	lsrs	r3, r3, #24
 8028de0:	9310      	str	r3, [sp, #64]	; 0x40
 8028de2:	e667      	b.n	8028ab4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8028de4:	ea4f 125c 	mov.w	r2, ip, lsr #5
 8028de8:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8028dec:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 8028df0:	f022 0207 	bic.w	r2, r2, #7
 8028df4:	431a      	orrs	r2, r3
 8028df6:	e76e      	b.n	8028cd6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028df8:	f112 0801 	adds.w	r8, r2, #1
 8028dfc:	f53f af71 	bmi.w	8028ce2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028e00:	4543      	cmp	r3, r8
 8028e02:	f6ff af6e 	blt.w	8028ce2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028e06:	f11c 0801 	adds.w	r8, ip, #1
 8028e0a:	f53f af6a 	bmi.w	8028ce2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028e0e:	45c6      	cmp	lr, r8
 8028e10:	f6ff af67 	blt.w	8028ce2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028e14:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8028e18:	fa0f f28e 	sxth.w	r2, lr
 8028e1c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8028e20:	9200      	str	r2, [sp, #0]
 8028e22:	b21b      	sxth	r3, r3
 8028e24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028e26:	9819      	ldr	r0, [sp, #100]	; 0x64
 8028e28:	4639      	mov	r1, r7
 8028e2a:	f7ff fc59 	bl	80286e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8028e2e:	e758      	b.n	8028ce2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028e30:	fffff800 	.word	0xfffff800
 8028e34:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8028e36:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028e38:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8028e3c:	1421      	asrs	r1, r4, #16
 8028e3e:	1433      	asrs	r3, r6, #16
 8028e40:	fb07 1303 	mla	r3, r7, r3, r1
 8028e44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028e46:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8028e4a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028e4e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028e52:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028e56:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028e5a:	2a00      	cmp	r2, #0
 8028e5c:	f000 8131 	beq.w	80290c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 8028e60:	684d      	ldr	r5, [r1, #4]
 8028e62:	950d      	str	r5, [sp, #52]	; 0x34
 8028e64:	0e2d      	lsrs	r5, r5, #24
 8028e66:	9514      	str	r5, [sp, #80]	; 0x50
 8028e68:	b178      	cbz	r0, 8028e8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8028e6a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8028e6e:	3f01      	subs	r7, #1
 8028e70:	00bf      	lsls	r7, r7, #2
 8028e72:	3704      	adds	r7, #4
 8028e74:	eb01 0e07 	add.w	lr, r1, r7
 8028e78:	59c9      	ldr	r1, [r1, r7]
 8028e7a:	9109      	str	r1, [sp, #36]	; 0x24
 8028e7c:	0e09      	lsrs	r1, r1, #24
 8028e7e:	9111      	str	r1, [sp, #68]	; 0x44
 8028e80:	f8de 1004 	ldr.w	r1, [lr, #4]
 8028e84:	910e      	str	r1, [sp, #56]	; 0x38
 8028e86:	0e09      	lsrs	r1, r1, #24
 8028e88:	9115      	str	r1, [sp, #84]	; 0x54
 8028e8a:	b292      	uxth	r2, r2
 8028e8c:	b280      	uxth	r0, r0
 8028e8e:	fb02 f900 	mul.w	r9, r2, r0
 8028e92:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028e96:	0112      	lsls	r2, r2, #4
 8028e98:	eba2 0e09 	sub.w	lr, r2, r9
 8028e9c:	b280      	uxth	r0, r0
 8028e9e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8028ea2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028ea4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028ea6:	fa1f fe8e 	uxth.w	lr, lr
 8028eaa:	1a09      	subs	r1, r1, r0
 8028eac:	b289      	uxth	r1, r1
 8028eae:	fb0e f202 	mul.w	r2, lr, r2
 8028eb2:	fb01 220c 	mla	r2, r1, ip, r2
 8028eb6:	fb00 2205 	mla	r2, r0, r5, r2
 8028eba:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028ebc:	fb09 2205 	mla	r2, r9, r5, r2
 8028ec0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028ec4:	2a00      	cmp	r2, #0
 8028ec6:	f000 80f3 	beq.w	80290b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8028eca:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028ece:	d019      	beq.n	8028f04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8028ed0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8028ed4:	fb0c fa0a 	mul.w	sl, ip, sl
 8028ed8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028edc:	fb0c fc03 	mul.w	ip, ip, r3
 8028ee0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028ee4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028ee8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028eec:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8028ef0:	4453      	add	r3, sl
 8028ef2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028ef6:	0a1b      	lsrs	r3, r3, #8
 8028ef8:	0a3f      	lsrs	r7, r7, #8
 8028efa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028efe:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028f02:	433b      	orrs	r3, r7
 8028f04:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028f06:	2dff      	cmp	r5, #255	; 0xff
 8028f08:	d020      	beq.n	8028f4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8028f0a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028f0c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028f10:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028f12:	436f      	muls	r7, r5
 8028f14:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028f16:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028f1a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028f1c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028f20:	fb05 fa0a 	mul.w	sl, r5, sl
 8028f24:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028f28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028f2c:	44bc      	add	ip, r7
 8028f2e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028f32:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028f36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028f3a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028f3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028f42:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028f46:	ea4c 050a 	orr.w	r5, ip, sl
 8028f4a:	950d      	str	r5, [sp, #52]	; 0x34
 8028f4c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028f4e:	2dff      	cmp	r5, #255	; 0xff
 8028f50:	d020      	beq.n	8028f94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8028f52:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028f54:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028f58:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028f5a:	436f      	muls	r7, r5
 8028f5c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028f5e:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028f62:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028f64:	fb05 fa0c 	mul.w	sl, r5, ip
 8028f68:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028f6c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028f70:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028f74:	44bc      	add	ip, r7
 8028f76:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028f7a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028f7e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028f82:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028f86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028f8a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028f8e:	ea4c 050a 	orr.w	r5, ip, sl
 8028f92:	9509      	str	r5, [sp, #36]	; 0x24
 8028f94:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028f96:	2dff      	cmp	r5, #255	; 0xff
 8028f98:	d020      	beq.n	8028fdc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65c>
 8028f9a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028f9c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028fa0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028fa2:	436f      	muls	r7, r5
 8028fa4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028fa6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028faa:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028fac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028fb0:	fb05 fa0a 	mul.w	sl, r5, sl
 8028fb4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028fb8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028fbc:	44bc      	add	ip, r7
 8028fbe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028fc2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028fc6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028fca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028fce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028fd2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028fd6:	ea4c 050a 	orr.w	r5, ip, sl
 8028fda:	950e      	str	r5, [sp, #56]	; 0x38
 8028fdc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028fde:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028fe2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028fe4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028fe8:	fb0e f707 	mul.w	r7, lr, r7
 8028fec:	fb01 770c 	mla	r7, r1, ip, r7
 8028ff0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028ff4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028ff6:	fb00 770c 	mla	r7, r0, ip, r7
 8028ffa:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028ffe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029000:	fb09 770c 	mla	r7, r9, ip, r7
 8029004:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029008:	fb0e fe0c 	mul.w	lr, lr, ip
 802900c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029010:	fb01 e303 	mla	r3, r1, r3, lr
 8029014:	9909      	ldr	r1, [sp, #36]	; 0x24
 8029016:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802901a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802901c:	fb00 330a 	mla	r3, r0, sl, r3
 8029020:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8029024:	fb09 3c0c 	mla	ip, r9, ip, r3
 8029028:	0a3f      	lsrs	r7, r7, #8
 802902a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802902e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8029032:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8029036:	ea47 070c 	orr.w	r7, r7, ip
 802903a:	2aff      	cmp	r2, #255	; 0xff
 802903c:	ea4f 2017 	mov.w	r0, r7, lsr #8
 8029040:	d048      	beq.n	80290d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8029042:	f8b8 1000 	ldrh.w	r1, [r8]
 8029046:	43d2      	mvns	r2, r2
 8029048:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802904c:	fa5f f982 	uxtb.w	r9, r2
 8029050:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8029054:	fb0e fe09 	mul.w	lr, lr, r9
 8029058:	f10e 0301 	add.w	r3, lr, #1
 802905c:	ea4f 0ce1 	mov.w	ip, r1, asr #3
 8029060:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8029064:	0c3b      	lsrs	r3, r7, #16
 8029066:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 802906a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802906e:	4b23      	ldr	r3, [pc, #140]	; (80290fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>)
 8029070:	fb0c fc09 	mul.w	ip, ip, r9
 8029074:	00ca      	lsls	r2, r1, #3
 8029076:	fa5f fe8e 	uxtb.w	lr, lr
 802907a:	ea03 2e0e 	and.w	lr, r3, lr, lsl #8
 802907e:	b2d2      	uxtb	r2, r2
 8029080:	f10c 0301 	add.w	r3, ip, #1
 8029084:	fb02 f209 	mul.w	r2, r2, r9
 8029088:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802908c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8029090:	1c51      	adds	r1, r2, #1
 8029092:	00db      	lsls	r3, r3, #3
 8029094:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029098:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802909c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80290a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80290a4:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80290a8:	ea47 0e0e 	orr.w	lr, r7, lr
 80290ac:	f8a8 e000 	strh.w	lr, [r8]
 80290b0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80290b2:	441c      	add	r4, r3
 80290b4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80290b6:	f108 0802 	add.w	r8, r8, #2
 80290ba:	441e      	add	r6, r3
 80290bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80290c0:	e63e      	b.n	8028d40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80290c2:	2800      	cmp	r0, #0
 80290c4:	f43f aee1 	beq.w	8028e8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 80290c8:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80290cc:	9109      	str	r1, [sp, #36]	; 0x24
 80290ce:	0e09      	lsrs	r1, r1, #24
 80290d0:	9111      	str	r1, [sp, #68]	; 0x44
 80290d2:	e6da      	b.n	8028e8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 80290d4:	097a      	lsrs	r2, r7, #5
 80290d6:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80290da:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80290de:	f020 0007 	bic.w	r0, r0, #7
 80290e2:	4310      	orrs	r0, r2
 80290e4:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80290e8:	4307      	orrs	r7, r0
 80290ea:	f8a8 7000 	strh.w	r7, [r8]
 80290ee:	e7df      	b.n	80290b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80290f0:	b01b      	add	sp, #108	; 0x6c
 80290f2:	ecbd 8b08 	vpop	{d8-d11}
 80290f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80290fa:	bf00      	nop
 80290fc:	fffff800 	.word	0xfffff800

08029100 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8029100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029104:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8029108:	2c00      	cmp	r4, #0
 802910a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802910e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8029112:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8029116:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802911a:	fb04 ce03 	mla	lr, r4, r3, ip
 802911e:	db60      	blt.n	80291e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8029120:	45a1      	cmp	r9, r4
 8029122:	dd5e      	ble.n	80291e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8029124:	f1bc 0f00 	cmp.w	ip, #0
 8029128:	db59      	blt.n	80291de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802912a:	45e0      	cmp	r8, ip
 802912c:	dd57      	ble.n	80291de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802912e:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8029132:	f01e 0f01 	tst.w	lr, #1
 8029136:	5c16      	ldrb	r6, [r2, r0]
 8029138:	bf0c      	ite	eq
 802913a:	f006 060f 	andeq.w	r6, r6, #15
 802913e:	1136      	asrne	r6, r6, #4
 8029140:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029144:	b2f6      	uxtb	r6, r6
 8029146:	f11c 0001 	adds.w	r0, ip, #1
 802914a:	d44d      	bmi.n	80291e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802914c:	4580      	cmp	r8, r0
 802914e:	dd4b      	ble.n	80291e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8029150:	2d00      	cmp	r5, #0
 8029152:	d04b      	beq.n	80291ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8029154:	f10e 0a01 	add.w	sl, lr, #1
 8029158:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802915c:	f01a 0f01 	tst.w	sl, #1
 8029160:	5c10      	ldrb	r0, [r2, r0]
 8029162:	bf0c      	ite	eq
 8029164:	f000 000f 	andeq.w	r0, r0, #15
 8029168:	1100      	asrne	r0, r0, #4
 802916a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802916e:	b2c0      	uxtb	r0, r0
 8029170:	3401      	adds	r4, #1
 8029172:	d43f      	bmi.n	80291f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8029174:	45a1      	cmp	r9, r4
 8029176:	dd3d      	ble.n	80291f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8029178:	2f00      	cmp	r7, #0
 802917a:	f000 809b 	beq.w	80292b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b4>
 802917e:	f1bc 0f00 	cmp.w	ip, #0
 8029182:	db35      	blt.n	80291f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8029184:	45e0      	cmp	r8, ip
 8029186:	dd33      	ble.n	80291f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8029188:	eb03 090e 	add.w	r9, r3, lr
 802918c:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8029190:	f019 0f01 	tst.w	r9, #1
 8029194:	5d14      	ldrb	r4, [r2, r4]
 8029196:	bf0c      	ite	eq
 8029198:	f004 040f 	andeq.w	r4, r4, #15
 802919c:	1124      	asrne	r4, r4, #4
 802919e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80291a2:	b2e4      	uxtb	r4, r4
 80291a4:	f11c 0c01 	adds.w	ip, ip, #1
 80291a8:	d427      	bmi.n	80291fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 80291aa:	45e0      	cmp	r8, ip
 80291ac:	dd25      	ble.n	80291fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 80291ae:	b335      	cbz	r5, 80291fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 80291b0:	3301      	adds	r3, #1
 80291b2:	449e      	add	lr, r3
 80291b4:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80291b8:	f01e 0f01 	tst.w	lr, #1
 80291bc:	5cd2      	ldrb	r2, [r2, r3]
 80291be:	bf0c      	ite	eq
 80291c0:	f002 020f 	andeq.w	r2, r2, #15
 80291c4:	1112      	asrne	r2, r2, #4
 80291c6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80291ca:	b2d3      	uxtb	r3, r2
 80291cc:	2d0f      	cmp	r5, #15
 80291ce:	d917      	bls.n	8029200 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 80291d0:	4b3b      	ldr	r3, [pc, #236]	; (80292c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c0>)
 80291d2:	4a3c      	ldr	r2, [pc, #240]	; (80292c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
 80291d4:	483c      	ldr	r0, [pc, #240]	; (80292c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 80291d6:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80291da:	f003 fa85 	bl	802c6e8 <__assert_func>
 80291de:	2600      	movs	r6, #0
 80291e0:	e7b1      	b.n	8029146 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 80291e2:	2000      	movs	r0, #0
 80291e4:	4606      	mov	r6, r0
 80291e6:	e7c3      	b.n	8029170 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80291e8:	2000      	movs	r0, #0
 80291ea:	e7c1      	b.n	8029170 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80291ec:	4628      	mov	r0, r5
 80291ee:	e7bf      	b.n	8029170 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80291f0:	2400      	movs	r4, #0
 80291f2:	e7d7      	b.n	80291a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 80291f4:	2300      	movs	r3, #0
 80291f6:	461c      	mov	r4, r3
 80291f8:	e7e8      	b.n	80291cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 80291fa:	2300      	movs	r3, #0
 80291fc:	e7e6      	b.n	80291cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 80291fe:	462b      	mov	r3, r5
 8029200:	2f0f      	cmp	r7, #15
 8029202:	d8e5      	bhi.n	80291d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8029204:	b2ad      	uxth	r5, r5
 8029206:	b2bf      	uxth	r7, r7
 8029208:	fb05 fc07 	mul.w	ip, r5, r7
 802920c:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8029210:	012d      	lsls	r5, r5, #4
 8029212:	b2bf      	uxth	r7, r7
 8029214:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8029218:	eba5 050c 	sub.w	r5, r5, ip
 802921c:	1bd2      	subs	r2, r2, r7
 802921e:	b2ad      	uxth	r5, r5
 8029220:	b292      	uxth	r2, r2
 8029222:	4368      	muls	r0, r5
 8029224:	fb06 0002 	mla	r0, r6, r2, r0
 8029228:	fb07 0404 	mla	r4, r7, r4, r0
 802922c:	fb0c 4303 	mla	r3, ip, r3, r4
 8029230:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029234:	2b00      	cmp	r3, #0
 8029236:	d03b      	beq.n	80292b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b0>
 8029238:	4a24      	ldr	r2, [pc, #144]	; (80292cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802923a:	880e      	ldrh	r6, [r1, #0]
 802923c:	6815      	ldr	r5, [r2, #0]
 802923e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8029242:	435a      	muls	r2, r3
 8029244:	1c53      	adds	r3, r2, #1
 8029246:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802924a:	121b      	asrs	r3, r3, #8
 802924c:	b29a      	uxth	r2, r3
 802924e:	1234      	asrs	r4, r6, #8
 8029250:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8029254:	43db      	mvns	r3, r3
 8029256:	b2db      	uxtb	r3, r3
 8029258:	fb10 f002 	smulbb	r0, r0, r2
 802925c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8029260:	fb04 0403 	mla	r4, r4, r3, r0
 8029264:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8029268:	10f0      	asrs	r0, r6, #3
 802926a:	b2ed      	uxtb	r5, r5
 802926c:	00f6      	lsls	r6, r6, #3
 802926e:	fb17 f702 	smulbb	r7, r7, r2
 8029272:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029276:	fb15 f202 	smulbb	r2, r5, r2
 802927a:	b2f6      	uxtb	r6, r6
 802927c:	b2a4      	uxth	r4, r4
 802927e:	fb00 7003 	mla	r0, r0, r3, r7
 8029282:	fb06 2303 	mla	r3, r6, r3, r2
 8029286:	b29a      	uxth	r2, r3
 8029288:	1c63      	adds	r3, r4, #1
 802928a:	b280      	uxth	r0, r0
 802928c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029290:	1c53      	adds	r3, r2, #1
 8029292:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029296:	1c42      	adds	r2, r0, #1
 8029298:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802929c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80292a0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80292a4:	0940      	lsrs	r0, r0, #5
 80292a6:	4323      	orrs	r3, r4
 80292a8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80292ac:	4303      	orrs	r3, r0
 80292ae:	800b      	strh	r3, [r1, #0]
 80292b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80292b4:	2d0f      	cmp	r5, #15
 80292b6:	d88b      	bhi.n	80291d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 80292b8:	463b      	mov	r3, r7
 80292ba:	463c      	mov	r4, r7
 80292bc:	e7a2      	b.n	8029204 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 80292be:	bf00      	nop
 80292c0:	08031c31 	.word	0x08031c31
 80292c4:	080321fa 	.word	0x080321fa
 80292c8:	08031cb5 	.word	0x08031cb5
 80292cc:	200067d8 	.word	0x200067d8

080292d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80292d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80292d4:	ed2d 8b08 	vpush	{d8-d11}
 80292d8:	b097      	sub	sp, #92	; 0x5c
 80292da:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 80292de:	9214      	str	r2, [sp, #80]	; 0x50
 80292e0:	9309      	str	r3, [sp, #36]	; 0x24
 80292e2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80292e4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80292e8:	910e      	str	r1, [sp, #56]	; 0x38
 80292ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80292ec:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80292f0:	9015      	str	r0, [sp, #84]	; 0x54
 80292f2:	6850      	ldr	r0, [r2, #4]
 80292f4:	6812      	ldr	r2, [r2, #0]
 80292f6:	fb00 1303 	mla	r3, r0, r3, r1
 80292fa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80292fe:	930a      	str	r3, [sp, #40]	; 0x28
 8029300:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8029302:	689b      	ldr	r3, [r3, #8]
 8029304:	3301      	adds	r3, #1
 8029306:	f023 0301 	bic.w	r3, r3, #1
 802930a:	930b      	str	r3, [sp, #44]	; 0x2c
 802930c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802930e:	681f      	ldr	r7, [r3, #0]
 8029310:	eeb0 aa40 	vmov.f32	s20, s0
 8029314:	eef0 9a60 	vmov.f32	s19, s1
 8029318:	eeb0 9a41 	vmov.f32	s18, s2
 802931c:	eeb0 8a62 	vmov.f32	s16, s5
 8029320:	eef0 8a43 	vmov.f32	s17, s6
 8029324:	eef0 ba44 	vmov.f32	s23, s8
 8029328:	eeb0 ba64 	vmov.f32	s22, s9
 802932c:	eef0 aa45 	vmov.f32	s21, s10
 8029330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029332:	2b00      	cmp	r3, #0
 8029334:	dc03      	bgt.n	802933e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8029336:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8029338:	2b00      	cmp	r3, #0
 802933a:	f340 8257 	ble.w	80297ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 802933e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8029340:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029344:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029348:	1e48      	subs	r0, r1, #1
 802934a:	f102 3cff 	add.w	ip, r2, #4294967295
 802934e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029350:	2b00      	cmp	r3, #0
 8029352:	f340 80eb 	ble.w	802952c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8029356:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802935a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802935e:	d406      	bmi.n	802936e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8029360:	4586      	cmp	lr, r0
 8029362:	da04      	bge.n	802936e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8029364:	2b00      	cmp	r3, #0
 8029366:	db02      	blt.n	802936e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8029368:	4563      	cmp	r3, ip
 802936a:	f2c0 80e0 	blt.w	802952e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 802936e:	f11e 0e01 	adds.w	lr, lr, #1
 8029372:	f100 80d0 	bmi.w	8029516 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8029376:	4571      	cmp	r1, lr
 8029378:	f2c0 80cd 	blt.w	8029516 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802937c:	3301      	adds	r3, #1
 802937e:	f100 80ca 	bmi.w	8029516 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8029382:	429a      	cmp	r2, r3
 8029384:	f2c0 80c7 	blt.w	8029516 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8029388:	e9dd 9809 	ldrd	r9, r8, [sp, #36]	; 0x24
 802938c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8029390:	f1b9 0f00 	cmp.w	r9, #0
 8029394:	f340 80e8 	ble.w	8029568 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8029398:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802939a:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802939e:	1423      	asrs	r3, r4, #16
 80293a0:	ea4f 4026 	mov.w	r0, r6, asr #16
 80293a4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80293a8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80293ac:	f100 8133 	bmi.w	8029616 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80293b0:	f10c 3bff 	add.w	fp, ip, #4294967295
 80293b4:	455b      	cmp	r3, fp
 80293b6:	f280 812e 	bge.w	8029616 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80293ba:	2800      	cmp	r0, #0
 80293bc:	f2c0 812b 	blt.w	8029616 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80293c0:	f10e 3bff 	add.w	fp, lr, #4294967295
 80293c4:	4558      	cmp	r0, fp
 80293c6:	f280 8126 	bge.w	8029616 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80293ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80293cc:	fb00 3305 	mla	r3, r0, r5, r3
 80293d0:	0858      	lsrs	r0, r3, #1
 80293d2:	07dd      	lsls	r5, r3, #31
 80293d4:	f817 c000 	ldrb.w	ip, [r7, r0]
 80293d8:	bf54      	ite	pl
 80293da:	f00c 0c0f 	andpl.w	ip, ip, #15
 80293de:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80293e2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80293e6:	fa5f fc8c 	uxtb.w	ip, ip
 80293ea:	2a00      	cmp	r2, #0
 80293ec:	f000 8102 	beq.w	80295f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80293f0:	1c58      	adds	r0, r3, #1
 80293f2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80293f6:	07c0      	lsls	r0, r0, #31
 80293f8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80293fc:	bf54      	ite	pl
 80293fe:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029402:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029406:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802940a:	fa5f f08e 	uxtb.w	r0, lr
 802940e:	9010      	str	r0, [sp, #64]	; 0x40
 8029410:	b1c9      	cbz	r1, 8029446 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8029412:	4453      	add	r3, sl
 8029414:	0858      	lsrs	r0, r3, #1
 8029416:	07dd      	lsls	r5, r3, #31
 8029418:	5c38      	ldrb	r0, [r7, r0]
 802941a:	bf54      	ite	pl
 802941c:	f000 000f 	andpl.w	r0, r0, #15
 8029420:	1100      	asrmi	r0, r0, #4
 8029422:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029426:	3301      	adds	r3, #1
 8029428:	b2c0      	uxtb	r0, r0
 802942a:	900c      	str	r0, [sp, #48]	; 0x30
 802942c:	0858      	lsrs	r0, r3, #1
 802942e:	07dd      	lsls	r5, r3, #31
 8029430:	f817 e000 	ldrb.w	lr, [r7, r0]
 8029434:	bf54      	ite	pl
 8029436:	f00e 030f 	andpl.w	r3, lr, #15
 802943a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802943e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029442:	b2db      	uxtb	r3, r3
 8029444:	9311      	str	r3, [sp, #68]	; 0x44
 8029446:	b292      	uxth	r2, r2
 8029448:	b289      	uxth	r1, r1
 802944a:	fb02 f301 	mul.w	r3, r2, r1
 802944e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029452:	0112      	lsls	r2, r2, #4
 8029454:	b289      	uxth	r1, r1
 8029456:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802945a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802945c:	1ad2      	subs	r2, r2, r3
 802945e:	1a40      	subs	r0, r0, r1
 8029460:	b292      	uxth	r2, r2
 8029462:	436a      	muls	r2, r5
 8029464:	b280      	uxth	r0, r0
 8029466:	fb0c 2c00 	mla	ip, ip, r0, r2
 802946a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802946c:	fb01 c102 	mla	r1, r1, r2, ip
 8029470:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8029472:	fb03 1302 	mla	r3, r3, r2, r1
 8029476:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802947a:	2b00      	cmp	r3, #0
 802947c:	d042      	beq.n	8029504 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802947e:	4a76      	ldr	r2, [pc, #472]	; (8029658 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>)
 8029480:	f8b8 c000 	ldrh.w	ip, [r8]
 8029484:	6810      	ldr	r0, [r2, #0]
 8029486:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029488:	4353      	muls	r3, r2
 802948a:	1c5a      	adds	r2, r3, #1
 802948c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029490:	121b      	asrs	r3, r3, #8
 8029492:	fa1f fe83 	uxth.w	lr, r3
 8029496:	ea4f 212c 	mov.w	r1, ip, asr #8
 802949a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802949e:	43db      	mvns	r3, r3
 80294a0:	b2db      	uxtb	r3, r3
 80294a2:	fb12 f20e 	smulbb	r2, r2, lr
 80294a6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80294aa:	fb01 2103 	mla	r1, r1, r3, r2
 80294ae:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80294b2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80294b6:	b2c0      	uxtb	r0, r0
 80294b8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80294bc:	fb1b fb0e 	smulbb	fp, fp, lr
 80294c0:	b289      	uxth	r1, r1
 80294c2:	fb10 fe0e 	smulbb	lr, r0, lr
 80294c6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80294ca:	fa5f fc8c 	uxtb.w	ip, ip
 80294ce:	fb02 b203 	mla	r2, r2, r3, fp
 80294d2:	1c48      	adds	r0, r1, #1
 80294d4:	fb0c e303 	mla	r3, ip, r3, lr
 80294d8:	b292      	uxth	r2, r2
 80294da:	b29b      	uxth	r3, r3
 80294dc:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80294e0:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80294e4:	f102 0b01 	add.w	fp, r2, #1
 80294e8:	1c59      	adds	r1, r3, #1
 80294ea:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80294ee:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80294f2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80294f6:	0952      	lsrs	r2, r2, #5
 80294f8:	4301      	orrs	r1, r0
 80294fa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80294fe:	4311      	orrs	r1, r2
 8029500:	f8a8 1000 	strh.w	r1, [r8]
 8029504:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029506:	441c      	add	r4, r3
 8029508:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802950a:	f108 0802 	add.w	r8, r8, #2
 802950e:	441e      	add	r6, r3
 8029510:	f109 39ff 	add.w	r9, r9, #4294967295
 8029514:	e73c      	b.n	8029390 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8029516:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029518:	441c      	add	r4, r3
 802951a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802951c:	441e      	add	r6, r3
 802951e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029520:	3b01      	subs	r3, #1
 8029522:	9309      	str	r3, [sp, #36]	; 0x24
 8029524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029526:	3302      	adds	r3, #2
 8029528:	930a      	str	r3, [sp, #40]	; 0x28
 802952a:	e710      	b.n	802934e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802952c:	d023      	beq.n	8029576 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802952e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029530:	982b      	ldr	r0, [sp, #172]	; 0xac
 8029532:	3b01      	subs	r3, #1
 8029534:	fb00 4003 	mla	r0, r0, r3, r4
 8029538:	1400      	asrs	r0, r0, #16
 802953a:	f53f af25 	bmi.w	8029388 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802953e:	3901      	subs	r1, #1
 8029540:	4288      	cmp	r0, r1
 8029542:	f6bf af21 	bge.w	8029388 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8029546:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8029548:	fb01 6303 	mla	r3, r1, r3, r6
 802954c:	141b      	asrs	r3, r3, #16
 802954e:	f53f af1b 	bmi.w	8029388 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8029552:	3a01      	subs	r2, #1
 8029554:	4293      	cmp	r3, r2
 8029556:	f6bf af17 	bge.w	8029388 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802955a:	e9dd 8e09 	ldrd	r8, lr, [sp, #36]	; 0x24
 802955e:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8029562:	f1b8 0f00 	cmp.w	r8, #0
 8029566:	dc79      	bgt.n	802965c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8029568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802956a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802956e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029570:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029574:	930a      	str	r3, [sp, #40]	; 0x28
 8029576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029578:	2b00      	cmp	r3, #0
 802957a:	f340 8137 	ble.w	80297ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 802957e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029582:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029586:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802958a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802958c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029590:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029594:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029598:	eef0 6a48 	vmov.f32	s13, s16
 802959c:	ee69 7a27 	vmul.f32	s15, s18, s15
 80295a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80295a4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80295a8:	ee16 4a90 	vmov	r4, s13
 80295ac:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80295b0:	eef0 6a68 	vmov.f32	s13, s17
 80295b4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80295b8:	ee18 2a10 	vmov	r2, s16
 80295bc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80295c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80295c4:	ee18 2a90 	vmov	r2, s17
 80295c8:	932b      	str	r3, [sp, #172]	; 0xac
 80295ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80295cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80295d0:	932c      	str	r3, [sp, #176]	; 0xb0
 80295d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80295d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80295d6:	3b01      	subs	r3, #1
 80295d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80295dc:	930e      	str	r3, [sp, #56]	; 0x38
 80295de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80295e0:	bf08      	it	eq
 80295e2:	4613      	moveq	r3, r2
 80295e4:	ee16 6a90 	vmov	r6, s13
 80295e8:	9309      	str	r3, [sp, #36]	; 0x24
 80295ea:	eef0 8a67 	vmov.f32	s17, s15
 80295ee:	eeb0 8a47 	vmov.f32	s16, s14
 80295f2:	e69d      	b.n	8029330 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80295f4:	2900      	cmp	r1, #0
 80295f6:	f43f af26 	beq.w	8029446 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80295fa:	eb0a 0003 	add.w	r0, sl, r3
 80295fe:	0843      	lsrs	r3, r0, #1
 8029600:	07c0      	lsls	r0, r0, #31
 8029602:	5cfb      	ldrb	r3, [r7, r3]
 8029604:	bf54      	ite	pl
 8029606:	f003 030f 	andpl.w	r3, r3, #15
 802960a:	111b      	asrmi	r3, r3, #4
 802960c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029610:	b2db      	uxtb	r3, r3
 8029612:	930c      	str	r3, [sp, #48]	; 0x30
 8029614:	e717      	b.n	8029446 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8029616:	f113 0b01 	adds.w	fp, r3, #1
 802961a:	f53f af73 	bmi.w	8029504 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802961e:	45dc      	cmp	ip, fp
 8029620:	f6ff af70 	blt.w	8029504 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8029624:	f110 0b01 	adds.w	fp, r0, #1
 8029628:	f53f af6c 	bmi.w	8029504 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802962c:	45de      	cmp	lr, fp
 802962e:	f6ff af69 	blt.w	8029504 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8029632:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029634:	9302      	str	r3, [sp, #8]
 8029636:	fa0f f38e 	sxth.w	r3, lr
 802963a:	9301      	str	r3, [sp, #4]
 802963c:	fa0f f38c 	sxth.w	r3, ip
 8029640:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029644:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8029648:	9300      	str	r3, [sp, #0]
 802964a:	463a      	mov	r2, r7
 802964c:	4653      	mov	r3, sl
 802964e:	4641      	mov	r1, r8
 8029650:	9815      	ldr	r0, [sp, #84]	; 0x54
 8029652:	f7ff fd55 	bl	8029100 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8029656:	e755      	b.n	8029504 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8029658:	200067d8 	.word	0x200067d8
 802965c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802965e:	1422      	asrs	r2, r4, #16
 8029660:	1433      	asrs	r3, r6, #16
 8029662:	fb05 2303 	mla	r3, r5, r3, r2
 8029666:	085a      	lsrs	r2, r3, #1
 8029668:	07dd      	lsls	r5, r3, #31
 802966a:	5cba      	ldrb	r2, [r7, r2]
 802966c:	bf54      	ite	pl
 802966e:	f002 020f 	andpl.w	r2, r2, #15
 8029672:	1112      	asrmi	r2, r2, #4
 8029674:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029678:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802967c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029680:	b2d2      	uxtb	r2, r2
 8029682:	2900      	cmp	r1, #0
 8029684:	f000 809f 	beq.w	80297c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f6>
 8029688:	f103 0901 	add.w	r9, r3, #1
 802968c:	ea4f 0c59 	mov.w	ip, r9, lsr #1
 8029690:	f019 0f01 	tst.w	r9, #1
 8029694:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029698:	bf0c      	ite	eq
 802969a:	f00c 0c0f 	andeq.w	ip, ip, #15
 802969e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80296a2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80296a6:	fa5f f58c 	uxtb.w	r5, ip
 80296aa:	9512      	str	r5, [sp, #72]	; 0x48
 80296ac:	b1f8      	cbz	r0, 80296ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41e>
 80296ae:	445b      	add	r3, fp
 80296b0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80296b4:	07dd      	lsls	r5, r3, #31
 80296b6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80296ba:	bf54      	ite	pl
 80296bc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80296c0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80296c4:	3301      	adds	r3, #1
 80296c6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80296ca:	fa5f f58c 	uxtb.w	r5, ip
 80296ce:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80296d2:	950d      	str	r5, [sp, #52]	; 0x34
 80296d4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80296d8:	07dd      	lsls	r5, r3, #31
 80296da:	bf54      	ite	pl
 80296dc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80296e0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80296e4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80296e8:	fa5f f38c 	uxtb.w	r3, ip
 80296ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80296ee:	b289      	uxth	r1, r1
 80296f0:	b280      	uxth	r0, r0
 80296f2:	fb01 f300 	mul.w	r3, r1, r0
 80296f6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80296fa:	0109      	lsls	r1, r1, #4
 80296fc:	b280      	uxth	r0, r0
 80296fe:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8029702:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029704:	1ac9      	subs	r1, r1, r3
 8029706:	ebac 0c00 	sub.w	ip, ip, r0
 802970a:	b289      	uxth	r1, r1
 802970c:	4369      	muls	r1, r5
 802970e:	fa1f fc8c 	uxth.w	ip, ip
 8029712:	fb02 120c 	mla	r2, r2, ip, r1
 8029716:	990d      	ldr	r1, [sp, #52]	; 0x34
 8029718:	fb00 2001 	mla	r0, r0, r1, r2
 802971c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802971e:	fb03 0302 	mla	r3, r3, r2, r0
 8029722:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029726:	2b00      	cmp	r3, #0
 8029728:	d044      	beq.n	80297b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802972a:	4a33      	ldr	r2, [pc, #204]	; (80297f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>)
 802972c:	f8be c000 	ldrh.w	ip, [lr]
 8029730:	6810      	ldr	r0, [r2, #0]
 8029732:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029734:	4353      	muls	r3, r2
 8029736:	1c5a      	adds	r2, r3, #1
 8029738:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802973c:	121b      	asrs	r3, r3, #8
 802973e:	fa1f f983 	uxth.w	r9, r3
 8029742:	ea4f 212c 	mov.w	r1, ip, asr #8
 8029746:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802974a:	43db      	mvns	r3, r3
 802974c:	b2db      	uxtb	r3, r3
 802974e:	fb12 f209 	smulbb	r2, r2, r9
 8029752:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029756:	fb01 2103 	mla	r1, r1, r3, r2
 802975a:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 802975e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8029762:	b2c0      	uxtb	r0, r0
 8029764:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8029768:	fa5f fc8c 	uxtb.w	ip, ip
 802976c:	fb10 f009 	smulbb	r0, r0, r9
 8029770:	fb0c 0003 	mla	r0, ip, r3, r0
 8029774:	b289      	uxth	r1, r1
 8029776:	fb1a fa09 	smulbb	sl, sl, r9
 802977a:	b280      	uxth	r0, r0
 802977c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029780:	fb02 a203 	mla	r2, r2, r3, sl
 8029784:	1c4b      	adds	r3, r1, #1
 8029786:	f100 0a01 	add.w	sl, r0, #1
 802978a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802978e:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8029792:	b292      	uxth	r2, r2
 8029794:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8029798:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802979c:	ea4a 0101 	orr.w	r1, sl, r1
 80297a0:	f102 0a01 	add.w	sl, r2, #1
 80297a4:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 80297a8:	0952      	lsrs	r2, r2, #5
 80297aa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80297ae:	4311      	orrs	r1, r2
 80297b0:	f8ae 1000 	strh.w	r1, [lr]
 80297b4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80297b6:	441c      	add	r4, r3
 80297b8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80297ba:	f10e 0e02 	add.w	lr, lr, #2
 80297be:	441e      	add	r6, r3
 80297c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80297c4:	e6cd      	b.n	8029562 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80297c6:	2800      	cmp	r0, #0
 80297c8:	d091      	beq.n	80296ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41e>
 80297ca:	445b      	add	r3, fp
 80297cc:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80297d0:	07db      	lsls	r3, r3, #31
 80297d2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80297d6:	bf54      	ite	pl
 80297d8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80297dc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80297e0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80297e4:	fa5f f38c 	uxtb.w	r3, ip
 80297e8:	930d      	str	r3, [sp, #52]	; 0x34
 80297ea:	e780      	b.n	80296ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41e>
 80297ec:	b017      	add	sp, #92	; 0x5c
 80297ee:	ecbd 8b08 	vpop	{d8-d11}
 80297f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80297f6:	bf00      	nop
 80297f8:	200067d8 	.word	0x200067d8

080297fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 80297fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029800:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8029804:	2c00      	cmp	r4, #0
 8029806:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802980a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802980e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8029812:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8029816:	fb04 ce03 	mla	lr, r4, r3, ip
 802981a:	db60      	blt.n	80298de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802981c:	45a1      	cmp	r9, r4
 802981e:	dd5e      	ble.n	80298de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8029820:	f1bc 0f00 	cmp.w	ip, #0
 8029824:	db59      	blt.n	80298da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8029826:	45e0      	cmp	r8, ip
 8029828:	dd57      	ble.n	80298da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802982a:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802982e:	f01e 0f01 	tst.w	lr, #1
 8029832:	5c16      	ldrb	r6, [r2, r0]
 8029834:	bf0c      	ite	eq
 8029836:	f006 060f 	andeq.w	r6, r6, #15
 802983a:	1136      	asrne	r6, r6, #4
 802983c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029840:	b2f6      	uxtb	r6, r6
 8029842:	f11c 0001 	adds.w	r0, ip, #1
 8029846:	d44d      	bmi.n	80298e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8029848:	4580      	cmp	r8, r0
 802984a:	dd4b      	ble.n	80298e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802984c:	2d00      	cmp	r5, #0
 802984e:	d04b      	beq.n	80298e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 8029850:	f10e 0a01 	add.w	sl, lr, #1
 8029854:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8029858:	f01a 0f01 	tst.w	sl, #1
 802985c:	5c10      	ldrb	r0, [r2, r0]
 802985e:	bf0c      	ite	eq
 8029860:	f000 000f 	andeq.w	r0, r0, #15
 8029864:	1100      	asrne	r0, r0, #4
 8029866:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802986a:	b2c0      	uxtb	r0, r0
 802986c:	3401      	adds	r4, #1
 802986e:	d43f      	bmi.n	80298f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8029870:	45a1      	cmp	r9, r4
 8029872:	dd3d      	ble.n	80298f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8029874:	2f00      	cmp	r7, #0
 8029876:	f000 8093 	beq.w	80299a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802987a:	f1bc 0f00 	cmp.w	ip, #0
 802987e:	db35      	blt.n	80298ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8029880:	45e0      	cmp	r8, ip
 8029882:	dd33      	ble.n	80298ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8029884:	eb03 090e 	add.w	r9, r3, lr
 8029888:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802988c:	f019 0f01 	tst.w	r9, #1
 8029890:	5d14      	ldrb	r4, [r2, r4]
 8029892:	bf0c      	ite	eq
 8029894:	f004 040f 	andeq.w	r4, r4, #15
 8029898:	1124      	asrne	r4, r4, #4
 802989a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802989e:	b2e4      	uxtb	r4, r4
 80298a0:	f11c 0c01 	adds.w	ip, ip, #1
 80298a4:	d427      	bmi.n	80298f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 80298a6:	45e0      	cmp	r8, ip
 80298a8:	dd25      	ble.n	80298f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 80298aa:	b335      	cbz	r5, 80298fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 80298ac:	3301      	adds	r3, #1
 80298ae:	449e      	add	lr, r3
 80298b0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80298b4:	f01e 0f01 	tst.w	lr, #1
 80298b8:	5cd2      	ldrb	r2, [r2, r3]
 80298ba:	bf0c      	ite	eq
 80298bc:	f002 020f 	andeq.w	r2, r2, #15
 80298c0:	1112      	asrne	r2, r2, #4
 80298c2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80298c6:	b2d3      	uxtb	r3, r2
 80298c8:	2d0f      	cmp	r5, #15
 80298ca:	d917      	bls.n	80298fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 80298cc:	4b37      	ldr	r3, [pc, #220]	; (80299ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 80298ce:	4a38      	ldr	r2, [pc, #224]	; (80299b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 80298d0:	4838      	ldr	r0, [pc, #224]	; (80299b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 80298d2:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80298d6:	f002 ff07 	bl	802c6e8 <__assert_func>
 80298da:	2600      	movs	r6, #0
 80298dc:	e7b1      	b.n	8029842 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 80298de:	2000      	movs	r0, #0
 80298e0:	4606      	mov	r6, r0
 80298e2:	e7c3      	b.n	802986c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 80298e4:	2000      	movs	r0, #0
 80298e6:	e7c1      	b.n	802986c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 80298e8:	4628      	mov	r0, r5
 80298ea:	e7bf      	b.n	802986c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 80298ec:	2400      	movs	r4, #0
 80298ee:	e7d7      	b.n	80298a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 80298f0:	2300      	movs	r3, #0
 80298f2:	461c      	mov	r4, r3
 80298f4:	e7e8      	b.n	80298c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 80298f6:	2300      	movs	r3, #0
 80298f8:	e7e6      	b.n	80298c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 80298fa:	462b      	mov	r3, r5
 80298fc:	2f0f      	cmp	r7, #15
 80298fe:	d8e5      	bhi.n	80298cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8029900:	b2ad      	uxth	r5, r5
 8029902:	b2bf      	uxth	r7, r7
 8029904:	fb05 fc07 	mul.w	ip, r5, r7
 8029908:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802990c:	012d      	lsls	r5, r5, #4
 802990e:	b2bf      	uxth	r7, r7
 8029910:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8029914:	eba5 050c 	sub.w	r5, r5, ip
 8029918:	1bd2      	subs	r2, r2, r7
 802991a:	b2ad      	uxth	r5, r5
 802991c:	b292      	uxth	r2, r2
 802991e:	4368      	muls	r0, r5
 8029920:	fb06 0002 	mla	r0, r6, r2, r0
 8029924:	fb07 0404 	mla	r4, r7, r4, r0
 8029928:	fb0c 4303 	mla	r3, ip, r3, r4
 802992c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029930:	b3a3      	cbz	r3, 802999c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8029932:	4a21      	ldr	r2, [pc, #132]	; (80299b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8029934:	880e      	ldrh	r6, [r1, #0]
 8029936:	6815      	ldr	r5, [r2, #0]
 8029938:	1234      	asrs	r4, r6, #8
 802993a:	b29a      	uxth	r2, r3
 802993c:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8029940:	43db      	mvns	r3, r3
 8029942:	b2db      	uxtb	r3, r3
 8029944:	fb10 f002 	smulbb	r0, r0, r2
 8029948:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802994c:	fb04 0403 	mla	r4, r4, r3, r0
 8029950:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8029954:	10f0      	asrs	r0, r6, #3
 8029956:	b2ed      	uxtb	r5, r5
 8029958:	00f6      	lsls	r6, r6, #3
 802995a:	fb17 f702 	smulbb	r7, r7, r2
 802995e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029962:	fb15 f202 	smulbb	r2, r5, r2
 8029966:	b2f6      	uxtb	r6, r6
 8029968:	b2a4      	uxth	r4, r4
 802996a:	fb00 7003 	mla	r0, r0, r3, r7
 802996e:	fb06 2303 	mla	r3, r6, r3, r2
 8029972:	b29a      	uxth	r2, r3
 8029974:	1c63      	adds	r3, r4, #1
 8029976:	b280      	uxth	r0, r0
 8029978:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802997c:	1c53      	adds	r3, r2, #1
 802997e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029982:	1c42      	adds	r2, r0, #1
 8029984:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029988:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802998c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029990:	0940      	lsrs	r0, r0, #5
 8029992:	4323      	orrs	r3, r4
 8029994:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029998:	4303      	orrs	r3, r0
 802999a:	800b      	strh	r3, [r1, #0]
 802999c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80299a0:	2d0f      	cmp	r5, #15
 80299a2:	d893      	bhi.n	80298cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 80299a4:	463b      	mov	r3, r7
 80299a6:	463c      	mov	r4, r7
 80299a8:	e7aa      	b.n	8029900 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 80299aa:	bf00      	nop
 80299ac:	08031c31 	.word	0x08031c31
 80299b0:	080321fa 	.word	0x080321fa
 80299b4:	08031cb5 	.word	0x08031cb5
 80299b8:	200067d8 	.word	0x200067d8

080299bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80299bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80299c0:	ed2d 8b08 	vpush	{d8-d11}
 80299c4:	b093      	sub	sp, #76	; 0x4c
 80299c6:	461d      	mov	r5, r3
 80299c8:	920c      	str	r2, [sp, #48]	; 0x30
 80299ca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80299cc:	9107      	str	r1, [sp, #28]
 80299ce:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80299d2:	9011      	str	r0, [sp, #68]	; 0x44
 80299d4:	6850      	ldr	r0, [r2, #4]
 80299d6:	6812      	ldr	r2, [r2, #0]
 80299d8:	fb00 1303 	mla	r3, r0, r3, r1
 80299dc:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80299e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80299e2:	689b      	ldr	r3, [r3, #8]
 80299e4:	3301      	adds	r3, #1
 80299e6:	f023 0301 	bic.w	r3, r3, #1
 80299ea:	9306      	str	r3, [sp, #24]
 80299ec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80299ee:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 80299f2:	681f      	ldr	r7, [r3, #0]
 80299f4:	eeb0 aa40 	vmov.f32	s20, s0
 80299f8:	eef0 9a60 	vmov.f32	s19, s1
 80299fc:	eeb0 9a41 	vmov.f32	s18, s2
 8029a00:	eeb0 8a62 	vmov.f32	s16, s5
 8029a04:	eef0 8a43 	vmov.f32	s17, s6
 8029a08:	eef0 ba44 	vmov.f32	s23, s8
 8029a0c:	eeb0 ba64 	vmov.f32	s22, s9
 8029a10:	eef0 aa45 	vmov.f32	s21, s10
 8029a14:	9b07      	ldr	r3, [sp, #28]
 8029a16:	2b00      	cmp	r3, #0
 8029a18:	dc03      	bgt.n	8029a22 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8029a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029a1c:	2b00      	cmp	r3, #0
 8029a1e:	f340 8267 	ble.w	8029ef0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8029a22:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029a24:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029a28:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029a2c:	1e48      	subs	r0, r1, #1
 8029a2e:	f102 3cff 	add.w	ip, r2, #4294967295
 8029a32:	2d00      	cmp	r5, #0
 8029a34:	f340 80eb 	ble.w	8029c0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8029a38:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029a3c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029a40:	d406      	bmi.n	8029a50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8029a42:	4586      	cmp	lr, r0
 8029a44:	da04      	bge.n	8029a50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8029a46:	2b00      	cmp	r3, #0
 8029a48:	db02      	blt.n	8029a50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8029a4a:	4563      	cmp	r3, ip
 8029a4c:	f2c0 80e0 	blt.w	8029c10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8029a50:	f11e 0e01 	adds.w	lr, lr, #1
 8029a54:	f100 80d3 	bmi.w	8029bfe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8029a58:	4571      	cmp	r1, lr
 8029a5a:	f2c0 80d0 	blt.w	8029bfe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8029a5e:	3301      	adds	r3, #1
 8029a60:	f100 80cd 	bmi.w	8029bfe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8029a64:	429a      	cmp	r2, r3
 8029a66:	f2c0 80ca 	blt.w	8029bfe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8029a6a:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8029a6e:	9509      	str	r5, [sp, #36]	; 0x24
 8029a70:	46c8      	mov	r8, r9
 8029a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029a74:	2b00      	cmp	r3, #0
 8029a76:	f340 80e9 	ble.w	8029c4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8029a7a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8029a7e:	9308      	str	r3, [sp, #32]
 8029a80:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029a82:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029a86:	1423      	asrs	r3, r4, #16
 8029a88:	ea4f 4026 	mov.w	r0, r6, asr #16
 8029a8c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029a90:	f100 813d 	bmi.w	8029d0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8029a94:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029a98:	455b      	cmp	r3, fp
 8029a9a:	f280 8138 	bge.w	8029d0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8029a9e:	2800      	cmp	r0, #0
 8029aa0:	f2c0 8135 	blt.w	8029d0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8029aa4:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029aa8:	4558      	cmp	r0, fp
 8029aaa:	f280 8130 	bge.w	8029d0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8029aae:	9a06      	ldr	r2, [sp, #24]
 8029ab0:	fb00 3302 	mla	r3, r0, r2, r3
 8029ab4:	0858      	lsrs	r0, r3, #1
 8029ab6:	07da      	lsls	r2, r3, #31
 8029ab8:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029abc:	9a08      	ldr	r2, [sp, #32]
 8029abe:	bf54      	ite	pl
 8029ac0:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029ac4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029ac8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029acc:	fa5f fc8c 	uxtb.w	ip, ip
 8029ad0:	2a00      	cmp	r2, #0
 8029ad2:	f000 80fe 	beq.w	8029cd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8029ad6:	1c58      	adds	r0, r3, #1
 8029ad8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029adc:	07c0      	lsls	r0, r0, #31
 8029ade:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029ae2:	bf54      	ite	pl
 8029ae4:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029ae8:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029aec:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029af0:	fa5f fe8e 	uxtb.w	lr, lr
 8029af4:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8029af8:	b1b9      	cbz	r1, 8029b2a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8029afa:	4453      	add	r3, sl
 8029afc:	0858      	lsrs	r0, r3, #1
 8029afe:	07da      	lsls	r2, r3, #31
 8029b00:	5c38      	ldrb	r0, [r7, r0]
 8029b02:	bf54      	ite	pl
 8029b04:	f000 000f 	andpl.w	r0, r0, #15
 8029b08:	1100      	asrmi	r0, r0, #4
 8029b0a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029b0e:	b2c0      	uxtb	r0, r0
 8029b10:	900a      	str	r0, [sp, #40]	; 0x28
 8029b12:	1c58      	adds	r0, r3, #1
 8029b14:	0843      	lsrs	r3, r0, #1
 8029b16:	07c2      	lsls	r2, r0, #31
 8029b18:	5cfb      	ldrb	r3, [r7, r3]
 8029b1a:	bf54      	ite	pl
 8029b1c:	f003 030f 	andpl.w	r3, r3, #15
 8029b20:	111b      	asrmi	r3, r3, #4
 8029b22:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029b26:	b2db      	uxtb	r3, r3
 8029b28:	930e      	str	r3, [sp, #56]	; 0x38
 8029b2a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8029b2e:	b289      	uxth	r1, r1
 8029b30:	fb02 f301 	mul.w	r3, r2, r1
 8029b34:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029b38:	0112      	lsls	r2, r2, #4
 8029b3a:	b289      	uxth	r1, r1
 8029b3c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8029b40:	1a40      	subs	r0, r0, r1
 8029b42:	fa1f fe80 	uxth.w	lr, r0
 8029b46:	1ad2      	subs	r2, r2, r3
 8029b48:	980d      	ldr	r0, [sp, #52]	; 0x34
 8029b4a:	b292      	uxth	r2, r2
 8029b4c:	4342      	muls	r2, r0
 8029b4e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8029b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029b54:	fb01 c102 	mla	r1, r1, r2, ip
 8029b58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029b5a:	fb03 1302 	mla	r3, r3, r2, r1
 8029b5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029b62:	2b00      	cmp	r3, #0
 8029b64:	d041      	beq.n	8029bea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029b66:	4a7a      	ldr	r2, [pc, #488]	; (8029d50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>)
 8029b68:	6810      	ldr	r0, [r2, #0]
 8029b6a:	2bff      	cmp	r3, #255	; 0xff
 8029b6c:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8029b70:	ea4f 2110 	mov.w	r1, r0, lsr #8
 8029b74:	fa5f fe80 	uxtb.w	lr, r0
 8029b78:	f000 80bc 	beq.w	8029cf4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8029b7c:	f8b8 c000 	ldrh.w	ip, [r8]
 8029b80:	fa1f fb83 	uxth.w	fp, r3
 8029b84:	ea4f 202c 	mov.w	r0, ip, asr #8
 8029b88:	43db      	mvns	r3, r3
 8029b8a:	b2d2      	uxtb	r2, r2
 8029b8c:	b2db      	uxtb	r3, r3
 8029b8e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029b92:	fb12 f20b 	smulbb	r2, r2, fp
 8029b96:	fb00 2203 	mla	r2, r0, r3, r2
 8029b9a:	b2c9      	uxtb	r1, r1
 8029b9c:	ea4f 00ec 	mov.w	r0, ip, asr #3
 8029ba0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8029ba4:	b292      	uxth	r2, r2
 8029ba6:	fb11 f10b 	smulbb	r1, r1, fp
 8029baa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029bae:	fa5f fc8c 	uxtb.w	ip, ip
 8029bb2:	fb1e fe0b 	smulbb	lr, lr, fp
 8029bb6:	fb00 1003 	mla	r0, r0, r3, r1
 8029bba:	1c51      	adds	r1, r2, #1
 8029bbc:	fb0c e303 	mla	r3, ip, r3, lr
 8029bc0:	b29b      	uxth	r3, r3
 8029bc2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029bc6:	f402 4178 	and.w	r1, r2, #63488	; 0xf800
 8029bca:	1c5a      	adds	r2, r3, #1
 8029bcc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8029bd0:	b280      	uxth	r0, r0
 8029bd2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8029bd6:	430a      	orrs	r2, r1
 8029bd8:	1c41      	adds	r1, r0, #1
 8029bda:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8029bde:	0940      	lsrs	r0, r0, #5
 8029be0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029be4:	4302      	orrs	r2, r0
 8029be6:	f8a8 2000 	strh.w	r2, [r8]
 8029bea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029bec:	441c      	add	r4, r3
 8029bee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029bf0:	441e      	add	r6, r3
 8029bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029bf4:	3b01      	subs	r3, #1
 8029bf6:	f108 0802 	add.w	r8, r8, #2
 8029bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8029bfc:	e739      	b.n	8029a72 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029bfe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029c00:	441c      	add	r4, r3
 8029c02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029c04:	3d01      	subs	r5, #1
 8029c06:	441e      	add	r6, r3
 8029c08:	f109 0902 	add.w	r9, r9, #2
 8029c0c:	e711      	b.n	8029a32 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8029c0e:	d021      	beq.n	8029c54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8029c10:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8029c12:	1e6b      	subs	r3, r5, #1
 8029c14:	fb00 4003 	mla	r0, r0, r3, r4
 8029c18:	1400      	asrs	r0, r0, #16
 8029c1a:	f53f af26 	bmi.w	8029a6a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029c1e:	3901      	subs	r1, #1
 8029c20:	4288      	cmp	r0, r1
 8029c22:	f6bf af22 	bge.w	8029a6a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029c26:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8029c28:	fb01 6303 	mla	r3, r1, r3, r6
 8029c2c:	141b      	asrs	r3, r3, #16
 8029c2e:	f53f af1c 	bmi.w	8029a6a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029c32:	3a01      	subs	r2, #1
 8029c34:	4293      	cmp	r3, r2
 8029c36:	f6bf af18 	bge.w	8029a6a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029c3a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8029c3e:	9308      	str	r3, [sp, #32]
 8029c40:	46aa      	mov	sl, r5
 8029c42:	46c8      	mov	r8, r9
 8029c44:	f1ba 0f00 	cmp.w	sl, #0
 8029c48:	f300 8086 	bgt.w	8029d58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8029c4c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8029c50:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8029c54:	9b07      	ldr	r3, [sp, #28]
 8029c56:	2b00      	cmp	r3, #0
 8029c58:	f340 814a 	ble.w	8029ef0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8029c5c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029c64:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029c68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029c6a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029c6e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029c72:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029c76:	eef0 6a48 	vmov.f32	s13, s16
 8029c7a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029c7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029c82:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029c86:	ee16 4a90 	vmov	r4, s13
 8029c8a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029c8e:	eef0 6a68 	vmov.f32	s13, s17
 8029c92:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029c96:	ee18 2a10 	vmov	r2, s16
 8029c9a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029c9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8029ca2:	ee18 2a90 	vmov	r2, s17
 8029ca6:	9327      	str	r3, [sp, #156]	; 0x9c
 8029ca8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029caa:	fb92 f3f3 	sdiv	r3, r2, r3
 8029cae:	9328      	str	r3, [sp, #160]	; 0xa0
 8029cb0:	9b07      	ldr	r3, [sp, #28]
 8029cb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029cb4:	3b01      	subs	r3, #1
 8029cb6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029cba:	9307      	str	r3, [sp, #28]
 8029cbc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029cbe:	ee16 6a90 	vmov	r6, s13
 8029cc2:	bf14      	ite	ne
 8029cc4:	461d      	movne	r5, r3
 8029cc6:	4615      	moveq	r5, r2
 8029cc8:	eef0 8a67 	vmov.f32	s17, s15
 8029ccc:	eeb0 8a47 	vmov.f32	s16, s14
 8029cd0:	e6a0      	b.n	8029a14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8029cd2:	2900      	cmp	r1, #0
 8029cd4:	f43f af29 	beq.w	8029b2a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8029cd8:	eb0a 0003 	add.w	r0, sl, r3
 8029cdc:	0843      	lsrs	r3, r0, #1
 8029cde:	07c0      	lsls	r0, r0, #31
 8029ce0:	5cfb      	ldrb	r3, [r7, r3]
 8029ce2:	bf54      	ite	pl
 8029ce4:	f003 030f 	andpl.w	r3, r3, #15
 8029ce8:	111b      	asrmi	r3, r3, #4
 8029cea:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029cee:	b2db      	uxtb	r3, r3
 8029cf0:	930a      	str	r3, [sp, #40]	; 0x28
 8029cf2:	e71a      	b.n	8029b2a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8029cf4:	4b17      	ldr	r3, [pc, #92]	; (8029d54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>)
 8029cf6:	00c9      	lsls	r1, r1, #3
 8029cf8:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 8029cfc:	ea42 0ede 	orr.w	lr, r2, lr, lsr #3
 8029d00:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029d04:	ea4e 0e01 	orr.w	lr, lr, r1
 8029d08:	f8a8 e000 	strh.w	lr, [r8]
 8029d0c:	e76d      	b.n	8029bea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029d0e:	f113 0b01 	adds.w	fp, r3, #1
 8029d12:	f53f af6a 	bmi.w	8029bea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029d16:	45dc      	cmp	ip, fp
 8029d18:	f6ff af67 	blt.w	8029bea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029d1c:	f110 0b01 	adds.w	fp, r0, #1
 8029d20:	f53f af63 	bmi.w	8029bea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029d24:	45de      	cmp	lr, fp
 8029d26:	f6ff af60 	blt.w	8029bea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029d2a:	9a08      	ldr	r2, [sp, #32]
 8029d2c:	9302      	str	r3, [sp, #8]
 8029d2e:	fa0f f38e 	sxth.w	r3, lr
 8029d32:	9301      	str	r3, [sp, #4]
 8029d34:	fa0f f38c 	sxth.w	r3, ip
 8029d38:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029d3c:	9105      	str	r1, [sp, #20]
 8029d3e:	9300      	str	r3, [sp, #0]
 8029d40:	463a      	mov	r2, r7
 8029d42:	4653      	mov	r3, sl
 8029d44:	4641      	mov	r1, r8
 8029d46:	9811      	ldr	r0, [sp, #68]	; 0x44
 8029d48:	f7ff fd58 	bl	80297fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8029d4c:	e74d      	b.n	8029bea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029d4e:	bf00      	nop
 8029d50:	200067d8 	.word	0x200067d8
 8029d54:	fffff800 	.word	0xfffff800
 8029d58:	9906      	ldr	r1, [sp, #24]
 8029d5a:	1422      	asrs	r2, r4, #16
 8029d5c:	1433      	asrs	r3, r6, #16
 8029d5e:	fb01 2303 	mla	r3, r1, r3, r2
 8029d62:	085a      	lsrs	r2, r3, #1
 8029d64:	07d9      	lsls	r1, r3, #31
 8029d66:	5cba      	ldrb	r2, [r7, r2]
 8029d68:	bf54      	ite	pl
 8029d6a:	f002 020f 	andpl.w	r2, r2, #15
 8029d6e:	1112      	asrmi	r2, r2, #4
 8029d70:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029d74:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8029d78:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8029d7c:	b2d2      	uxtb	r2, r2
 8029d7e:	2800      	cmp	r0, #0
 8029d80:	f000 8098 	beq.w	8029eb4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
 8029d84:	f103 0e01 	add.w	lr, r3, #1
 8029d88:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8029d8c:	f01e 0f01 	tst.w	lr, #1
 8029d90:	5c79      	ldrb	r1, [r7, r1]
 8029d92:	bf0c      	ite	eq
 8029d94:	f001 010f 	andeq.w	r1, r1, #15
 8029d98:	1109      	asrne	r1, r1, #4
 8029d9a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029d9e:	b2c9      	uxtb	r1, r1
 8029da0:	910f      	str	r1, [sp, #60]	; 0x3c
 8029da2:	f1bc 0f00 	cmp.w	ip, #0
 8029da6:	d019      	beq.n	8029ddc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8029da8:	9908      	ldr	r1, [sp, #32]
 8029daa:	440b      	add	r3, r1
 8029dac:	0859      	lsrs	r1, r3, #1
 8029dae:	f013 0f01 	tst.w	r3, #1
 8029db2:	5c79      	ldrb	r1, [r7, r1]
 8029db4:	bf0c      	ite	eq
 8029db6:	f001 010f 	andeq.w	r1, r1, #15
 8029dba:	1109      	asrne	r1, r1, #4
 8029dbc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029dc0:	b2c9      	uxtb	r1, r1
 8029dc2:	3301      	adds	r3, #1
 8029dc4:	910b      	str	r1, [sp, #44]	; 0x2c
 8029dc6:	0859      	lsrs	r1, r3, #1
 8029dc8:	07db      	lsls	r3, r3, #31
 8029dca:	5c79      	ldrb	r1, [r7, r1]
 8029dcc:	bf54      	ite	pl
 8029dce:	f001 010f 	andpl.w	r1, r1, #15
 8029dd2:	1109      	asrmi	r1, r1, #4
 8029dd4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029dd8:	b2c9      	uxtb	r1, r1
 8029dda:	9110      	str	r1, [sp, #64]	; 0x40
 8029ddc:	b280      	uxth	r0, r0
 8029dde:	fa1f fc8c 	uxth.w	ip, ip
 8029de2:	fb00 f30c 	mul.w	r3, r0, ip
 8029de6:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8029dea:	0100      	lsls	r0, r0, #4
 8029dec:	fa1f fc8c 	uxth.w	ip, ip
 8029df0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8029df4:	eba1 010c 	sub.w	r1, r1, ip
 8029df8:	fa1f fe81 	uxth.w	lr, r1
 8029dfc:	1ac0      	subs	r0, r0, r3
 8029dfe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029e00:	b280      	uxth	r0, r0
 8029e02:	4348      	muls	r0, r1
 8029e04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8029e06:	fb02 020e 	mla	r2, r2, lr, r0
 8029e0a:	fb0c 2c01 	mla	ip, ip, r1, r2
 8029e0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029e10:	fb03 c302 	mla	r3, r3, r2, ip
 8029e14:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029e18:	2b00      	cmp	r3, #0
 8029e1a:	d042      	beq.n	8029ea2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8029e1c:	4a37      	ldr	r2, [pc, #220]	; (8029efc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 8029e1e:	6810      	ldr	r0, [r2, #0]
 8029e20:	2bff      	cmp	r3, #255	; 0xff
 8029e22:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8029e26:	ea4f 2110 	mov.w	r1, r0, lsr #8
 8029e2a:	fa5f fe80 	uxtb.w	lr, r0
 8029e2e:	d052      	beq.n	8029ed6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
 8029e30:	f8b8 c000 	ldrh.w	ip, [r8]
 8029e34:	fa1f fb83 	uxth.w	fp, r3
 8029e38:	ea4f 202c 	mov.w	r0, ip, asr #8
 8029e3c:	43db      	mvns	r3, r3
 8029e3e:	b2d2      	uxtb	r2, r2
 8029e40:	b2db      	uxtb	r3, r3
 8029e42:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029e46:	fb12 f20b 	smulbb	r2, r2, fp
 8029e4a:	fb00 2203 	mla	r2, r0, r3, r2
 8029e4e:	ea4f 00ec 	mov.w	r0, ip, asr #3
 8029e52:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8029e56:	fa5f fc8c 	uxtb.w	ip, ip
 8029e5a:	fb1e fe0b 	smulbb	lr, lr, fp
 8029e5e:	fb0c ee03 	mla	lr, ip, r3, lr
 8029e62:	b2c9      	uxtb	r1, r1
 8029e64:	b292      	uxth	r2, r2
 8029e66:	fb11 f10b 	smulbb	r1, r1, fp
 8029e6a:	fa1f fe8e 	uxth.w	lr, lr
 8029e6e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029e72:	fb00 1003 	mla	r0, r0, r3, r1
 8029e76:	1c53      	adds	r3, r2, #1
 8029e78:	f10e 0101 	add.w	r1, lr, #1
 8029e7c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8029e80:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8029e84:	b280      	uxth	r0, r0
 8029e86:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8029e8a:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8029e8e:	430a      	orrs	r2, r1
 8029e90:	1c41      	adds	r1, r0, #1
 8029e92:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8029e96:	0940      	lsrs	r0, r0, #5
 8029e98:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029e9c:	4302      	orrs	r2, r0
 8029e9e:	f8a8 2000 	strh.w	r2, [r8]
 8029ea2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029ea4:	441c      	add	r4, r3
 8029ea6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029ea8:	f108 0802 	add.w	r8, r8, #2
 8029eac:	441e      	add	r6, r3
 8029eae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8029eb2:	e6c7      	b.n	8029c44 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8029eb4:	f1bc 0f00 	cmp.w	ip, #0
 8029eb8:	d090      	beq.n	8029ddc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8029eba:	9908      	ldr	r1, [sp, #32]
 8029ebc:	440b      	add	r3, r1
 8029ebe:	0859      	lsrs	r1, r3, #1
 8029ec0:	07db      	lsls	r3, r3, #31
 8029ec2:	5c79      	ldrb	r1, [r7, r1]
 8029ec4:	bf54      	ite	pl
 8029ec6:	f001 010f 	andpl.w	r1, r1, #15
 8029eca:	1109      	asrmi	r1, r1, #4
 8029ecc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029ed0:	b2c9      	uxtb	r1, r1
 8029ed2:	910b      	str	r1, [sp, #44]	; 0x2c
 8029ed4:	e782      	b.n	8029ddc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8029ed6:	4b0a      	ldr	r3, [pc, #40]	; (8029f00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>)
 8029ed8:	00c9      	lsls	r1, r1, #3
 8029eda:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 8029ede:	ea42 0ede 	orr.w	lr, r2, lr, lsr #3
 8029ee2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029ee6:	ea4e 0e01 	orr.w	lr, lr, r1
 8029eea:	f8a8 e000 	strh.w	lr, [r8]
 8029eee:	e7d8      	b.n	8029ea2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8029ef0:	b013      	add	sp, #76	; 0x4c
 8029ef2:	ecbd 8b08 	vpop	{d8-d11}
 8029ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029efa:	bf00      	nop
 8029efc:	200067d8 	.word	0x200067d8
 8029f00:	fffff800 	.word	0xfffff800

08029f04 <CRC_Lock>:
 8029f04:	b530      	push	{r4, r5, lr}
 8029f06:	4a20      	ldr	r2, [pc, #128]	; (8029f88 <CRC_Lock+0x84>)
 8029f08:	6813      	ldr	r3, [r2, #0]
 8029f0a:	f023 0301 	bic.w	r3, r3, #1
 8029f0e:	6013      	str	r3, [r2, #0]
 8029f10:	4b1e      	ldr	r3, [pc, #120]	; (8029f8c <CRC_Lock+0x88>)
 8029f12:	681a      	ldr	r2, [r3, #0]
 8029f14:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8029f18:	4022      	ands	r2, r4
 8029f1a:	f24c 2540 	movw	r5, #49728	; 0xc240
 8029f1e:	42aa      	cmp	r2, r5
 8029f20:	d005      	beq.n	8029f2e <CRC_Lock+0x2a>
 8029f22:	681b      	ldr	r3, [r3, #0]
 8029f24:	f24c 2270 	movw	r2, #49776	; 0xc270
 8029f28:	4023      	ands	r3, r4
 8029f2a:	4293      	cmp	r3, r2
 8029f2c:	d124      	bne.n	8029f78 <CRC_Lock+0x74>
 8029f2e:	4b18      	ldr	r3, [pc, #96]	; (8029f90 <CRC_Lock+0x8c>)
 8029f30:	681b      	ldr	r3, [r3, #0]
 8029f32:	bb0b      	cbnz	r3, 8029f78 <CRC_Lock+0x74>
 8029f34:	4b17      	ldr	r3, [pc, #92]	; (8029f94 <CRC_Lock+0x90>)
 8029f36:	681a      	ldr	r2, [r3, #0]
 8029f38:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029f3c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8029f40:	d00d      	beq.n	8029f5e <CRC_Lock+0x5a>
 8029f42:	681a      	ldr	r2, [r3, #0]
 8029f44:	f240 4483 	movw	r4, #1155	; 0x483
 8029f48:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029f4c:	42a2      	cmp	r2, r4
 8029f4e:	d006      	beq.n	8029f5e <CRC_Lock+0x5a>
 8029f50:	681b      	ldr	r3, [r3, #0]
 8029f52:	f240 4285 	movw	r2, #1157	; 0x485
 8029f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029f5a:	4293      	cmp	r3, r2
 8029f5c:	d10c      	bne.n	8029f78 <CRC_Lock+0x74>
 8029f5e:	4b0e      	ldr	r3, [pc, #56]	; (8029f98 <CRC_Lock+0x94>)
 8029f60:	2201      	movs	r2, #1
 8029f62:	601a      	str	r2, [r3, #0]
 8029f64:	681a      	ldr	r2, [r3, #0]
 8029f66:	2a00      	cmp	r2, #0
 8029f68:	d1fc      	bne.n	8029f64 <CRC_Lock+0x60>
 8029f6a:	4b0c      	ldr	r3, [pc, #48]	; (8029f9c <CRC_Lock+0x98>)
 8029f6c:	6018      	str	r0, [r3, #0]
 8029f6e:	6818      	ldr	r0, [r3, #0]
 8029f70:	1a43      	subs	r3, r0, r1
 8029f72:	4258      	negs	r0, r3
 8029f74:	4158      	adcs	r0, r3
 8029f76:	bd30      	pop	{r4, r5, pc}
 8029f78:	4b09      	ldr	r3, [pc, #36]	; (8029fa0 <CRC_Lock+0x9c>)
 8029f7a:	2201      	movs	r2, #1
 8029f7c:	601a      	str	r2, [r3, #0]
 8029f7e:	681a      	ldr	r2, [r3, #0]
 8029f80:	2a00      	cmp	r2, #0
 8029f82:	d1fc      	bne.n	8029f7e <CRC_Lock+0x7a>
 8029f84:	4b07      	ldr	r3, [pc, #28]	; (8029fa4 <CRC_Lock+0xa0>)
 8029f86:	e7f1      	b.n	8029f6c <CRC_Lock+0x68>
 8029f88:	e0002000 	.word	0xe0002000
 8029f8c:	e000ed00 	.word	0xe000ed00
 8029f90:	e0042000 	.word	0xe0042000
 8029f94:	5c001000 	.word	0x5c001000
 8029f98:	58024c08 	.word	0x58024c08
 8029f9c:	58024c00 	.word	0x58024c00
 8029fa0:	40023008 	.word	0x40023008
 8029fa4:	40023000 	.word	0x40023000

08029fa8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8029fa8:	6101      	str	r1, [r0, #16]
 8029faa:	4770      	bx	lr

08029fac <_ZN8touchgfx8Gestures4tickEv>:
 8029fac:	7b83      	ldrb	r3, [r0, #14]
 8029fae:	b14b      	cbz	r3, 8029fc4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029fb0:	8903      	ldrh	r3, [r0, #8]
 8029fb2:	3301      	adds	r3, #1
 8029fb4:	b29b      	uxth	r3, r3
 8029fb6:	2b07      	cmp	r3, #7
 8029fb8:	8103      	strh	r3, [r0, #8]
 8029fba:	bf81      	itttt	hi
 8029fbc:	2300      	movhi	r3, #0
 8029fbe:	8143      	strhhi	r3, [r0, #10]
 8029fc0:	8183      	strhhi	r3, [r0, #12]
 8029fc2:	7383      	strbhi	r3, [r0, #14]
 8029fc4:	4770      	bx	lr
	...

08029fc8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8029fc8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029fcc:	4604      	mov	r4, r0
 8029fce:	8880      	ldrh	r0, [r0, #4]
 8029fd0:	f8ad 0006 	strh.w	r0, [sp, #6]
 8029fd4:	4698      	mov	r8, r3
 8029fd6:	eba8 0000 	sub.w	r0, r8, r0
 8029fda:	4b1c      	ldr	r3, [pc, #112]	; (802a04c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8029fdc:	9300      	str	r3, [sp, #0]
 8029fde:	b280      	uxth	r0, r0
 8029fe0:	2300      	movs	r3, #0
 8029fe2:	f88d 3004 	strb.w	r3, [sp, #4]
 8029fe6:	b203      	sxth	r3, r0
 8029fe8:	2b00      	cmp	r3, #0
 8029fea:	bfb8      	it	lt
 8029fec:	4240      	neglt	r0, r0
 8029fee:	4617      	mov	r7, r2
 8029ff0:	8aa2      	ldrh	r2, [r4, #20]
 8029ff2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8029ff6:	f8ad 800a 	strh.w	r8, [sp, #10]
 8029ffa:	bfb8      	it	lt
 8029ffc:	b203      	sxthlt	r3, r0
 8029ffe:	460e      	mov	r6, r1
 802a000:	4293      	cmp	r3, r2
 802a002:	88e1      	ldrh	r1, [r4, #6]
 802a004:	f8ad 1008 	strh.w	r1, [sp, #8]
 802a008:	f8ad 500c 	strh.w	r5, [sp, #12]
 802a00c:	dc08      	bgt.n	802a020 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802a00e:	1a69      	subs	r1, r5, r1
 802a010:	b289      	uxth	r1, r1
 802a012:	b20b      	sxth	r3, r1
 802a014:	2b00      	cmp	r3, #0
 802a016:	bfbc      	itt	lt
 802a018:	4249      	neglt	r1, r1
 802a01a:	b20b      	sxthlt	r3, r1
 802a01c:	429a      	cmp	r2, r3
 802a01e:	da13      	bge.n	802a048 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802a020:	6920      	ldr	r0, [r4, #16]
 802a022:	6803      	ldr	r3, [r0, #0]
 802a024:	4669      	mov	r1, sp
 802a026:	685b      	ldr	r3, [r3, #4]
 802a028:	4798      	blx	r3
 802a02a:	eba8 0606 	sub.w	r6, r8, r6
 802a02e:	2300      	movs	r3, #0
 802a030:	1bef      	subs	r7, r5, r7
 802a032:	2001      	movs	r0, #1
 802a034:	8123      	strh	r3, [r4, #8]
 802a036:	8166      	strh	r6, [r4, #10]
 802a038:	81a7      	strh	r7, [r4, #12]
 802a03a:	f8a4 8004 	strh.w	r8, [r4, #4]
 802a03e:	80e5      	strh	r5, [r4, #6]
 802a040:	73a0      	strb	r0, [r4, #14]
 802a042:	b004      	add	sp, #16
 802a044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a048:	2000      	movs	r0, #0
 802a04a:	e7fa      	b.n	802a042 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 802a04c:	08031084 	.word	0x08031084

0802a050 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802a050:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a052:	461e      	mov	r6, r3
 802a054:	1e4b      	subs	r3, r1, #1
 802a056:	2b01      	cmp	r3, #1
 802a058:	b085      	sub	sp, #20
 802a05a:	4604      	mov	r4, r0
 802a05c:	460d      	mov	r5, r1
 802a05e:	4617      	mov	r7, r2
 802a060:	d84b      	bhi.n	802a0fa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802a062:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802a066:	1cd3      	adds	r3, r2, #3
 802a068:	b29b      	uxth	r3, r3
 802a06a:	2b06      	cmp	r3, #6
 802a06c:	d916      	bls.n	802a09c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802a06e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802a110 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a072:	f8cd c004 	str.w	ip, [sp, #4]
 802a076:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a07a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a07e:	6900      	ldr	r0, [r0, #16]
 802a080:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a084:	f04f 0c00 	mov.w	ip, #0
 802a088:	f88d c008 	strb.w	ip, [sp, #8]
 802a08c:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a090:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a094:	6803      	ldr	r3, [r0, #0]
 802a096:	a901      	add	r1, sp, #4
 802a098:	689b      	ldr	r3, [r3, #8]
 802a09a:	4798      	blx	r3
 802a09c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a0a0:	1cd3      	adds	r3, r2, #3
 802a0a2:	b29b      	uxth	r3, r3
 802a0a4:	2b06      	cmp	r3, #6
 802a0a6:	d916      	bls.n	802a0d6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a0a8:	f8df c064 	ldr.w	ip, [pc, #100]	; 802a110 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a0ac:	f8cd c004 	str.w	ip, [sp, #4]
 802a0b0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a0b4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a0b8:	6920      	ldr	r0, [r4, #16]
 802a0ba:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a0be:	f04f 0c01 	mov.w	ip, #1
 802a0c2:	f88d c008 	strb.w	ip, [sp, #8]
 802a0c6:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a0ca:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a0ce:	6803      	ldr	r3, [r0, #0]
 802a0d0:	a901      	add	r1, sp, #4
 802a0d2:	689b      	ldr	r3, [r3, #8]
 802a0d4:	4798      	blx	r3
 802a0d6:	4b0d      	ldr	r3, [pc, #52]	; (802a10c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802a0d8:	9301      	str	r3, [sp, #4]
 802a0da:	6920      	ldr	r0, [r4, #16]
 802a0dc:	f88d 5008 	strb.w	r5, [sp, #8]
 802a0e0:	2300      	movs	r3, #0
 802a0e2:	f8ad 700a 	strh.w	r7, [sp, #10]
 802a0e6:	f8ad 600c 	strh.w	r6, [sp, #12]
 802a0ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a0ee:	6803      	ldr	r3, [r0, #0]
 802a0f0:	a901      	add	r1, sp, #4
 802a0f2:	681b      	ldr	r3, [r3, #0]
 802a0f4:	4798      	blx	r3
 802a0f6:	b005      	add	sp, #20
 802a0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a0fa:	2900      	cmp	r1, #0
 802a0fc:	d1eb      	bne.n	802a0d6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a0fe:	80a2      	strh	r2, [r4, #4]
 802a100:	80c6      	strh	r6, [r0, #6]
 802a102:	60a1      	str	r1, [r4, #8]
 802a104:	81a1      	strh	r1, [r4, #12]
 802a106:	73a1      	strb	r1, [r4, #14]
 802a108:	e7e5      	b.n	802a0d6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a10a:	bf00      	nop
 802a10c:	08031070 	.word	0x08031070
 802a110:	08031098 	.word	0x08031098

0802a114 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 802a114:	10c9      	asrs	r1, r1, #3
 802a116:	2900      	cmp	r1, #0
 802a118:	bfb8      	it	lt
 802a11a:	4249      	neglt	r1, r1
 802a11c:	2801      	cmp	r0, #1
 802a11e:	d108      	bne.n	802a132 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 802a120:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802a124:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 802a128:	4601      	mov	r1, r0
 802a12a:	dd02      	ble.n	802a132 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 802a12c:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802a130:	4770      	bx	lr
 802a132:	29ff      	cmp	r1, #255	; 0xff
 802a134:	bfa8      	it	ge
 802a136:	21ff      	movge	r1, #255	; 0xff
 802a138:	4608      	mov	r0, r1
 802a13a:	4770      	bx	lr

0802a13c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 802a13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a140:	688c      	ldr	r4, [r1, #8]
 802a142:	2c00      	cmp	r4, #0
 802a144:	b087      	sub	sp, #28
 802a146:	4607      	mov	r7, r0
 802a148:	db2b      	blt.n	802a1a2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802a14a:	6803      	ldr	r3, [r0, #0]
 802a14c:	691a      	ldr	r2, [r3, #16]
 802a14e:	42a2      	cmp	r2, r4
 802a150:	dd27      	ble.n	802a1a2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802a152:	685a      	ldr	r2, [r3, #4]
 802a154:	695e      	ldr	r6, [r3, #20]
 802a156:	68cd      	ldr	r5, [r1, #12]
 802a158:	f8d1 901c 	ldr.w	r9, [r1, #28]
 802a15c:	f893 a008 	ldrb.w	sl, [r3, #8]
 802a160:	f8d1 8020 	ldr.w	r8, [r1, #32]
 802a164:	fb06 2604 	mla	r6, r6, r4, r2
 802a168:	698a      	ldr	r2, [r1, #24]
 802a16a:	9205      	str	r2, [sp, #20]
 802a16c:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 802a170:	9b05      	ldr	r3, [sp, #20]
 802a172:	6839      	ldr	r1, [r7, #0]
 802a174:	eb03 0c02 	add.w	ip, r3, r2
 802a178:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 802a17c:	68c9      	ldr	r1, [r1, #12]
 802a17e:	1898      	adds	r0, r3, r2
 802a180:	4288      	cmp	r0, r1
 802a182:	db02      	blt.n	802a18a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 802a184:	1a8b      	subs	r3, r1, r2
 802a186:	2b00      	cmp	r3, #0
 802a188:	dd09      	ble.n	802a19e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 802a18a:	6878      	ldr	r0, [r7, #4]
 802a18c:	6801      	ldr	r1, [r0, #0]
 802a18e:	9400      	str	r4, [sp, #0]
 802a190:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 802a194:	4653      	mov	r3, sl
 802a196:	f8d1 b008 	ldr.w	fp, [r1, #8]
 802a19a:	4631      	mov	r1, r6
 802a19c:	47d8      	blx	fp
 802a19e:	3d01      	subs	r5, #1
 802a1a0:	d1e4      	bne.n	802a16c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 802a1a2:	b007      	add	sp, #28
 802a1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a1a8 <_ZN8touchgfx10Rasterizer6lineToEii>:
 802a1a8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 802a1ac:	b90b      	cbnz	r3, 802a1b2 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802a1ae:	f001 b999 	b.w	802b4e4 <_ZN8touchgfx7Outline6lineToEii>
 802a1b2:	4770      	bx	lr

0802a1b4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802a1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a1b8:	4b90      	ldr	r3, [pc, #576]	; (802a3fc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 802a1ba:	4604      	mov	r4, r0
 802a1bc:	2600      	movs	r6, #0
 802a1be:	f100 0518 	add.w	r5, r0, #24
 802a1c2:	e9c0 3100 	strd	r3, r1, [r0]
 802a1c6:	b086      	sub	sp, #24
 802a1c8:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802a1cc:	e9c0 6604 	strd	r6, r6, [r0, #16]
 802a1d0:	f104 0730 	add.w	r7, r4, #48	; 0x30
 802a1d4:	4628      	mov	r0, r5
 802a1d6:	4690      	mov	r8, r2
 802a1d8:	f001 fc4e 	bl	802ba78 <_ZN8touchgfx15RenderingBufferC1Ev>
 802a1dc:	4638      	mov	r0, r7
 802a1de:	f000 fb45 	bl	802a86c <_ZN8touchgfx7OutlineC1Ev>
 802a1e2:	f104 0078 	add.w	r0, r4, #120	; 0x78
 802a1e6:	f001 fbef 	bl	802b9c8 <_ZN8touchgfx8ScanlineC1Ev>
 802a1ea:	2301      	movs	r3, #1
 802a1ec:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 802a1f0:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 802a1f4:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 802a1f8:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a1fc:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 802a200:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 802a204:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 802a208:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 802a20c:	f001 fb8c 	bl	802b928 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 802a210:	b928      	cbnz	r0, 802a21e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 802a212:	4b7b      	ldr	r3, [pc, #492]	; (802a400 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 802a214:	4a7b      	ldr	r2, [pc, #492]	; (802a404 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 802a216:	212d      	movs	r1, #45	; 0x2d
 802a218:	487b      	ldr	r0, [pc, #492]	; (802a408 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802a21a:	f002 fa65 	bl	802c6e8 <__assert_func>
 802a21e:	f9b8 2000 	ldrsh.w	r2, [r8]
 802a222:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802a226:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802a22a:	9602      	str	r6, [sp, #8]
 802a22c:	4410      	add	r0, r2
 802a22e:	b280      	uxth	r0, r0
 802a230:	fa0f fa80 	sxth.w	sl, r0
 802a234:	f1ba 0f00 	cmp.w	sl, #0
 802a238:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802a23c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802a240:	dd70      	ble.n	802a324 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802a242:	4591      	cmp	r9, r2
 802a244:	dd6e      	ble.n	802a324 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802a246:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 802a24a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802a24e:	440b      	add	r3, r1
 802a250:	b29b      	uxth	r3, r3
 802a252:	b21e      	sxth	r6, r3
 802a254:	2e00      	cmp	r6, #0
 802a256:	dd65      	ble.n	802a324 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802a258:	458e      	cmp	lr, r1
 802a25a:	dd63      	ble.n	802a324 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802a25c:	45d1      	cmp	r9, sl
 802a25e:	bfb8      	it	lt
 802a260:	fa1f f089 	uxthlt.w	r0, r9
 802a264:	45b6      	cmp	lr, r6
 802a266:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802a26a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802a26e:	bfb8      	it	lt
 802a270:	fa1f f38e 	uxthlt.w	r3, lr
 802a274:	1a80      	subs	r0, r0, r2
 802a276:	1a5b      	subs	r3, r3, r1
 802a278:	f8ad 000c 	strh.w	r0, [sp, #12]
 802a27c:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a280:	f8ad 2008 	strh.w	r2, [sp, #8]
 802a284:	f8ad 100a 	strh.w	r1, [sp, #10]
 802a288:	f10d 0808 	add.w	r8, sp, #8
 802a28c:	e898 0003 	ldmia.w	r8, {r0, r1}
 802a290:	ae04      	add	r6, sp, #16
 802a292:	e886 0003 	stmia.w	r6, {r0, r1}
 802a296:	f8dc 3000 	ldr.w	r3, [ip]
 802a29a:	4660      	mov	r0, ip
 802a29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a29e:	4631      	mov	r1, r6
 802a2a0:	4798      	blx	r3
 802a2a2:	6861      	ldr	r1, [r4, #4]
 802a2a4:	4640      	mov	r0, r8
 802a2a6:	3104      	adds	r1, #4
 802a2a8:	f7f0 fac0 	bl	801a82c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802a2ac:	4630      	mov	r0, r6
 802a2ae:	f7f0 fad5 	bl	801a85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802a2b2:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 802a2b6:	f001 fac7 	bl	802b848 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 802a2ba:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 802a2be:	4638      	mov	r0, r7
 802a2c0:	f000 fab0 	bl	802a824 <_ZN8touchgfx7Outline5resetEv>
 802a2c4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802a2c8:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 802a2cc:	015b      	lsls	r3, r3, #5
 802a2ce:	60e3      	str	r3, [r4, #12]
 802a2d0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802a2d4:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802a2d8:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 802a2dc:	015b      	lsls	r3, r3, #5
 802a2de:	6123      	str	r3, [r4, #16]
 802a2e0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 802a2e4:	015b      	lsls	r3, r3, #5
 802a2e6:	6163      	str	r3, [r4, #20]
 802a2e8:	4b48      	ldr	r3, [pc, #288]	; (802a40c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 802a2ea:	0152      	lsls	r2, r2, #5
 802a2ec:	6818      	ldr	r0, [r3, #0]
 802a2ee:	60a2      	str	r2, [r4, #8]
 802a2f0:	6803      	ldr	r3, [r0, #0]
 802a2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a2f4:	4798      	blx	r3
 802a2f6:	4606      	mov	r6, r0
 802a2f8:	f7e4 fe3c 	bl	800ef74 <_ZN8touchgfx3HAL3lcdEv>
 802a2fc:	6803      	ldr	r3, [r0, #0]
 802a2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a300:	4798      	blx	r3
 802a302:	4607      	mov	r7, r0
 802a304:	f7e4 fe36 	bl	800ef74 <_ZN8touchgfx3HAL3lcdEv>
 802a308:	6803      	ldr	r3, [r0, #0]
 802a30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a30c:	4798      	blx	r3
 802a30e:	280d      	cmp	r0, #13
 802a310:	d855      	bhi.n	802a3be <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x20a>
 802a312:	e8df f000 	tbb	[pc, r0]
 802a316:	564c      	.short	0x564c
 802a318:	2b6f0a67 	.word	0x2b6f0a67
 802a31c:	6060603b 	.word	0x6060603b
 802a320:	6f6f6060 	.word	0x6f6f6060
 802a324:	2300      	movs	r3, #0
 802a326:	9303      	str	r3, [sp, #12]
 802a328:	e7ae      	b.n	802a288 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 802a32a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802a32e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802a332:	2108      	movs	r1, #8
 802a334:	fb92 f1f1 	sdiv	r1, r2, r1
 802a338:	fb07 1303 	mla	r3, r7, r3, r1
 802a33c:	441e      	add	r6, r3
 802a33e:	4253      	negs	r3, r2
 802a340:	f003 0307 	and.w	r3, r3, #7
 802a344:	f002 0207 	and.w	r2, r2, #7
 802a348:	bf58      	it	pl
 802a34a:	425a      	negpl	r2, r3
 802a34c:	b2d2      	uxtb	r2, r2
 802a34e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802a352:	6721      	str	r1, [r4, #112]	; 0x70
 802a354:	e9cd 1700 	strd	r1, r7, [sp]
 802a358:	4628      	mov	r0, r5
 802a35a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802a35e:	4631      	mov	r1, r6
 802a360:	f001 fb96 	bl	802ba90 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 802a364:	4620      	mov	r0, r4
 802a366:	b006      	add	sp, #24
 802a368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a36c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802a370:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802a374:	2104      	movs	r1, #4
 802a376:	fb92 f1f1 	sdiv	r1, r2, r1
 802a37a:	fb07 1303 	mla	r3, r7, r3, r1
 802a37e:	441e      	add	r6, r3
 802a380:	4253      	negs	r3, r2
 802a382:	f003 0303 	and.w	r3, r3, #3
 802a386:	f002 0203 	and.w	r2, r2, #3
 802a38a:	e7dd      	b.n	802a348 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 802a38c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802a390:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802a394:	2a00      	cmp	r2, #0
 802a396:	f04f 0102 	mov.w	r1, #2
 802a39a:	fb92 f1f1 	sdiv	r1, r2, r1
 802a39e:	f002 0201 	and.w	r2, r2, #1
 802a3a2:	fb07 1303 	mla	r3, r7, r3, r1
 802a3a6:	441e      	add	r6, r3
 802a3a8:	bfb8      	it	lt
 802a3aa:	4252      	neglt	r2, r2
 802a3ac:	e7ce      	b.n	802a34c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 802a3ae:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802a3b2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802a3b6:	437b      	muls	r3, r7
 802a3b8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802a3bc:	441e      	add	r6, r3
 802a3be:	2200      	movs	r2, #0
 802a3c0:	e7c5      	b.n	802a34e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 802a3c2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802a3c6:	fb07 f203 	mul.w	r2, r7, r3
 802a3ca:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802a3ce:	2103      	movs	r1, #3
 802a3d0:	fb13 2301 	smlabb	r3, r3, r1, r2
 802a3d4:	e7f2      	b.n	802a3bc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802a3d6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802a3da:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802a3de:	fb07 2303 	mla	r3, r7, r3, r2
 802a3e2:	e7eb      	b.n	802a3bc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802a3e4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802a3e8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802a3ec:	437b      	muls	r3, r7
 802a3ee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802a3f2:	e7e3      	b.n	802a3bc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802a3f4:	4b06      	ldr	r3, [pc, #24]	; (802a410 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 802a3f6:	4a03      	ldr	r2, [pc, #12]	; (802a404 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 802a3f8:	216c      	movs	r1, #108	; 0x6c
 802a3fa:	e70d      	b.n	802a218 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 802a3fc:	080324ec 	.word	0x080324ec
 802a400:	08032435 	.word	0x08032435
 802a404:	080324f4 	.word	0x080324f4
 802a408:	08032491 	.word	0x08032491
 802a40c:	200067d0 	.word	0x200067d0
 802a410:	080324c5 	.word	0x080324c5

0802a414 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 802a414:	6812      	ldr	r2, [r2, #0]
 802a416:	2a00      	cmp	r2, #0
 802a418:	db0b      	blt.n	802a432 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 802a41a:	9800      	ldr	r0, [sp, #0]
 802a41c:	6800      	ldr	r0, [r0, #0]
 802a41e:	4290      	cmp	r0, r2
 802a420:	bfd4      	ite	le
 802a422:	2002      	movle	r0, #2
 802a424:	2000      	movgt	r0, #0
 802a426:	680a      	ldr	r2, [r1, #0]
 802a428:	2a00      	cmp	r2, #0
 802a42a:	da04      	bge.n	802a436 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 802a42c:	f040 0004 	orr.w	r0, r0, #4
 802a430:	4770      	bx	lr
 802a432:	2001      	movs	r0, #1
 802a434:	e7f7      	b.n	802a426 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802a436:	681b      	ldr	r3, [r3, #0]
 802a438:	4293      	cmp	r3, r2
 802a43a:	bfd8      	it	le
 802a43c:	f040 0008 	orrle.w	r0, r0, #8
 802a440:	4770      	bx	lr
	...

0802a444 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802a444:	b510      	push	{r4, lr}
 802a446:	4b07      	ldr	r3, [pc, #28]	; (802a464 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802a448:	781b      	ldrb	r3, [r3, #0]
 802a44a:	2b01      	cmp	r3, #1
 802a44c:	d108      	bne.n	802a460 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802a44e:	6843      	ldr	r3, [r0, #4]
 802a450:	6814      	ldr	r4, [r2, #0]
 802a452:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802a456:	680b      	ldr	r3, [r1, #0]
 802a458:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802a45c:	6013      	str	r3, [r2, #0]
 802a45e:	600c      	str	r4, [r1, #0]
 802a460:	bd10      	pop	{r4, pc}
 802a462:	bf00      	nop
 802a464:	200067c8 	.word	0x200067c8

0802a468 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802a468:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a46a:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802a46e:	b085      	sub	sp, #20
 802a470:	4604      	mov	r4, r0
 802a472:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802a476:	b33b      	cbz	r3, 802a4c8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 802a478:	aa02      	add	r2, sp, #8
 802a47a:	a903      	add	r1, sp, #12
 802a47c:	f7ff ffe2 	bl	802a444 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802a480:	68a3      	ldr	r3, [r4, #8]
 802a482:	9e03      	ldr	r6, [sp, #12]
 802a484:	9f02      	ldr	r7, [sp, #8]
 802a486:	1af6      	subs	r6, r6, r3
 802a488:	68e3      	ldr	r3, [r4, #12]
 802a48a:	9603      	str	r6, [sp, #12]
 802a48c:	1aff      	subs	r7, r7, r3
 802a48e:	f104 0314 	add.w	r3, r4, #20
 802a492:	9300      	str	r3, [sp, #0]
 802a494:	aa02      	add	r2, sp, #8
 802a496:	f104 0310 	add.w	r3, r4, #16
 802a49a:	a903      	add	r1, sp, #12
 802a49c:	4620      	mov	r0, r4
 802a49e:	9702      	str	r7, [sp, #8]
 802a4a0:	f7ff ffb8 	bl	802a414 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802a4a4:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 802a4a8:	4605      	mov	r5, r0
 802a4aa:	b97b      	cbnz	r3, 802a4cc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 802a4ac:	463a      	mov	r2, r7
 802a4ae:	4631      	mov	r1, r6
 802a4b0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802a4b4:	f7ff fe78 	bl	802a1a8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802a4b8:	9b03      	ldr	r3, [sp, #12]
 802a4ba:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802a4be:	9b02      	ldr	r3, [sp, #8]
 802a4c0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 802a4c4:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 802a4c8:	b005      	add	sp, #20
 802a4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a4cc:	b110      	cbz	r0, 802a4d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802a4ce:	ea13 0200 	ands.w	r2, r3, r0
 802a4d2:	d11c      	bne.n	802a50e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 802a4d4:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 802a4d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 802a4dc:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 802a4e0:	b188      	cbz	r0, 802a506 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802a4e2:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 802a4e6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802a4ea:	b913      	cbnz	r3, 802a4f2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 802a4ec:	4630      	mov	r0, r6
 802a4ee:	f001 f829 	bl	802b544 <_ZN8touchgfx7Outline6moveToEii>
 802a4f2:	2300      	movs	r3, #0
 802a4f4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a4f8:	2301      	movs	r3, #1
 802a4fa:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802a4fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802a502:	4630      	mov	r0, r6
 802a504:	e7d6      	b.n	802a4b4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802a506:	4630      	mov	r0, r6
 802a508:	f7ff fe4e 	bl	802a1a8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802a50c:	e7f7      	b.n	802a4fe <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802a50e:	4615      	mov	r5, r2
 802a510:	e7d2      	b.n	802a4b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802a512 <_ZN8touchgfx6Canvas5closeEv>:
 802a512:	b538      	push	{r3, r4, r5, lr}
 802a514:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802a518:	4604      	mov	r4, r0
 802a51a:	b993      	cbnz	r3, 802a542 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802a51c:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 802a520:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 802a524:	4213      	tst	r3, r2
 802a526:	d10c      	bne.n	802a542 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802a528:	f100 0530 	add.w	r5, r0, #48	; 0x30
 802a52c:	b123      	cbz	r3, 802a538 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802a52e:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 802a532:	4628      	mov	r0, r5
 802a534:	f7ff fe38 	bl	802a1a8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802a538:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 802a53c:	4628      	mov	r0, r5
 802a53e:	f7ff fe33 	bl	802a1a8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802a542:	2300      	movs	r3, #0
 802a544:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a548:	bd38      	pop	{r3, r4, r5, pc}

0802a54a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802a54a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a54c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802a550:	b085      	sub	sp, #20
 802a552:	4604      	mov	r4, r0
 802a554:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802a558:	b353      	cbz	r3, 802a5b0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 802a55a:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802a55e:	b90b      	cbnz	r3, 802a564 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 802a560:	f7ff ffd7 	bl	802a512 <_ZN8touchgfx6Canvas5closeEv>
 802a564:	aa02      	add	r2, sp, #8
 802a566:	a903      	add	r1, sp, #12
 802a568:	4620      	mov	r0, r4
 802a56a:	f7ff ff6b 	bl	802a444 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802a56e:	68a3      	ldr	r3, [r4, #8]
 802a570:	9d03      	ldr	r5, [sp, #12]
 802a572:	9e02      	ldr	r6, [sp, #8]
 802a574:	1aed      	subs	r5, r5, r3
 802a576:	68e3      	ldr	r3, [r4, #12]
 802a578:	9503      	str	r5, [sp, #12]
 802a57a:	1af6      	subs	r6, r6, r3
 802a57c:	f104 0314 	add.w	r3, r4, #20
 802a580:	9300      	str	r3, [sp, #0]
 802a582:	aa02      	add	r2, sp, #8
 802a584:	f104 0310 	add.w	r3, r4, #16
 802a588:	a903      	add	r1, sp, #12
 802a58a:	4620      	mov	r0, r4
 802a58c:	9602      	str	r6, [sp, #8]
 802a58e:	f7ff ff41 	bl	802a414 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802a592:	4607      	mov	r7, r0
 802a594:	b170      	cbz	r0, 802a5b4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802a596:	2301      	movs	r3, #1
 802a598:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a59c:	9a03      	ldr	r2, [sp, #12]
 802a59e:	9b02      	ldr	r3, [sp, #8]
 802a5a0:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 802a5a4:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 802a5a8:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 802a5ac:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 802a5b0:	b005      	add	sp, #20
 802a5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a5b4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802a5b8:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 802a5bc:	b92b      	cbnz	r3, 802a5ca <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802a5be:	4632      	mov	r2, r6
 802a5c0:	4629      	mov	r1, r5
 802a5c2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802a5c6:	f000 ffbd 	bl	802b544 <_ZN8touchgfx7Outline6moveToEii>
 802a5ca:	2300      	movs	r3, #0
 802a5cc:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a5d0:	2301      	movs	r3, #1
 802a5d2:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802a5d6:	e7e1      	b.n	802a59c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

0802a5d8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 802a5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a5dc:	b087      	sub	sp, #28
 802a5de:	4604      	mov	r4, r0
 802a5e0:	9105      	str	r1, [sp, #20]
 802a5e2:	f001 f8f6 	bl	802b7d2 <_ZN8touchgfx7Outline8getCellsEv>
 802a5e6:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802a5ea:	4605      	mov	r5, r0
 802a5ec:	f1b9 0f00 	cmp.w	r9, #0
 802a5f0:	d103      	bne.n	802a5fa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802a5f2:	2001      	movs	r0, #1
 802a5f4:	b007      	add	sp, #28
 802a5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a5fa:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802a5fe:	2e00      	cmp	r6, #0
 802a600:	d139      	bne.n	802a676 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802a602:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802a606:	4640      	mov	r0, r8
 802a608:	f001 f9c8 	bl	802b99c <_ZN8touchgfx8Scanline5resetEv>
 802a60c:	f109 33ff 	add.w	r3, r9, #4294967295
 802a610:	f105 0708 	add.w	r7, r5, #8
 802a614:	9303      	str	r3, [sp, #12]
 802a616:	f9b5 b000 	ldrsh.w	fp, [r5]
 802a61a:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802a61e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802a622:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 802a626:	46da      	mov	sl, fp
 802a628:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 802a62c:	9b03      	ldr	r3, [sp, #12]
 802a62e:	9504      	str	r5, [sp, #16]
 802a630:	3b01      	subs	r3, #1
 802a632:	9303      	str	r3, [sp, #12]
 802a634:	3301      	adds	r3, #1
 802a636:	4416      	add	r6, r2
 802a638:	463d      	mov	r5, r7
 802a63a:	d01e      	beq.n	802a67a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 802a63c:	3708      	adds	r7, #8
 802a63e:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802a642:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802a646:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 802a64a:	4290      	cmp	r0, r2
 802a64c:	d11e      	bne.n	802a68c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802a64e:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802a652:	4411      	add	r1, r2
 802a654:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 802a658:	e7e8      	b.n	802a62c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 802a65a:	1c91      	adds	r1, r2, #2
 802a65c:	f04f 0301 	mov.w	r3, #1
 802a660:	65e1      	str	r1, [r4, #92]	; 0x5c
 802a662:	8053      	strh	r3, [r2, #2]
 802a664:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802a666:	1c91      	adds	r1, r2, #2
 802a668:	65a1      	str	r1, [r4, #88]	; 0x58
 802a66a:	f8a2 b002 	strh.w	fp, [r2, #2]
 802a66e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802a670:	3201      	adds	r2, #1
 802a672:	6562      	str	r2, [r4, #84]	; 0x54
 802a674:	e03a      	b.n	802a6ec <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 802a676:	2000      	movs	r0, #0
 802a678:	e7bc      	b.n	802a5f4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 802a67a:	b951      	cbnz	r1, 802a692 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 802a67c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802a67e:	2b00      	cmp	r3, #0
 802a680:	d0b7      	beq.n	802a5f2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802a682:	4641      	mov	r1, r8
 802a684:	9805      	ldr	r0, [sp, #20]
 802a686:	f7ff fd59 	bl	802a13c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802a68a:	e7b2      	b.n	802a5f2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802a68c:	2900      	cmp	r1, #0
 802a68e:	d035      	beq.n	802a6fc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802a690:	9504      	str	r5, [sp, #16]
 802a692:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802a696:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802a69a:	f7ff fd3b 	bl	802a114 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802a69e:	4605      	mov	r5, r0
 802a6a0:	b330      	cbz	r0, 802a6f0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802a6a2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802a6a4:	b182      	cbz	r2, 802a6c8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802a6a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 802a6a8:	4591      	cmp	r9, r2
 802a6aa:	d00d      	beq.n	802a6c8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802a6ac:	4641      	mov	r1, r8
 802a6ae:	9805      	ldr	r0, [sp, #20]
 802a6b0:	f7ff fd44 	bl	802a13c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802a6b4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a6b8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 802a6ba:	65e2      	str	r2, [r4, #92]	; 0x5c
 802a6bc:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802a6c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802a6c2:	65a2      	str	r2, [r4, #88]	; 0x58
 802a6c4:	2300      	movs	r3, #0
 802a6c6:	6563      	str	r3, [r4, #84]	; 0x54
 802a6c8:	f1bb 0f00 	cmp.w	fp, #0
 802a6cc:	db10      	blt.n	802a6f0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802a6ce:	f001 f939 	bl	802b944 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802a6d2:	4583      	cmp	fp, r0
 802a6d4:	da0c      	bge.n	802a6f0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802a6d6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 802a6d8:	f802 500b 	strb.w	r5, [r2, fp]
 802a6dc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802a6de:	3201      	adds	r2, #1
 802a6e0:	4593      	cmp	fp, r2
 802a6e2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802a6e4:	d1b9      	bne.n	802a65a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802a6e6:	8811      	ldrh	r1, [r2, #0]
 802a6e8:	3101      	adds	r1, #1
 802a6ea:	8011      	strh	r1, [r2, #0]
 802a6ec:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802a6f0:	9b03      	ldr	r3, [sp, #12]
 802a6f2:	3301      	adds	r3, #1
 802a6f4:	d0c2      	beq.n	802a67c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802a6f6:	9d04      	ldr	r5, [sp, #16]
 802a6f8:	f10b 0a01 	add.w	sl, fp, #1
 802a6fc:	f9b5 3000 	ldrsh.w	r3, [r5]
 802a700:	4553      	cmp	r3, sl
 802a702:	dd88      	ble.n	802a616 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802a704:	01b1      	lsls	r1, r6, #6
 802a706:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802a70a:	f7ff fd03 	bl	802a114 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802a70e:	4683      	mov	fp, r0
 802a710:	2800      	cmp	r0, #0
 802a712:	d080      	beq.n	802a616 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802a714:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802a716:	b183      	cbz	r3, 802a73a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802a718:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802a71a:	4599      	cmp	r9, r3
 802a71c:	d00d      	beq.n	802a73a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802a71e:	4641      	mov	r1, r8
 802a720:	9805      	ldr	r0, [sp, #20]
 802a722:	f7ff fd0b 	bl	802a13c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802a726:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a72a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802a72e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 802a730:	65e3      	str	r3, [r4, #92]	; 0x5c
 802a732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a734:	65a3      	str	r3, [r4, #88]	; 0x58
 802a736:	2300      	movs	r3, #0
 802a738:	6563      	str	r3, [r4, #84]	; 0x54
 802a73a:	f9b5 3000 	ldrsh.w	r3, [r5]
 802a73e:	f8cd b000 	str.w	fp, [sp]
 802a742:	eba3 030a 	sub.w	r3, r3, sl
 802a746:	464a      	mov	r2, r9
 802a748:	4651      	mov	r1, sl
 802a74a:	4640      	mov	r0, r8
 802a74c:	f001 f952 	bl	802b9f4 <_ZN8touchgfx8Scanline7addSpanEiijj>
 802a750:	e761      	b.n	802a616 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802a752 <_ZN8touchgfx6Canvas6renderEh>:
 802a752:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a754:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802a758:	4604      	mov	r4, r0
 802a75a:	460d      	mov	r5, r1
 802a75c:	b913      	cbnz	r3, 802a764 <_ZN8touchgfx6Canvas6renderEh+0x12>
 802a75e:	2001      	movs	r0, #1
 802a760:	b003      	add	sp, #12
 802a762:	bd30      	pop	{r4, r5, pc}
 802a764:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 802a768:	2b00      	cmp	r3, #0
 802a76a:	d12f      	bne.n	802a7cc <_ZN8touchgfx6Canvas6renderEh+0x7a>
 802a76c:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 802a770:	2b00      	cmp	r3, #0
 802a772:	d0f4      	beq.n	802a75e <_ZN8touchgfx6Canvas6renderEh+0xc>
 802a774:	6840      	ldr	r0, [r0, #4]
 802a776:	6803      	ldr	r3, [r0, #0]
 802a778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802a77a:	4798      	blx	r3
 802a77c:	fb10 f105 	smulbb	r1, r0, r5
 802a780:	b288      	uxth	r0, r1
 802a782:	1c41      	adds	r1, r0, #1
 802a784:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802a788:	120d      	asrs	r5, r1, #8
 802a78a:	d0e8      	beq.n	802a75e <_ZN8touchgfx6Canvas6renderEh+0xc>
 802a78c:	4620      	mov	r0, r4
 802a78e:	f7ff fec0 	bl	802a512 <_ZN8touchgfx6Canvas5closeEv>
 802a792:	6860      	ldr	r0, [r4, #4]
 802a794:	6803      	ldr	r3, [r0, #0]
 802a796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a798:	4798      	blx	r3
 802a79a:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 802a79e:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 802a7a2:	80c3      	strh	r3, [r0, #6]
 802a7a4:	8082      	strh	r2, [r0, #4]
 802a7a6:	6860      	ldr	r0, [r4, #4]
 802a7a8:	6803      	ldr	r3, [r0, #0]
 802a7aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a7ac:	4798      	blx	r3
 802a7ae:	7205      	strb	r5, [r0, #8]
 802a7b0:	6860      	ldr	r0, [r4, #4]
 802a7b2:	6803      	ldr	r3, [r0, #0]
 802a7b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a7b6:	4798      	blx	r3
 802a7b8:	f104 0318 	add.w	r3, r4, #24
 802a7bc:	e9cd 3000 	strd	r3, r0, [sp]
 802a7c0:	4669      	mov	r1, sp
 802a7c2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802a7c6:	f7ff ff07 	bl	802a5d8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 802a7ca:	e7c9      	b.n	802a760 <_ZN8touchgfx6Canvas6renderEh+0xe>
 802a7cc:	2000      	movs	r0, #0
 802a7ce:	e7c7      	b.n	802a760 <_ZN8touchgfx6Canvas6renderEh+0xe>

0802a7d0 <_ZN8touchgfx6CanvasD1Ev>:
 802a7d0:	b538      	push	{r3, r4, r5, lr}
 802a7d2:	4605      	mov	r5, r0
 802a7d4:	4b08      	ldr	r3, [pc, #32]	; (802a7f8 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802a7d6:	f845 3b30 	str.w	r3, [r5], #48
 802a7da:	4b08      	ldr	r3, [pc, #32]	; (802a7fc <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802a7dc:	4604      	mov	r4, r0
 802a7de:	6818      	ldr	r0, [r3, #0]
 802a7e0:	6803      	ldr	r3, [r0, #0]
 802a7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a7e4:	4798      	blx	r3
 802a7e6:	4628      	mov	r0, r5
 802a7e8:	f000 f814 	bl	802a814 <_ZN8touchgfx7OutlineD1Ev>
 802a7ec:	f104 0018 	add.w	r0, r4, #24
 802a7f0:	f001 f939 	bl	802ba66 <_ZN8touchgfx15RenderingBufferD1Ev>
 802a7f4:	4620      	mov	r0, r4
 802a7f6:	bd38      	pop	{r3, r4, r5, pc}
 802a7f8:	080324ec 	.word	0x080324ec
 802a7fc:	200067d0 	.word	0x200067d0

0802a800 <_ZN8touchgfx6CanvasD0Ev>:
 802a800:	b510      	push	{r4, lr}
 802a802:	4604      	mov	r4, r0
 802a804:	f7ff ffe4 	bl	802a7d0 <_ZN8touchgfx6CanvasD1Ev>
 802a808:	4620      	mov	r0, r4
 802a80a:	21bc      	movs	r1, #188	; 0xbc
 802a80c:	f001 f94d 	bl	802baaa <_ZdlPvj>
 802a810:	4620      	mov	r0, r4
 802a812:	bd10      	pop	{r4, pc}

0802a814 <_ZN8touchgfx7OutlineD1Ev>:
 802a814:	4770      	bx	lr

0802a816 <_ZN8touchgfx7OutlineD0Ev>:
 802a816:	b510      	push	{r4, lr}
 802a818:	2148      	movs	r1, #72	; 0x48
 802a81a:	4604      	mov	r4, r0
 802a81c:	f001 f945 	bl	802baaa <_ZdlPvj>
 802a820:	4620      	mov	r0, r4
 802a822:	bd10      	pop	{r4, pc}

0802a824 <_ZN8touchgfx7Outline5resetEv>:
 802a824:	b510      	push	{r4, lr}
 802a826:	4604      	mov	r4, r0
 802a828:	f001 f8a4 	bl	802b974 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 802a82c:	60e0      	str	r0, [r4, #12]
 802a82e:	f001 f8a7 	bl	802b980 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802a832:	68e3      	ldr	r3, [r4, #12]
 802a834:	6123      	str	r3, [r4, #16]
 802a836:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a83a:	82a3      	strh	r3, [r4, #20]
 802a83c:	82e3      	strh	r3, [r4, #22]
 802a83e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a840:	f023 0301 	bic.w	r3, r3, #1
 802a844:	f043 0302 	orr.w	r3, r3, #2
 802a848:	63e3      	str	r3, [r4, #60]	; 0x3c
 802a84a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802a84e:	2200      	movs	r2, #0
 802a850:	08c0      	lsrs	r0, r0, #3
 802a852:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802a856:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a85a:	6060      	str	r0, [r4, #4]
 802a85c:	60a2      	str	r2, [r4, #8]
 802a85e:	8322      	strh	r2, [r4, #24]
 802a860:	8362      	strh	r2, [r4, #26]
 802a862:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802a866:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a86a:	bd10      	pop	{r4, pc}

0802a86c <_ZN8touchgfx7OutlineC1Ev>:
 802a86c:	b510      	push	{r4, lr}
 802a86e:	4b0f      	ldr	r3, [pc, #60]	; (802a8ac <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802a870:	6003      	str	r3, [r0, #0]
 802a872:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802a876:	2300      	movs	r3, #0
 802a878:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802a87c:	4604      	mov	r4, r0
 802a87e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802a882:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802a886:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802a88a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802a88e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802a892:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802a896:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802a89a:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802a89e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802a8a2:	f7ff ffbf 	bl	802a824 <_ZN8touchgfx7Outline5resetEv>
 802a8a6:	4620      	mov	r0, r4
 802a8a8:	bd10      	pop	{r4, pc}
 802a8aa:	bf00      	nop
 802a8ac:	080325bc 	.word	0x080325bc

0802a8b0 <_ZN8touchgfx7Outline10renderLineEiiii>:
 802a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a8b4:	b095      	sub	sp, #84	; 0x54
 802a8b6:	4604      	mov	r4, r0
 802a8b8:	981e      	ldr	r0, [sp, #120]	; 0x78
 802a8ba:	9304      	str	r3, [sp, #16]
 802a8bc:	1153      	asrs	r3, r2, #5
 802a8be:	9300      	str	r3, [sp, #0]
 802a8c0:	1143      	asrs	r3, r0, #5
 802a8c2:	930c      	str	r3, [sp, #48]	; 0x30
 802a8c4:	f000 031f 	and.w	r3, r0, #31
 802a8c8:	9303      	str	r3, [sp, #12]
 802a8ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802a8cc:	1155      	asrs	r5, r2, #5
 802a8ce:	42ab      	cmp	r3, r5
 802a8d0:	bfc4      	itt	gt
 802a8d2:	462b      	movgt	r3, r5
 802a8d4:	6323      	strgt	r3, [r4, #48]	; 0x30
 802a8d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802a8d8:	1155      	asrs	r5, r2, #5
 802a8da:	42ab      	cmp	r3, r5
 802a8dc:	bfde      	ittt	le
 802a8de:	462b      	movle	r3, r5
 802a8e0:	3301      	addle	r3, #1
 802a8e2:	63a3      	strle	r3, [r4, #56]	; 0x38
 802a8e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802a8e6:	1145      	asrs	r5, r0, #5
 802a8e8:	42ab      	cmp	r3, r5
 802a8ea:	bfc4      	itt	gt
 802a8ec:	462b      	movgt	r3, r5
 802a8ee:	6323      	strgt	r3, [r4, #48]	; 0x30
 802a8f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802a8f2:	1145      	asrs	r5, r0, #5
 802a8f4:	42ab      	cmp	r3, r5
 802a8f6:	bfde      	ittt	le
 802a8f8:	462b      	movle	r3, r5
 802a8fa:	3301      	addle	r3, #1
 802a8fc:	63a3      	strle	r3, [r4, #56]	; 0x38
 802a8fe:	9b04      	ldr	r3, [sp, #16]
 802a900:	1157      	asrs	r7, r2, #5
 802a902:	eba3 0a01 	sub.w	sl, r3, r1
 802a906:	1143      	asrs	r3, r0, #5
 802a908:	429f      	cmp	r7, r3
 802a90a:	f002 061f 	and.w	r6, r2, #31
 802a90e:	ea4f 1561 	mov.w	r5, r1, asr #5
 802a912:	f040 8122 	bne.w	802ab5a <_ZN8touchgfx7Outline10renderLineEiiii+0x2aa>
 802a916:	9b04      	ldr	r3, [sp, #16]
 802a918:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802a91c:	9b03      	ldr	r3, [sp, #12]
 802a91e:	429e      	cmp	r6, r3
 802a920:	d131      	bne.n	802a986 <_ZN8touchgfx7Outline10renderLineEiiii+0xd6>
 802a922:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802a926:	f9bd 2000 	ldrsh.w	r2, [sp]
 802a92a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802a92e:	fa0f fb8b 	sxth.w	fp, fp
 802a932:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802a936:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 802a93a:	4281      	cmp	r1, r0
 802a93c:	f000 80eb 	beq.w	802ab16 <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802a940:	8b60      	ldrh	r0, [r4, #26]
 802a942:	8b21      	ldrh	r1, [r4, #24]
 802a944:	4301      	orrs	r1, r0
 802a946:	d00b      	beq.n	802a960 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802a948:	2b00      	cmp	r3, #0
 802a94a:	db09      	blt.n	802a960 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802a94c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a94e:	428b      	cmp	r3, r1
 802a950:	da06      	bge.n	802a960 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802a952:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802a956:	4299      	cmp	r1, r3
 802a958:	d308      	bcc.n	802a96c <_ZN8touchgfx7Outline10renderLineEiiii+0xbc>
 802a95a:	2301      	movs	r3, #1
 802a95c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a960:	f8a4 b014 	strh.w	fp, [r4, #20]
 802a964:	2300      	movs	r3, #0
 802a966:	82e2      	strh	r2, [r4, #22]
 802a968:	8323      	strh	r3, [r4, #24]
 802a96a:	e01f      	b.n	802a9ac <_ZN8touchgfx7Outline10renderLineEiiii+0xfc>
 802a96c:	f104 0314 	add.w	r3, r4, #20
 802a970:	cb03      	ldmia	r3!, {r0, r1}
 802a972:	6925      	ldr	r5, [r4, #16]
 802a974:	6028      	str	r0, [r5, #0]
 802a976:	6069      	str	r1, [r5, #4]
 802a978:	6923      	ldr	r3, [r4, #16]
 802a97a:	3308      	adds	r3, #8
 802a97c:	6123      	str	r3, [r4, #16]
 802a97e:	68a3      	ldr	r3, [r4, #8]
 802a980:	3301      	adds	r3, #1
 802a982:	60a3      	str	r3, [r4, #8]
 802a984:	e7ec      	b.n	802a960 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802a986:	9b04      	ldr	r3, [sp, #16]
 802a988:	8b20      	ldrh	r0, [r4, #24]
 802a98a:	8b62      	ldrh	r2, [r4, #26]
 802a98c:	f003 031f 	and.w	r3, r3, #31
 802a990:	9305      	str	r3, [sp, #20]
 802a992:	9b03      	ldr	r3, [sp, #12]
 802a994:	45ab      	cmp	fp, r5
 802a996:	f001 011f 	and.w	r1, r1, #31
 802a99a:	eba3 0306 	sub.w	r3, r3, r6
 802a99e:	d107      	bne.n	802a9b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x100>
 802a9a0:	4418      	add	r0, r3
 802a9a2:	8320      	strh	r0, [r4, #24]
 802a9a4:	9805      	ldr	r0, [sp, #20]
 802a9a6:	4401      	add	r1, r0
 802a9a8:	fb03 2301 	mla	r3, r3, r1, r2
 802a9ac:	8363      	strh	r3, [r4, #26]
 802a9ae:	e0b2      	b.n	802ab16 <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802a9b0:	f1ba 0f00 	cmp.w	sl, #0
 802a9b4:	db35      	blt.n	802aa22 <_ZN8touchgfx7Outline10renderLineEiiii+0x172>
 802a9b6:	2701      	movs	r7, #1
 802a9b8:	f1c1 0c20 	rsb	ip, r1, #32
 802a9bc:	9702      	str	r7, [sp, #8]
 802a9be:	fb03 f30c 	mul.w	r3, r3, ip
 802a9c2:	2720      	movs	r7, #32
 802a9c4:	9701      	str	r7, [sp, #4]
 802a9c6:	fb93 fcfa 	sdiv	ip, r3, sl
 802a9ca:	9f01      	ldr	r7, [sp, #4]
 802a9cc:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802a9d0:	fb0a 331c 	mls	r3, sl, ip, r3
 802a9d4:	2b00      	cmp	r3, #0
 802a9d6:	bfb8      	it	lt
 802a9d8:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802a9dc:	4439      	add	r1, r7
 802a9de:	fb0c 2101 	mla	r1, ip, r1, r2
 802a9e2:	9a02      	ldr	r2, [sp, #8]
 802a9e4:	4415      	add	r5, r2
 802a9e6:	f9bd 2000 	ldrsh.w	r2, [sp]
 802a9ea:	9200      	str	r2, [sp, #0]
 802a9ec:	ea4f 4702 	mov.w	r7, r2, lsl #16
 802a9f0:	9704      	str	r7, [sp, #16]
 802a9f2:	9a04      	ldr	r2, [sp, #16]
 802a9f4:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 802a9f8:	fa0f fe85 	sxth.w	lr, r5
 802a9fc:	4460      	add	r0, ip
 802a9fe:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 802aa02:	eb0e 0902 	add.w	r9, lr, r2
 802aa06:	bfb8      	it	lt
 802aa08:	4453      	addlt	r3, sl
 802aa0a:	b200      	sxth	r0, r0
 802aa0c:	b209      	sxth	r1, r1
 802aa0e:	454f      	cmp	r7, r9
 802aa10:	8320      	strh	r0, [r4, #24]
 802aa12:	8361      	strh	r1, [r4, #26]
 802aa14:	d10d      	bne.n	802aa32 <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 802aa16:	4ba1      	ldr	r3, [pc, #644]	; (802ac9c <_ZN8touchgfx7Outline10renderLineEiiii+0x3ec>)
 802aa18:	4aa1      	ldr	r2, [pc, #644]	; (802aca0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f0>)
 802aa1a:	48a2      	ldr	r0, [pc, #648]	; (802aca4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 802aa1c:	2177      	movs	r1, #119	; 0x77
 802aa1e:	f001 fe63 	bl	802c6e8 <__assert_func>
 802aa22:	f04f 37ff 	mov.w	r7, #4294967295
 802aa26:	9702      	str	r7, [sp, #8]
 802aa28:	434b      	muls	r3, r1
 802aa2a:	f1ca 0a00 	rsb	sl, sl, #0
 802aa2e:	2700      	movs	r7, #0
 802aa30:	e7c8      	b.n	802a9c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x114>
 802aa32:	ea50 0201 	orrs.w	r2, r0, r1
 802aa36:	d00c      	beq.n	802aa52 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802aa38:	f1b8 0f00 	cmp.w	r8, #0
 802aa3c:	db09      	blt.n	802aa52 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802aa3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802aa40:	4588      	cmp	r8, r1
 802aa42:	da06      	bge.n	802aa52 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802aa44:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802aa48:	4288      	cmp	r0, r1
 802aa4a:	d367      	bcc.n	802ab1c <_ZN8touchgfx7Outline10renderLineEiiii+0x26c>
 802aa4c:	2101      	movs	r1, #1
 802aa4e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802aa52:	2100      	movs	r1, #0
 802aa54:	9a00      	ldr	r2, [sp, #0]
 802aa56:	f8a4 e014 	strh.w	lr, [r4, #20]
 802aa5a:	45ab      	cmp	fp, r5
 802aa5c:	82e2      	strh	r2, [r4, #22]
 802aa5e:	8321      	strh	r1, [r4, #24]
 802aa60:	8361      	strh	r1, [r4, #26]
 802aa62:	4466      	add	r6, ip
 802aa64:	d04e      	beq.n	802ab04 <_ZN8touchgfx7Outline10renderLineEiiii+0x254>
 802aa66:	9a03      	ldr	r2, [sp, #12]
 802aa68:	1b91      	subs	r1, r2, r6
 802aa6a:	448c      	add	ip, r1
 802aa6c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802aa70:	fb9c f7fa 	sdiv	r7, ip, sl
 802aa74:	fb0a cc17 	mls	ip, sl, r7, ip
 802aa78:	f1bc 0f00 	cmp.w	ip, #0
 802aa7c:	bfb8      	it	lt
 802aa7e:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802aa82:	f107 0201 	add.w	r2, r7, #1
 802aa86:	bfb8      	it	lt
 802aa88:	44d4      	addlt	ip, sl
 802aa8a:	eba3 030a 	sub.w	r3, r3, sl
 802aa8e:	9207      	str	r2, [sp, #28]
 802aa90:	f04f 0800 	mov.w	r8, #0
 802aa94:	eb13 030c 	adds.w	r3, r3, ip
 802aa98:	bf58      	it	pl
 802aa9a:	9807      	ldrpl	r0, [sp, #28]
 802aa9c:	9a02      	ldr	r2, [sp, #8]
 802aa9e:	bf48      	it	mi
 802aaa0:	4638      	movmi	r0, r7
 802aaa2:	fa0f fe80 	sxth.w	lr, r0
 802aaa6:	ea4f 1140 	mov.w	r1, r0, lsl #5
 802aaaa:	4415      	add	r5, r2
 802aaac:	4406      	add	r6, r0
 802aaae:	9a04      	ldr	r2, [sp, #16]
 802aab0:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802aab4:	f8a4 e018 	strh.w	lr, [r4, #24]
 802aab8:	fa0f f985 	sxth.w	r9, r5
 802aabc:	4410      	add	r0, r2
 802aabe:	444a      	add	r2, r9
 802aac0:	bf58      	it	pl
 802aac2:	eba3 030a 	subpl.w	r3, r3, sl
 802aac6:	b209      	sxth	r1, r1
 802aac8:	4290      	cmp	r0, r2
 802aaca:	8361      	strh	r1, [r4, #26]
 802aacc:	d0a3      	beq.n	802aa16 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802aace:	ea5e 0201 	orrs.w	r2, lr, r1
 802aad2:	d00d      	beq.n	802aaf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802aad4:	9a00      	ldr	r2, [sp, #0]
 802aad6:	2a00      	cmp	r2, #0
 802aad8:	db0a      	blt.n	802aaf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802aada:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802aadc:	428a      	cmp	r2, r1
 802aade:	da07      	bge.n	802aaf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802aae0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802aae4:	4288      	cmp	r0, r1
 802aae6:	d329      	bcc.n	802ab3c <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 802aae8:	f04f 0201 	mov.w	r2, #1
 802aaec:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802aaf0:	9a00      	ldr	r2, [sp, #0]
 802aaf2:	f8a4 9014 	strh.w	r9, [r4, #20]
 802aaf6:	45ab      	cmp	fp, r5
 802aaf8:	82e2      	strh	r2, [r4, #22]
 802aafa:	f8a4 8018 	strh.w	r8, [r4, #24]
 802aafe:	f8a4 801a 	strh.w	r8, [r4, #26]
 802ab02:	d1c7      	bne.n	802aa94 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 802ab04:	9b03      	ldr	r3, [sp, #12]
 802ab06:	9a01      	ldr	r2, [sp, #4]
 802ab08:	1b9e      	subs	r6, r3, r6
 802ab0a:	9b05      	ldr	r3, [sp, #20]
 802ab0c:	8326      	strh	r6, [r4, #24]
 802ab0e:	3320      	adds	r3, #32
 802ab10:	1a9b      	subs	r3, r3, r2
 802ab12:	435e      	muls	r6, r3
 802ab14:	8366      	strh	r6, [r4, #26]
 802ab16:	b015      	add	sp, #84	; 0x54
 802ab18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ab1c:	f104 0714 	add.w	r7, r4, #20
 802ab20:	cf03      	ldmia	r7!, {r0, r1}
 802ab22:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802ab26:	f8c8 0000 	str.w	r0, [r8]
 802ab2a:	f8c8 1004 	str.w	r1, [r8, #4]
 802ab2e:	6921      	ldr	r1, [r4, #16]
 802ab30:	3108      	adds	r1, #8
 802ab32:	6121      	str	r1, [r4, #16]
 802ab34:	68a1      	ldr	r1, [r4, #8]
 802ab36:	3101      	adds	r1, #1
 802ab38:	60a1      	str	r1, [r4, #8]
 802ab3a:	e78a      	b.n	802aa52 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802ab3c:	f104 0e14 	add.w	lr, r4, #20
 802ab40:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802ab44:	6922      	ldr	r2, [r4, #16]
 802ab46:	9206      	str	r2, [sp, #24]
 802ab48:	6010      	str	r0, [r2, #0]
 802ab4a:	6051      	str	r1, [r2, #4]
 802ab4c:	6921      	ldr	r1, [r4, #16]
 802ab4e:	3108      	adds	r1, #8
 802ab50:	6121      	str	r1, [r4, #16]
 802ab52:	68a1      	ldr	r1, [r4, #8]
 802ab54:	3101      	adds	r1, #1
 802ab56:	60a1      	str	r1, [r4, #8]
 802ab58:	e7ca      	b.n	802aaf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802ab5a:	eba0 0b02 	sub.w	fp, r0, r2
 802ab5e:	f1ba 0f00 	cmp.w	sl, #0
 802ab62:	f040 80a1 	bne.w	802aca8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>
 802ab66:	f1bb 0f00 	cmp.w	fp, #0
 802ab6a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802ab6e:	8b62      	ldrh	r2, [r4, #26]
 802ab70:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802ab74:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 802ab78:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 802ab7c:	bfa8      	it	ge
 802ab7e:	f04f 0a20 	movge.w	sl, #32
 802ab82:	8b21      	ldrh	r1, [r4, #24]
 802ab84:	ebaa 0606 	sub.w	r6, sl, r6
 802ab88:	4431      	add	r1, r6
 802ab8a:	fb06 2603 	mla	r6, r6, r3, r2
 802ab8e:	9a00      	ldr	r2, [sp, #0]
 802ab90:	bfb4      	ite	lt
 802ab92:	f04f 39ff 	movlt.w	r9, #4294967295
 802ab96:	f04f 0901 	movge.w	r9, #1
 802ab9a:	444a      	add	r2, r9
 802ab9c:	b22d      	sxth	r5, r5
 802ab9e:	b217      	sxth	r7, r2
 802aba0:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 802aba4:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 802aba8:	b209      	sxth	r1, r1
 802abaa:	b236      	sxth	r6, r6
 802abac:	45f4      	cmp	ip, lr
 802abae:	8321      	strh	r1, [r4, #24]
 802abb0:	8366      	strh	r6, [r4, #26]
 802abb2:	f43f af30 	beq.w	802aa16 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802abb6:	4331      	orrs	r1, r6
 802abb8:	d00b      	beq.n	802abd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802abba:	2800      	cmp	r0, #0
 802abbc:	db09      	blt.n	802abd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802abbe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802abc0:	4288      	cmp	r0, r1
 802abc2:	da06      	bge.n	802abd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802abc4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802abc8:	4288      	cmp	r0, r1
 802abca:	d33b      	bcc.n	802ac44 <_ZN8touchgfx7Outline10renderLineEiiii+0x394>
 802abcc:	2101      	movs	r1, #1
 802abce:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802abd2:	f1aa 0610 	sub.w	r6, sl, #16
 802abd6:	0076      	lsls	r6, r6, #1
 802abd8:	fb06 fc03 	mul.w	ip, r6, r3
 802abdc:	fa0f fc8c 	sxth.w	ip, ip
 802abe0:	b236      	sxth	r6, r6
 802abe2:	82e7      	strh	r7, [r4, #22]
 802abe4:	ea46 010c 	orr.w	r1, r6, ip
 802abe8:	2700      	movs	r7, #0
 802abea:	82a5      	strh	r5, [r4, #20]
 802abec:	8327      	strh	r7, [r4, #24]
 802abee:	8367      	strh	r7, [r4, #26]
 802abf0:	9100      	str	r1, [sp, #0]
 802abf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 802abf4:	428a      	cmp	r2, r1
 802abf6:	d046      	beq.n	802ac86 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d6>
 802abf8:	444a      	add	r2, r9
 802abfa:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802abfe:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802ac02:	8326      	strh	r6, [r4, #24]
 802ac04:	fa0f f882 	sxth.w	r8, r2
 802ac08:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802ac0c:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 802ac10:	4570      	cmp	r0, lr
 802ac12:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802ac16:	f43f aefe 	beq.w	802aa16 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802ac1a:	9800      	ldr	r0, [sp, #0]
 802ac1c:	b160      	cbz	r0, 802ac38 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802ac1e:	2900      	cmp	r1, #0
 802ac20:	db0a      	blt.n	802ac38 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802ac22:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802ac24:	4281      	cmp	r1, r0
 802ac26:	da07      	bge.n	802ac38 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802ac28:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802ac2c:	4288      	cmp	r0, r1
 802ac2e:	d319      	bcc.n	802ac64 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b4>
 802ac30:	f04f 0101 	mov.w	r1, #1
 802ac34:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802ac38:	82a5      	strh	r5, [r4, #20]
 802ac3a:	f8a4 8016 	strh.w	r8, [r4, #22]
 802ac3e:	8327      	strh	r7, [r4, #24]
 802ac40:	8367      	strh	r7, [r4, #26]
 802ac42:	e7d6      	b.n	802abf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x342>
 802ac44:	f104 0614 	add.w	r6, r4, #20
 802ac48:	ce03      	ldmia	r6!, {r0, r1}
 802ac4a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 802ac4e:	f8cc 0000 	str.w	r0, [ip]
 802ac52:	f8cc 1004 	str.w	r1, [ip, #4]
 802ac56:	6921      	ldr	r1, [r4, #16]
 802ac58:	3108      	adds	r1, #8
 802ac5a:	6121      	str	r1, [r4, #16]
 802ac5c:	68a1      	ldr	r1, [r4, #8]
 802ac5e:	3101      	adds	r1, #1
 802ac60:	60a1      	str	r1, [r4, #8]
 802ac62:	e7b6      	b.n	802abd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802ac64:	f104 0e14 	add.w	lr, r4, #20
 802ac68:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802ac6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802ac70:	f8cb 0000 	str.w	r0, [fp]
 802ac74:	f8cb 1004 	str.w	r1, [fp, #4]
 802ac78:	6921      	ldr	r1, [r4, #16]
 802ac7a:	3108      	adds	r1, #8
 802ac7c:	6121      	str	r1, [r4, #16]
 802ac7e:	68a1      	ldr	r1, [r4, #8]
 802ac80:	3101      	adds	r1, #1
 802ac82:	60a1      	str	r1, [r4, #8]
 802ac84:	e7d8      	b.n	802ac38 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802ac86:	9a03      	ldr	r2, [sp, #12]
 802ac88:	8b61      	ldrh	r1, [r4, #26]
 802ac8a:	f1a2 0e20 	sub.w	lr, r2, #32
 802ac8e:	8b22      	ldrh	r2, [r4, #24]
 802ac90:	44d6      	add	lr, sl
 802ac92:	4472      	add	r2, lr
 802ac94:	8322      	strh	r2, [r4, #24]
 802ac96:	fb0e 1303 	mla	r3, lr, r3, r1
 802ac9a:	e687      	b.n	802a9ac <_ZN8touchgfx7Outline10renderLineEiiii+0xfc>
 802ac9c:	08032543 	.word	0x08032543
 802aca0:	080325c4 	.word	0x080325c4
 802aca4:	08032574 	.word	0x08032574
 802aca8:	f1bb 0f00 	cmp.w	fp, #0
 802acac:	f2c0 8124 	blt.w	802aef8 <_ZN8touchgfx7Outline10renderLineEiiii+0x648>
 802acb0:	2201      	movs	r2, #1
 802acb2:	f1c6 0320 	rsb	r3, r6, #32
 802acb6:	920b      	str	r2, [sp, #44]	; 0x2c
 802acb8:	fb0a f303 	mul.w	r3, sl, r3
 802acbc:	2220      	movs	r2, #32
 802acbe:	fb93 fcfb 	sdiv	ip, r3, fp
 802acc2:	fb0b 331c 	mls	r3, fp, ip, r3
 802acc6:	2b00      	cmp	r3, #0
 802acc8:	9308      	str	r3, [sp, #32]
 802acca:	bfbe      	ittt	lt
 802accc:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802acd0:	445b      	addlt	r3, fp
 802acd2:	9308      	strlt	r3, [sp, #32]
 802acd4:	eb0c 0301 	add.w	r3, ip, r1
 802acd8:	9301      	str	r3, [sp, #4]
 802acda:	115b      	asrs	r3, r3, #5
 802acdc:	9305      	str	r3, [sp, #20]
 802acde:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802ace2:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 802ace6:	9202      	str	r2, [sp, #8]
 802ace8:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 802acec:	461f      	mov	r7, r3
 802acee:	9b02      	ldr	r3, [sp, #8]
 802acf0:	42b3      	cmp	r3, r6
 802acf2:	f040 8117 	bne.w	802af24 <_ZN8touchgfx7Outline10renderLineEiiii+0x674>
 802acf6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802acfa:	f9bd 3000 	ldrsh.w	r3, [sp]
 802acfe:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 802ad02:	42b9      	cmp	r1, r7
 802ad04:	d016      	beq.n	802ad34 <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802ad06:	8b60      	ldrh	r0, [r4, #26]
 802ad08:	8b21      	ldrh	r1, [r4, #24]
 802ad0a:	4301      	orrs	r1, r0
 802ad0c:	d00d      	beq.n	802ad2a <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802ad0e:	f1b8 0f00 	cmp.w	r8, #0
 802ad12:	db0a      	blt.n	802ad2a <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802ad14:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ad16:	4541      	cmp	r1, r8
 802ad18:	dd07      	ble.n	802ad2a <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802ad1a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802ad1e:	4288      	cmp	r0, r1
 802ad20:	f0c0 80f3 	bcc.w	802af0a <_ZN8touchgfx7Outline10renderLineEiiii+0x65a>
 802ad24:	2101      	movs	r1, #1
 802ad26:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802ad2a:	82e3      	strh	r3, [r4, #22]
 802ad2c:	2300      	movs	r3, #0
 802ad2e:	82a2      	strh	r2, [r4, #20]
 802ad30:	8323      	strh	r3, [r4, #24]
 802ad32:	8363      	strh	r3, [r4, #26]
 802ad34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ad36:	9a00      	ldr	r2, [sp, #0]
 802ad38:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802ad3c:	441a      	add	r2, r3
 802ad3e:	4691      	mov	r9, r2
 802ad40:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802ad44:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802ad48:	fa0f f589 	sxth.w	r5, r9
 802ad4c:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802ad50:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 802ad54:	4281      	cmp	r1, r0
 802ad56:	d015      	beq.n	802ad84 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d4>
 802ad58:	8b60      	ldrh	r0, [r4, #26]
 802ad5a:	8b21      	ldrh	r1, [r4, #24]
 802ad5c:	4301      	orrs	r1, r0
 802ad5e:	d00c      	beq.n	802ad7a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802ad60:	2a00      	cmp	r2, #0
 802ad62:	db0a      	blt.n	802ad7a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802ad64:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ad66:	428a      	cmp	r2, r1
 802ad68:	da07      	bge.n	802ad7a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802ad6a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802ad6e:	4291      	cmp	r1, r2
 802ad70:	f0c0 81b4 	bcc.w	802b0dc <_ZN8touchgfx7Outline10renderLineEiiii+0x82c>
 802ad74:	2201      	movs	r2, #1
 802ad76:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802ad7a:	82a3      	strh	r3, [r4, #20]
 802ad7c:	2300      	movs	r3, #0
 802ad7e:	82e5      	strh	r5, [r4, #22]
 802ad80:	8323      	strh	r3, [r4, #24]
 802ad82:	8363      	strh	r3, [r4, #26]
 802ad84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802ad86:	454b      	cmp	r3, r9
 802ad88:	f000 808a 	beq.w	802aea0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 802ad8c:	ea4f 134a 	mov.w	r3, sl, lsl #5
 802ad90:	fb93 f2fb 	sdiv	r2, r3, fp
 802ad94:	fb0b 3312 	mls	r3, fp, r2, r3
 802ad98:	2b00      	cmp	r3, #0
 802ad9a:	9205      	str	r2, [sp, #20]
 802ad9c:	9307      	str	r3, [sp, #28]
 802ad9e:	da04      	bge.n	802adaa <_ZN8touchgfx7Outline10renderLineEiiii+0x4fa>
 802ada0:	1e53      	subs	r3, r2, #1
 802ada2:	9305      	str	r3, [sp, #20]
 802ada4:	9b07      	ldr	r3, [sp, #28]
 802ada6:	445b      	add	r3, fp
 802ada8:	9307      	str	r3, [sp, #28]
 802adaa:	9b08      	ldr	r3, [sp, #32]
 802adac:	eba3 030b 	sub.w	r3, r3, fp
 802adb0:	9308      	str	r3, [sp, #32]
 802adb2:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 802adb6:	f1c3 0320 	rsb	r3, r3, #32
 802adba:	930a      	str	r3, [sp, #40]	; 0x28
 802adbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802adbe:	9b02      	ldr	r3, [sp, #8]
 802adc0:	1a9b      	subs	r3, r3, r2
 802adc2:	9309      	str	r3, [sp, #36]	; 0x24
 802adc4:	f04f 0a00 	mov.w	sl, #0
 802adc8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802adcc:	189b      	adds	r3, r3, r2
 802adce:	9308      	str	r3, [sp, #32]
 802add0:	bf5d      	ittte	pl
 802add2:	eba3 030b 	subpl.w	r3, r3, fp
 802add6:	9308      	strpl	r3, [sp, #32]
 802add8:	9b05      	ldrpl	r3, [sp, #20]
 802adda:	9b05      	ldrmi	r3, [sp, #20]
 802addc:	9902      	ldr	r1, [sp, #8]
 802adde:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802ade2:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802ade6:	bf58      	it	pl
 802ade8:	3301      	addpl	r3, #1
 802adea:	9300      	str	r3, [sp, #0]
 802adec:	e9dd 2300 	ldrd	r2, r3, [sp]
 802adf0:	4413      	add	r3, r2
 802adf2:	9301      	str	r3, [sp, #4]
 802adf4:	115b      	asrs	r3, r3, #5
 802adf6:	9306      	str	r3, [sp, #24]
 802adf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802adfa:	428b      	cmp	r3, r1
 802adfc:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 802ae00:	f040 8186 	bne.w	802b110 <_ZN8touchgfx7Outline10renderLineEiiii+0x860>
 802ae04:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 802ae08:	fa0f f389 	sxth.w	r3, r9
 802ae0c:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 802ae10:	4541      	cmp	r1, r8
 802ae12:	d017      	beq.n	802ae44 <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802ae14:	8b60      	ldrh	r0, [r4, #26]
 802ae16:	8b21      	ldrh	r1, [r4, #24]
 802ae18:	4301      	orrs	r1, r0
 802ae1a:	d00d      	beq.n	802ae38 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802ae1c:	2e00      	cmp	r6, #0
 802ae1e:	db0b      	blt.n	802ae38 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802ae20:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ae22:	42b1      	cmp	r1, r6
 802ae24:	dd08      	ble.n	802ae38 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802ae26:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802ae2a:	4288      	cmp	r0, r1
 802ae2c:	f0c0 8163 	bcc.w	802b0f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x846>
 802ae30:	f04f 0101 	mov.w	r1, #1
 802ae34:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802ae38:	82a2      	strh	r2, [r4, #20]
 802ae3a:	82e3      	strh	r3, [r4, #22]
 802ae3c:	f8a4 a018 	strh.w	sl, [r4, #24]
 802ae40:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802ae44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ae46:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802ae4a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802ae4e:	4499      	add	r9, r3
 802ae50:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802ae54:	fa0f f589 	sxth.w	r5, r9
 802ae58:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802ae5c:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 802ae60:	4281      	cmp	r1, r0
 802ae62:	f43f add8 	beq.w	802aa16 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802ae66:	8b60      	ldrh	r0, [r4, #26]
 802ae68:	8b21      	ldrh	r1, [r4, #24]
 802ae6a:	4301      	orrs	r1, r0
 802ae6c:	d00d      	beq.n	802ae8a <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802ae6e:	2a00      	cmp	r2, #0
 802ae70:	db0b      	blt.n	802ae8a <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802ae72:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ae74:	428a      	cmp	r2, r1
 802ae76:	da08      	bge.n	802ae8a <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802ae78:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802ae7c:	4291      	cmp	r1, r2
 802ae7e:	f0c0 8230 	bcc.w	802b2e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa32>
 802ae82:	f04f 0201 	mov.w	r2, #1
 802ae86:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802ae8a:	82a3      	strh	r3, [r4, #20]
 802ae8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802ae8e:	82e5      	strh	r5, [r4, #22]
 802ae90:	454b      	cmp	r3, r9
 802ae92:	f8a4 a018 	strh.w	sl, [r4, #24]
 802ae96:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802ae9a:	f8dd c004 	ldr.w	ip, [sp, #4]
 802ae9e:	d193      	bne.n	802adc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x518>
 802aea0:	9b02      	ldr	r3, [sp, #8]
 802aea2:	f1c3 0e20 	rsb	lr, r3, #32
 802aea6:	9b04      	ldr	r3, [sp, #16]
 802aea8:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802aeac:	9b03      	ldr	r3, [sp, #12]
 802aeae:	459e      	cmp	lr, r3
 802aeb0:	f040 8231 	bne.w	802b316 <_ZN8touchgfx7Outline10renderLineEiiii+0xa66>
 802aeb4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802aeb8:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802aebc:	fa0f f58b 	sxth.w	r5, fp
 802aec0:	fa0f f289 	sxth.w	r2, r9
 802aec4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802aec8:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 802aecc:	4281      	cmp	r1, r0
 802aece:	f43f ae22 	beq.w	802ab16 <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802aed2:	8b60      	ldrh	r0, [r4, #26]
 802aed4:	8b21      	ldrh	r1, [r4, #24]
 802aed6:	4301      	orrs	r1, r0
 802aed8:	d00c      	beq.n	802aef4 <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802aeda:	2b00      	cmp	r3, #0
 802aedc:	db0a      	blt.n	802aef4 <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802aede:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802aee0:	428b      	cmp	r3, r1
 802aee2:	da07      	bge.n	802aef4 <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802aee4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802aee8:	4299      	cmp	r1, r3
 802aeea:	f0c0 8207 	bcc.w	802b2fc <_ZN8touchgfx7Outline10renderLineEiiii+0xa4c>
 802aeee:	2301      	movs	r3, #1
 802aef0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802aef4:	82a5      	strh	r5, [r4, #20]
 802aef6:	e535      	b.n	802a964 <_ZN8touchgfx7Outline10renderLineEiiii+0xb4>
 802aef8:	f04f 32ff 	mov.w	r2, #4294967295
 802aefc:	920b      	str	r2, [sp, #44]	; 0x2c
 802aefe:	fb0a f306 	mul.w	r3, sl, r6
 802af02:	f1cb 0b00 	rsb	fp, fp, #0
 802af06:	2200      	movs	r2, #0
 802af08:	e6d9      	b.n	802acbe <_ZN8touchgfx7Outline10renderLineEiiii+0x40e>
 802af0a:	f104 0514 	add.w	r5, r4, #20
 802af0e:	cd03      	ldmia	r5!, {r0, r1}
 802af10:	6926      	ldr	r6, [r4, #16]
 802af12:	6030      	str	r0, [r6, #0]
 802af14:	6071      	str	r1, [r6, #4]
 802af16:	6921      	ldr	r1, [r4, #16]
 802af18:	3108      	adds	r1, #8
 802af1a:	6121      	str	r1, [r4, #16]
 802af1c:	68a1      	ldr	r1, [r4, #8]
 802af1e:	3101      	adds	r1, #1
 802af20:	60a1      	str	r1, [r4, #8]
 802af22:	e702      	b.n	802ad2a <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802af24:	9b01      	ldr	r3, [sp, #4]
 802af26:	8b20      	ldrh	r0, [r4, #24]
 802af28:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802af2c:	f003 031f 	and.w	r3, r3, #31
 802af30:	930d      	str	r3, [sp, #52]	; 0x34
 802af32:	9b02      	ldr	r3, [sp, #8]
 802af34:	1b9a      	subs	r2, r3, r6
 802af36:	9b05      	ldr	r3, [sp, #20]
 802af38:	42ab      	cmp	r3, r5
 802af3a:	f001 011f 	and.w	r1, r1, #31
 802af3e:	d107      	bne.n	802af50 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a0>
 802af40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802af42:	4419      	add	r1, r3
 802af44:	4410      	add	r0, r2
 802af46:	fb02 9201 	mla	r2, r2, r1, r9
 802af4a:	8320      	strh	r0, [r4, #24]
 802af4c:	8362      	strh	r2, [r4, #26]
 802af4e:	e6f1      	b.n	802ad34 <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802af50:	f1bc 0f00 	cmp.w	ip, #0
 802af54:	f2c0 8099 	blt.w	802b08a <_ZN8touchgfx7Outline10renderLineEiiii+0x7da>
 802af58:	f1c1 0320 	rsb	r3, r1, #32
 802af5c:	435a      	muls	r2, r3
 802af5e:	2301      	movs	r3, #1
 802af60:	9309      	str	r3, [sp, #36]	; 0x24
 802af62:	2320      	movs	r3, #32
 802af64:	9307      	str	r3, [sp, #28]
 802af66:	fb92 fefc 	sdiv	lr, r2, ip
 802af6a:	9b07      	ldr	r3, [sp, #28]
 802af6c:	fb0c 221e 	mls	r2, ip, lr, r2
 802af70:	2a00      	cmp	r2, #0
 802af72:	bfb8      	it	lt
 802af74:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802af78:	4419      	add	r1, r3
 802af7a:	fb0e 9101 	mla	r1, lr, r1, r9
 802af7e:	b20b      	sxth	r3, r1
 802af80:	9909      	ldr	r1, [sp, #36]	; 0x24
 802af82:	8363      	strh	r3, [r4, #26]
 802af84:	440d      	add	r5, r1
 802af86:	f9bd 1000 	ldrsh.w	r1, [sp]
 802af8a:	9106      	str	r1, [sp, #24]
 802af8c:	fa0f f985 	sxth.w	r9, r5
 802af90:	ea4f 4101 	mov.w	r1, r1, lsl #16
 802af94:	4470      	add	r0, lr
 802af96:	910a      	str	r1, [sp, #40]	; 0x28
 802af98:	4449      	add	r1, r9
 802af9a:	bfb8      	it	lt
 802af9c:	4462      	addlt	r2, ip
 802af9e:	b200      	sxth	r0, r0
 802afa0:	42b9      	cmp	r1, r7
 802afa2:	8320      	strh	r0, [r4, #24]
 802afa4:	f43f ad37 	beq.w	802aa16 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802afa8:	4303      	orrs	r3, r0
 802afaa:	d00c      	beq.n	802afc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802afac:	f1b8 0f00 	cmp.w	r8, #0
 802afb0:	db09      	blt.n	802afc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802afb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802afb4:	4543      	cmp	r3, r8
 802afb6:	dd06      	ble.n	802afc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802afb8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802afbc:	4299      	cmp	r1, r3
 802afbe:	d36c      	bcc.n	802b09a <_ZN8touchgfx7Outline10renderLineEiiii+0x7ea>
 802afc0:	2301      	movs	r3, #1
 802afc2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802afc6:	9b06      	ldr	r3, [sp, #24]
 802afc8:	82e3      	strh	r3, [r4, #22]
 802afca:	2300      	movs	r3, #0
 802afcc:	8323      	strh	r3, [r4, #24]
 802afce:	8363      	strh	r3, [r4, #26]
 802afd0:	9b05      	ldr	r3, [sp, #20]
 802afd2:	f8a4 9014 	strh.w	r9, [r4, #20]
 802afd6:	42ab      	cmp	r3, r5
 802afd8:	4476      	add	r6, lr
 802afda:	d04c      	beq.n	802b076 <_ZN8touchgfx7Outline10renderLineEiiii+0x7c6>
 802afdc:	9b02      	ldr	r3, [sp, #8]
 802afde:	1b9b      	subs	r3, r3, r6
 802afe0:	4473      	add	r3, lr
 802afe2:	015b      	lsls	r3, r3, #5
 802afe4:	fb93 f8fc 	sdiv	r8, r3, ip
 802afe8:	fb0c 3318 	mls	r3, ip, r8, r3
 802afec:	2b00      	cmp	r3, #0
 802afee:	bfb8      	it	lt
 802aff0:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802aff4:	f108 0101 	add.w	r1, r8, #1
 802aff8:	bfb8      	it	lt
 802affa:	4463      	addlt	r3, ip
 802affc:	eba2 020c 	sub.w	r2, r2, ip
 802b000:	910f      	str	r1, [sp, #60]	; 0x3c
 802b002:	18d2      	adds	r2, r2, r3
 802b004:	bf58      	it	pl
 802b006:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 802b008:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802b00a:	bf48      	it	mi
 802b00c:	4640      	movmi	r0, r8
 802b00e:	fa0f fe80 	sxth.w	lr, r0
 802b012:	ea4f 1140 	mov.w	r1, r0, lsl #5
 802b016:	4406      	add	r6, r0
 802b018:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b01a:	f8a4 e018 	strh.w	lr, [r4, #24]
 802b01e:	4405      	add	r5, r0
 802b020:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802b024:	fa0f f985 	sxth.w	r9, r5
 802b028:	4438      	add	r0, r7
 802b02a:	444f      	add	r7, r9
 802b02c:	bf58      	it	pl
 802b02e:	eba2 020c 	subpl.w	r2, r2, ip
 802b032:	b209      	sxth	r1, r1
 802b034:	42b8      	cmp	r0, r7
 802b036:	8361      	strh	r1, [r4, #26]
 802b038:	f43f aced 	beq.w	802aa16 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802b03c:	ea5e 0101 	orrs.w	r1, lr, r1
 802b040:	d00e      	beq.n	802b060 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802b042:	9906      	ldr	r1, [sp, #24]
 802b044:	2900      	cmp	r1, #0
 802b046:	db0b      	blt.n	802b060 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802b048:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802b04a:	9806      	ldr	r0, [sp, #24]
 802b04c:	4288      	cmp	r0, r1
 802b04e:	da07      	bge.n	802b060 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802b050:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802b054:	4288      	cmp	r0, r1
 802b056:	d330      	bcc.n	802b0ba <_ZN8touchgfx7Outline10renderLineEiiii+0x80a>
 802b058:	f04f 0101 	mov.w	r1, #1
 802b05c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802b060:	9906      	ldr	r1, [sp, #24]
 802b062:	82e1      	strh	r1, [r4, #22]
 802b064:	f04f 0100 	mov.w	r1, #0
 802b068:	8321      	strh	r1, [r4, #24]
 802b06a:	8361      	strh	r1, [r4, #26]
 802b06c:	9905      	ldr	r1, [sp, #20]
 802b06e:	f8a4 9014 	strh.w	r9, [r4, #20]
 802b072:	42a9      	cmp	r1, r5
 802b074:	d1c5      	bne.n	802b002 <_ZN8touchgfx7Outline10renderLineEiiii+0x752>
 802b076:	9b02      	ldr	r3, [sp, #8]
 802b078:	990d      	ldr	r1, [sp, #52]	; 0x34
 802b07a:	1b9e      	subs	r6, r3, r6
 802b07c:	9b07      	ldr	r3, [sp, #28]
 802b07e:	8326      	strh	r6, [r4, #24]
 802b080:	3120      	adds	r1, #32
 802b082:	1ac9      	subs	r1, r1, r3
 802b084:	434e      	muls	r6, r1
 802b086:	8366      	strh	r6, [r4, #26]
 802b088:	e654      	b.n	802ad34 <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802b08a:	f04f 33ff 	mov.w	r3, #4294967295
 802b08e:	9309      	str	r3, [sp, #36]	; 0x24
 802b090:	434a      	muls	r2, r1
 802b092:	f1cc 0c00 	rsb	ip, ip, #0
 802b096:	2300      	movs	r3, #0
 802b098:	e764      	b.n	802af64 <_ZN8touchgfx7Outline10renderLineEiiii+0x6b4>
 802b09a:	f104 0314 	add.w	r3, r4, #20
 802b09e:	cb03      	ldmia	r3!, {r0, r1}
 802b0a0:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802b0a4:	f8c8 0000 	str.w	r0, [r8]
 802b0a8:	f8c8 1004 	str.w	r1, [r8, #4]
 802b0ac:	6923      	ldr	r3, [r4, #16]
 802b0ae:	3308      	adds	r3, #8
 802b0b0:	6123      	str	r3, [r4, #16]
 802b0b2:	68a3      	ldr	r3, [r4, #8]
 802b0b4:	3301      	adds	r3, #1
 802b0b6:	60a3      	str	r3, [r4, #8]
 802b0b8:	e785      	b.n	802afc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802b0ba:	6921      	ldr	r1, [r4, #16]
 802b0bc:	910e      	str	r1, [sp, #56]	; 0x38
 802b0be:	f104 0e14 	add.w	lr, r4, #20
 802b0c2:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802b0c6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802b0c8:	6038      	str	r0, [r7, #0]
 802b0ca:	6079      	str	r1, [r7, #4]
 802b0cc:	6921      	ldr	r1, [r4, #16]
 802b0ce:	3108      	adds	r1, #8
 802b0d0:	6121      	str	r1, [r4, #16]
 802b0d2:	68a1      	ldr	r1, [r4, #8]
 802b0d4:	3101      	adds	r1, #1
 802b0d6:	4638      	mov	r0, r7
 802b0d8:	60a1      	str	r1, [r4, #8]
 802b0da:	e7c1      	b.n	802b060 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802b0dc:	f104 0214 	add.w	r2, r4, #20
 802b0e0:	ca03      	ldmia	r2!, {r0, r1}
 802b0e2:	6926      	ldr	r6, [r4, #16]
 802b0e4:	6030      	str	r0, [r6, #0]
 802b0e6:	6071      	str	r1, [r6, #4]
 802b0e8:	6922      	ldr	r2, [r4, #16]
 802b0ea:	3208      	adds	r2, #8
 802b0ec:	6122      	str	r2, [r4, #16]
 802b0ee:	68a2      	ldr	r2, [r4, #8]
 802b0f0:	3201      	adds	r2, #1
 802b0f2:	60a2      	str	r2, [r4, #8]
 802b0f4:	e641      	b.n	802ad7a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802b0f6:	f104 0514 	add.w	r5, r4, #20
 802b0fa:	cd03      	ldmia	r5!, {r0, r1}
 802b0fc:	6926      	ldr	r6, [r4, #16]
 802b0fe:	6030      	str	r0, [r6, #0]
 802b100:	6071      	str	r1, [r6, #4]
 802b102:	6921      	ldr	r1, [r4, #16]
 802b104:	3108      	adds	r1, #8
 802b106:	6121      	str	r1, [r4, #16]
 802b108:	68a1      	ldr	r1, [r4, #8]
 802b10a:	3101      	adds	r1, #1
 802b10c:	60a1      	str	r1, [r4, #8]
 802b10e:	e693      	b.n	802ae38 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802b110:	9b01      	ldr	r3, [sp, #4]
 802b112:	8b20      	ldrh	r0, [r4, #24]
 802b114:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 802b118:	f003 031f 	and.w	r3, r3, #31
 802b11c:	9310      	str	r3, [sp, #64]	; 0x40
 802b11e:	9b06      	ldr	r3, [sp, #24]
 802b120:	ea4f 176c 	mov.w	r7, ip, asr #5
 802b124:	429f      	cmp	r7, r3
 802b126:	f00c 0c1f 	and.w	ip, ip, #31
 802b12a:	d10a      	bne.n	802b142 <_ZN8touchgfx7Outline10renderLineEiiii+0x892>
 802b12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b12e:	4418      	add	r0, r3
 802b130:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802b132:	8320      	strh	r0, [r4, #24]
 802b134:	449c      	add	ip, r3
 802b136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b138:	fb03 ee0c 	mla	lr, r3, ip, lr
 802b13c:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802b140:	e680      	b.n	802ae44 <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802b142:	9b00      	ldr	r3, [sp, #0]
 802b144:	2b00      	cmp	r3, #0
 802b146:	f2c0 80a2 	blt.w	802b28e <_ZN8touchgfx7Outline10renderLineEiiii+0x9de>
 802b14a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802b14c:	f1cc 0320 	rsb	r3, ip, #32
 802b150:	434b      	muls	r3, r1
 802b152:	2101      	movs	r1, #1
 802b154:	910e      	str	r1, [sp, #56]	; 0x38
 802b156:	2120      	movs	r1, #32
 802b158:	9a00      	ldr	r2, [sp, #0]
 802b15a:	910d      	str	r1, [sp, #52]	; 0x34
 802b15c:	fb93 f5f2 	sdiv	r5, r3, r2
 802b160:	990d      	ldr	r1, [sp, #52]	; 0x34
 802b162:	fb02 3315 	mls	r3, r2, r5, r3
 802b166:	2b00      	cmp	r3, #0
 802b168:	bfbc      	itt	lt
 802b16a:	f105 35ff 	addlt.w	r5, r5, #4294967295
 802b16e:	189b      	addlt	r3, r3, r2
 802b170:	448c      	add	ip, r1
 802b172:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b174:	fb05 ec0c 	mla	ip, r5, ip, lr
 802b178:	fa0f f18c 	sxth.w	r1, ip
 802b17c:	4417      	add	r7, r2
 802b17e:	fa0f fc89 	sxth.w	ip, r9
 802b182:	ea4f 420c 	mov.w	r2, ip, lsl #16
 802b186:	fa0f fe87 	sxth.w	lr, r7
 802b18a:	4428      	add	r0, r5
 802b18c:	920f      	str	r2, [sp, #60]	; 0x3c
 802b18e:	4472      	add	r2, lr
 802b190:	b200      	sxth	r0, r0
 802b192:	4542      	cmp	r2, r8
 802b194:	8320      	strh	r0, [r4, #24]
 802b196:	8361      	strh	r1, [r4, #26]
 802b198:	f43f ac3d 	beq.w	802aa16 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802b19c:	ea50 0201 	orrs.w	r2, r0, r1
 802b1a0:	d00c      	beq.n	802b1bc <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802b1a2:	2e00      	cmp	r6, #0
 802b1a4:	db0a      	blt.n	802b1bc <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802b1a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802b1a8:	42b1      	cmp	r1, r6
 802b1aa:	dd07      	ble.n	802b1bc <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802b1ac:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802b1b0:	4288      	cmp	r0, r1
 802b1b2:	d377      	bcc.n	802b2a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9f4>
 802b1b4:	f04f 0201 	mov.w	r2, #1
 802b1b8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802b1bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802b1be:	f8a4 e014 	strh.w	lr, [r4, #20]
 802b1c2:	1956      	adds	r6, r2, r5
 802b1c4:	9a06      	ldr	r2, [sp, #24]
 802b1c6:	f8a4 c016 	strh.w	ip, [r4, #22]
 802b1ca:	42ba      	cmp	r2, r7
 802b1cc:	f8a4 a018 	strh.w	sl, [r4, #24]
 802b1d0:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802b1d4:	d04e      	beq.n	802b274 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c4>
 802b1d6:	9a02      	ldr	r2, [sp, #8]
 802b1d8:	1b91      	subs	r1, r2, r6
 802b1da:	440d      	add	r5, r1
 802b1dc:	9a00      	ldr	r2, [sp, #0]
 802b1de:	016d      	lsls	r5, r5, #5
 802b1e0:	fb95 fef2 	sdiv	lr, r5, r2
 802b1e4:	fb02 551e 	mls	r5, r2, lr, r5
 802b1e8:	2d00      	cmp	r5, #0
 802b1ea:	bfb8      	it	lt
 802b1ec:	18ad      	addlt	r5, r5, r2
 802b1ee:	9a00      	ldr	r2, [sp, #0]
 802b1f0:	bfb8      	it	lt
 802b1f2:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802b1f6:	1a9b      	subs	r3, r3, r2
 802b1f8:	f10e 0201 	add.w	r2, lr, #1
 802b1fc:	9213      	str	r2, [sp, #76]	; 0x4c
 802b1fe:	195b      	adds	r3, r3, r5
 802b200:	bf5e      	ittt	pl
 802b202:	9a00      	ldrpl	r2, [sp, #0]
 802b204:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 802b206:	1a9b      	subpl	r3, r3, r2
 802b208:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b20a:	4417      	add	r7, r2
 802b20c:	bf48      	it	mi
 802b20e:	4670      	movmi	r0, lr
 802b210:	b23a      	sxth	r2, r7
 802b212:	fa0f f880 	sxth.w	r8, r0
 802b216:	0141      	lsls	r1, r0, #5
 802b218:	9211      	str	r2, [sp, #68]	; 0x44
 802b21a:	4406      	add	r6, r0
 802b21c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802b21e:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802b222:	f8a4 8018 	strh.w	r8, [r4, #24]
 802b226:	1882      	adds	r2, r0, r2
 802b228:	9212      	str	r2, [sp, #72]	; 0x48
 802b22a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802b22c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802b22e:	4402      	add	r2, r0
 802b230:	9812      	ldr	r0, [sp, #72]	; 0x48
 802b232:	b209      	sxth	r1, r1
 802b234:	4290      	cmp	r0, r2
 802b236:	8361      	strh	r1, [r4, #26]
 802b238:	f43f abed 	beq.w	802aa16 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802b23c:	ea58 0201 	orrs.w	r2, r8, r1
 802b240:	d00d      	beq.n	802b25e <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802b242:	f1bc 0f00 	cmp.w	ip, #0
 802b246:	db0a      	blt.n	802b25e <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802b248:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802b24a:	458c      	cmp	ip, r1
 802b24c:	da07      	bge.n	802b25e <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802b24e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802b252:	4288      	cmp	r0, r1
 802b254:	d336      	bcc.n	802b2c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa14>
 802b256:	f04f 0201 	mov.w	r2, #1
 802b25a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802b25e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802b260:	82a2      	strh	r2, [r4, #20]
 802b262:	9a06      	ldr	r2, [sp, #24]
 802b264:	f8a4 c016 	strh.w	ip, [r4, #22]
 802b268:	42ba      	cmp	r2, r7
 802b26a:	f8a4 a018 	strh.w	sl, [r4, #24]
 802b26e:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802b272:	d1c4      	bne.n	802b1fe <_ZN8touchgfx7Outline10renderLineEiiii+0x94e>
 802b274:	9b02      	ldr	r3, [sp, #8]
 802b276:	1b9e      	subs	r6, r3, r6
 802b278:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802b27a:	8326      	strh	r6, [r4, #24]
 802b27c:	f103 0c20 	add.w	ip, r3, #32
 802b280:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b282:	ebac 0c03 	sub.w	ip, ip, r3
 802b286:	fb06 f60c 	mul.w	r6, r6, ip
 802b28a:	8366      	strh	r6, [r4, #26]
 802b28c:	e5da      	b.n	802ae44 <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802b28e:	9a00      	ldr	r2, [sp, #0]
 802b290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b292:	f04f 31ff 	mov.w	r1, #4294967295
 802b296:	4252      	negs	r2, r2
 802b298:	910e      	str	r1, [sp, #56]	; 0x38
 802b29a:	fb03 f30c 	mul.w	r3, r3, ip
 802b29e:	9200      	str	r2, [sp, #0]
 802b2a0:	2100      	movs	r1, #0
 802b2a2:	e759      	b.n	802b158 <_ZN8touchgfx7Outline10renderLineEiiii+0x8a8>
 802b2a4:	f104 0614 	add.w	r6, r4, #20
 802b2a8:	ce03      	ldmia	r6!, {r0, r1}
 802b2aa:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802b2ae:	f8c8 0000 	str.w	r0, [r8]
 802b2b2:	f8c8 1004 	str.w	r1, [r8, #4]
 802b2b6:	6921      	ldr	r1, [r4, #16]
 802b2b8:	3108      	adds	r1, #8
 802b2ba:	6121      	str	r1, [r4, #16]
 802b2bc:	68a1      	ldr	r1, [r4, #8]
 802b2be:	3101      	adds	r1, #1
 802b2c0:	60a1      	str	r1, [r4, #8]
 802b2c2:	e77b      	b.n	802b1bc <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802b2c4:	f104 0814 	add.w	r8, r4, #20
 802b2c8:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802b2cc:	6922      	ldr	r2, [r4, #16]
 802b2ce:	9212      	str	r2, [sp, #72]	; 0x48
 802b2d0:	6010      	str	r0, [r2, #0]
 802b2d2:	6051      	str	r1, [r2, #4]
 802b2d4:	6921      	ldr	r1, [r4, #16]
 802b2d6:	3108      	adds	r1, #8
 802b2d8:	6121      	str	r1, [r4, #16]
 802b2da:	68a1      	ldr	r1, [r4, #8]
 802b2dc:	3101      	adds	r1, #1
 802b2de:	60a1      	str	r1, [r4, #8]
 802b2e0:	e7bd      	b.n	802b25e <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802b2e2:	f104 0214 	add.w	r2, r4, #20
 802b2e6:	ca03      	ldmia	r2!, {r0, r1}
 802b2e8:	6926      	ldr	r6, [r4, #16]
 802b2ea:	6030      	str	r0, [r6, #0]
 802b2ec:	6071      	str	r1, [r6, #4]
 802b2ee:	6922      	ldr	r2, [r4, #16]
 802b2f0:	3208      	adds	r2, #8
 802b2f2:	6122      	str	r2, [r4, #16]
 802b2f4:	68a2      	ldr	r2, [r4, #8]
 802b2f6:	3201      	adds	r2, #1
 802b2f8:	60a2      	str	r2, [r4, #8]
 802b2fa:	e5c6      	b.n	802ae8a <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802b2fc:	f104 0314 	add.w	r3, r4, #20
 802b300:	cb03      	ldmia	r3!, {r0, r1}
 802b302:	6926      	ldr	r6, [r4, #16]
 802b304:	6030      	str	r0, [r6, #0]
 802b306:	6071      	str	r1, [r6, #4]
 802b308:	6923      	ldr	r3, [r4, #16]
 802b30a:	3308      	adds	r3, #8
 802b30c:	6123      	str	r3, [r4, #16]
 802b30e:	68a3      	ldr	r3, [r4, #8]
 802b310:	3301      	adds	r3, #1
 802b312:	60a3      	str	r3, [r4, #8]
 802b314:	e5ee      	b.n	802aef4 <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802b316:	9b01      	ldr	r3, [sp, #4]
 802b318:	8b20      	ldrh	r0, [r4, #24]
 802b31a:	8b66      	ldrh	r6, [r4, #26]
 802b31c:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802b320:	f003 021f 	and.w	r2, r3, #31
 802b324:	9b04      	ldr	r3, [sp, #16]
 802b326:	f003 031f 	and.w	r3, r3, #31
 802b32a:	9305      	str	r3, [sp, #20]
 802b32c:	9b03      	ldr	r3, [sp, #12]
 802b32e:	45dc      	cmp	ip, fp
 802b330:	eba3 050e 	sub.w	r5, r3, lr
 802b334:	d108      	bne.n	802b348 <_ZN8touchgfx7Outline10renderLineEiiii+0xa98>
 802b336:	9b05      	ldr	r3, [sp, #20]
 802b338:	441a      	add	r2, r3
 802b33a:	4428      	add	r0, r5
 802b33c:	fb05 6502 	mla	r5, r5, r2, r6
 802b340:	8320      	strh	r0, [r4, #24]
 802b342:	8365      	strh	r5, [r4, #26]
 802b344:	f7ff bbe7 	b.w	802ab16 <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802b348:	9b04      	ldr	r3, [sp, #16]
 802b34a:	9901      	ldr	r1, [sp, #4]
 802b34c:	1a5b      	subs	r3, r3, r1
 802b34e:	9300      	str	r3, [sp, #0]
 802b350:	f100 809f 	bmi.w	802b492 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe2>
 802b354:	f1c2 0120 	rsb	r1, r2, #32
 802b358:	434d      	muls	r5, r1
 802b35a:	2101      	movs	r1, #1
 802b35c:	9102      	str	r1, [sp, #8]
 802b35e:	2120      	movs	r1, #32
 802b360:	9b00      	ldr	r3, [sp, #0]
 802b362:	9101      	str	r1, [sp, #4]
 802b364:	fb95 f7f3 	sdiv	r7, r5, r3
 802b368:	9901      	ldr	r1, [sp, #4]
 802b36a:	fb03 5517 	mls	r5, r3, r7, r5
 802b36e:	2d00      	cmp	r5, #0
 802b370:	bfb8      	it	lt
 802b372:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802b376:	440a      	add	r2, r1
 802b378:	fb07 6202 	mla	r2, r7, r2, r6
 802b37c:	b211      	sxth	r1, r2
 802b37e:	9a02      	ldr	r2, [sp, #8]
 802b380:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802b384:	8361      	strh	r1, [r4, #26]
 802b386:	4494      	add	ip, r2
 802b388:	fa0f f289 	sxth.w	r2, r9
 802b38c:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802b390:	bfb8      	it	lt
 802b392:	18ed      	addlt	r5, r5, r3
 802b394:	fa0f f88c 	sxth.w	r8, ip
 802b398:	0413      	lsls	r3, r2, #16
 802b39a:	4438      	add	r0, r7
 802b39c:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 802b3a0:	eb08 0a03 	add.w	sl, r8, r3
 802b3a4:	b200      	sxth	r0, r0
 802b3a6:	45d1      	cmp	r9, sl
 802b3a8:	8320      	strh	r0, [r4, #24]
 802b3aa:	9304      	str	r3, [sp, #16]
 802b3ac:	f43f ab33 	beq.w	802aa16 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802b3b0:	ea50 0301 	orrs.w	r3, r0, r1
 802b3b4:	d00b      	beq.n	802b3ce <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802b3b6:	2e00      	cmp	r6, #0
 802b3b8:	db09      	blt.n	802b3ce <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802b3ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802b3bc:	428e      	cmp	r6, r1
 802b3be:	da06      	bge.n	802b3ce <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802b3c0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802b3c4:	4288      	cmp	r0, r1
 802b3c6:	d36d      	bcc.n	802b4a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xbf4>
 802b3c8:	2101      	movs	r1, #1
 802b3ca:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802b3ce:	2100      	movs	r1, #0
 802b3d0:	45e3      	cmp	fp, ip
 802b3d2:	f8a4 8014 	strh.w	r8, [r4, #20]
 802b3d6:	82e2      	strh	r2, [r4, #22]
 802b3d8:	8321      	strh	r1, [r4, #24]
 802b3da:	8361      	strh	r1, [r4, #26]
 802b3dc:	44be      	add	lr, r7
 802b3de:	d049      	beq.n	802b474 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc4>
 802b3e0:	9b03      	ldr	r3, [sp, #12]
 802b3e2:	eba3 060e 	sub.w	r6, r3, lr
 802b3e6:	443e      	add	r6, r7
 802b3e8:	9b00      	ldr	r3, [sp, #0]
 802b3ea:	0176      	lsls	r6, r6, #5
 802b3ec:	fb96 f7f3 	sdiv	r7, r6, r3
 802b3f0:	fb03 6617 	mls	r6, r3, r7, r6
 802b3f4:	428e      	cmp	r6, r1
 802b3f6:	bfb8      	it	lt
 802b3f8:	18f6      	addlt	r6, r6, r3
 802b3fa:	9b00      	ldr	r3, [sp, #0]
 802b3fc:	bfb8      	it	lt
 802b3fe:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802b402:	1aed      	subs	r5, r5, r3
 802b404:	1c7b      	adds	r3, r7, #1
 802b406:	9307      	str	r3, [sp, #28]
 802b408:	f04f 0900 	mov.w	r9, #0
 802b40c:	19ad      	adds	r5, r5, r6
 802b40e:	bf5e      	ittt	pl
 802b410:	9b00      	ldrpl	r3, [sp, #0]
 802b412:	9807      	ldrpl	r0, [sp, #28]
 802b414:	1aed      	subpl	r5, r5, r3
 802b416:	9b02      	ldr	r3, [sp, #8]
 802b418:	bf48      	it	mi
 802b41a:	4638      	movmi	r0, r7
 802b41c:	fa0f f880 	sxth.w	r8, r0
 802b420:	0141      	lsls	r1, r0, #5
 802b422:	449c      	add	ip, r3
 802b424:	4486      	add	lr, r0
 802b426:	9b04      	ldr	r3, [sp, #16]
 802b428:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802b42c:	f8a4 8018 	strh.w	r8, [r4, #24]
 802b430:	fa0f fa8c 	sxth.w	sl, ip
 802b434:	4418      	add	r0, r3
 802b436:	4453      	add	r3, sl
 802b438:	b209      	sxth	r1, r1
 802b43a:	4298      	cmp	r0, r3
 802b43c:	8361      	strh	r1, [r4, #26]
 802b43e:	f43f aaea 	beq.w	802aa16 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802b442:	ea58 0301 	orrs.w	r3, r8, r1
 802b446:	d00c      	beq.n	802b462 <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802b448:	2a00      	cmp	r2, #0
 802b44a:	db0a      	blt.n	802b462 <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802b44c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802b44e:	428a      	cmp	r2, r1
 802b450:	da07      	bge.n	802b462 <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802b452:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802b456:	4288      	cmp	r0, r1
 802b458:	d334      	bcc.n	802b4c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xc14>
 802b45a:	f04f 0301 	mov.w	r3, #1
 802b45e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802b462:	45e3      	cmp	fp, ip
 802b464:	f8a4 a014 	strh.w	sl, [r4, #20]
 802b468:	82e2      	strh	r2, [r4, #22]
 802b46a:	f8a4 9018 	strh.w	r9, [r4, #24]
 802b46e:	f8a4 901a 	strh.w	r9, [r4, #26]
 802b472:	d1cb      	bne.n	802b40c <_ZN8touchgfx7Outline10renderLineEiiii+0xb5c>
 802b474:	9b03      	ldr	r3, [sp, #12]
 802b476:	9e05      	ldr	r6, [sp, #20]
 802b478:	eba3 0e0e 	sub.w	lr, r3, lr
 802b47c:	9b01      	ldr	r3, [sp, #4]
 802b47e:	f8a4 e018 	strh.w	lr, [r4, #24]
 802b482:	3620      	adds	r6, #32
 802b484:	1af6      	subs	r6, r6, r3
 802b486:	fb0e fe06 	mul.w	lr, lr, r6
 802b48a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802b48e:	f7ff bb42 	b.w	802ab16 <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802b492:	9b00      	ldr	r3, [sp, #0]
 802b494:	f04f 31ff 	mov.w	r1, #4294967295
 802b498:	425b      	negs	r3, r3
 802b49a:	9102      	str	r1, [sp, #8]
 802b49c:	4355      	muls	r5, r2
 802b49e:	9300      	str	r3, [sp, #0]
 802b4a0:	2100      	movs	r1, #0
 802b4a2:	e75d      	b.n	802b360 <_ZN8touchgfx7Outline10renderLineEiiii+0xab0>
 802b4a4:	f104 0614 	add.w	r6, r4, #20
 802b4a8:	ce03      	ldmia	r6!, {r0, r1}
 802b4aa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802b4ae:	f8c9 0000 	str.w	r0, [r9]
 802b4b2:	f8c9 1004 	str.w	r1, [r9, #4]
 802b4b6:	6921      	ldr	r1, [r4, #16]
 802b4b8:	3108      	adds	r1, #8
 802b4ba:	6121      	str	r1, [r4, #16]
 802b4bc:	68a1      	ldr	r1, [r4, #8]
 802b4be:	3101      	adds	r1, #1
 802b4c0:	60a1      	str	r1, [r4, #8]
 802b4c2:	e784      	b.n	802b3ce <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802b4c4:	f104 0814 	add.w	r8, r4, #20
 802b4c8:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802b4cc:	6923      	ldr	r3, [r4, #16]
 802b4ce:	9306      	str	r3, [sp, #24]
 802b4d0:	6018      	str	r0, [r3, #0]
 802b4d2:	6059      	str	r1, [r3, #4]
 802b4d4:	6921      	ldr	r1, [r4, #16]
 802b4d6:	3108      	adds	r1, #8
 802b4d8:	6121      	str	r1, [r4, #16]
 802b4da:	68a1      	ldr	r1, [r4, #8]
 802b4dc:	3101      	adds	r1, #1
 802b4de:	60a1      	str	r1, [r4, #8]
 802b4e0:	e7bf      	b.n	802b462 <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802b4e2:	bf00      	nop

0802b4e4 <_ZN8touchgfx7Outline6lineToEii>:
 802b4e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b4e6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802b4e8:	079b      	lsls	r3, r3, #30
 802b4ea:	4604      	mov	r4, r0
 802b4ec:	460d      	mov	r5, r1
 802b4ee:	4616      	mov	r6, r2
 802b4f0:	d526      	bpl.n	802b540 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802b4f2:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802b4f6:	ea85 0001 	eor.w	r0, r5, r1
 802b4fa:	ea86 0302 	eor.w	r3, r6, r2
 802b4fe:	4303      	orrs	r3, r0
 802b500:	d01e      	beq.n	802b540 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802b502:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802b504:	9600      	str	r6, [sp, #0]
 802b506:	114b      	asrs	r3, r1, #5
 802b508:	4283      	cmp	r3, r0
 802b50a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802b50c:	bfb8      	it	lt
 802b50e:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802b510:	3301      	adds	r3, #1
 802b512:	4283      	cmp	r3, r0
 802b514:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802b516:	bfc8      	it	gt
 802b518:	6363      	strgt	r3, [r4, #52]	; 0x34
 802b51a:	116b      	asrs	r3, r5, #5
 802b51c:	4283      	cmp	r3, r0
 802b51e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802b520:	bfb8      	it	lt
 802b522:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802b524:	3301      	adds	r3, #1
 802b526:	4283      	cmp	r3, r0
 802b528:	bfc8      	it	gt
 802b52a:	6363      	strgt	r3, [r4, #52]	; 0x34
 802b52c:	4620      	mov	r0, r4
 802b52e:	462b      	mov	r3, r5
 802b530:	f7ff f9be 	bl	802a8b0 <_ZN8touchgfx7Outline10renderLineEiiii>
 802b534:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b536:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802b53a:	f043 0301 	orr.w	r3, r3, #1
 802b53e:	63e3      	str	r3, [r4, #60]	; 0x3c
 802b540:	b002      	add	sp, #8
 802b542:	bd70      	pop	{r4, r5, r6, pc}

0802b544 <_ZN8touchgfx7Outline6moveToEii>:
 802b544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b546:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802b548:	4615      	mov	r5, r2
 802b54a:	079a      	lsls	r2, r3, #30
 802b54c:	4604      	mov	r4, r0
 802b54e:	460e      	mov	r6, r1
 802b550:	d401      	bmi.n	802b556 <_ZN8touchgfx7Outline6moveToEii+0x12>
 802b552:	f7ff f967 	bl	802a824 <_ZN8touchgfx7Outline5resetEv>
 802b556:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b558:	07db      	lsls	r3, r3, #31
 802b55a:	d504      	bpl.n	802b566 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802b55c:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802b560:	4620      	mov	r0, r4
 802b562:	f7ff ffbf 	bl	802b4e4 <_ZN8touchgfx7Outline6lineToEii>
 802b566:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802b56a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802b56e:	f346 1c4f 	sbfx	ip, r6, #5, #16
 802b572:	f345 174f 	sbfx	r7, r5, #5, #16
 802b576:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802b57a:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802b57e:	428a      	cmp	r2, r1
 802b580:	d015      	beq.n	802b5ae <_ZN8touchgfx7Outline6moveToEii+0x6a>
 802b582:	8b61      	ldrh	r1, [r4, #26]
 802b584:	8b22      	ldrh	r2, [r4, #24]
 802b586:	430a      	orrs	r2, r1
 802b588:	d00b      	beq.n	802b5a2 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802b58a:	2b00      	cmp	r3, #0
 802b58c:	db09      	blt.n	802b5a2 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802b58e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802b590:	4293      	cmp	r3, r2
 802b592:	da06      	bge.n	802b5a2 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802b594:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802b598:	429a      	cmp	r2, r3
 802b59a:	d30d      	bcc.n	802b5b8 <_ZN8touchgfx7Outline6moveToEii+0x74>
 802b59c:	2301      	movs	r3, #1
 802b59e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802b5a2:	2300      	movs	r3, #0
 802b5a4:	f8a4 c014 	strh.w	ip, [r4, #20]
 802b5a8:	82e7      	strh	r7, [r4, #22]
 802b5aa:	8323      	strh	r3, [r4, #24]
 802b5ac:	8363      	strh	r3, [r4, #26]
 802b5ae:	61e6      	str	r6, [r4, #28]
 802b5b0:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802b5b4:	62a5      	str	r5, [r4, #40]	; 0x28
 802b5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b5b8:	f104 0314 	add.w	r3, r4, #20
 802b5bc:	cb03      	ldmia	r3!, {r0, r1}
 802b5be:	6922      	ldr	r2, [r4, #16]
 802b5c0:	6010      	str	r0, [r2, #0]
 802b5c2:	6051      	str	r1, [r2, #4]
 802b5c4:	6923      	ldr	r3, [r4, #16]
 802b5c6:	3308      	adds	r3, #8
 802b5c8:	6123      	str	r3, [r4, #16]
 802b5ca:	68a3      	ldr	r3, [r4, #8]
 802b5cc:	3301      	adds	r3, #1
 802b5ce:	60a3      	str	r3, [r4, #8]
 802b5d0:	e7e7      	b.n	802b5a2 <_ZN8touchgfx7Outline6moveToEii+0x5e>

0802b5d2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802b5d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b5d6:	b0d1      	sub	sp, #324	; 0x144
 802b5d8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 802b5dc:	466c      	mov	r4, sp
 802b5de:	1a0d      	subs	r5, r1, r0
 802b5e0:	2d48      	cmp	r5, #72	; 0x48
 802b5e2:	f100 0208 	add.w	r2, r0, #8
 802b5e6:	f340 80bb 	ble.w	802b760 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18e>
 802b5ea:	112d      	asrs	r5, r5, #4
 802b5ec:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802b5f0:	f9b0 8000 	ldrsh.w	r8, [r0]
 802b5f4:	681e      	ldr	r6, [r3, #0]
 802b5f6:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802b5fa:	6006      	str	r6, [r0, #0]
 802b5fc:	685e      	ldr	r6, [r3, #4]
 802b5fe:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 802b602:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802b606:	6046      	str	r6, [r0, #4]
 802b608:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 802b60c:	f8a3 e002 	strh.w	lr, [r3, #2]
 802b610:	f8a3 c004 	strh.w	ip, [r3, #4]
 802b614:	80df      	strh	r7, [r3, #6]
 802b616:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802b61a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802b61e:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802b622:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802b626:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802b62a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802b62e:	4565      	cmp	r5, ip
 802b630:	f1a1 0308 	sub.w	r3, r1, #8
 802b634:	da0f      	bge.n	802b656 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802b636:	681d      	ldr	r5, [r3, #0]
 802b638:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 802b63c:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802b640:	6015      	str	r5, [r2, #0]
 802b642:	685d      	ldr	r5, [r3, #4]
 802b644:	6055      	str	r5, [r2, #4]
 802b646:	f821 7c08 	strh.w	r7, [r1, #-8]
 802b64a:	f821 6c06 	strh.w	r6, [r1, #-6]
 802b64e:	f821 ec04 	strh.w	lr, [r1, #-4]
 802b652:	f821 cc02 	strh.w	ip, [r1, #-2]
 802b656:	f9b0 7000 	ldrsh.w	r7, [r0]
 802b65a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802b65e:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 802b662:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802b666:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802b66a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802b66e:	45ac      	cmp	ip, r5
 802b670:	da0d      	bge.n	802b68e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802b672:	6815      	ldr	r5, [r2, #0]
 802b674:	6005      	str	r5, [r0, #0]
 802b676:	6855      	ldr	r5, [r2, #4]
 802b678:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802b67c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802b680:	8107      	strh	r7, [r0, #8]
 802b682:	6045      	str	r5, [r0, #4]
 802b684:	8146      	strh	r6, [r0, #10]
 802b686:	f8a0 e00c 	strh.w	lr, [r0, #12]
 802b68a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802b68e:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802b692:	f9b0 7000 	ldrsh.w	r7, [r0]
 802b696:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802b69a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802b69e:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802b6a2:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802b6a6:	4565      	cmp	r5, ip
 802b6a8:	da0f      	bge.n	802b6ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802b6aa:	681d      	ldr	r5, [r3, #0]
 802b6ac:	6005      	str	r5, [r0, #0]
 802b6ae:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802b6b2:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802b6b6:	685d      	ldr	r5, [r3, #4]
 802b6b8:	6045      	str	r5, [r0, #4]
 802b6ba:	f821 7c08 	strh.w	r7, [r1, #-8]
 802b6be:	f821 6c06 	strh.w	r6, [r1, #-6]
 802b6c2:	f821 ec04 	strh.w	lr, [r1, #-4]
 802b6c6:	f821 cc02 	strh.w	ip, [r1, #-2]
 802b6ca:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802b6ce:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802b6d2:	f9b0 e000 	ldrsh.w	lr, [r0]
 802b6d6:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802b6da:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 802b6de:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802b6e2:	f102 0508 	add.w	r5, r2, #8
 802b6e6:	4556      	cmp	r6, sl
 802b6e8:	462f      	mov	r7, r5
 802b6ea:	db18      	blt.n	802b71e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 802b6ec:	3b08      	subs	r3, #8
 802b6ee:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802b6f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 802b6f6:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802b6fa:	45b2      	cmp	sl, r6
 802b6fc:	dbf6      	blt.n	802b6ec <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802b6fe:	42ab      	cmp	r3, r5
 802b700:	681e      	ldr	r6, [r3, #0]
 802b702:	d30e      	bcc.n	802b722 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 802b704:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802b708:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 802b70c:	602e      	str	r6, [r5, #0]
 802b70e:	685e      	ldr	r6, [r3, #4]
 802b710:	606e      	str	r6, [r5, #4]
 802b712:	f8a3 9000 	strh.w	r9, [r3]
 802b716:	f8a3 8002 	strh.w	r8, [r3, #2]
 802b71a:	809f      	strh	r7, [r3, #4]
 802b71c:	80da      	strh	r2, [r3, #6]
 802b71e:	462a      	mov	r2, r5
 802b720:	e7d3      	b.n	802b6ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802b722:	6006      	str	r6, [r0, #0]
 802b724:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802b728:	685e      	ldr	r6, [r3, #4]
 802b72a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802b72e:	6046      	str	r6, [r0, #4]
 802b730:	80da      	strh	r2, [r3, #6]
 802b732:	1b4a      	subs	r2, r1, r5
 802b734:	1a1e      	subs	r6, r3, r0
 802b736:	10d2      	asrs	r2, r2, #3
 802b738:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 802b73c:	bfb8      	it	lt
 802b73e:	e9c4 0300 	strdlt	r0, r3, [r4]
 802b742:	f8a3 e000 	strh.w	lr, [r3]
 802b746:	f8a3 c002 	strh.w	ip, [r3, #2]
 802b74a:	f8a3 8004 	strh.w	r8, [r3, #4]
 802b74e:	bfaa      	itet	ge
 802b750:	4607      	movge	r7, r0
 802b752:	460b      	movlt	r3, r1
 802b754:	e9c4 5100 	strdge	r5, r1, [r4]
 802b758:	4638      	mov	r0, r7
 802b75a:	3408      	adds	r4, #8
 802b75c:	4619      	mov	r1, r3
 802b75e:	e73e      	b.n	802b5de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802b760:	4291      	cmp	r1, r2
 802b762:	d926      	bls.n	802b7b2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e0>
 802b764:	f1a2 0310 	sub.w	r3, r2, #16
 802b768:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802b76c:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802b770:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 802b774:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802b778:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802b77c:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802b780:	42ae      	cmp	r6, r5
 802b782:	da14      	bge.n	802b7ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802b784:	461d      	mov	r5, r3
 802b786:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 802b78a:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802b78e:	611e      	str	r6, [r3, #16]
 802b790:	686e      	ldr	r6, [r5, #4]
 802b792:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 802b796:	f8a3 c008 	strh.w	ip, [r3, #8]
 802b79a:	42a8      	cmp	r0, r5
 802b79c:	615e      	str	r6, [r3, #20]
 802b79e:	815f      	strh	r7, [r3, #10]
 802b7a0:	f8a3 800c 	strh.w	r8, [r3, #12]
 802b7a4:	f8a3 e00e 	strh.w	lr, [r3, #14]
 802b7a8:	f1a3 0308 	sub.w	r3, r3, #8
 802b7ac:	d1dc      	bne.n	802b768 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x196>
 802b7ae:	3208      	adds	r2, #8
 802b7b0:	e7d6      	b.n	802b760 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18e>
 802b7b2:	466b      	mov	r3, sp
 802b7b4:	429c      	cmp	r4, r3
 802b7b6:	d903      	bls.n	802b7c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ee>
 802b7b8:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802b7bc:	3c08      	subs	r4, #8
 802b7be:	e70e      	b.n	802b5de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802b7c0:	b051      	add	sp, #324	; 0x144
 802b7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b7c6 <_ZN8touchgfx7Outline9sortCellsEv>:
 802b7c6:	6881      	ldr	r1, [r0, #8]
 802b7c8:	b111      	cbz	r1, 802b7d0 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802b7ca:	68c0      	ldr	r0, [r0, #12]
 802b7cc:	f7ff bf01 	b.w	802b5d2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 802b7d0:	4770      	bx	lr

0802b7d2 <_ZN8touchgfx7Outline8getCellsEv>:
 802b7d2:	b510      	push	{r4, lr}
 802b7d4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802b7d6:	07da      	lsls	r2, r3, #31
 802b7d8:	4604      	mov	r4, r0
 802b7da:	d507      	bpl.n	802b7ec <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 802b7dc:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 802b7e0:	f7ff fe80 	bl	802b4e4 <_ZN8touchgfx7Outline6lineToEii>
 802b7e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b7e6:	f023 0301 	bic.w	r3, r3, #1
 802b7ea:	63e3      	str	r3, [r4, #60]	; 0x3c
 802b7ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b7ee:	079b      	lsls	r3, r3, #30
 802b7f0:	d51a      	bpl.n	802b828 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802b7f2:	8b62      	ldrh	r2, [r4, #26]
 802b7f4:	8b23      	ldrh	r3, [r4, #24]
 802b7f6:	4313      	orrs	r3, r2
 802b7f8:	d00d      	beq.n	802b816 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802b7fa:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802b7fe:	2b00      	cmp	r3, #0
 802b800:	db09      	blt.n	802b816 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802b802:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802b804:	4293      	cmp	r3, r2
 802b806:	da06      	bge.n	802b816 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802b808:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802b80c:	429a      	cmp	r2, r3
 802b80e:	d80d      	bhi.n	802b82c <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 802b810:	2301      	movs	r3, #1
 802b812:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802b816:	68a0      	ldr	r0, [r4, #8]
 802b818:	b138      	cbz	r0, 802b82a <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802b81a:	4620      	mov	r0, r4
 802b81c:	f7ff ffd3 	bl	802b7c6 <_ZN8touchgfx7Outline9sortCellsEv>
 802b820:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b822:	f023 0302 	bic.w	r3, r3, #2
 802b826:	63e3      	str	r3, [r4, #60]	; 0x3c
 802b828:	68e0      	ldr	r0, [r4, #12]
 802b82a:	bd10      	pop	{r4, pc}
 802b82c:	f104 0314 	add.w	r3, r4, #20
 802b830:	cb03      	ldmia	r3!, {r0, r1}
 802b832:	6922      	ldr	r2, [r4, #16]
 802b834:	6010      	str	r0, [r2, #0]
 802b836:	6051      	str	r1, [r2, #4]
 802b838:	6923      	ldr	r3, [r4, #16]
 802b83a:	3308      	adds	r3, #8
 802b83c:	6123      	str	r3, [r4, #16]
 802b83e:	68a3      	ldr	r3, [r4, #8]
 802b840:	3301      	adds	r3, #1
 802b842:	60a3      	str	r3, [r4, #8]
 802b844:	e7e7      	b.n	802b816 <_ZN8touchgfx7Outline8getCellsEv+0x44>
	...

0802b848 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 802b848:	b538      	push	{r3, r4, r5, lr}
 802b84a:	4c2b      	ldr	r4, [pc, #172]	; (802b8f8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 802b84c:	4b2b      	ldr	r3, [pc, #172]	; (802b8fc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 802b84e:	6821      	ldr	r1, [r4, #0]
 802b850:	681a      	ldr	r2, [r3, #0]
 802b852:	4d2b      	ldr	r5, [pc, #172]	; (802b900 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 802b854:	4281      	cmp	r1, r0
 802b856:	492b      	ldr	r1, [pc, #172]	; (802b904 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 802b858:	d108      	bne.n	802b86c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 802b85a:	682b      	ldr	r3, [r5, #0]
 802b85c:	4293      	cmp	r3, r2
 802b85e:	d105      	bne.n	802b86c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 802b860:	6808      	ldr	r0, [r1, #0]
 802b862:	280f      	cmp	r0, #15
 802b864:	bf94      	ite	ls
 802b866:	2000      	movls	r0, #0
 802b868:	2001      	movhi	r0, #1
 802b86a:	bd38      	pop	{r3, r4, r5, pc}
 802b86c:	4b26      	ldr	r3, [pc, #152]	; (802b908 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 802b86e:	6020      	str	r0, [r4, #0]
 802b870:	681b      	ldr	r3, [r3, #0]
 802b872:	602a      	str	r2, [r5, #0]
 802b874:	4298      	cmp	r0, r3
 802b876:	d905      	bls.n	802b884 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 802b878:	4b24      	ldr	r3, [pc, #144]	; (802b90c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802b87a:	4a25      	ldr	r2, [pc, #148]	; (802b910 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802b87c:	2137      	movs	r1, #55	; 0x37
 802b87e:	4825      	ldr	r0, [pc, #148]	; (802b914 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 802b880:	f000 ff32 	bl	802c6e8 <__assert_func>
 802b884:	f010 0403 	ands.w	r4, r0, #3
 802b888:	bf1f      	itttt	ne
 802b88a:	f1c4 0504 	rsbne	r5, r4, #4
 802b88e:	3b04      	subne	r3, #4
 802b890:	1952      	addne	r2, r2, r5
 802b892:	191b      	addne	r3, r3, r4
 802b894:	4402      	add	r2, r0
 802b896:	1a1b      	subs	r3, r3, r0
 802b898:	3001      	adds	r0, #1
 802b89a:	f020 0401 	bic.w	r4, r0, #1
 802b89e:	4d1e      	ldr	r5, [pc, #120]	; (802b918 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 802b8a0:	42a3      	cmp	r3, r4
 802b8a2:	602a      	str	r2, [r5, #0]
 802b8a4:	d203      	bcs.n	802b8ae <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 802b8a6:	4b19      	ldr	r3, [pc, #100]	; (802b90c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802b8a8:	4a19      	ldr	r2, [pc, #100]	; (802b910 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802b8aa:	214a      	movs	r1, #74	; 0x4a
 802b8ac:	e7e7      	b.n	802b87e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802b8ae:	f010 0002 	ands.w	r0, r0, #2
 802b8b2:	bf1f      	itttt	ne
 802b8b4:	f1c0 0504 	rsbne	r5, r0, #4
 802b8b8:	1952      	addne	r2, r2, r5
 802b8ba:	1f05      	subne	r5, r0, #4
 802b8bc:	195b      	addne	r3, r3, r5
 802b8be:	1b1b      	subs	r3, r3, r4
 802b8c0:	4d16      	ldr	r5, [pc, #88]	; (802b91c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 802b8c2:	4422      	add	r2, r4
 802b8c4:	429c      	cmp	r4, r3
 802b8c6:	602a      	str	r2, [r5, #0]
 802b8c8:	d903      	bls.n	802b8d2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 802b8ca:	4b10      	ldr	r3, [pc, #64]	; (802b90c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802b8cc:	4a10      	ldr	r2, [pc, #64]	; (802b910 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802b8ce:	215d      	movs	r1, #93	; 0x5d
 802b8d0:	e7d5      	b.n	802b87e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802b8d2:	b120      	cbz	r0, 802b8de <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 802b8d4:	f1c0 0504 	rsb	r5, r0, #4
 802b8d8:	3804      	subs	r0, #4
 802b8da:	442a      	add	r2, r5
 802b8dc:	4403      	add	r3, r0
 802b8de:	1b1b      	subs	r3, r3, r4
 802b8e0:	480f      	ldr	r0, [pc, #60]	; (802b920 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 802b8e2:	600b      	str	r3, [r1, #0]
 802b8e4:	4422      	add	r2, r4
 802b8e6:	2b0f      	cmp	r3, #15
 802b8e8:	6002      	str	r2, [r0, #0]
 802b8ea:	d803      	bhi.n	802b8f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 802b8ec:	4b0d      	ldr	r3, [pc, #52]	; (802b924 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 802b8ee:	4a08      	ldr	r2, [pc, #32]	; (802b910 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802b8f0:	2170      	movs	r1, #112	; 0x70
 802b8f2:	e7c4      	b.n	802b87e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802b8f4:	2001      	movs	r0, #1
 802b8f6:	e7b8      	b.n	802b86a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 802b8f8:	200068d4 	.word	0x200068d4
 802b8fc:	200068cc 	.word	0x200068cc
 802b900:	200068dc 	.word	0x200068dc
 802b904:	200068e4 	.word	0x200068e4
 802b908:	200068e0 	.word	0x200068e0
 802b90c:	080325f4 	.word	0x080325f4
 802b910:	080326bc 	.word	0x080326bc
 802b914:	0803262d 	.word	0x0803262d
 802b918:	200068e8 	.word	0x200068e8
 802b91c:	200068d8 	.word	0x200068d8
 802b920:	200068d0 	.word	0x200068d0
 802b924:	08032677 	.word	0x08032677

0802b928 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 802b928:	4b04      	ldr	r3, [pc, #16]	; (802b93c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 802b92a:	6818      	ldr	r0, [r3, #0]
 802b92c:	b120      	cbz	r0, 802b938 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 802b92e:	4b04      	ldr	r3, [pc, #16]	; (802b940 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 802b930:	6818      	ldr	r0, [r3, #0]
 802b932:	3000      	adds	r0, #0
 802b934:	bf18      	it	ne
 802b936:	2001      	movne	r0, #1
 802b938:	4770      	bx	lr
 802b93a:	bf00      	nop
 802b93c:	200068cc 	.word	0x200068cc
 802b940:	200068e0 	.word	0x200068e0

0802b944 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 802b944:	4b01      	ldr	r3, [pc, #4]	; (802b94c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 802b946:	6818      	ldr	r0, [r3, #0]
 802b948:	4770      	bx	lr
 802b94a:	bf00      	nop
 802b94c:	200068d4 	.word	0x200068d4

0802b950 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 802b950:	4b01      	ldr	r3, [pc, #4]	; (802b958 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 802b952:	6818      	ldr	r0, [r3, #0]
 802b954:	4770      	bx	lr
 802b956:	bf00      	nop
 802b958:	200068dc 	.word	0x200068dc

0802b95c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 802b95c:	4b01      	ldr	r3, [pc, #4]	; (802b964 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 802b95e:	6818      	ldr	r0, [r3, #0]
 802b960:	4770      	bx	lr
 802b962:	bf00      	nop
 802b964:	200068e8 	.word	0x200068e8

0802b968 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 802b968:	4b01      	ldr	r3, [pc, #4]	; (802b970 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 802b96a:	6818      	ldr	r0, [r3, #0]
 802b96c:	4770      	bx	lr
 802b96e:	bf00      	nop
 802b970:	200068d8 	.word	0x200068d8

0802b974 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 802b974:	4b01      	ldr	r3, [pc, #4]	; (802b97c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 802b976:	6818      	ldr	r0, [r3, #0]
 802b978:	4770      	bx	lr
 802b97a:	bf00      	nop
 802b97c:	200068d0 	.word	0x200068d0

0802b980 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 802b980:	4b01      	ldr	r3, [pc, #4]	; (802b988 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 802b982:	6818      	ldr	r0, [r3, #0]
 802b984:	4770      	bx	lr
 802b986:	bf00      	nop
 802b988:	200068e4 	.word	0x200068e4

0802b98c <_ZN8touchgfx8ScanlineD1Ev>:
 802b98c:	4770      	bx	lr

0802b98e <_ZN8touchgfx8ScanlineD0Ev>:
 802b98e:	b510      	push	{r4, lr}
 802b990:	2124      	movs	r1, #36	; 0x24
 802b992:	4604      	mov	r4, r0
 802b994:	f000 f889 	bl	802baaa <_ZdlPvj>
 802b998:	4620      	mov	r0, r4
 802b99a:	bd10      	pop	{r4, pc}

0802b99c <_ZN8touchgfx8Scanline5resetEv>:
 802b99c:	b510      	push	{r4, lr}
 802b99e:	4604      	mov	r4, r0
 802b9a0:	f7ff ffd6 	bl	802b950 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802b9a4:	61a0      	str	r0, [r4, #24]
 802b9a6:	f7ff ffd9 	bl	802b95c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802b9aa:	61e0      	str	r0, [r4, #28]
 802b9ac:	f7ff ffdc 	bl	802b968 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802b9b0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802b9b4:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802b9b8:	69e3      	ldr	r3, [r4, #28]
 802b9ba:	6123      	str	r3, [r4, #16]
 802b9bc:	2300      	movs	r3, #0
 802b9be:	6220      	str	r0, [r4, #32]
 802b9c0:	6160      	str	r0, [r4, #20]
 802b9c2:	60e3      	str	r3, [r4, #12]
 802b9c4:	bd10      	pop	{r4, pc}
	...

0802b9c8 <_ZN8touchgfx8ScanlineC1Ev>:
 802b9c8:	b510      	push	{r4, lr}
 802b9ca:	4b09      	ldr	r3, [pc, #36]	; (802b9f0 <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 802b9cc:	6003      	str	r3, [r0, #0]
 802b9ce:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802b9d2:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802b9d6:	2300      	movs	r3, #0
 802b9d8:	4604      	mov	r4, r0
 802b9da:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802b9de:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802b9e2:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802b9e6:	f7ff ffd9 	bl	802b99c <_ZN8touchgfx8Scanline5resetEv>
 802b9ea:	4620      	mov	r0, r4
 802b9ec:	bd10      	pop	{r4, pc}
 802b9ee:	bf00      	nop
 802b9f0:	08032710 	.word	0x08032710

0802b9f4 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 802b9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b9f8:	1e0c      	subs	r4, r1, #0
 802b9fa:	4605      	mov	r5, r0
 802b9fc:	4617      	mov	r7, r2
 802b9fe:	461e      	mov	r6, r3
 802ba00:	da03      	bge.n	802ba0a <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802ba02:	4426      	add	r6, r4
 802ba04:	2e01      	cmp	r6, #1
 802ba06:	d421      	bmi.n	802ba4c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802ba08:	2400      	movs	r4, #0
 802ba0a:	f7ff ff9b 	bl	802b944 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802ba0e:	42a0      	cmp	r0, r4
 802ba10:	dd1c      	ble.n	802ba4c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802ba12:	f7ff ff97 	bl	802b944 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802ba16:	eb04 0806 	add.w	r8, r4, r6
 802ba1a:	4580      	cmp	r8, r0
 802ba1c:	d902      	bls.n	802ba24 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802ba1e:	f7ff ff91 	bl	802b944 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802ba22:	1b06      	subs	r6, r0, r4
 802ba24:	69a8      	ldr	r0, [r5, #24]
 802ba26:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802ba2a:	4632      	mov	r2, r6
 802ba2c:	4420      	add	r0, r4
 802ba2e:	f7f0 f989 	bl	801bd44 <_ZN8touchgfx6memsetEPvhm>
 802ba32:	686b      	ldr	r3, [r5, #4]
 802ba34:	3301      	adds	r3, #1
 802ba36:	42a3      	cmp	r3, r4
 802ba38:	b2b2      	uxth	r2, r6
 802ba3a:	696b      	ldr	r3, [r5, #20]
 802ba3c:	d108      	bne.n	802ba50 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802ba3e:	8819      	ldrh	r1, [r3, #0]
 802ba40:	440a      	add	r2, r1
 802ba42:	801a      	strh	r2, [r3, #0]
 802ba44:	3c01      	subs	r4, #1
 802ba46:	4434      	add	r4, r6
 802ba48:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802ba4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ba50:	1c99      	adds	r1, r3, #2
 802ba52:	6169      	str	r1, [r5, #20]
 802ba54:	805a      	strh	r2, [r3, #2]
 802ba56:	692b      	ldr	r3, [r5, #16]
 802ba58:	1c9a      	adds	r2, r3, #2
 802ba5a:	612a      	str	r2, [r5, #16]
 802ba5c:	805c      	strh	r4, [r3, #2]
 802ba5e:	68eb      	ldr	r3, [r5, #12]
 802ba60:	3301      	adds	r3, #1
 802ba62:	60eb      	str	r3, [r5, #12]
 802ba64:	e7ee      	b.n	802ba44 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802ba66 <_ZN8touchgfx15RenderingBufferD1Ev>:
 802ba66:	4770      	bx	lr

0802ba68 <_ZN8touchgfx15RenderingBufferD0Ev>:
 802ba68:	b510      	push	{r4, lr}
 802ba6a:	2118      	movs	r1, #24
 802ba6c:	4604      	mov	r4, r0
 802ba6e:	f000 f81c 	bl	802baaa <_ZdlPvj>
 802ba72:	4620      	mov	r0, r4
 802ba74:	bd10      	pop	{r4, pc}
	...

0802ba78 <_ZN8touchgfx15RenderingBufferC1Ev>:
 802ba78:	4a04      	ldr	r2, [pc, #16]	; (802ba8c <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 802ba7a:	6002      	str	r2, [r0, #0]
 802ba7c:	2200      	movs	r2, #0
 802ba7e:	6042      	str	r2, [r0, #4]
 802ba80:	7202      	strb	r2, [r0, #8]
 802ba82:	e9c0 2203 	strd	r2, r2, [r0, #12]
 802ba86:	6142      	str	r2, [r0, #20]
 802ba88:	4770      	bx	lr
 802ba8a:	bf00      	nop
 802ba8c:	08032720 	.word	0x08032720

0802ba90 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802ba90:	60c3      	str	r3, [r0, #12]
 802ba92:	9b00      	ldr	r3, [sp, #0]
 802ba94:	6103      	str	r3, [r0, #16]
 802ba96:	9b01      	ldr	r3, [sp, #4]
 802ba98:	6041      	str	r1, [r0, #4]
 802ba9a:	7202      	strb	r2, [r0, #8]
 802ba9c:	6143      	str	r3, [r0, #20]
 802ba9e:	4770      	bx	lr

0802baa0 <__aeabi_atexit>:
 802baa0:	460b      	mov	r3, r1
 802baa2:	4601      	mov	r1, r0
 802baa4:	4618      	mov	r0, r3
 802baa6:	f000 be43 	b.w	802c730 <__cxa_atexit>

0802baaa <_ZdlPvj>:
 802baaa:	f000 b812 	b.w	802bad2 <_ZdlPv>

0802baae <__cxa_guard_acquire>:
 802baae:	6803      	ldr	r3, [r0, #0]
 802bab0:	07db      	lsls	r3, r3, #31
 802bab2:	d406      	bmi.n	802bac2 <__cxa_guard_acquire+0x14>
 802bab4:	7843      	ldrb	r3, [r0, #1]
 802bab6:	b103      	cbz	r3, 802baba <__cxa_guard_acquire+0xc>
 802bab8:	deff      	udf	#255	; 0xff
 802baba:	2301      	movs	r3, #1
 802babc:	7043      	strb	r3, [r0, #1]
 802babe:	4618      	mov	r0, r3
 802bac0:	4770      	bx	lr
 802bac2:	2000      	movs	r0, #0
 802bac4:	4770      	bx	lr

0802bac6 <__cxa_guard_release>:
 802bac6:	2301      	movs	r3, #1
 802bac8:	6003      	str	r3, [r0, #0]
 802baca:	4770      	bx	lr

0802bacc <__cxa_pure_virtual>:
 802bacc:	b508      	push	{r3, lr}
 802bace:	f000 f80f 	bl	802baf0 <_ZSt9terminatev>

0802bad2 <_ZdlPv>:
 802bad2:	f001 b993 	b.w	802cdfc <free>

0802bad6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802bad6:	b508      	push	{r3, lr}
 802bad8:	4780      	blx	r0
 802bada:	f000 fdfd 	bl	802c6d8 <abort>
	...

0802bae0 <_ZSt13get_terminatev>:
 802bae0:	4b02      	ldr	r3, [pc, #8]	; (802baec <_ZSt13get_terminatev+0xc>)
 802bae2:	6818      	ldr	r0, [r3, #0]
 802bae4:	f3bf 8f5b 	dmb	ish
 802bae8:	4770      	bx	lr
 802baea:	bf00      	nop
 802baec:	20000090 	.word	0x20000090

0802baf0 <_ZSt9terminatev>:
 802baf0:	b508      	push	{r3, lr}
 802baf2:	f7ff fff5 	bl	802bae0 <_ZSt13get_terminatev>
 802baf6:	f7ff ffee 	bl	802bad6 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0802bafc <ceilf>:
 802bafc:	ee10 3a10 	vmov	r3, s0
 802bb00:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802bb04:	3a7f      	subs	r2, #127	; 0x7f
 802bb06:	2a16      	cmp	r2, #22
 802bb08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802bb0c:	dc2a      	bgt.n	802bb64 <ceilf+0x68>
 802bb0e:	2a00      	cmp	r2, #0
 802bb10:	da11      	bge.n	802bb36 <ceilf+0x3a>
 802bb12:	eddf 7a19 	vldr	s15, [pc, #100]	; 802bb78 <ceilf+0x7c>
 802bb16:	ee30 0a27 	vadd.f32	s0, s0, s15
 802bb1a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802bb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bb22:	dd05      	ble.n	802bb30 <ceilf+0x34>
 802bb24:	2b00      	cmp	r3, #0
 802bb26:	db23      	blt.n	802bb70 <ceilf+0x74>
 802bb28:	2900      	cmp	r1, #0
 802bb2a:	bf18      	it	ne
 802bb2c:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 802bb30:	ee00 3a10 	vmov	s0, r3
 802bb34:	4770      	bx	lr
 802bb36:	4911      	ldr	r1, [pc, #68]	; (802bb7c <ceilf+0x80>)
 802bb38:	4111      	asrs	r1, r2
 802bb3a:	420b      	tst	r3, r1
 802bb3c:	d0fa      	beq.n	802bb34 <ceilf+0x38>
 802bb3e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802bb78 <ceilf+0x7c>
 802bb42:	ee30 0a27 	vadd.f32	s0, s0, s15
 802bb46:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802bb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bb4e:	ddef      	ble.n	802bb30 <ceilf+0x34>
 802bb50:	2b00      	cmp	r3, #0
 802bb52:	bfc2      	ittt	gt
 802bb54:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 802bb58:	fa40 f202 	asrgt.w	r2, r0, r2
 802bb5c:	189b      	addgt	r3, r3, r2
 802bb5e:	ea23 0301 	bic.w	r3, r3, r1
 802bb62:	e7e5      	b.n	802bb30 <ceilf+0x34>
 802bb64:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802bb68:	d3e4      	bcc.n	802bb34 <ceilf+0x38>
 802bb6a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802bb6e:	4770      	bx	lr
 802bb70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802bb74:	e7dc      	b.n	802bb30 <ceilf+0x34>
 802bb76:	bf00      	nop
 802bb78:	7149f2ca 	.word	0x7149f2ca
 802bb7c:	007fffff 	.word	0x007fffff

0802bb80 <cosf>:
 802bb80:	ee10 3a10 	vmov	r3, s0
 802bb84:	b507      	push	{r0, r1, r2, lr}
 802bb86:	4a1c      	ldr	r2, [pc, #112]	; (802bbf8 <cosf+0x78>)
 802bb88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802bb8c:	4293      	cmp	r3, r2
 802bb8e:	dc04      	bgt.n	802bb9a <cosf+0x1a>
 802bb90:	eddf 0a1a 	vldr	s1, [pc, #104]	; 802bbfc <cosf+0x7c>
 802bb94:	f000 f9f4 	bl	802bf80 <__kernel_cosf>
 802bb98:	e004      	b.n	802bba4 <cosf+0x24>
 802bb9a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802bb9e:	db04      	blt.n	802bbaa <cosf+0x2a>
 802bba0:	ee30 0a40 	vsub.f32	s0, s0, s0
 802bba4:	b003      	add	sp, #12
 802bba6:	f85d fb04 	ldr.w	pc, [sp], #4
 802bbaa:	4668      	mov	r0, sp
 802bbac:	f000 f8ac 	bl	802bd08 <__ieee754_rem_pio2f>
 802bbb0:	f000 0003 	and.w	r0, r0, #3
 802bbb4:	2801      	cmp	r0, #1
 802bbb6:	d007      	beq.n	802bbc8 <cosf+0x48>
 802bbb8:	2802      	cmp	r0, #2
 802bbba:	d00e      	beq.n	802bbda <cosf+0x5a>
 802bbbc:	b9a0      	cbnz	r0, 802bbe8 <cosf+0x68>
 802bbbe:	eddd 0a01 	vldr	s1, [sp, #4]
 802bbc2:	ed9d 0a00 	vldr	s0, [sp]
 802bbc6:	e7e5      	b.n	802bb94 <cosf+0x14>
 802bbc8:	eddd 0a01 	vldr	s1, [sp, #4]
 802bbcc:	ed9d 0a00 	vldr	s0, [sp]
 802bbd0:	f000 fcc0 	bl	802c554 <__kernel_sinf>
 802bbd4:	eeb1 0a40 	vneg.f32	s0, s0
 802bbd8:	e7e4      	b.n	802bba4 <cosf+0x24>
 802bbda:	eddd 0a01 	vldr	s1, [sp, #4]
 802bbde:	ed9d 0a00 	vldr	s0, [sp]
 802bbe2:	f000 f9cd 	bl	802bf80 <__kernel_cosf>
 802bbe6:	e7f5      	b.n	802bbd4 <cosf+0x54>
 802bbe8:	eddd 0a01 	vldr	s1, [sp, #4]
 802bbec:	ed9d 0a00 	vldr	s0, [sp]
 802bbf0:	2001      	movs	r0, #1
 802bbf2:	f000 fcaf 	bl	802c554 <__kernel_sinf>
 802bbf6:	e7d5      	b.n	802bba4 <cosf+0x24>
 802bbf8:	3f490fd8 	.word	0x3f490fd8
 802bbfc:	00000000 	.word	0x00000000

0802bc00 <floorf>:
 802bc00:	ee10 3a10 	vmov	r3, s0
 802bc04:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802bc08:	3a7f      	subs	r2, #127	; 0x7f
 802bc0a:	2a16      	cmp	r2, #22
 802bc0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802bc10:	dc2a      	bgt.n	802bc68 <floorf+0x68>
 802bc12:	2a00      	cmp	r2, #0
 802bc14:	da11      	bge.n	802bc3a <floorf+0x3a>
 802bc16:	eddf 7a18 	vldr	s15, [pc, #96]	; 802bc78 <floorf+0x78>
 802bc1a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802bc1e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802bc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bc26:	dd05      	ble.n	802bc34 <floorf+0x34>
 802bc28:	2b00      	cmp	r3, #0
 802bc2a:	da23      	bge.n	802bc74 <floorf+0x74>
 802bc2c:	4a13      	ldr	r2, [pc, #76]	; (802bc7c <floorf+0x7c>)
 802bc2e:	2900      	cmp	r1, #0
 802bc30:	bf18      	it	ne
 802bc32:	4613      	movne	r3, r2
 802bc34:	ee00 3a10 	vmov	s0, r3
 802bc38:	4770      	bx	lr
 802bc3a:	4911      	ldr	r1, [pc, #68]	; (802bc80 <floorf+0x80>)
 802bc3c:	4111      	asrs	r1, r2
 802bc3e:	420b      	tst	r3, r1
 802bc40:	d0fa      	beq.n	802bc38 <floorf+0x38>
 802bc42:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802bc78 <floorf+0x78>
 802bc46:	ee30 0a27 	vadd.f32	s0, s0, s15
 802bc4a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802bc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bc52:	ddef      	ble.n	802bc34 <floorf+0x34>
 802bc54:	2b00      	cmp	r3, #0
 802bc56:	bfbe      	ittt	lt
 802bc58:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802bc5c:	fa40 f202 	asrlt.w	r2, r0, r2
 802bc60:	189b      	addlt	r3, r3, r2
 802bc62:	ea23 0301 	bic.w	r3, r3, r1
 802bc66:	e7e5      	b.n	802bc34 <floorf+0x34>
 802bc68:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802bc6c:	d3e4      	bcc.n	802bc38 <floorf+0x38>
 802bc6e:	ee30 0a00 	vadd.f32	s0, s0, s0
 802bc72:	4770      	bx	lr
 802bc74:	2300      	movs	r3, #0
 802bc76:	e7dd      	b.n	802bc34 <floorf+0x34>
 802bc78:	7149f2ca 	.word	0x7149f2ca
 802bc7c:	bf800000 	.word	0xbf800000
 802bc80:	007fffff 	.word	0x007fffff

0802bc84 <sinf>:
 802bc84:	ee10 3a10 	vmov	r3, s0
 802bc88:	b507      	push	{r0, r1, r2, lr}
 802bc8a:	4a1d      	ldr	r2, [pc, #116]	; (802bd00 <sinf+0x7c>)
 802bc8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802bc90:	4293      	cmp	r3, r2
 802bc92:	dc05      	bgt.n	802bca0 <sinf+0x1c>
 802bc94:	eddf 0a1b 	vldr	s1, [pc, #108]	; 802bd04 <sinf+0x80>
 802bc98:	2000      	movs	r0, #0
 802bc9a:	f000 fc5b 	bl	802c554 <__kernel_sinf>
 802bc9e:	e004      	b.n	802bcaa <sinf+0x26>
 802bca0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802bca4:	db04      	blt.n	802bcb0 <sinf+0x2c>
 802bca6:	ee30 0a40 	vsub.f32	s0, s0, s0
 802bcaa:	b003      	add	sp, #12
 802bcac:	f85d fb04 	ldr.w	pc, [sp], #4
 802bcb0:	4668      	mov	r0, sp
 802bcb2:	f000 f829 	bl	802bd08 <__ieee754_rem_pio2f>
 802bcb6:	f000 0003 	and.w	r0, r0, #3
 802bcba:	2801      	cmp	r0, #1
 802bcbc:	d008      	beq.n	802bcd0 <sinf+0x4c>
 802bcbe:	2802      	cmp	r0, #2
 802bcc0:	d00d      	beq.n	802bcde <sinf+0x5a>
 802bcc2:	b9b0      	cbnz	r0, 802bcf2 <sinf+0x6e>
 802bcc4:	eddd 0a01 	vldr	s1, [sp, #4]
 802bcc8:	ed9d 0a00 	vldr	s0, [sp]
 802bccc:	2001      	movs	r0, #1
 802bcce:	e7e4      	b.n	802bc9a <sinf+0x16>
 802bcd0:	eddd 0a01 	vldr	s1, [sp, #4]
 802bcd4:	ed9d 0a00 	vldr	s0, [sp]
 802bcd8:	f000 f952 	bl	802bf80 <__kernel_cosf>
 802bcdc:	e7e5      	b.n	802bcaa <sinf+0x26>
 802bcde:	eddd 0a01 	vldr	s1, [sp, #4]
 802bce2:	ed9d 0a00 	vldr	s0, [sp]
 802bce6:	2001      	movs	r0, #1
 802bce8:	f000 fc34 	bl	802c554 <__kernel_sinf>
 802bcec:	eeb1 0a40 	vneg.f32	s0, s0
 802bcf0:	e7db      	b.n	802bcaa <sinf+0x26>
 802bcf2:	eddd 0a01 	vldr	s1, [sp, #4]
 802bcf6:	ed9d 0a00 	vldr	s0, [sp]
 802bcfa:	f000 f941 	bl	802bf80 <__kernel_cosf>
 802bcfe:	e7f5      	b.n	802bcec <sinf+0x68>
 802bd00:	3f490fd8 	.word	0x3f490fd8
 802bd04:	00000000 	.word	0x00000000

0802bd08 <__ieee754_rem_pio2f>:
 802bd08:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bd0a:	ee10 6a10 	vmov	r6, s0
 802bd0e:	4b8e      	ldr	r3, [pc, #568]	; (802bf48 <__ieee754_rem_pio2f+0x240>)
 802bd10:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802bd14:	429d      	cmp	r5, r3
 802bd16:	b087      	sub	sp, #28
 802bd18:	eef0 7a40 	vmov.f32	s15, s0
 802bd1c:	4604      	mov	r4, r0
 802bd1e:	dc05      	bgt.n	802bd2c <__ieee754_rem_pio2f+0x24>
 802bd20:	2300      	movs	r3, #0
 802bd22:	ed80 0a00 	vstr	s0, [r0]
 802bd26:	6043      	str	r3, [r0, #4]
 802bd28:	2000      	movs	r0, #0
 802bd2a:	e01a      	b.n	802bd62 <__ieee754_rem_pio2f+0x5a>
 802bd2c:	4b87      	ldr	r3, [pc, #540]	; (802bf4c <__ieee754_rem_pio2f+0x244>)
 802bd2e:	429d      	cmp	r5, r3
 802bd30:	dc46      	bgt.n	802bdc0 <__ieee754_rem_pio2f+0xb8>
 802bd32:	2e00      	cmp	r6, #0
 802bd34:	ed9f 0a86 	vldr	s0, [pc, #536]	; 802bf50 <__ieee754_rem_pio2f+0x248>
 802bd38:	4b86      	ldr	r3, [pc, #536]	; (802bf54 <__ieee754_rem_pio2f+0x24c>)
 802bd3a:	f025 050f 	bic.w	r5, r5, #15
 802bd3e:	dd1f      	ble.n	802bd80 <__ieee754_rem_pio2f+0x78>
 802bd40:	429d      	cmp	r5, r3
 802bd42:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802bd46:	d00e      	beq.n	802bd66 <__ieee754_rem_pio2f+0x5e>
 802bd48:	ed9f 7a83 	vldr	s14, [pc, #524]	; 802bf58 <__ieee754_rem_pio2f+0x250>
 802bd4c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 802bd50:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802bd54:	ed80 0a00 	vstr	s0, [r0]
 802bd58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802bd5c:	2001      	movs	r0, #1
 802bd5e:	edc4 7a01 	vstr	s15, [r4, #4]
 802bd62:	b007      	add	sp, #28
 802bd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bd66:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 802bf5c <__ieee754_rem_pio2f+0x254>
 802bd6a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 802bf60 <__ieee754_rem_pio2f+0x258>
 802bd6e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802bd72:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802bd76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802bd7a:	edc0 6a00 	vstr	s13, [r0]
 802bd7e:	e7eb      	b.n	802bd58 <__ieee754_rem_pio2f+0x50>
 802bd80:	429d      	cmp	r5, r3
 802bd82:	ee77 7a80 	vadd.f32	s15, s15, s0
 802bd86:	d00e      	beq.n	802bda6 <__ieee754_rem_pio2f+0x9e>
 802bd88:	ed9f 7a73 	vldr	s14, [pc, #460]	; 802bf58 <__ieee754_rem_pio2f+0x250>
 802bd8c:	ee37 0a87 	vadd.f32	s0, s15, s14
 802bd90:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802bd94:	ed80 0a00 	vstr	s0, [r0]
 802bd98:	ee77 7a87 	vadd.f32	s15, s15, s14
 802bd9c:	f04f 30ff 	mov.w	r0, #4294967295
 802bda0:	edc4 7a01 	vstr	s15, [r4, #4]
 802bda4:	e7dd      	b.n	802bd62 <__ieee754_rem_pio2f+0x5a>
 802bda6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 802bf5c <__ieee754_rem_pio2f+0x254>
 802bdaa:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 802bf60 <__ieee754_rem_pio2f+0x258>
 802bdae:	ee77 7a80 	vadd.f32	s15, s15, s0
 802bdb2:	ee77 6a87 	vadd.f32	s13, s15, s14
 802bdb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802bdba:	edc0 6a00 	vstr	s13, [r0]
 802bdbe:	e7eb      	b.n	802bd98 <__ieee754_rem_pio2f+0x90>
 802bdc0:	4b68      	ldr	r3, [pc, #416]	; (802bf64 <__ieee754_rem_pio2f+0x25c>)
 802bdc2:	429d      	cmp	r5, r3
 802bdc4:	dc72      	bgt.n	802beac <__ieee754_rem_pio2f+0x1a4>
 802bdc6:	f000 fc0d 	bl	802c5e4 <fabsf>
 802bdca:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802bf68 <__ieee754_rem_pio2f+0x260>
 802bdce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802bdd2:	eee0 7a07 	vfma.f32	s15, s0, s14
 802bdd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802bdda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802bdde:	ee17 0a90 	vmov	r0, s15
 802bde2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802bf50 <__ieee754_rem_pio2f+0x248>
 802bde6:	eea7 0a67 	vfms.f32	s0, s14, s15
 802bdea:	281f      	cmp	r0, #31
 802bdec:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802bf58 <__ieee754_rem_pio2f+0x250>
 802bdf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 802bdf4:	eeb1 6a47 	vneg.f32	s12, s14
 802bdf8:	ee70 6a67 	vsub.f32	s13, s0, s15
 802bdfc:	ee16 2a90 	vmov	r2, s13
 802be00:	dc1c      	bgt.n	802be3c <__ieee754_rem_pio2f+0x134>
 802be02:	495a      	ldr	r1, [pc, #360]	; (802bf6c <__ieee754_rem_pio2f+0x264>)
 802be04:	1e47      	subs	r7, r0, #1
 802be06:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 802be0a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802be0e:	428b      	cmp	r3, r1
 802be10:	d014      	beq.n	802be3c <__ieee754_rem_pio2f+0x134>
 802be12:	6022      	str	r2, [r4, #0]
 802be14:	ed94 7a00 	vldr	s14, [r4]
 802be18:	ee30 0a47 	vsub.f32	s0, s0, s14
 802be1c:	2e00      	cmp	r6, #0
 802be1e:	ee30 0a67 	vsub.f32	s0, s0, s15
 802be22:	ed84 0a01 	vstr	s0, [r4, #4]
 802be26:	da9c      	bge.n	802bd62 <__ieee754_rem_pio2f+0x5a>
 802be28:	eeb1 7a47 	vneg.f32	s14, s14
 802be2c:	eeb1 0a40 	vneg.f32	s0, s0
 802be30:	ed84 7a00 	vstr	s14, [r4]
 802be34:	ed84 0a01 	vstr	s0, [r4, #4]
 802be38:	4240      	negs	r0, r0
 802be3a:	e792      	b.n	802bd62 <__ieee754_rem_pio2f+0x5a>
 802be3c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802be40:	15eb      	asrs	r3, r5, #23
 802be42:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 802be46:	2d08      	cmp	r5, #8
 802be48:	dde3      	ble.n	802be12 <__ieee754_rem_pio2f+0x10a>
 802be4a:	eddf 7a44 	vldr	s15, [pc, #272]	; 802bf5c <__ieee754_rem_pio2f+0x254>
 802be4e:	eef0 6a40 	vmov.f32	s13, s0
 802be52:	eee6 6a27 	vfma.f32	s13, s12, s15
 802be56:	ee30 0a66 	vsub.f32	s0, s0, s13
 802be5a:	eea6 0a27 	vfma.f32	s0, s12, s15
 802be5e:	eddf 7a40 	vldr	s15, [pc, #256]	; 802bf60 <__ieee754_rem_pio2f+0x258>
 802be62:	ee97 0a27 	vfnms.f32	s0, s14, s15
 802be66:	ee76 5ac0 	vsub.f32	s11, s13, s0
 802be6a:	eef0 7a40 	vmov.f32	s15, s0
 802be6e:	ee15 2a90 	vmov	r2, s11
 802be72:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802be76:	1a5b      	subs	r3, r3, r1
 802be78:	2b19      	cmp	r3, #25
 802be7a:	dc04      	bgt.n	802be86 <__ieee754_rem_pio2f+0x17e>
 802be7c:	edc4 5a00 	vstr	s11, [r4]
 802be80:	eeb0 0a66 	vmov.f32	s0, s13
 802be84:	e7c6      	b.n	802be14 <__ieee754_rem_pio2f+0x10c>
 802be86:	eddf 5a3a 	vldr	s11, [pc, #232]	; 802bf70 <__ieee754_rem_pio2f+0x268>
 802be8a:	eeb0 0a66 	vmov.f32	s0, s13
 802be8e:	eea6 0a25 	vfma.f32	s0, s12, s11
 802be92:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802be96:	eddf 6a37 	vldr	s13, [pc, #220]	; 802bf74 <__ieee754_rem_pio2f+0x26c>
 802be9a:	eee6 7a25 	vfma.f32	s15, s12, s11
 802be9e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802bea2:	ee30 7a67 	vsub.f32	s14, s0, s15
 802bea6:	ed84 7a00 	vstr	s14, [r4]
 802beaa:	e7b3      	b.n	802be14 <__ieee754_rem_pio2f+0x10c>
 802beac:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 802beb0:	db06      	blt.n	802bec0 <__ieee754_rem_pio2f+0x1b8>
 802beb2:	ee70 7a40 	vsub.f32	s15, s0, s0
 802beb6:	edc0 7a01 	vstr	s15, [r0, #4]
 802beba:	edc0 7a00 	vstr	s15, [r0]
 802bebe:	e733      	b.n	802bd28 <__ieee754_rem_pio2f+0x20>
 802bec0:	15ea      	asrs	r2, r5, #23
 802bec2:	3a86      	subs	r2, #134	; 0x86
 802bec4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802bec8:	ee07 3a90 	vmov	s15, r3
 802becc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802bed0:	eddf 6a29 	vldr	s13, [pc, #164]	; 802bf78 <__ieee754_rem_pio2f+0x270>
 802bed4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802bed8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802bedc:	ed8d 7a03 	vstr	s14, [sp, #12]
 802bee0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802bee4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802bee8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802beec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802bef0:	ed8d 7a04 	vstr	s14, [sp, #16]
 802bef4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802bef8:	eef5 7a40 	vcmp.f32	s15, #0.0
 802befc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bf00:	edcd 7a05 	vstr	s15, [sp, #20]
 802bf04:	d11e      	bne.n	802bf44 <__ieee754_rem_pio2f+0x23c>
 802bf06:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802bf0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bf0e:	bf14      	ite	ne
 802bf10:	2302      	movne	r3, #2
 802bf12:	2301      	moveq	r3, #1
 802bf14:	4919      	ldr	r1, [pc, #100]	; (802bf7c <__ieee754_rem_pio2f+0x274>)
 802bf16:	9101      	str	r1, [sp, #4]
 802bf18:	2102      	movs	r1, #2
 802bf1a:	9100      	str	r1, [sp, #0]
 802bf1c:	a803      	add	r0, sp, #12
 802bf1e:	4621      	mov	r1, r4
 802bf20:	f000 f88e 	bl	802c040 <__kernel_rem_pio2f>
 802bf24:	2e00      	cmp	r6, #0
 802bf26:	f6bf af1c 	bge.w	802bd62 <__ieee754_rem_pio2f+0x5a>
 802bf2a:	edd4 7a00 	vldr	s15, [r4]
 802bf2e:	eef1 7a67 	vneg.f32	s15, s15
 802bf32:	edc4 7a00 	vstr	s15, [r4]
 802bf36:	edd4 7a01 	vldr	s15, [r4, #4]
 802bf3a:	eef1 7a67 	vneg.f32	s15, s15
 802bf3e:	edc4 7a01 	vstr	s15, [r4, #4]
 802bf42:	e779      	b.n	802be38 <__ieee754_rem_pio2f+0x130>
 802bf44:	2303      	movs	r3, #3
 802bf46:	e7e5      	b.n	802bf14 <__ieee754_rem_pio2f+0x20c>
 802bf48:	3f490fd8 	.word	0x3f490fd8
 802bf4c:	4016cbe3 	.word	0x4016cbe3
 802bf50:	3fc90f80 	.word	0x3fc90f80
 802bf54:	3fc90fd0 	.word	0x3fc90fd0
 802bf58:	37354443 	.word	0x37354443
 802bf5c:	37354400 	.word	0x37354400
 802bf60:	2e85a308 	.word	0x2e85a308
 802bf64:	43490f80 	.word	0x43490f80
 802bf68:	3f22f984 	.word	0x3f22f984
 802bf6c:	08032728 	.word	0x08032728
 802bf70:	2e85a300 	.word	0x2e85a300
 802bf74:	248d3132 	.word	0x248d3132
 802bf78:	43800000 	.word	0x43800000
 802bf7c:	080327a8 	.word	0x080327a8

0802bf80 <__kernel_cosf>:
 802bf80:	ee10 3a10 	vmov	r3, s0
 802bf84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802bf88:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802bf8c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 802bf90:	da05      	bge.n	802bf9e <__kernel_cosf+0x1e>
 802bf92:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802bf96:	ee17 2a90 	vmov	r2, s15
 802bf9a:	2a00      	cmp	r2, #0
 802bf9c:	d03d      	beq.n	802c01a <__kernel_cosf+0x9a>
 802bf9e:	ee60 5a00 	vmul.f32	s11, s0, s0
 802bfa2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802c020 <__kernel_cosf+0xa0>
 802bfa6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 802c024 <__kernel_cosf+0xa4>
 802bfaa:	eddf 6a1f 	vldr	s13, [pc, #124]	; 802c028 <__kernel_cosf+0xa8>
 802bfae:	4a1f      	ldr	r2, [pc, #124]	; (802c02c <__kernel_cosf+0xac>)
 802bfb0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 802bfb4:	4293      	cmp	r3, r2
 802bfb6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802c030 <__kernel_cosf+0xb0>
 802bfba:	eee7 7a25 	vfma.f32	s15, s14, s11
 802bfbe:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 802c034 <__kernel_cosf+0xb4>
 802bfc2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802bfc6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 802c038 <__kernel_cosf+0xb8>
 802bfca:	eee7 7a25 	vfma.f32	s15, s14, s11
 802bfce:	eeb0 7a66 	vmov.f32	s14, s13
 802bfd2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802bfd6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 802bfda:	ee65 7aa6 	vmul.f32	s15, s11, s13
 802bfde:	ee67 6a25 	vmul.f32	s13, s14, s11
 802bfe2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 802bfe6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802bfea:	dc04      	bgt.n	802bff6 <__kernel_cosf+0x76>
 802bfec:	ee37 7ac7 	vsub.f32	s14, s15, s14
 802bff0:	ee36 0a47 	vsub.f32	s0, s12, s14
 802bff4:	4770      	bx	lr
 802bff6:	4a11      	ldr	r2, [pc, #68]	; (802c03c <__kernel_cosf+0xbc>)
 802bff8:	4293      	cmp	r3, r2
 802bffa:	bfda      	itte	le
 802bffc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802c000:	ee06 3a90 	vmovle	s13, r3
 802c004:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 802c008:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802c00c:	ee36 0a66 	vsub.f32	s0, s12, s13
 802c010:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c014:	ee30 0a67 	vsub.f32	s0, s0, s15
 802c018:	4770      	bx	lr
 802c01a:	eeb0 0a46 	vmov.f32	s0, s12
 802c01e:	4770      	bx	lr
 802c020:	ad47d74e 	.word	0xad47d74e
 802c024:	310f74f6 	.word	0x310f74f6
 802c028:	3d2aaaab 	.word	0x3d2aaaab
 802c02c:	3e999999 	.word	0x3e999999
 802c030:	b493f27c 	.word	0xb493f27c
 802c034:	37d00d01 	.word	0x37d00d01
 802c038:	bab60b61 	.word	0xbab60b61
 802c03c:	3f480000 	.word	0x3f480000

0802c040 <__kernel_rem_pio2f>:
 802c040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c044:	ed2d 8b04 	vpush	{d8-d9}
 802c048:	b0d7      	sub	sp, #348	; 0x15c
 802c04a:	4616      	mov	r6, r2
 802c04c:	4698      	mov	r8, r3
 802c04e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802c050:	4bbb      	ldr	r3, [pc, #748]	; (802c340 <__kernel_rem_pio2f+0x300>)
 802c052:	9001      	str	r0, [sp, #4]
 802c054:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 802c058:	1d33      	adds	r3, r6, #4
 802c05a:	460d      	mov	r5, r1
 802c05c:	f108 39ff 	add.w	r9, r8, #4294967295
 802c060:	db29      	blt.n	802c0b6 <__kernel_rem_pio2f+0x76>
 802c062:	1ef1      	subs	r1, r6, #3
 802c064:	bf48      	it	mi
 802c066:	1d31      	addmi	r1, r6, #4
 802c068:	10c9      	asrs	r1, r1, #3
 802c06a:	1c4c      	adds	r4, r1, #1
 802c06c:	00e3      	lsls	r3, r4, #3
 802c06e:	9302      	str	r3, [sp, #8]
 802c070:	9b65      	ldr	r3, [sp, #404]	; 0x194
 802c072:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 802c350 <__kernel_rem_pio2f+0x310>
 802c076:	eba1 0009 	sub.w	r0, r1, r9
 802c07a:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 802c07e:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 802c082:	eb07 0c09 	add.w	ip, r7, r9
 802c086:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 802c08a:	2300      	movs	r3, #0
 802c08c:	4563      	cmp	r3, ip
 802c08e:	dd14      	ble.n	802c0ba <__kernel_rem_pio2f+0x7a>
 802c090:	ab1a      	add	r3, sp, #104	; 0x68
 802c092:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 802c096:	46cc      	mov	ip, r9
 802c098:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 802c09c:	f1c8 0b01 	rsb	fp, r8, #1
 802c0a0:	eb0b 020c 	add.w	r2, fp, ip
 802c0a4:	4297      	cmp	r7, r2
 802c0a6:	db27      	blt.n	802c0f8 <__kernel_rem_pio2f+0xb8>
 802c0a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 802c0ac:	eddf 7aa8 	vldr	s15, [pc, #672]	; 802c350 <__kernel_rem_pio2f+0x310>
 802c0b0:	4618      	mov	r0, r3
 802c0b2:	2200      	movs	r2, #0
 802c0b4:	e016      	b.n	802c0e4 <__kernel_rem_pio2f+0xa4>
 802c0b6:	2100      	movs	r1, #0
 802c0b8:	e7d7      	b.n	802c06a <__kernel_rem_pio2f+0x2a>
 802c0ba:	42d8      	cmn	r0, r3
 802c0bc:	bf5d      	ittte	pl
 802c0be:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 802c0c2:	ee07 2a90 	vmovpl	s15, r2
 802c0c6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802c0ca:	eef0 7a47 	vmovmi.f32	s15, s14
 802c0ce:	ecea 7a01 	vstmia	sl!, {s15}
 802c0d2:	3301      	adds	r3, #1
 802c0d4:	e7da      	b.n	802c08c <__kernel_rem_pio2f+0x4c>
 802c0d6:	ecfe 6a01 	vldmia	lr!, {s13}
 802c0da:	ed90 7a00 	vldr	s14, [r0]
 802c0de:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c0e2:	3201      	adds	r2, #1
 802c0e4:	454a      	cmp	r2, r9
 802c0e6:	f1a0 0004 	sub.w	r0, r0, #4
 802c0ea:	ddf4      	ble.n	802c0d6 <__kernel_rem_pio2f+0x96>
 802c0ec:	ecea 7a01 	vstmia	sl!, {s15}
 802c0f0:	3304      	adds	r3, #4
 802c0f2:	f10c 0c01 	add.w	ip, ip, #1
 802c0f6:	e7d3      	b.n	802c0a0 <__kernel_rem_pio2f+0x60>
 802c0f8:	ab06      	add	r3, sp, #24
 802c0fa:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 802c0fe:	9304      	str	r3, [sp, #16]
 802c100:	9b65      	ldr	r3, [sp, #404]	; 0x194
 802c102:	eddf 8a92 	vldr	s17, [pc, #584]	; 802c34c <__kernel_rem_pio2f+0x30c>
 802c106:	ed9f 9a90 	vldr	s18, [pc, #576]	; 802c348 <__kernel_rem_pio2f+0x308>
 802c10a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 802c10e:	9303      	str	r3, [sp, #12]
 802c110:	46ba      	mov	sl, r7
 802c112:	ab56      	add	r3, sp, #344	; 0x158
 802c114:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 802c118:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 802c11c:	ab06      	add	r3, sp, #24
 802c11e:	4618      	mov	r0, r3
 802c120:	4652      	mov	r2, sl
 802c122:	2a00      	cmp	r2, #0
 802c124:	dc51      	bgt.n	802c1ca <__kernel_rem_pio2f+0x18a>
 802c126:	4620      	mov	r0, r4
 802c128:	9305      	str	r3, [sp, #20]
 802c12a:	f000 fa63 	bl	802c5f4 <scalbnf>
 802c12e:	eeb0 8a40 	vmov.f32	s16, s0
 802c132:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802c136:	ee28 0a00 	vmul.f32	s0, s16, s0
 802c13a:	f7ff fd61 	bl	802bc00 <floorf>
 802c13e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802c142:	eea0 8a67 	vfms.f32	s16, s0, s15
 802c146:	2c00      	cmp	r4, #0
 802c148:	9b05      	ldr	r3, [sp, #20]
 802c14a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802c14e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 802c152:	edcd 7a00 	vstr	s15, [sp]
 802c156:	ee38 8a40 	vsub.f32	s16, s16, s0
 802c15a:	dd4b      	ble.n	802c1f4 <__kernel_rem_pio2f+0x1b4>
 802c15c:	f10a 3cff 	add.w	ip, sl, #4294967295
 802c160:	aa06      	add	r2, sp, #24
 802c162:	f1c4 0e08 	rsb	lr, r4, #8
 802c166:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802c16a:	ee17 1a90 	vmov	r1, s15
 802c16e:	fa42 f00e 	asr.w	r0, r2, lr
 802c172:	4401      	add	r1, r0
 802c174:	9100      	str	r1, [sp, #0]
 802c176:	fa00 f00e 	lsl.w	r0, r0, lr
 802c17a:	a906      	add	r1, sp, #24
 802c17c:	1a12      	subs	r2, r2, r0
 802c17e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 802c182:	f1c4 0007 	rsb	r0, r4, #7
 802c186:	fa42 fb00 	asr.w	fp, r2, r0
 802c18a:	f1bb 0f00 	cmp.w	fp, #0
 802c18e:	dd43      	ble.n	802c218 <__kernel_rem_pio2f+0x1d8>
 802c190:	9a00      	ldr	r2, [sp, #0]
 802c192:	f04f 0e00 	mov.w	lr, #0
 802c196:	3201      	adds	r2, #1
 802c198:	9200      	str	r2, [sp, #0]
 802c19a:	4670      	mov	r0, lr
 802c19c:	45f2      	cmp	sl, lr
 802c19e:	dc6c      	bgt.n	802c27a <__kernel_rem_pio2f+0x23a>
 802c1a0:	2c00      	cmp	r4, #0
 802c1a2:	dd04      	ble.n	802c1ae <__kernel_rem_pio2f+0x16e>
 802c1a4:	2c01      	cmp	r4, #1
 802c1a6:	d079      	beq.n	802c29c <__kernel_rem_pio2f+0x25c>
 802c1a8:	2c02      	cmp	r4, #2
 802c1aa:	f000 8082 	beq.w	802c2b2 <__kernel_rem_pio2f+0x272>
 802c1ae:	f1bb 0f02 	cmp.w	fp, #2
 802c1b2:	d131      	bne.n	802c218 <__kernel_rem_pio2f+0x1d8>
 802c1b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802c1b8:	ee30 8a48 	vsub.f32	s16, s0, s16
 802c1bc:	b360      	cbz	r0, 802c218 <__kernel_rem_pio2f+0x1d8>
 802c1be:	4620      	mov	r0, r4
 802c1c0:	f000 fa18 	bl	802c5f4 <scalbnf>
 802c1c4:	ee38 8a40 	vsub.f32	s16, s16, s0
 802c1c8:	e026      	b.n	802c218 <__kernel_rem_pio2f+0x1d8>
 802c1ca:	ee60 7a28 	vmul.f32	s15, s0, s17
 802c1ce:	3a01      	subs	r2, #1
 802c1d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c1d4:	a942      	add	r1, sp, #264	; 0x108
 802c1d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c1da:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 802c1de:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802c1e2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c1e6:	eca0 0a01 	vstmia	r0!, {s0}
 802c1ea:	ed9c 0a00 	vldr	s0, [ip]
 802c1ee:	ee37 0a80 	vadd.f32	s0, s15, s0
 802c1f2:	e796      	b.n	802c122 <__kernel_rem_pio2f+0xe2>
 802c1f4:	d107      	bne.n	802c206 <__kernel_rem_pio2f+0x1c6>
 802c1f6:	f10a 32ff 	add.w	r2, sl, #4294967295
 802c1fa:	a906      	add	r1, sp, #24
 802c1fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802c200:	ea4f 2b22 	mov.w	fp, r2, asr #8
 802c204:	e7c1      	b.n	802c18a <__kernel_rem_pio2f+0x14a>
 802c206:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802c20a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802c20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c212:	da2f      	bge.n	802c274 <__kernel_rem_pio2f+0x234>
 802c214:	f04f 0b00 	mov.w	fp, #0
 802c218:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802c21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c220:	f040 8098 	bne.w	802c354 <__kernel_rem_pio2f+0x314>
 802c224:	f10a 33ff 	add.w	r3, sl, #4294967295
 802c228:	469c      	mov	ip, r3
 802c22a:	2200      	movs	r2, #0
 802c22c:	45bc      	cmp	ip, r7
 802c22e:	da48      	bge.n	802c2c2 <__kernel_rem_pio2f+0x282>
 802c230:	2a00      	cmp	r2, #0
 802c232:	d05f      	beq.n	802c2f4 <__kernel_rem_pio2f+0x2b4>
 802c234:	aa06      	add	r2, sp, #24
 802c236:	3c08      	subs	r4, #8
 802c238:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802c23c:	2900      	cmp	r1, #0
 802c23e:	d07d      	beq.n	802c33c <__kernel_rem_pio2f+0x2fc>
 802c240:	4620      	mov	r0, r4
 802c242:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802c246:	9301      	str	r3, [sp, #4]
 802c248:	f000 f9d4 	bl	802c5f4 <scalbnf>
 802c24c:	9b01      	ldr	r3, [sp, #4]
 802c24e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 802c34c <__kernel_rem_pio2f+0x30c>
 802c252:	4619      	mov	r1, r3
 802c254:	2900      	cmp	r1, #0
 802c256:	f280 80af 	bge.w	802c3b8 <__kernel_rem_pio2f+0x378>
 802c25a:	4618      	mov	r0, r3
 802c25c:	2400      	movs	r4, #0
 802c25e:	2800      	cmp	r0, #0
 802c260:	f2c0 80d0 	blt.w	802c404 <__kernel_rem_pio2f+0x3c4>
 802c264:	a942      	add	r1, sp, #264	; 0x108
 802c266:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 802c26a:	4a36      	ldr	r2, [pc, #216]	; (802c344 <__kernel_rem_pio2f+0x304>)
 802c26c:	eddf 7a38 	vldr	s15, [pc, #224]	; 802c350 <__kernel_rem_pio2f+0x310>
 802c270:	2100      	movs	r1, #0
 802c272:	e0bb      	b.n	802c3ec <__kernel_rem_pio2f+0x3ac>
 802c274:	f04f 0b02 	mov.w	fp, #2
 802c278:	e78a      	b.n	802c190 <__kernel_rem_pio2f+0x150>
 802c27a:	681a      	ldr	r2, [r3, #0]
 802c27c:	b948      	cbnz	r0, 802c292 <__kernel_rem_pio2f+0x252>
 802c27e:	b11a      	cbz	r2, 802c288 <__kernel_rem_pio2f+0x248>
 802c280:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802c284:	601a      	str	r2, [r3, #0]
 802c286:	2201      	movs	r2, #1
 802c288:	f10e 0e01 	add.w	lr, lr, #1
 802c28c:	3304      	adds	r3, #4
 802c28e:	4610      	mov	r0, r2
 802c290:	e784      	b.n	802c19c <__kernel_rem_pio2f+0x15c>
 802c292:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 802c296:	601a      	str	r2, [r3, #0]
 802c298:	4602      	mov	r2, r0
 802c29a:	e7f5      	b.n	802c288 <__kernel_rem_pio2f+0x248>
 802c29c:	f10a 3cff 	add.w	ip, sl, #4294967295
 802c2a0:	ab06      	add	r3, sp, #24
 802c2a2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802c2a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802c2aa:	aa06      	add	r2, sp, #24
 802c2ac:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 802c2b0:	e77d      	b.n	802c1ae <__kernel_rem_pio2f+0x16e>
 802c2b2:	f10a 3cff 	add.w	ip, sl, #4294967295
 802c2b6:	ab06      	add	r3, sp, #24
 802c2b8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802c2bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c2c0:	e7f3      	b.n	802c2aa <__kernel_rem_pio2f+0x26a>
 802c2c2:	a906      	add	r1, sp, #24
 802c2c4:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 802c2c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 802c2cc:	4302      	orrs	r2, r0
 802c2ce:	e7ad      	b.n	802c22c <__kernel_rem_pio2f+0x1ec>
 802c2d0:	3001      	adds	r0, #1
 802c2d2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802c2d6:	2a00      	cmp	r2, #0
 802c2d8:	d0fa      	beq.n	802c2d0 <__kernel_rem_pio2f+0x290>
 802c2da:	a91a      	add	r1, sp, #104	; 0x68
 802c2dc:	eb0a 0208 	add.w	r2, sl, r8
 802c2e0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 802c2e4:	f10a 0301 	add.w	r3, sl, #1
 802c2e8:	eb0a 0100 	add.w	r1, sl, r0
 802c2ec:	4299      	cmp	r1, r3
 802c2ee:	da04      	bge.n	802c2fa <__kernel_rem_pio2f+0x2ba>
 802c2f0:	468a      	mov	sl, r1
 802c2f2:	e70e      	b.n	802c112 <__kernel_rem_pio2f+0xd2>
 802c2f4:	9b04      	ldr	r3, [sp, #16]
 802c2f6:	2001      	movs	r0, #1
 802c2f8:	e7eb      	b.n	802c2d2 <__kernel_rem_pio2f+0x292>
 802c2fa:	9803      	ldr	r0, [sp, #12]
 802c2fc:	f8dd c004 	ldr.w	ip, [sp, #4]
 802c300:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802c304:	9000      	str	r0, [sp, #0]
 802c306:	ee07 0a90 	vmov	s15, r0
 802c30a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c30e:	2000      	movs	r0, #0
 802c310:	ece2 7a01 	vstmia	r2!, {s15}
 802c314:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802c350 <__kernel_rem_pio2f+0x310>
 802c318:	4696      	mov	lr, r2
 802c31a:	4548      	cmp	r0, r9
 802c31c:	dd06      	ble.n	802c32c <__kernel_rem_pio2f+0x2ec>
 802c31e:	a842      	add	r0, sp, #264	; 0x108
 802c320:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 802c324:	edc0 7a00 	vstr	s15, [r0]
 802c328:	3301      	adds	r3, #1
 802c32a:	e7df      	b.n	802c2ec <__kernel_rem_pio2f+0x2ac>
 802c32c:	ecfc 6a01 	vldmia	ip!, {s13}
 802c330:	ed3e 7a01 	vldmdb	lr!, {s14}
 802c334:	3001      	adds	r0, #1
 802c336:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c33a:	e7ee      	b.n	802c31a <__kernel_rem_pio2f+0x2da>
 802c33c:	3b01      	subs	r3, #1
 802c33e:	e779      	b.n	802c234 <__kernel_rem_pio2f+0x1f4>
 802c340:	08032aec 	.word	0x08032aec
 802c344:	08032ac0 	.word	0x08032ac0
 802c348:	43800000 	.word	0x43800000
 802c34c:	3b800000 	.word	0x3b800000
 802c350:	00000000 	.word	0x00000000
 802c354:	9b02      	ldr	r3, [sp, #8]
 802c356:	eeb0 0a48 	vmov.f32	s0, s16
 802c35a:	1b98      	subs	r0, r3, r6
 802c35c:	f000 f94a 	bl	802c5f4 <scalbnf>
 802c360:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 802c348 <__kernel_rem_pio2f+0x308>
 802c364:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802c368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c36c:	db1b      	blt.n	802c3a6 <__kernel_rem_pio2f+0x366>
 802c36e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 802c34c <__kernel_rem_pio2f+0x30c>
 802c372:	ee60 7a27 	vmul.f32	s15, s0, s15
 802c376:	aa06      	add	r2, sp, #24
 802c378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c37c:	a906      	add	r1, sp, #24
 802c37e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c382:	3408      	adds	r4, #8
 802c384:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802c388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c38c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c390:	ee10 3a10 	vmov	r3, s0
 802c394:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 802c398:	ee17 2a90 	vmov	r2, s15
 802c39c:	f10a 0301 	add.w	r3, sl, #1
 802c3a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802c3a4:	e74c      	b.n	802c240 <__kernel_rem_pio2f+0x200>
 802c3a6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802c3aa:	aa06      	add	r2, sp, #24
 802c3ac:	ee10 3a10 	vmov	r3, s0
 802c3b0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 802c3b4:	4653      	mov	r3, sl
 802c3b6:	e743      	b.n	802c240 <__kernel_rem_pio2f+0x200>
 802c3b8:	aa42      	add	r2, sp, #264	; 0x108
 802c3ba:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 802c3be:	aa06      	add	r2, sp, #24
 802c3c0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 802c3c4:	9201      	str	r2, [sp, #4]
 802c3c6:	ee07 2a90 	vmov	s15, r2
 802c3ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802c3ce:	3901      	subs	r1, #1
 802c3d0:	ee67 7a80 	vmul.f32	s15, s15, s0
 802c3d4:	ee20 0a07 	vmul.f32	s0, s0, s14
 802c3d8:	edc0 7a00 	vstr	s15, [r0]
 802c3dc:	e73a      	b.n	802c254 <__kernel_rem_pio2f+0x214>
 802c3de:	ecf2 6a01 	vldmia	r2!, {s13}
 802c3e2:	ecb6 7a01 	vldmia	r6!, {s14}
 802c3e6:	eee6 7a87 	vfma.f32	s15, s13, s14
 802c3ea:	3101      	adds	r1, #1
 802c3ec:	42b9      	cmp	r1, r7
 802c3ee:	dc01      	bgt.n	802c3f4 <__kernel_rem_pio2f+0x3b4>
 802c3f0:	428c      	cmp	r4, r1
 802c3f2:	daf4      	bge.n	802c3de <__kernel_rem_pio2f+0x39e>
 802c3f4:	aa56      	add	r2, sp, #344	; 0x158
 802c3f6:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 802c3fa:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 802c3fe:	3801      	subs	r0, #1
 802c400:	3401      	adds	r4, #1
 802c402:	e72c      	b.n	802c25e <__kernel_rem_pio2f+0x21e>
 802c404:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802c406:	2a02      	cmp	r2, #2
 802c408:	dc0a      	bgt.n	802c420 <__kernel_rem_pio2f+0x3e0>
 802c40a:	2a00      	cmp	r2, #0
 802c40c:	dc61      	bgt.n	802c4d2 <__kernel_rem_pio2f+0x492>
 802c40e:	d03c      	beq.n	802c48a <__kernel_rem_pio2f+0x44a>
 802c410:	9b00      	ldr	r3, [sp, #0]
 802c412:	f003 0007 	and.w	r0, r3, #7
 802c416:	b057      	add	sp, #348	; 0x15c
 802c418:	ecbd 8b04 	vpop	{d8-d9}
 802c41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c420:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802c422:	2a03      	cmp	r2, #3
 802c424:	d1f4      	bne.n	802c410 <__kernel_rem_pio2f+0x3d0>
 802c426:	aa2e      	add	r2, sp, #184	; 0xb8
 802c428:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802c42c:	4608      	mov	r0, r1
 802c42e:	461c      	mov	r4, r3
 802c430:	2c00      	cmp	r4, #0
 802c432:	f1a0 0004 	sub.w	r0, r0, #4
 802c436:	dc59      	bgt.n	802c4ec <__kernel_rem_pio2f+0x4ac>
 802c438:	4618      	mov	r0, r3
 802c43a:	2801      	cmp	r0, #1
 802c43c:	f1a1 0104 	sub.w	r1, r1, #4
 802c440:	dc64      	bgt.n	802c50c <__kernel_rem_pio2f+0x4cc>
 802c442:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 802c350 <__kernel_rem_pio2f+0x310>
 802c446:	2b01      	cmp	r3, #1
 802c448:	dc70      	bgt.n	802c52c <__kernel_rem_pio2f+0x4ec>
 802c44a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 802c44e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 802c452:	f1bb 0f00 	cmp.w	fp, #0
 802c456:	d172      	bne.n	802c53e <__kernel_rem_pio2f+0x4fe>
 802c458:	edc5 6a00 	vstr	s13, [r5]
 802c45c:	ed85 7a01 	vstr	s14, [r5, #4]
 802c460:	edc5 7a02 	vstr	s15, [r5, #8]
 802c464:	e7d4      	b.n	802c410 <__kernel_rem_pio2f+0x3d0>
 802c466:	aa2e      	add	r2, sp, #184	; 0xb8
 802c468:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802c46c:	ed91 7a00 	vldr	s14, [r1]
 802c470:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c474:	3b01      	subs	r3, #1
 802c476:	2b00      	cmp	r3, #0
 802c478:	daf5      	bge.n	802c466 <__kernel_rem_pio2f+0x426>
 802c47a:	f1bb 0f00 	cmp.w	fp, #0
 802c47e:	d001      	beq.n	802c484 <__kernel_rem_pio2f+0x444>
 802c480:	eef1 7a67 	vneg.f32	s15, s15
 802c484:	edc5 7a00 	vstr	s15, [r5]
 802c488:	e7c2      	b.n	802c410 <__kernel_rem_pio2f+0x3d0>
 802c48a:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 802c350 <__kernel_rem_pio2f+0x310>
 802c48e:	e7f2      	b.n	802c476 <__kernel_rem_pio2f+0x436>
 802c490:	aa2e      	add	r2, sp, #184	; 0xb8
 802c492:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 802c496:	edd0 7a00 	vldr	s15, [r0]
 802c49a:	ee37 7a27 	vadd.f32	s14, s14, s15
 802c49e:	3901      	subs	r1, #1
 802c4a0:	2900      	cmp	r1, #0
 802c4a2:	daf5      	bge.n	802c490 <__kernel_rem_pio2f+0x450>
 802c4a4:	f1bb 0f00 	cmp.w	fp, #0
 802c4a8:	d017      	beq.n	802c4da <__kernel_rem_pio2f+0x49a>
 802c4aa:	eef1 7a47 	vneg.f32	s15, s14
 802c4ae:	edc5 7a00 	vstr	s15, [r5]
 802c4b2:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 802c4b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c4ba:	a82f      	add	r0, sp, #188	; 0xbc
 802c4bc:	2101      	movs	r1, #1
 802c4be:	428b      	cmp	r3, r1
 802c4c0:	da0e      	bge.n	802c4e0 <__kernel_rem_pio2f+0x4a0>
 802c4c2:	f1bb 0f00 	cmp.w	fp, #0
 802c4c6:	d001      	beq.n	802c4cc <__kernel_rem_pio2f+0x48c>
 802c4c8:	eef1 7a67 	vneg.f32	s15, s15
 802c4cc:	edc5 7a01 	vstr	s15, [r5, #4]
 802c4d0:	e79e      	b.n	802c410 <__kernel_rem_pio2f+0x3d0>
 802c4d2:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 802c350 <__kernel_rem_pio2f+0x310>
 802c4d6:	4619      	mov	r1, r3
 802c4d8:	e7e2      	b.n	802c4a0 <__kernel_rem_pio2f+0x460>
 802c4da:	eef0 7a47 	vmov.f32	s15, s14
 802c4de:	e7e6      	b.n	802c4ae <__kernel_rem_pio2f+0x46e>
 802c4e0:	ecb0 7a01 	vldmia	r0!, {s14}
 802c4e4:	3101      	adds	r1, #1
 802c4e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c4ea:	e7e8      	b.n	802c4be <__kernel_rem_pio2f+0x47e>
 802c4ec:	edd0 7a00 	vldr	s15, [r0]
 802c4f0:	edd0 6a01 	vldr	s13, [r0, #4]
 802c4f4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802c4f8:	3c01      	subs	r4, #1
 802c4fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c4fe:	ed80 7a00 	vstr	s14, [r0]
 802c502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c506:	edc0 7a01 	vstr	s15, [r0, #4]
 802c50a:	e791      	b.n	802c430 <__kernel_rem_pio2f+0x3f0>
 802c50c:	edd1 7a00 	vldr	s15, [r1]
 802c510:	edd1 6a01 	vldr	s13, [r1, #4]
 802c514:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802c518:	3801      	subs	r0, #1
 802c51a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c51e:	ed81 7a00 	vstr	s14, [r1]
 802c522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c526:	edc1 7a01 	vstr	s15, [r1, #4]
 802c52a:	e786      	b.n	802c43a <__kernel_rem_pio2f+0x3fa>
 802c52c:	aa2e      	add	r2, sp, #184	; 0xb8
 802c52e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802c532:	ed91 7a00 	vldr	s14, [r1]
 802c536:	3b01      	subs	r3, #1
 802c538:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c53c:	e783      	b.n	802c446 <__kernel_rem_pio2f+0x406>
 802c53e:	eef1 6a66 	vneg.f32	s13, s13
 802c542:	eeb1 7a47 	vneg.f32	s14, s14
 802c546:	edc5 6a00 	vstr	s13, [r5]
 802c54a:	ed85 7a01 	vstr	s14, [r5, #4]
 802c54e:	eef1 7a67 	vneg.f32	s15, s15
 802c552:	e785      	b.n	802c460 <__kernel_rem_pio2f+0x420>

0802c554 <__kernel_sinf>:
 802c554:	ee10 3a10 	vmov	r3, s0
 802c558:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c55c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802c560:	da04      	bge.n	802c56c <__kernel_sinf+0x18>
 802c562:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802c566:	ee17 3a90 	vmov	r3, s15
 802c56a:	b35b      	cbz	r3, 802c5c4 <__kernel_sinf+0x70>
 802c56c:	ee20 7a00 	vmul.f32	s14, s0, s0
 802c570:	eddf 7a15 	vldr	s15, [pc, #84]	; 802c5c8 <__kernel_sinf+0x74>
 802c574:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802c5cc <__kernel_sinf+0x78>
 802c578:	eea7 6a27 	vfma.f32	s12, s14, s15
 802c57c:	eddf 7a14 	vldr	s15, [pc, #80]	; 802c5d0 <__kernel_sinf+0x7c>
 802c580:	eee6 7a07 	vfma.f32	s15, s12, s14
 802c584:	ed9f 6a13 	vldr	s12, [pc, #76]	; 802c5d4 <__kernel_sinf+0x80>
 802c588:	eea7 6a87 	vfma.f32	s12, s15, s14
 802c58c:	eddf 7a12 	vldr	s15, [pc, #72]	; 802c5d8 <__kernel_sinf+0x84>
 802c590:	ee60 6a07 	vmul.f32	s13, s0, s14
 802c594:	eee6 7a07 	vfma.f32	s15, s12, s14
 802c598:	b930      	cbnz	r0, 802c5a8 <__kernel_sinf+0x54>
 802c59a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802c5dc <__kernel_sinf+0x88>
 802c59e:	eea7 6a27 	vfma.f32	s12, s14, s15
 802c5a2:	eea6 0a26 	vfma.f32	s0, s12, s13
 802c5a6:	4770      	bx	lr
 802c5a8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802c5ac:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802c5b0:	eee0 7a86 	vfma.f32	s15, s1, s12
 802c5b4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802c5b8:	eddf 7a09 	vldr	s15, [pc, #36]	; 802c5e0 <__kernel_sinf+0x8c>
 802c5bc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802c5c0:	ee30 0a60 	vsub.f32	s0, s0, s1
 802c5c4:	4770      	bx	lr
 802c5c6:	bf00      	nop
 802c5c8:	2f2ec9d3 	.word	0x2f2ec9d3
 802c5cc:	b2d72f34 	.word	0xb2d72f34
 802c5d0:	3638ef1b 	.word	0x3638ef1b
 802c5d4:	b9500d01 	.word	0xb9500d01
 802c5d8:	3c088889 	.word	0x3c088889
 802c5dc:	be2aaaab 	.word	0xbe2aaaab
 802c5e0:	3e2aaaab 	.word	0x3e2aaaab

0802c5e4 <fabsf>:
 802c5e4:	ee10 3a10 	vmov	r3, s0
 802c5e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802c5ec:	ee00 3a10 	vmov	s0, r3
 802c5f0:	4770      	bx	lr
	...

0802c5f4 <scalbnf>:
 802c5f4:	ee10 3a10 	vmov	r3, s0
 802c5f8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802c5fc:	d025      	beq.n	802c64a <scalbnf+0x56>
 802c5fe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802c602:	d302      	bcc.n	802c60a <scalbnf+0x16>
 802c604:	ee30 0a00 	vadd.f32	s0, s0, s0
 802c608:	4770      	bx	lr
 802c60a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802c60e:	d122      	bne.n	802c656 <scalbnf+0x62>
 802c610:	4b2a      	ldr	r3, [pc, #168]	; (802c6bc <scalbnf+0xc8>)
 802c612:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802c6c0 <scalbnf+0xcc>
 802c616:	4298      	cmp	r0, r3
 802c618:	ee20 0a27 	vmul.f32	s0, s0, s15
 802c61c:	db16      	blt.n	802c64c <scalbnf+0x58>
 802c61e:	ee10 3a10 	vmov	r3, s0
 802c622:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802c626:	3a19      	subs	r2, #25
 802c628:	4402      	add	r2, r0
 802c62a:	2afe      	cmp	r2, #254	; 0xfe
 802c62c:	dd15      	ble.n	802c65a <scalbnf+0x66>
 802c62e:	ee10 3a10 	vmov	r3, s0
 802c632:	eddf 7a24 	vldr	s15, [pc, #144]	; 802c6c4 <scalbnf+0xd0>
 802c636:	eddf 6a24 	vldr	s13, [pc, #144]	; 802c6c8 <scalbnf+0xd4>
 802c63a:	2b00      	cmp	r3, #0
 802c63c:	eeb0 7a67 	vmov.f32	s14, s15
 802c640:	bfb8      	it	lt
 802c642:	eef0 7a66 	vmovlt.f32	s15, s13
 802c646:	ee27 0a27 	vmul.f32	s0, s14, s15
 802c64a:	4770      	bx	lr
 802c64c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802c6cc <scalbnf+0xd8>
 802c650:	ee20 0a27 	vmul.f32	s0, s0, s15
 802c654:	4770      	bx	lr
 802c656:	0dd2      	lsrs	r2, r2, #23
 802c658:	e7e6      	b.n	802c628 <scalbnf+0x34>
 802c65a:	2a00      	cmp	r2, #0
 802c65c:	dd06      	ble.n	802c66c <scalbnf+0x78>
 802c65e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802c662:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802c666:	ee00 3a10 	vmov	s0, r3
 802c66a:	4770      	bx	lr
 802c66c:	f112 0f16 	cmn.w	r2, #22
 802c670:	da1a      	bge.n	802c6a8 <scalbnf+0xb4>
 802c672:	f24c 3350 	movw	r3, #50000	; 0xc350
 802c676:	4298      	cmp	r0, r3
 802c678:	ee10 3a10 	vmov	r3, s0
 802c67c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802c680:	dd0a      	ble.n	802c698 <scalbnf+0xa4>
 802c682:	ed9f 0a10 	vldr	s0, [pc, #64]	; 802c6c4 <scalbnf+0xd0>
 802c686:	ed9f 7a10 	vldr	s14, [pc, #64]	; 802c6c8 <scalbnf+0xd4>
 802c68a:	eef0 7a40 	vmov.f32	s15, s0
 802c68e:	2b00      	cmp	r3, #0
 802c690:	bf18      	it	ne
 802c692:	eeb0 0a47 	vmovne.f32	s0, s14
 802c696:	e7db      	b.n	802c650 <scalbnf+0x5c>
 802c698:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 802c6cc <scalbnf+0xd8>
 802c69c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 802c6d0 <scalbnf+0xdc>
 802c6a0:	eef0 7a40 	vmov.f32	s15, s0
 802c6a4:	2b00      	cmp	r3, #0
 802c6a6:	e7f3      	b.n	802c690 <scalbnf+0x9c>
 802c6a8:	3219      	adds	r2, #25
 802c6aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802c6ae:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802c6b2:	eddf 7a08 	vldr	s15, [pc, #32]	; 802c6d4 <scalbnf+0xe0>
 802c6b6:	ee07 3a10 	vmov	s14, r3
 802c6ba:	e7c4      	b.n	802c646 <scalbnf+0x52>
 802c6bc:	ffff3cb0 	.word	0xffff3cb0
 802c6c0:	4c000000 	.word	0x4c000000
 802c6c4:	7149f2ca 	.word	0x7149f2ca
 802c6c8:	f149f2ca 	.word	0xf149f2ca
 802c6cc:	0da24260 	.word	0x0da24260
 802c6d0:	8da24260 	.word	0x8da24260
 802c6d4:	33000000 	.word	0x33000000

0802c6d8 <abort>:
 802c6d8:	b508      	push	{r3, lr}
 802c6da:	2006      	movs	r0, #6
 802c6dc:	f001 f87a 	bl	802d7d4 <raise>
 802c6e0:	2001      	movs	r0, #1
 802c6e2:	f7d5 fb6d 	bl	8001dc0 <_exit>
	...

0802c6e8 <__assert_func>:
 802c6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802c6ea:	4614      	mov	r4, r2
 802c6ec:	461a      	mov	r2, r3
 802c6ee:	4b09      	ldr	r3, [pc, #36]	; (802c714 <__assert_func+0x2c>)
 802c6f0:	681b      	ldr	r3, [r3, #0]
 802c6f2:	4605      	mov	r5, r0
 802c6f4:	68d8      	ldr	r0, [r3, #12]
 802c6f6:	b14c      	cbz	r4, 802c70c <__assert_func+0x24>
 802c6f8:	4b07      	ldr	r3, [pc, #28]	; (802c718 <__assert_func+0x30>)
 802c6fa:	9100      	str	r1, [sp, #0]
 802c6fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802c700:	4906      	ldr	r1, [pc, #24]	; (802c71c <__assert_func+0x34>)
 802c702:	462b      	mov	r3, r5
 802c704:	f000 f8fe 	bl	802c904 <fiprintf>
 802c708:	f7ff ffe6 	bl	802c6d8 <abort>
 802c70c:	4b04      	ldr	r3, [pc, #16]	; (802c720 <__assert_func+0x38>)
 802c70e:	461c      	mov	r4, r3
 802c710:	e7f3      	b.n	802c6fa <__assert_func+0x12>
 802c712:	bf00      	nop
 802c714:	20000094 	.word	0x20000094
 802c718:	08032af8 	.word	0x08032af8
 802c71c:	08032b05 	.word	0x08032b05
 802c720:	08032b33 	.word	0x08032b33

0802c724 <atexit>:
 802c724:	2300      	movs	r3, #0
 802c726:	4601      	mov	r1, r0
 802c728:	461a      	mov	r2, r3
 802c72a:	4618      	mov	r0, r3
 802c72c:	f001 b9a4 	b.w	802da78 <__register_exitproc>

0802c730 <__cxa_atexit>:
 802c730:	b510      	push	{r4, lr}
 802c732:	4c05      	ldr	r4, [pc, #20]	; (802c748 <__cxa_atexit+0x18>)
 802c734:	4613      	mov	r3, r2
 802c736:	b12c      	cbz	r4, 802c744 <__cxa_atexit+0x14>
 802c738:	460a      	mov	r2, r1
 802c73a:	4601      	mov	r1, r0
 802c73c:	2002      	movs	r0, #2
 802c73e:	f001 f99b 	bl	802da78 <__register_exitproc>
 802c742:	bd10      	pop	{r4, pc}
 802c744:	4620      	mov	r0, r4
 802c746:	e7fc      	b.n	802c742 <__cxa_atexit+0x12>
 802c748:	0802da79 	.word	0x0802da79

0802c74c <__errno>:
 802c74c:	4b01      	ldr	r3, [pc, #4]	; (802c754 <__errno+0x8>)
 802c74e:	6818      	ldr	r0, [r3, #0]
 802c750:	4770      	bx	lr
 802c752:	bf00      	nop
 802c754:	20000094 	.word	0x20000094

0802c758 <std>:
 802c758:	2300      	movs	r3, #0
 802c75a:	b510      	push	{r4, lr}
 802c75c:	4604      	mov	r4, r0
 802c75e:	e9c0 3300 	strd	r3, r3, [r0]
 802c762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802c766:	6083      	str	r3, [r0, #8]
 802c768:	8181      	strh	r1, [r0, #12]
 802c76a:	6643      	str	r3, [r0, #100]	; 0x64
 802c76c:	81c2      	strh	r2, [r0, #14]
 802c76e:	6183      	str	r3, [r0, #24]
 802c770:	4619      	mov	r1, r3
 802c772:	2208      	movs	r2, #8
 802c774:	305c      	adds	r0, #92	; 0x5c
 802c776:	f000 fb57 	bl	802ce28 <memset>
 802c77a:	4b05      	ldr	r3, [pc, #20]	; (802c790 <std+0x38>)
 802c77c:	6263      	str	r3, [r4, #36]	; 0x24
 802c77e:	4b05      	ldr	r3, [pc, #20]	; (802c794 <std+0x3c>)
 802c780:	62a3      	str	r3, [r4, #40]	; 0x28
 802c782:	4b05      	ldr	r3, [pc, #20]	; (802c798 <std+0x40>)
 802c784:	62e3      	str	r3, [r4, #44]	; 0x2c
 802c786:	4b05      	ldr	r3, [pc, #20]	; (802c79c <std+0x44>)
 802c788:	6224      	str	r4, [r4, #32]
 802c78a:	6323      	str	r3, [r4, #48]	; 0x30
 802c78c:	bd10      	pop	{r4, pc}
 802c78e:	bf00      	nop
 802c790:	0802d84d 	.word	0x0802d84d
 802c794:	0802d86f 	.word	0x0802d86f
 802c798:	0802d8a7 	.word	0x0802d8a7
 802c79c:	0802d8cb 	.word	0x0802d8cb

0802c7a0 <_cleanup_r>:
 802c7a0:	4901      	ldr	r1, [pc, #4]	; (802c7a8 <_cleanup_r+0x8>)
 802c7a2:	f000 ba78 	b.w	802cc96 <_fwalk_reent>
 802c7a6:	bf00      	nop
 802c7a8:	0802dc69 	.word	0x0802dc69

0802c7ac <__sfmoreglue>:
 802c7ac:	b570      	push	{r4, r5, r6, lr}
 802c7ae:	1e4a      	subs	r2, r1, #1
 802c7b0:	2568      	movs	r5, #104	; 0x68
 802c7b2:	4355      	muls	r5, r2
 802c7b4:	460e      	mov	r6, r1
 802c7b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802c7ba:	f000 fb8d 	bl	802ced8 <_malloc_r>
 802c7be:	4604      	mov	r4, r0
 802c7c0:	b140      	cbz	r0, 802c7d4 <__sfmoreglue+0x28>
 802c7c2:	2100      	movs	r1, #0
 802c7c4:	e9c0 1600 	strd	r1, r6, [r0]
 802c7c8:	300c      	adds	r0, #12
 802c7ca:	60a0      	str	r0, [r4, #8]
 802c7cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802c7d0:	f000 fb2a 	bl	802ce28 <memset>
 802c7d4:	4620      	mov	r0, r4
 802c7d6:	bd70      	pop	{r4, r5, r6, pc}

0802c7d8 <__sfp_lock_acquire>:
 802c7d8:	4801      	ldr	r0, [pc, #4]	; (802c7e0 <__sfp_lock_acquire+0x8>)
 802c7da:	f000 baa0 	b.w	802cd1e <__retarget_lock_acquire_recursive>
 802c7de:	bf00      	nop
 802c7e0:	20009910 	.word	0x20009910

0802c7e4 <__sfp_lock_release>:
 802c7e4:	4801      	ldr	r0, [pc, #4]	; (802c7ec <__sfp_lock_release+0x8>)
 802c7e6:	f000 ba9c 	b.w	802cd22 <__retarget_lock_release_recursive>
 802c7ea:	bf00      	nop
 802c7ec:	20009910 	.word	0x20009910

0802c7f0 <__sinit_lock_acquire>:
 802c7f0:	4801      	ldr	r0, [pc, #4]	; (802c7f8 <__sinit_lock_acquire+0x8>)
 802c7f2:	f000 ba94 	b.w	802cd1e <__retarget_lock_acquire_recursive>
 802c7f6:	bf00      	nop
 802c7f8:	2000990b 	.word	0x2000990b

0802c7fc <__sinit_lock_release>:
 802c7fc:	4801      	ldr	r0, [pc, #4]	; (802c804 <__sinit_lock_release+0x8>)
 802c7fe:	f000 ba90 	b.w	802cd22 <__retarget_lock_release_recursive>
 802c802:	bf00      	nop
 802c804:	2000990b 	.word	0x2000990b

0802c808 <__sinit>:
 802c808:	b510      	push	{r4, lr}
 802c80a:	4604      	mov	r4, r0
 802c80c:	f7ff fff0 	bl	802c7f0 <__sinit_lock_acquire>
 802c810:	69a3      	ldr	r3, [r4, #24]
 802c812:	b11b      	cbz	r3, 802c81c <__sinit+0x14>
 802c814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c818:	f7ff bff0 	b.w	802c7fc <__sinit_lock_release>
 802c81c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802c820:	6523      	str	r3, [r4, #80]	; 0x50
 802c822:	4b13      	ldr	r3, [pc, #76]	; (802c870 <__sinit+0x68>)
 802c824:	4a13      	ldr	r2, [pc, #76]	; (802c874 <__sinit+0x6c>)
 802c826:	681b      	ldr	r3, [r3, #0]
 802c828:	62a2      	str	r2, [r4, #40]	; 0x28
 802c82a:	42a3      	cmp	r3, r4
 802c82c:	bf04      	itt	eq
 802c82e:	2301      	moveq	r3, #1
 802c830:	61a3      	streq	r3, [r4, #24]
 802c832:	4620      	mov	r0, r4
 802c834:	f000 f820 	bl	802c878 <__sfp>
 802c838:	6060      	str	r0, [r4, #4]
 802c83a:	4620      	mov	r0, r4
 802c83c:	f000 f81c 	bl	802c878 <__sfp>
 802c840:	60a0      	str	r0, [r4, #8]
 802c842:	4620      	mov	r0, r4
 802c844:	f000 f818 	bl	802c878 <__sfp>
 802c848:	2200      	movs	r2, #0
 802c84a:	60e0      	str	r0, [r4, #12]
 802c84c:	2104      	movs	r1, #4
 802c84e:	6860      	ldr	r0, [r4, #4]
 802c850:	f7ff ff82 	bl	802c758 <std>
 802c854:	68a0      	ldr	r0, [r4, #8]
 802c856:	2201      	movs	r2, #1
 802c858:	2109      	movs	r1, #9
 802c85a:	f7ff ff7d 	bl	802c758 <std>
 802c85e:	68e0      	ldr	r0, [r4, #12]
 802c860:	2202      	movs	r2, #2
 802c862:	2112      	movs	r1, #18
 802c864:	f7ff ff78 	bl	802c758 <std>
 802c868:	2301      	movs	r3, #1
 802c86a:	61a3      	str	r3, [r4, #24]
 802c86c:	e7d2      	b.n	802c814 <__sinit+0xc>
 802c86e:	bf00      	nop
 802c870:	08032b94 	.word	0x08032b94
 802c874:	0802c7a1 	.word	0x0802c7a1

0802c878 <__sfp>:
 802c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c87a:	4607      	mov	r7, r0
 802c87c:	f7ff ffac 	bl	802c7d8 <__sfp_lock_acquire>
 802c880:	4b1e      	ldr	r3, [pc, #120]	; (802c8fc <__sfp+0x84>)
 802c882:	681e      	ldr	r6, [r3, #0]
 802c884:	69b3      	ldr	r3, [r6, #24]
 802c886:	b913      	cbnz	r3, 802c88e <__sfp+0x16>
 802c888:	4630      	mov	r0, r6
 802c88a:	f7ff ffbd 	bl	802c808 <__sinit>
 802c88e:	3648      	adds	r6, #72	; 0x48
 802c890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802c894:	3b01      	subs	r3, #1
 802c896:	d503      	bpl.n	802c8a0 <__sfp+0x28>
 802c898:	6833      	ldr	r3, [r6, #0]
 802c89a:	b30b      	cbz	r3, 802c8e0 <__sfp+0x68>
 802c89c:	6836      	ldr	r6, [r6, #0]
 802c89e:	e7f7      	b.n	802c890 <__sfp+0x18>
 802c8a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802c8a4:	b9d5      	cbnz	r5, 802c8dc <__sfp+0x64>
 802c8a6:	4b16      	ldr	r3, [pc, #88]	; (802c900 <__sfp+0x88>)
 802c8a8:	60e3      	str	r3, [r4, #12]
 802c8aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802c8ae:	6665      	str	r5, [r4, #100]	; 0x64
 802c8b0:	f000 fa34 	bl	802cd1c <__retarget_lock_init_recursive>
 802c8b4:	f7ff ff96 	bl	802c7e4 <__sfp_lock_release>
 802c8b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802c8bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802c8c0:	6025      	str	r5, [r4, #0]
 802c8c2:	61a5      	str	r5, [r4, #24]
 802c8c4:	2208      	movs	r2, #8
 802c8c6:	4629      	mov	r1, r5
 802c8c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802c8cc:	f000 faac 	bl	802ce28 <memset>
 802c8d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802c8d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802c8d8:	4620      	mov	r0, r4
 802c8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c8dc:	3468      	adds	r4, #104	; 0x68
 802c8de:	e7d9      	b.n	802c894 <__sfp+0x1c>
 802c8e0:	2104      	movs	r1, #4
 802c8e2:	4638      	mov	r0, r7
 802c8e4:	f7ff ff62 	bl	802c7ac <__sfmoreglue>
 802c8e8:	4604      	mov	r4, r0
 802c8ea:	6030      	str	r0, [r6, #0]
 802c8ec:	2800      	cmp	r0, #0
 802c8ee:	d1d5      	bne.n	802c89c <__sfp+0x24>
 802c8f0:	f7ff ff78 	bl	802c7e4 <__sfp_lock_release>
 802c8f4:	230c      	movs	r3, #12
 802c8f6:	603b      	str	r3, [r7, #0]
 802c8f8:	e7ee      	b.n	802c8d8 <__sfp+0x60>
 802c8fa:	bf00      	nop
 802c8fc:	08032b94 	.word	0x08032b94
 802c900:	ffff0001 	.word	0xffff0001

0802c904 <fiprintf>:
 802c904:	b40e      	push	{r1, r2, r3}
 802c906:	b503      	push	{r0, r1, lr}
 802c908:	4601      	mov	r1, r0
 802c90a:	ab03      	add	r3, sp, #12
 802c90c:	4805      	ldr	r0, [pc, #20]	; (802c924 <fiprintf+0x20>)
 802c90e:	f853 2b04 	ldr.w	r2, [r3], #4
 802c912:	6800      	ldr	r0, [r0, #0]
 802c914:	9301      	str	r3, [sp, #4]
 802c916:	f000 fb63 	bl	802cfe0 <_vfiprintf_r>
 802c91a:	b002      	add	sp, #8
 802c91c:	f85d eb04 	ldr.w	lr, [sp], #4
 802c920:	b003      	add	sp, #12
 802c922:	4770      	bx	lr
 802c924:	20000094 	.word	0x20000094

0802c928 <_fread_r>:
 802c928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c92c:	461f      	mov	r7, r3
 802c92e:	4613      	mov	r3, r2
 802c930:	437b      	muls	r3, r7
 802c932:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802c934:	4606      	mov	r6, r0
 802c936:	468a      	mov	sl, r1
 802c938:	4691      	mov	r9, r2
 802c93a:	469b      	mov	fp, r3
 802c93c:	d05f      	beq.n	802c9fe <_fread_r+0xd6>
 802c93e:	b118      	cbz	r0, 802c948 <_fread_r+0x20>
 802c940:	6983      	ldr	r3, [r0, #24]
 802c942:	b90b      	cbnz	r3, 802c948 <_fread_r+0x20>
 802c944:	f7ff ff60 	bl	802c808 <__sinit>
 802c948:	4b2e      	ldr	r3, [pc, #184]	; (802ca04 <_fread_r+0xdc>)
 802c94a:	429c      	cmp	r4, r3
 802c94c:	d128      	bne.n	802c9a0 <_fread_r+0x78>
 802c94e:	6874      	ldr	r4, [r6, #4]
 802c950:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802c952:	07db      	lsls	r3, r3, #31
 802c954:	d405      	bmi.n	802c962 <_fread_r+0x3a>
 802c956:	89a3      	ldrh	r3, [r4, #12]
 802c958:	059d      	lsls	r5, r3, #22
 802c95a:	d402      	bmi.n	802c962 <_fread_r+0x3a>
 802c95c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802c95e:	f000 f9de 	bl	802cd1e <__retarget_lock_acquire_recursive>
 802c962:	6863      	ldr	r3, [r4, #4]
 802c964:	2b00      	cmp	r3, #0
 802c966:	da01      	bge.n	802c96c <_fread_r+0x44>
 802c968:	2300      	movs	r3, #0
 802c96a:	6063      	str	r3, [r4, #4]
 802c96c:	46d8      	mov	r8, fp
 802c96e:	e9d4 1500 	ldrd	r1, r5, [r4]
 802c972:	4545      	cmp	r5, r8
 802c974:	d31e      	bcc.n	802c9b4 <_fread_r+0x8c>
 802c976:	4642      	mov	r2, r8
 802c978:	4650      	mov	r0, sl
 802c97a:	f000 fa47 	bl	802ce0c <memcpy>
 802c97e:	6860      	ldr	r0, [r4, #4]
 802c980:	6821      	ldr	r1, [r4, #0]
 802c982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802c984:	eba0 0008 	sub.w	r0, r0, r8
 802c988:	4441      	add	r1, r8
 802c98a:	07da      	lsls	r2, r3, #31
 802c98c:	6060      	str	r0, [r4, #4]
 802c98e:	6021      	str	r1, [r4, #0]
 802c990:	d42f      	bmi.n	802c9f2 <_fread_r+0xca>
 802c992:	89a3      	ldrh	r3, [r4, #12]
 802c994:	059b      	lsls	r3, r3, #22
 802c996:	d42c      	bmi.n	802c9f2 <_fread_r+0xca>
 802c998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802c99a:	f000 f9c2 	bl	802cd22 <__retarget_lock_release_recursive>
 802c99e:	e028      	b.n	802c9f2 <_fread_r+0xca>
 802c9a0:	4b19      	ldr	r3, [pc, #100]	; (802ca08 <_fread_r+0xe0>)
 802c9a2:	429c      	cmp	r4, r3
 802c9a4:	d101      	bne.n	802c9aa <_fread_r+0x82>
 802c9a6:	68b4      	ldr	r4, [r6, #8]
 802c9a8:	e7d2      	b.n	802c950 <_fread_r+0x28>
 802c9aa:	4b18      	ldr	r3, [pc, #96]	; (802ca0c <_fread_r+0xe4>)
 802c9ac:	429c      	cmp	r4, r3
 802c9ae:	bf08      	it	eq
 802c9b0:	68f4      	ldreq	r4, [r6, #12]
 802c9b2:	e7cd      	b.n	802c950 <_fread_r+0x28>
 802c9b4:	462a      	mov	r2, r5
 802c9b6:	4650      	mov	r0, sl
 802c9b8:	f000 fa28 	bl	802ce0c <memcpy>
 802c9bc:	6823      	ldr	r3, [r4, #0]
 802c9be:	442b      	add	r3, r5
 802c9c0:	6023      	str	r3, [r4, #0]
 802c9c2:	4621      	mov	r1, r4
 802c9c4:	eba8 0305 	sub.w	r3, r8, r5
 802c9c8:	4630      	mov	r0, r6
 802c9ca:	9301      	str	r3, [sp, #4]
 802c9cc:	f000 fe40 	bl	802d650 <__srefill_r>
 802c9d0:	44aa      	add	sl, r5
 802c9d2:	9b01      	ldr	r3, [sp, #4]
 802c9d4:	b188      	cbz	r0, 802c9fa <_fread_r+0xd2>
 802c9d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802c9d8:	07d8      	lsls	r0, r3, #31
 802c9da:	d405      	bmi.n	802c9e8 <_fread_r+0xc0>
 802c9dc:	89a3      	ldrh	r3, [r4, #12]
 802c9de:	0599      	lsls	r1, r3, #22
 802c9e0:	d402      	bmi.n	802c9e8 <_fread_r+0xc0>
 802c9e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802c9e4:	f000 f99d 	bl	802cd22 <__retarget_lock_release_recursive>
 802c9e8:	445d      	add	r5, fp
 802c9ea:	eba5 0308 	sub.w	r3, r5, r8
 802c9ee:	fbb3 f7f9 	udiv	r7, r3, r9
 802c9f2:	4638      	mov	r0, r7
 802c9f4:	b003      	add	sp, #12
 802c9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c9fa:	4698      	mov	r8, r3
 802c9fc:	e7b7      	b.n	802c96e <_fread_r+0x46>
 802c9fe:	461f      	mov	r7, r3
 802ca00:	e7f7      	b.n	802c9f2 <_fread_r+0xca>
 802ca02:	bf00      	nop
 802ca04:	08032b54 	.word	0x08032b54
 802ca08:	08032b74 	.word	0x08032b74
 802ca0c:	08032b34 	.word	0x08032b34

0802ca10 <fread>:
 802ca10:	b507      	push	{r0, r1, r2, lr}
 802ca12:	9300      	str	r3, [sp, #0]
 802ca14:	4613      	mov	r3, r2
 802ca16:	460a      	mov	r2, r1
 802ca18:	4601      	mov	r1, r0
 802ca1a:	4803      	ldr	r0, [pc, #12]	; (802ca28 <fread+0x18>)
 802ca1c:	6800      	ldr	r0, [r0, #0]
 802ca1e:	f7ff ff83 	bl	802c928 <_fread_r>
 802ca22:	b003      	add	sp, #12
 802ca24:	f85d fb04 	ldr.w	pc, [sp], #4
 802ca28:	20000094 	.word	0x20000094

0802ca2c <fseek>:
 802ca2c:	4613      	mov	r3, r2
 802ca2e:	460a      	mov	r2, r1
 802ca30:	4601      	mov	r1, r0
 802ca32:	4802      	ldr	r0, [pc, #8]	; (802ca3c <fseek+0x10>)
 802ca34:	6800      	ldr	r0, [r0, #0]
 802ca36:	f000 b803 	b.w	802ca40 <_fseeko_r>
 802ca3a:	bf00      	nop
 802ca3c:	20000094 	.word	0x20000094

0802ca40 <_fseeko_r>:
 802ca40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ca44:	460c      	mov	r4, r1
 802ca46:	4617      	mov	r7, r2
 802ca48:	461e      	mov	r6, r3
 802ca4a:	4605      	mov	r5, r0
 802ca4c:	b118      	cbz	r0, 802ca56 <_fseeko_r+0x16>
 802ca4e:	6983      	ldr	r3, [r0, #24]
 802ca50:	b90b      	cbnz	r3, 802ca56 <_fseeko_r+0x16>
 802ca52:	f7ff fed9 	bl	802c808 <__sinit>
 802ca56:	4b44      	ldr	r3, [pc, #272]	; (802cb68 <_fseeko_r+0x128>)
 802ca58:	429c      	cmp	r4, r3
 802ca5a:	d122      	bne.n	802caa2 <_fseeko_r+0x62>
 802ca5c:	686c      	ldr	r4, [r5, #4]
 802ca5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802ca60:	07d9      	lsls	r1, r3, #31
 802ca62:	d405      	bmi.n	802ca70 <_fseeko_r+0x30>
 802ca64:	89a3      	ldrh	r3, [r4, #12]
 802ca66:	059a      	lsls	r2, r3, #22
 802ca68:	d402      	bmi.n	802ca70 <_fseeko_r+0x30>
 802ca6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802ca6c:	f000 f957 	bl	802cd1e <__retarget_lock_acquire_recursive>
 802ca70:	89a3      	ldrh	r3, [r4, #12]
 802ca72:	f403 7384 	and.w	r3, r3, #264	; 0x108
 802ca76:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 802ca7a:	d103      	bne.n	802ca84 <_fseeko_r+0x44>
 802ca7c:	4621      	mov	r1, r4
 802ca7e:	4628      	mov	r0, r5
 802ca80:	f001 f8f2 	bl	802dc68 <_fflush_r>
 802ca84:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 802ca88:	f1b8 0f00 	cmp.w	r8, #0
 802ca8c:	d113      	bne.n	802cab6 <_fseeko_r+0x76>
 802ca8e:	231d      	movs	r3, #29
 802ca90:	602b      	str	r3, [r5, #0]
 802ca92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802ca94:	07d9      	lsls	r1, r3, #31
 802ca96:	d55d      	bpl.n	802cb54 <_fseeko_r+0x114>
 802ca98:	f04f 36ff 	mov.w	r6, #4294967295
 802ca9c:	4630      	mov	r0, r6
 802ca9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802caa2:	4b32      	ldr	r3, [pc, #200]	; (802cb6c <_fseeko_r+0x12c>)
 802caa4:	429c      	cmp	r4, r3
 802caa6:	d101      	bne.n	802caac <_fseeko_r+0x6c>
 802caa8:	68ac      	ldr	r4, [r5, #8]
 802caaa:	e7d8      	b.n	802ca5e <_fseeko_r+0x1e>
 802caac:	4b30      	ldr	r3, [pc, #192]	; (802cb70 <_fseeko_r+0x130>)
 802caae:	429c      	cmp	r4, r3
 802cab0:	bf08      	it	eq
 802cab2:	68ec      	ldreq	r4, [r5, #12]
 802cab4:	e7d3      	b.n	802ca5e <_fseeko_r+0x1e>
 802cab6:	2e01      	cmp	r6, #1
 802cab8:	d036      	beq.n	802cb28 <_fseeko_r+0xe8>
 802caba:	f036 0302 	bics.w	r3, r6, #2
 802cabe:	d147      	bne.n	802cb50 <_fseeko_r+0x110>
 802cac0:	6923      	ldr	r3, [r4, #16]
 802cac2:	b91b      	cbnz	r3, 802cacc <_fseeko_r+0x8c>
 802cac4:	4621      	mov	r1, r4
 802cac6:	4628      	mov	r0, r5
 802cac8:	f000 f950 	bl	802cd6c <__smakebuf_r>
 802cacc:	4621      	mov	r1, r4
 802cace:	4628      	mov	r0, r5
 802cad0:	f001 f8ca 	bl	802dc68 <_fflush_r>
 802cad4:	2800      	cmp	r0, #0
 802cad6:	d1dc      	bne.n	802ca92 <_fseeko_r+0x52>
 802cad8:	6a21      	ldr	r1, [r4, #32]
 802cada:	4633      	mov	r3, r6
 802cadc:	463a      	mov	r2, r7
 802cade:	4628      	mov	r0, r5
 802cae0:	47c0      	blx	r8
 802cae2:	3001      	adds	r0, #1
 802cae4:	d0d5      	beq.n	802ca92 <_fseeko_r+0x52>
 802cae6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802cae8:	b141      	cbz	r1, 802cafc <_fseeko_r+0xbc>
 802caea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802caee:	4299      	cmp	r1, r3
 802caf0:	d002      	beq.n	802caf8 <_fseeko_r+0xb8>
 802caf2:	4628      	mov	r0, r5
 802caf4:	f000 f9a0 	bl	802ce38 <_free_r>
 802caf8:	2300      	movs	r3, #0
 802cafa:	6363      	str	r3, [r4, #52]	; 0x34
 802cafc:	6923      	ldr	r3, [r4, #16]
 802cafe:	6023      	str	r3, [r4, #0]
 802cb00:	89a3      	ldrh	r3, [r4, #12]
 802cb02:	2500      	movs	r5, #0
 802cb04:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 802cb08:	6065      	str	r5, [r4, #4]
 802cb0a:	81a3      	strh	r3, [r4, #12]
 802cb0c:	2208      	movs	r2, #8
 802cb0e:	4629      	mov	r1, r5
 802cb10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802cb14:	f000 f988 	bl	802ce28 <memset>
 802cb18:	6e66      	ldr	r6, [r4, #100]	; 0x64
 802cb1a:	f016 0601 	ands.w	r6, r6, #1
 802cb1e:	d120      	bne.n	802cb62 <_fseeko_r+0x122>
 802cb20:	89a3      	ldrh	r3, [r4, #12]
 802cb22:	059b      	lsls	r3, r3, #22
 802cb24:	d4ba      	bmi.n	802ca9c <_fseeko_r+0x5c>
 802cb26:	e00c      	b.n	802cb42 <_fseeko_r+0x102>
 802cb28:	4621      	mov	r1, r4
 802cb2a:	4628      	mov	r0, r5
 802cb2c:	f000 f822 	bl	802cb74 <_ftello_r>
 802cb30:	1c43      	adds	r3, r0, #1
 802cb32:	4606      	mov	r6, r0
 802cb34:	d109      	bne.n	802cb4a <_fseeko_r+0x10a>
 802cb36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802cb38:	07dd      	lsls	r5, r3, #31
 802cb3a:	d4ad      	bmi.n	802ca98 <_fseeko_r+0x58>
 802cb3c:	89a3      	ldrh	r3, [r4, #12]
 802cb3e:	0598      	lsls	r0, r3, #22
 802cb40:	d4aa      	bmi.n	802ca98 <_fseeko_r+0x58>
 802cb42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802cb44:	f000 f8ed 	bl	802cd22 <__retarget_lock_release_recursive>
 802cb48:	e7a8      	b.n	802ca9c <_fseeko_r+0x5c>
 802cb4a:	4407      	add	r7, r0
 802cb4c:	2600      	movs	r6, #0
 802cb4e:	e7b7      	b.n	802cac0 <_fseeko_r+0x80>
 802cb50:	2316      	movs	r3, #22
 802cb52:	e79d      	b.n	802ca90 <_fseeko_r+0x50>
 802cb54:	89a3      	ldrh	r3, [r4, #12]
 802cb56:	059a      	lsls	r2, r3, #22
 802cb58:	d49e      	bmi.n	802ca98 <_fseeko_r+0x58>
 802cb5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802cb5c:	f000 f8e1 	bl	802cd22 <__retarget_lock_release_recursive>
 802cb60:	e79a      	b.n	802ca98 <_fseeko_r+0x58>
 802cb62:	462e      	mov	r6, r5
 802cb64:	e79a      	b.n	802ca9c <_fseeko_r+0x5c>
 802cb66:	bf00      	nop
 802cb68:	08032b54 	.word	0x08032b54
 802cb6c:	08032b74 	.word	0x08032b74
 802cb70:	08032b34 	.word	0x08032b34

0802cb74 <_ftello_r>:
 802cb74:	b570      	push	{r4, r5, r6, lr}
 802cb76:	460c      	mov	r4, r1
 802cb78:	4605      	mov	r5, r0
 802cb7a:	b118      	cbz	r0, 802cb84 <_ftello_r+0x10>
 802cb7c:	6983      	ldr	r3, [r0, #24]
 802cb7e:	b90b      	cbnz	r3, 802cb84 <_ftello_r+0x10>
 802cb80:	f7ff fe42 	bl	802c808 <__sinit>
 802cb84:	4b32      	ldr	r3, [pc, #200]	; (802cc50 <_ftello_r+0xdc>)
 802cb86:	429c      	cmp	r4, r3
 802cb88:	d114      	bne.n	802cbb4 <_ftello_r+0x40>
 802cb8a:	686c      	ldr	r4, [r5, #4]
 802cb8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802cb8e:	07da      	lsls	r2, r3, #31
 802cb90:	d405      	bmi.n	802cb9e <_ftello_r+0x2a>
 802cb92:	89a3      	ldrh	r3, [r4, #12]
 802cb94:	059b      	lsls	r3, r3, #22
 802cb96:	d402      	bmi.n	802cb9e <_ftello_r+0x2a>
 802cb98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802cb9a:	f000 f8c0 	bl	802cd1e <__retarget_lock_acquire_recursive>
 802cb9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802cba0:	b9ce      	cbnz	r6, 802cbd6 <_ftello_r+0x62>
 802cba2:	231d      	movs	r3, #29
 802cba4:	602b      	str	r3, [r5, #0]
 802cba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802cba8:	07de      	lsls	r6, r3, #31
 802cbaa:	d50d      	bpl.n	802cbc8 <_ftello_r+0x54>
 802cbac:	f04f 35ff 	mov.w	r5, #4294967295
 802cbb0:	4628      	mov	r0, r5
 802cbb2:	bd70      	pop	{r4, r5, r6, pc}
 802cbb4:	4b27      	ldr	r3, [pc, #156]	; (802cc54 <_ftello_r+0xe0>)
 802cbb6:	429c      	cmp	r4, r3
 802cbb8:	d101      	bne.n	802cbbe <_ftello_r+0x4a>
 802cbba:	68ac      	ldr	r4, [r5, #8]
 802cbbc:	e7e6      	b.n	802cb8c <_ftello_r+0x18>
 802cbbe:	4b26      	ldr	r3, [pc, #152]	; (802cc58 <_ftello_r+0xe4>)
 802cbc0:	429c      	cmp	r4, r3
 802cbc2:	bf08      	it	eq
 802cbc4:	68ec      	ldreq	r4, [r5, #12]
 802cbc6:	e7e1      	b.n	802cb8c <_ftello_r+0x18>
 802cbc8:	89a3      	ldrh	r3, [r4, #12]
 802cbca:	059d      	lsls	r5, r3, #22
 802cbcc:	d4ee      	bmi.n	802cbac <_ftello_r+0x38>
 802cbce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802cbd0:	f000 f8a7 	bl	802cd22 <__retarget_lock_release_recursive>
 802cbd4:	e7ea      	b.n	802cbac <_ftello_r+0x38>
 802cbd6:	89a2      	ldrh	r2, [r4, #12]
 802cbd8:	f002 030c 	and.w	r3, r2, #12
 802cbdc:	2b08      	cmp	r3, #8
 802cbde:	d119      	bne.n	802cc14 <_ftello_r+0xa0>
 802cbe0:	6823      	ldr	r3, [r4, #0]
 802cbe2:	b1bb      	cbz	r3, 802cc14 <_ftello_r+0xa0>
 802cbe4:	6921      	ldr	r1, [r4, #16]
 802cbe6:	1a5b      	subs	r3, r3, r1
 802cbe8:	2b00      	cmp	r3, #0
 802cbea:	dd13      	ble.n	802cc14 <_ftello_r+0xa0>
 802cbec:	05d0      	lsls	r0, r2, #23
 802cbee:	d511      	bpl.n	802cc14 <_ftello_r+0xa0>
 802cbf0:	2302      	movs	r3, #2
 802cbf2:	2200      	movs	r2, #0
 802cbf4:	6a21      	ldr	r1, [r4, #32]
 802cbf6:	4628      	mov	r0, r5
 802cbf8:	47b0      	blx	r6
 802cbfa:	1c41      	adds	r1, r0, #1
 802cbfc:	4605      	mov	r5, r0
 802cbfe:	d10d      	bne.n	802cc1c <_ftello_r+0xa8>
 802cc00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802cc02:	07da      	lsls	r2, r3, #31
 802cc04:	d4d2      	bmi.n	802cbac <_ftello_r+0x38>
 802cc06:	89a3      	ldrh	r3, [r4, #12]
 802cc08:	059b      	lsls	r3, r3, #22
 802cc0a:	d4cf      	bmi.n	802cbac <_ftello_r+0x38>
 802cc0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802cc0e:	f000 f888 	bl	802cd22 <__retarget_lock_release_recursive>
 802cc12:	e7cd      	b.n	802cbb0 <_ftello_r+0x3c>
 802cc14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802cc18:	d00f      	beq.n	802cc3a <_ftello_r+0xc6>
 802cc1a:	6d65      	ldr	r5, [r4, #84]	; 0x54
 802cc1c:	89a2      	ldrh	r2, [r4, #12]
 802cc1e:	0756      	lsls	r6, r2, #29
 802cc20:	d50d      	bpl.n	802cc3e <_ftello_r+0xca>
 802cc22:	6863      	ldr	r3, [r4, #4]
 802cc24:	1aed      	subs	r5, r5, r3
 802cc26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802cc28:	b10b      	cbz	r3, 802cc2e <_ftello_r+0xba>
 802cc2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802cc2c:	1aed      	subs	r5, r5, r3
 802cc2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802cc30:	07d9      	lsls	r1, r3, #31
 802cc32:	d4bd      	bmi.n	802cbb0 <_ftello_r+0x3c>
 802cc34:	0593      	lsls	r3, r2, #22
 802cc36:	d4bb      	bmi.n	802cbb0 <_ftello_r+0x3c>
 802cc38:	e7e8      	b.n	802cc0c <_ftello_r+0x98>
 802cc3a:	2301      	movs	r3, #1
 802cc3c:	e7da      	b.n	802cbf4 <_ftello_r+0x80>
 802cc3e:	0710      	lsls	r0, r2, #28
 802cc40:	d5f5      	bpl.n	802cc2e <_ftello_r+0xba>
 802cc42:	6823      	ldr	r3, [r4, #0]
 802cc44:	2b00      	cmp	r3, #0
 802cc46:	d0f2      	beq.n	802cc2e <_ftello_r+0xba>
 802cc48:	6921      	ldr	r1, [r4, #16]
 802cc4a:	1a5b      	subs	r3, r3, r1
 802cc4c:	441d      	add	r5, r3
 802cc4e:	e7ee      	b.n	802cc2e <_ftello_r+0xba>
 802cc50:	08032b54 	.word	0x08032b54
 802cc54:	08032b74 	.word	0x08032b74
 802cc58:	08032b34 	.word	0x08032b34

0802cc5c <_fwalk>:
 802cc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cc60:	460f      	mov	r7, r1
 802cc62:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802cc66:	2600      	movs	r6, #0
 802cc68:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 802cc6c:	f1b8 0801 	subs.w	r8, r8, #1
 802cc70:	d505      	bpl.n	802cc7e <_fwalk+0x22>
 802cc72:	6824      	ldr	r4, [r4, #0]
 802cc74:	2c00      	cmp	r4, #0
 802cc76:	d1f7      	bne.n	802cc68 <_fwalk+0xc>
 802cc78:	4630      	mov	r0, r6
 802cc7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cc7e:	89ab      	ldrh	r3, [r5, #12]
 802cc80:	2b01      	cmp	r3, #1
 802cc82:	d906      	bls.n	802cc92 <_fwalk+0x36>
 802cc84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802cc88:	3301      	adds	r3, #1
 802cc8a:	d002      	beq.n	802cc92 <_fwalk+0x36>
 802cc8c:	4628      	mov	r0, r5
 802cc8e:	47b8      	blx	r7
 802cc90:	4306      	orrs	r6, r0
 802cc92:	3568      	adds	r5, #104	; 0x68
 802cc94:	e7ea      	b.n	802cc6c <_fwalk+0x10>

0802cc96 <_fwalk_reent>:
 802cc96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802cc9a:	4606      	mov	r6, r0
 802cc9c:	4688      	mov	r8, r1
 802cc9e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802cca2:	2700      	movs	r7, #0
 802cca4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802cca8:	f1b9 0901 	subs.w	r9, r9, #1
 802ccac:	d505      	bpl.n	802ccba <_fwalk_reent+0x24>
 802ccae:	6824      	ldr	r4, [r4, #0]
 802ccb0:	2c00      	cmp	r4, #0
 802ccb2:	d1f7      	bne.n	802cca4 <_fwalk_reent+0xe>
 802ccb4:	4638      	mov	r0, r7
 802ccb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ccba:	89ab      	ldrh	r3, [r5, #12]
 802ccbc:	2b01      	cmp	r3, #1
 802ccbe:	d907      	bls.n	802ccd0 <_fwalk_reent+0x3a>
 802ccc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802ccc4:	3301      	adds	r3, #1
 802ccc6:	d003      	beq.n	802ccd0 <_fwalk_reent+0x3a>
 802ccc8:	4629      	mov	r1, r5
 802ccca:	4630      	mov	r0, r6
 802cccc:	47c0      	blx	r8
 802ccce:	4307      	orrs	r7, r0
 802ccd0:	3568      	adds	r5, #104	; 0x68
 802ccd2:	e7e9      	b.n	802cca8 <_fwalk_reent+0x12>

0802ccd4 <__libc_init_array>:
 802ccd4:	b570      	push	{r4, r5, r6, lr}
 802ccd6:	4d0d      	ldr	r5, [pc, #52]	; (802cd0c <__libc_init_array+0x38>)
 802ccd8:	4c0d      	ldr	r4, [pc, #52]	; (802cd10 <__libc_init_array+0x3c>)
 802ccda:	1b64      	subs	r4, r4, r5
 802ccdc:	10a4      	asrs	r4, r4, #2
 802ccde:	2600      	movs	r6, #0
 802cce0:	42a6      	cmp	r6, r4
 802cce2:	d109      	bne.n	802ccf8 <__libc_init_array+0x24>
 802cce4:	4d0b      	ldr	r5, [pc, #44]	; (802cd14 <__libc_init_array+0x40>)
 802cce6:	4c0c      	ldr	r4, [pc, #48]	; (802cd18 <__libc_init_array+0x44>)
 802cce8:	f001 fa02 	bl	802e0f0 <_init>
 802ccec:	1b64      	subs	r4, r4, r5
 802ccee:	10a4      	asrs	r4, r4, #2
 802ccf0:	2600      	movs	r6, #0
 802ccf2:	42a6      	cmp	r6, r4
 802ccf4:	d105      	bne.n	802cd02 <__libc_init_array+0x2e>
 802ccf6:	bd70      	pop	{r4, r5, r6, pc}
 802ccf8:	f855 3b04 	ldr.w	r3, [r5], #4
 802ccfc:	4798      	blx	r3
 802ccfe:	3601      	adds	r6, #1
 802cd00:	e7ee      	b.n	802cce0 <__libc_init_array+0xc>
 802cd02:	f855 3b04 	ldr.w	r3, [r5], #4
 802cd06:	4798      	blx	r3
 802cd08:	3601      	adds	r6, #1
 802cd0a:	e7f2      	b.n	802ccf2 <__libc_init_array+0x1e>
 802cd0c:	080a4864 	.word	0x080a4864
 802cd10:	080a4864 	.word	0x080a4864
 802cd14:	080a4864 	.word	0x080a4864
 802cd18:	080a4878 	.word	0x080a4878

0802cd1c <__retarget_lock_init_recursive>:
 802cd1c:	4770      	bx	lr

0802cd1e <__retarget_lock_acquire_recursive>:
 802cd1e:	4770      	bx	lr

0802cd20 <__retarget_lock_release>:
 802cd20:	4770      	bx	lr

0802cd22 <__retarget_lock_release_recursive>:
 802cd22:	4770      	bx	lr

0802cd24 <__swhatbuf_r>:
 802cd24:	b570      	push	{r4, r5, r6, lr}
 802cd26:	460e      	mov	r6, r1
 802cd28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cd2c:	2900      	cmp	r1, #0
 802cd2e:	b096      	sub	sp, #88	; 0x58
 802cd30:	4614      	mov	r4, r2
 802cd32:	461d      	mov	r5, r3
 802cd34:	da07      	bge.n	802cd46 <__swhatbuf_r+0x22>
 802cd36:	2300      	movs	r3, #0
 802cd38:	602b      	str	r3, [r5, #0]
 802cd3a:	89b3      	ldrh	r3, [r6, #12]
 802cd3c:	061a      	lsls	r2, r3, #24
 802cd3e:	d410      	bmi.n	802cd62 <__swhatbuf_r+0x3e>
 802cd40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802cd44:	e00e      	b.n	802cd64 <__swhatbuf_r+0x40>
 802cd46:	466a      	mov	r2, sp
 802cd48:	f000 ffdc 	bl	802dd04 <_fstat_r>
 802cd4c:	2800      	cmp	r0, #0
 802cd4e:	dbf2      	blt.n	802cd36 <__swhatbuf_r+0x12>
 802cd50:	9a01      	ldr	r2, [sp, #4]
 802cd52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802cd56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802cd5a:	425a      	negs	r2, r3
 802cd5c:	415a      	adcs	r2, r3
 802cd5e:	602a      	str	r2, [r5, #0]
 802cd60:	e7ee      	b.n	802cd40 <__swhatbuf_r+0x1c>
 802cd62:	2340      	movs	r3, #64	; 0x40
 802cd64:	2000      	movs	r0, #0
 802cd66:	6023      	str	r3, [r4, #0]
 802cd68:	b016      	add	sp, #88	; 0x58
 802cd6a:	bd70      	pop	{r4, r5, r6, pc}

0802cd6c <__smakebuf_r>:
 802cd6c:	898b      	ldrh	r3, [r1, #12]
 802cd6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802cd70:	079d      	lsls	r5, r3, #30
 802cd72:	4606      	mov	r6, r0
 802cd74:	460c      	mov	r4, r1
 802cd76:	d507      	bpl.n	802cd88 <__smakebuf_r+0x1c>
 802cd78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802cd7c:	6023      	str	r3, [r4, #0]
 802cd7e:	6123      	str	r3, [r4, #16]
 802cd80:	2301      	movs	r3, #1
 802cd82:	6163      	str	r3, [r4, #20]
 802cd84:	b002      	add	sp, #8
 802cd86:	bd70      	pop	{r4, r5, r6, pc}
 802cd88:	ab01      	add	r3, sp, #4
 802cd8a:	466a      	mov	r2, sp
 802cd8c:	f7ff ffca 	bl	802cd24 <__swhatbuf_r>
 802cd90:	9900      	ldr	r1, [sp, #0]
 802cd92:	4605      	mov	r5, r0
 802cd94:	4630      	mov	r0, r6
 802cd96:	f000 f89f 	bl	802ced8 <_malloc_r>
 802cd9a:	b948      	cbnz	r0, 802cdb0 <__smakebuf_r+0x44>
 802cd9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cda0:	059a      	lsls	r2, r3, #22
 802cda2:	d4ef      	bmi.n	802cd84 <__smakebuf_r+0x18>
 802cda4:	f023 0303 	bic.w	r3, r3, #3
 802cda8:	f043 0302 	orr.w	r3, r3, #2
 802cdac:	81a3      	strh	r3, [r4, #12]
 802cdae:	e7e3      	b.n	802cd78 <__smakebuf_r+0xc>
 802cdb0:	4b0d      	ldr	r3, [pc, #52]	; (802cde8 <__smakebuf_r+0x7c>)
 802cdb2:	62b3      	str	r3, [r6, #40]	; 0x28
 802cdb4:	89a3      	ldrh	r3, [r4, #12]
 802cdb6:	6020      	str	r0, [r4, #0]
 802cdb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802cdbc:	81a3      	strh	r3, [r4, #12]
 802cdbe:	9b00      	ldr	r3, [sp, #0]
 802cdc0:	6163      	str	r3, [r4, #20]
 802cdc2:	9b01      	ldr	r3, [sp, #4]
 802cdc4:	6120      	str	r0, [r4, #16]
 802cdc6:	b15b      	cbz	r3, 802cde0 <__smakebuf_r+0x74>
 802cdc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802cdcc:	4630      	mov	r0, r6
 802cdce:	f000 ffab 	bl	802dd28 <_isatty_r>
 802cdd2:	b128      	cbz	r0, 802cde0 <__smakebuf_r+0x74>
 802cdd4:	89a3      	ldrh	r3, [r4, #12]
 802cdd6:	f023 0303 	bic.w	r3, r3, #3
 802cdda:	f043 0301 	orr.w	r3, r3, #1
 802cdde:	81a3      	strh	r3, [r4, #12]
 802cde0:	89a0      	ldrh	r0, [r4, #12]
 802cde2:	4305      	orrs	r5, r0
 802cde4:	81a5      	strh	r5, [r4, #12]
 802cde6:	e7cd      	b.n	802cd84 <__smakebuf_r+0x18>
 802cde8:	0802c7a1 	.word	0x0802c7a1

0802cdec <malloc>:
 802cdec:	4b02      	ldr	r3, [pc, #8]	; (802cdf8 <malloc+0xc>)
 802cdee:	4601      	mov	r1, r0
 802cdf0:	6818      	ldr	r0, [r3, #0]
 802cdf2:	f000 b871 	b.w	802ced8 <_malloc_r>
 802cdf6:	bf00      	nop
 802cdf8:	20000094 	.word	0x20000094

0802cdfc <free>:
 802cdfc:	4b02      	ldr	r3, [pc, #8]	; (802ce08 <free+0xc>)
 802cdfe:	4601      	mov	r1, r0
 802ce00:	6818      	ldr	r0, [r3, #0]
 802ce02:	f000 b819 	b.w	802ce38 <_free_r>
 802ce06:	bf00      	nop
 802ce08:	20000094 	.word	0x20000094

0802ce0c <memcpy>:
 802ce0c:	440a      	add	r2, r1
 802ce0e:	4291      	cmp	r1, r2
 802ce10:	f100 33ff 	add.w	r3, r0, #4294967295
 802ce14:	d100      	bne.n	802ce18 <memcpy+0xc>
 802ce16:	4770      	bx	lr
 802ce18:	b510      	push	{r4, lr}
 802ce1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802ce1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 802ce22:	4291      	cmp	r1, r2
 802ce24:	d1f9      	bne.n	802ce1a <memcpy+0xe>
 802ce26:	bd10      	pop	{r4, pc}

0802ce28 <memset>:
 802ce28:	4402      	add	r2, r0
 802ce2a:	4603      	mov	r3, r0
 802ce2c:	4293      	cmp	r3, r2
 802ce2e:	d100      	bne.n	802ce32 <memset+0xa>
 802ce30:	4770      	bx	lr
 802ce32:	f803 1b01 	strb.w	r1, [r3], #1
 802ce36:	e7f9      	b.n	802ce2c <memset+0x4>

0802ce38 <_free_r>:
 802ce38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802ce3a:	2900      	cmp	r1, #0
 802ce3c:	d048      	beq.n	802ced0 <_free_r+0x98>
 802ce3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ce42:	9001      	str	r0, [sp, #4]
 802ce44:	2b00      	cmp	r3, #0
 802ce46:	f1a1 0404 	sub.w	r4, r1, #4
 802ce4a:	bfb8      	it	lt
 802ce4c:	18e4      	addlt	r4, r4, r3
 802ce4e:	f000 ffa7 	bl	802dda0 <__malloc_lock>
 802ce52:	4a20      	ldr	r2, [pc, #128]	; (802ced4 <_free_r+0x9c>)
 802ce54:	9801      	ldr	r0, [sp, #4]
 802ce56:	6813      	ldr	r3, [r2, #0]
 802ce58:	4615      	mov	r5, r2
 802ce5a:	b933      	cbnz	r3, 802ce6a <_free_r+0x32>
 802ce5c:	6063      	str	r3, [r4, #4]
 802ce5e:	6014      	str	r4, [r2, #0]
 802ce60:	b003      	add	sp, #12
 802ce62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ce66:	f000 bfa1 	b.w	802ddac <__malloc_unlock>
 802ce6a:	42a3      	cmp	r3, r4
 802ce6c:	d90b      	bls.n	802ce86 <_free_r+0x4e>
 802ce6e:	6821      	ldr	r1, [r4, #0]
 802ce70:	1862      	adds	r2, r4, r1
 802ce72:	4293      	cmp	r3, r2
 802ce74:	bf04      	itt	eq
 802ce76:	681a      	ldreq	r2, [r3, #0]
 802ce78:	685b      	ldreq	r3, [r3, #4]
 802ce7a:	6063      	str	r3, [r4, #4]
 802ce7c:	bf04      	itt	eq
 802ce7e:	1852      	addeq	r2, r2, r1
 802ce80:	6022      	streq	r2, [r4, #0]
 802ce82:	602c      	str	r4, [r5, #0]
 802ce84:	e7ec      	b.n	802ce60 <_free_r+0x28>
 802ce86:	461a      	mov	r2, r3
 802ce88:	685b      	ldr	r3, [r3, #4]
 802ce8a:	b10b      	cbz	r3, 802ce90 <_free_r+0x58>
 802ce8c:	42a3      	cmp	r3, r4
 802ce8e:	d9fa      	bls.n	802ce86 <_free_r+0x4e>
 802ce90:	6811      	ldr	r1, [r2, #0]
 802ce92:	1855      	adds	r5, r2, r1
 802ce94:	42a5      	cmp	r5, r4
 802ce96:	d10b      	bne.n	802ceb0 <_free_r+0x78>
 802ce98:	6824      	ldr	r4, [r4, #0]
 802ce9a:	4421      	add	r1, r4
 802ce9c:	1854      	adds	r4, r2, r1
 802ce9e:	42a3      	cmp	r3, r4
 802cea0:	6011      	str	r1, [r2, #0]
 802cea2:	d1dd      	bne.n	802ce60 <_free_r+0x28>
 802cea4:	681c      	ldr	r4, [r3, #0]
 802cea6:	685b      	ldr	r3, [r3, #4]
 802cea8:	6053      	str	r3, [r2, #4]
 802ceaa:	4421      	add	r1, r4
 802ceac:	6011      	str	r1, [r2, #0]
 802ceae:	e7d7      	b.n	802ce60 <_free_r+0x28>
 802ceb0:	d902      	bls.n	802ceb8 <_free_r+0x80>
 802ceb2:	230c      	movs	r3, #12
 802ceb4:	6003      	str	r3, [r0, #0]
 802ceb6:	e7d3      	b.n	802ce60 <_free_r+0x28>
 802ceb8:	6825      	ldr	r5, [r4, #0]
 802ceba:	1961      	adds	r1, r4, r5
 802cebc:	428b      	cmp	r3, r1
 802cebe:	bf04      	itt	eq
 802cec0:	6819      	ldreq	r1, [r3, #0]
 802cec2:	685b      	ldreq	r3, [r3, #4]
 802cec4:	6063      	str	r3, [r4, #4]
 802cec6:	bf04      	itt	eq
 802cec8:	1949      	addeq	r1, r1, r5
 802ceca:	6021      	streq	r1, [r4, #0]
 802cecc:	6054      	str	r4, [r2, #4]
 802cece:	e7c7      	b.n	802ce60 <_free_r+0x28>
 802ced0:	b003      	add	sp, #12
 802ced2:	bd30      	pop	{r4, r5, pc}
 802ced4:	200068ec 	.word	0x200068ec

0802ced8 <_malloc_r>:
 802ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ceda:	1ccd      	adds	r5, r1, #3
 802cedc:	f025 0503 	bic.w	r5, r5, #3
 802cee0:	3508      	adds	r5, #8
 802cee2:	2d0c      	cmp	r5, #12
 802cee4:	bf38      	it	cc
 802cee6:	250c      	movcc	r5, #12
 802cee8:	2d00      	cmp	r5, #0
 802ceea:	4606      	mov	r6, r0
 802ceec:	db01      	blt.n	802cef2 <_malloc_r+0x1a>
 802ceee:	42a9      	cmp	r1, r5
 802cef0:	d903      	bls.n	802cefa <_malloc_r+0x22>
 802cef2:	230c      	movs	r3, #12
 802cef4:	6033      	str	r3, [r6, #0]
 802cef6:	2000      	movs	r0, #0
 802cef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802cefa:	f000 ff51 	bl	802dda0 <__malloc_lock>
 802cefe:	4921      	ldr	r1, [pc, #132]	; (802cf84 <_malloc_r+0xac>)
 802cf00:	680a      	ldr	r2, [r1, #0]
 802cf02:	4614      	mov	r4, r2
 802cf04:	b99c      	cbnz	r4, 802cf2e <_malloc_r+0x56>
 802cf06:	4f20      	ldr	r7, [pc, #128]	; (802cf88 <_malloc_r+0xb0>)
 802cf08:	683b      	ldr	r3, [r7, #0]
 802cf0a:	b923      	cbnz	r3, 802cf16 <_malloc_r+0x3e>
 802cf0c:	4621      	mov	r1, r4
 802cf0e:	4630      	mov	r0, r6
 802cf10:	f000 fc28 	bl	802d764 <_sbrk_r>
 802cf14:	6038      	str	r0, [r7, #0]
 802cf16:	4629      	mov	r1, r5
 802cf18:	4630      	mov	r0, r6
 802cf1a:	f000 fc23 	bl	802d764 <_sbrk_r>
 802cf1e:	1c43      	adds	r3, r0, #1
 802cf20:	d123      	bne.n	802cf6a <_malloc_r+0x92>
 802cf22:	230c      	movs	r3, #12
 802cf24:	6033      	str	r3, [r6, #0]
 802cf26:	4630      	mov	r0, r6
 802cf28:	f000 ff40 	bl	802ddac <__malloc_unlock>
 802cf2c:	e7e3      	b.n	802cef6 <_malloc_r+0x1e>
 802cf2e:	6823      	ldr	r3, [r4, #0]
 802cf30:	1b5b      	subs	r3, r3, r5
 802cf32:	d417      	bmi.n	802cf64 <_malloc_r+0x8c>
 802cf34:	2b0b      	cmp	r3, #11
 802cf36:	d903      	bls.n	802cf40 <_malloc_r+0x68>
 802cf38:	6023      	str	r3, [r4, #0]
 802cf3a:	441c      	add	r4, r3
 802cf3c:	6025      	str	r5, [r4, #0]
 802cf3e:	e004      	b.n	802cf4a <_malloc_r+0x72>
 802cf40:	6863      	ldr	r3, [r4, #4]
 802cf42:	42a2      	cmp	r2, r4
 802cf44:	bf0c      	ite	eq
 802cf46:	600b      	streq	r3, [r1, #0]
 802cf48:	6053      	strne	r3, [r2, #4]
 802cf4a:	4630      	mov	r0, r6
 802cf4c:	f000 ff2e 	bl	802ddac <__malloc_unlock>
 802cf50:	f104 000b 	add.w	r0, r4, #11
 802cf54:	1d23      	adds	r3, r4, #4
 802cf56:	f020 0007 	bic.w	r0, r0, #7
 802cf5a:	1ac2      	subs	r2, r0, r3
 802cf5c:	d0cc      	beq.n	802cef8 <_malloc_r+0x20>
 802cf5e:	1a1b      	subs	r3, r3, r0
 802cf60:	50a3      	str	r3, [r4, r2]
 802cf62:	e7c9      	b.n	802cef8 <_malloc_r+0x20>
 802cf64:	4622      	mov	r2, r4
 802cf66:	6864      	ldr	r4, [r4, #4]
 802cf68:	e7cc      	b.n	802cf04 <_malloc_r+0x2c>
 802cf6a:	1cc4      	adds	r4, r0, #3
 802cf6c:	f024 0403 	bic.w	r4, r4, #3
 802cf70:	42a0      	cmp	r0, r4
 802cf72:	d0e3      	beq.n	802cf3c <_malloc_r+0x64>
 802cf74:	1a21      	subs	r1, r4, r0
 802cf76:	4630      	mov	r0, r6
 802cf78:	f000 fbf4 	bl	802d764 <_sbrk_r>
 802cf7c:	3001      	adds	r0, #1
 802cf7e:	d1dd      	bne.n	802cf3c <_malloc_r+0x64>
 802cf80:	e7cf      	b.n	802cf22 <_malloc_r+0x4a>
 802cf82:	bf00      	nop
 802cf84:	200068ec 	.word	0x200068ec
 802cf88:	200068f0 	.word	0x200068f0

0802cf8c <__sfputc_r>:
 802cf8c:	6893      	ldr	r3, [r2, #8]
 802cf8e:	3b01      	subs	r3, #1
 802cf90:	2b00      	cmp	r3, #0
 802cf92:	b410      	push	{r4}
 802cf94:	6093      	str	r3, [r2, #8]
 802cf96:	da08      	bge.n	802cfaa <__sfputc_r+0x1e>
 802cf98:	6994      	ldr	r4, [r2, #24]
 802cf9a:	42a3      	cmp	r3, r4
 802cf9c:	db01      	blt.n	802cfa2 <__sfputc_r+0x16>
 802cf9e:	290a      	cmp	r1, #10
 802cfa0:	d103      	bne.n	802cfaa <__sfputc_r+0x1e>
 802cfa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 802cfa6:	f000 bc95 	b.w	802d8d4 <__swbuf_r>
 802cfaa:	6813      	ldr	r3, [r2, #0]
 802cfac:	1c58      	adds	r0, r3, #1
 802cfae:	6010      	str	r0, [r2, #0]
 802cfb0:	7019      	strb	r1, [r3, #0]
 802cfb2:	4608      	mov	r0, r1
 802cfb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 802cfb8:	4770      	bx	lr

0802cfba <__sfputs_r>:
 802cfba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cfbc:	4606      	mov	r6, r0
 802cfbe:	460f      	mov	r7, r1
 802cfc0:	4614      	mov	r4, r2
 802cfc2:	18d5      	adds	r5, r2, r3
 802cfc4:	42ac      	cmp	r4, r5
 802cfc6:	d101      	bne.n	802cfcc <__sfputs_r+0x12>
 802cfc8:	2000      	movs	r0, #0
 802cfca:	e007      	b.n	802cfdc <__sfputs_r+0x22>
 802cfcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cfd0:	463a      	mov	r2, r7
 802cfd2:	4630      	mov	r0, r6
 802cfd4:	f7ff ffda 	bl	802cf8c <__sfputc_r>
 802cfd8:	1c43      	adds	r3, r0, #1
 802cfda:	d1f3      	bne.n	802cfc4 <__sfputs_r+0xa>
 802cfdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802cfe0 <_vfiprintf_r>:
 802cfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cfe4:	460d      	mov	r5, r1
 802cfe6:	b09d      	sub	sp, #116	; 0x74
 802cfe8:	4614      	mov	r4, r2
 802cfea:	4698      	mov	r8, r3
 802cfec:	4606      	mov	r6, r0
 802cfee:	b118      	cbz	r0, 802cff8 <_vfiprintf_r+0x18>
 802cff0:	6983      	ldr	r3, [r0, #24]
 802cff2:	b90b      	cbnz	r3, 802cff8 <_vfiprintf_r+0x18>
 802cff4:	f7ff fc08 	bl	802c808 <__sinit>
 802cff8:	4b89      	ldr	r3, [pc, #548]	; (802d220 <_vfiprintf_r+0x240>)
 802cffa:	429d      	cmp	r5, r3
 802cffc:	d11b      	bne.n	802d036 <_vfiprintf_r+0x56>
 802cffe:	6875      	ldr	r5, [r6, #4]
 802d000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802d002:	07d9      	lsls	r1, r3, #31
 802d004:	d405      	bmi.n	802d012 <_vfiprintf_r+0x32>
 802d006:	89ab      	ldrh	r3, [r5, #12]
 802d008:	059a      	lsls	r2, r3, #22
 802d00a:	d402      	bmi.n	802d012 <_vfiprintf_r+0x32>
 802d00c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802d00e:	f7ff fe86 	bl	802cd1e <__retarget_lock_acquire_recursive>
 802d012:	89ab      	ldrh	r3, [r5, #12]
 802d014:	071b      	lsls	r3, r3, #28
 802d016:	d501      	bpl.n	802d01c <_vfiprintf_r+0x3c>
 802d018:	692b      	ldr	r3, [r5, #16]
 802d01a:	b9eb      	cbnz	r3, 802d058 <_vfiprintf_r+0x78>
 802d01c:	4629      	mov	r1, r5
 802d01e:	4630      	mov	r0, r6
 802d020:	f000 fcbc 	bl	802d99c <__swsetup_r>
 802d024:	b1c0      	cbz	r0, 802d058 <_vfiprintf_r+0x78>
 802d026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802d028:	07dc      	lsls	r4, r3, #31
 802d02a:	d50e      	bpl.n	802d04a <_vfiprintf_r+0x6a>
 802d02c:	f04f 30ff 	mov.w	r0, #4294967295
 802d030:	b01d      	add	sp, #116	; 0x74
 802d032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d036:	4b7b      	ldr	r3, [pc, #492]	; (802d224 <_vfiprintf_r+0x244>)
 802d038:	429d      	cmp	r5, r3
 802d03a:	d101      	bne.n	802d040 <_vfiprintf_r+0x60>
 802d03c:	68b5      	ldr	r5, [r6, #8]
 802d03e:	e7df      	b.n	802d000 <_vfiprintf_r+0x20>
 802d040:	4b79      	ldr	r3, [pc, #484]	; (802d228 <_vfiprintf_r+0x248>)
 802d042:	429d      	cmp	r5, r3
 802d044:	bf08      	it	eq
 802d046:	68f5      	ldreq	r5, [r6, #12]
 802d048:	e7da      	b.n	802d000 <_vfiprintf_r+0x20>
 802d04a:	89ab      	ldrh	r3, [r5, #12]
 802d04c:	0598      	lsls	r0, r3, #22
 802d04e:	d4ed      	bmi.n	802d02c <_vfiprintf_r+0x4c>
 802d050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802d052:	f7ff fe66 	bl	802cd22 <__retarget_lock_release_recursive>
 802d056:	e7e9      	b.n	802d02c <_vfiprintf_r+0x4c>
 802d058:	2300      	movs	r3, #0
 802d05a:	9309      	str	r3, [sp, #36]	; 0x24
 802d05c:	2320      	movs	r3, #32
 802d05e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802d062:	f8cd 800c 	str.w	r8, [sp, #12]
 802d066:	2330      	movs	r3, #48	; 0x30
 802d068:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802d22c <_vfiprintf_r+0x24c>
 802d06c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802d070:	f04f 0901 	mov.w	r9, #1
 802d074:	4623      	mov	r3, r4
 802d076:	469a      	mov	sl, r3
 802d078:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d07c:	b10a      	cbz	r2, 802d082 <_vfiprintf_r+0xa2>
 802d07e:	2a25      	cmp	r2, #37	; 0x25
 802d080:	d1f9      	bne.n	802d076 <_vfiprintf_r+0x96>
 802d082:	ebba 0b04 	subs.w	fp, sl, r4
 802d086:	d00b      	beq.n	802d0a0 <_vfiprintf_r+0xc0>
 802d088:	465b      	mov	r3, fp
 802d08a:	4622      	mov	r2, r4
 802d08c:	4629      	mov	r1, r5
 802d08e:	4630      	mov	r0, r6
 802d090:	f7ff ff93 	bl	802cfba <__sfputs_r>
 802d094:	3001      	adds	r0, #1
 802d096:	f000 80aa 	beq.w	802d1ee <_vfiprintf_r+0x20e>
 802d09a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802d09c:	445a      	add	r2, fp
 802d09e:	9209      	str	r2, [sp, #36]	; 0x24
 802d0a0:	f89a 3000 	ldrb.w	r3, [sl]
 802d0a4:	2b00      	cmp	r3, #0
 802d0a6:	f000 80a2 	beq.w	802d1ee <_vfiprintf_r+0x20e>
 802d0aa:	2300      	movs	r3, #0
 802d0ac:	f04f 32ff 	mov.w	r2, #4294967295
 802d0b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802d0b4:	f10a 0a01 	add.w	sl, sl, #1
 802d0b8:	9304      	str	r3, [sp, #16]
 802d0ba:	9307      	str	r3, [sp, #28]
 802d0bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802d0c0:	931a      	str	r3, [sp, #104]	; 0x68
 802d0c2:	4654      	mov	r4, sl
 802d0c4:	2205      	movs	r2, #5
 802d0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d0ca:	4858      	ldr	r0, [pc, #352]	; (802d22c <_vfiprintf_r+0x24c>)
 802d0cc:	f7d3 f890 	bl	80001f0 <memchr>
 802d0d0:	9a04      	ldr	r2, [sp, #16]
 802d0d2:	b9d8      	cbnz	r0, 802d10c <_vfiprintf_r+0x12c>
 802d0d4:	06d1      	lsls	r1, r2, #27
 802d0d6:	bf44      	itt	mi
 802d0d8:	2320      	movmi	r3, #32
 802d0da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802d0de:	0713      	lsls	r3, r2, #28
 802d0e0:	bf44      	itt	mi
 802d0e2:	232b      	movmi	r3, #43	; 0x2b
 802d0e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802d0e8:	f89a 3000 	ldrb.w	r3, [sl]
 802d0ec:	2b2a      	cmp	r3, #42	; 0x2a
 802d0ee:	d015      	beq.n	802d11c <_vfiprintf_r+0x13c>
 802d0f0:	9a07      	ldr	r2, [sp, #28]
 802d0f2:	4654      	mov	r4, sl
 802d0f4:	2000      	movs	r0, #0
 802d0f6:	f04f 0c0a 	mov.w	ip, #10
 802d0fa:	4621      	mov	r1, r4
 802d0fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 802d100:	3b30      	subs	r3, #48	; 0x30
 802d102:	2b09      	cmp	r3, #9
 802d104:	d94e      	bls.n	802d1a4 <_vfiprintf_r+0x1c4>
 802d106:	b1b0      	cbz	r0, 802d136 <_vfiprintf_r+0x156>
 802d108:	9207      	str	r2, [sp, #28]
 802d10a:	e014      	b.n	802d136 <_vfiprintf_r+0x156>
 802d10c:	eba0 0308 	sub.w	r3, r0, r8
 802d110:	fa09 f303 	lsl.w	r3, r9, r3
 802d114:	4313      	orrs	r3, r2
 802d116:	9304      	str	r3, [sp, #16]
 802d118:	46a2      	mov	sl, r4
 802d11a:	e7d2      	b.n	802d0c2 <_vfiprintf_r+0xe2>
 802d11c:	9b03      	ldr	r3, [sp, #12]
 802d11e:	1d19      	adds	r1, r3, #4
 802d120:	681b      	ldr	r3, [r3, #0]
 802d122:	9103      	str	r1, [sp, #12]
 802d124:	2b00      	cmp	r3, #0
 802d126:	bfbb      	ittet	lt
 802d128:	425b      	neglt	r3, r3
 802d12a:	f042 0202 	orrlt.w	r2, r2, #2
 802d12e:	9307      	strge	r3, [sp, #28]
 802d130:	9307      	strlt	r3, [sp, #28]
 802d132:	bfb8      	it	lt
 802d134:	9204      	strlt	r2, [sp, #16]
 802d136:	7823      	ldrb	r3, [r4, #0]
 802d138:	2b2e      	cmp	r3, #46	; 0x2e
 802d13a:	d10c      	bne.n	802d156 <_vfiprintf_r+0x176>
 802d13c:	7863      	ldrb	r3, [r4, #1]
 802d13e:	2b2a      	cmp	r3, #42	; 0x2a
 802d140:	d135      	bne.n	802d1ae <_vfiprintf_r+0x1ce>
 802d142:	9b03      	ldr	r3, [sp, #12]
 802d144:	1d1a      	adds	r2, r3, #4
 802d146:	681b      	ldr	r3, [r3, #0]
 802d148:	9203      	str	r2, [sp, #12]
 802d14a:	2b00      	cmp	r3, #0
 802d14c:	bfb8      	it	lt
 802d14e:	f04f 33ff 	movlt.w	r3, #4294967295
 802d152:	3402      	adds	r4, #2
 802d154:	9305      	str	r3, [sp, #20]
 802d156:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802d23c <_vfiprintf_r+0x25c>
 802d15a:	7821      	ldrb	r1, [r4, #0]
 802d15c:	2203      	movs	r2, #3
 802d15e:	4650      	mov	r0, sl
 802d160:	f7d3 f846 	bl	80001f0 <memchr>
 802d164:	b140      	cbz	r0, 802d178 <_vfiprintf_r+0x198>
 802d166:	2340      	movs	r3, #64	; 0x40
 802d168:	eba0 000a 	sub.w	r0, r0, sl
 802d16c:	fa03 f000 	lsl.w	r0, r3, r0
 802d170:	9b04      	ldr	r3, [sp, #16]
 802d172:	4303      	orrs	r3, r0
 802d174:	3401      	adds	r4, #1
 802d176:	9304      	str	r3, [sp, #16]
 802d178:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d17c:	482c      	ldr	r0, [pc, #176]	; (802d230 <_vfiprintf_r+0x250>)
 802d17e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802d182:	2206      	movs	r2, #6
 802d184:	f7d3 f834 	bl	80001f0 <memchr>
 802d188:	2800      	cmp	r0, #0
 802d18a:	d03f      	beq.n	802d20c <_vfiprintf_r+0x22c>
 802d18c:	4b29      	ldr	r3, [pc, #164]	; (802d234 <_vfiprintf_r+0x254>)
 802d18e:	bb1b      	cbnz	r3, 802d1d8 <_vfiprintf_r+0x1f8>
 802d190:	9b03      	ldr	r3, [sp, #12]
 802d192:	3307      	adds	r3, #7
 802d194:	f023 0307 	bic.w	r3, r3, #7
 802d198:	3308      	adds	r3, #8
 802d19a:	9303      	str	r3, [sp, #12]
 802d19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d19e:	443b      	add	r3, r7
 802d1a0:	9309      	str	r3, [sp, #36]	; 0x24
 802d1a2:	e767      	b.n	802d074 <_vfiprintf_r+0x94>
 802d1a4:	fb0c 3202 	mla	r2, ip, r2, r3
 802d1a8:	460c      	mov	r4, r1
 802d1aa:	2001      	movs	r0, #1
 802d1ac:	e7a5      	b.n	802d0fa <_vfiprintf_r+0x11a>
 802d1ae:	2300      	movs	r3, #0
 802d1b0:	3401      	adds	r4, #1
 802d1b2:	9305      	str	r3, [sp, #20]
 802d1b4:	4619      	mov	r1, r3
 802d1b6:	f04f 0c0a 	mov.w	ip, #10
 802d1ba:	4620      	mov	r0, r4
 802d1bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d1c0:	3a30      	subs	r2, #48	; 0x30
 802d1c2:	2a09      	cmp	r2, #9
 802d1c4:	d903      	bls.n	802d1ce <_vfiprintf_r+0x1ee>
 802d1c6:	2b00      	cmp	r3, #0
 802d1c8:	d0c5      	beq.n	802d156 <_vfiprintf_r+0x176>
 802d1ca:	9105      	str	r1, [sp, #20]
 802d1cc:	e7c3      	b.n	802d156 <_vfiprintf_r+0x176>
 802d1ce:	fb0c 2101 	mla	r1, ip, r1, r2
 802d1d2:	4604      	mov	r4, r0
 802d1d4:	2301      	movs	r3, #1
 802d1d6:	e7f0      	b.n	802d1ba <_vfiprintf_r+0x1da>
 802d1d8:	ab03      	add	r3, sp, #12
 802d1da:	9300      	str	r3, [sp, #0]
 802d1dc:	462a      	mov	r2, r5
 802d1de:	4b16      	ldr	r3, [pc, #88]	; (802d238 <_vfiprintf_r+0x258>)
 802d1e0:	a904      	add	r1, sp, #16
 802d1e2:	4630      	mov	r0, r6
 802d1e4:	f3af 8000 	nop.w
 802d1e8:	4607      	mov	r7, r0
 802d1ea:	1c78      	adds	r0, r7, #1
 802d1ec:	d1d6      	bne.n	802d19c <_vfiprintf_r+0x1bc>
 802d1ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802d1f0:	07d9      	lsls	r1, r3, #31
 802d1f2:	d405      	bmi.n	802d200 <_vfiprintf_r+0x220>
 802d1f4:	89ab      	ldrh	r3, [r5, #12]
 802d1f6:	059a      	lsls	r2, r3, #22
 802d1f8:	d402      	bmi.n	802d200 <_vfiprintf_r+0x220>
 802d1fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802d1fc:	f7ff fd91 	bl	802cd22 <__retarget_lock_release_recursive>
 802d200:	89ab      	ldrh	r3, [r5, #12]
 802d202:	065b      	lsls	r3, r3, #25
 802d204:	f53f af12 	bmi.w	802d02c <_vfiprintf_r+0x4c>
 802d208:	9809      	ldr	r0, [sp, #36]	; 0x24
 802d20a:	e711      	b.n	802d030 <_vfiprintf_r+0x50>
 802d20c:	ab03      	add	r3, sp, #12
 802d20e:	9300      	str	r3, [sp, #0]
 802d210:	462a      	mov	r2, r5
 802d212:	4b09      	ldr	r3, [pc, #36]	; (802d238 <_vfiprintf_r+0x258>)
 802d214:	a904      	add	r1, sp, #16
 802d216:	4630      	mov	r0, r6
 802d218:	f000 f880 	bl	802d31c <_printf_i>
 802d21c:	e7e4      	b.n	802d1e8 <_vfiprintf_r+0x208>
 802d21e:	bf00      	nop
 802d220:	08032b54 	.word	0x08032b54
 802d224:	08032b74 	.word	0x08032b74
 802d228:	08032b34 	.word	0x08032b34
 802d22c:	08032b98 	.word	0x08032b98
 802d230:	08032ba2 	.word	0x08032ba2
 802d234:	00000000 	.word	0x00000000
 802d238:	0802cfbb 	.word	0x0802cfbb
 802d23c:	08032b9e 	.word	0x08032b9e

0802d240 <_printf_common>:
 802d240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d244:	4616      	mov	r6, r2
 802d246:	4699      	mov	r9, r3
 802d248:	688a      	ldr	r2, [r1, #8]
 802d24a:	690b      	ldr	r3, [r1, #16]
 802d24c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802d250:	4293      	cmp	r3, r2
 802d252:	bfb8      	it	lt
 802d254:	4613      	movlt	r3, r2
 802d256:	6033      	str	r3, [r6, #0]
 802d258:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802d25c:	4607      	mov	r7, r0
 802d25e:	460c      	mov	r4, r1
 802d260:	b10a      	cbz	r2, 802d266 <_printf_common+0x26>
 802d262:	3301      	adds	r3, #1
 802d264:	6033      	str	r3, [r6, #0]
 802d266:	6823      	ldr	r3, [r4, #0]
 802d268:	0699      	lsls	r1, r3, #26
 802d26a:	bf42      	ittt	mi
 802d26c:	6833      	ldrmi	r3, [r6, #0]
 802d26e:	3302      	addmi	r3, #2
 802d270:	6033      	strmi	r3, [r6, #0]
 802d272:	6825      	ldr	r5, [r4, #0]
 802d274:	f015 0506 	ands.w	r5, r5, #6
 802d278:	d106      	bne.n	802d288 <_printf_common+0x48>
 802d27a:	f104 0a19 	add.w	sl, r4, #25
 802d27e:	68e3      	ldr	r3, [r4, #12]
 802d280:	6832      	ldr	r2, [r6, #0]
 802d282:	1a9b      	subs	r3, r3, r2
 802d284:	42ab      	cmp	r3, r5
 802d286:	dc26      	bgt.n	802d2d6 <_printf_common+0x96>
 802d288:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802d28c:	1e13      	subs	r3, r2, #0
 802d28e:	6822      	ldr	r2, [r4, #0]
 802d290:	bf18      	it	ne
 802d292:	2301      	movne	r3, #1
 802d294:	0692      	lsls	r2, r2, #26
 802d296:	d42b      	bmi.n	802d2f0 <_printf_common+0xb0>
 802d298:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802d29c:	4649      	mov	r1, r9
 802d29e:	4638      	mov	r0, r7
 802d2a0:	47c0      	blx	r8
 802d2a2:	3001      	adds	r0, #1
 802d2a4:	d01e      	beq.n	802d2e4 <_printf_common+0xa4>
 802d2a6:	6823      	ldr	r3, [r4, #0]
 802d2a8:	68e5      	ldr	r5, [r4, #12]
 802d2aa:	6832      	ldr	r2, [r6, #0]
 802d2ac:	f003 0306 	and.w	r3, r3, #6
 802d2b0:	2b04      	cmp	r3, #4
 802d2b2:	bf08      	it	eq
 802d2b4:	1aad      	subeq	r5, r5, r2
 802d2b6:	68a3      	ldr	r3, [r4, #8]
 802d2b8:	6922      	ldr	r2, [r4, #16]
 802d2ba:	bf0c      	ite	eq
 802d2bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802d2c0:	2500      	movne	r5, #0
 802d2c2:	4293      	cmp	r3, r2
 802d2c4:	bfc4      	itt	gt
 802d2c6:	1a9b      	subgt	r3, r3, r2
 802d2c8:	18ed      	addgt	r5, r5, r3
 802d2ca:	2600      	movs	r6, #0
 802d2cc:	341a      	adds	r4, #26
 802d2ce:	42b5      	cmp	r5, r6
 802d2d0:	d11a      	bne.n	802d308 <_printf_common+0xc8>
 802d2d2:	2000      	movs	r0, #0
 802d2d4:	e008      	b.n	802d2e8 <_printf_common+0xa8>
 802d2d6:	2301      	movs	r3, #1
 802d2d8:	4652      	mov	r2, sl
 802d2da:	4649      	mov	r1, r9
 802d2dc:	4638      	mov	r0, r7
 802d2de:	47c0      	blx	r8
 802d2e0:	3001      	adds	r0, #1
 802d2e2:	d103      	bne.n	802d2ec <_printf_common+0xac>
 802d2e4:	f04f 30ff 	mov.w	r0, #4294967295
 802d2e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d2ec:	3501      	adds	r5, #1
 802d2ee:	e7c6      	b.n	802d27e <_printf_common+0x3e>
 802d2f0:	18e1      	adds	r1, r4, r3
 802d2f2:	1c5a      	adds	r2, r3, #1
 802d2f4:	2030      	movs	r0, #48	; 0x30
 802d2f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802d2fa:	4422      	add	r2, r4
 802d2fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802d300:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802d304:	3302      	adds	r3, #2
 802d306:	e7c7      	b.n	802d298 <_printf_common+0x58>
 802d308:	2301      	movs	r3, #1
 802d30a:	4622      	mov	r2, r4
 802d30c:	4649      	mov	r1, r9
 802d30e:	4638      	mov	r0, r7
 802d310:	47c0      	blx	r8
 802d312:	3001      	adds	r0, #1
 802d314:	d0e6      	beq.n	802d2e4 <_printf_common+0xa4>
 802d316:	3601      	adds	r6, #1
 802d318:	e7d9      	b.n	802d2ce <_printf_common+0x8e>
	...

0802d31c <_printf_i>:
 802d31c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802d320:	460c      	mov	r4, r1
 802d322:	4691      	mov	r9, r2
 802d324:	7e27      	ldrb	r7, [r4, #24]
 802d326:	990c      	ldr	r1, [sp, #48]	; 0x30
 802d328:	2f78      	cmp	r7, #120	; 0x78
 802d32a:	4680      	mov	r8, r0
 802d32c:	469a      	mov	sl, r3
 802d32e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802d332:	d807      	bhi.n	802d344 <_printf_i+0x28>
 802d334:	2f62      	cmp	r7, #98	; 0x62
 802d336:	d80a      	bhi.n	802d34e <_printf_i+0x32>
 802d338:	2f00      	cmp	r7, #0
 802d33a:	f000 80d8 	beq.w	802d4ee <_printf_i+0x1d2>
 802d33e:	2f58      	cmp	r7, #88	; 0x58
 802d340:	f000 80a3 	beq.w	802d48a <_printf_i+0x16e>
 802d344:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802d348:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802d34c:	e03a      	b.n	802d3c4 <_printf_i+0xa8>
 802d34e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802d352:	2b15      	cmp	r3, #21
 802d354:	d8f6      	bhi.n	802d344 <_printf_i+0x28>
 802d356:	a001      	add	r0, pc, #4	; (adr r0, 802d35c <_printf_i+0x40>)
 802d358:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802d35c:	0802d3b5 	.word	0x0802d3b5
 802d360:	0802d3c9 	.word	0x0802d3c9
 802d364:	0802d345 	.word	0x0802d345
 802d368:	0802d345 	.word	0x0802d345
 802d36c:	0802d345 	.word	0x0802d345
 802d370:	0802d345 	.word	0x0802d345
 802d374:	0802d3c9 	.word	0x0802d3c9
 802d378:	0802d345 	.word	0x0802d345
 802d37c:	0802d345 	.word	0x0802d345
 802d380:	0802d345 	.word	0x0802d345
 802d384:	0802d345 	.word	0x0802d345
 802d388:	0802d4d5 	.word	0x0802d4d5
 802d38c:	0802d3f9 	.word	0x0802d3f9
 802d390:	0802d4b7 	.word	0x0802d4b7
 802d394:	0802d345 	.word	0x0802d345
 802d398:	0802d345 	.word	0x0802d345
 802d39c:	0802d4f7 	.word	0x0802d4f7
 802d3a0:	0802d345 	.word	0x0802d345
 802d3a4:	0802d3f9 	.word	0x0802d3f9
 802d3a8:	0802d345 	.word	0x0802d345
 802d3ac:	0802d345 	.word	0x0802d345
 802d3b0:	0802d4bf 	.word	0x0802d4bf
 802d3b4:	680b      	ldr	r3, [r1, #0]
 802d3b6:	1d1a      	adds	r2, r3, #4
 802d3b8:	681b      	ldr	r3, [r3, #0]
 802d3ba:	600a      	str	r2, [r1, #0]
 802d3bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802d3c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802d3c4:	2301      	movs	r3, #1
 802d3c6:	e0a3      	b.n	802d510 <_printf_i+0x1f4>
 802d3c8:	6825      	ldr	r5, [r4, #0]
 802d3ca:	6808      	ldr	r0, [r1, #0]
 802d3cc:	062e      	lsls	r6, r5, #24
 802d3ce:	f100 0304 	add.w	r3, r0, #4
 802d3d2:	d50a      	bpl.n	802d3ea <_printf_i+0xce>
 802d3d4:	6805      	ldr	r5, [r0, #0]
 802d3d6:	600b      	str	r3, [r1, #0]
 802d3d8:	2d00      	cmp	r5, #0
 802d3da:	da03      	bge.n	802d3e4 <_printf_i+0xc8>
 802d3dc:	232d      	movs	r3, #45	; 0x2d
 802d3de:	426d      	negs	r5, r5
 802d3e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802d3e4:	485e      	ldr	r0, [pc, #376]	; (802d560 <_printf_i+0x244>)
 802d3e6:	230a      	movs	r3, #10
 802d3e8:	e019      	b.n	802d41e <_printf_i+0x102>
 802d3ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 802d3ee:	6805      	ldr	r5, [r0, #0]
 802d3f0:	600b      	str	r3, [r1, #0]
 802d3f2:	bf18      	it	ne
 802d3f4:	b22d      	sxthne	r5, r5
 802d3f6:	e7ef      	b.n	802d3d8 <_printf_i+0xbc>
 802d3f8:	680b      	ldr	r3, [r1, #0]
 802d3fa:	6825      	ldr	r5, [r4, #0]
 802d3fc:	1d18      	adds	r0, r3, #4
 802d3fe:	6008      	str	r0, [r1, #0]
 802d400:	0628      	lsls	r0, r5, #24
 802d402:	d501      	bpl.n	802d408 <_printf_i+0xec>
 802d404:	681d      	ldr	r5, [r3, #0]
 802d406:	e002      	b.n	802d40e <_printf_i+0xf2>
 802d408:	0669      	lsls	r1, r5, #25
 802d40a:	d5fb      	bpl.n	802d404 <_printf_i+0xe8>
 802d40c:	881d      	ldrh	r5, [r3, #0]
 802d40e:	4854      	ldr	r0, [pc, #336]	; (802d560 <_printf_i+0x244>)
 802d410:	2f6f      	cmp	r7, #111	; 0x6f
 802d412:	bf0c      	ite	eq
 802d414:	2308      	moveq	r3, #8
 802d416:	230a      	movne	r3, #10
 802d418:	2100      	movs	r1, #0
 802d41a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802d41e:	6866      	ldr	r6, [r4, #4]
 802d420:	60a6      	str	r6, [r4, #8]
 802d422:	2e00      	cmp	r6, #0
 802d424:	bfa2      	ittt	ge
 802d426:	6821      	ldrge	r1, [r4, #0]
 802d428:	f021 0104 	bicge.w	r1, r1, #4
 802d42c:	6021      	strge	r1, [r4, #0]
 802d42e:	b90d      	cbnz	r5, 802d434 <_printf_i+0x118>
 802d430:	2e00      	cmp	r6, #0
 802d432:	d04d      	beq.n	802d4d0 <_printf_i+0x1b4>
 802d434:	4616      	mov	r6, r2
 802d436:	fbb5 f1f3 	udiv	r1, r5, r3
 802d43a:	fb03 5711 	mls	r7, r3, r1, r5
 802d43e:	5dc7      	ldrb	r7, [r0, r7]
 802d440:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802d444:	462f      	mov	r7, r5
 802d446:	42bb      	cmp	r3, r7
 802d448:	460d      	mov	r5, r1
 802d44a:	d9f4      	bls.n	802d436 <_printf_i+0x11a>
 802d44c:	2b08      	cmp	r3, #8
 802d44e:	d10b      	bne.n	802d468 <_printf_i+0x14c>
 802d450:	6823      	ldr	r3, [r4, #0]
 802d452:	07df      	lsls	r7, r3, #31
 802d454:	d508      	bpl.n	802d468 <_printf_i+0x14c>
 802d456:	6923      	ldr	r3, [r4, #16]
 802d458:	6861      	ldr	r1, [r4, #4]
 802d45a:	4299      	cmp	r1, r3
 802d45c:	bfde      	ittt	le
 802d45e:	2330      	movle	r3, #48	; 0x30
 802d460:	f806 3c01 	strble.w	r3, [r6, #-1]
 802d464:	f106 36ff 	addle.w	r6, r6, #4294967295
 802d468:	1b92      	subs	r2, r2, r6
 802d46a:	6122      	str	r2, [r4, #16]
 802d46c:	f8cd a000 	str.w	sl, [sp]
 802d470:	464b      	mov	r3, r9
 802d472:	aa03      	add	r2, sp, #12
 802d474:	4621      	mov	r1, r4
 802d476:	4640      	mov	r0, r8
 802d478:	f7ff fee2 	bl	802d240 <_printf_common>
 802d47c:	3001      	adds	r0, #1
 802d47e:	d14c      	bne.n	802d51a <_printf_i+0x1fe>
 802d480:	f04f 30ff 	mov.w	r0, #4294967295
 802d484:	b004      	add	sp, #16
 802d486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d48a:	4835      	ldr	r0, [pc, #212]	; (802d560 <_printf_i+0x244>)
 802d48c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802d490:	6823      	ldr	r3, [r4, #0]
 802d492:	680e      	ldr	r6, [r1, #0]
 802d494:	061f      	lsls	r7, r3, #24
 802d496:	f856 5b04 	ldr.w	r5, [r6], #4
 802d49a:	600e      	str	r6, [r1, #0]
 802d49c:	d514      	bpl.n	802d4c8 <_printf_i+0x1ac>
 802d49e:	07d9      	lsls	r1, r3, #31
 802d4a0:	bf44      	itt	mi
 802d4a2:	f043 0320 	orrmi.w	r3, r3, #32
 802d4a6:	6023      	strmi	r3, [r4, #0]
 802d4a8:	b91d      	cbnz	r5, 802d4b2 <_printf_i+0x196>
 802d4aa:	6823      	ldr	r3, [r4, #0]
 802d4ac:	f023 0320 	bic.w	r3, r3, #32
 802d4b0:	6023      	str	r3, [r4, #0]
 802d4b2:	2310      	movs	r3, #16
 802d4b4:	e7b0      	b.n	802d418 <_printf_i+0xfc>
 802d4b6:	6823      	ldr	r3, [r4, #0]
 802d4b8:	f043 0320 	orr.w	r3, r3, #32
 802d4bc:	6023      	str	r3, [r4, #0]
 802d4be:	2378      	movs	r3, #120	; 0x78
 802d4c0:	4828      	ldr	r0, [pc, #160]	; (802d564 <_printf_i+0x248>)
 802d4c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802d4c6:	e7e3      	b.n	802d490 <_printf_i+0x174>
 802d4c8:	065e      	lsls	r6, r3, #25
 802d4ca:	bf48      	it	mi
 802d4cc:	b2ad      	uxthmi	r5, r5
 802d4ce:	e7e6      	b.n	802d49e <_printf_i+0x182>
 802d4d0:	4616      	mov	r6, r2
 802d4d2:	e7bb      	b.n	802d44c <_printf_i+0x130>
 802d4d4:	680b      	ldr	r3, [r1, #0]
 802d4d6:	6826      	ldr	r6, [r4, #0]
 802d4d8:	6960      	ldr	r0, [r4, #20]
 802d4da:	1d1d      	adds	r5, r3, #4
 802d4dc:	600d      	str	r5, [r1, #0]
 802d4de:	0635      	lsls	r5, r6, #24
 802d4e0:	681b      	ldr	r3, [r3, #0]
 802d4e2:	d501      	bpl.n	802d4e8 <_printf_i+0x1cc>
 802d4e4:	6018      	str	r0, [r3, #0]
 802d4e6:	e002      	b.n	802d4ee <_printf_i+0x1d2>
 802d4e8:	0671      	lsls	r1, r6, #25
 802d4ea:	d5fb      	bpl.n	802d4e4 <_printf_i+0x1c8>
 802d4ec:	8018      	strh	r0, [r3, #0]
 802d4ee:	2300      	movs	r3, #0
 802d4f0:	6123      	str	r3, [r4, #16]
 802d4f2:	4616      	mov	r6, r2
 802d4f4:	e7ba      	b.n	802d46c <_printf_i+0x150>
 802d4f6:	680b      	ldr	r3, [r1, #0]
 802d4f8:	1d1a      	adds	r2, r3, #4
 802d4fa:	600a      	str	r2, [r1, #0]
 802d4fc:	681e      	ldr	r6, [r3, #0]
 802d4fe:	6862      	ldr	r2, [r4, #4]
 802d500:	2100      	movs	r1, #0
 802d502:	4630      	mov	r0, r6
 802d504:	f7d2 fe74 	bl	80001f0 <memchr>
 802d508:	b108      	cbz	r0, 802d50e <_printf_i+0x1f2>
 802d50a:	1b80      	subs	r0, r0, r6
 802d50c:	6060      	str	r0, [r4, #4]
 802d50e:	6863      	ldr	r3, [r4, #4]
 802d510:	6123      	str	r3, [r4, #16]
 802d512:	2300      	movs	r3, #0
 802d514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802d518:	e7a8      	b.n	802d46c <_printf_i+0x150>
 802d51a:	6923      	ldr	r3, [r4, #16]
 802d51c:	4632      	mov	r2, r6
 802d51e:	4649      	mov	r1, r9
 802d520:	4640      	mov	r0, r8
 802d522:	47d0      	blx	sl
 802d524:	3001      	adds	r0, #1
 802d526:	d0ab      	beq.n	802d480 <_printf_i+0x164>
 802d528:	6823      	ldr	r3, [r4, #0]
 802d52a:	079b      	lsls	r3, r3, #30
 802d52c:	d413      	bmi.n	802d556 <_printf_i+0x23a>
 802d52e:	68e0      	ldr	r0, [r4, #12]
 802d530:	9b03      	ldr	r3, [sp, #12]
 802d532:	4298      	cmp	r0, r3
 802d534:	bfb8      	it	lt
 802d536:	4618      	movlt	r0, r3
 802d538:	e7a4      	b.n	802d484 <_printf_i+0x168>
 802d53a:	2301      	movs	r3, #1
 802d53c:	4632      	mov	r2, r6
 802d53e:	4649      	mov	r1, r9
 802d540:	4640      	mov	r0, r8
 802d542:	47d0      	blx	sl
 802d544:	3001      	adds	r0, #1
 802d546:	d09b      	beq.n	802d480 <_printf_i+0x164>
 802d548:	3501      	adds	r5, #1
 802d54a:	68e3      	ldr	r3, [r4, #12]
 802d54c:	9903      	ldr	r1, [sp, #12]
 802d54e:	1a5b      	subs	r3, r3, r1
 802d550:	42ab      	cmp	r3, r5
 802d552:	dcf2      	bgt.n	802d53a <_printf_i+0x21e>
 802d554:	e7eb      	b.n	802d52e <_printf_i+0x212>
 802d556:	2500      	movs	r5, #0
 802d558:	f104 0619 	add.w	r6, r4, #25
 802d55c:	e7f5      	b.n	802d54a <_printf_i+0x22e>
 802d55e:	bf00      	nop
 802d560:	08032ba9 	.word	0x08032ba9
 802d564:	08032bba 	.word	0x08032bba

0802d568 <cleanup_glue>:
 802d568:	b538      	push	{r3, r4, r5, lr}
 802d56a:	460c      	mov	r4, r1
 802d56c:	6809      	ldr	r1, [r1, #0]
 802d56e:	4605      	mov	r5, r0
 802d570:	b109      	cbz	r1, 802d576 <cleanup_glue+0xe>
 802d572:	f7ff fff9 	bl	802d568 <cleanup_glue>
 802d576:	4621      	mov	r1, r4
 802d578:	4628      	mov	r0, r5
 802d57a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802d57e:	f7ff bc5b 	b.w	802ce38 <_free_r>
	...

0802d584 <_reclaim_reent>:
 802d584:	4b2c      	ldr	r3, [pc, #176]	; (802d638 <_reclaim_reent+0xb4>)
 802d586:	681b      	ldr	r3, [r3, #0]
 802d588:	4283      	cmp	r3, r0
 802d58a:	b570      	push	{r4, r5, r6, lr}
 802d58c:	4604      	mov	r4, r0
 802d58e:	d051      	beq.n	802d634 <_reclaim_reent+0xb0>
 802d590:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802d592:	b143      	cbz	r3, 802d5a6 <_reclaim_reent+0x22>
 802d594:	68db      	ldr	r3, [r3, #12]
 802d596:	2b00      	cmp	r3, #0
 802d598:	d14a      	bne.n	802d630 <_reclaim_reent+0xac>
 802d59a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802d59c:	6819      	ldr	r1, [r3, #0]
 802d59e:	b111      	cbz	r1, 802d5a6 <_reclaim_reent+0x22>
 802d5a0:	4620      	mov	r0, r4
 802d5a2:	f7ff fc49 	bl	802ce38 <_free_r>
 802d5a6:	6961      	ldr	r1, [r4, #20]
 802d5a8:	b111      	cbz	r1, 802d5b0 <_reclaim_reent+0x2c>
 802d5aa:	4620      	mov	r0, r4
 802d5ac:	f7ff fc44 	bl	802ce38 <_free_r>
 802d5b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802d5b2:	b111      	cbz	r1, 802d5ba <_reclaim_reent+0x36>
 802d5b4:	4620      	mov	r0, r4
 802d5b6:	f7ff fc3f 	bl	802ce38 <_free_r>
 802d5ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802d5bc:	b111      	cbz	r1, 802d5c4 <_reclaim_reent+0x40>
 802d5be:	4620      	mov	r0, r4
 802d5c0:	f7ff fc3a 	bl	802ce38 <_free_r>
 802d5c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802d5c6:	b111      	cbz	r1, 802d5ce <_reclaim_reent+0x4a>
 802d5c8:	4620      	mov	r0, r4
 802d5ca:	f7ff fc35 	bl	802ce38 <_free_r>
 802d5ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802d5d0:	b111      	cbz	r1, 802d5d8 <_reclaim_reent+0x54>
 802d5d2:	4620      	mov	r0, r4
 802d5d4:	f7ff fc30 	bl	802ce38 <_free_r>
 802d5d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802d5da:	b111      	cbz	r1, 802d5e2 <_reclaim_reent+0x5e>
 802d5dc:	4620      	mov	r0, r4
 802d5de:	f7ff fc2b 	bl	802ce38 <_free_r>
 802d5e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802d5e4:	b111      	cbz	r1, 802d5ec <_reclaim_reent+0x68>
 802d5e6:	4620      	mov	r0, r4
 802d5e8:	f7ff fc26 	bl	802ce38 <_free_r>
 802d5ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d5ee:	b111      	cbz	r1, 802d5f6 <_reclaim_reent+0x72>
 802d5f0:	4620      	mov	r0, r4
 802d5f2:	f7ff fc21 	bl	802ce38 <_free_r>
 802d5f6:	69a3      	ldr	r3, [r4, #24]
 802d5f8:	b1e3      	cbz	r3, 802d634 <_reclaim_reent+0xb0>
 802d5fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802d5fc:	4620      	mov	r0, r4
 802d5fe:	4798      	blx	r3
 802d600:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802d602:	b1b9      	cbz	r1, 802d634 <_reclaim_reent+0xb0>
 802d604:	4620      	mov	r0, r4
 802d606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802d60a:	f7ff bfad 	b.w	802d568 <cleanup_glue>
 802d60e:	5949      	ldr	r1, [r1, r5]
 802d610:	b941      	cbnz	r1, 802d624 <_reclaim_reent+0xa0>
 802d612:	3504      	adds	r5, #4
 802d614:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802d616:	2d80      	cmp	r5, #128	; 0x80
 802d618:	68d9      	ldr	r1, [r3, #12]
 802d61a:	d1f8      	bne.n	802d60e <_reclaim_reent+0x8a>
 802d61c:	4620      	mov	r0, r4
 802d61e:	f7ff fc0b 	bl	802ce38 <_free_r>
 802d622:	e7ba      	b.n	802d59a <_reclaim_reent+0x16>
 802d624:	680e      	ldr	r6, [r1, #0]
 802d626:	4620      	mov	r0, r4
 802d628:	f7ff fc06 	bl	802ce38 <_free_r>
 802d62c:	4631      	mov	r1, r6
 802d62e:	e7ef      	b.n	802d610 <_reclaim_reent+0x8c>
 802d630:	2500      	movs	r5, #0
 802d632:	e7ef      	b.n	802d614 <_reclaim_reent+0x90>
 802d634:	bd70      	pop	{r4, r5, r6, pc}
 802d636:	bf00      	nop
 802d638:	20000094 	.word	0x20000094

0802d63c <lflush>:
 802d63c:	8983      	ldrh	r3, [r0, #12]
 802d63e:	f003 0309 	and.w	r3, r3, #9
 802d642:	2b09      	cmp	r3, #9
 802d644:	d101      	bne.n	802d64a <lflush+0xe>
 802d646:	f000 bb4b 	b.w	802dce0 <fflush>
 802d64a:	2000      	movs	r0, #0
 802d64c:	4770      	bx	lr
	...

0802d650 <__srefill_r>:
 802d650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d652:	460c      	mov	r4, r1
 802d654:	4605      	mov	r5, r0
 802d656:	b118      	cbz	r0, 802d660 <__srefill_r+0x10>
 802d658:	6983      	ldr	r3, [r0, #24]
 802d65a:	b90b      	cbnz	r3, 802d660 <__srefill_r+0x10>
 802d65c:	f7ff f8d4 	bl	802c808 <__sinit>
 802d660:	4b3b      	ldr	r3, [pc, #236]	; (802d750 <__srefill_r+0x100>)
 802d662:	429c      	cmp	r4, r3
 802d664:	d10a      	bne.n	802d67c <__srefill_r+0x2c>
 802d666:	686c      	ldr	r4, [r5, #4]
 802d668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d66c:	2300      	movs	r3, #0
 802d66e:	6063      	str	r3, [r4, #4]
 802d670:	89a3      	ldrh	r3, [r4, #12]
 802d672:	069e      	lsls	r6, r3, #26
 802d674:	d50c      	bpl.n	802d690 <__srefill_r+0x40>
 802d676:	f04f 30ff 	mov.w	r0, #4294967295
 802d67a:	e066      	b.n	802d74a <__srefill_r+0xfa>
 802d67c:	4b35      	ldr	r3, [pc, #212]	; (802d754 <__srefill_r+0x104>)
 802d67e:	429c      	cmp	r4, r3
 802d680:	d101      	bne.n	802d686 <__srefill_r+0x36>
 802d682:	68ac      	ldr	r4, [r5, #8]
 802d684:	e7f0      	b.n	802d668 <__srefill_r+0x18>
 802d686:	4b34      	ldr	r3, [pc, #208]	; (802d758 <__srefill_r+0x108>)
 802d688:	429c      	cmp	r4, r3
 802d68a:	bf08      	it	eq
 802d68c:	68ec      	ldreq	r4, [r5, #12]
 802d68e:	e7eb      	b.n	802d668 <__srefill_r+0x18>
 802d690:	0758      	lsls	r0, r3, #29
 802d692:	d448      	bmi.n	802d726 <__srefill_r+0xd6>
 802d694:	06d9      	lsls	r1, r3, #27
 802d696:	d405      	bmi.n	802d6a4 <__srefill_r+0x54>
 802d698:	2309      	movs	r3, #9
 802d69a:	602b      	str	r3, [r5, #0]
 802d69c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802d6a0:	81a3      	strh	r3, [r4, #12]
 802d6a2:	e7e8      	b.n	802d676 <__srefill_r+0x26>
 802d6a4:	071a      	lsls	r2, r3, #28
 802d6a6:	d50b      	bpl.n	802d6c0 <__srefill_r+0x70>
 802d6a8:	4621      	mov	r1, r4
 802d6aa:	4628      	mov	r0, r5
 802d6ac:	f000 fadc 	bl	802dc68 <_fflush_r>
 802d6b0:	2800      	cmp	r0, #0
 802d6b2:	d1e0      	bne.n	802d676 <__srefill_r+0x26>
 802d6b4:	89a3      	ldrh	r3, [r4, #12]
 802d6b6:	60a0      	str	r0, [r4, #8]
 802d6b8:	f023 0308 	bic.w	r3, r3, #8
 802d6bc:	81a3      	strh	r3, [r4, #12]
 802d6be:	61a0      	str	r0, [r4, #24]
 802d6c0:	89a3      	ldrh	r3, [r4, #12]
 802d6c2:	f043 0304 	orr.w	r3, r3, #4
 802d6c6:	81a3      	strh	r3, [r4, #12]
 802d6c8:	6923      	ldr	r3, [r4, #16]
 802d6ca:	b91b      	cbnz	r3, 802d6d4 <__srefill_r+0x84>
 802d6cc:	4621      	mov	r1, r4
 802d6ce:	4628      	mov	r0, r5
 802d6d0:	f7ff fb4c 	bl	802cd6c <__smakebuf_r>
 802d6d4:	89a6      	ldrh	r6, [r4, #12]
 802d6d6:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 802d6da:	07b3      	lsls	r3, r6, #30
 802d6dc:	d00f      	beq.n	802d6fe <__srefill_r+0xae>
 802d6de:	2301      	movs	r3, #1
 802d6e0:	81a3      	strh	r3, [r4, #12]
 802d6e2:	4b1e      	ldr	r3, [pc, #120]	; (802d75c <__srefill_r+0x10c>)
 802d6e4:	491e      	ldr	r1, [pc, #120]	; (802d760 <__srefill_r+0x110>)
 802d6e6:	6818      	ldr	r0, [r3, #0]
 802d6e8:	f006 0609 	and.w	r6, r6, #9
 802d6ec:	f7ff fab6 	bl	802cc5c <_fwalk>
 802d6f0:	2e09      	cmp	r6, #9
 802d6f2:	81a7      	strh	r7, [r4, #12]
 802d6f4:	d103      	bne.n	802d6fe <__srefill_r+0xae>
 802d6f6:	4621      	mov	r1, r4
 802d6f8:	4628      	mov	r0, r5
 802d6fa:	f000 fa2f 	bl	802db5c <__sflush_r>
 802d6fe:	6922      	ldr	r2, [r4, #16]
 802d700:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802d702:	6963      	ldr	r3, [r4, #20]
 802d704:	6a21      	ldr	r1, [r4, #32]
 802d706:	6022      	str	r2, [r4, #0]
 802d708:	4628      	mov	r0, r5
 802d70a:	47b0      	blx	r6
 802d70c:	2800      	cmp	r0, #0
 802d70e:	6060      	str	r0, [r4, #4]
 802d710:	dc1c      	bgt.n	802d74c <__srefill_r+0xfc>
 802d712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d716:	bf17      	itett	ne
 802d718:	2200      	movne	r2, #0
 802d71a:	f043 0320 	orreq.w	r3, r3, #32
 802d71e:	6062      	strne	r2, [r4, #4]
 802d720:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 802d724:	e7bc      	b.n	802d6a0 <__srefill_r+0x50>
 802d726:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d728:	2900      	cmp	r1, #0
 802d72a:	d0cd      	beq.n	802d6c8 <__srefill_r+0x78>
 802d72c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d730:	4299      	cmp	r1, r3
 802d732:	d002      	beq.n	802d73a <__srefill_r+0xea>
 802d734:	4628      	mov	r0, r5
 802d736:	f7ff fb7f 	bl	802ce38 <_free_r>
 802d73a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802d73c:	6063      	str	r3, [r4, #4]
 802d73e:	2000      	movs	r0, #0
 802d740:	6360      	str	r0, [r4, #52]	; 0x34
 802d742:	2b00      	cmp	r3, #0
 802d744:	d0c0      	beq.n	802d6c8 <__srefill_r+0x78>
 802d746:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802d748:	6023      	str	r3, [r4, #0]
 802d74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d74c:	2000      	movs	r0, #0
 802d74e:	e7fc      	b.n	802d74a <__srefill_r+0xfa>
 802d750:	08032b54 	.word	0x08032b54
 802d754:	08032b74 	.word	0x08032b74
 802d758:	08032b34 	.word	0x08032b34
 802d75c:	08032b94 	.word	0x08032b94
 802d760:	0802d63d 	.word	0x0802d63d

0802d764 <_sbrk_r>:
 802d764:	b538      	push	{r3, r4, r5, lr}
 802d766:	4d06      	ldr	r5, [pc, #24]	; (802d780 <_sbrk_r+0x1c>)
 802d768:	2300      	movs	r3, #0
 802d76a:	4604      	mov	r4, r0
 802d76c:	4608      	mov	r0, r1
 802d76e:	602b      	str	r3, [r5, #0]
 802d770:	f7d4 fb9e 	bl	8001eb0 <_sbrk>
 802d774:	1c43      	adds	r3, r0, #1
 802d776:	d102      	bne.n	802d77e <_sbrk_r+0x1a>
 802d778:	682b      	ldr	r3, [r5, #0]
 802d77a:	b103      	cbz	r3, 802d77e <_sbrk_r+0x1a>
 802d77c:	6023      	str	r3, [r4, #0]
 802d77e:	bd38      	pop	{r3, r4, r5, pc}
 802d780:	20009914 	.word	0x20009914

0802d784 <_raise_r>:
 802d784:	291f      	cmp	r1, #31
 802d786:	b538      	push	{r3, r4, r5, lr}
 802d788:	4604      	mov	r4, r0
 802d78a:	460d      	mov	r5, r1
 802d78c:	d904      	bls.n	802d798 <_raise_r+0x14>
 802d78e:	2316      	movs	r3, #22
 802d790:	6003      	str	r3, [r0, #0]
 802d792:	f04f 30ff 	mov.w	r0, #4294967295
 802d796:	bd38      	pop	{r3, r4, r5, pc}
 802d798:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802d79a:	b112      	cbz	r2, 802d7a2 <_raise_r+0x1e>
 802d79c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802d7a0:	b94b      	cbnz	r3, 802d7b6 <_raise_r+0x32>
 802d7a2:	4620      	mov	r0, r4
 802d7a4:	f000 f830 	bl	802d808 <_getpid_r>
 802d7a8:	462a      	mov	r2, r5
 802d7aa:	4601      	mov	r1, r0
 802d7ac:	4620      	mov	r0, r4
 802d7ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802d7b2:	f000 b817 	b.w	802d7e4 <_kill_r>
 802d7b6:	2b01      	cmp	r3, #1
 802d7b8:	d00a      	beq.n	802d7d0 <_raise_r+0x4c>
 802d7ba:	1c59      	adds	r1, r3, #1
 802d7bc:	d103      	bne.n	802d7c6 <_raise_r+0x42>
 802d7be:	2316      	movs	r3, #22
 802d7c0:	6003      	str	r3, [r0, #0]
 802d7c2:	2001      	movs	r0, #1
 802d7c4:	e7e7      	b.n	802d796 <_raise_r+0x12>
 802d7c6:	2400      	movs	r4, #0
 802d7c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802d7cc:	4628      	mov	r0, r5
 802d7ce:	4798      	blx	r3
 802d7d0:	2000      	movs	r0, #0
 802d7d2:	e7e0      	b.n	802d796 <_raise_r+0x12>

0802d7d4 <raise>:
 802d7d4:	4b02      	ldr	r3, [pc, #8]	; (802d7e0 <raise+0xc>)
 802d7d6:	4601      	mov	r1, r0
 802d7d8:	6818      	ldr	r0, [r3, #0]
 802d7da:	f7ff bfd3 	b.w	802d784 <_raise_r>
 802d7de:	bf00      	nop
 802d7e0:	20000094 	.word	0x20000094

0802d7e4 <_kill_r>:
 802d7e4:	b538      	push	{r3, r4, r5, lr}
 802d7e6:	4d07      	ldr	r5, [pc, #28]	; (802d804 <_kill_r+0x20>)
 802d7e8:	2300      	movs	r3, #0
 802d7ea:	4604      	mov	r4, r0
 802d7ec:	4608      	mov	r0, r1
 802d7ee:	4611      	mov	r1, r2
 802d7f0:	602b      	str	r3, [r5, #0]
 802d7f2:	f7d4 fad5 	bl	8001da0 <_kill>
 802d7f6:	1c43      	adds	r3, r0, #1
 802d7f8:	d102      	bne.n	802d800 <_kill_r+0x1c>
 802d7fa:	682b      	ldr	r3, [r5, #0]
 802d7fc:	b103      	cbz	r3, 802d800 <_kill_r+0x1c>
 802d7fe:	6023      	str	r3, [r4, #0]
 802d800:	bd38      	pop	{r3, r4, r5, pc}
 802d802:	bf00      	nop
 802d804:	20009914 	.word	0x20009914

0802d808 <_getpid_r>:
 802d808:	f7d4 bac2 	b.w	8001d90 <_getpid>

0802d80c <siprintf>:
 802d80c:	b40e      	push	{r1, r2, r3}
 802d80e:	b500      	push	{lr}
 802d810:	b09c      	sub	sp, #112	; 0x70
 802d812:	ab1d      	add	r3, sp, #116	; 0x74
 802d814:	9002      	str	r0, [sp, #8]
 802d816:	9006      	str	r0, [sp, #24]
 802d818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802d81c:	4809      	ldr	r0, [pc, #36]	; (802d844 <siprintf+0x38>)
 802d81e:	9107      	str	r1, [sp, #28]
 802d820:	9104      	str	r1, [sp, #16]
 802d822:	4909      	ldr	r1, [pc, #36]	; (802d848 <siprintf+0x3c>)
 802d824:	f853 2b04 	ldr.w	r2, [r3], #4
 802d828:	9105      	str	r1, [sp, #20]
 802d82a:	6800      	ldr	r0, [r0, #0]
 802d82c:	9301      	str	r3, [sp, #4]
 802d82e:	a902      	add	r1, sp, #8
 802d830:	f000 fb44 	bl	802debc <_svfiprintf_r>
 802d834:	9b02      	ldr	r3, [sp, #8]
 802d836:	2200      	movs	r2, #0
 802d838:	701a      	strb	r2, [r3, #0]
 802d83a:	b01c      	add	sp, #112	; 0x70
 802d83c:	f85d eb04 	ldr.w	lr, [sp], #4
 802d840:	b003      	add	sp, #12
 802d842:	4770      	bx	lr
 802d844:	20000094 	.word	0x20000094
 802d848:	ffff0208 	.word	0xffff0208

0802d84c <__sread>:
 802d84c:	b510      	push	{r4, lr}
 802d84e:	460c      	mov	r4, r1
 802d850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d854:	f000 fc32 	bl	802e0bc <_read_r>
 802d858:	2800      	cmp	r0, #0
 802d85a:	bfab      	itete	ge
 802d85c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802d85e:	89a3      	ldrhlt	r3, [r4, #12]
 802d860:	181b      	addge	r3, r3, r0
 802d862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802d866:	bfac      	ite	ge
 802d868:	6563      	strge	r3, [r4, #84]	; 0x54
 802d86a:	81a3      	strhlt	r3, [r4, #12]
 802d86c:	bd10      	pop	{r4, pc}

0802d86e <__swrite>:
 802d86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d872:	461f      	mov	r7, r3
 802d874:	898b      	ldrh	r3, [r1, #12]
 802d876:	05db      	lsls	r3, r3, #23
 802d878:	4605      	mov	r5, r0
 802d87a:	460c      	mov	r4, r1
 802d87c:	4616      	mov	r6, r2
 802d87e:	d505      	bpl.n	802d88c <__swrite+0x1e>
 802d880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d884:	2302      	movs	r3, #2
 802d886:	2200      	movs	r2, #0
 802d888:	f000 fa5e 	bl	802dd48 <_lseek_r>
 802d88c:	89a3      	ldrh	r3, [r4, #12]
 802d88e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802d896:	81a3      	strh	r3, [r4, #12]
 802d898:	4632      	mov	r2, r6
 802d89a:	463b      	mov	r3, r7
 802d89c:	4628      	mov	r0, r5
 802d89e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d8a2:	f000 b869 	b.w	802d978 <_write_r>

0802d8a6 <__sseek>:
 802d8a6:	b510      	push	{r4, lr}
 802d8a8:	460c      	mov	r4, r1
 802d8aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d8ae:	f000 fa4b 	bl	802dd48 <_lseek_r>
 802d8b2:	1c43      	adds	r3, r0, #1
 802d8b4:	89a3      	ldrh	r3, [r4, #12]
 802d8b6:	bf15      	itete	ne
 802d8b8:	6560      	strne	r0, [r4, #84]	; 0x54
 802d8ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802d8be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802d8c2:	81a3      	strheq	r3, [r4, #12]
 802d8c4:	bf18      	it	ne
 802d8c6:	81a3      	strhne	r3, [r4, #12]
 802d8c8:	bd10      	pop	{r4, pc}

0802d8ca <__sclose>:
 802d8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d8ce:	f000 b935 	b.w	802db3c <_close_r>
	...

0802d8d4 <__swbuf_r>:
 802d8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d8d6:	460e      	mov	r6, r1
 802d8d8:	4614      	mov	r4, r2
 802d8da:	4605      	mov	r5, r0
 802d8dc:	b118      	cbz	r0, 802d8e6 <__swbuf_r+0x12>
 802d8de:	6983      	ldr	r3, [r0, #24]
 802d8e0:	b90b      	cbnz	r3, 802d8e6 <__swbuf_r+0x12>
 802d8e2:	f7fe ff91 	bl	802c808 <__sinit>
 802d8e6:	4b21      	ldr	r3, [pc, #132]	; (802d96c <__swbuf_r+0x98>)
 802d8e8:	429c      	cmp	r4, r3
 802d8ea:	d12b      	bne.n	802d944 <__swbuf_r+0x70>
 802d8ec:	686c      	ldr	r4, [r5, #4]
 802d8ee:	69a3      	ldr	r3, [r4, #24]
 802d8f0:	60a3      	str	r3, [r4, #8]
 802d8f2:	89a3      	ldrh	r3, [r4, #12]
 802d8f4:	071a      	lsls	r2, r3, #28
 802d8f6:	d52f      	bpl.n	802d958 <__swbuf_r+0x84>
 802d8f8:	6923      	ldr	r3, [r4, #16]
 802d8fa:	b36b      	cbz	r3, 802d958 <__swbuf_r+0x84>
 802d8fc:	6923      	ldr	r3, [r4, #16]
 802d8fe:	6820      	ldr	r0, [r4, #0]
 802d900:	1ac0      	subs	r0, r0, r3
 802d902:	6963      	ldr	r3, [r4, #20]
 802d904:	b2f6      	uxtb	r6, r6
 802d906:	4283      	cmp	r3, r0
 802d908:	4637      	mov	r7, r6
 802d90a:	dc04      	bgt.n	802d916 <__swbuf_r+0x42>
 802d90c:	4621      	mov	r1, r4
 802d90e:	4628      	mov	r0, r5
 802d910:	f000 f9aa 	bl	802dc68 <_fflush_r>
 802d914:	bb30      	cbnz	r0, 802d964 <__swbuf_r+0x90>
 802d916:	68a3      	ldr	r3, [r4, #8]
 802d918:	3b01      	subs	r3, #1
 802d91a:	60a3      	str	r3, [r4, #8]
 802d91c:	6823      	ldr	r3, [r4, #0]
 802d91e:	1c5a      	adds	r2, r3, #1
 802d920:	6022      	str	r2, [r4, #0]
 802d922:	701e      	strb	r6, [r3, #0]
 802d924:	6963      	ldr	r3, [r4, #20]
 802d926:	3001      	adds	r0, #1
 802d928:	4283      	cmp	r3, r0
 802d92a:	d004      	beq.n	802d936 <__swbuf_r+0x62>
 802d92c:	89a3      	ldrh	r3, [r4, #12]
 802d92e:	07db      	lsls	r3, r3, #31
 802d930:	d506      	bpl.n	802d940 <__swbuf_r+0x6c>
 802d932:	2e0a      	cmp	r6, #10
 802d934:	d104      	bne.n	802d940 <__swbuf_r+0x6c>
 802d936:	4621      	mov	r1, r4
 802d938:	4628      	mov	r0, r5
 802d93a:	f000 f995 	bl	802dc68 <_fflush_r>
 802d93e:	b988      	cbnz	r0, 802d964 <__swbuf_r+0x90>
 802d940:	4638      	mov	r0, r7
 802d942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d944:	4b0a      	ldr	r3, [pc, #40]	; (802d970 <__swbuf_r+0x9c>)
 802d946:	429c      	cmp	r4, r3
 802d948:	d101      	bne.n	802d94e <__swbuf_r+0x7a>
 802d94a:	68ac      	ldr	r4, [r5, #8]
 802d94c:	e7cf      	b.n	802d8ee <__swbuf_r+0x1a>
 802d94e:	4b09      	ldr	r3, [pc, #36]	; (802d974 <__swbuf_r+0xa0>)
 802d950:	429c      	cmp	r4, r3
 802d952:	bf08      	it	eq
 802d954:	68ec      	ldreq	r4, [r5, #12]
 802d956:	e7ca      	b.n	802d8ee <__swbuf_r+0x1a>
 802d958:	4621      	mov	r1, r4
 802d95a:	4628      	mov	r0, r5
 802d95c:	f000 f81e 	bl	802d99c <__swsetup_r>
 802d960:	2800      	cmp	r0, #0
 802d962:	d0cb      	beq.n	802d8fc <__swbuf_r+0x28>
 802d964:	f04f 37ff 	mov.w	r7, #4294967295
 802d968:	e7ea      	b.n	802d940 <__swbuf_r+0x6c>
 802d96a:	bf00      	nop
 802d96c:	08032b54 	.word	0x08032b54
 802d970:	08032b74 	.word	0x08032b74
 802d974:	08032b34 	.word	0x08032b34

0802d978 <_write_r>:
 802d978:	b538      	push	{r3, r4, r5, lr}
 802d97a:	4d07      	ldr	r5, [pc, #28]	; (802d998 <_write_r+0x20>)
 802d97c:	4604      	mov	r4, r0
 802d97e:	4608      	mov	r0, r1
 802d980:	4611      	mov	r1, r2
 802d982:	2200      	movs	r2, #0
 802d984:	602a      	str	r2, [r5, #0]
 802d986:	461a      	mov	r2, r3
 802d988:	f7d4 fa41 	bl	8001e0e <_write>
 802d98c:	1c43      	adds	r3, r0, #1
 802d98e:	d102      	bne.n	802d996 <_write_r+0x1e>
 802d990:	682b      	ldr	r3, [r5, #0]
 802d992:	b103      	cbz	r3, 802d996 <_write_r+0x1e>
 802d994:	6023      	str	r3, [r4, #0]
 802d996:	bd38      	pop	{r3, r4, r5, pc}
 802d998:	20009914 	.word	0x20009914

0802d99c <__swsetup_r>:
 802d99c:	4b32      	ldr	r3, [pc, #200]	; (802da68 <__swsetup_r+0xcc>)
 802d99e:	b570      	push	{r4, r5, r6, lr}
 802d9a0:	681d      	ldr	r5, [r3, #0]
 802d9a2:	4606      	mov	r6, r0
 802d9a4:	460c      	mov	r4, r1
 802d9a6:	b125      	cbz	r5, 802d9b2 <__swsetup_r+0x16>
 802d9a8:	69ab      	ldr	r3, [r5, #24]
 802d9aa:	b913      	cbnz	r3, 802d9b2 <__swsetup_r+0x16>
 802d9ac:	4628      	mov	r0, r5
 802d9ae:	f7fe ff2b 	bl	802c808 <__sinit>
 802d9b2:	4b2e      	ldr	r3, [pc, #184]	; (802da6c <__swsetup_r+0xd0>)
 802d9b4:	429c      	cmp	r4, r3
 802d9b6:	d10f      	bne.n	802d9d8 <__swsetup_r+0x3c>
 802d9b8:	686c      	ldr	r4, [r5, #4]
 802d9ba:	89a3      	ldrh	r3, [r4, #12]
 802d9bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d9c0:	0719      	lsls	r1, r3, #28
 802d9c2:	d42c      	bmi.n	802da1e <__swsetup_r+0x82>
 802d9c4:	06dd      	lsls	r5, r3, #27
 802d9c6:	d411      	bmi.n	802d9ec <__swsetup_r+0x50>
 802d9c8:	2309      	movs	r3, #9
 802d9ca:	6033      	str	r3, [r6, #0]
 802d9cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802d9d0:	81a3      	strh	r3, [r4, #12]
 802d9d2:	f04f 30ff 	mov.w	r0, #4294967295
 802d9d6:	e03e      	b.n	802da56 <__swsetup_r+0xba>
 802d9d8:	4b25      	ldr	r3, [pc, #148]	; (802da70 <__swsetup_r+0xd4>)
 802d9da:	429c      	cmp	r4, r3
 802d9dc:	d101      	bne.n	802d9e2 <__swsetup_r+0x46>
 802d9de:	68ac      	ldr	r4, [r5, #8]
 802d9e0:	e7eb      	b.n	802d9ba <__swsetup_r+0x1e>
 802d9e2:	4b24      	ldr	r3, [pc, #144]	; (802da74 <__swsetup_r+0xd8>)
 802d9e4:	429c      	cmp	r4, r3
 802d9e6:	bf08      	it	eq
 802d9e8:	68ec      	ldreq	r4, [r5, #12]
 802d9ea:	e7e6      	b.n	802d9ba <__swsetup_r+0x1e>
 802d9ec:	0758      	lsls	r0, r3, #29
 802d9ee:	d512      	bpl.n	802da16 <__swsetup_r+0x7a>
 802d9f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d9f2:	b141      	cbz	r1, 802da06 <__swsetup_r+0x6a>
 802d9f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d9f8:	4299      	cmp	r1, r3
 802d9fa:	d002      	beq.n	802da02 <__swsetup_r+0x66>
 802d9fc:	4630      	mov	r0, r6
 802d9fe:	f7ff fa1b 	bl	802ce38 <_free_r>
 802da02:	2300      	movs	r3, #0
 802da04:	6363      	str	r3, [r4, #52]	; 0x34
 802da06:	89a3      	ldrh	r3, [r4, #12]
 802da08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802da0c:	81a3      	strh	r3, [r4, #12]
 802da0e:	2300      	movs	r3, #0
 802da10:	6063      	str	r3, [r4, #4]
 802da12:	6923      	ldr	r3, [r4, #16]
 802da14:	6023      	str	r3, [r4, #0]
 802da16:	89a3      	ldrh	r3, [r4, #12]
 802da18:	f043 0308 	orr.w	r3, r3, #8
 802da1c:	81a3      	strh	r3, [r4, #12]
 802da1e:	6923      	ldr	r3, [r4, #16]
 802da20:	b94b      	cbnz	r3, 802da36 <__swsetup_r+0x9a>
 802da22:	89a3      	ldrh	r3, [r4, #12]
 802da24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802da28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802da2c:	d003      	beq.n	802da36 <__swsetup_r+0x9a>
 802da2e:	4621      	mov	r1, r4
 802da30:	4630      	mov	r0, r6
 802da32:	f7ff f99b 	bl	802cd6c <__smakebuf_r>
 802da36:	89a0      	ldrh	r0, [r4, #12]
 802da38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802da3c:	f010 0301 	ands.w	r3, r0, #1
 802da40:	d00a      	beq.n	802da58 <__swsetup_r+0xbc>
 802da42:	2300      	movs	r3, #0
 802da44:	60a3      	str	r3, [r4, #8]
 802da46:	6963      	ldr	r3, [r4, #20]
 802da48:	425b      	negs	r3, r3
 802da4a:	61a3      	str	r3, [r4, #24]
 802da4c:	6923      	ldr	r3, [r4, #16]
 802da4e:	b943      	cbnz	r3, 802da62 <__swsetup_r+0xc6>
 802da50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802da54:	d1ba      	bne.n	802d9cc <__swsetup_r+0x30>
 802da56:	bd70      	pop	{r4, r5, r6, pc}
 802da58:	0781      	lsls	r1, r0, #30
 802da5a:	bf58      	it	pl
 802da5c:	6963      	ldrpl	r3, [r4, #20]
 802da5e:	60a3      	str	r3, [r4, #8]
 802da60:	e7f4      	b.n	802da4c <__swsetup_r+0xb0>
 802da62:	2000      	movs	r0, #0
 802da64:	e7f7      	b.n	802da56 <__swsetup_r+0xba>
 802da66:	bf00      	nop
 802da68:	20000094 	.word	0x20000094
 802da6c:	08032b54 	.word	0x08032b54
 802da70:	08032b74 	.word	0x08032b74
 802da74:	08032b34 	.word	0x08032b34

0802da78 <__register_exitproc>:
 802da78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802da7c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802db38 <__register_exitproc+0xc0>
 802da80:	4606      	mov	r6, r0
 802da82:	f8d8 0000 	ldr.w	r0, [r8]
 802da86:	461f      	mov	r7, r3
 802da88:	460d      	mov	r5, r1
 802da8a:	4691      	mov	r9, r2
 802da8c:	f7ff f947 	bl	802cd1e <__retarget_lock_acquire_recursive>
 802da90:	4b25      	ldr	r3, [pc, #148]	; (802db28 <__register_exitproc+0xb0>)
 802da92:	681c      	ldr	r4, [r3, #0]
 802da94:	b934      	cbnz	r4, 802daa4 <__register_exitproc+0x2c>
 802da96:	4c25      	ldr	r4, [pc, #148]	; (802db2c <__register_exitproc+0xb4>)
 802da98:	601c      	str	r4, [r3, #0]
 802da9a:	4b25      	ldr	r3, [pc, #148]	; (802db30 <__register_exitproc+0xb8>)
 802da9c:	b113      	cbz	r3, 802daa4 <__register_exitproc+0x2c>
 802da9e:	681b      	ldr	r3, [r3, #0]
 802daa0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802daa4:	6863      	ldr	r3, [r4, #4]
 802daa6:	2b1f      	cmp	r3, #31
 802daa8:	dd07      	ble.n	802daba <__register_exitproc+0x42>
 802daaa:	f8d8 0000 	ldr.w	r0, [r8]
 802daae:	f7ff f938 	bl	802cd22 <__retarget_lock_release_recursive>
 802dab2:	f04f 30ff 	mov.w	r0, #4294967295
 802dab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802daba:	b34e      	cbz	r6, 802db10 <__register_exitproc+0x98>
 802dabc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802dac0:	b988      	cbnz	r0, 802dae6 <__register_exitproc+0x6e>
 802dac2:	4b1c      	ldr	r3, [pc, #112]	; (802db34 <__register_exitproc+0xbc>)
 802dac4:	b923      	cbnz	r3, 802dad0 <__register_exitproc+0x58>
 802dac6:	f8d8 0000 	ldr.w	r0, [r8]
 802daca:	f7ff f929 	bl	802cd20 <__retarget_lock_release>
 802dace:	e7f0      	b.n	802dab2 <__register_exitproc+0x3a>
 802dad0:	f44f 7084 	mov.w	r0, #264	; 0x108
 802dad4:	f7ff f98a 	bl	802cdec <malloc>
 802dad8:	2800      	cmp	r0, #0
 802dada:	d0f4      	beq.n	802dac6 <__register_exitproc+0x4e>
 802dadc:	2300      	movs	r3, #0
 802dade:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802dae2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802dae6:	6863      	ldr	r3, [r4, #4]
 802dae8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802daec:	2201      	movs	r2, #1
 802daee:	409a      	lsls	r2, r3
 802daf0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802daf4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802daf8:	4313      	orrs	r3, r2
 802dafa:	2e02      	cmp	r6, #2
 802dafc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802db00:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802db04:	bf02      	ittt	eq
 802db06:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802db0a:	431a      	orreq	r2, r3
 802db0c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 802db10:	6863      	ldr	r3, [r4, #4]
 802db12:	f8d8 0000 	ldr.w	r0, [r8]
 802db16:	1c5a      	adds	r2, r3, #1
 802db18:	3302      	adds	r3, #2
 802db1a:	6062      	str	r2, [r4, #4]
 802db1c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802db20:	f7ff f8ff 	bl	802cd22 <__retarget_lock_release_recursive>
 802db24:	2000      	movs	r0, #0
 802db26:	e7c6      	b.n	802dab6 <__register_exitproc+0x3e>
 802db28:	20006a88 	.word	0x20006a88
 802db2c:	200069fc 	.word	0x200069fc
 802db30:	08032bcc 	.word	0x08032bcc
 802db34:	0802cded 	.word	0x0802cded
 802db38:	200000f8 	.word	0x200000f8

0802db3c <_close_r>:
 802db3c:	b538      	push	{r3, r4, r5, lr}
 802db3e:	4d06      	ldr	r5, [pc, #24]	; (802db58 <_close_r+0x1c>)
 802db40:	2300      	movs	r3, #0
 802db42:	4604      	mov	r4, r0
 802db44:	4608      	mov	r0, r1
 802db46:	602b      	str	r3, [r5, #0]
 802db48:	f7d4 f97d 	bl	8001e46 <_close>
 802db4c:	1c43      	adds	r3, r0, #1
 802db4e:	d102      	bne.n	802db56 <_close_r+0x1a>
 802db50:	682b      	ldr	r3, [r5, #0]
 802db52:	b103      	cbz	r3, 802db56 <_close_r+0x1a>
 802db54:	6023      	str	r3, [r4, #0]
 802db56:	bd38      	pop	{r3, r4, r5, pc}
 802db58:	20009914 	.word	0x20009914

0802db5c <__sflush_r>:
 802db5c:	898a      	ldrh	r2, [r1, #12]
 802db5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802db62:	4605      	mov	r5, r0
 802db64:	0710      	lsls	r0, r2, #28
 802db66:	460c      	mov	r4, r1
 802db68:	d458      	bmi.n	802dc1c <__sflush_r+0xc0>
 802db6a:	684b      	ldr	r3, [r1, #4]
 802db6c:	2b00      	cmp	r3, #0
 802db6e:	dc05      	bgt.n	802db7c <__sflush_r+0x20>
 802db70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802db72:	2b00      	cmp	r3, #0
 802db74:	dc02      	bgt.n	802db7c <__sflush_r+0x20>
 802db76:	2000      	movs	r0, #0
 802db78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802db7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802db7e:	2e00      	cmp	r6, #0
 802db80:	d0f9      	beq.n	802db76 <__sflush_r+0x1a>
 802db82:	2300      	movs	r3, #0
 802db84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802db88:	682f      	ldr	r7, [r5, #0]
 802db8a:	602b      	str	r3, [r5, #0]
 802db8c:	d032      	beq.n	802dbf4 <__sflush_r+0x98>
 802db8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802db90:	89a3      	ldrh	r3, [r4, #12]
 802db92:	075a      	lsls	r2, r3, #29
 802db94:	d505      	bpl.n	802dba2 <__sflush_r+0x46>
 802db96:	6863      	ldr	r3, [r4, #4]
 802db98:	1ac0      	subs	r0, r0, r3
 802db9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802db9c:	b10b      	cbz	r3, 802dba2 <__sflush_r+0x46>
 802db9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802dba0:	1ac0      	subs	r0, r0, r3
 802dba2:	2300      	movs	r3, #0
 802dba4:	4602      	mov	r2, r0
 802dba6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802dba8:	6a21      	ldr	r1, [r4, #32]
 802dbaa:	4628      	mov	r0, r5
 802dbac:	47b0      	blx	r6
 802dbae:	1c43      	adds	r3, r0, #1
 802dbb0:	89a3      	ldrh	r3, [r4, #12]
 802dbb2:	d106      	bne.n	802dbc2 <__sflush_r+0x66>
 802dbb4:	6829      	ldr	r1, [r5, #0]
 802dbb6:	291d      	cmp	r1, #29
 802dbb8:	d82c      	bhi.n	802dc14 <__sflush_r+0xb8>
 802dbba:	4a2a      	ldr	r2, [pc, #168]	; (802dc64 <__sflush_r+0x108>)
 802dbbc:	40ca      	lsrs	r2, r1
 802dbbe:	07d6      	lsls	r6, r2, #31
 802dbc0:	d528      	bpl.n	802dc14 <__sflush_r+0xb8>
 802dbc2:	2200      	movs	r2, #0
 802dbc4:	6062      	str	r2, [r4, #4]
 802dbc6:	04d9      	lsls	r1, r3, #19
 802dbc8:	6922      	ldr	r2, [r4, #16]
 802dbca:	6022      	str	r2, [r4, #0]
 802dbcc:	d504      	bpl.n	802dbd8 <__sflush_r+0x7c>
 802dbce:	1c42      	adds	r2, r0, #1
 802dbd0:	d101      	bne.n	802dbd6 <__sflush_r+0x7a>
 802dbd2:	682b      	ldr	r3, [r5, #0]
 802dbd4:	b903      	cbnz	r3, 802dbd8 <__sflush_r+0x7c>
 802dbd6:	6560      	str	r0, [r4, #84]	; 0x54
 802dbd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802dbda:	602f      	str	r7, [r5, #0]
 802dbdc:	2900      	cmp	r1, #0
 802dbde:	d0ca      	beq.n	802db76 <__sflush_r+0x1a>
 802dbe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802dbe4:	4299      	cmp	r1, r3
 802dbe6:	d002      	beq.n	802dbee <__sflush_r+0x92>
 802dbe8:	4628      	mov	r0, r5
 802dbea:	f7ff f925 	bl	802ce38 <_free_r>
 802dbee:	2000      	movs	r0, #0
 802dbf0:	6360      	str	r0, [r4, #52]	; 0x34
 802dbf2:	e7c1      	b.n	802db78 <__sflush_r+0x1c>
 802dbf4:	6a21      	ldr	r1, [r4, #32]
 802dbf6:	2301      	movs	r3, #1
 802dbf8:	4628      	mov	r0, r5
 802dbfa:	47b0      	blx	r6
 802dbfc:	1c41      	adds	r1, r0, #1
 802dbfe:	d1c7      	bne.n	802db90 <__sflush_r+0x34>
 802dc00:	682b      	ldr	r3, [r5, #0]
 802dc02:	2b00      	cmp	r3, #0
 802dc04:	d0c4      	beq.n	802db90 <__sflush_r+0x34>
 802dc06:	2b1d      	cmp	r3, #29
 802dc08:	d001      	beq.n	802dc0e <__sflush_r+0xb2>
 802dc0a:	2b16      	cmp	r3, #22
 802dc0c:	d101      	bne.n	802dc12 <__sflush_r+0xb6>
 802dc0e:	602f      	str	r7, [r5, #0]
 802dc10:	e7b1      	b.n	802db76 <__sflush_r+0x1a>
 802dc12:	89a3      	ldrh	r3, [r4, #12]
 802dc14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802dc18:	81a3      	strh	r3, [r4, #12]
 802dc1a:	e7ad      	b.n	802db78 <__sflush_r+0x1c>
 802dc1c:	690f      	ldr	r7, [r1, #16]
 802dc1e:	2f00      	cmp	r7, #0
 802dc20:	d0a9      	beq.n	802db76 <__sflush_r+0x1a>
 802dc22:	0793      	lsls	r3, r2, #30
 802dc24:	680e      	ldr	r6, [r1, #0]
 802dc26:	bf08      	it	eq
 802dc28:	694b      	ldreq	r3, [r1, #20]
 802dc2a:	600f      	str	r7, [r1, #0]
 802dc2c:	bf18      	it	ne
 802dc2e:	2300      	movne	r3, #0
 802dc30:	eba6 0807 	sub.w	r8, r6, r7
 802dc34:	608b      	str	r3, [r1, #8]
 802dc36:	f1b8 0f00 	cmp.w	r8, #0
 802dc3a:	dd9c      	ble.n	802db76 <__sflush_r+0x1a>
 802dc3c:	6a21      	ldr	r1, [r4, #32]
 802dc3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802dc40:	4643      	mov	r3, r8
 802dc42:	463a      	mov	r2, r7
 802dc44:	4628      	mov	r0, r5
 802dc46:	47b0      	blx	r6
 802dc48:	2800      	cmp	r0, #0
 802dc4a:	dc06      	bgt.n	802dc5a <__sflush_r+0xfe>
 802dc4c:	89a3      	ldrh	r3, [r4, #12]
 802dc4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802dc52:	81a3      	strh	r3, [r4, #12]
 802dc54:	f04f 30ff 	mov.w	r0, #4294967295
 802dc58:	e78e      	b.n	802db78 <__sflush_r+0x1c>
 802dc5a:	4407      	add	r7, r0
 802dc5c:	eba8 0800 	sub.w	r8, r8, r0
 802dc60:	e7e9      	b.n	802dc36 <__sflush_r+0xda>
 802dc62:	bf00      	nop
 802dc64:	20400001 	.word	0x20400001

0802dc68 <_fflush_r>:
 802dc68:	b538      	push	{r3, r4, r5, lr}
 802dc6a:	690b      	ldr	r3, [r1, #16]
 802dc6c:	4605      	mov	r5, r0
 802dc6e:	460c      	mov	r4, r1
 802dc70:	b913      	cbnz	r3, 802dc78 <_fflush_r+0x10>
 802dc72:	2500      	movs	r5, #0
 802dc74:	4628      	mov	r0, r5
 802dc76:	bd38      	pop	{r3, r4, r5, pc}
 802dc78:	b118      	cbz	r0, 802dc82 <_fflush_r+0x1a>
 802dc7a:	6983      	ldr	r3, [r0, #24]
 802dc7c:	b90b      	cbnz	r3, 802dc82 <_fflush_r+0x1a>
 802dc7e:	f7fe fdc3 	bl	802c808 <__sinit>
 802dc82:	4b14      	ldr	r3, [pc, #80]	; (802dcd4 <_fflush_r+0x6c>)
 802dc84:	429c      	cmp	r4, r3
 802dc86:	d11b      	bne.n	802dcc0 <_fflush_r+0x58>
 802dc88:	686c      	ldr	r4, [r5, #4]
 802dc8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802dc8e:	2b00      	cmp	r3, #0
 802dc90:	d0ef      	beq.n	802dc72 <_fflush_r+0xa>
 802dc92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802dc94:	07d0      	lsls	r0, r2, #31
 802dc96:	d404      	bmi.n	802dca2 <_fflush_r+0x3a>
 802dc98:	0599      	lsls	r1, r3, #22
 802dc9a:	d402      	bmi.n	802dca2 <_fflush_r+0x3a>
 802dc9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802dc9e:	f7ff f83e 	bl	802cd1e <__retarget_lock_acquire_recursive>
 802dca2:	4628      	mov	r0, r5
 802dca4:	4621      	mov	r1, r4
 802dca6:	f7ff ff59 	bl	802db5c <__sflush_r>
 802dcaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802dcac:	07da      	lsls	r2, r3, #31
 802dcae:	4605      	mov	r5, r0
 802dcb0:	d4e0      	bmi.n	802dc74 <_fflush_r+0xc>
 802dcb2:	89a3      	ldrh	r3, [r4, #12]
 802dcb4:	059b      	lsls	r3, r3, #22
 802dcb6:	d4dd      	bmi.n	802dc74 <_fflush_r+0xc>
 802dcb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802dcba:	f7ff f832 	bl	802cd22 <__retarget_lock_release_recursive>
 802dcbe:	e7d9      	b.n	802dc74 <_fflush_r+0xc>
 802dcc0:	4b05      	ldr	r3, [pc, #20]	; (802dcd8 <_fflush_r+0x70>)
 802dcc2:	429c      	cmp	r4, r3
 802dcc4:	d101      	bne.n	802dcca <_fflush_r+0x62>
 802dcc6:	68ac      	ldr	r4, [r5, #8]
 802dcc8:	e7df      	b.n	802dc8a <_fflush_r+0x22>
 802dcca:	4b04      	ldr	r3, [pc, #16]	; (802dcdc <_fflush_r+0x74>)
 802dccc:	429c      	cmp	r4, r3
 802dcce:	bf08      	it	eq
 802dcd0:	68ec      	ldreq	r4, [r5, #12]
 802dcd2:	e7da      	b.n	802dc8a <_fflush_r+0x22>
 802dcd4:	08032b54 	.word	0x08032b54
 802dcd8:	08032b74 	.word	0x08032b74
 802dcdc:	08032b34 	.word	0x08032b34

0802dce0 <fflush>:
 802dce0:	4601      	mov	r1, r0
 802dce2:	b920      	cbnz	r0, 802dcee <fflush+0xe>
 802dce4:	4b04      	ldr	r3, [pc, #16]	; (802dcf8 <fflush+0x18>)
 802dce6:	4905      	ldr	r1, [pc, #20]	; (802dcfc <fflush+0x1c>)
 802dce8:	6818      	ldr	r0, [r3, #0]
 802dcea:	f7fe bfd4 	b.w	802cc96 <_fwalk_reent>
 802dcee:	4b04      	ldr	r3, [pc, #16]	; (802dd00 <fflush+0x20>)
 802dcf0:	6818      	ldr	r0, [r3, #0]
 802dcf2:	f7ff bfb9 	b.w	802dc68 <_fflush_r>
 802dcf6:	bf00      	nop
 802dcf8:	08032b94 	.word	0x08032b94
 802dcfc:	0802dc69 	.word	0x0802dc69
 802dd00:	20000094 	.word	0x20000094

0802dd04 <_fstat_r>:
 802dd04:	b538      	push	{r3, r4, r5, lr}
 802dd06:	4d07      	ldr	r5, [pc, #28]	; (802dd24 <_fstat_r+0x20>)
 802dd08:	2300      	movs	r3, #0
 802dd0a:	4604      	mov	r4, r0
 802dd0c:	4608      	mov	r0, r1
 802dd0e:	4611      	mov	r1, r2
 802dd10:	602b      	str	r3, [r5, #0]
 802dd12:	f7d4 f8a4 	bl	8001e5e <_fstat>
 802dd16:	1c43      	adds	r3, r0, #1
 802dd18:	d102      	bne.n	802dd20 <_fstat_r+0x1c>
 802dd1a:	682b      	ldr	r3, [r5, #0]
 802dd1c:	b103      	cbz	r3, 802dd20 <_fstat_r+0x1c>
 802dd1e:	6023      	str	r3, [r4, #0]
 802dd20:	bd38      	pop	{r3, r4, r5, pc}
 802dd22:	bf00      	nop
 802dd24:	20009914 	.word	0x20009914

0802dd28 <_isatty_r>:
 802dd28:	b538      	push	{r3, r4, r5, lr}
 802dd2a:	4d06      	ldr	r5, [pc, #24]	; (802dd44 <_isatty_r+0x1c>)
 802dd2c:	2300      	movs	r3, #0
 802dd2e:	4604      	mov	r4, r0
 802dd30:	4608      	mov	r0, r1
 802dd32:	602b      	str	r3, [r5, #0]
 802dd34:	f7d4 f8a3 	bl	8001e7e <_isatty>
 802dd38:	1c43      	adds	r3, r0, #1
 802dd3a:	d102      	bne.n	802dd42 <_isatty_r+0x1a>
 802dd3c:	682b      	ldr	r3, [r5, #0]
 802dd3e:	b103      	cbz	r3, 802dd42 <_isatty_r+0x1a>
 802dd40:	6023      	str	r3, [r4, #0]
 802dd42:	bd38      	pop	{r3, r4, r5, pc}
 802dd44:	20009914 	.word	0x20009914

0802dd48 <_lseek_r>:
 802dd48:	b538      	push	{r3, r4, r5, lr}
 802dd4a:	4d07      	ldr	r5, [pc, #28]	; (802dd68 <_lseek_r+0x20>)
 802dd4c:	4604      	mov	r4, r0
 802dd4e:	4608      	mov	r0, r1
 802dd50:	4611      	mov	r1, r2
 802dd52:	2200      	movs	r2, #0
 802dd54:	602a      	str	r2, [r5, #0]
 802dd56:	461a      	mov	r2, r3
 802dd58:	f7d4 f89c 	bl	8001e94 <_lseek>
 802dd5c:	1c43      	adds	r3, r0, #1
 802dd5e:	d102      	bne.n	802dd66 <_lseek_r+0x1e>
 802dd60:	682b      	ldr	r3, [r5, #0]
 802dd62:	b103      	cbz	r3, 802dd66 <_lseek_r+0x1e>
 802dd64:	6023      	str	r3, [r4, #0]
 802dd66:	bd38      	pop	{r3, r4, r5, pc}
 802dd68:	20009914 	.word	0x20009914

0802dd6c <memmove>:
 802dd6c:	4288      	cmp	r0, r1
 802dd6e:	b510      	push	{r4, lr}
 802dd70:	eb01 0402 	add.w	r4, r1, r2
 802dd74:	d902      	bls.n	802dd7c <memmove+0x10>
 802dd76:	4284      	cmp	r4, r0
 802dd78:	4623      	mov	r3, r4
 802dd7a:	d807      	bhi.n	802dd8c <memmove+0x20>
 802dd7c:	1e43      	subs	r3, r0, #1
 802dd7e:	42a1      	cmp	r1, r4
 802dd80:	d008      	beq.n	802dd94 <memmove+0x28>
 802dd82:	f811 2b01 	ldrb.w	r2, [r1], #1
 802dd86:	f803 2f01 	strb.w	r2, [r3, #1]!
 802dd8a:	e7f8      	b.n	802dd7e <memmove+0x12>
 802dd8c:	4402      	add	r2, r0
 802dd8e:	4601      	mov	r1, r0
 802dd90:	428a      	cmp	r2, r1
 802dd92:	d100      	bne.n	802dd96 <memmove+0x2a>
 802dd94:	bd10      	pop	{r4, pc}
 802dd96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802dd9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802dd9e:	e7f7      	b.n	802dd90 <memmove+0x24>

0802dda0 <__malloc_lock>:
 802dda0:	4801      	ldr	r0, [pc, #4]	; (802dda8 <__malloc_lock+0x8>)
 802dda2:	f7fe bfbc 	b.w	802cd1e <__retarget_lock_acquire_recursive>
 802dda6:	bf00      	nop
 802dda8:	2000990c 	.word	0x2000990c

0802ddac <__malloc_unlock>:
 802ddac:	4801      	ldr	r0, [pc, #4]	; (802ddb4 <__malloc_unlock+0x8>)
 802ddae:	f7fe bfb8 	b.w	802cd22 <__retarget_lock_release_recursive>
 802ddb2:	bf00      	nop
 802ddb4:	2000990c 	.word	0x2000990c

0802ddb8 <_realloc_r>:
 802ddb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ddba:	4607      	mov	r7, r0
 802ddbc:	4614      	mov	r4, r2
 802ddbe:	460e      	mov	r6, r1
 802ddc0:	b921      	cbnz	r1, 802ddcc <_realloc_r+0x14>
 802ddc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802ddc6:	4611      	mov	r1, r2
 802ddc8:	f7ff b886 	b.w	802ced8 <_malloc_r>
 802ddcc:	b922      	cbnz	r2, 802ddd8 <_realloc_r+0x20>
 802ddce:	f7ff f833 	bl	802ce38 <_free_r>
 802ddd2:	4625      	mov	r5, r4
 802ddd4:	4628      	mov	r0, r5
 802ddd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ddd8:	f000 f982 	bl	802e0e0 <_malloc_usable_size_r>
 802dddc:	42a0      	cmp	r0, r4
 802ddde:	d20f      	bcs.n	802de00 <_realloc_r+0x48>
 802dde0:	4621      	mov	r1, r4
 802dde2:	4638      	mov	r0, r7
 802dde4:	f7ff f878 	bl	802ced8 <_malloc_r>
 802dde8:	4605      	mov	r5, r0
 802ddea:	2800      	cmp	r0, #0
 802ddec:	d0f2      	beq.n	802ddd4 <_realloc_r+0x1c>
 802ddee:	4631      	mov	r1, r6
 802ddf0:	4622      	mov	r2, r4
 802ddf2:	f7ff f80b 	bl	802ce0c <memcpy>
 802ddf6:	4631      	mov	r1, r6
 802ddf8:	4638      	mov	r0, r7
 802ddfa:	f7ff f81d 	bl	802ce38 <_free_r>
 802ddfe:	e7e9      	b.n	802ddd4 <_realloc_r+0x1c>
 802de00:	4635      	mov	r5, r6
 802de02:	e7e7      	b.n	802ddd4 <_realloc_r+0x1c>

0802de04 <__ssputs_r>:
 802de04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802de08:	688e      	ldr	r6, [r1, #8]
 802de0a:	429e      	cmp	r6, r3
 802de0c:	4682      	mov	sl, r0
 802de0e:	460c      	mov	r4, r1
 802de10:	4690      	mov	r8, r2
 802de12:	461f      	mov	r7, r3
 802de14:	d838      	bhi.n	802de88 <__ssputs_r+0x84>
 802de16:	898a      	ldrh	r2, [r1, #12]
 802de18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802de1c:	d032      	beq.n	802de84 <__ssputs_r+0x80>
 802de1e:	6825      	ldr	r5, [r4, #0]
 802de20:	6909      	ldr	r1, [r1, #16]
 802de22:	eba5 0901 	sub.w	r9, r5, r1
 802de26:	6965      	ldr	r5, [r4, #20]
 802de28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802de2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802de30:	3301      	adds	r3, #1
 802de32:	444b      	add	r3, r9
 802de34:	106d      	asrs	r5, r5, #1
 802de36:	429d      	cmp	r5, r3
 802de38:	bf38      	it	cc
 802de3a:	461d      	movcc	r5, r3
 802de3c:	0553      	lsls	r3, r2, #21
 802de3e:	d531      	bpl.n	802dea4 <__ssputs_r+0xa0>
 802de40:	4629      	mov	r1, r5
 802de42:	f7ff f849 	bl	802ced8 <_malloc_r>
 802de46:	4606      	mov	r6, r0
 802de48:	b950      	cbnz	r0, 802de60 <__ssputs_r+0x5c>
 802de4a:	230c      	movs	r3, #12
 802de4c:	f8ca 3000 	str.w	r3, [sl]
 802de50:	89a3      	ldrh	r3, [r4, #12]
 802de52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802de56:	81a3      	strh	r3, [r4, #12]
 802de58:	f04f 30ff 	mov.w	r0, #4294967295
 802de5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802de60:	6921      	ldr	r1, [r4, #16]
 802de62:	464a      	mov	r2, r9
 802de64:	f7fe ffd2 	bl	802ce0c <memcpy>
 802de68:	89a3      	ldrh	r3, [r4, #12]
 802de6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802de6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802de72:	81a3      	strh	r3, [r4, #12]
 802de74:	6126      	str	r6, [r4, #16]
 802de76:	6165      	str	r5, [r4, #20]
 802de78:	444e      	add	r6, r9
 802de7a:	eba5 0509 	sub.w	r5, r5, r9
 802de7e:	6026      	str	r6, [r4, #0]
 802de80:	60a5      	str	r5, [r4, #8]
 802de82:	463e      	mov	r6, r7
 802de84:	42be      	cmp	r6, r7
 802de86:	d900      	bls.n	802de8a <__ssputs_r+0x86>
 802de88:	463e      	mov	r6, r7
 802de8a:	4632      	mov	r2, r6
 802de8c:	6820      	ldr	r0, [r4, #0]
 802de8e:	4641      	mov	r1, r8
 802de90:	f7ff ff6c 	bl	802dd6c <memmove>
 802de94:	68a3      	ldr	r3, [r4, #8]
 802de96:	6822      	ldr	r2, [r4, #0]
 802de98:	1b9b      	subs	r3, r3, r6
 802de9a:	4432      	add	r2, r6
 802de9c:	60a3      	str	r3, [r4, #8]
 802de9e:	6022      	str	r2, [r4, #0]
 802dea0:	2000      	movs	r0, #0
 802dea2:	e7db      	b.n	802de5c <__ssputs_r+0x58>
 802dea4:	462a      	mov	r2, r5
 802dea6:	f7ff ff87 	bl	802ddb8 <_realloc_r>
 802deaa:	4606      	mov	r6, r0
 802deac:	2800      	cmp	r0, #0
 802deae:	d1e1      	bne.n	802de74 <__ssputs_r+0x70>
 802deb0:	6921      	ldr	r1, [r4, #16]
 802deb2:	4650      	mov	r0, sl
 802deb4:	f7fe ffc0 	bl	802ce38 <_free_r>
 802deb8:	e7c7      	b.n	802de4a <__ssputs_r+0x46>
	...

0802debc <_svfiprintf_r>:
 802debc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dec0:	4698      	mov	r8, r3
 802dec2:	898b      	ldrh	r3, [r1, #12]
 802dec4:	061b      	lsls	r3, r3, #24
 802dec6:	b09d      	sub	sp, #116	; 0x74
 802dec8:	4607      	mov	r7, r0
 802deca:	460d      	mov	r5, r1
 802decc:	4614      	mov	r4, r2
 802dece:	d50e      	bpl.n	802deee <_svfiprintf_r+0x32>
 802ded0:	690b      	ldr	r3, [r1, #16]
 802ded2:	b963      	cbnz	r3, 802deee <_svfiprintf_r+0x32>
 802ded4:	2140      	movs	r1, #64	; 0x40
 802ded6:	f7fe ffff 	bl	802ced8 <_malloc_r>
 802deda:	6028      	str	r0, [r5, #0]
 802dedc:	6128      	str	r0, [r5, #16]
 802dede:	b920      	cbnz	r0, 802deea <_svfiprintf_r+0x2e>
 802dee0:	230c      	movs	r3, #12
 802dee2:	603b      	str	r3, [r7, #0]
 802dee4:	f04f 30ff 	mov.w	r0, #4294967295
 802dee8:	e0d1      	b.n	802e08e <_svfiprintf_r+0x1d2>
 802deea:	2340      	movs	r3, #64	; 0x40
 802deec:	616b      	str	r3, [r5, #20]
 802deee:	2300      	movs	r3, #0
 802def0:	9309      	str	r3, [sp, #36]	; 0x24
 802def2:	2320      	movs	r3, #32
 802def4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802def8:	f8cd 800c 	str.w	r8, [sp, #12]
 802defc:	2330      	movs	r3, #48	; 0x30
 802defe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802e0a8 <_svfiprintf_r+0x1ec>
 802df02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802df06:	f04f 0901 	mov.w	r9, #1
 802df0a:	4623      	mov	r3, r4
 802df0c:	469a      	mov	sl, r3
 802df0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 802df12:	b10a      	cbz	r2, 802df18 <_svfiprintf_r+0x5c>
 802df14:	2a25      	cmp	r2, #37	; 0x25
 802df16:	d1f9      	bne.n	802df0c <_svfiprintf_r+0x50>
 802df18:	ebba 0b04 	subs.w	fp, sl, r4
 802df1c:	d00b      	beq.n	802df36 <_svfiprintf_r+0x7a>
 802df1e:	465b      	mov	r3, fp
 802df20:	4622      	mov	r2, r4
 802df22:	4629      	mov	r1, r5
 802df24:	4638      	mov	r0, r7
 802df26:	f7ff ff6d 	bl	802de04 <__ssputs_r>
 802df2a:	3001      	adds	r0, #1
 802df2c:	f000 80aa 	beq.w	802e084 <_svfiprintf_r+0x1c8>
 802df30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802df32:	445a      	add	r2, fp
 802df34:	9209      	str	r2, [sp, #36]	; 0x24
 802df36:	f89a 3000 	ldrb.w	r3, [sl]
 802df3a:	2b00      	cmp	r3, #0
 802df3c:	f000 80a2 	beq.w	802e084 <_svfiprintf_r+0x1c8>
 802df40:	2300      	movs	r3, #0
 802df42:	f04f 32ff 	mov.w	r2, #4294967295
 802df46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802df4a:	f10a 0a01 	add.w	sl, sl, #1
 802df4e:	9304      	str	r3, [sp, #16]
 802df50:	9307      	str	r3, [sp, #28]
 802df52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802df56:	931a      	str	r3, [sp, #104]	; 0x68
 802df58:	4654      	mov	r4, sl
 802df5a:	2205      	movs	r2, #5
 802df5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802df60:	4851      	ldr	r0, [pc, #324]	; (802e0a8 <_svfiprintf_r+0x1ec>)
 802df62:	f7d2 f945 	bl	80001f0 <memchr>
 802df66:	9a04      	ldr	r2, [sp, #16]
 802df68:	b9d8      	cbnz	r0, 802dfa2 <_svfiprintf_r+0xe6>
 802df6a:	06d0      	lsls	r0, r2, #27
 802df6c:	bf44      	itt	mi
 802df6e:	2320      	movmi	r3, #32
 802df70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802df74:	0711      	lsls	r1, r2, #28
 802df76:	bf44      	itt	mi
 802df78:	232b      	movmi	r3, #43	; 0x2b
 802df7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802df7e:	f89a 3000 	ldrb.w	r3, [sl]
 802df82:	2b2a      	cmp	r3, #42	; 0x2a
 802df84:	d015      	beq.n	802dfb2 <_svfiprintf_r+0xf6>
 802df86:	9a07      	ldr	r2, [sp, #28]
 802df88:	4654      	mov	r4, sl
 802df8a:	2000      	movs	r0, #0
 802df8c:	f04f 0c0a 	mov.w	ip, #10
 802df90:	4621      	mov	r1, r4
 802df92:	f811 3b01 	ldrb.w	r3, [r1], #1
 802df96:	3b30      	subs	r3, #48	; 0x30
 802df98:	2b09      	cmp	r3, #9
 802df9a:	d94e      	bls.n	802e03a <_svfiprintf_r+0x17e>
 802df9c:	b1b0      	cbz	r0, 802dfcc <_svfiprintf_r+0x110>
 802df9e:	9207      	str	r2, [sp, #28]
 802dfa0:	e014      	b.n	802dfcc <_svfiprintf_r+0x110>
 802dfa2:	eba0 0308 	sub.w	r3, r0, r8
 802dfa6:	fa09 f303 	lsl.w	r3, r9, r3
 802dfaa:	4313      	orrs	r3, r2
 802dfac:	9304      	str	r3, [sp, #16]
 802dfae:	46a2      	mov	sl, r4
 802dfb0:	e7d2      	b.n	802df58 <_svfiprintf_r+0x9c>
 802dfb2:	9b03      	ldr	r3, [sp, #12]
 802dfb4:	1d19      	adds	r1, r3, #4
 802dfb6:	681b      	ldr	r3, [r3, #0]
 802dfb8:	9103      	str	r1, [sp, #12]
 802dfba:	2b00      	cmp	r3, #0
 802dfbc:	bfbb      	ittet	lt
 802dfbe:	425b      	neglt	r3, r3
 802dfc0:	f042 0202 	orrlt.w	r2, r2, #2
 802dfc4:	9307      	strge	r3, [sp, #28]
 802dfc6:	9307      	strlt	r3, [sp, #28]
 802dfc8:	bfb8      	it	lt
 802dfca:	9204      	strlt	r2, [sp, #16]
 802dfcc:	7823      	ldrb	r3, [r4, #0]
 802dfce:	2b2e      	cmp	r3, #46	; 0x2e
 802dfd0:	d10c      	bne.n	802dfec <_svfiprintf_r+0x130>
 802dfd2:	7863      	ldrb	r3, [r4, #1]
 802dfd4:	2b2a      	cmp	r3, #42	; 0x2a
 802dfd6:	d135      	bne.n	802e044 <_svfiprintf_r+0x188>
 802dfd8:	9b03      	ldr	r3, [sp, #12]
 802dfda:	1d1a      	adds	r2, r3, #4
 802dfdc:	681b      	ldr	r3, [r3, #0]
 802dfde:	9203      	str	r2, [sp, #12]
 802dfe0:	2b00      	cmp	r3, #0
 802dfe2:	bfb8      	it	lt
 802dfe4:	f04f 33ff 	movlt.w	r3, #4294967295
 802dfe8:	3402      	adds	r4, #2
 802dfea:	9305      	str	r3, [sp, #20]
 802dfec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802e0b8 <_svfiprintf_r+0x1fc>
 802dff0:	7821      	ldrb	r1, [r4, #0]
 802dff2:	2203      	movs	r2, #3
 802dff4:	4650      	mov	r0, sl
 802dff6:	f7d2 f8fb 	bl	80001f0 <memchr>
 802dffa:	b140      	cbz	r0, 802e00e <_svfiprintf_r+0x152>
 802dffc:	2340      	movs	r3, #64	; 0x40
 802dffe:	eba0 000a 	sub.w	r0, r0, sl
 802e002:	fa03 f000 	lsl.w	r0, r3, r0
 802e006:	9b04      	ldr	r3, [sp, #16]
 802e008:	4303      	orrs	r3, r0
 802e00a:	3401      	adds	r4, #1
 802e00c:	9304      	str	r3, [sp, #16]
 802e00e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e012:	4826      	ldr	r0, [pc, #152]	; (802e0ac <_svfiprintf_r+0x1f0>)
 802e014:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802e018:	2206      	movs	r2, #6
 802e01a:	f7d2 f8e9 	bl	80001f0 <memchr>
 802e01e:	2800      	cmp	r0, #0
 802e020:	d038      	beq.n	802e094 <_svfiprintf_r+0x1d8>
 802e022:	4b23      	ldr	r3, [pc, #140]	; (802e0b0 <_svfiprintf_r+0x1f4>)
 802e024:	bb1b      	cbnz	r3, 802e06e <_svfiprintf_r+0x1b2>
 802e026:	9b03      	ldr	r3, [sp, #12]
 802e028:	3307      	adds	r3, #7
 802e02a:	f023 0307 	bic.w	r3, r3, #7
 802e02e:	3308      	adds	r3, #8
 802e030:	9303      	str	r3, [sp, #12]
 802e032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e034:	4433      	add	r3, r6
 802e036:	9309      	str	r3, [sp, #36]	; 0x24
 802e038:	e767      	b.n	802df0a <_svfiprintf_r+0x4e>
 802e03a:	fb0c 3202 	mla	r2, ip, r2, r3
 802e03e:	460c      	mov	r4, r1
 802e040:	2001      	movs	r0, #1
 802e042:	e7a5      	b.n	802df90 <_svfiprintf_r+0xd4>
 802e044:	2300      	movs	r3, #0
 802e046:	3401      	adds	r4, #1
 802e048:	9305      	str	r3, [sp, #20]
 802e04a:	4619      	mov	r1, r3
 802e04c:	f04f 0c0a 	mov.w	ip, #10
 802e050:	4620      	mov	r0, r4
 802e052:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e056:	3a30      	subs	r2, #48	; 0x30
 802e058:	2a09      	cmp	r2, #9
 802e05a:	d903      	bls.n	802e064 <_svfiprintf_r+0x1a8>
 802e05c:	2b00      	cmp	r3, #0
 802e05e:	d0c5      	beq.n	802dfec <_svfiprintf_r+0x130>
 802e060:	9105      	str	r1, [sp, #20]
 802e062:	e7c3      	b.n	802dfec <_svfiprintf_r+0x130>
 802e064:	fb0c 2101 	mla	r1, ip, r1, r2
 802e068:	4604      	mov	r4, r0
 802e06a:	2301      	movs	r3, #1
 802e06c:	e7f0      	b.n	802e050 <_svfiprintf_r+0x194>
 802e06e:	ab03      	add	r3, sp, #12
 802e070:	9300      	str	r3, [sp, #0]
 802e072:	462a      	mov	r2, r5
 802e074:	4b0f      	ldr	r3, [pc, #60]	; (802e0b4 <_svfiprintf_r+0x1f8>)
 802e076:	a904      	add	r1, sp, #16
 802e078:	4638      	mov	r0, r7
 802e07a:	f3af 8000 	nop.w
 802e07e:	1c42      	adds	r2, r0, #1
 802e080:	4606      	mov	r6, r0
 802e082:	d1d6      	bne.n	802e032 <_svfiprintf_r+0x176>
 802e084:	89ab      	ldrh	r3, [r5, #12]
 802e086:	065b      	lsls	r3, r3, #25
 802e088:	f53f af2c 	bmi.w	802dee4 <_svfiprintf_r+0x28>
 802e08c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e08e:	b01d      	add	sp, #116	; 0x74
 802e090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e094:	ab03      	add	r3, sp, #12
 802e096:	9300      	str	r3, [sp, #0]
 802e098:	462a      	mov	r2, r5
 802e09a:	4b06      	ldr	r3, [pc, #24]	; (802e0b4 <_svfiprintf_r+0x1f8>)
 802e09c:	a904      	add	r1, sp, #16
 802e09e:	4638      	mov	r0, r7
 802e0a0:	f7ff f93c 	bl	802d31c <_printf_i>
 802e0a4:	e7eb      	b.n	802e07e <_svfiprintf_r+0x1c2>
 802e0a6:	bf00      	nop
 802e0a8:	08032b98 	.word	0x08032b98
 802e0ac:	08032ba2 	.word	0x08032ba2
 802e0b0:	00000000 	.word	0x00000000
 802e0b4:	0802de05 	.word	0x0802de05
 802e0b8:	08032b9e 	.word	0x08032b9e

0802e0bc <_read_r>:
 802e0bc:	b538      	push	{r3, r4, r5, lr}
 802e0be:	4d07      	ldr	r5, [pc, #28]	; (802e0dc <_read_r+0x20>)
 802e0c0:	4604      	mov	r4, r0
 802e0c2:	4608      	mov	r0, r1
 802e0c4:	4611      	mov	r1, r2
 802e0c6:	2200      	movs	r2, #0
 802e0c8:	602a      	str	r2, [r5, #0]
 802e0ca:	461a      	mov	r2, r3
 802e0cc:	f7d3 fe82 	bl	8001dd4 <_read>
 802e0d0:	1c43      	adds	r3, r0, #1
 802e0d2:	d102      	bne.n	802e0da <_read_r+0x1e>
 802e0d4:	682b      	ldr	r3, [r5, #0]
 802e0d6:	b103      	cbz	r3, 802e0da <_read_r+0x1e>
 802e0d8:	6023      	str	r3, [r4, #0]
 802e0da:	bd38      	pop	{r3, r4, r5, pc}
 802e0dc:	20009914 	.word	0x20009914

0802e0e0 <_malloc_usable_size_r>:
 802e0e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e0e4:	1f18      	subs	r0, r3, #4
 802e0e6:	2b00      	cmp	r3, #0
 802e0e8:	bfbc      	itt	lt
 802e0ea:	580b      	ldrlt	r3, [r1, r0]
 802e0ec:	18c0      	addlt	r0, r0, r3
 802e0ee:	4770      	bx	lr

0802e0f0 <_init>:
 802e0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e0f2:	bf00      	nop
 802e0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802e0f6:	bc08      	pop	{r3}
 802e0f8:	469e      	mov	lr, r3
 802e0fa:	4770      	bx	lr

0802e0fc <_fini>:
 802e0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e0fe:	bf00      	nop
 802e100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802e102:	bc08      	pop	{r3}
 802e104:	469e      	mov	lr, r3
 802e106:	4770      	bx	lr
